
AccelerometerTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000009d8  00800100  00002d5c  00002df0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800ad8  00800ad8  000037c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000037c8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000228  00000000  00000000  000037f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003ba1  00000000  00000000  00003a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b54  00000000  00000000  000075c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001d39  00000000  00000000  00008115  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000c8c  00000000  00000000  00009e50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000133d  00000000  00000000  0000aadc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004597  00000000  00000000  0000be19  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d8  00000000  00000000  000103b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
       6:	00 00       	nop
       8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
       a:	00 00       	nop
       c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
       e:	00 00       	nop
      10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
      12:	00 00       	nop
      14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
      16:	00 00       	nop
      18:	02 c2       	rjmp	.+1028   	; 0x41e <__vector_6>
      1a:	00 00       	nop
      1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
      1e:	00 00       	nop
      20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
      36:	00 00       	nop
      38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 1f 10 	jmp	0x203e	; 0x203e <__vector_16>
      44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
      46:	00 00       	nop
      48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 2e 10 	jmp	0x205c	; 0x205c <__vector_20>
      54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 92 10 	jmp	0x2124	; 0x2124 <__vector_22>
      5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
      5e:	00 00       	nop
      60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
      62:	00 00       	nop
      64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
      66:	00 00       	nop
      68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <__vector_28>
      74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__vector_30>
      7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	32 0b       	sbc	r19, r18
      8e:	44 0b       	sbc	r20, r20
      90:	1b 0c       	add	r1, r11
      92:	07 0c       	add	r0, r7
      94:	1b 0c       	add	r1, r11
      96:	1b 0c       	add	r1, r11
      98:	1b 0c       	add	r1, r11
      9a:	1b 0c       	add	r1, r11
      9c:	1b 0c       	add	r1, r11
      9e:	fa 0b       	sbc	r31, r26
      a0:	1b 0c       	add	r1, r11
      a2:	1b 0c       	add	r1, r11
      a4:	1b 0c       	add	r1, r11
      a6:	1b 0c       	add	r1, r11
      a8:	1b 0c       	add	r1, r11
      aa:	1b 0c       	add	r1, r11
      ac:	ff 0b       	sbc	r31, r31
      ae:	1b 0c       	add	r1, r11
      b0:	86 0b       	sbc	r24, r22
      b2:	1b 0c       	add	r1, r11
      b4:	1b 0c       	add	r1, r11
      b6:	c2 0b       	sbc	r28, r18
      b8:	08 4a       	sbci	r16, 0xA8	; 168
      ba:	d7 3b       	cpi	r29, 0xB7	; 183
      bc:	3b ce       	rjmp	.-906    	; 0xfffffd34 <__eeprom_end+0xff7efd34>
      be:	01 6e       	ori	r16, 0xE1	; 225
      c0:	84 bc       	out	0x24, r8	; 36
      c2:	bf fd       	.word	0xfdbf	; ????
      c4:	c1 2f       	mov	r28, r17
      c6:	3d 6c       	ori	r19, 0xCD	; 205
      c8:	74 31       	cpi	r23, 0x14	; 20
      ca:	9a bd       	out	0x2a, r25	; 42
      cc:	56 83       	std	Z+6, r21	; 0x06
      ce:	3d da       	rcall	.-2950   	; 0xfffff54a <__eeprom_end+0xff7ef54a>
      d0:	3d 00       	.word	0x003d	; ????
      d2:	c7 7f       	andi	r28, 0xF7	; 247
      d4:	11 be       	out	0x31, r1	; 49
      d6:	d9 e4       	ldi	r29, 0x49	; 73
      d8:	bb 4c       	sbci	r27, 0xCB	; 203
      da:	3e 91       	ld	r19, -X
      dc:	6b aa       	std	Y+51, r6	; 0x33
      de:	aa be       	out	0x3a, r10	; 58
      e0:	00 00       	nop
      e2:	00 80       	ld	r0, Z
      e4:	3f 00       	.word	0x003f	; ????

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d0 e4       	ldi	r29, 0x40	; 64
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
      f2:	1a e0       	ldi	r17, 0x0A	; 10
      f4:	a0 e0       	ldi	r26, 0x00	; 0
      f6:	b1 e0       	ldi	r27, 0x01	; 1
      f8:	ec e5       	ldi	r30, 0x5C	; 92
      fa:	fd e2       	ldi	r31, 0x2D	; 45
      fc:	00 e0       	ldi	r16, 0x00	; 0
      fe:	0b bf       	out	0x3b, r16	; 59
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x14>
     102:	07 90       	elpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	a8 3d       	cpi	r26, 0xD8	; 216
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0x10>

0000010c <__do_clear_bss>:
     10c:	2a e0       	ldi	r18, 0x0A	; 10
     10e:	a8 ed       	ldi	r26, 0xD8	; 216
     110:	ba e0       	ldi	r27, 0x0A	; 10
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	a8 3f       	cpi	r26, 0xF8	; 248
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	03 d0       	rcall	.+6      	; 0x124 <main>
     11e:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <_exit>

00000122 <__bad_interrupt>:
     122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#include "Trace.h"

bool IsAccelerometerInterruptFired;

int main(void)
{
     124:	4f 92       	push	r4
     126:	5f 92       	push	r5
     128:	6f 92       	push	r6
     12a:	7f 92       	push	r7
     12c:	8f 92       	push	r8
     12e:	9f 92       	push	r9
     130:	af 92       	push	r10
     132:	bf 92       	push	r11
     134:	cf 92       	push	r12
     136:	df 92       	push	r13
     138:	ef 92       	push	r14
     13a:	ff 92       	push	r15
     13c:	0f 93       	push	r16
     13e:	1f 93       	push	r17
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
     144:	cd b7       	in	r28, 0x3d	; 61
     146:	de b7       	in	r29, 0x3e	; 62
     148:	a1 97       	sbiw	r28, 0x21	; 33
     14a:	0f b6       	in	r0, 0x3f	; 63
     14c:	f8 94       	cli
     14e:	de bf       	out	0x3e, r29	; 62
     150:	0f be       	out	0x3f, r0	; 63
     152:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     154:	2f ef       	ldi	r18, 0xFF	; 255
     156:	3c e2       	ldi	r19, 0x2C	; 44
     158:	81 e3       	ldi	r24, 0x31	; 49
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	21 50       	subi	r18, 0x01	; 1
     15e:	30 40       	sbci	r19, 0x00	; 0
     160:	80 40       	sbci	r24, 0x00	; 0
     162:	90 40       	sbci	r25, 0x00	; 0
     164:	d9 f7       	brne	.-10     	; 0x15c <main+0x38>
     166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x44>
     168:	00 00       	nop
	
	//
	// Initialize Tracing
	//
	
	InitTrace(F_CPU, ERROR_LEVEL | INFO_LEVEL);
     16a:	45 e0       	ldi	r20, 0x05	; 5
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	72 e1       	ldi	r23, 0x12	; 18
     170:	8a e7       	ldi	r24, 0x7A	; 122
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	28 d7       	rcall	.+3664   	; 0xfc6 <InitTrace>
	
	//
	// Initialize TWI
	//

	if(!InitTWI(TWI_MASTER, NULL, NULL))
     176:	40 e0       	ldi	r20, 0x00	; 0
     178:	50 e0       	ldi	r21, 0x00	; 0
     17a:	60 e0       	ldi	r22, 0x00	; 0
     17c:	70 e0       	ldi	r23, 0x00	; 0
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	0e 94 36 0c 	call	0x186c	; 0x186c <InitTWI>
     184:	88 23       	and	r24, r24
     186:	09 f4       	brne	.+2      	; 0x18a <main+0x66>
     188:	31 c1       	rjmp	.+610    	; 0x3ec <main+0x2c8>
	
	//
	// Initialize Accelerometer
	//
	
	if(!InitADXL345DevAddress(TRUE))
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	e8 d3       	rcall	.+2000   	; 0x95e <InitADXL345DevAddress>
     18e:	88 23       	and	r24, r24
     190:	09 f4       	brne	.+2      	; 0x194 <main+0x70>
     192:	2c c1       	rjmp	.+600    	; 0x3ec <main+0x2c8>
	
	//
	// Place Accelerometer in accelerometer in standby mode
	//
	
	if(!EnableDisableADXL345StandbyMode(TRUE))
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	6e d4       	rcall	.+2268   	; 0xa74 <EnableDisableADXL345StandbyMode>
     198:	88 23       	and	r24, r24
     19a:	09 f4       	brne	.+2      	; 0x19e <main+0x7a>
     19c:	27 c1       	rjmp	.+590    	; 0x3ec <main+0x2c8>
	
	FifoCtl.AsUINT8 = 0;
	
	FifoCtl.FIFOMode = FIFO;
	
	FifoCtl.Samples = 20;
     19e:	84 e5       	ldi	r24, 0x54	; 84
     1a0:	8e 83       	std	Y+6, r24	; 0x06
	
	if (!ProgramADXL345FifoControl(&FifoCtl))
     1a2:	ce 01       	movw	r24, r28
     1a4:	06 96       	adiw	r24, 0x06	; 6
     1a6:	b0 d5       	rcall	.+2912   	; 0xd08 <ProgramADXL345FifoControl>
     1a8:	88 23       	and	r24, r24
     1aa:	09 f4       	brne	.+2      	; 0x1ae <main+0x8a>
     1ac:	1f c1       	rjmp	.+574    	; 0x3ec <main+0x2c8>
	
	ActInactCtl.ActXEnable = 1;
	
	ActInactCtl.ActYEnable = 1;
	
	ActInactCtl.ActZEnable = 1;
     1ae:	80 e7       	ldi	r24, 0x70	; 112
     1b0:	8f 83       	std	Y+7, r24	; 0x07
	
	if (!ProgramADXL345ActivityInactivityDetection(&ActInactCtl, 0x8, 0x8, 0xf))
     1b2:	2f e0       	ldi	r18, 0x0F	; 15
     1b4:	48 e0       	ldi	r20, 0x08	; 8
     1b6:	68 e0       	ldi	r22, 0x08	; 8
     1b8:	ce 01       	movw	r24, r28
     1ba:	07 96       	adiw	r24, 0x07	; 7
     1bc:	89 d6       	rcall	.+3346   	; 0xed0 <ProgramADXL345ActivityInactivityDetection>
     1be:	88 23       	and	r24, r24
     1c0:	09 f4       	brne	.+2      	; 0x1c4 <main+0xa0>
     1c2:	14 c1       	rjmp	.+552    	; 0x3ec <main+0x2c8>
	
	//
	// Program Data Offset
	//
	
	DataOffset.OffsetX = -1;
     1c4:	8f ef       	ldi	r24, 0xFF	; 255
     1c6:	8b 83       	std	Y+3, r24	; 0x03
	
	DataOffset.OffsetY = -4;
     1c8:	8c ef       	ldi	r24, 0xFC	; 252
     1ca:	8c 83       	std	Y+4, r24	; 0x04
	
	DataOffset.OffsetZ = 6;
     1cc:	86 e0       	ldi	r24, 0x06	; 6
     1ce:	8d 83       	std	Y+5, r24	; 0x05
	
	if(!ProgramADXL345DataFormat(FOUR_G, TRUE, &DataOffset, HUNDRED_HZ))
     1d0:	2a e0       	ldi	r18, 0x0A	; 10
     1d2:	ae 01       	movw	r20, r28
     1d4:	4d 5f       	subi	r20, 0xFD	; 253
     1d6:	5f 4f       	sbci	r21, 0xFF	; 255
     1d8:	61 e0       	ldi	r22, 0x01	; 1
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	bd d5       	rcall	.+2938   	; 0xd58 <ProgramADXL345DataFormat>
     1de:	88 23       	and	r24, r24
     1e0:	09 f4       	brne	.+2      	; 0x1e4 <main+0xc0>
     1e2:	04 c1       	rjmp	.+520    	; 0x3ec <main+0x2c8>
	// Program Interrupts
	//
	
	IntEnable.AsUINT8 = 0;
	
	IntEnable.DataReady = 1;
     1e4:	80 e8       	ldi	r24, 0x80	; 128
     1e6:	89 83       	std	Y+1, r24	; 0x01
	
	IntMap.AsUINT8 = 0;
	
	IntMap.DataReady = 1;
     1e8:	8a 83       	std	Y+2, r24	; 0x02
	
	if(!ProgramADXL345Interrupts(&IntEnable, &IntMap))
     1ea:	be 01       	movw	r22, r28
     1ec:	6e 5f       	subi	r22, 0xFE	; 254
     1ee:	7f 4f       	sbci	r23, 0xFF	; 255
     1f0:	ce 01       	movw	r24, r28
     1f2:	01 96       	adiw	r24, 0x01	; 1
     1f4:	47 d5       	rcall	.+2702   	; 0xc84 <ProgramADXL345Interrupts>
     1f6:	88 23       	and	r24, r24
     1f8:	09 f4       	brne	.+2      	; 0x1fc <main+0xd8>
     1fa:	f8 c0       	rjmp	.+496    	; 0x3ec <main+0x2c8>
	{
		goto Exit;
	}
	
	IsAccelerometerInterruptFired = FALSE;
     1fc:	10 92 de 0a 	sts	0x0ADE, r1
	
	//
	// Set PORT C - Pin 5 as input
	//
	
	DDRC &= ~(1 << DDC5);
     200:	3d 98       	cbi	0x07, 5	; 7
	
	//
	// Turn on the pull up resistor for PORT C - Pin 5
	//
	
	PORTC |= (1 << PORTC5);
     202:	45 9a       	sbi	0x08, 5	; 8
	
	PCMSK2 = PCMSK2 | (0x1 << PCINT21);
     204:	ed e6       	ldi	r30, 0x6D	; 109
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	80 81       	ld	r24, Z
     20a:	80 62       	ori	r24, 0x20	; 32
     20c:	80 83       	st	Z, r24
	
	PCICR = PCICR | (0x1 << PCIE2);
     20e:	e8 e6       	ldi	r30, 0x68	; 104
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	84 60       	ori	r24, 0x04	; 4
     216:	80 83       	st	Z, r24
	
	sei();
     218:	78 94       	sei
	
	//
	// Flush FIFO
	//
	
	if(!FlushADXL345Fifo())
     21a:	ff d1       	rcall	.+1022   	; 0x61a <FlushADXL345Fifo>
     21c:	88 23       	and	r24, r24
     21e:	09 f4       	brne	.+2      	; 0x222 <main+0xfe>
     220:	e5 c0       	rjmp	.+458    	; 0x3ec <main+0x2c8>
	
	//
	// Program Accelerometer Power Mode
	//
	
	if(!ProgramADXL345PowerCtl(FULL_POWER, NO_WAKEUP))
     222:	64 e0       	ldi	r22, 0x04	; 4
     224:	82 e0       	ldi	r24, 0x02	; 2
     226:	7c d4       	rcall	.+2296   	; 0xb20 <ProgramADXL345PowerCtl>
     228:	88 23       	and	r24, r24
     22a:	09 f4       	brne	.+2      	; 0x22e <main+0x10a>
     22c:	df c0       	rjmp	.+446    	; 0x3ec <main+0x2c8>
	{
		goto Exit;
	}
	
	SendTrace(INFO_LEVEL, "Accelerometer Setup Complete\r\n");
     22e:	87 e0       	ldi	r24, 0x07	; 7
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	9f 93       	push	r25
     234:	8f 93       	push	r24
     236:	84 e0       	ldi	r24, 0x04	; 4
     238:	8f 93       	push	r24
     23a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <SendTrace>
     23e:	0f 90       	pop	r0
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
				if(!ReadADXL345AccAndTiltData(DEGREES, &AccTiltData))
				{
					continue;
				}
					
				SendTrace(INFO_LEVEL, "X Axis Acc = %fg\t", AccTiltData.AccX);
     244:	0f 2e       	mov	r0, r31
     246:	fa e6       	ldi	r31, 0x6A	; 106
     248:	8f 2e       	mov	r8, r31
     24a:	f1 e0       	ldi	r31, 0x01	; 1
     24c:	9f 2e       	mov	r9, r31
     24e:	f0 2d       	mov	r31, r0
					
				SendTrace(INFO_LEVEL, "Y Axis Acc = %fg\t", AccTiltData.AccY);
     250:	0f 2e       	mov	r0, r31
     252:	fc e7       	ldi	r31, 0x7C	; 124
     254:	af 2e       	mov	r10, r31
     256:	f1 e0       	ldi	r31, 0x01	; 1
     258:	bf 2e       	mov	r11, r31
     25a:	f0 2d       	mov	r31, r0
					
				SendTrace(INFO_LEVEL, "Z Axis Acc = %fg\r\n", AccTiltData.AccZ);
     25c:	0f 2e       	mov	r0, r31
     25e:	fe e8       	ldi	r31, 0x8E	; 142
     260:	cf 2e       	mov	r12, r31
     262:	f1 e0       	ldi	r31, 0x01	; 1
     264:	df 2e       	mov	r13, r31
     266:	f0 2d       	mov	r31, r0
				
				SendTrace(INFO_LEVEL, "X Axis Tilt = %f degrees\t", AccTiltData.TiltX);
     268:	0f 2e       	mov	r0, r31
     26a:	f1 ea       	ldi	r31, 0xA1	; 161
     26c:	6f 2e       	mov	r6, r31
     26e:	f1 e0       	ldi	r31, 0x01	; 1
     270:	7f 2e       	mov	r7, r31
     272:	f0 2d       	mov	r31, r0
	
	SendTrace(INFO_LEVEL, "Accelerometer Setup Complete\r\n");
	
	while(1)
	{
		if (!ReadADXL345InterruptSource(&IntSource))
     274:	ce 01       	movw	r24, r28
     276:	08 96       	adiw	r24, 0x08	; 8
     278:	54 d1       	rcall	.+680    	; 0x522 <ReadADXL345InterruptSource>
     27a:	88 23       	and	r24, r24
     27c:	d9 f3       	breq	.-10     	; 0x274 <main+0x150>
		{
			continue;
		}
		
		SendTrace(INFO_LEVEL, "Interrupt Source = 0x%x\r\n", IntSource.AsUINT8);
     27e:	88 85       	ldd	r24, Y+8	; 0x08
     280:	1f 92       	push	r1
     282:	8f 93       	push	r24
     284:	86 e2       	ldi	r24, 0x26	; 38
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	9f 93       	push	r25
     28a:	8f 93       	push	r24
     28c:	84 e0       	ldi	r24, 0x04	; 4
     28e:	8f 93       	push	r24
     290:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <SendTrace>
		
		if (IsAccelerometerInterruptFired || IntSource.DataReady)
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	0f 90       	pop	r0
     29c:	0f 90       	pop	r0
     29e:	80 91 de 0a 	lds	r24, 0x0ADE
     2a2:	81 11       	cpse	r24, r1
     2a4:	03 c0       	rjmp	.+6      	; 0x2ac <main+0x188>
     2a6:	88 85       	ldd	r24, Y+8	; 0x08
     2a8:	88 23       	and	r24, r24
     2aa:	24 f7       	brge	.-56     	; 0x274 <main+0x150>
		{
			IsAccelerometerInterruptFired = FALSE;
     2ac:	10 92 de 0a 	sts	0x0ADE, r1
			
			if (!ReadADXL345FifoStatus(&FifoStatus))
     2b0:	ce 01       	movw	r24, r28
     2b2:	09 96       	adiw	r24, 0x09	; 9
     2b4:	60 d1       	rcall	.+704    	; 0x576 <ReadADXL345FifoStatus>
     2b6:	88 23       	and	r24, r24
     2b8:	e9 f2       	breq	.-70     	; 0x274 <main+0x150>
			{
				continue;
			}
				
			SendTrace(INFO_LEVEL, "Fifo Entries = %d\r\n", FifoStatus.Entries);
     2ba:	89 85       	ldd	r24, Y+9	; 0x09
     2bc:	8f 73       	andi	r24, 0x3F	; 63
     2be:	1f 92       	push	r1
     2c0:	8f 93       	push	r24
     2c2:	80 e4       	ldi	r24, 0x40	; 64
     2c4:	91 e0       	ldi	r25, 0x01	; 1
     2c6:	9f 93       	push	r25
     2c8:	8f 93       	push	r24
     2ca:	14 e0       	ldi	r17, 0x04	; 4
     2cc:	1f 93       	push	r17
     2ce:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <SendTrace>
				
			SendTrace(INFO_LEVEL, "Fifo Triggered = %d\r\n", FifoStatus.FIFOTrig); 
     2d2:	89 85       	ldd	r24, Y+9	; 0x09
     2d4:	87 fb       	bst	r24, 7
     2d6:	88 27       	eor	r24, r24
     2d8:	80 f9       	bld	r24, 0
     2da:	1f 92       	push	r1
     2dc:	8f 93       	push	r24
     2de:	84 e5       	ldi	r24, 0x54	; 84
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	9f 93       	push	r25
     2e4:	8f 93       	push	r24
     2e6:	1f 93       	push	r17
     2e8:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <SendTrace>
				
			for (index=0; index < FifoStatus.Entries; index++)
     2ec:	89 85       	ldd	r24, Y+9	; 0x09
     2ee:	8f 73       	andi	r24, 0x3F	; 63
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	f8 94       	cli
     2f4:	de bf       	out	0x3e, r29	; 62
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	cd bf       	out	0x3d, r28	; 61
     2fa:	09 f4       	brne	.+2      	; 0x2fe <main+0x1da>
     2fc:	bb cf       	rjmp	.-138    	; 0x274 <main+0x150>
     2fe:	51 2c       	mov	r5, r1
				if(!ReadADXL345AccAndTiltData(DEGREES, &AccTiltData))
				{
					continue;
				}
					
				SendTrace(INFO_LEVEL, "X Axis Acc = %fg\t", AccTiltData.AccX);
     300:	68 94       	set
     302:	44 24       	eor	r4, r4
     304:	42 f8       	bld	r4, 2
					
				SendTrace(INFO_LEVEL, "Z Axis Acc = %fg\r\n", AccTiltData.AccZ);
				
				SendTrace(INFO_LEVEL, "X Axis Tilt = %f degrees\t", AccTiltData.TiltX);
				
				SendTrace(INFO_LEVEL, "Y Axis Tilt = %f degrees\t", AccTiltData.TiltY);
     306:	0f 2e       	mov	r0, r31
     308:	fb eb       	ldi	r31, 0xBB	; 187
     30a:	ef 2e       	mov	r14, r31
     30c:	f1 e0       	ldi	r31, 0x01	; 1
     30e:	ff 2e       	mov	r15, r31
     310:	f0 2d       	mov	r31, r0
				
				SendTrace(INFO_LEVEL, "Z Axis Tilt = %f degrees\r\n\r\n", AccTiltData.TiltZ);
     312:	05 ed       	ldi	r16, 0xD5	; 213
     314:	11 e0       	ldi	r17, 0x01	; 1
				
				SendTrace(INFO_LEVEL, "Y Axis Data = %dg\t", Data.DataY);
				
				SendTrace(INFO_LEVEL, "Z Axis Data = %dg\r\n", Data.DataZ);*/
				
				if(!ReadADXL345AccAndTiltData(DEGREES, &AccTiltData))
     316:	be 01       	movw	r22, r28
     318:	66 5f       	subi	r22, 0xF6	; 246
     31a:	7f 4f       	sbci	r23, 0xFF	; 255
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	c0 d1       	rcall	.+896    	; 0x6a0 <ReadADXL345AccAndTiltData>
     320:	88 23       	and	r24, r24
     322:	09 f4       	brne	.+2      	; 0x326 <main+0x202>
     324:	58 c0       	rjmp	.+176    	; 0x3d6 <main+0x2b2>
				{
					continue;
				}
					
				SendTrace(INFO_LEVEL, "X Axis Acc = %fg\t", AccTiltData.AccX);
     326:	8d 85       	ldd	r24, Y+13	; 0x0d
     328:	8f 93       	push	r24
     32a:	8c 85       	ldd	r24, Y+12	; 0x0c
     32c:	8f 93       	push	r24
     32e:	8b 85       	ldd	r24, Y+11	; 0x0b
     330:	8f 93       	push	r24
     332:	8a 85       	ldd	r24, Y+10	; 0x0a
     334:	8f 93       	push	r24
     336:	9f 92       	push	r9
     338:	8f 92       	push	r8
     33a:	4f 92       	push	r4
     33c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <SendTrace>
					
				SendTrace(INFO_LEVEL, "Y Axis Acc = %fg\t", AccTiltData.AccY);
     340:	89 89       	ldd	r24, Y+17	; 0x11
     342:	8f 93       	push	r24
     344:	88 89       	ldd	r24, Y+16	; 0x10
     346:	8f 93       	push	r24
     348:	8f 85       	ldd	r24, Y+15	; 0x0f
     34a:	8f 93       	push	r24
     34c:	8e 85       	ldd	r24, Y+14	; 0x0e
     34e:	8f 93       	push	r24
     350:	bf 92       	push	r11
     352:	af 92       	push	r10
     354:	4f 92       	push	r4
     356:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <SendTrace>
					
				SendTrace(INFO_LEVEL, "Z Axis Acc = %fg\r\n", AccTiltData.AccZ);
     35a:	8d 89       	ldd	r24, Y+21	; 0x15
     35c:	8f 93       	push	r24
     35e:	8c 89       	ldd	r24, Y+20	; 0x14
     360:	8f 93       	push	r24
     362:	8b 89       	ldd	r24, Y+19	; 0x13
     364:	8f 93       	push	r24
     366:	8a 89       	ldd	r24, Y+18	; 0x12
     368:	8f 93       	push	r24
     36a:	df 92       	push	r13
     36c:	cf 92       	push	r12
     36e:	4f 92       	push	r4
     370:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <SendTrace>
				
				SendTrace(INFO_LEVEL, "X Axis Tilt = %f degrees\t", AccTiltData.TiltX);
     374:	89 8d       	ldd	r24, Y+25	; 0x19
     376:	8f 93       	push	r24
     378:	88 8d       	ldd	r24, Y+24	; 0x18
     37a:	8f 93       	push	r24
     37c:	8f 89       	ldd	r24, Y+23	; 0x17
     37e:	8f 93       	push	r24
     380:	8e 89       	ldd	r24, Y+22	; 0x16
     382:	8f 93       	push	r24
     384:	7f 92       	push	r7
     386:	6f 92       	push	r6
     388:	4f 92       	push	r4
     38a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <SendTrace>
				
				SendTrace(INFO_LEVEL, "Y Axis Tilt = %f degrees\t", AccTiltData.TiltY);
     38e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     390:	8f 93       	push	r24
     392:	8c 8d       	ldd	r24, Y+28	; 0x1c
     394:	8f 93       	push	r24
     396:	8b 8d       	ldd	r24, Y+27	; 0x1b
     398:	8f 93       	push	r24
     39a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     39c:	8f 93       	push	r24
     39e:	ff 92       	push	r15
     3a0:	ef 92       	push	r14
     3a2:	4f 92       	push	r4
     3a4:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <SendTrace>
				
				SendTrace(INFO_LEVEL, "Z Axis Tilt = %f degrees\r\n\r\n", AccTiltData.TiltZ);
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	f8 94       	cli
     3ac:	de bf       	out	0x3e, r29	; 62
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	cd bf       	out	0x3d, r28	; 61
     3b2:	89 a1       	ldd	r24, Y+33	; 0x21
     3b4:	8f 93       	push	r24
     3b6:	88 a1       	ldd	r24, Y+32	; 0x20
     3b8:	8f 93       	push	r24
     3ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
     3bc:	8f 93       	push	r24
     3be:	8e 8d       	ldd	r24, Y+30	; 0x1e
     3c0:	8f 93       	push	r24
     3c2:	1f 93       	push	r17
     3c4:	0f 93       	push	r16
     3c6:	4f 92       	push	r4
     3c8:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <SendTrace>
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	f8 94       	cli
     3d0:	de bf       	out	0x3e, r29	; 62
     3d2:	0f be       	out	0x3f, r0	; 63
     3d4:	cd bf       	out	0x3d, r28	; 61
				
			SendTrace(INFO_LEVEL, "Fifo Entries = %d\r\n", FifoStatus.Entries);
				
			SendTrace(INFO_LEVEL, "Fifo Triggered = %d\r\n", FifoStatus.FIFOTrig); 
				
			for (index=0; index < FifoStatus.Entries; index++)
     3d6:	53 94       	inc	r5
     3d8:	25 2d       	mov	r18, r5
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	89 85       	ldd	r24, Y+9	; 0x09
     3de:	8f 73       	andi	r24, 0x3F	; 63
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	28 17       	cp	r18, r24
     3e4:	39 07       	cpc	r19, r25
     3e6:	0c f4       	brge	.+2      	; 0x3ea <main+0x2c6>
     3e8:	96 cf       	rjmp	.-212    	; 0x316 <main+0x1f2>
     3ea:	44 cf       	rjmp	.-376    	; 0x274 <main+0x150>
	}
	
Exit:

	return 1;
}
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	a1 96       	adiw	r28, 0x21	; 33
     3f2:	0f b6       	in	r0, 0x3f	; 63
     3f4:	f8 94       	cli
     3f6:	de bf       	out	0x3e, r29	; 62
     3f8:	0f be       	out	0x3f, r0	; 63
     3fa:	cd bf       	out	0x3d, r28	; 61
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	ff 90       	pop	r15
     406:	ef 90       	pop	r14
     408:	df 90       	pop	r13
     40a:	cf 90       	pop	r12
     40c:	bf 90       	pop	r11
     40e:	af 90       	pop	r10
     410:	9f 90       	pop	r9
     412:	8f 90       	pop	r8
     414:	7f 90       	pop	r7
     416:	6f 90       	pop	r6
     418:	5f 90       	pop	r5
     41a:	4f 90       	pop	r4
     41c:	08 95       	ret

0000041e <__vector_6>:

ISR(PCINT2_vect)
{
     41e:	1f 92       	push	r1
     420:	0f 92       	push	r0
     422:	0f b6       	in	r0, 0x3f	; 63
     424:	0f 92       	push	r0
     426:	11 24       	eor	r1, r1
     428:	0b b6       	in	r0, 0x3b	; 59
     42a:	0f 92       	push	r0
     42c:	2f 93       	push	r18
     42e:	3f 93       	push	r19
     430:	4f 93       	push	r20
     432:	5f 93       	push	r21
     434:	6f 93       	push	r22
     436:	7f 93       	push	r23
     438:	8f 93       	push	r24
     43a:	9f 93       	push	r25
     43c:	af 93       	push	r26
     43e:	bf 93       	push	r27
     440:	ef 93       	push	r30
     442:	ff 93       	push	r31
	SendTrace(INFO_LEVEL, "Interrupt Fired\r\n");
     444:	82 ef       	ldi	r24, 0xF2	; 242
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	9f 93       	push	r25
     44a:	8f 93       	push	r24
     44c:	84 e0       	ldi	r24, 0x04	; 4
     44e:	8f 93       	push	r24
     450:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <SendTrace>
	
	IsAccelerometerInterruptFired = TRUE;
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	80 93 de 0a 	sts	0x0ADE, r24
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	ff 91       	pop	r31
     462:	ef 91       	pop	r30
     464:	bf 91       	pop	r27
     466:	af 91       	pop	r26
     468:	9f 91       	pop	r25
     46a:	8f 91       	pop	r24
     46c:	7f 91       	pop	r23
     46e:	6f 91       	pop	r22
     470:	5f 91       	pop	r21
     472:	4f 91       	pop	r20
     474:	3f 91       	pop	r19
     476:	2f 91       	pop	r18
     478:	0f 90       	pop	r0
     47a:	0b be       	out	0x3b, r0	; 59
     47c:	0f 90       	pop	r0
     47e:	0f be       	out	0x3f, r0	; 63
     480:	0f 90       	pop	r0
     482:	1f 90       	pop	r1
     484:	18 95       	reti

00000486 <ReadADXL345Register>:
	}
	
Exit:

	return Status;
}
     486:	af 92       	push	r10
     488:	bf 92       	push	r11
     48a:	cf 92       	push	r12
     48c:	df 92       	push	r13
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	1f 92       	push	r1
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
     4a0:	89 83       	std	Y+1, r24	; 0x01
     4a2:	5b 01       	movw	r10, r22
     4a4:	69 01       	movw	r12, r18
     4a6:	7a 01       	movw	r14, r20
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	2f ed       	ldi	r18, 0xDF	; 223
     4ac:	3a e0       	ldi	r19, 0x0A	; 10
     4ae:	41 e0       	ldi	r20, 0x01	; 1
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	ce 01       	movw	r24, r28
     4b8:	01 96       	adiw	r24, 0x01	; 1
     4ba:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <TwiTransmit>
     4be:	18 2f       	mov	r17, r24
     4c0:	81 11       	cpse	r24, r1
     4c2:	0c c0       	rjmp	.+24     	; 0x4dc <ReadADXL345Register+0x56>
     4c4:	24 e0       	ldi	r18, 0x04	; 4
     4c6:	32 e0       	ldi	r19, 0x02	; 2
     4c8:	3f 93       	push	r19
     4ca:	2f 93       	push	r18
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	8f 93       	push	r24
     4d0:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <SendTrace>
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	16 c0       	rjmp	.+44     	; 0x508 <ReadADXL345Register+0x82>
     4dc:	01 e0       	ldi	r16, 0x01	; 1
     4de:	2f ed       	ldi	r18, 0xDF	; 223
     4e0:	3a e0       	ldi	r19, 0x0A	; 10
     4e2:	b7 01       	movw	r22, r14
     4e4:	a6 01       	movw	r20, r12
     4e6:	c5 01       	movw	r24, r10
     4e8:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <TwiReceive>
     4ec:	18 2f       	mov	r17, r24
     4ee:	81 11       	cpse	r24, r1
     4f0:	0b c0       	rjmp	.+22     	; 0x508 <ReadADXL345Register+0x82>
     4f2:	2c e2       	ldi	r18, 0x2C	; 44
     4f4:	32 e0       	ldi	r19, 0x02	; 2
     4f6:	3f 93       	push	r19
     4f8:	2f 93       	push	r18
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	8f 93       	push	r24
     4fe:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <SendTrace>
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	81 2f       	mov	r24, r17
     50a:	0f 90       	pop	r0
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	1f 91       	pop	r17
     512:	0f 91       	pop	r16
     514:	ff 90       	pop	r15
     516:	ef 90       	pop	r14
     518:	df 90       	pop	r13
     51a:	cf 90       	pop	r12
     51c:	bf 90       	pop	r11
     51e:	af 90       	pop	r10
     520:	08 95       	ret

00000522 <ReadADXL345InterruptSource>:
     522:	cf 93       	push	r28
     524:	20 91 d8 0a 	lds	r18, 0x0AD8
     528:	21 11       	cpse	r18, r1
     52a:	0d c0       	rjmp	.+26     	; 0x546 <ReadADXL345InterruptSource+0x24>
     52c:	82 e5       	ldi	r24, 0x52	; 82
     52e:	92 e0       	ldi	r25, 0x02	; 2
     530:	9f 93       	push	r25
     532:	8f 93       	push	r24
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	8f 93       	push	r24
     538:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <SendTrace>
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	c0 e0       	ldi	r28, 0x00	; 0
     544:	15 c0       	rjmp	.+42     	; 0x570 <ReadADXL345InterruptSource+0x4e>
     546:	21 e0       	ldi	r18, 0x01	; 1
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	40 e0       	ldi	r20, 0x00	; 0
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	bc 01       	movw	r22, r24
     550:	80 e3       	ldi	r24, 0x30	; 48
     552:	99 df       	rcall	.-206    	; 0x486 <ReadADXL345Register>
     554:	c8 2f       	mov	r28, r24
     556:	81 11       	cpse	r24, r1
     558:	0b c0       	rjmp	.+22     	; 0x570 <ReadADXL345InterruptSource+0x4e>
     55a:	2f ed       	ldi	r18, 0xDF	; 223
     55c:	32 e0       	ldi	r19, 0x02	; 2
     55e:	3f 93       	push	r19
     560:	2f 93       	push	r18
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	8f 93       	push	r24
     566:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <SendTrace>
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	8c 2f       	mov	r24, r28
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <ReadADXL345FifoStatus>:
     576:	cf 93       	push	r28
     578:	20 91 d8 0a 	lds	r18, 0x0AD8
     57c:	21 11       	cpse	r18, r1
     57e:	0d c0       	rjmp	.+26     	; 0x59a <ReadADXL345FifoStatus+0x24>
     580:	82 e5       	ldi	r24, 0x52	; 82
     582:	92 e0       	ldi	r25, 0x02	; 2
     584:	9f 93       	push	r25
     586:	8f 93       	push	r24
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	8f 93       	push	r24
     58c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <SendTrace>
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	c0 e0       	ldi	r28, 0x00	; 0
     598:	15 c0       	rjmp	.+42     	; 0x5c4 <ReadADXL345FifoStatus+0x4e>
     59a:	21 e0       	ldi	r18, 0x01	; 1
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	40 e0       	ldi	r20, 0x00	; 0
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	bc 01       	movw	r22, r24
     5a4:	89 e3       	ldi	r24, 0x39	; 57
     5a6:	6f df       	rcall	.-290    	; 0x486 <ReadADXL345Register>
     5a8:	c8 2f       	mov	r28, r24
     5aa:	81 11       	cpse	r24, r1
     5ac:	0b c0       	rjmp	.+22     	; 0x5c4 <ReadADXL345FifoStatus+0x4e>
     5ae:	26 e0       	ldi	r18, 0x06	; 6
     5b0:	33 e0       	ldi	r19, 0x03	; 3
     5b2:	3f 93       	push	r19
     5b4:	2f 93       	push	r18
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	8f 93       	push	r24
     5ba:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <SendTrace>
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	8c 2f       	mov	r24, r28
     5c6:	cf 91       	pop	r28
     5c8:	08 95       	ret

000005ca <ReadADXL345RawData>:

bool ReadADXL345RawData(PRAW_DATA_XYZ RawData)
{
     5ca:	cf 93       	push	r28
	bool Status = FALSE;
	
	if (!gIsADXL345Initialized)
     5cc:	20 91 d8 0a 	lds	r18, 0x0AD8
     5d0:	21 11       	cpse	r18, r1
     5d2:	0c c0       	rjmp	.+24     	; 0x5ec <ReadADXL345RawData+0x22>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
     5d4:	82 e5       	ldi	r24, 0x52	; 82
     5d6:	92 e0       	ldi	r25, 0x02	; 2
     5d8:	9f 93       	push	r25
     5da:	8f 93       	push	r24
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	8f 93       	push	r24
     5e0:	fb d7       	rcall	.+4086   	; 0x15d8 <SendTrace>
		
		goto Exit;
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	0f 90       	pop	r0
	return Status;
}

bool ReadADXL345RawData(PRAW_DATA_XYZ RawData)
{
	bool Status = FALSE;
     5e8:	c0 e0       	ldi	r28, 0x00	; 0
	
	if (!gIsADXL345Initialized)
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
		
		goto Exit;
     5ea:	14 c0       	rjmp	.+40     	; 0x614 <ReadADXL345RawData+0x4a>
	}
	
	Status = ReadADXL345Register(ADR_DATAX0, RawData, sizeof(RAW_DATA_XYZ));
     5ec:	26 e0       	ldi	r18, 0x06	; 6
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	40 e0       	ldi	r20, 0x00	; 0
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	bc 01       	movw	r22, r24
     5f6:	82 e3       	ldi	r24, 0x32	; 50
     5f8:	46 df       	rcall	.-372    	; 0x486 <ReadADXL345Register>
     5fa:	c8 2f       	mov	r28, r24
	
	if(!Status)
     5fc:	81 11       	cpse	r24, r1
     5fe:	0a c0       	rjmp	.+20     	; 0x614 <ReadADXL345RawData+0x4a>
	{
		SendTrace(ERROR_LEVEL, "Failed to read Data Register. \r\n");
     600:	29 e5       	ldi	r18, 0x59	; 89
     602:	33 e0       	ldi	r19, 0x03	; 3
     604:	3f 93       	push	r19
     606:	2f 93       	push	r18
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	8f 93       	push	r24
     60c:	e5 d7       	rcall	.+4042   	; 0x15d8 <SendTrace>
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
	}
	
Exit:

	return Status;
}
     614:	8c 2f       	mov	r24, r28
     616:	cf 91       	pop	r28
     618:	08 95       	ret

0000061a <FlushADXL345Fifo>:

	return Status;	
}

bool FlushADXL345Fifo()
{
     61a:	ef 92       	push	r14
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	27 97       	sbiw	r28, 0x07	; 7
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	f8 94       	cli
     630:	de bf       	out	0x3e, r29	; 62
     632:	0f be       	out	0x3f, r0	; 63
     634:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char index;
	
	RAW_DATA_XYZ Data;
	
	if (!ReadADXL345FifoStatus(&FifoStatus))
     636:	ce 01       	movw	r24, r28
     638:	01 96       	adiw	r24, 0x01	; 1
     63a:	9d df       	rcall	.-198    	; 0x576 <ReadADXL345FifoStatus>
     63c:	88 23       	and	r24, r24
     63e:	f1 f0       	breq	.+60     	; 0x67c <FlushADXL345Fifo+0x62>
		Status = FALSE;
		
		goto Exit;
	}
	
	for (index=0; index < FifoStatus.Entries; index++)
     640:	89 81       	ldd	r24, Y+1	; 0x01
     642:	8f 73       	andi	r24, 0x3F	; 63
     644:	e9 f0       	breq	.+58     	; 0x680 <FlushADXL345Fifo+0x66>
     646:	f1 2c       	mov	r15, r1
	{
		if(!ReadADXL345RawData(&Data))
		{
			SendTrace(ERROR_LEVEL, "Reading data failed while attempting to flush FIFO. \r\n");
     648:	0a e7       	ldi	r16, 0x7A	; 122
     64a:	13 e0       	ldi	r17, 0x03	; 3
     64c:	ee 24       	eor	r14, r14
     64e:	e3 94       	inc	r14
		goto Exit;
	}
	
	for (index=0; index < FifoStatus.Entries; index++)
	{
		if(!ReadADXL345RawData(&Data))
     650:	ce 01       	movw	r24, r28
     652:	02 96       	adiw	r24, 0x02	; 2
     654:	ba df       	rcall	.-140    	; 0x5ca <ReadADXL345RawData>
     656:	81 11       	cpse	r24, r1
     658:	07 c0       	rjmp	.+14     	; 0x668 <FlushADXL345Fifo+0x4e>
		{
			SendTrace(ERROR_LEVEL, "Reading data failed while attempting to flush FIFO. \r\n");
     65a:	1f 93       	push	r17
     65c:	0f 93       	push	r16
     65e:	ef 92       	push	r14
     660:	bb d7       	rcall	.+3958   	; 0x15d8 <SendTrace>
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
		Status = FALSE;
		
		goto Exit;
	}
	
	for (index=0; index < FifoStatus.Entries; index++)
     668:	f3 94       	inc	r15
     66a:	2f 2d       	mov	r18, r15
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	89 81       	ldd	r24, Y+1	; 0x01
     670:	8f 73       	andi	r24, 0x3F	; 63
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	28 17       	cp	r18, r24
     676:	39 07       	cpc	r19, r25
     678:	5c f3       	brlt	.-42     	; 0x650 <FlushADXL345Fifo+0x36>
     67a:	04 c0       	rjmp	.+8      	; 0x684 <FlushADXL345Fifo+0x6a>
	
	RAW_DATA_XYZ Data;
	
	if (!ReadADXL345FifoStatus(&FifoStatus))
	{
		Status = FALSE;
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	03 c0       	rjmp	.+6      	; 0x686 <FlushADXL345Fifo+0x6c>
	return Status;	
}

bool FlushADXL345Fifo()
{
	bool Status = TRUE;
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	01 c0       	rjmp	.+2      	; 0x686 <FlushADXL345Fifo+0x6c>
     684:	81 e0       	ldi	r24, 0x01	; 1
	}
	
Exit:

	return Status;
}
     686:	27 96       	adiw	r28, 0x07	; 7
     688:	0f b6       	in	r0, 0x3f	; 63
     68a:	f8 94       	cli
     68c:	de bf       	out	0x3e, r29	; 62
     68e:	0f be       	out	0x3f, r0	; 63
     690:	cd bf       	out	0x3d, r28	; 61
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	ff 90       	pop	r15
     69c:	ef 90       	pop	r14
     69e:	08 95       	ret

000006a0 <ReadADXL345AccAndTiltData>:

	return Status;
}

bool ReadADXL345AccAndTiltData(ANGLE_UNIT AngleUnit, PACC_TILT_DATA_XYZ AccTiltData)
{
     6a0:	2f 92       	push	r2
     6a2:	3f 92       	push	r3
     6a4:	4f 92       	push	r4
     6a6:	5f 92       	push	r5
     6a8:	6f 92       	push	r6
     6aa:	7f 92       	push	r7
     6ac:	8f 92       	push	r8
     6ae:	9f 92       	push	r9
     6b0:	af 92       	push	r10
     6b2:	bf 92       	push	r11
     6b4:	cf 92       	push	r12
     6b6:	df 92       	push	r13
     6b8:	ef 92       	push	r14
     6ba:	ff 92       	push	r15
     6bc:	0f 93       	push	r16
     6be:	1f 93       	push	r17
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	cd b7       	in	r28, 0x3d	; 61
     6c6:	de b7       	in	r29, 0x3e	; 62
     6c8:	62 97       	sbiw	r28, 0x12	; 18
     6ca:	0f b6       	in	r0, 0x3f	; 63
     6cc:	f8 94       	cli
     6ce:	de bf       	out	0x3e, r29	; 62
     6d0:	0f be       	out	0x3f, r0	; 63
     6d2:	cd bf       	out	0x3d, r28	; 61
     6d4:	08 2f       	mov	r16, r24
     6d6:	1b 01       	movw	r2, r22
	
	double RadToDegree;
	
	RAW_DATA_XYZ RawData;
	
	if (!gIsADXL345Initialized)
     6d8:	80 91 d8 0a 	lds	r24, 0x0AD8
     6dc:	81 11       	cpse	r24, r1
     6de:	0c c0       	rjmp	.+24     	; 0x6f8 <ReadADXL345AccAndTiltData+0x58>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
     6e0:	82 e5       	ldi	r24, 0x52	; 82
     6e2:	92 e0       	ldi	r25, 0x02	; 2
     6e4:	9f 93       	push	r25
     6e6:	8f 93       	push	r24
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	8f 93       	push	r24
     6ec:	75 d7       	rcall	.+3818   	; 0x15d8 <SendTrace>
		
		goto Exit;
     6ee:	0f 90       	pop	r0
     6f0:	0f 90       	pop	r0
     6f2:	0f 90       	pop	r0
	return Status;
}

bool ReadADXL345AccAndTiltData(ANGLE_UNIT AngleUnit, PACC_TILT_DATA_XYZ AccTiltData)
{
	bool Status = FALSE;
     6f4:	10 e0       	ldi	r17, 0x00	; 0
	
	if (!gIsADXL345Initialized)
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
		
		goto Exit;
     6f6:	e4 c0       	rjmp	.+456    	; 0x8c0 <ReadADXL345AccAndTiltData+0x220>
	}
	
	Status = ReadADXL345Register(ADR_DATAX0, &RawData, sizeof(RAW_DATA_XYZ));
     6f8:	26 e0       	ldi	r18, 0x06	; 6
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	be 01       	movw	r22, r28
     702:	6f 5f       	subi	r22, 0xFF	; 255
     704:	7f 4f       	sbci	r23, 0xFF	; 255
     706:	82 e3       	ldi	r24, 0x32	; 50
     708:	be de       	rcall	.-644    	; 0x486 <ReadADXL345Register>
     70a:	18 2f       	mov	r17, r24
	
	if(!Status)
     70c:	81 11       	cpse	r24, r1
     70e:	0b c0       	rjmp	.+22     	; 0x726 <ReadADXL345AccAndTiltData+0x86>
	{
		SendTrace(ERROR_LEVEL, "Failed to read Data Register. \r\n");
     710:	89 e5       	ldi	r24, 0x59	; 89
     712:	93 e0       	ldi	r25, 0x03	; 3
     714:	9f 93       	push	r25
     716:	8f 93       	push	r24
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	8f 93       	push	r24
     71c:	5d d7       	rcall	.+3770   	; 0x15d8 <SendTrace>
		
		goto Exit;
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	cd c0       	rjmp	.+410    	; 0x8c0 <ReadADXL345AccAndTiltData+0x220>
	
	//
	// Calculate G Data in X, Y and Z axis
	//
	
	AccTiltData->AccX = RawData.DataX / LsbPerG;
     726:	69 81       	ldd	r22, Y+1	; 0x01
     728:	7a 81       	ldd	r23, Y+2	; 0x02
     72a:	88 27       	eor	r24, r24
     72c:	77 fd       	sbrc	r23, 7
     72e:	80 95       	com	r24
     730:	98 2f       	mov	r25, r24
     732:	0e 94 93 12 	call	0x2526	; 0x2526 <__floatsisf>
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	40 e8       	ldi	r20, 0x80	; 128
     73c:	5b e3       	ldi	r21, 0x3B	; 59
     73e:	0e 94 bd 13 	call	0x277a	; 0x277a <__mulsf3>
     742:	4b 01       	movw	r8, r22
     744:	5c 01       	movw	r10, r24
     746:	f1 01       	movw	r30, r2
     748:	60 83       	st	Z, r22
     74a:	71 83       	std	Z+1, r23	; 0x01
     74c:	82 83       	std	Z+2, r24	; 0x02
     74e:	93 83       	std	Z+3, r25	; 0x03
	
	AccTiltData->AccY = RawData.DataY / LsbPerG;
     750:	6b 81       	ldd	r22, Y+3	; 0x03
     752:	7c 81       	ldd	r23, Y+4	; 0x04
     754:	88 27       	eor	r24, r24
     756:	77 fd       	sbrc	r23, 7
     758:	80 95       	com	r24
     75a:	98 2f       	mov	r25, r24
     75c:	0e 94 93 12 	call	0x2526	; 0x2526 <__floatsisf>
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	40 e8       	ldi	r20, 0x80	; 128
     766:	5b e3       	ldi	r21, 0x3B	; 59
     768:	0e 94 bd 13 	call	0x277a	; 0x277a <__mulsf3>
     76c:	6b 01       	movw	r12, r22
     76e:	7c 01       	movw	r14, r24
     770:	f1 01       	movw	r30, r2
     772:	64 83       	std	Z+4, r22	; 0x04
     774:	75 83       	std	Z+5, r23	; 0x05
     776:	86 83       	std	Z+6, r24	; 0x06
     778:	97 83       	std	Z+7, r25	; 0x07
	
	AccTiltData->AccZ = RawData.DataZ / LsbPerG;
     77a:	6d 81       	ldd	r22, Y+5	; 0x05
     77c:	7e 81       	ldd	r23, Y+6	; 0x06
     77e:	88 27       	eor	r24, r24
     780:	77 fd       	sbrc	r23, 7
     782:	80 95       	com	r24
     784:	98 2f       	mov	r25, r24
     786:	0e 94 93 12 	call	0x2526	; 0x2526 <__floatsisf>
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	40 e8       	ldi	r20, 0x80	; 128
     790:	5b e3       	ldi	r21, 0x3B	; 59
     792:	0e 94 bd 13 	call	0x277a	; 0x277a <__mulsf3>
     796:	2b 01       	movw	r4, r22
     798:	3c 01       	movw	r6, r24
     79a:	f1 01       	movw	r30, r2
     79c:	60 87       	std	Z+8, r22	; 0x08
     79e:	71 87       	std	Z+9, r23	; 0x09
     7a0:	82 87       	std	Z+10, r24	; 0x0a
     7a2:	93 87       	std	Z+11, r25	; 0x0b
	
	//
	// Calculate Tilt in X, Y and Z axis
	//
	
	DataXSqrd = pow(AccTiltData->AccX, 2.0);
     7a4:	a5 01       	movw	r20, r10
     7a6:	94 01       	movw	r18, r8
     7a8:	c5 01       	movw	r24, r10
     7aa:	b4 01       	movw	r22, r8
     7ac:	0e 94 bd 13 	call	0x277a	; 0x277a <__mulsf3>
     7b0:	6f 83       	std	Y+7, r22	; 0x07
     7b2:	78 87       	std	Y+8, r23	; 0x08
     7b4:	89 87       	std	Y+9, r24	; 0x09
     7b6:	9a 87       	std	Y+10, r25	; 0x0a
	
	DataYSqrd = pow(AccTiltData->AccY, 2.0);
     7b8:	a7 01       	movw	r20, r14
     7ba:	96 01       	movw	r18, r12
     7bc:	c7 01       	movw	r24, r14
     7be:	b6 01       	movw	r22, r12
     7c0:	0e 94 bd 13 	call	0x277a	; 0x277a <__mulsf3>
     7c4:	6b 87       	std	Y+11, r22	; 0x0b
     7c6:	7c 87       	std	Y+12, r23	; 0x0c
     7c8:	8d 87       	std	Y+13, r24	; 0x0d
     7ca:	9e 87       	std	Y+14, r25	; 0x0e
	
	DataZSqrd = pow(AccTiltData->AccZ, 2.0);
     7cc:	a3 01       	movw	r20, r6
     7ce:	92 01       	movw	r18, r4
     7d0:	c3 01       	movw	r24, r6
     7d2:	b2 01       	movw	r22, r4
     7d4:	0e 94 bd 13 	call	0x277a	; 0x277a <__mulsf3>
     7d8:	6f 87       	std	Y+15, r22	; 0x0f
     7da:	78 8b       	std	Y+16, r23	; 0x10
     7dc:	89 8b       	std	Y+17, r24	; 0x11
     7de:	9a 8b       	std	Y+18, r25	; 0x12
	
	AccTiltData->TiltX = atan2 (AccTiltData->AccX, sqrt(DataYSqrd + DataZSqrd));
     7e0:	9b 01       	movw	r18, r22
     7e2:	ac 01       	movw	r20, r24
     7e4:	6b 85       	ldd	r22, Y+11	; 0x0b
     7e6:	7c 85       	ldd	r23, Y+12	; 0x0c
     7e8:	8d 85       	ldd	r24, Y+13	; 0x0d
     7ea:	9e 85       	ldd	r25, Y+14	; 0x0e
     7ec:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__addsf3>
     7f0:	0e 94 24 14 	call	0x2848	; 0x2848 <sqrt>
     7f4:	9b 01       	movw	r18, r22
     7f6:	ac 01       	movw	r20, r24
     7f8:	c5 01       	movw	r24, r10
     7fa:	b4 01       	movw	r22, r8
     7fc:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <atan2>
     800:	4b 01       	movw	r8, r22
     802:	5c 01       	movw	r10, r24
     804:	f1 01       	movw	r30, r2
     806:	64 87       	std	Z+12, r22	; 0x0c
     808:	75 87       	std	Z+13, r23	; 0x0d
     80a:	86 87       	std	Z+14, r24	; 0x0e
     80c:	97 87       	std	Z+15, r25	; 0x0f
	
	AccTiltData->TiltY = atan2 (AccTiltData->AccY, sqrt(DataXSqrd + DataZSqrd));
     80e:	2f 85       	ldd	r18, Y+15	; 0x0f
     810:	38 89       	ldd	r19, Y+16	; 0x10
     812:	49 89       	ldd	r20, Y+17	; 0x11
     814:	5a 89       	ldd	r21, Y+18	; 0x12
     816:	6f 81       	ldd	r22, Y+7	; 0x07
     818:	78 85       	ldd	r23, Y+8	; 0x08
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	9a 85       	ldd	r25, Y+10	; 0x0a
     81e:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__addsf3>
     822:	0e 94 24 14 	call	0x2848	; 0x2848 <sqrt>
     826:	9b 01       	movw	r18, r22
     828:	ac 01       	movw	r20, r24
     82a:	c7 01       	movw	r24, r14
     82c:	b6 01       	movw	r22, r12
     82e:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <atan2>
     832:	6b 01       	movw	r12, r22
     834:	7c 01       	movw	r14, r24
     836:	f1 01       	movw	r30, r2
     838:	60 8b       	std	Z+16, r22	; 0x10
     83a:	71 8b       	std	Z+17, r23	; 0x11
     83c:	82 8b       	std	Z+18, r24	; 0x12
     83e:	93 8b       	std	Z+19, r25	; 0x13
	
	AccTiltData->TiltZ = atan2 (sqrt(DataXSqrd + DataYSqrd), AccTiltData->AccZ);
     840:	2b 85       	ldd	r18, Y+11	; 0x0b
     842:	3c 85       	ldd	r19, Y+12	; 0x0c
     844:	4d 85       	ldd	r20, Y+13	; 0x0d
     846:	5e 85       	ldd	r21, Y+14	; 0x0e
     848:	6f 81       	ldd	r22, Y+7	; 0x07
     84a:	78 85       	ldd	r23, Y+8	; 0x08
     84c:	89 85       	ldd	r24, Y+9	; 0x09
     84e:	9a 85       	ldd	r25, Y+10	; 0x0a
     850:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__addsf3>
     854:	0e 94 24 14 	call	0x2848	; 0x2848 <sqrt>
     858:	a3 01       	movw	r20, r6
     85a:	92 01       	movw	r18, r4
     85c:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <atan2>
     860:	2b 01       	movw	r4, r22
     862:	3c 01       	movw	r6, r24
     864:	f1 01       	movw	r30, r2
     866:	64 8b       	std	Z+20, r22	; 0x14
     868:	75 8b       	std	Z+21, r23	; 0x15
     86a:	86 8b       	std	Z+22, r24	; 0x16
     86c:	97 8b       	std	Z+23, r25	; 0x17
	
	if (AngleUnit == DEGREES)
     86e:	01 30       	cpi	r16, 0x01	; 1
     870:	39 f5       	brne	.+78     	; 0x8c0 <ReadADXL345AccAndTiltData+0x220>
	{
		RadToDegree = 180.0 / M_PI;
		
		AccTiltData->TiltX = AccTiltData->TiltX * RadToDegree;
     872:	20 ee       	ldi	r18, 0xE0	; 224
     874:	3e e2       	ldi	r19, 0x2E	; 46
     876:	45 e6       	ldi	r20, 0x65	; 101
     878:	52 e4       	ldi	r21, 0x42	; 66
     87a:	c5 01       	movw	r24, r10
     87c:	b4 01       	movw	r22, r8
     87e:	0e 94 bd 13 	call	0x277a	; 0x277a <__mulsf3>
     882:	f1 01       	movw	r30, r2
     884:	64 87       	std	Z+12, r22	; 0x0c
     886:	75 87       	std	Z+13, r23	; 0x0d
     888:	86 87       	std	Z+14, r24	; 0x0e
     88a:	97 87       	std	Z+15, r25	; 0x0f
	
		AccTiltData->TiltY = AccTiltData->TiltY * RadToDegree;
     88c:	20 ee       	ldi	r18, 0xE0	; 224
     88e:	3e e2       	ldi	r19, 0x2E	; 46
     890:	45 e6       	ldi	r20, 0x65	; 101
     892:	52 e4       	ldi	r21, 0x42	; 66
     894:	c7 01       	movw	r24, r14
     896:	b6 01       	movw	r22, r12
     898:	0e 94 bd 13 	call	0x277a	; 0x277a <__mulsf3>
     89c:	f1 01       	movw	r30, r2
     89e:	60 8b       	std	Z+16, r22	; 0x10
     8a0:	71 8b       	std	Z+17, r23	; 0x11
     8a2:	82 8b       	std	Z+18, r24	; 0x12
     8a4:	93 8b       	std	Z+19, r25	; 0x13
	
		AccTiltData->TiltZ = AccTiltData->TiltZ * RadToDegree;
     8a6:	20 ee       	ldi	r18, 0xE0	; 224
     8a8:	3e e2       	ldi	r19, 0x2E	; 46
     8aa:	45 e6       	ldi	r20, 0x65	; 101
     8ac:	52 e4       	ldi	r21, 0x42	; 66
     8ae:	c3 01       	movw	r24, r6
     8b0:	b2 01       	movw	r22, r4
     8b2:	0e 94 bd 13 	call	0x277a	; 0x277a <__mulsf3>
     8b6:	f1 01       	movw	r30, r2
     8b8:	64 8b       	std	Z+20, r22	; 0x14
     8ba:	75 8b       	std	Z+21, r23	; 0x15
     8bc:	86 8b       	std	Z+22, r24	; 0x16
     8be:	97 8b       	std	Z+23, r25	; 0x17
	}
	
Exit:

	return Status;	
}
     8c0:	81 2f       	mov	r24, r17
     8c2:	62 96       	adiw	r28, 0x12	; 18
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	f8 94       	cli
     8c8:	de bf       	out	0x3e, r29	; 62
     8ca:	0f be       	out	0x3f, r0	; 63
     8cc:	cd bf       	out	0x3d, r28	; 61
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	ff 90       	pop	r15
     8d8:	ef 90       	pop	r14
     8da:	df 90       	pop	r13
     8dc:	cf 90       	pop	r12
     8de:	bf 90       	pop	r11
     8e0:	af 90       	pop	r10
     8e2:	9f 90       	pop	r9
     8e4:	8f 90       	pop	r8
     8e6:	7f 90       	pop	r7
     8e8:	6f 90       	pop	r6
     8ea:	5f 90       	pop	r5
     8ec:	4f 90       	pop	r4
     8ee:	3f 90       	pop	r3
     8f0:	2f 90       	pop	r2
     8f2:	08 95       	ret

000008f4 <CheckADXL345DeviceId>:
//
// Private Functions
//

bool CheckADXL345DeviceId()
{
     8f4:	1f 93       	push	r17
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
     8fa:	1f 92       	push	r1
     8fc:	cd b7       	in	r28, 0x3d	; 61
     8fe:	de b7       	in	r29, 0x3e	; 62
	bool Status = FALSE;
	
	unsigned char DeviceId;
	
	Status = ReadADXL345Register(ADR_DEVID, &DeviceId, sizeof(unsigned char));
     900:	21 e0       	ldi	r18, 0x01	; 1
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	be 01       	movw	r22, r28
     90a:	6f 5f       	subi	r22, 0xFF	; 255
     90c:	7f 4f       	sbci	r23, 0xFF	; 255
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	ba dd       	rcall	.-1164   	; 0x486 <ReadADXL345Register>
     912:	18 2f       	mov	r17, r24
	
	if (!Status)
     914:	81 11       	cpse	r24, r1
     916:	0b c0       	rjmp	.+22     	; 0x92e <CheckADXL345DeviceId+0x3a>
	{
		SendTrace(ERROR_LEVEL, "Failed to read Accelerometer Device Id. \r\n");
     918:	21 eb       	ldi	r18, 0xB1	; 177
     91a:	33 e0       	ldi	r19, 0x03	; 3
     91c:	3f 93       	push	r19
     91e:	2f 93       	push	r18
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	8f 93       	push	r24
     924:	59 d6       	rcall	.+3250   	; 0x15d8 <SendTrace>
		
		goto Exit;
     926:	0f 90       	pop	r0
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	12 c0       	rjmp	.+36     	; 0x952 <CheckADXL345DeviceId+0x5e>
	}
	
	if (DeviceId != DEVID)
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	85 3e       	cpi	r24, 0xE5	; 229
     932:	79 f0       	breq	.+30     	; 0x952 <CheckADXL345DeviceId+0x5e>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer Device Id does not match 0x%x. \r\n", DeviceId);
     934:	1f 92       	push	r1
     936:	8f 93       	push	r24
     938:	8c ed       	ldi	r24, 0xDC	; 220
     93a:	93 e0       	ldi	r25, 0x03	; 3
     93c:	9f 93       	push	r25
     93e:	8f 93       	push	r24
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	8f 93       	push	r24
     944:	49 d6       	rcall	.+3218   	; 0x15d8 <SendTrace>
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
		
		Status = FALSE;
     950:	10 e0       	ldi	r17, 0x00	; 0
	}
	
Exit:
	
	return Status;
}
     952:	81 2f       	mov	r24, r17
     954:	0f 90       	pop	r0
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	08 95       	ret

0000095e <InitADXL345DevAddress>:

bool InitADXL345DevAddress(bool IsAltAddressGnd)
{
	bool Status = FALSE;
	
    gADXL345DeviceAddress.Address = GET_DEVICE_ADDRESS(IsAltAddressGnd);
     95e:	88 23       	and	r24, r24
     960:	11 f0       	breq	.+4      	; 0x966 <InitADXL345DevAddress+0x8>
     962:	83 e5       	ldi	r24, 0x53	; 83
     964:	01 c0       	rjmp	.+2      	; 0x968 <InitADXL345DevAddress+0xa>
     966:	8d e1       	ldi	r24, 0x1D	; 29
     968:	28 2f       	mov	r18, r24
     96a:	22 0f       	add	r18, r18
     96c:	90 91 df 0a 	lds	r25, 0x0ADF
     970:	91 70       	andi	r25, 0x01	; 1
     972:	92 2b       	or	r25, r18
     974:	90 93 df 0a 	sts	0x0ADF, r25
	
	SendTrace(INFO_LEVEL, "Device Address = 0x%x\r\n", gADXL345DeviceAddress.Address);
     978:	1f 92       	push	r1
     97a:	8f 93       	push	r24
     97c:	8c e0       	ldi	r24, 0x0C	; 12
     97e:	94 e0       	ldi	r25, 0x04	; 4
     980:	9f 93       	push	r25
     982:	8f 93       	push	r24
     984:	84 e0       	ldi	r24, 0x04	; 4
     986:	8f 93       	push	r24
     988:	27 d6       	rcall	.+3150   	; 0x15d8 <SendTrace>
	
	//
	// Check Accelerometer Device ID
	//
	
	Status = CheckADXL345DeviceId();
     98a:	b4 df       	rcall	.-152    	; 0x8f4 <CheckADXL345DeviceId>
	
	if (!Status)
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	88 23       	and	r24, r24
     998:	19 f0       	breq	.+6      	; 0x9a0 <InitADXL345DevAddress+0x42>
	{
		goto Exit;
	}
	
	gIsADXL345Initialized = TRUE;
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	90 93 d8 0a 	sts	0x0AD8, r25
	
Exit:
	
    return Status;
}
     9a0:	08 95       	ret

000009a2 <SetADXL345Register>:

	return Status;
}

bool SetADXL345Register(unsigned char RegisterAddress, PVOID RegisterValue, unsigned long Length)
{
     9a2:	af 92       	push	r10
     9a4:	bf 92       	push	r11
     9a6:	cf 92       	push	r12
     9a8:	df 92       	push	r13
     9aa:	ef 92       	push	r14
     9ac:	ff 92       	push	r15
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	18 2f       	mov	r17, r24
     9b8:	5b 01       	movw	r10, r22
     9ba:	69 01       	movw	r12, r18
     9bc:	7a 01       	movw	r14, r20
	bool Status = FALSE;
	
	PVOID WriteValue;
	
	WriteValue = malloc(Length + 1);
     9be:	c9 01       	movw	r24, r18
     9c0:	01 96       	adiw	r24, 0x01	; 1
     9c2:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <malloc>
     9c6:	ec 01       	movw	r28, r24
	
	if (WriteValue == NULL)
     9c8:	00 97       	sbiw	r24, 0x00	; 0
     9ca:	09 f4       	brne	.+2      	; 0x9ce <SetADXL345Register+0x2c>
     9cc:	46 c0       	rjmp	.+140    	; 0xa5a <SetADXL345Register+0xb8>
	{
		goto Exit;
	}
	
	*(unsigned char *)(WriteValue) = RegisterAddress;
     9ce:	fc 01       	movw	r30, r24
     9d0:	11 93       	st	Z+, r17
	
	memcpy(WriteValue + 1, RegisterValue, Length);
     9d2:	a6 01       	movw	r20, r12
     9d4:	b5 01       	movw	r22, r10
     9d6:	cf 01       	movw	r24, r30
     9d8:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <memcpy>
	
	Status = TwiTransmit(WriteValue, Length + 1, &gADXL345DeviceAddress, TRUE);
     9dc:	01 e0       	ldi	r16, 0x01	; 1
     9de:	2f ed       	ldi	r18, 0xDF	; 223
     9e0:	3a e0       	ldi	r19, 0x0A	; 10
     9e2:	b7 01       	movw	r22, r14
     9e4:	a6 01       	movw	r20, r12
     9e6:	4f 5f       	subi	r20, 0xFF	; 255
     9e8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ea:	6f 4f       	sbci	r22, 0xFF	; 255
     9ec:	7f 4f       	sbci	r23, 0xFF	; 255
     9ee:	ce 01       	movw	r24, r28
     9f0:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <TwiTransmit>
     9f4:	08 2f       	mov	r16, r24
	
	if (!Status)
     9f6:	81 11       	cpse	r24, r1
     9f8:	0a c0       	rjmp	.+20     	; 0xa0e <SetADXL345Register+0x6c>
	{
		SendTrace(ERROR_LEVEL, "Failed to transmit Register Value. \r\n");
     9fa:	24 e2       	ldi	r18, 0x24	; 36
     9fc:	34 e0       	ldi	r19, 0x04	; 4
     9fe:	3f 93       	push	r19
     a00:	2f 93       	push	r18
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	8f 93       	push	r24
     a06:	e8 d5       	rcall	.+3024   	; 0x15d8 <SendTrace>
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
	}
	
	free(WriteValue);
     a0e:	ce 01       	movw	r24, r28
     a10:	0e 94 14 16 	call	0x2c28	; 0x2c28 <free>
	
	SendTrace(INFO_LEVEL, "Written Value 0x%x\t", *(unsigned char *)RegisterValue);
     a14:	f5 01       	movw	r30, r10
     a16:	80 81       	ld	r24, Z
     a18:	1f 92       	push	r1
     a1a:	8f 93       	push	r24
     a1c:	2a e4       	ldi	r18, 0x4A	; 74
     a1e:	34 e0       	ldi	r19, 0x04	; 4
     a20:	3f 93       	push	r19
     a22:	2f 93       	push	r18
     a24:	c4 e0       	ldi	r28, 0x04	; 4
     a26:	cf 93       	push	r28
     a28:	d7 d5       	rcall	.+2990   	; 0x15d8 <SendTrace>
	
	ReadADXL345Register(RegisterAddress, RegisterValue, Length);
     a2a:	a7 01       	movw	r20, r14
     a2c:	96 01       	movw	r18, r12
     a2e:	b5 01       	movw	r22, r10
     a30:	81 2f       	mov	r24, r17
     a32:	29 dd       	rcall	.-1454   	; 0x486 <ReadADXL345Register>
	
	SendTrace(INFO_LEVEL, "Read Value 0x%x\r\n", *(unsigned char *)RegisterValue);
     a34:	f5 01       	movw	r30, r10
     a36:	80 81       	ld	r24, Z
     a38:	1f 92       	push	r1
     a3a:	8f 93       	push	r24
     a3c:	2e e5       	ldi	r18, 0x5E	; 94
     a3e:	34 e0       	ldi	r19, 0x04	; 4
     a40:	3f 93       	push	r19
     a42:	2f 93       	push	r18
     a44:	cf 93       	push	r28
     a46:	c8 d5       	rcall	.+2960   	; 0x15d8 <SendTrace>
     a48:	8d b7       	in	r24, 0x3d	; 61
     a4a:	9e b7       	in	r25, 0x3e	; 62
     a4c:	0a 96       	adiw	r24, 0x0a	; 10
     a4e:	0f b6       	in	r0, 0x3f	; 63
     a50:	f8 94       	cli
     a52:	9e bf       	out	0x3e, r25	; 62
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	8d bf       	out	0x3d, r24	; 61
     a58:	01 c0       	rjmp	.+2      	; 0xa5c <SetADXL345Register+0xba>
	return Status;
}

bool SetADXL345Register(unsigned char RegisterAddress, PVOID RegisterValue, unsigned long Length)
{
	bool Status = FALSE;
     a5a:	00 e0       	ldi	r16, 0x00	; 0
	SendTrace(INFO_LEVEL, "Read Value 0x%x\r\n", *(unsigned char *)RegisterValue);
	
Exit:

	return Status;
}
     a5c:	80 2f       	mov	r24, r16
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	ff 90       	pop	r15
     a68:	ef 90       	pop	r14
     a6a:	df 90       	pop	r13
     a6c:	cf 90       	pop	r12
     a6e:	bf 90       	pop	r11
     a70:	af 90       	pop	r10
     a72:	08 95       	ret

00000a74 <EnableDisableADXL345StandbyMode>:
	
    return Status;
}

bool EnableDisableADXL345StandbyMode(bool Enable)
{
     a74:	0f 93       	push	r16
     a76:	1f 93       	push	r17
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	1f 92       	push	r1
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	08 2f       	mov	r16, r24
	bool Status = FALSE;
	
	POWER_CTL PowerCtl;
	
	if (!gIsADXL345Initialized)
     a84:	90 91 d8 0a 	lds	r25, 0x0AD8
     a88:	91 11       	cpse	r25, r1
     a8a:	0c c0       	rjmp	.+24     	; 0xaa4 <EnableDisableADXL345StandbyMode+0x30>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
     a8c:	82 e5       	ldi	r24, 0x52	; 82
     a8e:	92 e0       	ldi	r25, 0x02	; 2
     a90:	9f 93       	push	r25
     a92:	8f 93       	push	r24
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	8f 93       	push	r24
     a98:	9f d5       	rcall	.+2878   	; 0x15d8 <SendTrace>
		
		goto Exit;
     a9a:	0f 90       	pop	r0
     a9c:	0f 90       	pop	r0
     a9e:	0f 90       	pop	r0
    return Status;
}

bool EnableDisableADXL345StandbyMode(bool Enable)
{
	bool Status = FALSE;
     aa0:	10 e0       	ldi	r17, 0x00	; 0
	
	if (!gIsADXL345Initialized)
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
		
		goto Exit;
     aa2:	37 c0       	rjmp	.+110    	; 0xb12 <EnableDisableADXL345StandbyMode+0x9e>
	
	//
	// Read Power Ctl Register
	//
	
	Status = ReadADXL345Register(ADR_POWER_CTL, &PowerCtl, sizeof(POWER_CTL));
     aa4:	21 e0       	ldi	r18, 0x01	; 1
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	be 01       	movw	r22, r28
     aae:	6f 5f       	subi	r22, 0xFF	; 255
     ab0:	7f 4f       	sbci	r23, 0xFF	; 255
     ab2:	8d e2       	ldi	r24, 0x2D	; 45
     ab4:	e8 dc       	rcall	.-1584   	; 0x486 <ReadADXL345Register>
     ab6:	18 2f       	mov	r17, r24
	
	if (!Status)
     ab8:	81 11       	cpse	r24, r1
     aba:	0b c0       	rjmp	.+22     	; 0xad2 <EnableDisableADXL345StandbyMode+0x5e>
	{
		SendTrace(ERROR_LEVEL, "Failed to read Power CTL register. \r\n");
     abc:	20 e7       	ldi	r18, 0x70	; 112
     abe:	34 e0       	ldi	r19, 0x04	; 4
     ac0:	3f 93       	push	r19
     ac2:	2f 93       	push	r18
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	8f 93       	push	r24
     ac8:	87 d5       	rcall	.+2830   	; 0x15d8 <SendTrace>
		
		goto Exit;
     aca:	0f 90       	pop	r0
     acc:	0f 90       	pop	r0
     ace:	0f 90       	pop	r0
     ad0:	20 c0       	rjmp	.+64     	; 0xb12 <EnableDisableADXL345StandbyMode+0x9e>
	
	//
	// Now place the accelerometer in standby mode
	//
	
	PowerCtl.Measure = (Enable ? 0 : 1);
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	01 11       	cpse	r16, r1
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	89 81       	ldd	r24, Y+1	; 0x01
     ada:	90 fb       	bst	r25, 0
     adc:	83 f9       	bld	r24, 3
     ade:	89 83       	std	Y+1, r24	; 0x01
	
	Status = SetADXL345Register(ADR_POWER_CTL, &PowerCtl, sizeof(POWER_CTL));
     ae0:	21 e0       	ldi	r18, 0x01	; 1
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	be 01       	movw	r22, r28
     aea:	6f 5f       	subi	r22, 0xFF	; 255
     aec:	7f 4f       	sbci	r23, 0xFF	; 255
     aee:	8d e2       	ldi	r24, 0x2D	; 45
     af0:	58 df       	rcall	.-336    	; 0x9a2 <SetADXL345Register>
     af2:	18 2f       	mov	r17, r24
	
	if (!Status)
     af4:	81 11       	cpse	r24, r1
     af6:	0b c0       	rjmp	.+22     	; 0xb0e <EnableDisableADXL345StandbyMode+0x9a>
	{
		SendTrace (ERROR_LEVEL, "Failed to place Accelerometer in standby mode. \r\n");
     af8:	26 e9       	ldi	r18, 0x96	; 150
     afa:	34 e0       	ldi	r19, 0x04	; 4
     afc:	3f 93       	push	r19
     afe:	2f 93       	push	r18
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	8f 93       	push	r24
     b04:	69 d5       	rcall	.+2770   	; 0x15d8 <SendTrace>
		
		goto Exit;
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <EnableDisableADXL345StandbyMode+0x9e>
	}
	
	gIsADXL345InStandby = Enable;
     b0e:	00 93 06 01 	sts	0x0106, r16
	
Exit:

	return Status;
}
     b12:	81 2f       	mov	r24, r17
     b14:	0f 90       	pop	r0
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	1f 91       	pop	r17
     b1c:	0f 91       	pop	r16
     b1e:	08 95       	ret

00000b20 <ProgramADXL345PowerCtl>:

bool ProgramADXL345PowerCtl(POWER_MODE PowerMode, WAKEUP_FREQ WakeupFreq)
{
     b20:	ff 92       	push	r15
     b22:	0f 93       	push	r16
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	00 d0       	rcall	.+0      	; 0xb2c <ProgramADXL345PowerCtl+0xc>
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	08 2f       	mov	r16, r24
     b32:	f6 2e       	mov	r15, r22
	
	BW_RATE BwRate;
	
	POWER_CTL PowerCtl;
	
	if (!gIsADXL345Initialized || !gIsADXL345InStandby)
     b34:	80 91 d8 0a 	lds	r24, 0x0AD8
     b38:	88 23       	and	r24, r24
     b3a:	21 f0       	breq	.+8      	; 0xb44 <ProgramADXL345PowerCtl+0x24>
     b3c:	80 91 06 01 	lds	r24, 0x0106
     b40:	81 11       	cpse	r24, r1
     b42:	0c c0       	rjmp	.+24     	; 0xb5c <ProgramADXL345PowerCtl+0x3c>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized or it is not in standby mode. \r\n");
     b44:	88 ec       	ldi	r24, 0xC8	; 200
     b46:	94 e0       	ldi	r25, 0x04	; 4
     b48:	9f 93       	push	r25
     b4a:	8f 93       	push	r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	8f 93       	push	r24
     b50:	43 d5       	rcall	.+2694   	; 0x15d8 <SendTrace>
		
		goto Exit;
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	0f 90       	pop	r0
	return Status;
}

bool ProgramADXL345PowerCtl(POWER_MODE PowerMode, WAKEUP_FREQ WakeupFreq)
{
	bool Status = FALSE;
     b58:	10 e0       	ldi	r17, 0x00	; 0
	
	if (!gIsADXL345Initialized || !gIsADXL345InStandby)
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized or it is not in standby mode. \r\n");
		
		goto Exit;
     b5a:	8b c0       	rjmp	.+278    	; 0xc72 <ProgramADXL345PowerCtl+0x152>
	}
	
	if (PowerMode == FULL_POWER && WakeupFreq != NO_WAKEUP)
     b5c:	02 30       	cpi	r16, 0x02	; 2
     b5e:	79 f4       	brne	.+30     	; 0xb7e <ProgramADXL345PowerCtl+0x5e>
     b60:	84 e0       	ldi	r24, 0x04	; 4
     b62:	68 17       	cp	r22, r24
     b64:	61 f0       	breq	.+24     	; 0xb7e <ProgramADXL345PowerCtl+0x5e>
	{
		SendTrace(ERROR_LEVEL, "Invalid Wakeup Frequency Selected.\r\n");
     b66:	87 e0       	ldi	r24, 0x07	; 7
     b68:	95 e0       	ldi	r25, 0x05	; 5
     b6a:	9f 93       	push	r25
     b6c:	8f 93       	push	r24
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	8f 93       	push	r24
     b72:	32 d5       	rcall	.+2660   	; 0x15d8 <SendTrace>
		
		goto Exit;
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
	return Status;
}

bool ProgramADXL345PowerCtl(POWER_MODE PowerMode, WAKEUP_FREQ WakeupFreq)
{
	bool Status = FALSE;
     b7a:	10 e0       	ldi	r17, 0x00	; 0
	
	if (PowerMode == FULL_POWER && WakeupFreq != NO_WAKEUP)
	{
		SendTrace(ERROR_LEVEL, "Invalid Wakeup Frequency Selected.\r\n");
		
		goto Exit;
     b7c:	7a c0       	rjmp	.+244    	; 0xc72 <ProgramADXL345PowerCtl+0x152>
	
	//
	// Read BW Rate Register
	//
	
	Status = ReadADXL345Register(ADR_BW_RATE, &BwRate, sizeof(BW_RATE));
     b7e:	21 e0       	ldi	r18, 0x01	; 1
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	50 e0       	ldi	r21, 0x00	; 0
     b86:	be 01       	movw	r22, r28
     b88:	6f 5f       	subi	r22, 0xFF	; 255
     b8a:	7f 4f       	sbci	r23, 0xFF	; 255
     b8c:	8c e2       	ldi	r24, 0x2C	; 44
     b8e:	7b dc       	rcall	.-1802   	; 0x486 <ReadADXL345Register>
     b90:	18 2f       	mov	r17, r24
	
	if (!Status)
     b92:	81 11       	cpse	r24, r1
     b94:	0b c0       	rjmp	.+22     	; 0xbac <ProgramADXL345PowerCtl+0x8c>
	{
		SendTrace(ERROR_LEVEL, "Failed to read BW RATE register. \r\n");
     b96:	2c e2       	ldi	r18, 0x2C	; 44
     b98:	35 e0       	ldi	r19, 0x05	; 5
     b9a:	3f 93       	push	r19
     b9c:	2f 93       	push	r18
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	8f 93       	push	r24
     ba2:	1a d5       	rcall	.+2612   	; 0x15d8 <SendTrace>
		
		goto Exit;
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	0f 90       	pop	r0
     baa:	63 c0       	rjmp	.+198    	; 0xc72 <ProgramADXL345PowerCtl+0x152>
	
	//
	// Program Power Ctl
	//
	
	PowerCtl.AsUINT8 = 0;
     bac:	1a 82       	std	Y+2, r1	; 0x02
	
	switch (PowerMode)
     bae:	01 30       	cpi	r16, 0x01	; 1
     bb0:	09 f1       	breq	.+66     	; 0xbf4 <ProgramADXL345PowerCtl+0xd4>
     bb2:	18 f0       	brcs	.+6      	; 0xbba <ProgramADXL345PowerCtl+0x9a>
     bb4:	02 30       	cpi	r16, 0x02	; 2
     bb6:	51 f1       	breq	.+84     	; 0xc0c <ProgramADXL345PowerCtl+0xec>
     bb8:	2f c0       	rjmp	.+94     	; 0xc18 <ProgramADXL345PowerCtl+0xf8>
	{
		case LOW_POWER:
		{
			if (BwRate.Rate < TWELVE_POINT_FIVE_HZ || BwRate.Rate > FOUR_HUNDRED_HZ)
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	87 5f       	subi	r24, 0xF7	; 247
     bbe:	8f 70       	andi	r24, 0x0F	; 15
     bc0:	86 30       	cpi	r24, 0x06	; 6
     bc2:	60 f0       	brcs	.+24     	; 0xbdc <ProgramADXL345PowerCtl+0xbc>
			{
				SendTrace(ERROR_LEVEL, "Invalid Data Rate for Low Power Mode. \r\n");
     bc4:	80 e5       	ldi	r24, 0x50	; 80
     bc6:	95 e0       	ldi	r25, 0x05	; 5
     bc8:	9f 93       	push	r25
     bca:	8f 93       	push	r24
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	8f 93       	push	r24
     bd0:	03 d5       	rcall	.+2566   	; 0x15d8 <SendTrace>
				
				Status = FALSE;
				
				goto Exit;
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
		{
			if (BwRate.Rate < TWELVE_POINT_FIVE_HZ || BwRate.Rate > FOUR_HUNDRED_HZ)
			{
				SendTrace(ERROR_LEVEL, "Invalid Data Rate for Low Power Mode. \r\n");
				
				Status = FALSE;
     bd8:	10 e0       	ldi	r17, 0x00	; 0
				
				goto Exit;
     bda:	4b c0       	rjmp	.+150    	; 0xc72 <ProgramADXL345PowerCtl+0x152>
			}
			
			BwRate.LowPwr = 1;
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	80 61       	ori	r24, 0x10	; 16
     be0:	89 83       	std	Y+1, r24	; 0x01
			
			PowerCtl.AutoSleep = 1;
     be2:	9a 81       	ldd	r25, Y+2	; 0x02
			
			PowerCtl.Link = 1;
			
			PowerCtl.Measure = 1;
     be4:	94 7c       	andi	r25, 0xC4	; 196
			
			PowerCtl.Wakeup = WakeupFreq;
     be6:	8f 2d       	mov	r24, r15
     be8:	83 70       	andi	r24, 0x03	; 3
     bea:	98 63       	ori	r25, 0x38	; 56
     bec:	f9 2e       	mov	r15, r25
     bee:	f8 2a       	or	r15, r24
     bf0:	fa 82       	std	Y+2, r15	; 0x02
			
			break;
     bf2:	12 c0       	rjmp	.+36     	; 0xc18 <ProgramADXL345PowerCtl+0xf8>
		}
		case AUTO_SLEEP:
		{
			BwRate.LowPwr = 0;
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	8f 7e       	andi	r24, 0xEF	; 239
     bf8:	89 83       	std	Y+1, r24	; 0x01
			
			PowerCtl.AutoSleep = 1;
     bfa:	9a 81       	ldd	r25, Y+2	; 0x02
			
			PowerCtl.Link = 1;
			
			PowerCtl.Measure = 1;
     bfc:	94 7c       	andi	r25, 0xC4	; 196
			
			PowerCtl.Wakeup = WakeupFreq;
     bfe:	8f 2d       	mov	r24, r15
     c00:	83 70       	andi	r24, 0x03	; 3
     c02:	98 63       	ori	r25, 0x38	; 56
     c04:	f9 2e       	mov	r15, r25
     c06:	f8 2a       	or	r15, r24
     c08:	fa 82       	std	Y+2, r15	; 0x02
			
			break;
     c0a:	06 c0       	rjmp	.+12     	; 0xc18 <ProgramADXL345PowerCtl+0xf8>
		}
		case FULL_POWER:
		{
			BwRate.LowPwr = 0;
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	8f 7e       	andi	r24, 0xEF	; 239
     c10:	89 83       	std	Y+1, r24	; 0x01
			
			PowerCtl.Measure = 1;
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	88 60       	ori	r24, 0x08	; 8
     c16:	8a 83       	std	Y+2, r24	; 0x02
			
			break;
		}
	};
	
	Status = SetADXL345Register(ADR_BW_RATE, &BwRate, sizeof(BW_RATE));
     c18:	21 e0       	ldi	r18, 0x01	; 1
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 e0       	ldi	r20, 0x00	; 0
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	be 01       	movw	r22, r28
     c22:	6f 5f       	subi	r22, 0xFF	; 255
     c24:	7f 4f       	sbci	r23, 0xFF	; 255
     c26:	8c e2       	ldi	r24, 0x2C	; 44
     c28:	bc de       	rcall	.-648    	; 0x9a2 <SetADXL345Register>
     c2a:	18 2f       	mov	r17, r24
	
	if (!Status)
     c2c:	81 11       	cpse	r24, r1
     c2e:	0b c0       	rjmp	.+22     	; 0xc46 <ProgramADXL345PowerCtl+0x126>
	{
		SendTrace (ERROR_LEVEL, "Failed to program BW RATE Register. \r\n");
     c30:	29 e7       	ldi	r18, 0x79	; 121
     c32:	35 e0       	ldi	r19, 0x05	; 5
     c34:	3f 93       	push	r19
     c36:	2f 93       	push	r18
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	8f 93       	push	r24
     c3c:	cd d4       	rcall	.+2458   	; 0x15d8 <SendTrace>
		
		goto Exit;
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	16 c0       	rjmp	.+44     	; 0xc72 <ProgramADXL345PowerCtl+0x152>
	}
	
	Status = SetADXL345Register(ADR_POWER_CTL, &PowerCtl, sizeof(POWER_CTL));
     c46:	21 e0       	ldi	r18, 0x01	; 1
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	40 e0       	ldi	r20, 0x00	; 0
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	be 01       	movw	r22, r28
     c50:	6e 5f       	subi	r22, 0xFE	; 254
     c52:	7f 4f       	sbci	r23, 0xFF	; 255
     c54:	8d e2       	ldi	r24, 0x2D	; 45
     c56:	a5 de       	rcall	.-694    	; 0x9a2 <SetADXL345Register>
     c58:	18 2f       	mov	r17, r24
	
	if (!Status)
     c5a:	81 11       	cpse	r24, r1
     c5c:	0a c0       	rjmp	.+20     	; 0xc72 <ProgramADXL345PowerCtl+0x152>
	{
		SendTrace (ERROR_LEVEL, "Failed to program Power CTL Register. \r\n");
     c5e:	20 ea       	ldi	r18, 0xA0	; 160
     c60:	35 e0       	ldi	r19, 0x05	; 5
     c62:	3f 93       	push	r19
     c64:	2f 93       	push	r18
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	8f 93       	push	r24
     c6a:	b6 d4       	rcall	.+2412   	; 0x15d8 <SendTrace>
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
	}
	
Exit:

	return Status;
}
     c72:	81 2f       	mov	r24, r17
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	ff 90       	pop	r15
     c82:	08 95       	ret

00000c84 <ProgramADXL345Interrupts>:

bool ProgramADXL345Interrupts(PINT_ENABLE_MAP_SOURCE IntMap, PINT_ENABLE_MAP_SOURCE IntEnable)
{
     c84:	1f 93       	push	r17
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	eb 01       	movw	r28, r22
	bool Status = FALSE;
	
	if (!gIsADXL345Initialized)
     c8c:	20 91 d8 0a 	lds	r18, 0x0AD8
     c90:	21 11       	cpse	r18, r1
     c92:	0c c0       	rjmp	.+24     	; 0xcac <ProgramADXL345Interrupts+0x28>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
     c94:	82 e5       	ldi	r24, 0x52	; 82
     c96:	92 e0       	ldi	r25, 0x02	; 2
     c98:	9f 93       	push	r25
     c9a:	8f 93       	push	r24
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	8f 93       	push	r24
     ca0:	9b d4       	rcall	.+2358   	; 0x15d8 <SendTrace>
		
		goto Exit;
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
	return Status;
}

bool ProgramADXL345Interrupts(PINT_ENABLE_MAP_SOURCE IntMap, PINT_ENABLE_MAP_SOURCE IntEnable)
{
	bool Status = FALSE;
     ca8:	10 e0       	ldi	r17, 0x00	; 0
	
	if (!gIsADXL345Initialized)
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
		
		goto Exit;
     caa:	29 c0       	rjmp	.+82     	; 0xcfe <ProgramADXL345Interrupts+0x7a>
	
	//
	// Program Interrupts
	//
	
	Status = SetADXL345Register(ADR_INT_MAP, IntMap, sizeof(INT_ENABLE_MAP_SOURCE));
     cac:	21 e0       	ldi	r18, 0x01	; 1
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	40 e0       	ldi	r20, 0x00	; 0
     cb2:	50 e0       	ldi	r21, 0x00	; 0
     cb4:	bc 01       	movw	r22, r24
     cb6:	8f e2       	ldi	r24, 0x2F	; 47
     cb8:	74 de       	rcall	.-792    	; 0x9a2 <SetADXL345Register>
     cba:	18 2f       	mov	r17, r24
	
	if (!Status)
     cbc:	81 11       	cpse	r24, r1
     cbe:	0b c0       	rjmp	.+22     	; 0xcd6 <ProgramADXL345Interrupts+0x52>
	{
		SendTrace (ERROR_LEVEL, "Failed to program INT MAP Register. \r\n");
     cc0:	29 ec       	ldi	r18, 0xC9	; 201
     cc2:	35 e0       	ldi	r19, 0x05	; 5
     cc4:	3f 93       	push	r19
     cc6:	2f 93       	push	r18
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	8f 93       	push	r24
     ccc:	85 d4       	rcall	.+2314   	; 0x15d8 <SendTrace>
		
		goto Exit;
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	14 c0       	rjmp	.+40     	; 0xcfe <ProgramADXL345Interrupts+0x7a>
	}
	
	Status = SetADXL345Register(ADR_INT_ENABLE, IntEnable, sizeof(INT_ENABLE_MAP_SOURCE));
     cd6:	21 e0       	ldi	r18, 0x01	; 1
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	40 e0       	ldi	r20, 0x00	; 0
     cdc:	50 e0       	ldi	r21, 0x00	; 0
     cde:	be 01       	movw	r22, r28
     ce0:	8e e2       	ldi	r24, 0x2E	; 46
     ce2:	5f de       	rcall	.-834    	; 0x9a2 <SetADXL345Register>
     ce4:	18 2f       	mov	r17, r24
	
	if (!Status)
     ce6:	81 11       	cpse	r24, r1
     ce8:	0a c0       	rjmp	.+20     	; 0xcfe <ProgramADXL345Interrupts+0x7a>
	{
		SendTrace (ERROR_LEVEL, "Failed to program INT ENABLE Register. \r\n");
     cea:	20 ef       	ldi	r18, 0xF0	; 240
     cec:	35 e0       	ldi	r19, 0x05	; 5
     cee:	3f 93       	push	r19
     cf0:	2f 93       	push	r18
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	8f 93       	push	r24
     cf6:	70 d4       	rcall	.+2272   	; 0x15d8 <SendTrace>
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
	}
	
Exit:

	return Status;
}
     cfe:	81 2f       	mov	r24, r17
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	08 95       	ret

00000d08 <ProgramADXL345FifoControl>:

bool ProgramADXL345FifoControl(PFIFO_CTL FifoCtl)
{
     d08:	cf 93       	push	r28
	bool Status = FALSE;
	
	if (!gIsADXL345Initialized)
     d0a:	20 91 d8 0a 	lds	r18, 0x0AD8
     d0e:	21 11       	cpse	r18, r1
     d10:	0c c0       	rjmp	.+24     	; 0xd2a <ProgramADXL345FifoControl+0x22>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
     d12:	82 e5       	ldi	r24, 0x52	; 82
     d14:	92 e0       	ldi	r25, 0x02	; 2
     d16:	9f 93       	push	r25
     d18:	8f 93       	push	r24
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	8f 93       	push	r24
     d1e:	5c d4       	rcall	.+2232   	; 0x15d8 <SendTrace>
		
		goto Exit;
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
	return Status;
}

bool ProgramADXL345FifoControl(PFIFO_CTL FifoCtl)
{
	bool Status = FALSE;
     d26:	c0 e0       	ldi	r28, 0x00	; 0
	
	if (!gIsADXL345Initialized)
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
		
		goto Exit;
     d28:	14 c0       	rjmp	.+40     	; 0xd52 <ProgramADXL345FifoControl+0x4a>
	
	//
	// Program FIFO Control Register
	//
	
	Status = SetADXL345Register(ADR_FIFO_CTL, FifoCtl, sizeof(FIFO_CTL));
     d2a:	21 e0       	ldi	r18, 0x01	; 1
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e0       	ldi	r20, 0x00	; 0
     d30:	50 e0       	ldi	r21, 0x00	; 0
     d32:	bc 01       	movw	r22, r24
     d34:	88 e3       	ldi	r24, 0x38	; 56
     d36:	35 de       	rcall	.-918    	; 0x9a2 <SetADXL345Register>
     d38:	c8 2f       	mov	r28, r24
	
	if (!Status)
     d3a:	81 11       	cpse	r24, r1
     d3c:	0a c0       	rjmp	.+20     	; 0xd52 <ProgramADXL345FifoControl+0x4a>
	{
		SendTrace (ERROR_LEVEL, "Failed to program FIFO CTL Register. \r\n");
     d3e:	2a e1       	ldi	r18, 0x1A	; 26
     d40:	36 e0       	ldi	r19, 0x06	; 6
     d42:	3f 93       	push	r19
     d44:	2f 93       	push	r18
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	8f 93       	push	r24
     d4a:	46 d4       	rcall	.+2188   	; 0x15d8 <SendTrace>
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
	}
	
Exit:
	
	return Status;
}
     d52:	8c 2f       	mov	r24, r28
     d54:	cf 91       	pop	r28
     d56:	08 95       	ret

00000d58 <ProgramADXL345DataFormat>:

bool ProgramADXL345DataFormat(DATA_RANGE DataRange, bool IntInvert, PDATA_OFFSET DataOffset, DATA_RATE DataRate)
{
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	00 d0       	rcall	.+0      	; 0xd66 <ProgramADXL345DataFormat+0xe>
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	8a 01       	movw	r16, r20
     d6c:	e2 2e       	mov	r14, r18
	
	DATA_FORMAT DataFormat;
	
	BW_RATE BwRate;
	
	if (!gIsADXL345Initialized)
     d6e:	90 91 d8 0a 	lds	r25, 0x0AD8
     d72:	91 11       	cpse	r25, r1
     d74:	0c c0       	rjmp	.+24     	; 0xd8e <ProgramADXL345DataFormat+0x36>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
     d76:	82 e5       	ldi	r24, 0x52	; 82
     d78:	92 e0       	ldi	r25, 0x02	; 2
     d7a:	9f 93       	push	r25
     d7c:	8f 93       	push	r24
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	8f 93       	push	r24
     d82:	2a d4       	rcall	.+2132   	; 0x15d8 <SendTrace>
		
		goto Exit;
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
}

bool ProgramADXL345DataFormat(DATA_RANGE DataRange, bool IntInvert, PDATA_OFFSET DataOffset, DATA_RATE DataRate)
{
	
	bool Status = FALSE;
     d8a:	f1 2c       	mov	r15, r1
	
	if (!gIsADXL345Initialized)
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
		
		goto Exit;
     d8c:	97 c0       	rjmp	.+302    	; 0xebc <ProgramADXL345DataFormat+0x164>
	
	//
	// Set Data Format
	//
	
	DataFormat.FullRes = 1;
     d8e:	99 81       	ldd	r25, Y+1	; 0x01
	
	DataFormat.IntInvert = IntInvert;
     d90:	98 60       	ori	r25, 0x08	; 8
     d92:	60 fb       	bst	r22, 0
     d94:	95 f9       	bld	r25, 5
	
	DataFormat.Justify = 0;
	
	DataFormat.Range = DataRange;
     d96:	83 70       	andi	r24, 0x03	; 3
	
	DataFormat.Rsvd = 0;
	
	DataFormat.SelfTest = 0;
     d98:	98 76       	andi	r25, 0x68	; 104
	
	DataFormat.SPI = 0;
     d9a:	89 2b       	or	r24, r25
     d9c:	8f 7b       	andi	r24, 0xBF	; 191
     d9e:	89 83       	std	Y+1, r24	; 0x01
	
	Status = SetADXL345Register(ADR_DATA_FORMAT, &DataFormat, sizeof(DATA_FORMAT));
     da0:	21 e0       	ldi	r18, 0x01	; 1
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	40 e0       	ldi	r20, 0x00	; 0
     da6:	50 e0       	ldi	r21, 0x00	; 0
     da8:	be 01       	movw	r22, r28
     daa:	6f 5f       	subi	r22, 0xFF	; 255
     dac:	7f 4f       	sbci	r23, 0xFF	; 255
     dae:	81 e3       	ldi	r24, 0x31	; 49
     db0:	f8 dd       	rcall	.-1040   	; 0x9a2 <SetADXL345Register>
     db2:	f8 2e       	mov	r15, r24
	
	if (!Status)
     db4:	81 11       	cpse	r24, r1
     db6:	0b c0       	rjmp	.+22     	; 0xdce <ProgramADXL345DataFormat+0x76>
	{
		SendTrace (ERROR_LEVEL, "Failed to program DATA FORMAT Register. \r\n");
     db8:	22 e4       	ldi	r18, 0x42	; 66
     dba:	36 e0       	ldi	r19, 0x06	; 6
     dbc:	3f 93       	push	r19
     dbe:	2f 93       	push	r18
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	8f 93       	push	r24
     dc4:	09 d4       	rcall	.+2066   	; 0x15d8 <SendTrace>
		
		goto Exit;
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	77 c0       	rjmp	.+238    	; 0xebc <ProgramADXL345DataFormat+0x164>
	
	//
	// Read Data Rate Register
	//
	
	Status = ReadADXL345Register(ADR_BW_RATE, &BwRate, sizeof(BW_RATE));
     dce:	21 e0       	ldi	r18, 0x01	; 1
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	40 e0       	ldi	r20, 0x00	; 0
     dd4:	50 e0       	ldi	r21, 0x00	; 0
     dd6:	be 01       	movw	r22, r28
     dd8:	6e 5f       	subi	r22, 0xFE	; 254
     dda:	7f 4f       	sbci	r23, 0xFF	; 255
     ddc:	8c e2       	ldi	r24, 0x2C	; 44
     dde:	53 db       	rcall	.-2394   	; 0x486 <ReadADXL345Register>
     de0:	f8 2e       	mov	r15, r24
	
	if (!Status)
     de2:	81 11       	cpse	r24, r1
     de4:	0b c0       	rjmp	.+22     	; 0xdfc <ProgramADXL345DataFormat+0xa4>
	{
		SendTrace(ERROR_LEVEL, "Failed to read BW RATE register. \r\n");
     de6:	2c e2       	ldi	r18, 0x2C	; 44
     de8:	35 e0       	ldi	r19, 0x05	; 5
     dea:	3f 93       	push	r19
     dec:	2f 93       	push	r18
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	8f 93       	push	r24
     df2:	f2 d3       	rcall	.+2020   	; 0x15d8 <SendTrace>
		
		goto Exit;
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	60 c0       	rjmp	.+192    	; 0xebc <ProgramADXL345DataFormat+0x164>
	}
	
	BwRate.Rate = DataRate;
     dfc:	8e 2d       	mov	r24, r14
     dfe:	8f 70       	andi	r24, 0x0F	; 15
     e00:	9a 81       	ldd	r25, Y+2	; 0x02
     e02:	90 7f       	andi	r25, 0xF0	; 240
     e04:	e9 2e       	mov	r14, r25
     e06:	e8 2a       	or	r14, r24
     e08:	ea 82       	std	Y+2, r14	; 0x02
	
	//
	// Program new data rate
	//
	
	Status = SetADXL345Register(ADR_BW_RATE, &BwRate, sizeof(BW_RATE));
     e0a:	21 e0       	ldi	r18, 0x01	; 1
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	50 e0       	ldi	r21, 0x00	; 0
     e12:	be 01       	movw	r22, r28
     e14:	6e 5f       	subi	r22, 0xFE	; 254
     e16:	7f 4f       	sbci	r23, 0xFF	; 255
     e18:	8c e2       	ldi	r24, 0x2C	; 44
     e1a:	c3 dd       	rcall	.-1146   	; 0x9a2 <SetADXL345Register>
     e1c:	f8 2e       	mov	r15, r24
	
	if(!Status)
     e1e:	81 11       	cpse	r24, r1
     e20:	0b c0       	rjmp	.+22     	; 0xe38 <ProgramADXL345DataFormat+0xe0>
	{
		SendTrace(ERROR_LEVEL, "Failed to set BW RATE register. \r\n");
     e22:	2d e6       	ldi	r18, 0x6D	; 109
     e24:	36 e0       	ldi	r19, 0x06	; 6
     e26:	3f 93       	push	r19
     e28:	2f 93       	push	r18
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	8f 93       	push	r24
     e2e:	d4 d3       	rcall	.+1960   	; 0x15d8 <SendTrace>
		
		goto Exit;
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	42 c0       	rjmp	.+132    	; 0xebc <ProgramADXL345DataFormat+0x164>
	
	//
	// Set Data Offset
	//
	
	Status = SetADXL345Register(ADR_OFSX, &DataOffset->OffsetX, sizeof(signed char));
     e38:	21 e0       	ldi	r18, 0x01	; 1
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e0       	ldi	r20, 0x00	; 0
     e3e:	50 e0       	ldi	r21, 0x00	; 0
     e40:	b8 01       	movw	r22, r16
     e42:	8e e1       	ldi	r24, 0x1E	; 30
     e44:	ae dd       	rcall	.-1188   	; 0x9a2 <SetADXL345Register>
     e46:	f8 2e       	mov	r15, r24
	
	if (!Status)
     e48:	81 11       	cpse	r24, r1
     e4a:	0b c0       	rjmp	.+22     	; 0xe62 <ProgramADXL345DataFormat+0x10a>
	{
		SendTrace (ERROR_LEVEL, "Failed to program DATA OFFSET X Register. \r\n");
     e4c:	20 e9       	ldi	r18, 0x90	; 144
     e4e:	36 e0       	ldi	r19, 0x06	; 6
     e50:	3f 93       	push	r19
     e52:	2f 93       	push	r18
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	8f 93       	push	r24
     e58:	bf d3       	rcall	.+1918   	; 0x15d8 <SendTrace>
		
		goto Exit;
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	2d c0       	rjmp	.+90     	; 0xebc <ProgramADXL345DataFormat+0x164>
	}
	
	Status = SetADXL345Register(ADR_OFSY, &DataOffset->OffsetY, sizeof(signed char));
     e62:	21 e0       	ldi	r18, 0x01	; 1
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	40 e0       	ldi	r20, 0x00	; 0
     e68:	50 e0       	ldi	r21, 0x00	; 0
     e6a:	b8 01       	movw	r22, r16
     e6c:	6f 5f       	subi	r22, 0xFF	; 255
     e6e:	7f 4f       	sbci	r23, 0xFF	; 255
     e70:	8f e1       	ldi	r24, 0x1F	; 31
     e72:	97 dd       	rcall	.-1234   	; 0x9a2 <SetADXL345Register>
     e74:	f8 2e       	mov	r15, r24
	
	if (!Status)
     e76:	81 11       	cpse	r24, r1
     e78:	0b c0       	rjmp	.+22     	; 0xe90 <ProgramADXL345DataFormat+0x138>
	{
		SendTrace (ERROR_LEVEL, "Failed to program DATA OFFSET Y Register. \r\n");
     e7a:	2d eb       	ldi	r18, 0xBD	; 189
     e7c:	36 e0       	ldi	r19, 0x06	; 6
     e7e:	3f 93       	push	r19
     e80:	2f 93       	push	r18
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	8f 93       	push	r24
     e86:	a8 d3       	rcall	.+1872   	; 0x15d8 <SendTrace>
		
		goto Exit;
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	16 c0       	rjmp	.+44     	; 0xebc <ProgramADXL345DataFormat+0x164>
	}
	
	Status = SetADXL345Register(ADR_OFSZ, &DataOffset->OffsetZ, sizeof(signed char));
     e90:	b8 01       	movw	r22, r16
     e92:	6e 5f       	subi	r22, 0xFE	; 254
     e94:	7f 4f       	sbci	r23, 0xFF	; 255
     e96:	21 e0       	ldi	r18, 0x01	; 1
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	40 e0       	ldi	r20, 0x00	; 0
     e9c:	50 e0       	ldi	r21, 0x00	; 0
     e9e:	80 e2       	ldi	r24, 0x20	; 32
     ea0:	80 dd       	rcall	.-1280   	; 0x9a2 <SetADXL345Register>
     ea2:	f8 2e       	mov	r15, r24
	
	if (!Status)
     ea4:	81 11       	cpse	r24, r1
     ea6:	0a c0       	rjmp	.+20     	; 0xebc <ProgramADXL345DataFormat+0x164>
	{
		SendTrace (ERROR_LEVEL, "Failed to program DATA OFFSET Z Register. \r\n");
     ea8:	2a ee       	ldi	r18, 0xEA	; 234
     eaa:	36 e0       	ldi	r19, 0x06	; 6
     eac:	3f 93       	push	r19
     eae:	2f 93       	push	r18
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	8f 93       	push	r24
     eb4:	91 d3       	rcall	.+1826   	; 0x15d8 <SendTrace>
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
	}
	
Exit:

	return Status;
}
     ebc:	8f 2d       	mov	r24, r15
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	1f 91       	pop	r17
     ec8:	0f 91       	pop	r16
     eca:	ff 90       	pop	r15
     ecc:	ef 90       	pop	r14
     ece:	08 95       	ret

00000ed0 <ProgramADXL345ActivityInactivityDetection>:

bool ProgramADXL345ActivityInactivityDetection(PACT_INACT_CTL ActInactCtl, unsigned char ActThreshold, unsigned char InactThreshold, unsigned char TimeInact)
{
     ed0:	1f 93       	push	r17
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	00 d0       	rcall	.+0      	; 0xed8 <ProgramADXL345ActivityInactivityDetection+0x8>
     ed8:	1f 92       	push	r1
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	69 83       	std	Y+1, r22	; 0x01
     ee0:	4a 83       	std	Y+2, r20	; 0x02
     ee2:	2b 83       	std	Y+3, r18	; 0x03
	
	bool Status = FALSE;
	
	if (!gIsADXL345Initialized)
     ee4:	20 91 d8 0a 	lds	r18, 0x0AD8
     ee8:	21 11       	cpse	r18, r1
     eea:	0c c0       	rjmp	.+24     	; 0xf04 <ProgramADXL345ActivityInactivityDetection+0x34>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
     eec:	82 e5       	ldi	r24, 0x52	; 82
     eee:	92 e0       	ldi	r25, 0x02	; 2
     ef0:	9f 93       	push	r25
     ef2:	8f 93       	push	r24
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	8f 93       	push	r24
     ef8:	6f d3       	rcall	.+1758   	; 0x15d8 <SendTrace>
		
		goto Exit;
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
}

bool ProgramADXL345ActivityInactivityDetection(PACT_INACT_CTL ActInactCtl, unsigned char ActThreshold, unsigned char InactThreshold, unsigned char TimeInact)
{
	
	bool Status = FALSE;
     f00:	10 e0       	ldi	r17, 0x00	; 0
	
	if (!gIsADXL345Initialized)
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
		
		goto Exit;
     f02:	59 c0       	rjmp	.+178    	; 0xfb6 <ProgramADXL345ActivityInactivityDetection+0xe6>
	
	//
	// Program Act Inact Ctl Register
	//
	
	Status = SetADXL345Register(ADR_INACT_CTL, ActInactCtl, sizeof(ACT_INACT_CTL));
     f04:	21 e0       	ldi	r18, 0x01	; 1
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	40 e0       	ldi	r20, 0x00	; 0
     f0a:	50 e0       	ldi	r21, 0x00	; 0
     f0c:	bc 01       	movw	r22, r24
     f0e:	87 e2       	ldi	r24, 0x27	; 39
     f10:	48 dd       	rcall	.-1392   	; 0x9a2 <SetADXL345Register>
     f12:	18 2f       	mov	r17, r24
	
	if (!Status)
     f14:	81 11       	cpse	r24, r1
     f16:	0b c0       	rjmp	.+22     	; 0xf2e <ProgramADXL345ActivityInactivityDetection+0x5e>
	{
		SendTrace (ERROR_LEVEL, "Failed to program ACT INACT CTL Register. \r\n");
     f18:	27 e1       	ldi	r18, 0x17	; 23
     f1a:	37 e0       	ldi	r19, 0x07	; 7
     f1c:	3f 93       	push	r19
     f1e:	2f 93       	push	r18
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	8f 93       	push	r24
     f24:	59 d3       	rcall	.+1714   	; 0x15d8 <SendTrace>
		
		goto Exit;
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	44 c0       	rjmp	.+136    	; 0xfb6 <ProgramADXL345ActivityInactivityDetection+0xe6>
	
	//
	// Program Act Threshold Register
	//
	
	Status = SetADXL345Register(ADR_THRESH_ACT, &ActThreshold, sizeof(unsigned char));
     f2e:	21 e0       	ldi	r18, 0x01	; 1
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e0       	ldi	r20, 0x00	; 0
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	be 01       	movw	r22, r28
     f38:	6f 5f       	subi	r22, 0xFF	; 255
     f3a:	7f 4f       	sbci	r23, 0xFF	; 255
     f3c:	84 e2       	ldi	r24, 0x24	; 36
     f3e:	31 dd       	rcall	.-1438   	; 0x9a2 <SetADXL345Register>
     f40:	18 2f       	mov	r17, r24
	
	if (!Status)
     f42:	81 11       	cpse	r24, r1
     f44:	0b c0       	rjmp	.+22     	; 0xf5c <ProgramADXL345ActivityInactivityDetection+0x8c>
	{
		SendTrace (ERROR_LEVEL, "Failed to program THRESH ACT Register. \r\n");
     f46:	24 e4       	ldi	r18, 0x44	; 68
     f48:	37 e0       	ldi	r19, 0x07	; 7
     f4a:	3f 93       	push	r19
     f4c:	2f 93       	push	r18
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	8f 93       	push	r24
     f52:	42 d3       	rcall	.+1668   	; 0x15d8 <SendTrace>
		
		goto Exit;
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	2d c0       	rjmp	.+90     	; 0xfb6 <ProgramADXL345ActivityInactivityDetection+0xe6>
	
	//
	// Program Inact Threshould Register
	//
	
	Status = SetADXL345Register(ADR_THRESH_INACT, &InactThreshold, sizeof(unsigned char));
     f5c:	21 e0       	ldi	r18, 0x01	; 1
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	40 e0       	ldi	r20, 0x00	; 0
     f62:	50 e0       	ldi	r21, 0x00	; 0
     f64:	be 01       	movw	r22, r28
     f66:	6e 5f       	subi	r22, 0xFE	; 254
     f68:	7f 4f       	sbci	r23, 0xFF	; 255
     f6a:	85 e2       	ldi	r24, 0x25	; 37
     f6c:	1a dd       	rcall	.-1484   	; 0x9a2 <SetADXL345Register>
     f6e:	18 2f       	mov	r17, r24
	
	if (!Status)
     f70:	81 11       	cpse	r24, r1
     f72:	0b c0       	rjmp	.+22     	; 0xf8a <ProgramADXL345ActivityInactivityDetection+0xba>
	{
		SendTrace(ERROR_LEVEL, "Failed to program THRESH INACT Register. \r\n");
     f74:	2e e6       	ldi	r18, 0x6E	; 110
     f76:	37 e0       	ldi	r19, 0x07	; 7
     f78:	3f 93       	push	r19
     f7a:	2f 93       	push	r18
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	8f 93       	push	r24
     f80:	2b d3       	rcall	.+1622   	; 0x15d8 <SendTrace>
		
		goto Exit;
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	16 c0       	rjmp	.+44     	; 0xfb6 <ProgramADXL345ActivityInactivityDetection+0xe6>
	
	//
	// Program Time Inact Register
	//
	
	Status = SetADXL345Register(ADR_TIME_INACT, &TimeInact, sizeof(unsigned char));
     f8a:	21 e0       	ldi	r18, 0x01	; 1
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	50 e0       	ldi	r21, 0x00	; 0
     f92:	be 01       	movw	r22, r28
     f94:	6d 5f       	subi	r22, 0xFD	; 253
     f96:	7f 4f       	sbci	r23, 0xFF	; 255
     f98:	86 e2       	ldi	r24, 0x26	; 38
     f9a:	03 dd       	rcall	.-1530   	; 0x9a2 <SetADXL345Register>
     f9c:	18 2f       	mov	r17, r24
	
	if (!Status)
     f9e:	81 11       	cpse	r24, r1
     fa0:	0a c0       	rjmp	.+20     	; 0xfb6 <ProgramADXL345ActivityInactivityDetection+0xe6>
	{
		SendTrace(ERROR_LEVEL, "Failed to program TIME INACT Register. \r\n");
     fa2:	2a e9       	ldi	r18, 0x9A	; 154
     fa4:	37 e0       	ldi	r19, 0x07	; 7
     fa6:	3f 93       	push	r19
     fa8:	2f 93       	push	r18
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	8f 93       	push	r24
     fae:	14 d3       	rcall	.+1576   	; 0x15d8 <SendTrace>
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
	}
	
Exit:
	
	return Status;
}
     fb6:	81 2f       	mov	r24, r17
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	08 95       	ret

00000fc6 <InitTrace>:
#ifdef DEBUG

void
InitTrace(unsigned long ProcFrequency, unsigned char TraceLevel)
{
	if (!gTraceInitialized)
     fc6:	80 91 d9 0a 	lds	r24, 0x0AD9
     fca:	81 11       	cpse	r24, r1
     fcc:	09 c0       	rjmp	.+18     	; 0xfe0 <InitTrace+0x1a>
	{

		gTraceLevel = TraceLevel;
     fce:	40 93 e0 0a 	sts	0x0AE0, r20

		InitUARTSync(UART_ZERO, BR_9600, NORMAL_MODE);	
     fd2:	40 e0       	ldi	r20, 0x00	; 0
     fd4:	63 e3       	ldi	r22, 0x33	; 51
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	60 d7       	rcall	.+3776   	; 0x1e9a <InitUARTSync>
		
		gTraceInitialized = TRUE;
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	80 93 d9 0a 	sts	0x0AD9, r24
     fe0:	08 95       	ret

00000fe2 <SendStringValue>:
SendStringValue(char *String)
{

	unsigned long Length = 0;
	
	Length = strlen(String);
     fe2:	fc 01       	movw	r30, r24
     fe4:	01 90       	ld	r0, Z+
     fe6:	00 20       	and	r0, r0
     fe8:	e9 f7       	brne	.-6      	; 0xfe4 <SendStringValue+0x2>
     fea:	31 97       	sbiw	r30, 0x01	; 1
     fec:	9f 01       	movw	r18, r30
     fee:	28 1b       	sub	r18, r24
     ff0:	39 0b       	sbc	r19, r25
     ff2:	40 e0       	ldi	r20, 0x00	; 0
     ff4:	50 e0       	ldi	r21, 0x00	; 0
	
	UARTTransmitSync(UART_ZERO, (PVOID) String, Length);
     ff6:	bc 01       	movw	r22, r24
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	0c 94 1a 10 	jmp	0x2034	; 0x2034 <UARTTransmitSync>
     ffe:	08 95       	ret

00001000 <SendHexValue>:
	
}

void
SendHexValue(unsigned long long Value)
{
    1000:	8f 92       	push	r8
    1002:	9f 92       	push	r9
    1004:	af 92       	push	r10
    1006:	bf 92       	push	r11
    1008:	cf 92       	push	r12
    100a:	df 92       	push	r13
    100c:	ef 92       	push	r14
    100e:	ff 92       	push	r15
    1010:	0f 93       	push	r16
    1012:	1f 93       	push	r17
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	da 95       	dec	r29
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	02 2f       	mov	r16, r18
    102a:	93 2e       	mov	r9, r19
    102c:	a4 2e       	mov	r10, r20
    102e:	b5 2e       	mov	r11, r21
    1030:	c6 2e       	mov	r12, r22
    1032:	d7 2e       	mov	r13, r23
    1034:	e8 2e       	mov	r14, r24
    1036:	f9 2e       	mov	r15, r25

	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
    1038:	10 e0       	ldi	r17, 0x00	; 0

		if (Value < 16)
		{
			TransmitChar[Count] = Value;

			Value = 0;
    103a:	81 2c       	mov	r8, r1


	do
	{

		if (Value < 16)
    103c:	20 2f       	mov	r18, r16
    103e:	39 2d       	mov	r19, r9
    1040:	4a 2d       	mov	r20, r10
    1042:	5b 2d       	mov	r21, r11
    1044:	6c 2d       	mov	r22, r12
    1046:	7d 2d       	mov	r23, r13
    1048:	8e 2d       	mov	r24, r14
    104a:	9f 2d       	mov	r25, r15
    104c:	af e0       	ldi	r26, 0x0F	; 15
    104e:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__cmpdi2_s8>
    1052:	09 f0       	breq	.+2      	; 0x1056 <SendHexValue+0x56>
    1054:	80 f4       	brcc	.+32     	; 0x1076 <SendHexValue+0x76>
		{
			TransmitChar[Count] = Value;
    1056:	e1 e0       	ldi	r30, 0x01	; 1
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	ec 0f       	add	r30, r28
    105c:	fd 1f       	adc	r31, r29
    105e:	e1 0f       	add	r30, r17
    1060:	f1 1d       	adc	r31, r1
    1062:	00 83       	st	Z, r16

			Value = 0;
    1064:	08 2d       	mov	r16, r8
    1066:	98 2c       	mov	r9, r8
    1068:	a8 2c       	mov	r10, r8
    106a:	b8 2c       	mov	r11, r8
    106c:	c8 2c       	mov	r12, r8
    106e:	d8 2c       	mov	r13, r8
    1070:	e8 2c       	mov	r14, r8
    1072:	f8 2c       	mov	r15, r8
    1074:	1c c0       	rjmp	.+56     	; 0x10ae <SendHexValue+0xae>
		}
		else
		{
			TransmitChar[Count] = Value % 16;
    1076:	e1 e0       	ldi	r30, 0x01	; 1
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	ec 0f       	add	r30, r28
    107c:	fd 1f       	adc	r31, r29
    107e:	e1 0f       	add	r30, r17
    1080:	f1 1d       	adc	r31, r1
    1082:	80 2f       	mov	r24, r16
    1084:	8f 70       	andi	r24, 0x0F	; 15
    1086:	80 83       	st	Z, r24

			Value = Value / 16;
    1088:	20 2f       	mov	r18, r16
    108a:	39 2d       	mov	r19, r9
    108c:	4a 2d       	mov	r20, r10
    108e:	5b 2d       	mov	r21, r11
    1090:	6c 2d       	mov	r22, r12
    1092:	7d 2d       	mov	r23, r13
    1094:	8e 2d       	mov	r24, r14
    1096:	9f 2d       	mov	r25, r15
    1098:	04 e0       	ldi	r16, 0x04	; 4
    109a:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__lshrdi3>
    109e:	02 2f       	mov	r16, r18
    10a0:	93 2e       	mov	r9, r19
    10a2:	a4 2e       	mov	r10, r20
    10a4:	b5 2e       	mov	r11, r21
    10a6:	c6 2e       	mov	r12, r22
    10a8:	d7 2e       	mov	r13, r23
    10aa:	e8 2e       	mov	r14, r24
    10ac:	f9 2e       	mov	r15, r25

		}
		
		if (TransmitChar[Count] > 9)
    10ae:	e1 2f       	mov	r30, r17
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	a1 e0       	ldi	r26, 0x01	; 1
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	ac 0f       	add	r26, r28
    10b8:	bd 1f       	adc	r27, r29
    10ba:	ae 0f       	add	r26, r30
    10bc:	bf 1f       	adc	r27, r31
    10be:	8c 91       	ld	r24, X
    10c0:	8a 30       	cpi	r24, 0x0A	; 10
    10c2:	20 f0       	brcs	.+8      	; 0x10cc <SendHexValue+0xcc>
		{
			TransmitChar[Count] = TransmitChar[Count] + ASCII_HEX_CONVERSION;
    10c4:	fd 01       	movw	r30, r26
    10c6:	89 5a       	subi	r24, 0xA9	; 169
    10c8:	80 83       	st	Z, r24
    10ca:	08 c0       	rjmp	.+16     	; 0x10dc <SendHexValue+0xdc>
		}
		else
		{
			TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
    10cc:	21 e0       	ldi	r18, 0x01	; 1
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	2c 0f       	add	r18, r28
    10d2:	3d 1f       	adc	r19, r29
    10d4:	e2 0f       	add	r30, r18
    10d6:	f3 1f       	adc	r31, r19
    10d8:	80 5d       	subi	r24, 0xD0	; 208
    10da:	80 83       	st	Z, r24
		}
		
		Count++;
    10dc:	1f 5f       	subi	r17, 0xFF	; 255

	} while (Value != 0);
    10de:	20 2f       	mov	r18, r16
    10e0:	39 2d       	mov	r19, r9
    10e2:	4a 2d       	mov	r20, r10
    10e4:	5b 2d       	mov	r21, r11
    10e6:	6c 2d       	mov	r22, r12
    10e8:	7d 2d       	mov	r23, r13
    10ea:	8e 2d       	mov	r24, r14
    10ec:	9f 2d       	mov	r25, r15
    10ee:	a8 2d       	mov	r26, r8
    10f0:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__cmpdi2_s8>
    10f4:	09 f0       	breq	.+2      	; 0x10f8 <SendHexValue+0xf8>
    10f6:	a2 cf       	rjmp	.-188    	; 0x103c <SendHexValue+0x3c>

	while (Count != 0)
    10f8:	11 23       	and	r17, r17
    10fa:	91 f0       	breq	.+36     	; 0x1120 <SendHexValue+0x120>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
    10fc:	61 2f       	mov	r22, r17
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	61 50       	subi	r22, 0x01	; 1
    1102:	71 09       	sbc	r23, r1
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	8c 0f       	add	r24, r28
    110a:	9d 1f       	adc	r25, r29
    110c:	68 0f       	add	r22, r24
    110e:	79 1f       	adc	r23, r25
    1110:	21 e0       	ldi	r18, 0x01	; 1
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	40 e0       	ldi	r20, 0x00	; 0
    1116:	50 e0       	ldi	r21, 0x00	; 0
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	8c d7       	rcall	.+3864   	; 0x2034 <UARTTransmitSync>
		
		Count--;
    111c:	11 50       	subi	r17, 0x01	; 1
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
    111e:	71 f7       	brne	.-36     	; 0x10fc <SendHexValue+0xfc>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}
}
    1120:	d3 95       	inc	r29
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	df 90       	pop	r13
    113a:	cf 90       	pop	r12
    113c:	bf 90       	pop	r11
    113e:	af 90       	pop	r10
    1140:	9f 90       	pop	r9
    1142:	8f 90       	pop	r8
    1144:	08 95       	ret

00001146 <SendDecimalValue>:


void
SendDecimalValue(unsigned long long Value)
{
    1146:	2f 92       	push	r2
    1148:	3f 92       	push	r3
    114a:	4f 92       	push	r4
    114c:	5f 92       	push	r5
    114e:	6f 92       	push	r6
    1150:	7f 92       	push	r7
    1152:	8f 92       	push	r8
    1154:	9f 92       	push	r9
    1156:	af 92       	push	r10
    1158:	bf 92       	push	r11
    115a:	cf 92       	push	r12
    115c:	df 92       	push	r13
    115e:	ef 92       	push	r14
    1160:	ff 92       	push	r15
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	c2 50       	subi	r28, 0x02	; 2
    1170:	d1 40       	sbci	r29, 0x01	; 1
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	cf 5f       	subi	r28, 0xFF	; 255
    117e:	de 4f       	sbci	r29, 0xFE	; 254
    1180:	28 83       	st	Y, r18
    1182:	c1 50       	subi	r28, 0x01	; 1
    1184:	d1 40       	sbci	r29, 0x01	; 1
    1186:	23 2e       	mov	r2, r19
    1188:	34 2e       	mov	r3, r20
    118a:	45 2e       	mov	r4, r21
    118c:	56 2e       	mov	r5, r22
    118e:	67 2e       	mov	r6, r23
    1190:	78 2e       	mov	r7, r24
    1192:	89 2e       	mov	r8, r25

	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
    1194:	91 2c       	mov	r9, r1


	do
	{

		if (Value < 10)
    1196:	cf 5f       	subi	r28, 0xFF	; 255
    1198:	de 4f       	sbci	r29, 0xFE	; 254
    119a:	28 81       	ld	r18, Y
    119c:	c1 50       	subi	r28, 0x01	; 1
    119e:	d1 40       	sbci	r29, 0x01	; 1
    11a0:	32 2d       	mov	r19, r2
    11a2:	43 2d       	mov	r20, r3
    11a4:	54 2d       	mov	r21, r4
    11a6:	65 2d       	mov	r22, r5
    11a8:	76 2d       	mov	r23, r6
    11aa:	87 2d       	mov	r24, r7
    11ac:	98 2d       	mov	r25, r8
    11ae:	a9 e0       	ldi	r26, 0x09	; 9
    11b0:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__cmpdi2_s8>
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <SendDecimalValue+0x72>
    11b6:	40 f4       	brcc	.+16     	; 0x11c8 <SendDecimalValue+0x82>

			Value = Value / 10;

		}
		
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
    11b8:	fe 01       	movw	r30, r28
    11ba:	e9 0d       	add	r30, r9
    11bc:	f1 1d       	adc	r31, r1
    11be:	82 2f       	mov	r24, r18
    11c0:	80 5d       	subi	r24, 0xD0	; 208
    11c2:	81 83       	std	Z+1, r24	; 0x01
		
		Count++;
    11c4:	93 94       	inc	r9
    11c6:	4b c0       	rjmp	.+150    	; 0x125e <SendDecimalValue+0x118>

			Value = 0;
		}
		else
		{
			TransmitChar[Count] = Value % 10;
    11c8:	0f 2e       	mov	r0, r31
    11ca:	fa e0       	ldi	r31, 0x0A	; 10
    11cc:	af 2e       	mov	r10, r31
    11ce:	f0 2d       	mov	r31, r0
    11d0:	b1 2c       	mov	r11, r1
    11d2:	c1 2c       	mov	r12, r1
    11d4:	d1 2c       	mov	r13, r1
    11d6:	e1 2c       	mov	r14, r1
    11d8:	f1 2c       	mov	r15, r1
    11da:	00 e0       	ldi	r16, 0x00	; 0
    11dc:	10 e0       	ldi	r17, 0x00	; 0
    11de:	cf 5f       	subi	r28, 0xFF	; 255
    11e0:	de 4f       	sbci	r29, 0xFE	; 254
    11e2:	28 81       	ld	r18, Y
    11e4:	c1 50       	subi	r28, 0x01	; 1
    11e6:	d1 40       	sbci	r29, 0x01	; 1
    11e8:	32 2d       	mov	r19, r2
    11ea:	43 2d       	mov	r20, r3
    11ec:	54 2d       	mov	r21, r4
    11ee:	65 2d       	mov	r22, r5
    11f0:	76 2d       	mov	r23, r6
    11f2:	87 2d       	mov	r24, r7
    11f4:	98 2d       	mov	r25, r8
    11f6:	0e 94 ad 14 	call	0x295a	; 0x295a <__umoddi3>
    11fa:	ce 5f       	subi	r28, 0xFE	; 254
    11fc:	de 4f       	sbci	r29, 0xFE	; 254
    11fe:	28 83       	st	Y, r18
    1200:	c2 50       	subi	r28, 0x02	; 2
    1202:	d1 40       	sbci	r29, 0x01	; 1

			Value = Value / 10;
    1204:	cf 5f       	subi	r28, 0xFF	; 255
    1206:	de 4f       	sbci	r29, 0xFE	; 254
    1208:	28 81       	ld	r18, Y
    120a:	c1 50       	subi	r28, 0x01	; 1
    120c:	d1 40       	sbci	r29, 0x01	; 1
    120e:	32 2d       	mov	r19, r2
    1210:	43 2d       	mov	r20, r3
    1212:	54 2d       	mov	r21, r4
    1214:	65 2d       	mov	r22, r5
    1216:	76 2d       	mov	r23, r6
    1218:	87 2d       	mov	r24, r7
    121a:	98 2d       	mov	r25, r8
    121c:	0e 94 af 14 	call	0x295e	; 0x295e <__udivdi3>
    1220:	cf 5f       	subi	r28, 0xFF	; 255
    1222:	de 4f       	sbci	r29, 0xFE	; 254
    1224:	28 83       	st	Y, r18
    1226:	c1 50       	subi	r28, 0x01	; 1
    1228:	d1 40       	sbci	r29, 0x01	; 1
    122a:	23 2e       	mov	r2, r19
    122c:	34 2e       	mov	r3, r20
    122e:	45 2e       	mov	r4, r21
    1230:	56 2e       	mov	r5, r22
    1232:	67 2e       	mov	r6, r23
    1234:	78 2e       	mov	r7, r24
    1236:	89 2e       	mov	r8, r25

		}
		
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
    1238:	e1 e0       	ldi	r30, 0x01	; 1
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	ec 0f       	add	r30, r28
    123e:	fd 1f       	adc	r31, r29
    1240:	e9 0d       	add	r30, r9
    1242:	f1 1d       	adc	r31, r1
    1244:	ce 5f       	subi	r28, 0xFE	; 254
    1246:	de 4f       	sbci	r29, 0xFE	; 254
    1248:	a8 81       	ld	r26, Y
    124a:	c2 50       	subi	r28, 0x02	; 2
    124c:	d1 40       	sbci	r29, 0x01	; 1
    124e:	a0 5d       	subi	r26, 0xD0	; 208
    1250:	a0 83       	st	Z, r26
		
		Count++;
    1252:	93 94       	inc	r9

	} while (Value != 0);
    1254:	a0 e0       	ldi	r26, 0x00	; 0
    1256:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__cmpdi2_s8>
    125a:	09 f0       	breq	.+2      	; 0x125e <SendDecimalValue+0x118>
    125c:	9c cf       	rjmp	.-200    	; 0x1196 <SendDecimalValue+0x50>

	while (Count != 0)
    125e:	99 20       	and	r9, r9
    1260:	91 f0       	breq	.+36     	; 0x1286 <SendDecimalValue+0x140>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
    1262:	69 2d       	mov	r22, r9
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	61 50       	subi	r22, 0x01	; 1
    1268:	71 09       	sbc	r23, r1
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	8c 0f       	add	r24, r28
    1270:	9d 1f       	adc	r25, r29
    1272:	68 0f       	add	r22, r24
    1274:	79 1f       	adc	r23, r25
    1276:	21 e0       	ldi	r18, 0x01	; 1
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	40 e0       	ldi	r20, 0x00	; 0
    127c:	50 e0       	ldi	r21, 0x00	; 0
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	d9 d6       	rcall	.+3506   	; 0x2034 <UARTTransmitSync>
		
		Count--;
    1282:	9a 94       	dec	r9
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
    1284:	71 f7       	brne	.-36     	; 0x1262 <SendDecimalValue+0x11c>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}	
}
    1286:	ce 5f       	subi	r28, 0xFE	; 254
    1288:	de 4f       	sbci	r29, 0xFE	; 254
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	de bf       	out	0x3e, r29	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	cd bf       	out	0x3d, r28	; 61
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	1f 91       	pop	r17
    129a:	0f 91       	pop	r16
    129c:	ff 90       	pop	r15
    129e:	ef 90       	pop	r14
    12a0:	df 90       	pop	r13
    12a2:	cf 90       	pop	r12
    12a4:	bf 90       	pop	r11
    12a6:	af 90       	pop	r10
    12a8:	9f 90       	pop	r9
    12aa:	8f 90       	pop	r8
    12ac:	7f 90       	pop	r7
    12ae:	6f 90       	pop	r6
    12b0:	5f 90       	pop	r5
    12b2:	4f 90       	pop	r4
    12b4:	3f 90       	pop	r3
    12b6:	2f 90       	pop	r2
    12b8:	08 95       	ret

000012ba <SendDoubleValue>:

void
SendDoubleValue(double Value)
{
    12ba:	6f 92       	push	r6
    12bc:	7f 92       	push	r7
    12be:	8f 92       	push	r8
    12c0:	9f 92       	push	r9
    12c2:	af 92       	push	r10
    12c4:	bf 92       	push	r11
    12c6:	cf 92       	push	r12
    12c8:	df 92       	push	r13
    12ca:	ef 92       	push	r14
    12cc:	ff 92       	push	r15
    12ce:	0f 93       	push	r16
    12d0:	1f 93       	push	r17
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <SendDoubleValue+0x1e>
    12d8:	1f 92       	push	r1
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    12de:	6b 01       	movw	r12, r22
    12e0:	7c 01       	movw	r14, r24
	
	long long IntPart;
	
	unsigned char FracPart;
	
	unsigned char Dot = '.';
    12e2:	8e e2       	ldi	r24, 0x2E	; 46
    12e4:	8a 83       	std	Y+2, r24	; 0x02
	
	unsigned char Minus = '-';
    12e6:	8d e2       	ldi	r24, 0x2D	; 45
    12e8:	8b 83       	std	Y+3, r24	; 0x03
	
	if (Value < 0)
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	a9 01       	movw	r20, r18
    12f0:	c7 01       	movw	r24, r14
    12f2:	b6 01       	movw	r22, r12
    12f4:	0e 94 bd 11 	call	0x237a	; 0x237a <__cmpsf2>
    12f8:	88 23       	and	r24, r24
    12fa:	6c f4       	brge	.+26     	; 0x1316 <SendDoubleValue+0x5c>
	{
		
		UARTTransmitSync(UART_ZERO, (PVOID) &Minus, 1);
    12fc:	21 e0       	ldi	r18, 0x01	; 1
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	40 e0       	ldi	r20, 0x00	; 0
    1302:	50 e0       	ldi	r21, 0x00	; 0
    1304:	be 01       	movw	r22, r28
    1306:	6d 5f       	subi	r22, 0xFD	; 253
    1308:	7f 4f       	sbci	r23, 0xFF	; 255
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	93 d6       	rcall	.+3366   	; 0x2034 <UARTTransmitSync>
		
		Value = Value * -1;
    130e:	f7 fa       	bst	r15, 7
    1310:	f0 94       	com	r15
    1312:	f7 f8       	bld	r15, 7
    1314:	f0 94       	com	r15
	}
	
	IntPart = (long long) Value;
    1316:	c7 01       	movw	r24, r14
    1318:	b6 01       	movw	r22, r12
    131a:	0e 94 27 12 	call	0x244e	; 0x244e <__fixsfdi>
    131e:	62 2e       	mov	r6, r18
    1320:	73 2e       	mov	r7, r19
    1322:	84 2e       	mov	r8, r20
    1324:	95 2e       	mov	r9, r21
    1326:	a6 2e       	mov	r10, r22
    1328:	b7 2e       	mov	r11, r23
    132a:	08 2f       	mov	r16, r24
    132c:	19 2f       	mov	r17, r25
		
	Value = Value - IntPart;
    132e:	0e 94 8d 12 	call	0x251a	; 0x251a <__floatdisf>
    1332:	9b 01       	movw	r18, r22
    1334:	ac 01       	movw	r20, r24
    1336:	c7 01       	movw	r24, r14
    1338:	b6 01       	movw	r22, r12
    133a:	58 d7       	rcall	.+3760   	; 0x21ec <__subsf3>
    133c:	6b 01       	movw	r12, r22
    133e:	7c 01       	movw	r14, r24
	
	SendDecimalValue(IntPart);
    1340:	26 2d       	mov	r18, r6
    1342:	37 2d       	mov	r19, r7
    1344:	48 2d       	mov	r20, r8
    1346:	59 2d       	mov	r21, r9
    1348:	6a 2d       	mov	r22, r10
    134a:	7b 2d       	mov	r23, r11
    134c:	80 2f       	mov	r24, r16
    134e:	91 2f       	mov	r25, r17
    1350:	fa de       	rcall	.-524    	; 0x1146 <SendDecimalValue>
	
	UARTTransmitSync(UART_ZERO, (PVOID) &Dot, 1);
    1352:	21 e0       	ldi	r18, 0x01	; 1
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	40 e0       	ldi	r20, 0x00	; 0
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	be 01       	movw	r22, r28
    135c:	6e 5f       	subi	r22, 0xFE	; 254
    135e:	7f 4f       	sbci	r23, 0xFF	; 255
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	68 d6       	rcall	.+3280   	; 0x2034 <UARTTransmitSync>
	
	while (Value != 0)
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	a9 01       	movw	r20, r18
    136a:	c7 01       	movw	r24, r14
    136c:	b6 01       	movw	r22, r12
    136e:	0e 94 bd 11 	call	0x237a	; 0x237a <__cmpsf2>
    1372:	88 23       	and	r24, r24
    1374:	61 f1       	breq	.+88     	; 0x13ce <SendDoubleValue+0x114>
	{
		FracPart = (Value * 10);
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	40 e2       	ldi	r20, 0x20	; 32
    137c:	51 e4       	ldi	r21, 0x41	; 65
    137e:	c7 01       	movw	r24, r14
    1380:	b6 01       	movw	r22, r12
    1382:	0e 94 bd 13 	call	0x277a	; 0x277a <__mulsf3>
    1386:	6b 01       	movw	r12, r22
    1388:	7c 01       	movw	r14, r24
    138a:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixunssfsi>
    138e:	16 2f       	mov	r17, r22
		
		Value = (Value * 10) - FracPart;
    1390:	70 e0       	ldi	r23, 0x00	; 0
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	0e 94 93 12 	call	0x2526	; 0x2526 <__floatsisf>
    139a:	9b 01       	movw	r18, r22
    139c:	ac 01       	movw	r20, r24
    139e:	c7 01       	movw	r24, r14
    13a0:	b6 01       	movw	r22, r12
    13a2:	24 d7       	rcall	.+3656   	; 0x21ec <__subsf3>
    13a4:	6b 01       	movw	r12, r22
    13a6:	7c 01       	movw	r14, r24
		
		FracPart = FracPart + ASCII_DECIMAL_CONVERSION;
    13a8:	10 5d       	subi	r17, 0xD0	; 208
    13aa:	19 83       	std	Y+1, r17	; 0x01
		
		UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
    13ac:	21 e0       	ldi	r18, 0x01	; 1
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	40 e0       	ldi	r20, 0x00	; 0
    13b2:	50 e0       	ldi	r21, 0x00	; 0
    13b4:	be 01       	movw	r22, r28
    13b6:	6f 5f       	subi	r22, 0xFF	; 255
    13b8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	3b d6       	rcall	.+3190   	; 0x2034 <UARTTransmitSync>
	
	SendDecimalValue(IntPart);
	
	UARTTransmitSync(UART_ZERO, (PVOID) &Dot, 1);
	
	while (Value != 0)
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	a9 01       	movw	r20, r18
    13c4:	c7 01       	movw	r24, r14
    13c6:	b6 01       	movw	r22, r12
    13c8:	d8 d7       	rcall	.+4016   	; 0x237a <__cmpsf2>
    13ca:	81 11       	cpse	r24, r1
    13cc:	d4 cf       	rjmp	.-88     	; 0x1376 <SendDoubleValue+0xbc>
	
	//
	// Print 0
	//
	
	FracPart = ASCII_DECIMAL_CONVERSION;
    13ce:	80 e3       	ldi	r24, 0x30	; 48
    13d0:	89 83       	std	Y+1, r24	; 0x01
	
	UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
    13d2:	21 e0       	ldi	r18, 0x01	; 1
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	50 e0       	ldi	r21, 0x00	; 0
    13da:	be 01       	movw	r22, r28
    13dc:	6f 5f       	subi	r22, 0xFF	; 255
    13de:	7f 4f       	sbci	r23, 0xFF	; 255
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	28 d6       	rcall	.+3152   	; 0x2034 <UARTTransmitSync>
}
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	ff 90       	pop	r15
    13f4:	ef 90       	pop	r14
    13f6:	df 90       	pop	r13
    13f8:	cf 90       	pop	r12
    13fa:	bf 90       	pop	r11
    13fc:	af 90       	pop	r10
    13fe:	9f 90       	pop	r9
    1400:	8f 90       	pop	r8
    1402:	7f 90       	pop	r7
    1404:	6f 90       	pop	r6
    1406:	08 95       	ret

00001408 <SendSignedDecimalValue>:

void
SendSignedDecimalValue(long long Value)
{
    1408:	2f 92       	push	r2
    140a:	3f 92       	push	r3
    140c:	4f 92       	push	r4
    140e:	5f 92       	push	r5
    1410:	6f 92       	push	r6
    1412:	7f 92       	push	r7
    1414:	8f 92       	push	r8
    1416:	9f 92       	push	r9
    1418:	af 92       	push	r10
    141a:	bf 92       	push	r11
    141c:	cf 92       	push	r12
    141e:	df 92       	push	r13
    1420:	ef 92       	push	r14
    1422:	ff 92       	push	r15
    1424:	0f 93       	push	r16
    1426:	1f 93       	push	r17
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	c3 50       	subi	r28, 0x03	; 3
    1432:	d1 40       	sbci	r29, 0x01	; 1
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	ce 5f       	subi	r28, 0xFE	; 254
    1440:	de 4f       	sbci	r29, 0xFE	; 254
    1442:	28 83       	st	Y, r18
    1444:	c2 50       	subi	r28, 0x02	; 2
    1446:	d1 40       	sbci	r29, 0x01	; 1
    1448:	83 2e       	mov	r8, r19
    144a:	74 2e       	mov	r7, r20
    144c:	65 2e       	mov	r6, r21
    144e:	56 2e       	mov	r5, r22
    1450:	47 2e       	mov	r4, r23
    1452:	38 2e       	mov	r3, r24
    1454:	29 2e       	mov	r2, r25
	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
	
	unsigned char Minus = '-';
    1456:	8d e2       	ldi	r24, 0x2D	; 45
    1458:	cf 5f       	subi	r28, 0xFF	; 255
    145a:	de 4f       	sbci	r29, 0xFE	; 254
    145c:	88 83       	st	Y, r24
    145e:	c1 50       	subi	r28, 0x01	; 1
    1460:	d1 40       	sbci	r29, 0x01	; 1

	//
	// If the value is negative, print - sign and make the value positive.
	//

	if (Value < 0)
    1462:	83 2d       	mov	r24, r3
    1464:	a0 e0       	ldi	r26, 0x00	; 0
    1466:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__cmpdi2_s8>
    146a:	1c f5       	brge	.+70     	; 0x14b2 <SendSignedDecimalValue+0xaa>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &Minus, 1);
    146c:	21 e0       	ldi	r18, 0x01	; 1
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	50 e0       	ldi	r21, 0x00	; 0
    1474:	be 01       	movw	r22, r28
    1476:	6f 5f       	subi	r22, 0xFF	; 255
    1478:	7e 4f       	sbci	r23, 0xFE	; 254
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	db d5       	rcall	.+2998   	; 0x2034 <UARTTransmitSync>

		Value *= -1;
    147e:	ce 5f       	subi	r28, 0xFE	; 254
    1480:	de 4f       	sbci	r29, 0xFE	; 254
    1482:	28 81       	ld	r18, Y
    1484:	c2 50       	subi	r28, 0x02	; 2
    1486:	d1 40       	sbci	r29, 0x01	; 1
    1488:	38 2d       	mov	r19, r8
    148a:	47 2d       	mov	r20, r7
    148c:	56 2d       	mov	r21, r6
    148e:	65 2d       	mov	r22, r5
    1490:	74 2d       	mov	r23, r4
    1492:	83 2d       	mov	r24, r3
    1494:	92 2d       	mov	r25, r2
    1496:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <__negdi2>
    149a:	ce 5f       	subi	r28, 0xFE	; 254
    149c:	de 4f       	sbci	r29, 0xFE	; 254
    149e:	28 83       	st	Y, r18
    14a0:	c2 50       	subi	r28, 0x02	; 2
    14a2:	d1 40       	sbci	r29, 0x01	; 1
    14a4:	83 2e       	mov	r8, r19
    14a6:	74 2e       	mov	r7, r20
    14a8:	65 2e       	mov	r6, r21
    14aa:	56 2e       	mov	r5, r22
    14ac:	47 2e       	mov	r4, r23
    14ae:	38 2e       	mov	r3, r24
    14b0:	29 2e       	mov	r2, r25
	UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
}

void
SendSignedDecimalValue(long long Value)
{
    14b2:	91 2c       	mov	r9, r1
	}

	do
	{

		if (Value < 10)
    14b4:	ce 5f       	subi	r28, 0xFE	; 254
    14b6:	de 4f       	sbci	r29, 0xFE	; 254
    14b8:	28 81       	ld	r18, Y
    14ba:	c2 50       	subi	r28, 0x02	; 2
    14bc:	d1 40       	sbci	r29, 0x01	; 1
    14be:	38 2d       	mov	r19, r8
    14c0:	47 2d       	mov	r20, r7
    14c2:	56 2d       	mov	r21, r6
    14c4:	65 2d       	mov	r22, r5
    14c6:	74 2d       	mov	r23, r4
    14c8:	83 2d       	mov	r24, r3
    14ca:	92 2d       	mov	r25, r2
    14cc:	a9 e0       	ldi	r26, 0x09	; 9
    14ce:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__cmpdi2_s8>
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <SendSignedDecimalValue+0xce>
    14d4:	44 f4       	brge	.+16     	; 0x14e6 <SendSignedDecimalValue+0xde>

			Value = Value / 10;

		}
	
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
    14d6:	fe 01       	movw	r30, r28
    14d8:	e9 0d       	add	r30, r9
    14da:	f1 1d       	adc	r31, r1
    14dc:	82 2f       	mov	r24, r18
    14de:	80 5d       	subi	r24, 0xD0	; 208
    14e0:	81 83       	std	Z+1, r24	; 0x01
		
		Count++;
    14e2:	93 94       	inc	r9
    14e4:	4b c0       	rjmp	.+150    	; 0x157c <SendSignedDecimalValue+0x174>

			Value = 0;
		}
		else
		{
			TransmitChar[Count] = Value % 10;
    14e6:	0f 2e       	mov	r0, r31
    14e8:	fa e0       	ldi	r31, 0x0A	; 10
    14ea:	af 2e       	mov	r10, r31
    14ec:	f0 2d       	mov	r31, r0
    14ee:	b1 2c       	mov	r11, r1
    14f0:	c1 2c       	mov	r12, r1
    14f2:	d1 2c       	mov	r13, r1
    14f4:	e1 2c       	mov	r14, r1
    14f6:	f1 2c       	mov	r15, r1
    14f8:	00 e0       	ldi	r16, 0x00	; 0
    14fa:	10 e0       	ldi	r17, 0x00	; 0
    14fc:	ce 5f       	subi	r28, 0xFE	; 254
    14fe:	de 4f       	sbci	r29, 0xFE	; 254
    1500:	28 81       	ld	r18, Y
    1502:	c2 50       	subi	r28, 0x02	; 2
    1504:	d1 40       	sbci	r29, 0x01	; 1
    1506:	38 2d       	mov	r19, r8
    1508:	47 2d       	mov	r20, r7
    150a:	56 2d       	mov	r21, r6
    150c:	65 2d       	mov	r22, r5
    150e:	74 2d       	mov	r23, r4
    1510:	83 2d       	mov	r24, r3
    1512:	92 2d       	mov	r25, r2
    1514:	0e 94 82 14 	call	0x2904	; 0x2904 <__moddi3>
    1518:	cd 5f       	subi	r28, 0xFD	; 253
    151a:	de 4f       	sbci	r29, 0xFE	; 254
    151c:	28 83       	st	Y, r18
    151e:	c3 50       	subi	r28, 0x03	; 3
    1520:	d1 40       	sbci	r29, 0x01	; 1

			Value = Value / 10;
    1522:	ce 5f       	subi	r28, 0xFE	; 254
    1524:	de 4f       	sbci	r29, 0xFE	; 254
    1526:	28 81       	ld	r18, Y
    1528:	c2 50       	subi	r28, 0x02	; 2
    152a:	d1 40       	sbci	r29, 0x01	; 1
    152c:	38 2d       	mov	r19, r8
    152e:	47 2d       	mov	r20, r7
    1530:	56 2d       	mov	r21, r6
    1532:	65 2d       	mov	r22, r5
    1534:	74 2d       	mov	r23, r4
    1536:	83 2d       	mov	r24, r3
    1538:	92 2d       	mov	r25, r2
    153a:	0e 94 84 14 	call	0x2908	; 0x2908 <__divdi3>
    153e:	ce 5f       	subi	r28, 0xFE	; 254
    1540:	de 4f       	sbci	r29, 0xFE	; 254
    1542:	28 83       	st	Y, r18
    1544:	c2 50       	subi	r28, 0x02	; 2
    1546:	d1 40       	sbci	r29, 0x01	; 1
    1548:	83 2e       	mov	r8, r19
    154a:	74 2e       	mov	r7, r20
    154c:	65 2e       	mov	r6, r21
    154e:	56 2e       	mov	r5, r22
    1550:	47 2e       	mov	r4, r23
    1552:	38 2e       	mov	r3, r24
    1554:	29 2e       	mov	r2, r25

		}
	
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
    1556:	e1 e0       	ldi	r30, 0x01	; 1
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	ec 0f       	add	r30, r28
    155c:	fd 1f       	adc	r31, r29
    155e:	e9 0d       	add	r30, r9
    1560:	f1 1d       	adc	r31, r1
    1562:	cd 5f       	subi	r28, 0xFD	; 253
    1564:	de 4f       	sbci	r29, 0xFE	; 254
    1566:	a8 81       	ld	r26, Y
    1568:	c3 50       	subi	r28, 0x03	; 3
    156a:	d1 40       	sbci	r29, 0x01	; 1
    156c:	a0 5d       	subi	r26, 0xD0	; 208
    156e:	a0 83       	st	Z, r26
		
		Count++;
    1570:	93 94       	inc	r9

	} while (Value != 0);
    1572:	a0 e0       	ldi	r26, 0x00	; 0
    1574:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__cmpdi2_s8>
    1578:	09 f0       	breq	.+2      	; 0x157c <SendSignedDecimalValue+0x174>
    157a:	9c cf       	rjmp	.-200    	; 0x14b4 <SendSignedDecimalValue+0xac>

	while (Count != 0)
    157c:	99 20       	and	r9, r9
    157e:	91 f0       	breq	.+36     	; 0x15a4 <SendSignedDecimalValue+0x19c>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
    1580:	69 2d       	mov	r22, r9
    1582:	70 e0       	ldi	r23, 0x00	; 0
    1584:	61 50       	subi	r22, 0x01	; 1
    1586:	71 09       	sbc	r23, r1
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	8c 0f       	add	r24, r28
    158e:	9d 1f       	adc	r25, r29
    1590:	68 0f       	add	r22, r24
    1592:	79 1f       	adc	r23, r25
    1594:	21 e0       	ldi	r18, 0x01	; 1
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	40 e0       	ldi	r20, 0x00	; 0
    159a:	50 e0       	ldi	r21, 0x00	; 0
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	4a d5       	rcall	.+2708   	; 0x2034 <UARTTransmitSync>
		
		Count--;
    15a0:	9a 94       	dec	r9
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
    15a2:	71 f7       	brne	.-36     	; 0x1580 <SendSignedDecimalValue+0x178>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}
}
    15a4:	cd 5f       	subi	r28, 0xFD	; 253
    15a6:	de 4f       	sbci	r29, 0xFE	; 254
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    15ba:	ff 90       	pop	r15
    15bc:	ef 90       	pop	r14
    15be:	df 90       	pop	r13
    15c0:	cf 90       	pop	r12
    15c2:	bf 90       	pop	r11
    15c4:	af 90       	pop	r10
    15c6:	9f 90       	pop	r9
    15c8:	8f 90       	pop	r8
    15ca:	7f 90       	pop	r7
    15cc:	6f 90       	pop	r6
    15ce:	5f 90       	pop	r5
    15d0:	4f 90       	pop	r4
    15d2:	3f 90       	pop	r3
    15d4:	2f 90       	pop	r2
    15d6:	08 95       	ret

000015d8 <SendTrace>:
	}
}

void
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{
    15d8:	3f 92       	push	r3
    15da:	4f 92       	push	r4
    15dc:	5f 92       	push	r5
    15de:	6f 92       	push	r6
    15e0:	7f 92       	push	r7
    15e2:	8f 92       	push	r8
    15e4:	9f 92       	push	r9
    15e6:	af 92       	push	r10
    15e8:	bf 92       	push	r11
    15ea:	cf 92       	push	r12
    15ec:	df 92       	push	r13
    15ee:	ef 92       	push	r14
    15f0:	ff 92       	push	r15
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	1f 92       	push	r1
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
    1600:	0e 89       	ldd	r16, Y+22	; 0x16
    1602:	1f 89       	ldd	r17, Y+23	; 0x17
	
	char Character;

	va_list ArgList;

	if (!gTraceInitialized || !(TraceLevel & gTraceLevel))
    1604:	80 91 d9 0a 	lds	r24, 0x0AD9
    1608:	88 23       	and	r24, r24
    160a:	09 f4       	brne	.+2      	; 0x160e <SendTrace+0x36>
    160c:	1c c1       	rjmp	.+568    	; 0x1846 <SendTrace+0x26e>
    160e:	80 91 e0 0a 	lds	r24, 0x0AE0
    1612:	9d 89       	ldd	r25, Y+21	; 0x15
    1614:	89 23       	and	r24, r25
    1616:	09 f4       	brne	.+2      	; 0x161a <SendTrace+0x42>
    1618:	16 c1       	rjmp	.+556    	; 0x1846 <SendTrace+0x26e>
	{
		return;
	}

	va_start(ArgList, String);
    161a:	7e 01       	movw	r14, r28
    161c:	28 e1       	ldi	r18, 0x18	; 24
    161e:	e2 0e       	add	r14, r18
    1620:	f1 1c       	adc	r15, r1

	while (*String != '\0')
    1622:	f8 01       	movw	r30, r16
    1624:	20 81       	ld	r18, Z
    1626:	22 23       	and	r18, r18
    1628:	09 f4       	brne	.+2      	; 0x162c <SendTrace+0x54>
    162a:	0d c1       	rjmp	.+538    	; 0x1846 <SendTrace+0x26e>
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{

	bool IsLong = FALSE;
	
	bool IsLongLong = FALSE;
    162c:	41 2c       	mov	r4, r1

void
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{

	bool IsLong = FALSE;
    162e:	d1 2c       	mov	r13, r1
						IsLong = FALSE;
					}
					
					SendDoubleValue(va_arg(ArgList, double));
					
					break;
    1630:	51 2c       	mov	r5, r1
						
						IsLong = FALSE;
					}
					else
					{
						IsLong = TRUE;
    1632:	33 24       	eor	r3, r3
    1634:	33 94       	inc	r3
	va_start(ArgList, String);

	while (*String != '\0')
	{

		if (*String == '%' || IsLong || IsLongLong)
    1636:	25 32       	cpi	r18, 0x25	; 37
    1638:	29 f0       	breq	.+10     	; 0x1644 <SendTrace+0x6c>
    163a:	d1 10       	cpse	r13, r1
    163c:	05 c0       	rjmp	.+10     	; 0x1648 <SendTrace+0x70>
    163e:	41 10       	cpse	r4, r1
    1640:	03 c0       	rjmp	.+6      	; 0x1648 <SendTrace+0x70>
    1642:	f0 c0       	rjmp	.+480    	; 0x1824 <SendTrace+0x24c>
		{

			if (*String == '%')
			{
				String++;
    1644:	0f 5f       	subi	r16, 0xFF	; 255
    1646:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			switch (*String)
    1648:	f8 01       	movw	r30, r16
    164a:	80 81       	ld	r24, Z
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	fc 01       	movw	r30, r24
    1650:	e3 56       	subi	r30, 0x63	; 99
    1652:	f1 09       	sbc	r31, r1
    1654:	e6 31       	cpi	r30, 0x16	; 22
    1656:	f1 05       	cpc	r31, r1
    1658:	08 f0       	brcs	.+2      	; 0x165c <SendTrace+0x84>
    165a:	ed c0       	rjmp	.+474    	; 0x1836 <SendTrace+0x25e>
    165c:	ea 5b       	subi	r30, 0xBA	; 186
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__tablejump2__>
			{
				case 'c':
				{

					Character = va_arg(ArgList, int);
    1664:	57 01       	movw	r10, r14
    1666:	f2 e0       	ldi	r31, 0x02	; 2
    1668:	af 0e       	add	r10, r31
    166a:	b1 1c       	adc	r11, r1
    166c:	f7 01       	movw	r30, r14
    166e:	80 81       	ld	r24, Z
    1670:	89 83       	std	Y+1, r24	; 0x01
					
					UARTTransmitSync(UART_ZERO, (PVOID) &Character, 1);
    1672:	21 e0       	ldi	r18, 0x01	; 1
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	40 e0       	ldi	r20, 0x00	; 0
    1678:	50 e0       	ldi	r21, 0x00	; 0
    167a:	be 01       	movw	r22, r28
    167c:	6f 5f       	subi	r22, 0xFF	; 255
    167e:	7f 4f       	sbci	r23, 0xFF	; 255
    1680:	85 2d       	mov	r24, r5
    1682:	d8 d4       	rcall	.+2480   	; 0x2034 <UARTTransmitSync>
			switch (*String)
			{
				case 'c':
				{

					Character = va_arg(ArgList, int);
    1684:	75 01       	movw	r14, r10
					
					UARTTransmitSync(UART_ZERO, (PVOID) &Character, 1);

					break;
    1686:	d7 c0       	rjmp	.+430    	; 0x1836 <SendTrace+0x25e>

				}
				case 'd':
				{

					if (IsLong)
    1688:	dd 20       	and	r13, r13
    168a:	d9 f0       	breq	.+54     	; 0x16c2 <SendTrace+0xea>
					{

						SendSignedDecimalValue(va_arg(ArgList, long));
    168c:	67 01       	movw	r12, r14
    168e:	f4 e0       	ldi	r31, 0x04	; 4
    1690:	cf 0e       	add	r12, r31
    1692:	d1 1c       	adc	r13, r1
    1694:	f7 01       	movw	r30, r14
    1696:	80 81       	ld	r24, Z
    1698:	91 81       	ldd	r25, Z+1	; 0x01
    169a:	a2 81       	ldd	r26, Z+2	; 0x02
    169c:	b3 81       	ldd	r27, Z+3	; 0x03
    169e:	4c 01       	movw	r8, r24
    16a0:	5d 01       	movw	r10, r26
    16a2:	bb 0c       	add	r11, r11
    16a4:	88 08       	sbc	r8, r8
    16a6:	98 2c       	mov	r9, r8
    16a8:	54 01       	movw	r10, r8
    16aa:	28 2f       	mov	r18, r24
    16ac:	39 2f       	mov	r19, r25
    16ae:	4a 2f       	mov	r20, r26
    16b0:	5b 2f       	mov	r21, r27
    16b2:	68 2d       	mov	r22, r8
    16b4:	78 2d       	mov	r23, r8
    16b6:	88 2d       	mov	r24, r8
    16b8:	98 2d       	mov	r25, r8
    16ba:	a6 de       	rcall	.-692    	; 0x1408 <SendSignedDecimalValue>
    16bc:	76 01       	movw	r14, r12

						IsLong = FALSE;
    16be:	d5 2c       	mov	r13, r5
    16c0:	ba c0       	rjmp	.+372    	; 0x1836 <SendTrace+0x25e>

					}
					else if (IsLongLong)
    16c2:	44 20       	and	r4, r4
    16c4:	89 f0       	breq	.+34     	; 0x16e8 <SendTrace+0x110>
					{
						SendSignedDecimalValue(va_arg(ArgList, long long));
    16c6:	57 01       	movw	r10, r14
    16c8:	f8 e0       	ldi	r31, 0x08	; 8
    16ca:	af 0e       	add	r10, r31
    16cc:	b1 1c       	adc	r11, r1
    16ce:	f7 01       	movw	r30, r14
    16d0:	20 81       	ld	r18, Z
    16d2:	31 81       	ldd	r19, Z+1	; 0x01
    16d4:	42 81       	ldd	r20, Z+2	; 0x02
    16d6:	53 81       	ldd	r21, Z+3	; 0x03
    16d8:	64 81       	ldd	r22, Z+4	; 0x04
    16da:	75 81       	ldd	r23, Z+5	; 0x05
    16dc:	86 81       	ldd	r24, Z+6	; 0x06
    16de:	97 81       	ldd	r25, Z+7	; 0x07
    16e0:	93 de       	rcall	.-730    	; 0x1408 <SendSignedDecimalValue>
    16e2:	75 01       	movw	r14, r10

						IsLongLong = FALSE;
    16e4:	45 2c       	mov	r4, r5
    16e6:	a7 c0       	rjmp	.+334    	; 0x1836 <SendTrace+0x25e>
					}
					else
					{

						SendSignedDecimalValue(va_arg(ArgList, int));
    16e8:	57 01       	movw	r10, r14
    16ea:	f2 e0       	ldi	r31, 0x02	; 2
    16ec:	af 0e       	add	r10, r31
    16ee:	b1 1c       	adc	r11, r1
    16f0:	f7 01       	movw	r30, r14
    16f2:	31 81       	ldd	r19, Z+1	; 0x01
    16f4:	20 81       	ld	r18, Z
    16f6:	93 2f       	mov	r25, r19
    16f8:	99 0f       	add	r25, r25
    16fa:	99 0b       	sbc	r25, r25
    16fc:	49 2f       	mov	r20, r25
    16fe:	59 2f       	mov	r21, r25
    1700:	69 2f       	mov	r22, r25
    1702:	79 2f       	mov	r23, r25
    1704:	89 2f       	mov	r24, r25
    1706:	80 de       	rcall	.-768    	; 0x1408 <SendSignedDecimalValue>
    1708:	75 01       	movw	r14, r10
    170a:	95 c0       	rjmp	.+298    	; 0x1836 <SendTrace+0x25e>
					break;
				}
				case 'u':
				{

					if(IsLong)
    170c:	dd 20       	and	r13, r13
    170e:	b9 f0       	breq	.+46     	; 0x173e <SendTrace+0x166>
					{

						SendDecimalValue(va_arg(ArgList, unsigned long));
    1710:	37 01       	movw	r6, r14
    1712:	f4 e0       	ldi	r31, 0x04	; 4
    1714:	6f 0e       	add	r6, r31
    1716:	71 1c       	adc	r7, r1
    1718:	f7 01       	movw	r30, r14
    171a:	80 81       	ld	r24, Z
    171c:	91 81       	ldd	r25, Z+1	; 0x01
    171e:	a2 81       	ldd	r26, Z+2	; 0x02
    1720:	b3 81       	ldd	r27, Z+3	; 0x03
    1722:	4c 01       	movw	r8, r24
    1724:	5d 01       	movw	r10, r26
    1726:	28 2f       	mov	r18, r24
    1728:	39 2d       	mov	r19, r9
    172a:	4a 2d       	mov	r20, r10
    172c:	5b 2d       	mov	r21, r11
    172e:	65 2d       	mov	r22, r5
    1730:	75 2d       	mov	r23, r5
    1732:	85 2d       	mov	r24, r5
    1734:	95 2d       	mov	r25, r5
    1736:	07 dd       	rcall	.-1522   	; 0x1146 <SendDecimalValue>
    1738:	73 01       	movw	r14, r6
						
						IsLong = FALSE;
    173a:	d5 2c       	mov	r13, r5
    173c:	7c c0       	rjmp	.+248    	; 0x1836 <SendTrace+0x25e>
					
					}
					else if(IsLongLong)
    173e:	44 20       	and	r4, r4
    1740:	89 f0       	breq	.+34     	; 0x1764 <SendTrace+0x18c>
					{
						SendDecimalValue(va_arg(ArgList, unsigned long long));
    1742:	57 01       	movw	r10, r14
    1744:	f8 e0       	ldi	r31, 0x08	; 8
    1746:	af 0e       	add	r10, r31
    1748:	b1 1c       	adc	r11, r1
    174a:	f7 01       	movw	r30, r14
    174c:	20 81       	ld	r18, Z
    174e:	31 81       	ldd	r19, Z+1	; 0x01
    1750:	42 81       	ldd	r20, Z+2	; 0x02
    1752:	53 81       	ldd	r21, Z+3	; 0x03
    1754:	64 81       	ldd	r22, Z+4	; 0x04
    1756:	75 81       	ldd	r23, Z+5	; 0x05
    1758:	86 81       	ldd	r24, Z+6	; 0x06
    175a:	97 81       	ldd	r25, Z+7	; 0x07
    175c:	f4 dc       	rcall	.-1560   	; 0x1146 <SendDecimalValue>
    175e:	75 01       	movw	r14, r10
						
						IsLongLong = FALSE;
    1760:	45 2c       	mov	r4, r5
    1762:	69 c0       	rjmp	.+210    	; 0x1836 <SendTrace+0x25e>
					}
					else
					{

						SendDecimalValue(va_arg(ArgList, unsigned int));
    1764:	f7 01       	movw	r30, r14
    1766:	40 81       	ld	r20, Z
    1768:	51 81       	ldd	r21, Z+1	; 0x01
    176a:	f2 e0       	ldi	r31, 0x02	; 2
    176c:	ef 0e       	add	r14, r31
    176e:	f1 1c       	adc	r15, r1
    1770:	24 2f       	mov	r18, r20
    1772:	35 2f       	mov	r19, r21
    1774:	45 2d       	mov	r20, r5
    1776:	55 2d       	mov	r21, r5
    1778:	65 2d       	mov	r22, r5
    177a:	75 2d       	mov	r23, r5
    177c:	85 2d       	mov	r24, r5
    177e:	95 2d       	mov	r25, r5
    1780:	e2 dc       	rcall	.-1596   	; 0x1146 <SendDecimalValue>
    1782:	59 c0       	rjmp	.+178    	; 0x1836 <SendTrace+0x25e>
					break;
				}
				case 'x':
				{

					if (IsLong)
    1784:	dd 20       	and	r13, r13
    1786:	a9 f0       	breq	.+42     	; 0x17b2 <SendTrace+0x1da>
					{

						SendHexValue(va_arg(ArgList, unsigned long));
    1788:	f7 01       	movw	r30, r14
    178a:	80 81       	ld	r24, Z
    178c:	91 81       	ldd	r25, Z+1	; 0x01
    178e:	a2 81       	ldd	r26, Z+2	; 0x02
    1790:	b3 81       	ldd	r27, Z+3	; 0x03
    1792:	24 e0       	ldi	r18, 0x04	; 4
    1794:	e2 0e       	add	r14, r18
    1796:	f1 1c       	adc	r15, r1
    1798:	3c 01       	movw	r6, r24
    179a:	4d 01       	movw	r8, r26
    179c:	28 2f       	mov	r18, r24
    179e:	37 2d       	mov	r19, r7
    17a0:	48 2d       	mov	r20, r8
    17a2:	59 2d       	mov	r21, r9
    17a4:	65 2d       	mov	r22, r5
    17a6:	75 2d       	mov	r23, r5
    17a8:	85 2d       	mov	r24, r5
    17aa:	95 2d       	mov	r25, r5
    17ac:	29 dc       	rcall	.-1966   	; 0x1000 <SendHexValue>

						IsLong = FALSE;
    17ae:	d5 2c       	mov	r13, r5
    17b0:	42 c0       	rjmp	.+132    	; 0x1836 <SendTrace+0x25e>

					}
					else if (IsLongLong)
    17b2:	44 20       	and	r4, r4
    17b4:	79 f0       	breq	.+30     	; 0x17d4 <SendTrace+0x1fc>
					{
						SendHexValue(va_arg(ArgList, unsigned long long));
    17b6:	f7 01       	movw	r30, r14
    17b8:	20 81       	ld	r18, Z
    17ba:	88 e0       	ldi	r24, 0x08	; 8
    17bc:	e8 0e       	add	r14, r24
    17be:	f1 1c       	adc	r15, r1
    17c0:	31 81       	ldd	r19, Z+1	; 0x01
    17c2:	42 81       	ldd	r20, Z+2	; 0x02
    17c4:	53 81       	ldd	r21, Z+3	; 0x03
    17c6:	64 81       	ldd	r22, Z+4	; 0x04
    17c8:	75 81       	ldd	r23, Z+5	; 0x05
    17ca:	86 81       	ldd	r24, Z+6	; 0x06
    17cc:	97 81       	ldd	r25, Z+7	; 0x07
    17ce:	18 dc       	rcall	.-2000   	; 0x1000 <SendHexValue>
						
						IsLongLong = FALSE;
    17d0:	45 2c       	mov	r4, r5
    17d2:	31 c0       	rjmp	.+98     	; 0x1836 <SendTrace+0x25e>
					}
					else
					{

						SendHexValue(va_arg(ArgList, unsigned int));
    17d4:	f7 01       	movw	r30, r14
    17d6:	40 81       	ld	r20, Z
    17d8:	51 81       	ldd	r21, Z+1	; 0x01
    17da:	e2 e0       	ldi	r30, 0x02	; 2
    17dc:	ee 0e       	add	r14, r30
    17de:	f1 1c       	adc	r15, r1
    17e0:	24 2f       	mov	r18, r20
    17e2:	35 2f       	mov	r19, r21
    17e4:	45 2d       	mov	r20, r5
    17e6:	55 2d       	mov	r21, r5
    17e8:	65 2d       	mov	r22, r5
    17ea:	75 2d       	mov	r23, r5
    17ec:	85 2d       	mov	r24, r5
    17ee:	95 2d       	mov	r25, r5
    17f0:	07 dc       	rcall	.-2034   	; 0x1000 <SendHexValue>
    17f2:	21 c0       	rjmp	.+66     	; 0x1836 <SendTrace+0x25e>
					break;
				}
				case 'l':
				{

					if (IsLong)
    17f4:	dd 20       	and	r13, r13
    17f6:	f1 f0       	breq	.+60     	; 0x1834 <SendTrace+0x25c>
					{
						IsLongLong = TRUE;
    17f8:	43 2c       	mov	r4, r3
						
						IsLong = FALSE;
    17fa:	d5 2c       	mov	r13, r5
    17fc:	1c c0       	rjmp	.+56     	; 0x1836 <SendTrace+0x25e>
					break;
				}
				case 's':
				{
					
					SendStringValue(va_arg(ArgList, char *)); 
    17fe:	f7 01       	movw	r30, r14
    1800:	80 81       	ld	r24, Z
    1802:	91 81       	ldd	r25, Z+1	; 0x01
    1804:	f2 e0       	ldi	r31, 0x02	; 2
    1806:	ef 0e       	add	r14, r31
    1808:	f1 1c       	adc	r15, r1
    180a:	eb db       	rcall	.-2090   	; 0xfe2 <SendStringValue>

					break;
    180c:	14 c0       	rjmp	.+40     	; 0x1836 <SendTrace+0x25e>
					if(IsLong)
					{
						IsLong = FALSE;
					}
					
					SendDoubleValue(va_arg(ArgList, double));
    180e:	f7 01       	movw	r30, r14
    1810:	60 81       	ld	r22, Z
    1812:	71 81       	ldd	r23, Z+1	; 0x01
    1814:	82 81       	ldd	r24, Z+2	; 0x02
    1816:	93 81       	ldd	r25, Z+3	; 0x03
    1818:	24 e0       	ldi	r18, 0x04	; 4
    181a:	e2 0e       	add	r14, r18
    181c:	f1 1c       	adc	r15, r1
    181e:	4d dd       	rcall	.-1382   	; 0x12ba <SendDoubleValue>
					
					break;
    1820:	d5 2c       	mov	r13, r5
    1822:	09 c0       	rjmp	.+18     	; 0x1836 <SendTrace+0x25e>

		}
		else
		{

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
    1824:	21 e0       	ldi	r18, 0x01	; 1
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	40 e0       	ldi	r20, 0x00	; 0
    182a:	50 e0       	ldi	r21, 0x00	; 0
    182c:	b8 01       	movw	r22, r16
    182e:	85 2d       	mov	r24, r5
    1830:	01 d4       	rcall	.+2050   	; 0x2034 <UARTTransmitSync>
    1832:	01 c0       	rjmp	.+2      	; 0x1836 <SendTrace+0x25e>
						
						IsLong = FALSE;
					}
					else
					{
						IsLong = TRUE;
    1834:	d3 2c       	mov	r13, r3

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
				
		}

		String++;
    1836:	c8 01       	movw	r24, r16
    1838:	01 96       	adiw	r24, 0x01	; 1
		return;
	}

	va_start(ArgList, String);

	while (*String != '\0')
    183a:	f8 01       	movw	r30, r16
    183c:	21 81       	ldd	r18, Z+1	; 0x01
    183e:	22 23       	and	r18, r18
    1840:	11 f0       	breq	.+4      	; 0x1846 <SendTrace+0x26e>

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
				
		}

		String++;
    1842:	8c 01       	movw	r16, r24
    1844:	f8 ce       	rjmp	.-528    	; 0x1636 <SendTrace+0x5e>
		
	}
	
	va_end(ArgList);
	
}
    1846:	0f 90       	pop	r0
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	ff 90       	pop	r15
    1852:	ef 90       	pop	r14
    1854:	df 90       	pop	r13
    1856:	cf 90       	pop	r12
    1858:	bf 90       	pop	r11
    185a:	af 90       	pop	r10
    185c:	9f 90       	pop	r9
    185e:	8f 90       	pop	r8
    1860:	7f 90       	pop	r7
    1862:	6f 90       	pop	r6
    1864:	5f 90       	pop	r5
    1866:	4f 90       	pop	r4
    1868:	3f 90       	pop	r3
    186a:	08 95       	ret

0000186c <InitTWI>:
bool
InitTWI(TWI_MODE Mode, PTWI_ADDRESS Address, PTWI_ADDRESS_MASK AddressMask)
{	
	bool Status = TRUE;
	
	if (Mode == TWI_SLAVE)
    186c:	81 11       	cpse	r24, r1
    186e:	20 c0       	rjmp	.+64     	; 0x18b0 <InitTWI+0x44>
	{
		if (Address != NULL && AddressMask != NULL)
    1870:	61 15       	cp	r22, r1
    1872:	71 05       	cpc	r23, r1
    1874:	89 f0       	breq	.+34     	; 0x1898 <InitTWI+0x2c>
    1876:	41 15       	cp	r20, r1
    1878:	51 05       	cpc	r21, r1
    187a:	71 f0       	breq	.+28     	; 0x1898 <InitTWI+0x2c>
		{
			//
			// Set Slave Address and Mask
			//
				
			TWAR = Address->AsUINT8;
    187c:	fb 01       	movw	r30, r22
    187e:	80 81       	ld	r24, Z
    1880:	80 93 ba 00 	sts	0x00BA, r24
				
			TWAMR = AddressMask->AsUINT8;
    1884:	fa 01       	movw	r30, r20
    1886:	80 81       	ld	r24, Z
    1888:	80 93 bd 00 	sts	0x00BD, r24
			
			//
			// Set Data and Clock to IN
			//
			
			DDRC &= ~((0x1 << PORTC0) | (0x1 << PORTC1));
    188c:	87 b1       	in	r24, 0x07	; 7
    188e:	8c 7f       	andi	r24, 0xFC	; 252
    1890:	87 b9       	out	0x07, r24	; 7
			
			gMode = TWI_SLAVE;
    1892:	10 92 e1 0a 	sts	0x0AE1, r1
    1896:	12 c0       	rjmp	.+36     	; 0x18bc <InitTWI+0x50>
		}
		else
		{
			SendTrace(ERROR_LEVEL, "InitTWI - Invalid Parameters\r\n");
    1898:	81 e5       	ldi	r24, 0x51	; 81
    189a:	98 e0       	ldi	r25, 0x08	; 8
    189c:	9f 93       	push	r25
    189e:	8f 93       	push	r24
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	8f 93       	push	r24
    18a4:	99 de       	rcall	.-718    	; 0x15d8 <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
		}
		else
		{
			SendTrace(ERROR_LEVEL, "InitTWI - Invalid Parameters\r\n");
			
			Status = FALSE;
    18ac:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
    18ae:	08 95       	ret
		}
	}
	else
	{
		gMode = TWI_MASTER;
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	80 93 e1 0a 	sts	0x0AE1, r24
		
		//
		// Set Data and Clock to Out
		//
		
		DDRC |= ((0x1 << PORTC0) | (0x1 << PORTC1));
    18b6:	87 b1       	in	r24, 0x07	; 7
    18b8:	83 60       	ori	r24, 0x03	; 3
    18ba:	87 b9       	out	0x07, r24	; 7
	//
	// Set TWI Bit Rate Register to 8 so that
	// SCL is set to 100 KHz.
	//

	TWBR = BIT_RATE_VALUE;
    18bc:	80 e2       	ldi	r24, 0x20	; 32
    18be:	80 93 b8 00 	sts	0x00B8, r24
	
	//
	// Set Pre-scalar value to 1
	//

	TWSR = 0;
    18c2:	10 92 b9 00 	sts	0x00B9, r1
	
	//
	// Set TWI Control Register
	//
	
	TWCR = (0x1 << TWEN) | (0x1 << TWEA);
    18c6:	84 e4       	ldi	r24, 0x44	; 68
    18c8:	80 93 bc 00 	sts	0x00BC, r24
    18cc:	ff ef       	ldi	r31, 0xFF	; 255
    18ce:	20 e7       	ldi	r18, 0x70	; 112
    18d0:	82 e0       	ldi	r24, 0x02	; 2
    18d2:	f1 50       	subi	r31, 0x01	; 1
    18d4:	20 40       	sbci	r18, 0x00	; 0
    18d6:	80 40       	sbci	r24, 0x00	; 0
    18d8:	e1 f7       	brne	.-8      	; 0x18d2 <InitTWI+0x66>
    18da:	00 c0       	rjmp	.+0      	; 0x18dc <InitTWI+0x70>
    18dc:	00 00       	nop
	// Wait for 100 ms for bus to settle down
	//
	
	_delay_ms(100);
	
	gIsRepeatedStart = FALSE;
    18de:	10 92 da 0a 	sts	0x0ADA, r1
	
	gIsTWIInitialized = TRUE;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	80 93 db 0a 	sts	0x0ADB, r24

Exit:

	return Status;
}
    18e8:	08 95       	ret

000018ea <SendStartCondition>:
	
	//
	// Send Start Condition
	//
	
	ENABLE_START();
    18ea:	ec eb       	ldi	r30, 0xBC	; 188
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	8f 75       	andi	r24, 0x5F	; 95
    18f2:	80 62       	ori	r24, 0x20	; 32
    18f4:	80 83       	st	Z, r24
	
	WAIT_FOR_OP_COMPLETION();
    18f6:	80 81       	ld	r24, Z
    18f8:	80 68       	ori	r24, 0x80	; 128
    18fa:	80 83       	st	Z, r24
    18fc:	80 81       	ld	r24, Z
    18fe:	88 23       	and	r24, r24
    1900:	ec f7       	brge	.-6      	; 0x18fc <SendStartCondition+0x12>
	
	DISABLE_START();
    1902:	ec eb       	ldi	r30, 0xBC	; 188
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	8f 75       	andi	r24, 0x5F	; 95
    190a:	80 83       	st	Z, r24
	
	if (gIsRepeatedStart)
    190c:	80 91 da 0a 	lds	r24, 0x0ADA
    1910:	88 23       	and	r24, r24
    1912:	41 f0       	breq	.+16     	; 0x1924 <SendStartCondition+0x3a>
	{
		Status = ProcessTwiStatus(REPEATED_START_TRANSMITTED);
    1914:	90 91 b9 00 	lds	r25, 0x00B9
    1918:	98 7f       	andi	r25, 0xF8	; 248
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	90 31       	cpi	r25, 0x10	; 16
    191e:	49 f0       	breq	.+18     	; 0x1932 <SendStartCondition+0x48>
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	08 95       	ret
	}
	else
	{
		Status = ProcessTwiStatus(START_TRANSMITTED);
    1924:	90 91 b9 00 	lds	r25, 0x00B9
    1928:	98 7f       	andi	r25, 0xF8	; 248
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	98 30       	cpi	r25, 0x08	; 8
    192e:	09 f0       	breq	.+2      	; 0x1932 <SendStartCondition+0x48>
    1930:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return Status;
}
    1932:	08 95       	ret

00001934 <SendStopCondition>:

void
SendStopCondition()
{	
	ENABLE_STOP();
    1934:	ec eb       	ldi	r30, 0xBC	; 188
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	8f 76       	andi	r24, 0x6F	; 111
    193c:	80 61       	ori	r24, 0x10	; 16
    193e:	80 83       	st	Z, r24
	
	//
	// Send the Stop condition by clearing the TWINT flag
	//
	
	TWCR |= (1 << TWINT);
    1940:	80 81       	ld	r24, Z
    1942:	80 68       	ori	r24, 0x80	; 128
    1944:	80 83       	st	Z, r24
	//
	// TWINT is not set after stop condition.
	// Instead TWSTO bit in TWCR is cleared.
	//
	
	while (!(TWCR & (0x1 << TWSTO)));
    1946:	80 81       	ld	r24, Z
    1948:	84 ff       	sbrs	r24, 4
    194a:	fd cf       	rjmp	.-6      	; 0x1946 <SendStopCondition+0x12>
}
    194c:	08 95       	ret

0000194e <Transmit>:

bool
Transmit(PVOID Buffer, unsigned long Length)
{
    194e:	8f 92       	push	r8
    1950:	9f 92       	push	r9
    1952:	af 92       	push	r10
    1954:	bf 92       	push	r11
    1956:	df 92       	push	r13
    1958:	ef 92       	push	r14
    195a:	ff 92       	push	r15
    195c:	0f 93       	push	r16
    195e:	1f 93       	push	r17
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
	
	unsigned char *BytePtr;
	
	TWI_STATUS TransmitStatus;
	
	if (gMode == TWI_MASTER)
    1964:	20 91 e1 0a 	lds	r18, 0x0AE1
    1968:	21 30       	cpi	r18, 0x01	; 1
    196a:	29 f4       	brne	.+10     	; 0x1976 <Transmit+0x28>
	{
		TransmitStatus = DATA_TRANSMITTED_ACK;
    196c:	0f 2e       	mov	r0, r31
    196e:	f8 e2       	ldi	r31, 0x28	; 40
    1970:	df 2e       	mov	r13, r31
    1972:	f0 2d       	mov	r31, r0
    1974:	04 c0       	rjmp	.+8      	; 0x197e <Transmit+0x30>
	}
	else
	{
		TransmitStatus = SLA_R_DATA_TRANSMITTED_ACK;
    1976:	0f 2e       	mov	r0, r31
    1978:	f8 eb       	ldi	r31, 0xB8	; 184
    197a:	df 2e       	mov	r13, r31
    197c:	f0 2d       	mov	r31, r0
	// Now transmit the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
    197e:	4a 01       	movw	r8, r20
    1980:	5b 01       	movw	r10, r22
    1982:	21 e0       	ldi	r18, 0x01	; 1
    1984:	82 1a       	sub	r8, r18
    1986:	91 08       	sbc	r9, r1
    1988:	a1 08       	sbc	r10, r1
    198a:	b1 08       	sbc	r11, r1
    198c:	81 14       	cp	r8, r1
    198e:	91 04       	cpc	r9, r1
    1990:	a1 04       	cpc	r10, r1
    1992:	b1 04       	cpc	r11, r1
    1994:	e1 f1       	breq	.+120    	; 0x1a0e <Transmit+0xc0>
    1996:	dc 01       	movw	r26, r24
    1998:	00 e0       	ldi	r16, 0x00	; 0
    199a:	10 e0       	ldi	r17, 0x00	; 0
    199c:	98 01       	movw	r18, r16
	{
		TWDR = *BytePtr;
    199e:	4b eb       	ldi	r20, 0xBB	; 187
    19a0:	50 e0       	ldi	r21, 0x00	; 0
		
		WAIT_FOR_OP_COMPLETION();
    19a2:	ec eb       	ldi	r30, 0xBC	; 188
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
		
		if (!ProcessTwiStatus(TransmitStatus))
    19a6:	0f 2e       	mov	r0, r31
    19a8:	f9 eb       	ldi	r31, 0xB9	; 185
    19aa:	ef 2e       	mov	r14, r31
    19ac:	f1 2c       	mov	r15, r1
    19ae:	f0 2d       	mov	r31, r0
    19b0:	6d 2d       	mov	r22, r13
    19b2:	70 e0       	ldi	r23, 0x00	; 0
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
	{
		TWDR = *BytePtr;
    19b4:	8d 91       	ld	r24, X+
    19b6:	ea 01       	movw	r28, r20
    19b8:	88 83       	st	Y, r24
		
		WAIT_FOR_OP_COMPLETION();
    19ba:	80 81       	ld	r24, Z
    19bc:	80 68       	ori	r24, 0x80	; 128
    19be:	80 83       	st	Z, r24
    19c0:	80 81       	ld	r24, Z
    19c2:	88 23       	and	r24, r24
    19c4:	ec f7       	brge	.-6      	; 0x19c0 <Transmit+0x72>
		
		if (!ProcessTwiStatus(TransmitStatus))
    19c6:	e7 01       	movw	r28, r14
    19c8:	88 81       	ld	r24, Y
    19ca:	88 7f       	andi	r24, 0xF8	; 248
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	86 17       	cp	r24, r22
    19d0:	97 07       	cpc	r25, r23
    19d2:	99 f0       	breq	.+38     	; 0x19fa <Transmit+0xac>
		{
			SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
    19d4:	80 91 b9 00 	lds	r24, 0x00B9
    19d8:	88 7f       	andi	r24, 0xF8	; 248
    19da:	1f 92       	push	r1
    19dc:	8f 93       	push	r24
    19de:	80 e7       	ldi	r24, 0x70	; 112
    19e0:	98 e0       	ldi	r25, 0x08	; 8
    19e2:	9f 93       	push	r25
    19e4:	8f 93       	push	r24
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	8f 93       	push	r24
    19ea:	f6 dd       	rcall	.-1044   	; 0x15d8 <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(TransmitStatus))
		{
			SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
			
			Status = FALSE;
    19f6:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
    19f8:	3b c0       	rjmp	.+118    	; 0x1a70 <Transmit+0x122>
		}
		
		BytePtr++;
    19fa:	cd 01       	movw	r24, r26
	// Now transmit the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
    19fc:	0f 5f       	subi	r16, 0xFF	; 255
    19fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1a00:	2f 4f       	sbci	r18, 0xFF	; 255
    1a02:	3f 4f       	sbci	r19, 0xFF	; 255
    1a04:	08 15       	cp	r16, r8
    1a06:	19 05       	cpc	r17, r9
    1a08:	2a 05       	cpc	r18, r10
    1a0a:	3b 05       	cpc	r19, r11
    1a0c:	98 f2       	brcs	.-90     	; 0x19b4 <Transmit+0x66>
	
	//
	// In slave mode after transmitting the last byte we will get a NACK from the Master
	//
	
	if (gMode == TWI_SLAVE)
    1a0e:	20 91 e1 0a 	lds	r18, 0x0AE1
    1a12:	21 11       	cpse	r18, r1
    1a14:	04 c0       	rjmp	.+8      	; 0x1a1e <Transmit+0xd0>
	{
		TransmitStatus = SLA_R_DATA_TRANSMITTED_NACK;
    1a16:	0f 2e       	mov	r0, r31
    1a18:	f0 ec       	ldi	r31, 0xC0	; 192
    1a1a:	df 2e       	mov	r13, r31
    1a1c:	f0 2d       	mov	r31, r0
	}
	
	TWDR = *BytePtr;
    1a1e:	fc 01       	movw	r30, r24
    1a20:	80 81       	ld	r24, Z
    1a22:	80 93 bb 00 	sts	0x00BB, r24
	
	WAIT_FOR_OP_COMPLETION();
    1a26:	ec eb       	ldi	r30, 0xBC	; 188
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	80 68       	ori	r24, 0x80	; 128
    1a2e:	80 83       	st	Z, r24
    1a30:	80 81       	ld	r24, Z
    1a32:	88 23       	and	r24, r24
    1a34:	ec f7       	brge	.-6      	; 0x1a30 <Transmit+0xe2>
	
	if (!ProcessTwiStatus(TransmitStatus))
    1a36:	20 91 b9 00 	lds	r18, 0x00B9
    1a3a:	28 7f       	andi	r18, 0xF8	; 248
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	8d 2d       	mov	r24, r13
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	28 17       	cp	r18, r24
    1a44:	39 07       	cpc	r19, r25
    1a46:	99 f0       	breq	.+38     	; 0x1a6e <Transmit+0x120>
	{
		SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
    1a48:	80 91 b9 00 	lds	r24, 0x00B9
    1a4c:	88 7f       	andi	r24, 0xF8	; 248
    1a4e:	1f 92       	push	r1
    1a50:	8f 93       	push	r24
    1a52:	80 e7       	ldi	r24, 0x70	; 112
    1a54:	98 e0       	ldi	r25, 0x08	; 8
    1a56:	9f 93       	push	r25
    1a58:	8f 93       	push	r24
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	8f 93       	push	r24
    1a5e:	bc dd       	rcall	.-1160   	; 0x15d8 <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
	
	if (!ProcessTwiStatus(TransmitStatus))
	{
		SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
		
		goto Exit;
    1a6c:	01 c0       	rjmp	.+2      	; 0x1a70 <Transmit+0x122>
}

bool
Transmit(PVOID Buffer, unsigned long Length)
{
	bool Status = TRUE;
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
Exit:

	return Status;	
}
    1a70:	df 91       	pop	r29
    1a72:	cf 91       	pop	r28
    1a74:	1f 91       	pop	r17
    1a76:	0f 91       	pop	r16
    1a78:	ff 90       	pop	r15
    1a7a:	ef 90       	pop	r14
    1a7c:	df 90       	pop	r13
    1a7e:	bf 90       	pop	r11
    1a80:	af 90       	pop	r10
    1a82:	9f 90       	pop	r9
    1a84:	8f 90       	pop	r8
    1a86:	08 95       	ret

00001a88 <TwiMasterTransmit>:
bool
TwiMasterTransmit(PVOID Buffer, 
				  unsigned long Length, 
				  PTWI_ADDRESS Address,
				  bool SendStop)
{
    1a88:	af 92       	push	r10
    1a8a:	bf 92       	push	r11
    1a8c:	cf 92       	push	r12
    1a8e:	df 92       	push	r13
    1a90:	ef 92       	push	r14
    1a92:	ff 92       	push	r15
    1a94:	0f 93       	push	r16
    1a96:	cf 93       	push	r28
    1a98:	df 93       	push	r29
    1a9a:	5c 01       	movw	r10, r24
    1a9c:	6a 01       	movw	r12, r20
    1a9e:	7b 01       	movw	r14, r22
    1aa0:	e9 01       	movw	r28, r18
	bool Status = TRUE;
	
	if (!SendStartCondition())
    1aa2:	23 df       	rcall	.-442    	; 0x18ea <SendStartCondition>
    1aa4:	81 11       	cpse	r24, r1
    1aa6:	13 c0       	rjmp	.+38     	; 0x1ace <TwiMasterTransmit+0x46>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
    1aa8:	80 91 b9 00 	lds	r24, 0x00B9
    1aac:	88 7f       	andi	r24, 0xF8	; 248
    1aae:	1f 92       	push	r1
    1ab0:	8f 93       	push	r24
    1ab2:	86 ea       	ldi	r24, 0xA6	; 166
    1ab4:	98 e0       	ldi	r25, 0x08	; 8
    1ab6:	9f 93       	push	r25
    1ab8:	8f 93       	push	r24
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	8f 93       	push	r24
    1abe:	8c dd       	rcall	.-1256   	; 0x15d8 <SendTrace>
		
		Status = FALSE;
			
		goto Exit;
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
	
	if (!SendStartCondition())
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
    1aca:	c0 e0       	ldi	r28, 0x00	; 0
			
		goto Exit;
    1acc:	33 c0       	rjmp	.+102    	; 0x1b34 <TwiMasterTransmit+0xac>
	}
	
	gIsRepeatedStart = FALSE;
    1ace:	10 92 da 0a 	sts	0x0ADA, r1
	//
	// Set Address->ReadWrite = 0 indicating a write operation.
	// Then transmit SLA+W
	//
	
	Address->RW_EnGenCall = 0;
    1ad2:	88 81       	ld	r24, Y
    1ad4:	8e 7f       	andi	r24, 0xFE	; 254
    1ad6:	88 83       	st	Y, r24
	
	TWDR = Address->AsUINT8;
    1ad8:	80 93 bb 00 	sts	0x00BB, r24
		
	WAIT_FOR_OP_COMPLETION();
    1adc:	ec eb       	ldi	r30, 0xBC	; 188
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	80 68       	ori	r24, 0x80	; 128
    1ae4:	80 83       	st	Z, r24
    1ae6:	80 81       	ld	r24, Z
    1ae8:	88 23       	and	r24, r24
    1aea:	ec f7       	brge	.-6      	; 0x1ae6 <TwiMasterTransmit+0x5e>
		
	if (!ProcessTwiStatus(SLA_W_TRANSMITTED_ACK))
    1aec:	80 91 b9 00 	lds	r24, 0x00B9
    1af0:	88 7f       	andi	r24, 0xF8	; 248
    1af2:	88 31       	cpi	r24, 0x18	; 24
    1af4:	99 f0       	breq	.+38     	; 0x1b1c <TwiMasterTransmit+0x94>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Slave Address and Write Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
    1af6:	80 91 b9 00 	lds	r24, 0x00B9
    1afa:	88 7f       	andi	r24, 0xF8	; 248
    1afc:	1f 92       	push	r1
    1afe:	8f 93       	push	r24
    1b00:	80 ef       	ldi	r24, 0xF0	; 240
    1b02:	98 e0       	ldi	r25, 0x08	; 8
    1b04:	9f 93       	push	r25
    1b06:	8f 93       	push	r24
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	8f 93       	push	r24
    1b0c:	65 dd       	rcall	.-1334   	; 0x15d8 <SendTrace>
		
		Status = FALSE;
			
		goto Exit;
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
		
	if (!ProcessTwiStatus(SLA_W_TRANSMITTED_ACK))
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Slave Address and Write Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
    1b18:	c0 e0       	ldi	r28, 0x00	; 0
			
		goto Exit;
    1b1a:	0c c0       	rjmp	.+24     	; 0x1b34 <TwiMasterTransmit+0xac>
	}
	
	Status = Transmit(Buffer, Length);
    1b1c:	b7 01       	movw	r22, r14
    1b1e:	a6 01       	movw	r20, r12
    1b20:	c5 01       	movw	r24, r10
    1b22:	15 df       	rcall	.-470    	; 0x194e <Transmit>
    1b24:	c8 2f       	mov	r28, r24
	
	//
	// Send stop condition
	//
	
	if (SendStop)
    1b26:	00 23       	and	r16, r16
    1b28:	11 f0       	breq	.+4      	; 0x1b2e <TwiMasterTransmit+0xa6>
	{
		SendStopCondition();
    1b2a:	04 df       	rcall	.-504    	; 0x1934 <SendStopCondition>
    1b2c:	03 c0       	rjmp	.+6      	; 0x1b34 <TwiMasterTransmit+0xac>
	}
	else
	{
		gIsRepeatedStart = TRUE;
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	80 93 da 0a 	sts	0x0ADA, r24
	}
	
Exit:

	return Status;
}
    1b34:	8c 2f       	mov	r24, r28
    1b36:	df 91       	pop	r29
    1b38:	cf 91       	pop	r28
    1b3a:	0f 91       	pop	r16
    1b3c:	ff 90       	pop	r15
    1b3e:	ef 90       	pop	r14
    1b40:	df 90       	pop	r13
    1b42:	cf 90       	pop	r12
    1b44:	bf 90       	pop	r11
    1b46:	af 90       	pop	r10
    1b48:	08 95       	ret

00001b4a <TwiTransmit>:
bool 
TwiTransmit(PVOID Buffer, 
			unsigned long Length,
			PTWI_ADDRESS Address,
			bool SendStop)
{
    1b4a:	0f 93       	push	r16
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
    1b4c:	e0 91 db 0a 	lds	r30, 0x0ADB
    1b50:	ee 23       	and	r30, r30
    1b52:	09 f4       	brne	.+2      	; 0x1b56 <TwiTransmit+0xc>
    1b54:	48 c0       	rjmp	.+144    	; 0x1be6 <TwiTransmit+0x9c>
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <TwiTransmit+0x12>
    1b5a:	47 c0       	rjmp	.+142    	; 0x1bea <TwiTransmit+0xa0>
		Status = FALSE;
		
		goto Exit;
	}
	
	if (gMode == TWI_MASTER)
    1b5c:	e0 91 e1 0a 	lds	r30, 0x0AE1
    1b60:	e1 30       	cpi	r30, 0x01	; 1
    1b62:	89 f4       	brne	.+34     	; 0x1b86 <TwiTransmit+0x3c>
	{
		if (Address == NULL)
    1b64:	21 15       	cp	r18, r1
    1b66:	31 05       	cpc	r19, r1
    1b68:	61 f4       	brne	.+24     	; 0x1b82 <TwiTransmit+0x38>
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Invalid Parameters\r\n");
    1b6a:	87 e4       	ldi	r24, 0x47	; 71
    1b6c:	99 e0       	ldi	r25, 0x09	; 9
    1b6e:	9f 93       	push	r25
    1b70:	8f 93       	push	r24
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	8f 93       	push	r24
    1b76:	30 dd       	rcall	.-1440   	; 0x15d8 <SendTrace>
			
			Status = FALSE;
		
			goto Exit;
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
	{
		if (Address == NULL)
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Invalid Parameters\r\n");
			
			Status = FALSE;
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
		
			goto Exit;
    1b80:	35 c0       	rjmp	.+106    	; 0x1bec <TwiTransmit+0xa2>
		}
		else
		{
			Status = TwiMasterTransmit(Buffer, Length, Address, SendStop);	
    1b82:	82 df       	rcall	.-252    	; 0x1a88 <TwiMasterTransmit>
    1b84:	33 c0       	rjmp	.+102    	; 0x1bec <TwiTransmit+0xa2>
		}
	}
	else
	{
		WAIT_FOR_OP_COMPLETION();
    1b86:	ec eb       	ldi	r30, 0xBC	; 188
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	20 81       	ld	r18, Z
    1b8c:	20 68       	ori	r18, 0x80	; 128
    1b8e:	20 83       	st	Z, r18
    1b90:	20 81       	ld	r18, Z
    1b92:	22 23       	and	r18, r18
    1b94:	ec f7       	brge	.-6      	; 0x1b90 <TwiTransmit+0x46>
		
		if (ProcessTwiStatus(STOP_REPEATED_START_RECEIVED))
    1b96:	20 91 b9 00 	lds	r18, 0x00B9
    1b9a:	28 7f       	andi	r18, 0xF8	; 248
    1b9c:	20 3a       	cpi	r18, 0xA0	; 160
    1b9e:	41 f4       	brne	.+16     	; 0x1bb0 <TwiTransmit+0x66>
		{
			WAIT_FOR_OP_COMPLETION();	
    1ba0:	ec eb       	ldi	r30, 0xBC	; 188
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	20 81       	ld	r18, Z
    1ba6:	20 68       	ori	r18, 0x80	; 128
    1ba8:	20 83       	st	Z, r18
    1baa:	20 81       	ld	r18, Z
    1bac:	22 23       	and	r18, r18
    1bae:	ec f7       	brge	.-6      	; 0x1baa <TwiTransmit+0x60>
		}
		
		if (!ProcessTwiStatus(SLA_R_RECEIVED_ACK))
    1bb0:	20 91 b9 00 	lds	r18, 0x00B9
    1bb4:	28 7f       	andi	r18, 0xF8	; 248
    1bb6:	28 3a       	cpi	r18, 0xA8	; 168
    1bb8:	91 f0       	breq	.+36     	; 0x1bde <TwiTransmit+0x94>
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Slave Read Not Requested by Master - 0x%x\r\n", TWSR);
    1bba:	80 91 b9 00 	lds	r24, 0x00B9
    1bbe:	1f 92       	push	r1
    1bc0:	8f 93       	push	r24
    1bc2:	8a e6       	ldi	r24, 0x6A	; 106
    1bc4:	99 e0       	ldi	r25, 0x09	; 9
    1bc6:	9f 93       	push	r25
    1bc8:	8f 93       	push	r24
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	8f 93       	push	r24
    1bce:	04 dd       	rcall	.-1528   	; 0x15d8 <SendTrace>
			
			Status = FALSE;
		
			goto Exit;
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(SLA_R_RECEIVED_ACK))
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Slave Read Not Requested by Master - 0x%x\r\n", TWSR);
			
			Status = FALSE;
    1bda:	80 e0       	ldi	r24, 0x00	; 0
		
			goto Exit;
    1bdc:	07 c0       	rjmp	.+14     	; 0x1bec <TwiTransmit+0xa2>
		}
		else
		{	
			DATA_OUT();
    1bde:	39 9a       	sbi	0x07, 1	; 7
		
			Status = Transmit(Buffer, Length);
    1be0:	b6 de       	rcall	.-660    	; 0x194e <Transmit>
		
			DATA_IN();
    1be2:	39 98       	cbi	0x07, 1	; 7
    1be4:	03 c0       	rjmp	.+6      	; 0x1bec <TwiTransmit+0xa2>
{
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
	{
		Status = FALSE;
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	01 c0       	rjmp	.+2      	; 0x1bec <TwiTransmit+0xa2>
    1bea:	80 e0       	ldi	r24, 0x00	; 0
	}
	
Exit:

	return Status;
}
    1bec:	0f 91       	pop	r16
    1bee:	08 95       	ret

00001bf0 <Receive>:
	return Status;	
}

bool
Receive(PVOID Buffer, unsigned long Length)
{
    1bf0:	8f 92       	push	r8
    1bf2:	9f 92       	push	r9
    1bf4:	af 92       	push	r10
    1bf6:	bf 92       	push	r11
    1bf8:	df 92       	push	r13
    1bfa:	ef 92       	push	r14
    1bfc:	ff 92       	push	r15
    1bfe:	0f 93       	push	r16
    1c00:	1f 93       	push	r17
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
	
	unsigned char *BytePtr;
	
	TWI_STATUS ReceiveStatus;
	
	if (gMode == TWI_MASTER)
    1c06:	20 91 e1 0a 	lds	r18, 0x0AE1
    1c0a:	21 30       	cpi	r18, 0x01	; 1
    1c0c:	29 f4       	brne	.+10     	; 0x1c18 <Receive+0x28>
	{
		ReceiveStatus = DATA_RECEIVED_ACK;
    1c0e:	0f 2e       	mov	r0, r31
    1c10:	f0 e5       	ldi	r31, 0x50	; 80
    1c12:	df 2e       	mov	r13, r31
    1c14:	f0 2d       	mov	r31, r0
    1c16:	03 c0       	rjmp	.+6      	; 0x1c1e <Receive+0x2e>
	}
	else
	{
		ReceiveStatus = SLA_W_DATA_RECEIVED_ACK;
    1c18:	68 94       	set
    1c1a:	dd 24       	eor	r13, r13
    1c1c:	d7 f8       	bld	r13, 7
	// Now receive the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
    1c1e:	4a 01       	movw	r8, r20
    1c20:	5b 01       	movw	r10, r22
    1c22:	21 e0       	ldi	r18, 0x01	; 1
    1c24:	82 1a       	sub	r8, r18
    1c26:	91 08       	sbc	r9, r1
    1c28:	a1 08       	sbc	r10, r1
    1c2a:	b1 08       	sbc	r11, r1
    1c2c:	81 14       	cp	r8, r1
    1c2e:	91 04       	cpc	r9, r1
    1c30:	a1 04       	cpc	r10, r1
    1c32:	b1 04       	cpc	r11, r1
    1c34:	e1 f1       	breq	.+120    	; 0x1cae <Receive+0xbe>
    1c36:	dc 01       	movw	r26, r24
    1c38:	00 e0       	ldi	r16, 0x00	; 0
    1c3a:	10 e0       	ldi	r17, 0x00	; 0
    1c3c:	98 01       	movw	r18, r16
	{
			
		WAIT_FOR_OP_COMPLETION();
    1c3e:	ec eb       	ldi	r30, 0xBC	; 188
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
		
		if (!ProcessTwiStatus(ReceiveStatus))
    1c42:	0f 2e       	mov	r0, r31
    1c44:	f9 eb       	ldi	r31, 0xB9	; 185
    1c46:	ef 2e       	mov	r14, r31
    1c48:	f1 2c       	mov	r15, r1
    1c4a:	f0 2d       	mov	r31, r0
    1c4c:	6d 2d       	mov	r22, r13
    1c4e:	70 e0       	ldi	r23, 0x00	; 0
			Status = FALSE;
			
			goto Exit;
		}
		
		*BytePtr = TWDR;
    1c50:	4b eb       	ldi	r20, 0xBB	; 187
    1c52:	50 e0       	ldi	r21, 0x00	; 0
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
	{
			
		WAIT_FOR_OP_COMPLETION();
    1c54:	80 81       	ld	r24, Z
    1c56:	80 68       	ori	r24, 0x80	; 128
    1c58:	80 83       	st	Z, r24
    1c5a:	80 81       	ld	r24, Z
    1c5c:	88 23       	and	r24, r24
    1c5e:	ec f7       	brge	.-6      	; 0x1c5a <Receive+0x6a>
		
		if (!ProcessTwiStatus(ReceiveStatus))
    1c60:	e7 01       	movw	r28, r14
    1c62:	88 81       	ld	r24, Y
    1c64:	88 7f       	andi	r24, 0xF8	; 248
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	86 17       	cp	r24, r22
    1c6a:	97 07       	cpc	r25, r23
    1c6c:	99 f0       	breq	.+38     	; 0x1c94 <Receive+0xa4>
		{
			SendTrace(ERROR_LEVEL, "Receive - Data Reception Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
    1c6e:	80 91 b9 00 	lds	r24, 0x00B9
    1c72:	88 7f       	andi	r24, 0xF8	; 248
    1c74:	1f 92       	push	r1
    1c76:	8f 93       	push	r24
    1c78:	84 ea       	ldi	r24, 0xA4	; 164
    1c7a:	99 e0       	ldi	r25, 0x09	; 9
    1c7c:	9f 93       	push	r25
    1c7e:	8f 93       	push	r24
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	8f 93       	push	r24
    1c84:	a9 dc       	rcall	.-1710   	; 0x15d8 <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(ReceiveStatus))
		{
			SendTrace(ERROR_LEVEL, "Receive - Data Reception Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
			
			Status = FALSE;
    1c90:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
    1c92:	43 c0       	rjmp	.+134    	; 0x1d1a <Receive+0x12a>
		}
		
		*BytePtr = TWDR;
    1c94:	ea 01       	movw	r28, r20
    1c96:	88 81       	ld	r24, Y
    1c98:	8d 93       	st	X+, r24
		
		BytePtr++;
    1c9a:	cd 01       	movw	r24, r26
	// Now receive the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
    1c9c:	0f 5f       	subi	r16, 0xFF	; 255
    1c9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca0:	2f 4f       	sbci	r18, 0xFF	; 255
    1ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca4:	08 15       	cp	r16, r8
    1ca6:	19 05       	cpc	r17, r9
    1ca8:	2a 05       	cpc	r18, r10
    1caa:	3b 05       	cpc	r19, r11
    1cac:	98 f2       	brcs	.-90     	; 0x1c54 <Receive+0x64>
	//
	// When receiving the last byte if the receiver is a master then we need to transmit a NACK.
	// If the receiver is a slave we need to transmit a ACK.
	//
	
	if (gMode == TWI_MASTER)
    1cae:	20 91 e1 0a 	lds	r18, 0x0AE1
    1cb2:	21 30       	cpi	r18, 0x01	; 1
    1cb4:	49 f4       	brne	.+18     	; 0x1cc8 <Receive+0xd8>
	{
		ENABLE_NACK();
    1cb6:	ec eb       	ldi	r30, 0xBC	; 188
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	20 81       	ld	r18, Z
    1cbc:	2f 73       	andi	r18, 0x3F	; 63
    1cbe:	20 83       	st	Z, r18
		
		ReceiveStatus = DATA_RECEIVED_NACK;
    1cc0:	0f 2e       	mov	r0, r31
    1cc2:	f8 e5       	ldi	r31, 0x58	; 88
    1cc4:	df 2e       	mov	r13, r31
    1cc6:	f0 2d       	mov	r31, r0
	}
	
	WAIT_FOR_OP_COMPLETION();
    1cc8:	ec eb       	ldi	r30, 0xBC	; 188
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	20 81       	ld	r18, Z
    1cce:	20 68       	ori	r18, 0x80	; 128
    1cd0:	20 83       	st	Z, r18
    1cd2:	20 81       	ld	r18, Z
    1cd4:	22 23       	and	r18, r18
    1cd6:	ec f7       	brge	.-6      	; 0x1cd2 <Receive+0xe2>
	
	if (!ProcessTwiStatus(ReceiveStatus))
    1cd8:	40 91 b9 00 	lds	r20, 0x00B9
    1cdc:	48 7f       	andi	r20, 0xF8	; 248
    1cde:	50 e0       	ldi	r21, 0x00	; 0
    1ce0:	2d 2d       	mov	r18, r13
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	42 17       	cp	r20, r18
    1ce6:	53 07       	cpc	r21, r19
    1ce8:	99 f0       	breq	.+38     	; 0x1d10 <Receive+0x120>
	{
		SendTrace(ERROR_LEVEL, "Receive - Data Reception Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
    1cea:	80 91 b9 00 	lds	r24, 0x00B9
    1cee:	88 7f       	andi	r24, 0xF8	; 248
    1cf0:	1f 92       	push	r1
    1cf2:	8f 93       	push	r24
    1cf4:	84 ea       	ldi	r24, 0xA4	; 164
    1cf6:	99 e0       	ldi	r25, 0x09	; 9
    1cf8:	9f 93       	push	r25
    1cfa:	8f 93       	push	r24
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	8f 93       	push	r24
    1d00:	6b dc       	rcall	.-1834   	; 0x15d8 <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
	
	if (!ProcessTwiStatus(ReceiveStatus))
	{
		SendTrace(ERROR_LEVEL, "Receive - Data Reception Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
		
		goto Exit;
    1d0e:	05 c0       	rjmp	.+10     	; 0x1d1a <Receive+0x12a>
	}
	
	*BytePtr = TWDR;
    1d10:	20 91 bb 00 	lds	r18, 0x00BB
    1d14:	fc 01       	movw	r30, r24
    1d16:	20 83       	st	Z, r18
}

bool
Receive(PVOID Buffer, unsigned long Length)
{
	bool Status = TRUE;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
	
	*BytePtr = TWDR;
	
Exit:

	ENABLE_ACK();
    1d1a:	ec eb       	ldi	r30, 0xBC	; 188
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	90 81       	ld	r25, Z
    1d20:	9f 73       	andi	r25, 0x3F	; 63
    1d22:	90 64       	ori	r25, 0x40	; 64
    1d24:	90 83       	st	Z, r25

	return Status;
}
    1d26:	df 91       	pop	r29
    1d28:	cf 91       	pop	r28
    1d2a:	1f 91       	pop	r17
    1d2c:	0f 91       	pop	r16
    1d2e:	ff 90       	pop	r15
    1d30:	ef 90       	pop	r14
    1d32:	df 90       	pop	r13
    1d34:	bf 90       	pop	r11
    1d36:	af 90       	pop	r10
    1d38:	9f 90       	pop	r9
    1d3a:	8f 90       	pop	r8
    1d3c:	08 95       	ret

00001d3e <TwiMasterReceive>:
bool
TwiMasterReceive(PVOID Buffer, 
				 unsigned long Length, 
				 PTWI_ADDRESS Address,
				 bool SendStop)
{
    1d3e:	af 92       	push	r10
    1d40:	bf 92       	push	r11
    1d42:	cf 92       	push	r12
    1d44:	df 92       	push	r13
    1d46:	ef 92       	push	r14
    1d48:	ff 92       	push	r15
    1d4a:	0f 93       	push	r16
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	5c 01       	movw	r10, r24
    1d52:	6a 01       	movw	r12, r20
    1d54:	7b 01       	movw	r14, r22
    1d56:	e9 01       	movw	r28, r18
	bool Status = TRUE;
	
	if (!SendStartCondition())
    1d58:	c8 dd       	rcall	.-1136   	; 0x18ea <SendStartCondition>
    1d5a:	81 11       	cpse	r24, r1
    1d5c:	13 c0       	rjmp	.+38     	; 0x1d84 <TwiMasterReceive+0x46>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterReceive - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
    1d5e:	80 91 b9 00 	lds	r24, 0x00B9
    1d62:	88 7f       	andi	r24, 0xF8	; 248
    1d64:	1f 92       	push	r1
    1d66:	8f 93       	push	r24
    1d68:	86 ed       	ldi	r24, 0xD6	; 214
    1d6a:	99 e0       	ldi	r25, 0x09	; 9
    1d6c:	9f 93       	push	r25
    1d6e:	8f 93       	push	r24
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	8f 93       	push	r24
    1d74:	31 dc       	rcall	.-1950   	; 0x15d8 <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
	
	if (!SendStartCondition())
	{
		SendTrace(ERROR_LEVEL, "TwiMasterReceive - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
    1d80:	c0 e0       	ldi	r28, 0x00	; 0
		
		goto Exit;
    1d82:	33 c0       	rjmp	.+102    	; 0x1dea <TwiMasterReceive+0xac>
	}
	
	gIsRepeatedStart = FALSE;
    1d84:	10 92 da 0a 	sts	0x0ADA, r1
	//
	// Set Address->ReadWrite = 1 indicating a read operation.
	// Then transmit SLA+R
	//
	
	Address->RW_EnGenCall = 1;
    1d88:	88 81       	ld	r24, Y
    1d8a:	81 60       	ori	r24, 0x01	; 1
    1d8c:	88 83       	st	Y, r24
	
	TWDR = Address->AsUINT8;
    1d8e:	80 93 bb 00 	sts	0x00BB, r24
	
	WAIT_FOR_OP_COMPLETION();
    1d92:	ec eb       	ldi	r30, 0xBC	; 188
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	80 68       	ori	r24, 0x80	; 128
    1d9a:	80 83       	st	Z, r24
    1d9c:	80 81       	ld	r24, Z
    1d9e:	88 23       	and	r24, r24
    1da0:	ec f7       	brge	.-6      	; 0x1d9c <TwiMasterReceive+0x5e>
	
	if (!ProcessTwiStatus(SLA_R_TRANSMITTED_ACK))
    1da2:	80 91 b9 00 	lds	r24, 0x00B9
    1da6:	88 7f       	andi	r24, 0xF8	; 248
    1da8:	80 34       	cpi	r24, 0x40	; 64
    1daa:	99 f0       	breq	.+38     	; 0x1dd2 <TwiMasterReceive+0x94>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterReceive - Slave Address and Read Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
    1dac:	80 91 b9 00 	lds	r24, 0x00B9
    1db0:	88 7f       	andi	r24, 0xF8	; 248
    1db2:	1f 92       	push	r1
    1db4:	8f 93       	push	r24
    1db6:	8f e1       	ldi	r24, 0x1F	; 31
    1db8:	9a e0       	ldi	r25, 0x0A	; 10
    1dba:	9f 93       	push	r25
    1dbc:	8f 93       	push	r24
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	8f 93       	push	r24
    1dc2:	0a dc       	rcall	.-2028   	; 0x15d8 <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	0f 90       	pop	r0
	
	if (!ProcessTwiStatus(SLA_R_TRANSMITTED_ACK))
	{
		SendTrace(ERROR_LEVEL, "TwiMasterReceive - Slave Address and Read Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
    1dce:	c0 e0       	ldi	r28, 0x00	; 0
		
		goto Exit;
    1dd0:	0c c0       	rjmp	.+24     	; 0x1dea <TwiMasterReceive+0xac>
	}
	
	Status = Receive(Buffer, Length);
    1dd2:	b7 01       	movw	r22, r14
    1dd4:	a6 01       	movw	r20, r12
    1dd6:	c5 01       	movw	r24, r10
    1dd8:	0b df       	rcall	.-490    	; 0x1bf0 <Receive>
    1dda:	c8 2f       	mov	r28, r24
	
	//
	// Send stop condition
	//
	
	if (SendStop)
    1ddc:	00 23       	and	r16, r16
    1dde:	11 f0       	breq	.+4      	; 0x1de4 <TwiMasterReceive+0xa6>
	{
		SendStopCondition();
    1de0:	a9 dd       	rcall	.-1198   	; 0x1934 <SendStopCondition>
    1de2:	03 c0       	rjmp	.+6      	; 0x1dea <TwiMasterReceive+0xac>
	}
	else
	{
		gIsRepeatedStart = TRUE;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	80 93 da 0a 	sts	0x0ADA, r24
	}
	
Exit:

	return Status;
}
    1dea:	8c 2f       	mov	r24, r28
    1dec:	df 91       	pop	r29
    1dee:	cf 91       	pop	r28
    1df0:	0f 91       	pop	r16
    1df2:	ff 90       	pop	r15
    1df4:	ef 90       	pop	r14
    1df6:	df 90       	pop	r13
    1df8:	cf 90       	pop	r12
    1dfa:	bf 90       	pop	r11
    1dfc:	af 90       	pop	r10
    1dfe:	08 95       	ret

00001e00 <TwiReceive>:
bool
TwiReceive(PVOID Buffer,
		   unsigned long Length,
		   PTWI_ADDRESS Address,
		   bool SendStop)
{
    1e00:	0f 93       	push	r16
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
    1e02:	e0 91 db 0a 	lds	r30, 0x0ADB
    1e06:	ee 23       	and	r30, r30
    1e08:	d1 f1       	breq	.+116    	; 0x1e7e <TwiReceive+0x7e>
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	d1 f1       	breq	.+116    	; 0x1e82 <TwiReceive+0x82>
		Status = FALSE;
		
		goto Exit;
	}
	
	if (gMode == TWI_MASTER)
    1e0e:	e0 91 e1 0a 	lds	r30, 0x0AE1
    1e12:	e1 30       	cpi	r30, 0x01	; 1
    1e14:	99 f4       	brne	.+38     	; 0x1e3c <TwiReceive+0x3c>
	{
		if (Address == NULL)
    1e16:	21 15       	cp	r18, r1
    1e18:	31 05       	cpc	r19, r1
    1e1a:	61 f4       	brne	.+24     	; 0x1e34 <TwiReceive+0x34>
		{
			SendTrace(ERROR_LEVEL, "TwiReceive - Invalid Parameters\r\n");
    1e1c:	84 e7       	ldi	r24, 0x74	; 116
    1e1e:	9a e0       	ldi	r25, 0x0A	; 10
    1e20:	9f 93       	push	r25
    1e22:	8f 93       	push	r24
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	8f 93       	push	r24
    1e28:	d7 db       	rcall	.-2130   	; 0x15d8 <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
	{
		if (Address == NULL)
		{
			SendTrace(ERROR_LEVEL, "TwiReceive - Invalid Parameters\r\n");
			
			Status = FALSE;
    1e30:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
    1e32:	28 c0       	rjmp	.+80     	; 0x1e84 <TwiReceive+0x84>
		}
		else
		{
			DATA_IN();
    1e34:	39 98       	cbi	0x07, 1	; 7
			
			Status = TwiMasterReceive(Buffer, Length, Address, SendStop);
    1e36:	83 df       	rcall	.-250    	; 0x1d3e <TwiMasterReceive>
			
			DATA_OUT();
    1e38:	39 9a       	sbi	0x07, 1	; 7
    1e3a:	24 c0       	rjmp	.+72     	; 0x1e84 <TwiReceive+0x84>
		}
	}
	else
	{
		WAIT_FOR_OP_COMPLETION();
    1e3c:	ec eb       	ldi	r30, 0xBC	; 188
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	20 81       	ld	r18, Z
    1e42:	20 68       	ori	r18, 0x80	; 128
    1e44:	20 83       	st	Z, r18
    1e46:	20 81       	ld	r18, Z
    1e48:	22 23       	and	r18, r18
    1e4a:	ec f7       	brge	.-6      	; 0x1e46 <TwiReceive+0x46>
		
		if (!ProcessTwiStatus(SLA_W_RECEIVED_ACK))
    1e4c:	20 91 b9 00 	lds	r18, 0x00B9
    1e50:	28 7f       	andi	r18, 0xF8	; 248
    1e52:	20 36       	cpi	r18, 0x60	; 96
    1e54:	91 f0       	breq	.+36     	; 0x1e7a <TwiReceive+0x7a>
		{
			SendTrace(ERROR_LEVEL, "TwiReceive - Slave Write Not Requested by Master - Status 0x%x\r\n", TWSR);
    1e56:	80 91 b9 00 	lds	r24, 0x00B9
    1e5a:	1f 92       	push	r1
    1e5c:	8f 93       	push	r24
    1e5e:	86 e9       	ldi	r24, 0x96	; 150
    1e60:	9a e0       	ldi	r25, 0x0A	; 10
    1e62:	9f 93       	push	r25
    1e64:	8f 93       	push	r24
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	8f 93       	push	r24
    1e6a:	b6 db       	rcall	.-2196   	; 0x15d8 <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(SLA_W_RECEIVED_ACK))
		{
			SendTrace(ERROR_LEVEL, "TwiReceive - Slave Write Not Requested by Master - Status 0x%x\r\n", TWSR);
			
			Status = FALSE;
    1e76:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
    1e78:	05 c0       	rjmp	.+10     	; 0x1e84 <TwiReceive+0x84>
		}
		else
		{	
			Status = Receive(Buffer, Length);
    1e7a:	ba de       	rcall	.-652    	; 0x1bf0 <Receive>
    1e7c:	03 c0       	rjmp	.+6      	; 0x1e84 <TwiReceive+0x84>
{
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
	{
		Status = FALSE;
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	01 c0       	rjmp	.+2      	; 0x1e84 <TwiReceive+0x84>
    1e82:	80 e0       	ldi	r24, 0x00	; 0
	}
	
Exit:

	return Status;		   
}
    1e84:	0f 91       	pop	r16
    1e86:	08 95       	ret

00001e88 <InitializeUARTTimer>:

unsigned long
UARTReceiveSync(UART_NUMBER UARTNumber, PVOID ReceiveValue, unsigned long Length)
{
	return UARTReceive(UARTNumber, ReceiveValue, Length, 0);
}
    1e88:	82 e0       	ldi	r24, 0x02	; 2
    1e8a:	84 bd       	out	0x24, r24	; 36
    1e8c:	15 bc       	out	0x25, r1	; 37
    1e8e:	16 bc       	out	0x26, r1	; 38
    1e90:	17 bc       	out	0x27, r1	; 39
    1e92:	18 bc       	out	0x28, r1	; 40
    1e94:	80 93 6e 00 	sts	0x006E, r24
    1e98:	08 95       	ret

00001e9a <InitUARTSync>:
    1e9a:	cf 93       	push	r28
    1e9c:	40 93 f0 0a 	sts	0x0AF0, r20
    1ea0:	88 23       	and	r24, r24
    1ea2:	19 f0       	breq	.+6      	; 0x1eaa <InitUARTSync+0x10>
    1ea4:	81 30       	cpi	r24, 0x01	; 1
    1ea6:	c9 f0       	breq	.+50     	; 0x1eda <InitUARTSync+0x40>
    1ea8:	30 c0       	rjmp	.+96     	; 0x1f0a <InitUARTSync+0x70>
    1eaa:	70 93 c5 00 	sts	0x00C5, r23
    1eae:	60 93 c4 00 	sts	0x00C4, r22
    1eb2:	88 e9       	ldi	r24, 0x98	; 152
    1eb4:	80 93 c1 00 	sts	0x00C1, r24
    1eb8:	41 30       	cpi	r20, 0x01	; 1
    1eba:	39 f4       	brne	.+14     	; 0x1eca <InitUARTSync+0x30>
    1ebc:	86 e0       	ldi	r24, 0x06	; 6
    1ebe:	80 93 c2 00 	sts	0x00C2, r24
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	80 93 c0 00 	sts	0x00C0, r24
    1ec8:	03 c0       	rjmp	.+6      	; 0x1ed0 <InitUARTSync+0x36>
    1eca:	86 e0       	ldi	r24, 0x06	; 6
    1ecc:	80 93 c2 00 	sts	0x00C2, r24
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	80 93 dc 0a 	sts	0x0ADC, r24
    1ed6:	c1 e0       	ldi	r28, 0x01	; 1
    1ed8:	19 c0       	rjmp	.+50     	; 0x1f0c <InitUARTSync+0x72>
    1eda:	70 93 cd 00 	sts	0x00CD, r23
    1ede:	60 93 cc 00 	sts	0x00CC, r22
    1ee2:	88 e9       	ldi	r24, 0x98	; 152
    1ee4:	80 93 c9 00 	sts	0x00C9, r24
    1ee8:	41 30       	cpi	r20, 0x01	; 1
    1eea:	39 f4       	brne	.+14     	; 0x1efa <InitUARTSync+0x60>
    1eec:	86 e0       	ldi	r24, 0x06	; 6
    1eee:	80 93 ca 00 	sts	0x00CA, r24
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	80 93 c8 00 	sts	0x00C8, r24
    1ef8:	03 c0       	rjmp	.+6      	; 0x1f00 <InitUARTSync+0x66>
    1efa:	86 e0       	ldi	r24, 0x06	; 6
    1efc:	80 93 ca 00 	sts	0x00CA, r24
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	80 93 dd 0a 	sts	0x0ADD, r24
    1f06:	c1 e0       	ldi	r28, 0x01	; 1
    1f08:	01 c0       	rjmp	.+2      	; 0x1f0c <InitUARTSync+0x72>
    1f0a:	c0 e0       	ldi	r28, 0x00	; 0
    1f0c:	bd df       	rcall	.-134    	; 0x1e88 <InitializeUARTTimer>
    1f0e:	8c 2f       	mov	r24, r28
    1f10:	cf 91       	pop	r28
    1f12:	08 95       	ret

00001f14 <UARTTransmit>:
    1f14:	cf 92       	push	r12
    1f16:	df 92       	push	r13
    1f18:	ef 92       	push	r14
    1f1a:	ff 92       	push	r15
    1f1c:	0f 93       	push	r16
    1f1e:	1f 93       	push	r17
    1f20:	cf 93       	push	r28
    1f22:	df 93       	push	r29
    1f24:	6b 01       	movw	r12, r22
    1f26:	88 23       	and	r24, r24
    1f28:	19 f0       	breq	.+6      	; 0x1f30 <UARTTransmit+0x1c>
    1f2a:	81 30       	cpi	r24, 0x01	; 1
    1f2c:	c1 f1       	breq	.+112    	; 0x1f9e <UARTTransmit+0x8a>
    1f2e:	6c c0       	rjmp	.+216    	; 0x2008 <UARTTransmit+0xf4>
    1f30:	80 91 dc 0a 	lds	r24, 0x0ADC
    1f34:	88 23       	and	r24, r24
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <UARTTransmit+0x26>
    1f38:	6b c0       	rjmp	.+214    	; 0x2010 <UARTTransmit+0xfc>
    1f3a:	21 15       	cp	r18, r1
    1f3c:	31 05       	cpc	r19, r1
    1f3e:	41 05       	cpc	r20, r1
    1f40:	51 05       	cpc	r21, r1
    1f42:	09 f4       	brne	.+2      	; 0x1f46 <UARTTransmit+0x32>
    1f44:	6c c0       	rjmp	.+216    	; 0x201e <UARTTransmit+0x10a>
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	c0 ec       	ldi	r28, 0xC0	; 192
    1f4e:	d0 e0       	ldi	r29, 0x00	; 0
    1f50:	0f 2e       	mov	r0, r31
    1f52:	f1 ec       	ldi	r31, 0xC1	; 193
    1f54:	ef 2e       	mov	r14, r31
    1f56:	f1 2c       	mov	r15, r1
    1f58:	f0 2d       	mov	r31, r0
    1f5a:	66 ec       	ldi	r22, 0xC6	; 198
    1f5c:	70 e0       	ldi	r23, 0x00	; 0
    1f5e:	18 81       	ld	r17, Y
    1f60:	15 ff       	sbrs	r17, 5
    1f62:	fd cf       	rjmp	.-6      	; 0x1f5e <UARTTransmit+0x4a>
    1f64:	10 91 f0 0a 	lds	r17, 0x0AF0
    1f68:	11 23       	and	r17, r17
    1f6a:	59 f0       	breq	.+22     	; 0x1f82 <UARTTransmit+0x6e>
    1f6c:	00 23       	and	r16, r16
    1f6e:	29 f0       	breq	.+10     	; 0x1f7a <UARTTransmit+0x66>
    1f70:	f7 01       	movw	r30, r14
    1f72:	10 81       	ld	r17, Z
    1f74:	11 60       	ori	r17, 0x01	; 1
    1f76:	10 83       	st	Z, r17
    1f78:	04 c0       	rjmp	.+8      	; 0x1f82 <UARTTransmit+0x6e>
    1f7a:	f7 01       	movw	r30, r14
    1f7c:	10 81       	ld	r17, Z
    1f7e:	1e 7f       	andi	r17, 0xFE	; 254
    1f80:	10 83       	st	Z, r17
    1f82:	f6 01       	movw	r30, r12
    1f84:	11 91       	ld	r17, Z+
    1f86:	6f 01       	movw	r12, r30
    1f88:	fb 01       	movw	r30, r22
    1f8a:	10 83       	st	Z, r17
    1f8c:	01 96       	adiw	r24, 0x01	; 1
    1f8e:	a1 1d       	adc	r26, r1
    1f90:	b1 1d       	adc	r27, r1
    1f92:	82 17       	cp	r24, r18
    1f94:	93 07       	cpc	r25, r19
    1f96:	a4 07       	cpc	r26, r20
    1f98:	b5 07       	cpc	r27, r21
    1f9a:	09 f7       	brne	.-62     	; 0x1f5e <UARTTransmit+0x4a>
    1f9c:	40 c0       	rjmp	.+128    	; 0x201e <UARTTransmit+0x10a>
    1f9e:	80 91 dd 0a 	lds	r24, 0x0ADD
    1fa2:	88 23       	and	r24, r24
    1fa4:	c9 f1       	breq	.+114    	; 0x2018 <UARTTransmit+0x104>
    1fa6:	21 15       	cp	r18, r1
    1fa8:	31 05       	cpc	r19, r1
    1faa:	41 05       	cpc	r20, r1
    1fac:	51 05       	cpc	r21, r1
    1fae:	b9 f1       	breq	.+110    	; 0x201e <UARTTransmit+0x10a>
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	c8 ec       	ldi	r28, 0xC8	; 200
    1fb8:	d0 e0       	ldi	r29, 0x00	; 0
    1fba:	0f 2e       	mov	r0, r31
    1fbc:	f9 ec       	ldi	r31, 0xC9	; 201
    1fbe:	ef 2e       	mov	r14, r31
    1fc0:	f1 2c       	mov	r15, r1
    1fc2:	f0 2d       	mov	r31, r0
    1fc4:	6e ec       	ldi	r22, 0xCE	; 206
    1fc6:	70 e0       	ldi	r23, 0x00	; 0
    1fc8:	18 81       	ld	r17, Y
    1fca:	15 ff       	sbrs	r17, 5
    1fcc:	fd cf       	rjmp	.-6      	; 0x1fc8 <UARTTransmit+0xb4>
    1fce:	10 91 f0 0a 	lds	r17, 0x0AF0
    1fd2:	11 23       	and	r17, r17
    1fd4:	59 f0       	breq	.+22     	; 0x1fec <UARTTransmit+0xd8>
    1fd6:	00 23       	and	r16, r16
    1fd8:	29 f0       	breq	.+10     	; 0x1fe4 <UARTTransmit+0xd0>
    1fda:	f7 01       	movw	r30, r14
    1fdc:	10 81       	ld	r17, Z
    1fde:	11 60       	ori	r17, 0x01	; 1
    1fe0:	10 83       	st	Z, r17
    1fe2:	04 c0       	rjmp	.+8      	; 0x1fec <UARTTransmit+0xd8>
    1fe4:	f7 01       	movw	r30, r14
    1fe6:	10 81       	ld	r17, Z
    1fe8:	1e 7f       	andi	r17, 0xFE	; 254
    1fea:	10 83       	st	Z, r17
    1fec:	f6 01       	movw	r30, r12
    1fee:	11 91       	ld	r17, Z+
    1ff0:	6f 01       	movw	r12, r30
    1ff2:	fb 01       	movw	r30, r22
    1ff4:	10 83       	st	Z, r17
    1ff6:	01 96       	adiw	r24, 0x01	; 1
    1ff8:	a1 1d       	adc	r26, r1
    1ffa:	b1 1d       	adc	r27, r1
    1ffc:	82 17       	cp	r24, r18
    1ffe:	93 07       	cpc	r25, r19
    2000:	a4 07       	cpc	r26, r20
    2002:	b5 07       	cpc	r27, r21
    2004:	09 f7       	brne	.-62     	; 0x1fc8 <UARTTransmit+0xb4>
    2006:	0b c0       	rjmp	.+22     	; 0x201e <UARTTransmit+0x10a>
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	a9 01       	movw	r20, r18
    200e:	07 c0       	rjmp	.+14     	; 0x201e <UARTTransmit+0x10a>
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	a9 01       	movw	r20, r18
    2016:	03 c0       	rjmp	.+6      	; 0x201e <UARTTransmit+0x10a>
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	a9 01       	movw	r20, r18
    201e:	ca 01       	movw	r24, r20
    2020:	b9 01       	movw	r22, r18
    2022:	df 91       	pop	r29
    2024:	cf 91       	pop	r28
    2026:	1f 91       	pop	r17
    2028:	0f 91       	pop	r16
    202a:	ff 90       	pop	r15
    202c:	ef 90       	pop	r14
    202e:	df 90       	pop	r13
    2030:	cf 90       	pop	r12
    2032:	08 95       	ret

00002034 <UARTTransmitSync>:
    2034:	0f 93       	push	r16
    2036:	00 e0       	ldi	r16, 0x00	; 0
    2038:	6d df       	rcall	.-294    	; 0x1f14 <UARTTransmit>
    203a:	0f 91       	pop	r16
    203c:	08 95       	ret

0000203e <__vector_16>:
	return IndexI;

}

ISR(TIMER0_COMPA_vect)
{
    203e:	1f 92       	push	r1
    2040:	0f 92       	push	r0
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	0f 92       	push	r0
    2046:	11 24       	eor	r1, r1
    2048:	8f 93       	push	r24
	gUARTTimerTriggered = TRUE;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	80 93 f3 0a 	sts	0x0AF3, r24
}
    2050:	8f 91       	pop	r24
    2052:	0f 90       	pop	r0
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	0f 90       	pop	r0
    2058:	1f 90       	pop	r1
    205a:	18 95       	reti

0000205c <__vector_20>:

ISR(USART0_RX_vect)
{
    205c:	1f 92       	push	r1
    205e:	0f 92       	push	r0
    2060:	0f b6       	in	r0, 0x3f	; 63
    2062:	0f 92       	push	r0
    2064:	11 24       	eor	r1, r1
    2066:	0b b6       	in	r0, 0x3b	; 59
    2068:	0f 92       	push	r0
    206a:	2f 93       	push	r18
    206c:	3f 93       	push	r19
    206e:	4f 93       	push	r20
    2070:	5f 93       	push	r21
    2072:	6f 93       	push	r22
    2074:	7f 93       	push	r23
    2076:	8f 93       	push	r24
    2078:	9f 93       	push	r25
    207a:	af 93       	push	r26
    207c:	bf 93       	push	r27
    207e:	ef 93       	push	r30
    2080:	ff 93       	push	r31
	if(gRCICallback0 != NULL)
    2082:	e0 91 e2 0a 	lds	r30, 0x0AE2
    2086:	f0 91 e3 0a 	lds	r31, 0x0AE3
    208a:	30 97       	sbiw	r30, 0x00	; 0
    208c:	31 f0       	breq	.+12     	; 0x209a <__vector_20+0x3e>
	{
		gRCICallback0(UART_ZERO, gRCICallbackContext0);
    208e:	60 91 ee 0a 	lds	r22, 0x0AEE
    2092:	70 91 ef 0a 	lds	r23, 0x0AEF
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	09 95       	icall
	}
}
    209a:	ff 91       	pop	r31
    209c:	ef 91       	pop	r30
    209e:	bf 91       	pop	r27
    20a0:	af 91       	pop	r26
    20a2:	9f 91       	pop	r25
    20a4:	8f 91       	pop	r24
    20a6:	7f 91       	pop	r23
    20a8:	6f 91       	pop	r22
    20aa:	5f 91       	pop	r21
    20ac:	4f 91       	pop	r20
    20ae:	3f 91       	pop	r19
    20b0:	2f 91       	pop	r18
    20b2:	0f 90       	pop	r0
    20b4:	0b be       	out	0x3b, r0	; 59
    20b6:	0f 90       	pop	r0
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	0f 90       	pop	r0
    20bc:	1f 90       	pop	r1
    20be:	18 95       	reti

000020c0 <__vector_28>:

ISR(USART1_RX_vect)
{
    20c0:	1f 92       	push	r1
    20c2:	0f 92       	push	r0
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	0f 92       	push	r0
    20c8:	11 24       	eor	r1, r1
    20ca:	0b b6       	in	r0, 0x3b	; 59
    20cc:	0f 92       	push	r0
    20ce:	2f 93       	push	r18
    20d0:	3f 93       	push	r19
    20d2:	4f 93       	push	r20
    20d4:	5f 93       	push	r21
    20d6:	6f 93       	push	r22
    20d8:	7f 93       	push	r23
    20da:	8f 93       	push	r24
    20dc:	9f 93       	push	r25
    20de:	af 93       	push	r26
    20e0:	bf 93       	push	r27
    20e2:	ef 93       	push	r30
    20e4:	ff 93       	push	r31
	if(gRCICallback1 != NULL)
    20e6:	e0 91 e8 0a 	lds	r30, 0x0AE8
    20ea:	f0 91 e9 0a 	lds	r31, 0x0AE9
    20ee:	30 97       	sbiw	r30, 0x00	; 0
    20f0:	31 f0       	breq	.+12     	; 0x20fe <__vector_28+0x3e>
	{
		gRCICallback1(UART_ONE, gRCICallbackContext1);
    20f2:	60 91 e6 0a 	lds	r22, 0x0AE6
    20f6:	70 91 e7 0a 	lds	r23, 0x0AE7
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	09 95       	icall
	}
}
    20fe:	ff 91       	pop	r31
    2100:	ef 91       	pop	r30
    2102:	bf 91       	pop	r27
    2104:	af 91       	pop	r26
    2106:	9f 91       	pop	r25
    2108:	8f 91       	pop	r24
    210a:	7f 91       	pop	r23
    210c:	6f 91       	pop	r22
    210e:	5f 91       	pop	r21
    2110:	4f 91       	pop	r20
    2112:	3f 91       	pop	r19
    2114:	2f 91       	pop	r18
    2116:	0f 90       	pop	r0
    2118:	0b be       	out	0x3b, r0	; 59
    211a:	0f 90       	pop	r0
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	0f 90       	pop	r0
    2120:	1f 90       	pop	r1
    2122:	18 95       	reti

00002124 <__vector_22>:

ISR(USART0_TX_vect)
{
    2124:	1f 92       	push	r1
    2126:	0f 92       	push	r0
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	0f 92       	push	r0
    212c:	11 24       	eor	r1, r1
    212e:	0b b6       	in	r0, 0x3b	; 59
    2130:	0f 92       	push	r0
    2132:	2f 93       	push	r18
    2134:	3f 93       	push	r19
    2136:	4f 93       	push	r20
    2138:	5f 93       	push	r21
    213a:	6f 93       	push	r22
    213c:	7f 93       	push	r23
    213e:	8f 93       	push	r24
    2140:	9f 93       	push	r25
    2142:	af 93       	push	r26
    2144:	bf 93       	push	r27
    2146:	ef 93       	push	r30
    2148:	ff 93       	push	r31
	if(gTCICallback0 != NULL)
    214a:	e0 91 e4 0a 	lds	r30, 0x0AE4
    214e:	f0 91 e5 0a 	lds	r31, 0x0AE5
    2152:	30 97       	sbiw	r30, 0x00	; 0
    2154:	31 f0       	breq	.+12     	; 0x2162 <__vector_22+0x3e>
	{
		gTCICallback0(UART_ZERO, gTCICallbackContext0);
    2156:	60 91 ec 0a 	lds	r22, 0x0AEC
    215a:	70 91 ed 0a 	lds	r23, 0x0AED
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	09 95       	icall
	}
}
    2162:	ff 91       	pop	r31
    2164:	ef 91       	pop	r30
    2166:	bf 91       	pop	r27
    2168:	af 91       	pop	r26
    216a:	9f 91       	pop	r25
    216c:	8f 91       	pop	r24
    216e:	7f 91       	pop	r23
    2170:	6f 91       	pop	r22
    2172:	5f 91       	pop	r21
    2174:	4f 91       	pop	r20
    2176:	3f 91       	pop	r19
    2178:	2f 91       	pop	r18
    217a:	0f 90       	pop	r0
    217c:	0b be       	out	0x3b, r0	; 59
    217e:	0f 90       	pop	r0
    2180:	0f be       	out	0x3f, r0	; 63
    2182:	0f 90       	pop	r0
    2184:	1f 90       	pop	r1
    2186:	18 95       	reti

00002188 <__vector_30>:

ISR(USART1_TX_vect)
{
    2188:	1f 92       	push	r1
    218a:	0f 92       	push	r0
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	0f 92       	push	r0
    2190:	11 24       	eor	r1, r1
    2192:	0b b6       	in	r0, 0x3b	; 59
    2194:	0f 92       	push	r0
    2196:	2f 93       	push	r18
    2198:	3f 93       	push	r19
    219a:	4f 93       	push	r20
    219c:	5f 93       	push	r21
    219e:	6f 93       	push	r22
    21a0:	7f 93       	push	r23
    21a2:	8f 93       	push	r24
    21a4:	9f 93       	push	r25
    21a6:	af 93       	push	r26
    21a8:	bf 93       	push	r27
    21aa:	ef 93       	push	r30
    21ac:	ff 93       	push	r31
	if(gTCICallback1 != NULL)
    21ae:	e0 91 ea 0a 	lds	r30, 0x0AEA
    21b2:	f0 91 eb 0a 	lds	r31, 0x0AEB
    21b6:	30 97       	sbiw	r30, 0x00	; 0
    21b8:	31 f0       	breq	.+12     	; 0x21c6 <__vector_30+0x3e>
	{
		gTCICallback1(UART_ONE, gTCICallbackContext1);
    21ba:	60 91 f1 0a 	lds	r22, 0x0AF1
    21be:	70 91 f2 0a 	lds	r23, 0x0AF2
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	09 95       	icall
	}
    21c6:	ff 91       	pop	r31
    21c8:	ef 91       	pop	r30
    21ca:	bf 91       	pop	r27
    21cc:	af 91       	pop	r26
    21ce:	9f 91       	pop	r25
    21d0:	8f 91       	pop	r24
    21d2:	7f 91       	pop	r23
    21d4:	6f 91       	pop	r22
    21d6:	5f 91       	pop	r21
    21d8:	4f 91       	pop	r20
    21da:	3f 91       	pop	r19
    21dc:	2f 91       	pop	r18
    21de:	0f 90       	pop	r0
    21e0:	0b be       	out	0x3b, r0	; 59
    21e2:	0f 90       	pop	r0
    21e4:	0f be       	out	0x3f, r0	; 63
    21e6:	0f 90       	pop	r0
    21e8:	1f 90       	pop	r1
    21ea:	18 95       	reti

000021ec <__subsf3>:
    21ec:	50 58       	subi	r21, 0x80	; 128

000021ee <__addsf3>:
    21ee:	bb 27       	eor	r27, r27
    21f0:	aa 27       	eor	r26, r26
    21f2:	0e d0       	rcall	.+28     	; 0x2210 <__addsf3x>
    21f4:	81 c2       	rjmp	.+1282   	; 0x26f8 <__fp_round>
    21f6:	72 d2       	rcall	.+1252   	; 0x26dc <__fp_pscA>
    21f8:	30 f0       	brcs	.+12     	; 0x2206 <__addsf3+0x18>
    21fa:	77 d2       	rcall	.+1262   	; 0x26ea <__fp_pscB>
    21fc:	20 f0       	brcs	.+8      	; 0x2206 <__addsf3+0x18>
    21fe:	31 f4       	brne	.+12     	; 0x220c <__addsf3+0x1e>
    2200:	9f 3f       	cpi	r25, 0xFF	; 255
    2202:	11 f4       	brne	.+4      	; 0x2208 <__addsf3+0x1a>
    2204:	1e f4       	brtc	.+6      	; 0x220c <__addsf3+0x1e>
    2206:	32 c2       	rjmp	.+1124   	; 0x266c <__fp_nan>
    2208:	0e f4       	brtc	.+2      	; 0x220c <__addsf3+0x1e>
    220a:	e0 95       	com	r30
    220c:	e7 fb       	bst	r30, 7
    220e:	28 c2       	rjmp	.+1104   	; 0x2660 <__fp_inf>

00002210 <__addsf3x>:
    2210:	e9 2f       	mov	r30, r25
    2212:	83 d2       	rcall	.+1286   	; 0x271a <__fp_split3>
    2214:	80 f3       	brcs	.-32     	; 0x21f6 <__addsf3+0x8>
    2216:	ba 17       	cp	r27, r26
    2218:	62 07       	cpc	r22, r18
    221a:	73 07       	cpc	r23, r19
    221c:	84 07       	cpc	r24, r20
    221e:	95 07       	cpc	r25, r21
    2220:	18 f0       	brcs	.+6      	; 0x2228 <__addsf3x+0x18>
    2222:	71 f4       	brne	.+28     	; 0x2240 <__addsf3x+0x30>
    2224:	9e f5       	brtc	.+102    	; 0x228c <__addsf3x+0x7c>
    2226:	9b c2       	rjmp	.+1334   	; 0x275e <__fp_zero>
    2228:	0e f4       	brtc	.+2      	; 0x222c <__addsf3x+0x1c>
    222a:	e0 95       	com	r30
    222c:	0b 2e       	mov	r0, r27
    222e:	ba 2f       	mov	r27, r26
    2230:	a0 2d       	mov	r26, r0
    2232:	0b 01       	movw	r0, r22
    2234:	b9 01       	movw	r22, r18
    2236:	90 01       	movw	r18, r0
    2238:	0c 01       	movw	r0, r24
    223a:	ca 01       	movw	r24, r20
    223c:	a0 01       	movw	r20, r0
    223e:	11 24       	eor	r1, r1
    2240:	ff 27       	eor	r31, r31
    2242:	59 1b       	sub	r21, r25
    2244:	99 f0       	breq	.+38     	; 0x226c <__addsf3x+0x5c>
    2246:	59 3f       	cpi	r21, 0xF9	; 249
    2248:	50 f4       	brcc	.+20     	; 0x225e <__addsf3x+0x4e>
    224a:	50 3e       	cpi	r21, 0xE0	; 224
    224c:	68 f1       	brcs	.+90     	; 0x22a8 <__addsf3x+0x98>
    224e:	1a 16       	cp	r1, r26
    2250:	f0 40       	sbci	r31, 0x00	; 0
    2252:	a2 2f       	mov	r26, r18
    2254:	23 2f       	mov	r18, r19
    2256:	34 2f       	mov	r19, r20
    2258:	44 27       	eor	r20, r20
    225a:	58 5f       	subi	r21, 0xF8	; 248
    225c:	f3 cf       	rjmp	.-26     	; 0x2244 <__addsf3x+0x34>
    225e:	46 95       	lsr	r20
    2260:	37 95       	ror	r19
    2262:	27 95       	ror	r18
    2264:	a7 95       	ror	r26
    2266:	f0 40       	sbci	r31, 0x00	; 0
    2268:	53 95       	inc	r21
    226a:	c9 f7       	brne	.-14     	; 0x225e <__addsf3x+0x4e>
    226c:	7e f4       	brtc	.+30     	; 0x228c <__addsf3x+0x7c>
    226e:	1f 16       	cp	r1, r31
    2270:	ba 0b       	sbc	r27, r26
    2272:	62 0b       	sbc	r22, r18
    2274:	73 0b       	sbc	r23, r19
    2276:	84 0b       	sbc	r24, r20
    2278:	ba f0       	brmi	.+46     	; 0x22a8 <__addsf3x+0x98>
    227a:	91 50       	subi	r25, 0x01	; 1
    227c:	a1 f0       	breq	.+40     	; 0x22a6 <__addsf3x+0x96>
    227e:	ff 0f       	add	r31, r31
    2280:	bb 1f       	adc	r27, r27
    2282:	66 1f       	adc	r22, r22
    2284:	77 1f       	adc	r23, r23
    2286:	88 1f       	adc	r24, r24
    2288:	c2 f7       	brpl	.-16     	; 0x227a <__addsf3x+0x6a>
    228a:	0e c0       	rjmp	.+28     	; 0x22a8 <__addsf3x+0x98>
    228c:	ba 0f       	add	r27, r26
    228e:	62 1f       	adc	r22, r18
    2290:	73 1f       	adc	r23, r19
    2292:	84 1f       	adc	r24, r20
    2294:	48 f4       	brcc	.+18     	; 0x22a8 <__addsf3x+0x98>
    2296:	87 95       	ror	r24
    2298:	77 95       	ror	r23
    229a:	67 95       	ror	r22
    229c:	b7 95       	ror	r27
    229e:	f7 95       	ror	r31
    22a0:	9e 3f       	cpi	r25, 0xFE	; 254
    22a2:	08 f0       	brcs	.+2      	; 0x22a6 <__addsf3x+0x96>
    22a4:	b3 cf       	rjmp	.-154    	; 0x220c <__addsf3+0x1e>
    22a6:	93 95       	inc	r25
    22a8:	88 0f       	add	r24, r24
    22aa:	08 f0       	brcs	.+2      	; 0x22ae <__addsf3x+0x9e>
    22ac:	99 27       	eor	r25, r25
    22ae:	ee 0f       	add	r30, r30
    22b0:	97 95       	ror	r25
    22b2:	87 95       	ror	r24
    22b4:	08 95       	ret
    22b6:	12 d2       	rcall	.+1060   	; 0x26dc <__fp_pscA>
    22b8:	58 f0       	brcs	.+22     	; 0x22d0 <__addsf3x+0xc0>
    22ba:	80 e8       	ldi	r24, 0x80	; 128
    22bc:	91 e0       	ldi	r25, 0x01	; 1
    22be:	09 f4       	brne	.+2      	; 0x22c2 <__addsf3x+0xb2>
    22c0:	9e ef       	ldi	r25, 0xFE	; 254
    22c2:	13 d2       	rcall	.+1062   	; 0x26ea <__fp_pscB>
    22c4:	28 f0       	brcs	.+10     	; 0x22d0 <__addsf3x+0xc0>
    22c6:	40 e8       	ldi	r20, 0x80	; 128
    22c8:	51 e0       	ldi	r21, 0x01	; 1
    22ca:	59 f4       	brne	.+22     	; 0x22e2 <atan2+0xe>
    22cc:	5e ef       	ldi	r21, 0xFE	; 254
    22ce:	09 c0       	rjmp	.+18     	; 0x22e2 <atan2+0xe>
    22d0:	cd c1       	rjmp	.+922    	; 0x266c <__fp_nan>
    22d2:	45 c2       	rjmp	.+1162   	; 0x275e <__fp_zero>

000022d4 <atan2>:
    22d4:	e9 2f       	mov	r30, r25
    22d6:	e0 78       	andi	r30, 0x80	; 128
    22d8:	20 d2       	rcall	.+1088   	; 0x271a <__fp_split3>
    22da:	68 f3       	brcs	.-38     	; 0x22b6 <__addsf3x+0xa6>
    22dc:	09 2e       	mov	r0, r25
    22de:	05 2a       	or	r0, r21
    22e0:	c1 f3       	breq	.-16     	; 0x22d2 <__addsf3x+0xc2>
    22e2:	26 17       	cp	r18, r22
    22e4:	37 07       	cpc	r19, r23
    22e6:	48 07       	cpc	r20, r24
    22e8:	59 07       	cpc	r21, r25
    22ea:	38 f0       	brcs	.+14     	; 0x22fa <atan2+0x26>
    22ec:	0e 2e       	mov	r0, r30
    22ee:	07 f8       	bld	r0, 7
    22f0:	e0 25       	eor	r30, r0
    22f2:	69 f0       	breq	.+26     	; 0x230e <atan2+0x3a>
    22f4:	e0 25       	eor	r30, r0
    22f6:	e0 64       	ori	r30, 0x40	; 64
    22f8:	0a c0       	rjmp	.+20     	; 0x230e <atan2+0x3a>
    22fa:	ef 63       	ori	r30, 0x3F	; 63
    22fc:	07 f8       	bld	r0, 7
    22fe:	00 94       	com	r0
    2300:	07 fa       	bst	r0, 7
    2302:	db 01       	movw	r26, r22
    2304:	b9 01       	movw	r22, r18
    2306:	9d 01       	movw	r18, r26
    2308:	dc 01       	movw	r26, r24
    230a:	ca 01       	movw	r24, r20
    230c:	ad 01       	movw	r20, r26
    230e:	ef 93       	push	r30
    2310:	45 d0       	rcall	.+138    	; 0x239c <__divsf3_pse>
    2312:	f2 d1       	rcall	.+996    	; 0x26f8 <__fp_round>
    2314:	0a d0       	rcall	.+20     	; 0x232a <atan>
    2316:	5f 91       	pop	r21
    2318:	55 23       	and	r21, r21
    231a:	31 f0       	breq	.+12     	; 0x2328 <atan2+0x54>
    231c:	2b ed       	ldi	r18, 0xDB	; 219
    231e:	3f e0       	ldi	r19, 0x0F	; 15
    2320:	49 e4       	ldi	r20, 0x49	; 73
    2322:	50 fd       	sbrc	r21, 0
    2324:	49 ec       	ldi	r20, 0xC9	; 201
    2326:	63 cf       	rjmp	.-314    	; 0x21ee <__addsf3>
    2328:	08 95       	ret

0000232a <atan>:
    232a:	df 93       	push	r29
    232c:	dd 27       	eor	r29, r29
    232e:	b9 2f       	mov	r27, r25
    2330:	bf 77       	andi	r27, 0x7F	; 127
    2332:	40 e8       	ldi	r20, 0x80	; 128
    2334:	5f e3       	ldi	r21, 0x3F	; 63
    2336:	16 16       	cp	r1, r22
    2338:	17 06       	cpc	r1, r23
    233a:	48 07       	cpc	r20, r24
    233c:	5b 07       	cpc	r21, r27
    233e:	10 f4       	brcc	.+4      	; 0x2344 <atan+0x1a>
    2340:	d9 2f       	mov	r29, r25
    2342:	14 d2       	rcall	.+1064   	; 0x276c <inverse>
    2344:	9f 93       	push	r25
    2346:	8f 93       	push	r24
    2348:	7f 93       	push	r23
    234a:	6f 93       	push	r22
    234c:	bb d2       	rcall	.+1398   	; 0x28c4 <square>
    234e:	e8 eb       	ldi	r30, 0xB8	; 184
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	9f d1       	rcall	.+830    	; 0x2692 <__fp_powser>
    2354:	d1 d1       	rcall	.+930    	; 0x26f8 <__fp_round>
    2356:	2f 91       	pop	r18
    2358:	3f 91       	pop	r19
    235a:	4f 91       	pop	r20
    235c:	5f 91       	pop	r21
    235e:	19 d2       	rcall	.+1074   	; 0x2792 <__mulsf3x>
    2360:	dd 23       	and	r29, r29
    2362:	49 f0       	breq	.+18     	; 0x2376 <atan+0x4c>
    2364:	90 58       	subi	r25, 0x80	; 128
    2366:	a2 ea       	ldi	r26, 0xA2	; 162
    2368:	2a ed       	ldi	r18, 0xDA	; 218
    236a:	3f e0       	ldi	r19, 0x0F	; 15
    236c:	49 ec       	ldi	r20, 0xC9	; 201
    236e:	5f e3       	ldi	r21, 0x3F	; 63
    2370:	d0 78       	andi	r29, 0x80	; 128
    2372:	5d 27       	eor	r21, r29
    2374:	4d df       	rcall	.-358    	; 0x2210 <__addsf3x>
    2376:	df 91       	pop	r29
    2378:	bf c1       	rjmp	.+894    	; 0x26f8 <__fp_round>

0000237a <__cmpsf2>:
    237a:	4e d1       	rcall	.+668    	; 0x2618 <__fp_cmp>
    237c:	08 f4       	brcc	.+2      	; 0x2380 <__cmpsf2+0x6>
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	08 95       	ret
    2382:	b3 d1       	rcall	.+870    	; 0x26ea <__fp_pscB>
    2384:	40 f0       	brcs	.+16     	; 0x2396 <__cmpsf2+0x1c>
    2386:	aa d1       	rcall	.+852    	; 0x26dc <__fp_pscA>
    2388:	30 f0       	brcs	.+12     	; 0x2396 <__cmpsf2+0x1c>
    238a:	21 f4       	brne	.+8      	; 0x2394 <__cmpsf2+0x1a>
    238c:	5f 3f       	cpi	r21, 0xFF	; 255
    238e:	19 f0       	breq	.+6      	; 0x2396 <__cmpsf2+0x1c>
    2390:	67 c1       	rjmp	.+718    	; 0x2660 <__fp_inf>
    2392:	51 11       	cpse	r21, r1
    2394:	e5 c1       	rjmp	.+970    	; 0x2760 <__fp_szero>
    2396:	6a c1       	rjmp	.+724    	; 0x266c <__fp_nan>

00002398 <__divsf3x>:
    2398:	c0 d1       	rcall	.+896    	; 0x271a <__fp_split3>
    239a:	98 f3       	brcs	.-26     	; 0x2382 <__cmpsf2+0x8>

0000239c <__divsf3_pse>:
    239c:	99 23       	and	r25, r25
    239e:	c9 f3       	breq	.-14     	; 0x2392 <__cmpsf2+0x18>
    23a0:	55 23       	and	r21, r21
    23a2:	b1 f3       	breq	.-20     	; 0x2390 <__cmpsf2+0x16>
    23a4:	95 1b       	sub	r25, r21
    23a6:	55 0b       	sbc	r21, r21
    23a8:	bb 27       	eor	r27, r27
    23aa:	aa 27       	eor	r26, r26
    23ac:	62 17       	cp	r22, r18
    23ae:	73 07       	cpc	r23, r19
    23b0:	84 07       	cpc	r24, r20
    23b2:	38 f0       	brcs	.+14     	; 0x23c2 <__divsf3_pse+0x26>
    23b4:	9f 5f       	subi	r25, 0xFF	; 255
    23b6:	5f 4f       	sbci	r21, 0xFF	; 255
    23b8:	22 0f       	add	r18, r18
    23ba:	33 1f       	adc	r19, r19
    23bc:	44 1f       	adc	r20, r20
    23be:	aa 1f       	adc	r26, r26
    23c0:	a9 f3       	breq	.-22     	; 0x23ac <__divsf3_pse+0x10>
    23c2:	33 d0       	rcall	.+102    	; 0x242a <__divsf3_pse+0x8e>
    23c4:	0e 2e       	mov	r0, r30
    23c6:	3a f0       	brmi	.+14     	; 0x23d6 <__divsf3_pse+0x3a>
    23c8:	e0 e8       	ldi	r30, 0x80	; 128
    23ca:	30 d0       	rcall	.+96     	; 0x242c <__divsf3_pse+0x90>
    23cc:	91 50       	subi	r25, 0x01	; 1
    23ce:	50 40       	sbci	r21, 0x00	; 0
    23d0:	e6 95       	lsr	r30
    23d2:	00 1c       	adc	r0, r0
    23d4:	ca f7       	brpl	.-14     	; 0x23c8 <__divsf3_pse+0x2c>
    23d6:	29 d0       	rcall	.+82     	; 0x242a <__divsf3_pse+0x8e>
    23d8:	fe 2f       	mov	r31, r30
    23da:	27 d0       	rcall	.+78     	; 0x242a <__divsf3_pse+0x8e>
    23dc:	66 0f       	add	r22, r22
    23de:	77 1f       	adc	r23, r23
    23e0:	88 1f       	adc	r24, r24
    23e2:	bb 1f       	adc	r27, r27
    23e4:	26 17       	cp	r18, r22
    23e6:	37 07       	cpc	r19, r23
    23e8:	48 07       	cpc	r20, r24
    23ea:	ab 07       	cpc	r26, r27
    23ec:	b0 e8       	ldi	r27, 0x80	; 128
    23ee:	09 f0       	breq	.+2      	; 0x23f2 <__divsf3_pse+0x56>
    23f0:	bb 0b       	sbc	r27, r27
    23f2:	80 2d       	mov	r24, r0
    23f4:	bf 01       	movw	r22, r30
    23f6:	ff 27       	eor	r31, r31
    23f8:	93 58       	subi	r25, 0x83	; 131
    23fa:	5f 4f       	sbci	r21, 0xFF	; 255
    23fc:	2a f0       	brmi	.+10     	; 0x2408 <__divsf3_pse+0x6c>
    23fe:	9e 3f       	cpi	r25, 0xFE	; 254
    2400:	51 05       	cpc	r21, r1
    2402:	68 f0       	brcs	.+26     	; 0x241e <__divsf3_pse+0x82>
    2404:	2d c1       	rjmp	.+602    	; 0x2660 <__fp_inf>
    2406:	ac c1       	rjmp	.+856    	; 0x2760 <__fp_szero>
    2408:	5f 3f       	cpi	r21, 0xFF	; 255
    240a:	ec f3       	brlt	.-6      	; 0x2406 <__divsf3_pse+0x6a>
    240c:	98 3e       	cpi	r25, 0xE8	; 232
    240e:	dc f3       	brlt	.-10     	; 0x2406 <__divsf3_pse+0x6a>
    2410:	86 95       	lsr	r24
    2412:	77 95       	ror	r23
    2414:	67 95       	ror	r22
    2416:	b7 95       	ror	r27
    2418:	f7 95       	ror	r31
    241a:	9f 5f       	subi	r25, 0xFF	; 255
    241c:	c9 f7       	brne	.-14     	; 0x2410 <__divsf3_pse+0x74>
    241e:	88 0f       	add	r24, r24
    2420:	91 1d       	adc	r25, r1
    2422:	96 95       	lsr	r25
    2424:	87 95       	ror	r24
    2426:	97 f9       	bld	r25, 7
    2428:	08 95       	ret
    242a:	e1 e0       	ldi	r30, 0x01	; 1
    242c:	66 0f       	add	r22, r22
    242e:	77 1f       	adc	r23, r23
    2430:	88 1f       	adc	r24, r24
    2432:	bb 1f       	adc	r27, r27
    2434:	62 17       	cp	r22, r18
    2436:	73 07       	cpc	r23, r19
    2438:	84 07       	cpc	r24, r20
    243a:	ba 07       	cpc	r27, r26
    243c:	20 f0       	brcs	.+8      	; 0x2446 <__divsf3_pse+0xaa>
    243e:	62 1b       	sub	r22, r18
    2440:	73 0b       	sbc	r23, r19
    2442:	84 0b       	sbc	r24, r20
    2444:	ba 0b       	sbc	r27, r26
    2446:	ee 1f       	adc	r30, r30
    2448:	88 f7       	brcc	.-30     	; 0x242c <__divsf3_pse+0x90>
    244a:	e0 95       	com	r30
    244c:	08 95       	ret

0000244e <__fixsfdi>:
    244e:	be e3       	ldi	r27, 0x3E	; 62
    2450:	04 d0       	rcall	.+8      	; 0x245a <__fixunssfdi+0x2>
    2452:	08 f4       	brcc	.+2      	; 0x2456 <__fixsfdi+0x8>
    2454:	90 e8       	ldi	r25, 0x80	; 128
    2456:	08 95       	ret

00002458 <__fixunssfdi>:
    2458:	bf e3       	ldi	r27, 0x3F	; 63
    245a:	22 27       	eor	r18, r18
    245c:	33 27       	eor	r19, r19
    245e:	a9 01       	movw	r20, r18
    2460:	64 d1       	rcall	.+712    	; 0x272a <__fp_splitA>
    2462:	58 f1       	brcs	.+86     	; 0x24ba <__fixunssfdi+0x62>
    2464:	9f 57       	subi	r25, 0x7F	; 127
    2466:	40 f1       	brcs	.+80     	; 0x24b8 <__fixunssfdi+0x60>
    2468:	b9 17       	cp	r27, r25
    246a:	38 f1       	brcs	.+78     	; 0x24ba <__fixunssfdi+0x62>
    246c:	bf e3       	ldi	r27, 0x3F	; 63
    246e:	b9 1b       	sub	r27, r25
    2470:	99 27       	eor	r25, r25
    2472:	b8 50       	subi	r27, 0x08	; 8
    2474:	3a f4       	brpl	.+14     	; 0x2484 <__fixunssfdi+0x2c>
    2476:	66 0f       	add	r22, r22
    2478:	77 1f       	adc	r23, r23
    247a:	88 1f       	adc	r24, r24
    247c:	99 1f       	adc	r25, r25
    247e:	b3 95       	inc	r27
    2480:	d2 f3       	brmi	.-12     	; 0x2476 <__fixunssfdi+0x1e>
    2482:	16 c0       	rjmp	.+44     	; 0x24b0 <__fixunssfdi+0x58>
    2484:	b8 50       	subi	r27, 0x08	; 8
    2486:	4a f0       	brmi	.+18     	; 0x249a <__fixunssfdi+0x42>
    2488:	23 2f       	mov	r18, r19
    248a:	34 2f       	mov	r19, r20
    248c:	45 2f       	mov	r20, r21
    248e:	56 2f       	mov	r21, r22
    2490:	67 2f       	mov	r22, r23
    2492:	78 2f       	mov	r23, r24
    2494:	88 27       	eor	r24, r24
    2496:	b8 50       	subi	r27, 0x08	; 8
    2498:	ba f7       	brpl	.-18     	; 0x2488 <__fixunssfdi+0x30>
    249a:	b8 5f       	subi	r27, 0xF8	; 248
    249c:	49 f0       	breq	.+18     	; 0x24b0 <__fixunssfdi+0x58>
    249e:	86 95       	lsr	r24
    24a0:	77 95       	ror	r23
    24a2:	67 95       	ror	r22
    24a4:	57 95       	ror	r21
    24a6:	47 95       	ror	r20
    24a8:	37 95       	ror	r19
    24aa:	27 95       	ror	r18
    24ac:	ba 95       	dec	r27
    24ae:	b9 f7       	brne	.-18     	; 0x249e <__fixunssfdi+0x46>
    24b0:	0e f4       	brtc	.+2      	; 0x24b4 <__fixunssfdi+0x5c>
    24b2:	df d0       	rcall	.+446    	; 0x2672 <__fp_negdi>
    24b4:	88 94       	clc
    24b6:	08 95       	ret
    24b8:	88 94       	clc
    24ba:	60 e0       	ldi	r22, 0x00	; 0
    24bc:	70 e0       	ldi	r23, 0x00	; 0
    24be:	cb 01       	movw	r24, r22
    24c0:	08 95       	ret

000024c2 <__fixunssfsi>:
    24c2:	33 d1       	rcall	.+614    	; 0x272a <__fp_splitA>
    24c4:	88 f0       	brcs	.+34     	; 0x24e8 <__fixunssfsi+0x26>
    24c6:	9f 57       	subi	r25, 0x7F	; 127
    24c8:	90 f0       	brcs	.+36     	; 0x24ee <__fixunssfsi+0x2c>
    24ca:	b9 2f       	mov	r27, r25
    24cc:	99 27       	eor	r25, r25
    24ce:	b7 51       	subi	r27, 0x17	; 23
    24d0:	a0 f0       	brcs	.+40     	; 0x24fa <__fixunssfsi+0x38>
    24d2:	d1 f0       	breq	.+52     	; 0x2508 <__fixunssfsi+0x46>
    24d4:	66 0f       	add	r22, r22
    24d6:	77 1f       	adc	r23, r23
    24d8:	88 1f       	adc	r24, r24
    24da:	99 1f       	adc	r25, r25
    24dc:	1a f0       	brmi	.+6      	; 0x24e4 <__fixunssfsi+0x22>
    24de:	ba 95       	dec	r27
    24e0:	c9 f7       	brne	.-14     	; 0x24d4 <__fixunssfsi+0x12>
    24e2:	12 c0       	rjmp	.+36     	; 0x2508 <__fixunssfsi+0x46>
    24e4:	b1 30       	cpi	r27, 0x01	; 1
    24e6:	81 f0       	breq	.+32     	; 0x2508 <__fixunssfsi+0x46>
    24e8:	3a d1       	rcall	.+628    	; 0x275e <__fp_zero>
    24ea:	b1 e0       	ldi	r27, 0x01	; 1
    24ec:	08 95       	ret
    24ee:	37 c1       	rjmp	.+622    	; 0x275e <__fp_zero>
    24f0:	67 2f       	mov	r22, r23
    24f2:	78 2f       	mov	r23, r24
    24f4:	88 27       	eor	r24, r24
    24f6:	b8 5f       	subi	r27, 0xF8	; 248
    24f8:	39 f0       	breq	.+14     	; 0x2508 <__fixunssfsi+0x46>
    24fa:	b9 3f       	cpi	r27, 0xF9	; 249
    24fc:	cc f3       	brlt	.-14     	; 0x24f0 <__fixunssfsi+0x2e>
    24fe:	86 95       	lsr	r24
    2500:	77 95       	ror	r23
    2502:	67 95       	ror	r22
    2504:	b3 95       	inc	r27
    2506:	d9 f7       	brne	.-10     	; 0x24fe <__fixunssfsi+0x3c>
    2508:	3e f4       	brtc	.+14     	; 0x2518 <__fixunssfsi+0x56>
    250a:	90 95       	com	r25
    250c:	80 95       	com	r24
    250e:	70 95       	com	r23
    2510:	61 95       	neg	r22
    2512:	7f 4f       	sbci	r23, 0xFF	; 255
    2514:	8f 4f       	sbci	r24, 0xFF	; 255
    2516:	9f 4f       	sbci	r25, 0xFF	; 255
    2518:	08 95       	ret

0000251a <__floatdisf>:
    251a:	97 fb       	bst	r25, 7
    251c:	0e f4       	brtc	.+2      	; 0x2520 <__floatdisf+0x6>
    251e:	a9 d0       	rcall	.+338    	; 0x2672 <__fp_negdi>
    2520:	3e c0       	rjmp	.+124    	; 0x259e <__fp_di2sf>

00002522 <__floatunsisf>:
    2522:	e8 94       	clt
    2524:	09 c0       	rjmp	.+18     	; 0x2538 <__floatsisf+0x12>

00002526 <__floatsisf>:
    2526:	97 fb       	bst	r25, 7
    2528:	3e f4       	brtc	.+14     	; 0x2538 <__floatsisf+0x12>
    252a:	90 95       	com	r25
    252c:	80 95       	com	r24
    252e:	70 95       	com	r23
    2530:	61 95       	neg	r22
    2532:	7f 4f       	sbci	r23, 0xFF	; 255
    2534:	8f 4f       	sbci	r24, 0xFF	; 255
    2536:	9f 4f       	sbci	r25, 0xFF	; 255
    2538:	99 23       	and	r25, r25
    253a:	a9 f0       	breq	.+42     	; 0x2566 <__floatsisf+0x40>
    253c:	f9 2f       	mov	r31, r25
    253e:	96 e9       	ldi	r25, 0x96	; 150
    2540:	bb 27       	eor	r27, r27
    2542:	93 95       	inc	r25
    2544:	f6 95       	lsr	r31
    2546:	87 95       	ror	r24
    2548:	77 95       	ror	r23
    254a:	67 95       	ror	r22
    254c:	b7 95       	ror	r27
    254e:	f1 11       	cpse	r31, r1
    2550:	f8 cf       	rjmp	.-16     	; 0x2542 <__floatsisf+0x1c>
    2552:	fa f4       	brpl	.+62     	; 0x2592 <__floatsisf+0x6c>
    2554:	bb 0f       	add	r27, r27
    2556:	11 f4       	brne	.+4      	; 0x255c <__floatsisf+0x36>
    2558:	60 ff       	sbrs	r22, 0
    255a:	1b c0       	rjmp	.+54     	; 0x2592 <__floatsisf+0x6c>
    255c:	6f 5f       	subi	r22, 0xFF	; 255
    255e:	7f 4f       	sbci	r23, 0xFF	; 255
    2560:	8f 4f       	sbci	r24, 0xFF	; 255
    2562:	9f 4f       	sbci	r25, 0xFF	; 255
    2564:	16 c0       	rjmp	.+44     	; 0x2592 <__floatsisf+0x6c>
    2566:	88 23       	and	r24, r24
    2568:	11 f0       	breq	.+4      	; 0x256e <__floatsisf+0x48>
    256a:	96 e9       	ldi	r25, 0x96	; 150
    256c:	11 c0       	rjmp	.+34     	; 0x2590 <__floatsisf+0x6a>
    256e:	77 23       	and	r23, r23
    2570:	21 f0       	breq	.+8      	; 0x257a <__floatsisf+0x54>
    2572:	9e e8       	ldi	r25, 0x8E	; 142
    2574:	87 2f       	mov	r24, r23
    2576:	76 2f       	mov	r23, r22
    2578:	05 c0       	rjmp	.+10     	; 0x2584 <__floatsisf+0x5e>
    257a:	66 23       	and	r22, r22
    257c:	71 f0       	breq	.+28     	; 0x259a <__floatsisf+0x74>
    257e:	96 e8       	ldi	r25, 0x86	; 134
    2580:	86 2f       	mov	r24, r22
    2582:	70 e0       	ldi	r23, 0x00	; 0
    2584:	60 e0       	ldi	r22, 0x00	; 0
    2586:	2a f0       	brmi	.+10     	; 0x2592 <__floatsisf+0x6c>
    2588:	9a 95       	dec	r25
    258a:	66 0f       	add	r22, r22
    258c:	77 1f       	adc	r23, r23
    258e:	88 1f       	adc	r24, r24
    2590:	da f7       	brpl	.-10     	; 0x2588 <__floatsisf+0x62>
    2592:	88 0f       	add	r24, r24
    2594:	96 95       	lsr	r25
    2596:	87 95       	ror	r24
    2598:	97 f9       	bld	r25, 7
    259a:	08 95       	ret

0000259c <__floatundisf>:
    259c:	e8 94       	clt

0000259e <__fp_di2sf>:
    259e:	f9 2f       	mov	r31, r25
    25a0:	96 eb       	ldi	r25, 0xB6	; 182
    25a2:	ff 23       	and	r31, r31
    25a4:	81 f0       	breq	.+32     	; 0x25c6 <__fp_di2sf+0x28>
    25a6:	12 16       	cp	r1, r18
    25a8:	13 06       	cpc	r1, r19
    25aa:	14 06       	cpc	r1, r20
    25ac:	44 0b       	sbc	r20, r20
    25ae:	93 95       	inc	r25
    25b0:	f6 95       	lsr	r31
    25b2:	87 95       	ror	r24
    25b4:	77 95       	ror	r23
    25b6:	67 95       	ror	r22
    25b8:	57 95       	ror	r21
    25ba:	40 40       	sbci	r20, 0x00	; 0
    25bc:	ff 23       	and	r31, r31
    25be:	b9 f7       	brne	.-18     	; 0x25ae <__fp_di2sf+0x10>
    25c0:	1b c0       	rjmp	.+54     	; 0x25f8 <__fp_di2sf+0x5a>
    25c2:	99 27       	eor	r25, r25
    25c4:	08 95       	ret
    25c6:	88 23       	and	r24, r24
    25c8:	51 f4       	brne	.+20     	; 0x25de <__fp_di2sf+0x40>
    25ca:	98 50       	subi	r25, 0x08	; 8
    25cc:	d2 f7       	brpl	.-12     	; 0x25c2 <__fp_di2sf+0x24>
    25ce:	87 2b       	or	r24, r23
    25d0:	76 2f       	mov	r23, r22
    25d2:	65 2f       	mov	r22, r21
    25d4:	54 2f       	mov	r21, r20
    25d6:	43 2f       	mov	r20, r19
    25d8:	32 2f       	mov	r19, r18
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	b1 f3       	breq	.-20     	; 0x25ca <__fp_di2sf+0x2c>
    25de:	12 16       	cp	r1, r18
    25e0:	13 06       	cpc	r1, r19
    25e2:	14 06       	cpc	r1, r20
    25e4:	44 0b       	sbc	r20, r20
    25e6:	88 23       	and	r24, r24
    25e8:	3a f0       	brmi	.+14     	; 0x25f8 <__fp_di2sf+0x5a>
    25ea:	9a 95       	dec	r25
    25ec:	44 0f       	add	r20, r20
    25ee:	55 1f       	adc	r21, r21
    25f0:	66 1f       	adc	r22, r22
    25f2:	77 1f       	adc	r23, r23
    25f4:	88 1f       	adc	r24, r24
    25f6:	ca f7       	brpl	.-14     	; 0x25ea <__fp_di2sf+0x4c>
    25f8:	55 23       	and	r21, r21
    25fa:	4a f4       	brpl	.+18     	; 0x260e <__fp_di2sf+0x70>
    25fc:	44 0f       	add	r20, r20
    25fe:	55 1f       	adc	r21, r21
    2600:	11 f4       	brne	.+4      	; 0x2606 <__fp_di2sf+0x68>
    2602:	60 ff       	sbrs	r22, 0
    2604:	04 c0       	rjmp	.+8      	; 0x260e <__fp_di2sf+0x70>
    2606:	6f 5f       	subi	r22, 0xFF	; 255
    2608:	7f 4f       	sbci	r23, 0xFF	; 255
    260a:	8f 4f       	sbci	r24, 0xFF	; 255
    260c:	9f 4f       	sbci	r25, 0xFF	; 255
    260e:	88 0f       	add	r24, r24
    2610:	96 95       	lsr	r25
    2612:	87 95       	ror	r24
    2614:	97 f9       	bld	r25, 7
    2616:	08 95       	ret

00002618 <__fp_cmp>:
    2618:	99 0f       	add	r25, r25
    261a:	00 08       	sbc	r0, r0
    261c:	55 0f       	add	r21, r21
    261e:	aa 0b       	sbc	r26, r26
    2620:	e0 e8       	ldi	r30, 0x80	; 128
    2622:	fe ef       	ldi	r31, 0xFE	; 254
    2624:	16 16       	cp	r1, r22
    2626:	17 06       	cpc	r1, r23
    2628:	e8 07       	cpc	r30, r24
    262a:	f9 07       	cpc	r31, r25
    262c:	c0 f0       	brcs	.+48     	; 0x265e <__fp_cmp+0x46>
    262e:	12 16       	cp	r1, r18
    2630:	13 06       	cpc	r1, r19
    2632:	e4 07       	cpc	r30, r20
    2634:	f5 07       	cpc	r31, r21
    2636:	98 f0       	brcs	.+38     	; 0x265e <__fp_cmp+0x46>
    2638:	62 1b       	sub	r22, r18
    263a:	73 0b       	sbc	r23, r19
    263c:	84 0b       	sbc	r24, r20
    263e:	95 0b       	sbc	r25, r21
    2640:	39 f4       	brne	.+14     	; 0x2650 <__fp_cmp+0x38>
    2642:	0a 26       	eor	r0, r26
    2644:	61 f0       	breq	.+24     	; 0x265e <__fp_cmp+0x46>
    2646:	23 2b       	or	r18, r19
    2648:	24 2b       	or	r18, r20
    264a:	25 2b       	or	r18, r21
    264c:	21 f4       	brne	.+8      	; 0x2656 <__fp_cmp+0x3e>
    264e:	08 95       	ret
    2650:	0a 26       	eor	r0, r26
    2652:	09 f4       	brne	.+2      	; 0x2656 <__fp_cmp+0x3e>
    2654:	a1 40       	sbci	r26, 0x01	; 1
    2656:	a6 95       	lsr	r26
    2658:	8f ef       	ldi	r24, 0xFF	; 255
    265a:	81 1d       	adc	r24, r1
    265c:	81 1d       	adc	r24, r1
    265e:	08 95       	ret

00002660 <__fp_inf>:
    2660:	97 f9       	bld	r25, 7
    2662:	9f 67       	ori	r25, 0x7F	; 127
    2664:	80 e8       	ldi	r24, 0x80	; 128
    2666:	70 e0       	ldi	r23, 0x00	; 0
    2668:	60 e0       	ldi	r22, 0x00	; 0
    266a:	08 95       	ret

0000266c <__fp_nan>:
    266c:	9f ef       	ldi	r25, 0xFF	; 255
    266e:	80 ec       	ldi	r24, 0xC0	; 192
    2670:	08 95       	ret

00002672 <__fp_negdi>:
    2672:	90 95       	com	r25
    2674:	80 95       	com	r24
    2676:	70 95       	com	r23
    2678:	60 95       	com	r22
    267a:	50 95       	com	r21
    267c:	40 95       	com	r20
    267e:	30 95       	com	r19
    2680:	21 95       	neg	r18
    2682:	3f 4f       	sbci	r19, 0xFF	; 255
    2684:	4f 4f       	sbci	r20, 0xFF	; 255
    2686:	5f 4f       	sbci	r21, 0xFF	; 255
    2688:	6f 4f       	sbci	r22, 0xFF	; 255
    268a:	7f 4f       	sbci	r23, 0xFF	; 255
    268c:	8f 4f       	sbci	r24, 0xFF	; 255
    268e:	9f 4f       	sbci	r25, 0xFF	; 255
    2690:	08 95       	ret

00002692 <__fp_powser>:
    2692:	df 93       	push	r29
    2694:	cf 93       	push	r28
    2696:	1f 93       	push	r17
    2698:	0f 93       	push	r16
    269a:	ff 92       	push	r15
    269c:	ef 92       	push	r14
    269e:	df 92       	push	r13
    26a0:	7b 01       	movw	r14, r22
    26a2:	8c 01       	movw	r16, r24
    26a4:	68 94       	set
    26a6:	05 c0       	rjmp	.+10     	; 0x26b2 <__fp_powser+0x20>
    26a8:	da 2e       	mov	r13, r26
    26aa:	ef 01       	movw	r28, r30
    26ac:	72 d0       	rcall	.+228    	; 0x2792 <__mulsf3x>
    26ae:	fe 01       	movw	r30, r28
    26b0:	e8 94       	clt
    26b2:	a5 91       	lpm	r26, Z+
    26b4:	25 91       	lpm	r18, Z+
    26b6:	35 91       	lpm	r19, Z+
    26b8:	45 91       	lpm	r20, Z+
    26ba:	55 91       	lpm	r21, Z+
    26bc:	ae f3       	brts	.-22     	; 0x26a8 <__fp_powser+0x16>
    26be:	ef 01       	movw	r28, r30
    26c0:	a7 dd       	rcall	.-1202   	; 0x2210 <__addsf3x>
    26c2:	fe 01       	movw	r30, r28
    26c4:	97 01       	movw	r18, r14
    26c6:	a8 01       	movw	r20, r16
    26c8:	da 94       	dec	r13
    26ca:	79 f7       	brne	.-34     	; 0x26aa <__fp_powser+0x18>
    26cc:	df 90       	pop	r13
    26ce:	ef 90       	pop	r14
    26d0:	ff 90       	pop	r15
    26d2:	0f 91       	pop	r16
    26d4:	1f 91       	pop	r17
    26d6:	cf 91       	pop	r28
    26d8:	df 91       	pop	r29
    26da:	08 95       	ret

000026dc <__fp_pscA>:
    26dc:	00 24       	eor	r0, r0
    26de:	0a 94       	dec	r0
    26e0:	16 16       	cp	r1, r22
    26e2:	17 06       	cpc	r1, r23
    26e4:	18 06       	cpc	r1, r24
    26e6:	09 06       	cpc	r0, r25
    26e8:	08 95       	ret

000026ea <__fp_pscB>:
    26ea:	00 24       	eor	r0, r0
    26ec:	0a 94       	dec	r0
    26ee:	12 16       	cp	r1, r18
    26f0:	13 06       	cpc	r1, r19
    26f2:	14 06       	cpc	r1, r20
    26f4:	05 06       	cpc	r0, r21
    26f6:	08 95       	ret

000026f8 <__fp_round>:
    26f8:	09 2e       	mov	r0, r25
    26fa:	03 94       	inc	r0
    26fc:	00 0c       	add	r0, r0
    26fe:	11 f4       	brne	.+4      	; 0x2704 <__fp_round+0xc>
    2700:	88 23       	and	r24, r24
    2702:	52 f0       	brmi	.+20     	; 0x2718 <__fp_round+0x20>
    2704:	bb 0f       	add	r27, r27
    2706:	40 f4       	brcc	.+16     	; 0x2718 <__fp_round+0x20>
    2708:	bf 2b       	or	r27, r31
    270a:	11 f4       	brne	.+4      	; 0x2710 <__fp_round+0x18>
    270c:	60 ff       	sbrs	r22, 0
    270e:	04 c0       	rjmp	.+8      	; 0x2718 <__fp_round+0x20>
    2710:	6f 5f       	subi	r22, 0xFF	; 255
    2712:	7f 4f       	sbci	r23, 0xFF	; 255
    2714:	8f 4f       	sbci	r24, 0xFF	; 255
    2716:	9f 4f       	sbci	r25, 0xFF	; 255
    2718:	08 95       	ret

0000271a <__fp_split3>:
    271a:	57 fd       	sbrc	r21, 7
    271c:	90 58       	subi	r25, 0x80	; 128
    271e:	44 0f       	add	r20, r20
    2720:	55 1f       	adc	r21, r21
    2722:	59 f0       	breq	.+22     	; 0x273a <__fp_splitA+0x10>
    2724:	5f 3f       	cpi	r21, 0xFF	; 255
    2726:	71 f0       	breq	.+28     	; 0x2744 <__fp_splitA+0x1a>
    2728:	47 95       	ror	r20

0000272a <__fp_splitA>:
    272a:	88 0f       	add	r24, r24
    272c:	97 fb       	bst	r25, 7
    272e:	99 1f       	adc	r25, r25
    2730:	61 f0       	breq	.+24     	; 0x274a <__fp_splitA+0x20>
    2732:	9f 3f       	cpi	r25, 0xFF	; 255
    2734:	79 f0       	breq	.+30     	; 0x2754 <__fp_splitA+0x2a>
    2736:	87 95       	ror	r24
    2738:	08 95       	ret
    273a:	12 16       	cp	r1, r18
    273c:	13 06       	cpc	r1, r19
    273e:	14 06       	cpc	r1, r20
    2740:	55 1f       	adc	r21, r21
    2742:	f2 cf       	rjmp	.-28     	; 0x2728 <__fp_split3+0xe>
    2744:	46 95       	lsr	r20
    2746:	f1 df       	rcall	.-30     	; 0x272a <__fp_splitA>
    2748:	08 c0       	rjmp	.+16     	; 0x275a <__fp_splitA+0x30>
    274a:	16 16       	cp	r1, r22
    274c:	17 06       	cpc	r1, r23
    274e:	18 06       	cpc	r1, r24
    2750:	99 1f       	adc	r25, r25
    2752:	f1 cf       	rjmp	.-30     	; 0x2736 <__fp_splitA+0xc>
    2754:	86 95       	lsr	r24
    2756:	71 05       	cpc	r23, r1
    2758:	61 05       	cpc	r22, r1
    275a:	08 94       	sec
    275c:	08 95       	ret

0000275e <__fp_zero>:
    275e:	e8 94       	clt

00002760 <__fp_szero>:
    2760:	bb 27       	eor	r27, r27
    2762:	66 27       	eor	r22, r22
    2764:	77 27       	eor	r23, r23
    2766:	cb 01       	movw	r24, r22
    2768:	97 f9       	bld	r25, 7
    276a:	08 95       	ret

0000276c <inverse>:
    276c:	9b 01       	movw	r18, r22
    276e:	ac 01       	movw	r20, r24
    2770:	60 e0       	ldi	r22, 0x00	; 0
    2772:	70 e0       	ldi	r23, 0x00	; 0
    2774:	80 e8       	ldi	r24, 0x80	; 128
    2776:	9f e3       	ldi	r25, 0x3F	; 63
    2778:	a8 c0       	rjmp	.+336    	; 0x28ca <__divsf3>

0000277a <__mulsf3>:
    277a:	0b d0       	rcall	.+22     	; 0x2792 <__mulsf3x>
    277c:	bd cf       	rjmp	.-134    	; 0x26f8 <__fp_round>
    277e:	ae df       	rcall	.-164    	; 0x26dc <__fp_pscA>
    2780:	28 f0       	brcs	.+10     	; 0x278c <__mulsf3+0x12>
    2782:	b3 df       	rcall	.-154    	; 0x26ea <__fp_pscB>
    2784:	18 f0       	brcs	.+6      	; 0x278c <__mulsf3+0x12>
    2786:	95 23       	and	r25, r21
    2788:	09 f0       	breq	.+2      	; 0x278c <__mulsf3+0x12>
    278a:	6a cf       	rjmp	.-300    	; 0x2660 <__fp_inf>
    278c:	6f cf       	rjmp	.-290    	; 0x266c <__fp_nan>
    278e:	11 24       	eor	r1, r1
    2790:	e7 cf       	rjmp	.-50     	; 0x2760 <__fp_szero>

00002792 <__mulsf3x>:
    2792:	c3 df       	rcall	.-122    	; 0x271a <__fp_split3>
    2794:	a0 f3       	brcs	.-24     	; 0x277e <__mulsf3+0x4>

00002796 <__mulsf3_pse>:
    2796:	95 9f       	mul	r25, r21
    2798:	d1 f3       	breq	.-12     	; 0x278e <__mulsf3+0x14>
    279a:	95 0f       	add	r25, r21
    279c:	50 e0       	ldi	r21, 0x00	; 0
    279e:	55 1f       	adc	r21, r21
    27a0:	62 9f       	mul	r22, r18
    27a2:	f0 01       	movw	r30, r0
    27a4:	72 9f       	mul	r23, r18
    27a6:	bb 27       	eor	r27, r27
    27a8:	f0 0d       	add	r31, r0
    27aa:	b1 1d       	adc	r27, r1
    27ac:	63 9f       	mul	r22, r19
    27ae:	aa 27       	eor	r26, r26
    27b0:	f0 0d       	add	r31, r0
    27b2:	b1 1d       	adc	r27, r1
    27b4:	aa 1f       	adc	r26, r26
    27b6:	64 9f       	mul	r22, r20
    27b8:	66 27       	eor	r22, r22
    27ba:	b0 0d       	add	r27, r0
    27bc:	a1 1d       	adc	r26, r1
    27be:	66 1f       	adc	r22, r22
    27c0:	82 9f       	mul	r24, r18
    27c2:	22 27       	eor	r18, r18
    27c4:	b0 0d       	add	r27, r0
    27c6:	a1 1d       	adc	r26, r1
    27c8:	62 1f       	adc	r22, r18
    27ca:	73 9f       	mul	r23, r19
    27cc:	b0 0d       	add	r27, r0
    27ce:	a1 1d       	adc	r26, r1
    27d0:	62 1f       	adc	r22, r18
    27d2:	83 9f       	mul	r24, r19
    27d4:	a0 0d       	add	r26, r0
    27d6:	61 1d       	adc	r22, r1
    27d8:	22 1f       	adc	r18, r18
    27da:	74 9f       	mul	r23, r20
    27dc:	33 27       	eor	r19, r19
    27de:	a0 0d       	add	r26, r0
    27e0:	61 1d       	adc	r22, r1
    27e2:	23 1f       	adc	r18, r19
    27e4:	84 9f       	mul	r24, r20
    27e6:	60 0d       	add	r22, r0
    27e8:	21 1d       	adc	r18, r1
    27ea:	82 2f       	mov	r24, r18
    27ec:	76 2f       	mov	r23, r22
    27ee:	6a 2f       	mov	r22, r26
    27f0:	11 24       	eor	r1, r1
    27f2:	9f 57       	subi	r25, 0x7F	; 127
    27f4:	50 40       	sbci	r21, 0x00	; 0
    27f6:	8a f0       	brmi	.+34     	; 0x281a <__mulsf3_pse+0x84>
    27f8:	e1 f0       	breq	.+56     	; 0x2832 <__mulsf3_pse+0x9c>
    27fa:	88 23       	and	r24, r24
    27fc:	4a f0       	brmi	.+18     	; 0x2810 <__mulsf3_pse+0x7a>
    27fe:	ee 0f       	add	r30, r30
    2800:	ff 1f       	adc	r31, r31
    2802:	bb 1f       	adc	r27, r27
    2804:	66 1f       	adc	r22, r22
    2806:	77 1f       	adc	r23, r23
    2808:	88 1f       	adc	r24, r24
    280a:	91 50       	subi	r25, 0x01	; 1
    280c:	50 40       	sbci	r21, 0x00	; 0
    280e:	a9 f7       	brne	.-22     	; 0x27fa <__mulsf3_pse+0x64>
    2810:	9e 3f       	cpi	r25, 0xFE	; 254
    2812:	51 05       	cpc	r21, r1
    2814:	70 f0       	brcs	.+28     	; 0x2832 <__mulsf3_pse+0x9c>
    2816:	24 cf       	rjmp	.-440    	; 0x2660 <__fp_inf>
    2818:	a3 cf       	rjmp	.-186    	; 0x2760 <__fp_szero>
    281a:	5f 3f       	cpi	r21, 0xFF	; 255
    281c:	ec f3       	brlt	.-6      	; 0x2818 <__mulsf3_pse+0x82>
    281e:	98 3e       	cpi	r25, 0xE8	; 232
    2820:	dc f3       	brlt	.-10     	; 0x2818 <__mulsf3_pse+0x82>
    2822:	86 95       	lsr	r24
    2824:	77 95       	ror	r23
    2826:	67 95       	ror	r22
    2828:	b7 95       	ror	r27
    282a:	f7 95       	ror	r31
    282c:	e7 95       	ror	r30
    282e:	9f 5f       	subi	r25, 0xFF	; 255
    2830:	c1 f7       	brne	.-16     	; 0x2822 <__mulsf3_pse+0x8c>
    2832:	fe 2b       	or	r31, r30
    2834:	88 0f       	add	r24, r24
    2836:	91 1d       	adc	r25, r1
    2838:	96 95       	lsr	r25
    283a:	87 95       	ror	r24
    283c:	97 f9       	bld	r25, 7
    283e:	08 95       	ret
    2840:	11 f4       	brne	.+4      	; 0x2846 <__mulsf3_pse+0xb0>
    2842:	0e f4       	brtc	.+2      	; 0x2846 <__mulsf3_pse+0xb0>
    2844:	13 cf       	rjmp	.-474    	; 0x266c <__fp_nan>
    2846:	43 c0       	rjmp	.+134    	; 0x28ce <__fp_mpack>

00002848 <sqrt>:
    2848:	70 df       	rcall	.-288    	; 0x272a <__fp_splitA>
    284a:	d0 f3       	brcs	.-12     	; 0x2840 <__mulsf3_pse+0xaa>
    284c:	99 23       	and	r25, r25
    284e:	d9 f3       	breq	.-10     	; 0x2846 <__mulsf3_pse+0xb0>
    2850:	ce f3       	brts	.-14     	; 0x2844 <__mulsf3_pse+0xae>
    2852:	9f 57       	subi	r25, 0x7F	; 127
    2854:	55 0b       	sbc	r21, r21
    2856:	87 ff       	sbrs	r24, 7
    2858:	48 d0       	rcall	.+144    	; 0x28ea <__fp_norm2>
    285a:	00 24       	eor	r0, r0
    285c:	a0 e6       	ldi	r26, 0x60	; 96
    285e:	40 ea       	ldi	r20, 0xA0	; 160
    2860:	90 01       	movw	r18, r0
    2862:	80 58       	subi	r24, 0x80	; 128
    2864:	56 95       	lsr	r21
    2866:	97 95       	ror	r25
    2868:	28 f4       	brcc	.+10     	; 0x2874 <sqrt+0x2c>
    286a:	80 5c       	subi	r24, 0xC0	; 192
    286c:	66 0f       	add	r22, r22
    286e:	77 1f       	adc	r23, r23
    2870:	88 1f       	adc	r24, r24
    2872:	20 f0       	brcs	.+8      	; 0x287c <sqrt+0x34>
    2874:	26 17       	cp	r18, r22
    2876:	37 07       	cpc	r19, r23
    2878:	48 07       	cpc	r20, r24
    287a:	30 f4       	brcc	.+12     	; 0x2888 <sqrt+0x40>
    287c:	62 1b       	sub	r22, r18
    287e:	73 0b       	sbc	r23, r19
    2880:	84 0b       	sbc	r24, r20
    2882:	20 29       	or	r18, r0
    2884:	31 29       	or	r19, r1
    2886:	4a 2b       	or	r20, r26
    2888:	a6 95       	lsr	r26
    288a:	17 94       	ror	r1
    288c:	07 94       	ror	r0
    288e:	20 25       	eor	r18, r0
    2890:	31 25       	eor	r19, r1
    2892:	4a 27       	eor	r20, r26
    2894:	58 f7       	brcc	.-42     	; 0x286c <sqrt+0x24>
    2896:	66 0f       	add	r22, r22
    2898:	77 1f       	adc	r23, r23
    289a:	88 1f       	adc	r24, r24
    289c:	20 f0       	brcs	.+8      	; 0x28a6 <sqrt+0x5e>
    289e:	26 17       	cp	r18, r22
    28a0:	37 07       	cpc	r19, r23
    28a2:	48 07       	cpc	r20, r24
    28a4:	30 f4       	brcc	.+12     	; 0x28b2 <sqrt+0x6a>
    28a6:	62 0b       	sbc	r22, r18
    28a8:	73 0b       	sbc	r23, r19
    28aa:	84 0b       	sbc	r24, r20
    28ac:	20 0d       	add	r18, r0
    28ae:	31 1d       	adc	r19, r1
    28b0:	41 1d       	adc	r20, r1
    28b2:	a0 95       	com	r26
    28b4:	81 f7       	brne	.-32     	; 0x2896 <sqrt+0x4e>
    28b6:	b9 01       	movw	r22, r18
    28b8:	84 2f       	mov	r24, r20
    28ba:	91 58       	subi	r25, 0x81	; 129
    28bc:	88 0f       	add	r24, r24
    28be:	96 95       	lsr	r25
    28c0:	87 95       	ror	r24
    28c2:	08 95       	ret

000028c4 <square>:
    28c4:	9b 01       	movw	r18, r22
    28c6:	ac 01       	movw	r20, r24
    28c8:	58 cf       	rjmp	.-336    	; 0x277a <__mulsf3>

000028ca <__divsf3>:
    28ca:	66 dd       	rcall	.-1332   	; 0x2398 <__divsf3x>
    28cc:	15 cf       	rjmp	.-470    	; 0x26f8 <__fp_round>

000028ce <__fp_mpack>:
    28ce:	9f 3f       	cpi	r25, 0xFF	; 255
    28d0:	31 f0       	breq	.+12     	; 0x28de <__fp_mpack_finite+0xc>

000028d2 <__fp_mpack_finite>:
    28d2:	91 50       	subi	r25, 0x01	; 1
    28d4:	20 f4       	brcc	.+8      	; 0x28de <__fp_mpack_finite+0xc>
    28d6:	87 95       	ror	r24
    28d8:	77 95       	ror	r23
    28da:	67 95       	ror	r22
    28dc:	b7 95       	ror	r27
    28de:	88 0f       	add	r24, r24
    28e0:	91 1d       	adc	r25, r1
    28e2:	96 95       	lsr	r25
    28e4:	87 95       	ror	r24
    28e6:	97 f9       	bld	r25, 7
    28e8:	08 95       	ret

000028ea <__fp_norm2>:
    28ea:	91 50       	subi	r25, 0x01	; 1
    28ec:	50 40       	sbci	r21, 0x00	; 0
    28ee:	66 0f       	add	r22, r22
    28f0:	77 1f       	adc	r23, r23
    28f2:	88 1f       	adc	r24, r24
    28f4:	d2 f7       	brpl	.-12     	; 0x28ea <__fp_norm2>
    28f6:	08 95       	ret

000028f8 <__tablejump2__>:
    28f8:	ee 0f       	add	r30, r30
    28fa:	ff 1f       	adc	r31, r31

000028fc <__tablejump__>:
    28fc:	05 90       	lpm	r0, Z+
    28fe:	f4 91       	lpm	r31, Z
    2900:	e0 2d       	mov	r30, r0
    2902:	09 94       	ijmp

00002904 <__moddi3>:
    2904:	68 94       	set
    2906:	01 c0       	rjmp	.+2      	; 0x290a <__divdi3_moddi3>

00002908 <__divdi3>:
    2908:	e8 94       	clt

0000290a <__divdi3_moddi3>:
    290a:	f9 2f       	mov	r31, r25
    290c:	f1 2b       	or	r31, r17
    290e:	0a f0       	brmi	.+2      	; 0x2912 <__divdi3_moddi3+0x8>
    2910:	27 c0       	rjmp	.+78     	; 0x2960 <__udivdi3_umoddi3>
    2912:	a0 e0       	ldi	r26, 0x00	; 0
    2914:	b0 e0       	ldi	r27, 0x00	; 0
    2916:	ee e8       	ldi	r30, 0x8E	; 142
    2918:	f4 e1       	ldi	r31, 0x14	; 20
    291a:	93 c0       	rjmp	.+294    	; 0x2a42 <__prologue_saves__+0xc>
    291c:	09 2e       	mov	r0, r25
    291e:	05 94       	asr	r0
    2920:	1a f4       	brpl	.+6      	; 0x2928 <__divdi3_moddi3+0x1e>
    2922:	79 d0       	rcall	.+242    	; 0x2a16 <__negdi2>
    2924:	11 23       	and	r17, r17
    2926:	92 f4       	brpl	.+36     	; 0x294c <__divdi3_moddi3+0x42>
    2928:	f0 e8       	ldi	r31, 0x80	; 128
    292a:	0f 26       	eor	r0, r31
    292c:	ff ef       	ldi	r31, 0xFF	; 255
    292e:	e0 94       	com	r14
    2930:	f0 94       	com	r15
    2932:	00 95       	com	r16
    2934:	10 95       	com	r17
    2936:	b0 94       	com	r11
    2938:	c0 94       	com	r12
    293a:	d0 94       	com	r13
    293c:	a1 94       	neg	r10
    293e:	bf 0a       	sbc	r11, r31
    2940:	cf 0a       	sbc	r12, r31
    2942:	df 0a       	sbc	r13, r31
    2944:	ef 0a       	sbc	r14, r31
    2946:	ff 0a       	sbc	r15, r31
    2948:	0f 0b       	sbc	r16, r31
    294a:	1f 0b       	sbc	r17, r31
    294c:	13 d0       	rcall	.+38     	; 0x2974 <__udivmod64>
    294e:	07 fc       	sbrc	r0, 7
    2950:	62 d0       	rcall	.+196    	; 0x2a16 <__negdi2>
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
    2956:	ec e0       	ldi	r30, 0x0C	; 12
    2958:	90 c0       	rjmp	.+288    	; 0x2a7a <__epilogue_restores__+0xc>

0000295a <__umoddi3>:
    295a:	68 94       	set
    295c:	01 c0       	rjmp	.+2      	; 0x2960 <__udivdi3_umoddi3>

0000295e <__udivdi3>:
    295e:	e8 94       	clt

00002960 <__udivdi3_umoddi3>:
    2960:	8f 92       	push	r8
    2962:	9f 92       	push	r9
    2964:	cf 93       	push	r28
    2966:	df 93       	push	r29
    2968:	05 d0       	rcall	.+10     	; 0x2974 <__udivmod64>
    296a:	df 91       	pop	r29
    296c:	cf 91       	pop	r28
    296e:	9f 90       	pop	r9
    2970:	8f 90       	pop	r8
    2972:	08 95       	ret

00002974 <__udivmod64>:
    2974:	88 24       	eor	r8, r8
    2976:	99 24       	eor	r9, r9
    2978:	f4 01       	movw	r30, r8
    297a:	e4 01       	movw	r28, r8
    297c:	b0 e4       	ldi	r27, 0x40	; 64
    297e:	9f 93       	push	r25
    2980:	aa 27       	eor	r26, r26
    2982:	9a 15       	cp	r25, r10
    2984:	8b 04       	cpc	r8, r11
    2986:	9c 04       	cpc	r9, r12
    2988:	ed 05       	cpc	r30, r13
    298a:	fe 05       	cpc	r31, r14
    298c:	cf 05       	cpc	r28, r15
    298e:	d0 07       	cpc	r29, r16
    2990:	a1 07       	cpc	r26, r17
    2992:	98 f4       	brcc	.+38     	; 0x29ba <__udivmod64+0x46>
    2994:	ad 2f       	mov	r26, r29
    2996:	dc 2f       	mov	r29, r28
    2998:	cf 2f       	mov	r28, r31
    299a:	fe 2f       	mov	r31, r30
    299c:	e9 2d       	mov	r30, r9
    299e:	98 2c       	mov	r9, r8
    29a0:	89 2e       	mov	r8, r25
    29a2:	98 2f       	mov	r25, r24
    29a4:	87 2f       	mov	r24, r23
    29a6:	76 2f       	mov	r23, r22
    29a8:	65 2f       	mov	r22, r21
    29aa:	54 2f       	mov	r21, r20
    29ac:	43 2f       	mov	r20, r19
    29ae:	32 2f       	mov	r19, r18
    29b0:	22 27       	eor	r18, r18
    29b2:	b8 50       	subi	r27, 0x08	; 8
    29b4:	31 f7       	brne	.-52     	; 0x2982 <__udivmod64+0xe>
    29b6:	bf 91       	pop	r27
    29b8:	27 c0       	rjmp	.+78     	; 0x2a08 <__udivmod64+0x94>
    29ba:	1b 2e       	mov	r1, r27
    29bc:	bf 91       	pop	r27
    29be:	bb 27       	eor	r27, r27
    29c0:	22 0f       	add	r18, r18
    29c2:	33 1f       	adc	r19, r19
    29c4:	44 1f       	adc	r20, r20
    29c6:	55 1f       	adc	r21, r21
    29c8:	66 1f       	adc	r22, r22
    29ca:	77 1f       	adc	r23, r23
    29cc:	88 1f       	adc	r24, r24
    29ce:	99 1f       	adc	r25, r25
    29d0:	88 1c       	adc	r8, r8
    29d2:	99 1c       	adc	r9, r9
    29d4:	ee 1f       	adc	r30, r30
    29d6:	ff 1f       	adc	r31, r31
    29d8:	cc 1f       	adc	r28, r28
    29da:	dd 1f       	adc	r29, r29
    29dc:	aa 1f       	adc	r26, r26
    29de:	bb 1f       	adc	r27, r27
    29e0:	8a 14       	cp	r8, r10
    29e2:	9b 04       	cpc	r9, r11
    29e4:	ec 05       	cpc	r30, r12
    29e6:	fd 05       	cpc	r31, r13
    29e8:	ce 05       	cpc	r28, r14
    29ea:	df 05       	cpc	r29, r15
    29ec:	a0 07       	cpc	r26, r16
    29ee:	b1 07       	cpc	r27, r17
    29f0:	48 f0       	brcs	.+18     	; 0x2a04 <__udivmod64+0x90>
    29f2:	8a 18       	sub	r8, r10
    29f4:	9b 08       	sbc	r9, r11
    29f6:	ec 09       	sbc	r30, r12
    29f8:	fd 09       	sbc	r31, r13
    29fa:	ce 09       	sbc	r28, r14
    29fc:	df 09       	sbc	r29, r15
    29fe:	a0 0b       	sbc	r26, r16
    2a00:	b1 0b       	sbc	r27, r17
    2a02:	21 60       	ori	r18, 0x01	; 1
    2a04:	1a 94       	dec	r1
    2a06:	e1 f6       	brne	.-72     	; 0x29c0 <__udivmod64+0x4c>
    2a08:	2e f4       	brtc	.+10     	; 0x2a14 <__udivmod64+0xa0>
    2a0a:	94 01       	movw	r18, r8
    2a0c:	af 01       	movw	r20, r30
    2a0e:	be 01       	movw	r22, r28
    2a10:	cd 01       	movw	r24, r26
    2a12:	00 0c       	add	r0, r0
    2a14:	08 95       	ret

00002a16 <__negdi2>:
    2a16:	60 95       	com	r22
    2a18:	70 95       	com	r23
    2a1a:	80 95       	com	r24
    2a1c:	90 95       	com	r25
    2a1e:	30 95       	com	r19
    2a20:	40 95       	com	r20
    2a22:	50 95       	com	r21
    2a24:	21 95       	neg	r18
    2a26:	3f 4f       	sbci	r19, 0xFF	; 255
    2a28:	4f 4f       	sbci	r20, 0xFF	; 255
    2a2a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a2c:	6f 4f       	sbci	r22, 0xFF	; 255
    2a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a30:	8f 4f       	sbci	r24, 0xFF	; 255
    2a32:	9f 4f       	sbci	r25, 0xFF	; 255
    2a34:	08 95       	ret

00002a36 <__prologue_saves__>:
    2a36:	2f 92       	push	r2
    2a38:	3f 92       	push	r3
    2a3a:	4f 92       	push	r4
    2a3c:	5f 92       	push	r5
    2a3e:	6f 92       	push	r6
    2a40:	7f 92       	push	r7
    2a42:	8f 92       	push	r8
    2a44:	9f 92       	push	r9
    2a46:	af 92       	push	r10
    2a48:	bf 92       	push	r11
    2a4a:	cf 92       	push	r12
    2a4c:	df 92       	push	r13
    2a4e:	ef 92       	push	r14
    2a50:	ff 92       	push	r15
    2a52:	0f 93       	push	r16
    2a54:	1f 93       	push	r17
    2a56:	cf 93       	push	r28
    2a58:	df 93       	push	r29
    2a5a:	cd b7       	in	r28, 0x3d	; 61
    2a5c:	de b7       	in	r29, 0x3e	; 62
    2a5e:	ca 1b       	sub	r28, r26
    2a60:	db 0b       	sbc	r29, r27
    2a62:	0f b6       	in	r0, 0x3f	; 63
    2a64:	f8 94       	cli
    2a66:	de bf       	out	0x3e, r29	; 62
    2a68:	0f be       	out	0x3f, r0	; 63
    2a6a:	cd bf       	out	0x3d, r28	; 61
    2a6c:	09 94       	ijmp

00002a6e <__epilogue_restores__>:
    2a6e:	2a 88       	ldd	r2, Y+18	; 0x12
    2a70:	39 88       	ldd	r3, Y+17	; 0x11
    2a72:	48 88       	ldd	r4, Y+16	; 0x10
    2a74:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a76:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a78:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a7a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a7c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a7e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a80:	b9 84       	ldd	r11, Y+9	; 0x09
    2a82:	c8 84       	ldd	r12, Y+8	; 0x08
    2a84:	df 80       	ldd	r13, Y+7	; 0x07
    2a86:	ee 80       	ldd	r14, Y+6	; 0x06
    2a88:	fd 80       	ldd	r15, Y+5	; 0x05
    2a8a:	0c 81       	ldd	r16, Y+4	; 0x04
    2a8c:	1b 81       	ldd	r17, Y+3	; 0x03
    2a8e:	aa 81       	ldd	r26, Y+2	; 0x02
    2a90:	b9 81       	ldd	r27, Y+1	; 0x01
    2a92:	ce 0f       	add	r28, r30
    2a94:	d1 1d       	adc	r29, r1
    2a96:	0f b6       	in	r0, 0x3f	; 63
    2a98:	f8 94       	cli
    2a9a:	de bf       	out	0x3e, r29	; 62
    2a9c:	0f be       	out	0x3f, r0	; 63
    2a9e:	cd bf       	out	0x3d, r28	; 61
    2aa0:	ed 01       	movw	r28, r26
    2aa2:	08 95       	ret

00002aa4 <__ashrdi3>:
    2aa4:	97 fb       	bst	r25, 7
    2aa6:	10 f8       	bld	r1, 0

00002aa8 <__lshrdi3>:
    2aa8:	16 94       	lsr	r1
    2aaa:	00 08       	sbc	r0, r0
    2aac:	0f 93       	push	r16
    2aae:	08 30       	cpi	r16, 0x08	; 8
    2ab0:	98 f0       	brcs	.+38     	; 0x2ad8 <__lshrdi3+0x30>
    2ab2:	08 50       	subi	r16, 0x08	; 8
    2ab4:	23 2f       	mov	r18, r19
    2ab6:	34 2f       	mov	r19, r20
    2ab8:	45 2f       	mov	r20, r21
    2aba:	56 2f       	mov	r21, r22
    2abc:	67 2f       	mov	r22, r23
    2abe:	78 2f       	mov	r23, r24
    2ac0:	89 2f       	mov	r24, r25
    2ac2:	90 2d       	mov	r25, r0
    2ac4:	f4 cf       	rjmp	.-24     	; 0x2aae <__lshrdi3+0x6>
    2ac6:	05 94       	asr	r0
    2ac8:	97 95       	ror	r25
    2aca:	87 95       	ror	r24
    2acc:	77 95       	ror	r23
    2ace:	67 95       	ror	r22
    2ad0:	57 95       	ror	r21
    2ad2:	47 95       	ror	r20
    2ad4:	37 95       	ror	r19
    2ad6:	27 95       	ror	r18
    2ad8:	0a 95       	dec	r16
    2ada:	aa f7       	brpl	.-22     	; 0x2ac6 <__lshrdi3+0x1e>
    2adc:	0f 91       	pop	r16
    2ade:	08 95       	ret

00002ae0 <__cmpdi2_s8>:
    2ae0:	00 24       	eor	r0, r0
    2ae2:	a7 fd       	sbrc	r26, 7
    2ae4:	00 94       	com	r0
    2ae6:	2a 17       	cp	r18, r26
    2ae8:	30 05       	cpc	r19, r0
    2aea:	40 05       	cpc	r20, r0
    2aec:	50 05       	cpc	r21, r0
    2aee:	60 05       	cpc	r22, r0
    2af0:	70 05       	cpc	r23, r0
    2af2:	80 05       	cpc	r24, r0
    2af4:	90 05       	cpc	r25, r0
    2af6:	08 95       	ret

00002af8 <malloc>:
    2af8:	cf 93       	push	r28
    2afa:	df 93       	push	r29
    2afc:	82 30       	cpi	r24, 0x02	; 2
    2afe:	91 05       	cpc	r25, r1
    2b00:	10 f4       	brcc	.+4      	; 0x2b06 <malloc+0xe>
    2b02:	82 e0       	ldi	r24, 0x02	; 2
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	e0 91 f6 0a 	lds	r30, 0x0AF6
    2b0a:	f0 91 f7 0a 	lds	r31, 0x0AF7
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	a0 e0       	ldi	r26, 0x00	; 0
    2b14:	b0 e0       	ldi	r27, 0x00	; 0
    2b16:	30 97       	sbiw	r30, 0x00	; 0
    2b18:	39 f1       	breq	.+78     	; 0x2b68 <malloc+0x70>
    2b1a:	40 81       	ld	r20, Z
    2b1c:	51 81       	ldd	r21, Z+1	; 0x01
    2b1e:	48 17       	cp	r20, r24
    2b20:	59 07       	cpc	r21, r25
    2b22:	b8 f0       	brcs	.+46     	; 0x2b52 <malloc+0x5a>
    2b24:	48 17       	cp	r20, r24
    2b26:	59 07       	cpc	r21, r25
    2b28:	71 f4       	brne	.+28     	; 0x2b46 <malloc+0x4e>
    2b2a:	82 81       	ldd	r24, Z+2	; 0x02
    2b2c:	93 81       	ldd	r25, Z+3	; 0x03
    2b2e:	10 97       	sbiw	r26, 0x00	; 0
    2b30:	29 f0       	breq	.+10     	; 0x2b3c <malloc+0x44>
    2b32:	13 96       	adiw	r26, 0x03	; 3
    2b34:	9c 93       	st	X, r25
    2b36:	8e 93       	st	-X, r24
    2b38:	12 97       	sbiw	r26, 0x02	; 2
    2b3a:	2c c0       	rjmp	.+88     	; 0x2b94 <malloc+0x9c>
    2b3c:	90 93 f7 0a 	sts	0x0AF7, r25
    2b40:	80 93 f6 0a 	sts	0x0AF6, r24
    2b44:	27 c0       	rjmp	.+78     	; 0x2b94 <malloc+0x9c>
    2b46:	21 15       	cp	r18, r1
    2b48:	31 05       	cpc	r19, r1
    2b4a:	31 f0       	breq	.+12     	; 0x2b58 <malloc+0x60>
    2b4c:	42 17       	cp	r20, r18
    2b4e:	53 07       	cpc	r21, r19
    2b50:	18 f0       	brcs	.+6      	; 0x2b58 <malloc+0x60>
    2b52:	a9 01       	movw	r20, r18
    2b54:	db 01       	movw	r26, r22
    2b56:	01 c0       	rjmp	.+2      	; 0x2b5a <malloc+0x62>
    2b58:	ef 01       	movw	r28, r30
    2b5a:	9a 01       	movw	r18, r20
    2b5c:	bd 01       	movw	r22, r26
    2b5e:	df 01       	movw	r26, r30
    2b60:	02 80       	ldd	r0, Z+2	; 0x02
    2b62:	f3 81       	ldd	r31, Z+3	; 0x03
    2b64:	e0 2d       	mov	r30, r0
    2b66:	d7 cf       	rjmp	.-82     	; 0x2b16 <malloc+0x1e>
    2b68:	21 15       	cp	r18, r1
    2b6a:	31 05       	cpc	r19, r1
    2b6c:	f9 f0       	breq	.+62     	; 0x2bac <malloc+0xb4>
    2b6e:	28 1b       	sub	r18, r24
    2b70:	39 0b       	sbc	r19, r25
    2b72:	24 30       	cpi	r18, 0x04	; 4
    2b74:	31 05       	cpc	r19, r1
    2b76:	80 f4       	brcc	.+32     	; 0x2b98 <malloc+0xa0>
    2b78:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b7c:	61 15       	cp	r22, r1
    2b7e:	71 05       	cpc	r23, r1
    2b80:	21 f0       	breq	.+8      	; 0x2b8a <malloc+0x92>
    2b82:	fb 01       	movw	r30, r22
    2b84:	93 83       	std	Z+3, r25	; 0x03
    2b86:	82 83       	std	Z+2, r24	; 0x02
    2b88:	04 c0       	rjmp	.+8      	; 0x2b92 <malloc+0x9a>
    2b8a:	90 93 f7 0a 	sts	0x0AF7, r25
    2b8e:	80 93 f6 0a 	sts	0x0AF6, r24
    2b92:	fe 01       	movw	r30, r28
    2b94:	32 96       	adiw	r30, 0x02	; 2
    2b96:	44 c0       	rjmp	.+136    	; 0x2c20 <malloc+0x128>
    2b98:	fe 01       	movw	r30, r28
    2b9a:	e2 0f       	add	r30, r18
    2b9c:	f3 1f       	adc	r31, r19
    2b9e:	81 93       	st	Z+, r24
    2ba0:	91 93       	st	Z+, r25
    2ba2:	22 50       	subi	r18, 0x02	; 2
    2ba4:	31 09       	sbc	r19, r1
    2ba6:	39 83       	std	Y+1, r19	; 0x01
    2ba8:	28 83       	st	Y, r18
    2baa:	3a c0       	rjmp	.+116    	; 0x2c20 <malloc+0x128>
    2bac:	20 91 f4 0a 	lds	r18, 0x0AF4
    2bb0:	30 91 f5 0a 	lds	r19, 0x0AF5
    2bb4:	23 2b       	or	r18, r19
    2bb6:	41 f4       	brne	.+16     	; 0x2bc8 <malloc+0xd0>
    2bb8:	20 91 02 01 	lds	r18, 0x0102
    2bbc:	30 91 03 01 	lds	r19, 0x0103
    2bc0:	30 93 f5 0a 	sts	0x0AF5, r19
    2bc4:	20 93 f4 0a 	sts	0x0AF4, r18
    2bc8:	20 91 00 01 	lds	r18, 0x0100
    2bcc:	30 91 01 01 	lds	r19, 0x0101
    2bd0:	21 15       	cp	r18, r1
    2bd2:	31 05       	cpc	r19, r1
    2bd4:	41 f4       	brne	.+16     	; 0x2be6 <malloc+0xee>
    2bd6:	2d b7       	in	r18, 0x3d	; 61
    2bd8:	3e b7       	in	r19, 0x3e	; 62
    2bda:	40 91 04 01 	lds	r20, 0x0104
    2bde:	50 91 05 01 	lds	r21, 0x0105
    2be2:	24 1b       	sub	r18, r20
    2be4:	35 0b       	sbc	r19, r21
    2be6:	e0 91 f4 0a 	lds	r30, 0x0AF4
    2bea:	f0 91 f5 0a 	lds	r31, 0x0AF5
    2bee:	e2 17       	cp	r30, r18
    2bf0:	f3 07       	cpc	r31, r19
    2bf2:	a0 f4       	brcc	.+40     	; 0x2c1c <malloc+0x124>
    2bf4:	2e 1b       	sub	r18, r30
    2bf6:	3f 0b       	sbc	r19, r31
    2bf8:	28 17       	cp	r18, r24
    2bfa:	39 07       	cpc	r19, r25
    2bfc:	78 f0       	brcs	.+30     	; 0x2c1c <malloc+0x124>
    2bfe:	ac 01       	movw	r20, r24
    2c00:	4e 5f       	subi	r20, 0xFE	; 254
    2c02:	5f 4f       	sbci	r21, 0xFF	; 255
    2c04:	24 17       	cp	r18, r20
    2c06:	35 07       	cpc	r19, r21
    2c08:	48 f0       	brcs	.+18     	; 0x2c1c <malloc+0x124>
    2c0a:	4e 0f       	add	r20, r30
    2c0c:	5f 1f       	adc	r21, r31
    2c0e:	50 93 f5 0a 	sts	0x0AF5, r21
    2c12:	40 93 f4 0a 	sts	0x0AF4, r20
    2c16:	81 93       	st	Z+, r24
    2c18:	91 93       	st	Z+, r25
    2c1a:	02 c0       	rjmp	.+4      	; 0x2c20 <malloc+0x128>
    2c1c:	e0 e0       	ldi	r30, 0x00	; 0
    2c1e:	f0 e0       	ldi	r31, 0x00	; 0
    2c20:	cf 01       	movw	r24, r30
    2c22:	df 91       	pop	r29
    2c24:	cf 91       	pop	r28
    2c26:	08 95       	ret

00002c28 <free>:
    2c28:	cf 93       	push	r28
    2c2a:	df 93       	push	r29
    2c2c:	00 97       	sbiw	r24, 0x00	; 0
    2c2e:	09 f4       	brne	.+2      	; 0x2c32 <free+0xa>
    2c30:	87 c0       	rjmp	.+270    	; 0x2d40 <free+0x118>
    2c32:	fc 01       	movw	r30, r24
    2c34:	32 97       	sbiw	r30, 0x02	; 2
    2c36:	13 82       	std	Z+3, r1	; 0x03
    2c38:	12 82       	std	Z+2, r1	; 0x02
    2c3a:	c0 91 f6 0a 	lds	r28, 0x0AF6
    2c3e:	d0 91 f7 0a 	lds	r29, 0x0AF7
    2c42:	20 97       	sbiw	r28, 0x00	; 0
    2c44:	81 f4       	brne	.+32     	; 0x2c66 <free+0x3e>
    2c46:	20 81       	ld	r18, Z
    2c48:	31 81       	ldd	r19, Z+1	; 0x01
    2c4a:	28 0f       	add	r18, r24
    2c4c:	39 1f       	adc	r19, r25
    2c4e:	80 91 f4 0a 	lds	r24, 0x0AF4
    2c52:	90 91 f5 0a 	lds	r25, 0x0AF5
    2c56:	82 17       	cp	r24, r18
    2c58:	93 07       	cpc	r25, r19
    2c5a:	79 f5       	brne	.+94     	; 0x2cba <free+0x92>
    2c5c:	f0 93 f5 0a 	sts	0x0AF5, r31
    2c60:	e0 93 f4 0a 	sts	0x0AF4, r30
    2c64:	6d c0       	rjmp	.+218    	; 0x2d40 <free+0x118>
    2c66:	de 01       	movw	r26, r28
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	ae 17       	cp	r26, r30
    2c6e:	bf 07       	cpc	r27, r31
    2c70:	50 f4       	brcc	.+20     	; 0x2c86 <free+0x5e>
    2c72:	12 96       	adiw	r26, 0x02	; 2
    2c74:	4d 91       	ld	r20, X+
    2c76:	5c 91       	ld	r21, X
    2c78:	13 97       	sbiw	r26, 0x03	; 3
    2c7a:	9d 01       	movw	r18, r26
    2c7c:	41 15       	cp	r20, r1
    2c7e:	51 05       	cpc	r21, r1
    2c80:	09 f1       	breq	.+66     	; 0x2cc4 <free+0x9c>
    2c82:	da 01       	movw	r26, r20
    2c84:	f3 cf       	rjmp	.-26     	; 0x2c6c <free+0x44>
    2c86:	b3 83       	std	Z+3, r27	; 0x03
    2c88:	a2 83       	std	Z+2, r26	; 0x02
    2c8a:	40 81       	ld	r20, Z
    2c8c:	51 81       	ldd	r21, Z+1	; 0x01
    2c8e:	84 0f       	add	r24, r20
    2c90:	95 1f       	adc	r25, r21
    2c92:	8a 17       	cp	r24, r26
    2c94:	9b 07       	cpc	r25, r27
    2c96:	71 f4       	brne	.+28     	; 0x2cb4 <free+0x8c>
    2c98:	8d 91       	ld	r24, X+
    2c9a:	9c 91       	ld	r25, X
    2c9c:	11 97       	sbiw	r26, 0x01	; 1
    2c9e:	84 0f       	add	r24, r20
    2ca0:	95 1f       	adc	r25, r21
    2ca2:	02 96       	adiw	r24, 0x02	; 2
    2ca4:	91 83       	std	Z+1, r25	; 0x01
    2ca6:	80 83       	st	Z, r24
    2ca8:	12 96       	adiw	r26, 0x02	; 2
    2caa:	8d 91       	ld	r24, X+
    2cac:	9c 91       	ld	r25, X
    2cae:	13 97       	sbiw	r26, 0x03	; 3
    2cb0:	93 83       	std	Z+3, r25	; 0x03
    2cb2:	82 83       	std	Z+2, r24	; 0x02
    2cb4:	21 15       	cp	r18, r1
    2cb6:	31 05       	cpc	r19, r1
    2cb8:	29 f4       	brne	.+10     	; 0x2cc4 <free+0x9c>
    2cba:	f0 93 f7 0a 	sts	0x0AF7, r31
    2cbe:	e0 93 f6 0a 	sts	0x0AF6, r30
    2cc2:	3e c0       	rjmp	.+124    	; 0x2d40 <free+0x118>
    2cc4:	d9 01       	movw	r26, r18
    2cc6:	13 96       	adiw	r26, 0x03	; 3
    2cc8:	fc 93       	st	X, r31
    2cca:	ee 93       	st	-X, r30
    2ccc:	12 97       	sbiw	r26, 0x02	; 2
    2cce:	4d 91       	ld	r20, X+
    2cd0:	5d 91       	ld	r21, X+
    2cd2:	a4 0f       	add	r26, r20
    2cd4:	b5 1f       	adc	r27, r21
    2cd6:	ea 17       	cp	r30, r26
    2cd8:	fb 07       	cpc	r31, r27
    2cda:	79 f4       	brne	.+30     	; 0x2cfa <free+0xd2>
    2cdc:	80 81       	ld	r24, Z
    2cde:	91 81       	ldd	r25, Z+1	; 0x01
    2ce0:	84 0f       	add	r24, r20
    2ce2:	95 1f       	adc	r25, r21
    2ce4:	02 96       	adiw	r24, 0x02	; 2
    2ce6:	d9 01       	movw	r26, r18
    2ce8:	11 96       	adiw	r26, 0x01	; 1
    2cea:	9c 93       	st	X, r25
    2cec:	8e 93       	st	-X, r24
    2cee:	82 81       	ldd	r24, Z+2	; 0x02
    2cf0:	93 81       	ldd	r25, Z+3	; 0x03
    2cf2:	13 96       	adiw	r26, 0x03	; 3
    2cf4:	9c 93       	st	X, r25
    2cf6:	8e 93       	st	-X, r24
    2cf8:	12 97       	sbiw	r26, 0x02	; 2
    2cfa:	e0 e0       	ldi	r30, 0x00	; 0
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2d00:	9b 81       	ldd	r25, Y+3	; 0x03
    2d02:	00 97       	sbiw	r24, 0x00	; 0
    2d04:	19 f0       	breq	.+6      	; 0x2d0c <free+0xe4>
    2d06:	fe 01       	movw	r30, r28
    2d08:	ec 01       	movw	r28, r24
    2d0a:	f9 cf       	rjmp	.-14     	; 0x2cfe <free+0xd6>
    2d0c:	ce 01       	movw	r24, r28
    2d0e:	02 96       	adiw	r24, 0x02	; 2
    2d10:	28 81       	ld	r18, Y
    2d12:	39 81       	ldd	r19, Y+1	; 0x01
    2d14:	82 0f       	add	r24, r18
    2d16:	93 1f       	adc	r25, r19
    2d18:	20 91 f4 0a 	lds	r18, 0x0AF4
    2d1c:	30 91 f5 0a 	lds	r19, 0x0AF5
    2d20:	28 17       	cp	r18, r24
    2d22:	39 07       	cpc	r19, r25
    2d24:	69 f4       	brne	.+26     	; 0x2d40 <free+0x118>
    2d26:	30 97       	sbiw	r30, 0x00	; 0
    2d28:	29 f4       	brne	.+10     	; 0x2d34 <free+0x10c>
    2d2a:	10 92 f7 0a 	sts	0x0AF7, r1
    2d2e:	10 92 f6 0a 	sts	0x0AF6, r1
    2d32:	02 c0       	rjmp	.+4      	; 0x2d38 <free+0x110>
    2d34:	13 82       	std	Z+3, r1	; 0x03
    2d36:	12 82       	std	Z+2, r1	; 0x02
    2d38:	d0 93 f5 0a 	sts	0x0AF5, r29
    2d3c:	c0 93 f4 0a 	sts	0x0AF4, r28
    2d40:	df 91       	pop	r29
    2d42:	cf 91       	pop	r28
    2d44:	08 95       	ret

00002d46 <memcpy>:
    2d46:	fb 01       	movw	r30, r22
    2d48:	dc 01       	movw	r26, r24
    2d4a:	02 c0       	rjmp	.+4      	; 0x2d50 <memcpy+0xa>
    2d4c:	01 90       	ld	r0, Z+
    2d4e:	0d 92       	st	X+, r0
    2d50:	41 50       	subi	r20, 0x01	; 1
    2d52:	50 40       	sbci	r21, 0x00	; 0
    2d54:	d8 f7       	brcc	.-10     	; 0x2d4c <memcpy+0x6>
    2d56:	08 95       	ret

00002d58 <_exit>:
    2d58:	f8 94       	cli

00002d5a <__stop_program>:
    2d5a:	ff cf       	rjmp	.-2      	; 0x2d5a <__stop_program>
