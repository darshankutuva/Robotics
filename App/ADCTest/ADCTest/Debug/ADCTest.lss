
ADCTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  000014b6  0000154a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800138  00800138  00001582  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001582  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  000015b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000178c  00000000  00000000  000016f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a9  00000000  00000000  00002e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000df8  00000000  00000000  00003527  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005d0  00000000  00000000  00004320  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009d1  00000000  00000000  000048f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001ce6  00000000  00000000  000052c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  00006fa7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5b c0       	rjmp	.+182    	; 0xb8 <__ctors_end>
       2:	00 00       	nop
       4:	77 c0       	rjmp	.+238    	; 0xf4 <__bad_interrupt>
       6:	00 00       	nop
       8:	75 c0       	rjmp	.+234    	; 0xf4 <__bad_interrupt>
       a:	00 00       	nop
       c:	73 c0       	rjmp	.+230    	; 0xf4 <__bad_interrupt>
       e:	00 00       	nop
      10:	71 c0       	rjmp	.+226    	; 0xf4 <__bad_interrupt>
      12:	00 00       	nop
      14:	6f c0       	rjmp	.+222    	; 0xf4 <__bad_interrupt>
      16:	00 00       	nop
      18:	6d c0       	rjmp	.+218    	; 0xf4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6b c0       	rjmp	.+214    	; 0xf4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	69 c0       	rjmp	.+210    	; 0xf4 <__bad_interrupt>
      22:	00 00       	nop
      24:	67 c0       	rjmp	.+206    	; 0xf4 <__bad_interrupt>
      26:	00 00       	nop
      28:	65 c0       	rjmp	.+202    	; 0xf4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	63 c0       	rjmp	.+198    	; 0xf4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	61 c0       	rjmp	.+194    	; 0xf4 <__bad_interrupt>
      32:	00 00       	nop
      34:	5f c0       	rjmp	.+190    	; 0xf4 <__bad_interrupt>
      36:	00 00       	nop
      38:	5d c0       	rjmp	.+186    	; 0xf4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5b c0       	rjmp	.+182    	; 0xf4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 82 08 	jmp	0x1104	; 0x1104 <__vector_16>
      44:	57 c0       	rjmp	.+174    	; 0xf4 <__bad_interrupt>
      46:	00 00       	nop
      48:	55 c0       	rjmp	.+170    	; 0xf4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	53 c0       	rjmp	.+166    	; 0xf4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 91 08 	jmp	0x1122	; 0x1122 <__vector_20>
      54:	4f c0       	rjmp	.+158    	; 0xf4 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__vector_22>
      5c:	4b c0       	rjmp	.+150    	; 0xf4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	49 c0       	rjmp	.+146    	; 0xf4 <__bad_interrupt>
      62:	00 00       	nop
      64:	47 c0       	rjmp	.+142    	; 0xf4 <__bad_interrupt>
      66:	00 00       	nop
      68:	45 c0       	rjmp	.+138    	; 0xf4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	43 c0       	rjmp	.+134    	; 0xf4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__vector_28>
      74:	3f c0       	rjmp	.+126    	; 0xf4 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 27 09 	jmp	0x124e	; 0x124e <__vector_30>
      7c:	3b c0       	rjmp	.+118    	; 0xf4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	39 c0       	rjmp	.+114    	; 0xf4 <__bad_interrupt>
      82:	00 00       	nop
      84:	37 c0       	rjmp	.+110    	; 0xf4 <__bad_interrupt>
      86:	00 00       	nop
      88:	35 c0       	rjmp	.+106    	; 0xf4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6d 04       	cpc	r6, r13
      8e:	7f 04       	cpc	r7, r15
      90:	56 05       	cpc	r21, r6
      92:	42 05       	cpc	r20, r2
      94:	56 05       	cpc	r21, r6
      96:	56 05       	cpc	r21, r6
      98:	56 05       	cpc	r21, r6
      9a:	56 05       	cpc	r21, r6
      9c:	56 05       	cpc	r21, r6
      9e:	35 05       	cpc	r19, r5
      a0:	56 05       	cpc	r21, r6
      a2:	56 05       	cpc	r21, r6
      a4:	56 05       	cpc	r21, r6
      a6:	56 05       	cpc	r21, r6
      a8:	56 05       	cpc	r21, r6
      aa:	56 05       	cpc	r21, r6
      ac:	3a 05       	cpc	r19, r10
      ae:	56 05       	cpc	r21, r6
      b0:	c1 04       	cpc	r12, r1
      b2:	56 05       	cpc	r21, r6
      b4:	56 05       	cpc	r21, r6
      b6:	fd 04       	cpc	r15, r13

000000b8 <__ctors_end>:
      b8:	11 24       	eor	r1, r1
      ba:	1f be       	out	0x3f, r1	; 63
      bc:	cf ef       	ldi	r28, 0xFF	; 255
      be:	d0 e4       	ldi	r29, 0x40	; 64
      c0:	de bf       	out	0x3e, r29	; 62
      c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
      c4:	11 e0       	ldi	r17, 0x01	; 1
      c6:	a0 e0       	ldi	r26, 0x00	; 0
      c8:	b1 e0       	ldi	r27, 0x01	; 1
      ca:	e6 eb       	ldi	r30, 0xB6	; 182
      cc:	f4 e1       	ldi	r31, 0x14	; 20
      ce:	00 e0       	ldi	r16, 0x00	; 0
      d0:	0b bf       	out	0x3b, r16	; 59
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x14>
      d4:	07 90       	elpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	a8 33       	cpi	r26, 0x38	; 56
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0x10>

000000de <__do_clear_bss>:
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	a8 e3       	ldi	r26, 0x38	; 56
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	af 34       	cpi	r26, 0x4F	; 79
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>
      ee:	03 d0       	rcall	.+6      	; 0xf6 <main>
      f0:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <_exit>

000000f4 <__bad_interrupt>:
      f4:	85 cf       	rjmp	.-246    	; 0x0 <__vectors>

000000f6 <main>:
#include "ADC.h"

#include "Trace.h"

int main(void)
{
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
      fa:	cd b7       	in	r28, 0x3d	; 61
      fc:	de b7       	in	r29, 0x3e	; 62
      fe:	2a 97       	sbiw	r28, 0x0a	; 10
     100:	0f b6       	in	r0, 0x3f	; 63
     102:	f8 94       	cli
     104:	de bf       	out	0x3e, r29	; 62
     106:	0f be       	out	0x3f, r0	; 63
     108:	cd bf       	out	0x3d, r28	; 61
	
	//
	// Initialize Tracing
	//
	
	InitTrace(F_CPU, ERROR_LEVEL | INFO_LEVEL);
     10a:	45 e0       	ldi	r20, 0x05	; 5
     10c:	60 e0       	ldi	r22, 0x00	; 0
     10e:	72 e1       	ldi	r23, 0x12	; 18
     110:	8a e7       	ldi	r24, 0x7A	; 122
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	a5 d0       	rcall	.+330    	; 0x260 <InitTrace>
	
	AdcParams.Flags.IsLeftAdjustResult = 0;
     116:	89 81       	ldd	r24, Y+1	; 0x01
     118:	8e 7f       	andi	r24, 0xFE	; 254
     11a:	89 83       	std	Y+1, r24	; 0x01
	
	AdcParams.RefVoltSelect = AREF_VOLT;
     11c:	1a 82       	std	Y+2, r1	; 0x02
	
	AdcParams.Prescalar = DIV_FACTOR_0;
     11e:	1b 82       	std	Y+3, r1	; 0x03
	
	AdcParams.EnabledChannelsBitVector = (0x1 << ADC_CHANNEL_0) | (0x1 << ADC_CHANNEL_1) | (0x1 << ADC_CHANNEL_2);
     120:	87 e0       	ldi	r24, 0x07	; 7
     122:	8c 83       	std	Y+4, r24	; 0x04
	
	InitADC(&AdcParams);
     124:	ce 01       	movw	r24, r28
     126:	01 96       	adiw	r24, 0x01	; 1
     128:	3f d0       	rcall	.+126    	; 0x1a8 <InitADC>
		
		ADCRead(ADC_CHANNEL_2, &YValue);
		
		ADCRead(ADC_CHANNEL_2, &YValue);
		
		SendTrace(INFO_LEVEL, "ADC P = %d, X = %d, Y = %d\r\n", Value, XValue, YValue);
     12a:	00 e0       	ldi	r16, 0x00	; 0
     12c:	11 e0       	ldi	r17, 0x01	; 1
     12e:	68 94       	set
     130:	ff 24       	eor	r15, r15
     132:	f2 f8       	bld	r15, 2
	
	InitADC(&AdcParams);
	
	while (1)
	{
		Value = 0;
     134:	1e 82       	std	Y+6, r1	; 0x06
     136:	1d 82       	std	Y+5, r1	; 0x05
		
		XValue = 0;
     138:	18 86       	std	Y+8, r1	; 0x08
     13a:	1f 82       	std	Y+7, r1	; 0x07
		
		YValue = 0;
     13c:	1a 86       	std	Y+10, r1	; 0x0a
     13e:	19 86       	std	Y+9, r1	; 0x09
		
		ADCRead(ADC_CHANNEL_0, &Value);
     140:	be 01       	movw	r22, r28
     142:	6b 5f       	subi	r22, 0xFB	; 251
     144:	7f 4f       	sbci	r23, 0xFF	; 255
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	4c d0       	rcall	.+152    	; 0x1e2 <ADCRead>
		
		ADCRead(ADC_CHANNEL_0, &Value);
     14a:	be 01       	movw	r22, r28
     14c:	6b 5f       	subi	r22, 0xFB	; 251
     14e:	7f 4f       	sbci	r23, 0xFF	; 255
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	47 d0       	rcall	.+142    	; 0x1e2 <ADCRead>
		
		ADCRead(ADC_CHANNEL_1, &XValue);
     154:	be 01       	movw	r22, r28
     156:	69 5f       	subi	r22, 0xF9	; 249
     158:	7f 4f       	sbci	r23, 0xFF	; 255
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	42 d0       	rcall	.+132    	; 0x1e2 <ADCRead>
		
		ADCRead(ADC_CHANNEL_1, &XValue);
     15e:	be 01       	movw	r22, r28
     160:	69 5f       	subi	r22, 0xF9	; 249
     162:	7f 4f       	sbci	r23, 0xFF	; 255
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	3d d0       	rcall	.+122    	; 0x1e2 <ADCRead>
		
		ADCRead(ADC_CHANNEL_2, &YValue);
     168:	be 01       	movw	r22, r28
     16a:	67 5f       	subi	r22, 0xF7	; 247
     16c:	7f 4f       	sbci	r23, 0xFF	; 255
     16e:	82 e0       	ldi	r24, 0x02	; 2
     170:	38 d0       	rcall	.+112    	; 0x1e2 <ADCRead>
		
		ADCRead(ADC_CHANNEL_2, &YValue);
     172:	be 01       	movw	r22, r28
     174:	67 5f       	subi	r22, 0xF7	; 247
     176:	7f 4f       	sbci	r23, 0xFF	; 255
     178:	82 e0       	ldi	r24, 0x02	; 2
     17a:	33 d0       	rcall	.+102    	; 0x1e2 <ADCRead>
		
		SendTrace(INFO_LEVEL, "ADC P = %d, X = %d, Y = %d\r\n", Value, XValue, YValue);
     17c:	8a 85       	ldd	r24, Y+10	; 0x0a
     17e:	8f 93       	push	r24
     180:	89 85       	ldd	r24, Y+9	; 0x09
     182:	8f 93       	push	r24
     184:	88 85       	ldd	r24, Y+8	; 0x08
     186:	8f 93       	push	r24
     188:	8f 81       	ldd	r24, Y+7	; 0x07
     18a:	8f 93       	push	r24
     18c:	8e 81       	ldd	r24, Y+6	; 0x06
     18e:	8f 93       	push	r24
     190:	8d 81       	ldd	r24, Y+5	; 0x05
     192:	8f 93       	push	r24
     194:	1f 93       	push	r17
     196:	0f 93       	push	r16
     198:	ff 92       	push	r15
     19a:	5a d3       	rcall	.+1716   	; 0x850 <SendTrace>
     19c:	0f b6       	in	r0, 0x3f	; 63
     19e:	f8 94       	cli
     1a0:	de bf       	out	0x3e, r29	; 62
     1a2:	0f be       	out	0x3f, r0	; 63
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	c6 cf       	rjmp	.-116    	; 0x134 <main+0x3e>

000001a8 <InitADC>:

bool gADCInitialized = FALSE;

bool
InitADC(PADC_INIT_PARAMS InitParams)
{
     1a8:	fc 01       	movw	r30, r24
	
	//
	// Check to see if the init params is set to NULL
	//
	
	if (InitParams == NULL)
     1aa:	00 97       	sbiw	r24, 0x00	; 0
     1ac:	b9 f0       	breq	.+46     	; 0x1dc <InitADC+0x34>
	// Initialize ADC Mux register
	//
	
	AdcMux.AsUINT8 = 0;
	
	AdcMux.RefVoltSelect = InitParams->RefVoltSelect;
     1ae:	81 81       	ldd	r24, Z+1	; 0x01
     1b0:	82 95       	swap	r24
     1b2:	88 0f       	add	r24, r24
     1b4:	88 0f       	add	r24, r24
     1b6:	80 7c       	andi	r24, 0xC0	; 192
	
	AdcMux.Adlar = InitParams->Flags.IsLeftAdjustResult;
     1b8:	90 81       	ld	r25, Z
     1ba:	90 fb       	bst	r25, 0
     1bc:	85 f9       	bld	r24, 5
	
	ADMUX = AdcMux.AsUINT8;
     1be:	80 93 7c 00 	sts	0x007C, r24
	// Initialize Control and Status A Register
	//
	
	AdcCtrlStatusA.AsUINT8 = 0;
	
	AdcCtrlStatusA.Prescalar = InitParams->Prescalar;
     1c2:	82 81       	ldd	r24, Z+2	; 0x02
     1c4:	87 70       	andi	r24, 0x07	; 7
	
	AdcCtrlStatusA.ADCEnable = 1;
     1c6:	80 68       	ori	r24, 0x80	; 128
	
	ADCSRA = AdcCtrlStatusA.AsUINT8;
     1c8:	80 93 7a 00 	sts	0x007A, r24
	
	//
	// Initialize Control and Status Register B
	//
	
	ADCSRB = 0;
     1cc:	10 92 7b 00 	sts	0x007B, r1
	
	//
	// Initialize Digital Input Disable Register 0
	//
	
	DIDR0 = InitParams->EnabledChannelsBitVector;
     1d0:	83 81       	ldd	r24, Z+3	; 0x03
     1d2:	80 93 7e 00 	sts	0x007E, r24
	
	
	gADCInitialized = TRUE;
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	80 93 38 01 	sts	0x0138, r24
	
	Exit:

	return gADCInitialized;
}
     1dc:	80 91 38 01 	lds	r24, 0x0138
     1e0:	08 95       	ret

000001e2 <ADCRead>:
	
	//
	// Read DIDR0 register to check enabled channels
	//
	
	if (!(DIDR0 & (0x1 << AdcChannel)))
     1e2:	20 91 7e 00 	lds	r18, 0x007E
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	08 2e       	mov	r0, r24
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <ADCRead+0xe>
     1ec:	35 95       	asr	r19
     1ee:	27 95       	ror	r18
     1f0:	0a 94       	dec	r0
     1f2:	e2 f7       	brpl	.-8      	; 0x1ec <ADCRead+0xa>
     1f4:	20 fd       	sbrc	r18, 0
     1f6:	0c c0       	rjmp	.+24     	; 0x210 <ADCRead+0x2e>
	{
		Status = FALSE;
		
		SendTrace(ERROR_LEVEL, "ADC Channel Not Enabled\r\n");
     1f8:	8d e1       	ldi	r24, 0x1D	; 29
     1fa:	91 e0       	ldi	r25, 0x01	; 1
     1fc:	9f 93       	push	r25
     1fe:	8f 93       	push	r24
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	8f 93       	push	r24
     204:	25 d3       	rcall	.+1610   	; 0x850 <SendTrace>
		
		goto Exit;
     206:	0f 90       	pop	r0
     208:	0f 90       	pop	r0
     20a:	0f 90       	pop	r0
	// Read DIDR0 register to check enabled channels
	//
	
	if (!(DIDR0 & (0x1 << AdcChannel)))
	{
		Status = FALSE;
     20c:	80 e0       	ldi	r24, 0x00	; 0
		
		SendTrace(ERROR_LEVEL, "ADC Channel Not Enabled\r\n");
		
		goto Exit;
     20e:	08 95       	ret
	
	//
	// Write the ADC Channel in ADCMUX
	//
	
	AdcMux.AsUINT8 = ADMUX;
     210:	ec e7       	ldi	r30, 0x7C	; 124
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	90 81       	ld	r25, Z
	
	AdcMux.Mux = AdcChannel;
     216:	8f 71       	andi	r24, 0x1F	; 31
     218:	90 7e       	andi	r25, 0xE0	; 224
     21a:	89 2b       	or	r24, r25
	
	ADMUX = AdcMux.AsUINT8; 
     21c:	80 83       	st	Z, r24
	
	//
	// Start Conversion
	//
	
	START_CONVERSION();
     21e:	ea e7       	ldi	r30, 0x7A	; 122
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	80 81       	ld	r24, Z
     224:	80 64       	ori	r24, 0x40	; 64
     226:	80 83       	st	Z, r24
	
	//
	// Wait for Conversion to complete
	//
	
	WAIT_FOR_CONVERSION();
     228:	80 81       	ld	r24, Z
     22a:	84 ff       	sbrs	r24, 4
     22c:	fd cf       	rjmp	.-6      	; 0x228 <ADCRead+0x46>
	
	//
	// Read the data
	//
	
	*Value = ADCL;
     22e:	80 91 78 00 	lds	r24, 0x0078
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	fb 01       	movw	r30, r22
     236:	91 83       	std	Z+1, r25	; 0x01
     238:	80 83       	st	Z, r24
	
	*Value |= (ADCH << 8);
     23a:	20 91 79 00 	lds	r18, 0x0079
     23e:	92 2b       	or	r25, r18
	
	if (*Value >= ADC_MAX_VALUE)
     240:	8c 3f       	cpi	r24, 0xFC	; 252
     242:	f3 e0       	ldi	r31, 0x03	; 3
     244:	9f 07       	cpc	r25, r31
     246:	28 f4       	brcc	.+10     	; 0x252 <ADCRead+0x70>
	// Read the data
	//
	
	*Value = ADCL;
	
	*Value |= (ADCH << 8);
     248:	fb 01       	movw	r30, r22
     24a:	91 83       	std	Z+1, r25	; 0x01
     24c:	80 83       	st	Z, r24
}

bool
ADCRead(ADC_CHANNEL AdcChannel, unsigned int *Value)
{
	bool Status = TRUE;
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	08 95       	ret
	
	*Value |= (ADCH << 8);
	
	if (*Value >= ADC_MAX_VALUE)
	{
		*Value = ADC_MAX_VALUE - 1;
     252:	8b ef       	ldi	r24, 0xFB	; 251
     254:	93 e0       	ldi	r25, 0x03	; 3
     256:	fb 01       	movw	r30, r22
     258:	91 83       	std	Z+1, r25	; 0x01
     25a:	80 83       	st	Z, r24
}

bool
ADCRead(ADC_CHANNEL AdcChannel, unsigned int *Value)
{
	bool Status = TRUE;
     25c:	81 e0       	ldi	r24, 0x01	; 1
	}
	
Exit:

	return Status;
     25e:	08 95       	ret

00000260 <InitTrace>:
#ifdef DEBUG

void
InitTrace(unsigned long ProcFrequency, unsigned char TraceLevel)
{
	if (!gTraceInitialized)
     260:	80 91 39 01 	lds	r24, 0x0139
     264:	81 11       	cpse	r24, r1
     266:	09 c0       	rjmp	.+18     	; 0x27a <InitTrace+0x1a>
	{

		gTraceLevel = TraceLevel;
     268:	40 93 3c 01 	sts	0x013C, r20

		InitUARTSync(UART_ZERO, BR_9600, NORMAL_MODE);	
     26c:	40 e0       	ldi	r20, 0x00	; 0
     26e:	63 e3       	ldi	r22, 0x33	; 51
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	76 d6       	rcall	.+3308   	; 0xf60 <InitUARTSync>
		
		gTraceInitialized = TRUE;
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	80 93 39 01 	sts	0x0139, r24
     27a:	08 95       	ret

0000027c <SendStringValue>:
SendStringValue(char *String)
{

	unsigned long Length = 0;
	
	Length = strlen(String);
     27c:	fc 01       	movw	r30, r24
     27e:	01 90       	ld	r0, Z+
     280:	00 20       	and	r0, r0
     282:	e9 f7       	brne	.-6      	; 0x27e <SendStringValue+0x2>
     284:	31 97       	sbiw	r30, 0x01	; 1
     286:	9f 01       	movw	r18, r30
     288:	28 1b       	sub	r18, r24
     28a:	39 0b       	sbc	r19, r25
     28c:	40 e0       	ldi	r20, 0x00	; 0
     28e:	50 e0       	ldi	r21, 0x00	; 0
	
	UARTTransmitSync(UART_ZERO, (PVOID) String, Length);
     290:	bc 01       	movw	r22, r24
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	32 c7       	rjmp	.+3684   	; 0x10fa <UARTTransmitSync>
     296:	08 95       	ret

00000298 <SendHexValue>:
	
}

void
SendHexValue(unsigned long long Value)
{
     298:	8f 92       	push	r8
     29a:	9f 92       	push	r9
     29c:	af 92       	push	r10
     29e:	bf 92       	push	r11
     2a0:	cf 92       	push	r12
     2a2:	df 92       	push	r13
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
     2b4:	da 95       	dec	r29
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	f8 94       	cli
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	cd bf       	out	0x3d, r28	; 61
     2c0:	02 2f       	mov	r16, r18
     2c2:	93 2e       	mov	r9, r19
     2c4:	a4 2e       	mov	r10, r20
     2c6:	b5 2e       	mov	r11, r21
     2c8:	c6 2e       	mov	r12, r22
     2ca:	d7 2e       	mov	r13, r23
     2cc:	e8 2e       	mov	r14, r24
     2ce:	f9 2e       	mov	r15, r25

	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
     2d0:	10 e0       	ldi	r17, 0x00	; 0

		if (Value < 16)
		{
			TransmitChar[Count] = Value;

			Value = 0;
     2d2:	81 2c       	mov	r8, r1


	do
	{

		if (Value < 16)
     2d4:	20 2f       	mov	r18, r16
     2d6:	39 2d       	mov	r19, r9
     2d8:	4a 2d       	mov	r20, r10
     2da:	5b 2d       	mov	r21, r11
     2dc:	6c 2d       	mov	r22, r12
     2de:	7d 2d       	mov	r23, r13
     2e0:	8e 2d       	mov	r24, r14
     2e2:	9f 2d       	mov	r25, r15
     2e4:	af e0       	ldi	r26, 0x0F	; 15
     2e6:	0e 94 4d 0a 	call	0x149a	; 0x149a <__cmpdi2_s8>
     2ea:	09 f0       	breq	.+2      	; 0x2ee <SendHexValue+0x56>
     2ec:	80 f4       	brcc	.+32     	; 0x30e <SendHexValue+0x76>
		{
			TransmitChar[Count] = Value;
     2ee:	e1 e0       	ldi	r30, 0x01	; 1
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	ec 0f       	add	r30, r28
     2f4:	fd 1f       	adc	r31, r29
     2f6:	e1 0f       	add	r30, r17
     2f8:	f1 1d       	adc	r31, r1
     2fa:	00 83       	st	Z, r16

			Value = 0;
     2fc:	08 2d       	mov	r16, r8
     2fe:	98 2c       	mov	r9, r8
     300:	a8 2c       	mov	r10, r8
     302:	b8 2c       	mov	r11, r8
     304:	c8 2c       	mov	r12, r8
     306:	d8 2c       	mov	r13, r8
     308:	e8 2c       	mov	r14, r8
     30a:	f8 2c       	mov	r15, r8
     30c:	1c c0       	rjmp	.+56     	; 0x346 <SendHexValue+0xae>
		}
		else
		{
			TransmitChar[Count] = Value % 16;
     30e:	e1 e0       	ldi	r30, 0x01	; 1
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	ec 0f       	add	r30, r28
     314:	fd 1f       	adc	r31, r29
     316:	e1 0f       	add	r30, r17
     318:	f1 1d       	adc	r31, r1
     31a:	80 2f       	mov	r24, r16
     31c:	8f 70       	andi	r24, 0x0F	; 15
     31e:	80 83       	st	Z, r24

			Value = Value / 16;
     320:	20 2f       	mov	r18, r16
     322:	39 2d       	mov	r19, r9
     324:	4a 2d       	mov	r20, r10
     326:	5b 2d       	mov	r21, r11
     328:	6c 2d       	mov	r22, r12
     32a:	7d 2d       	mov	r23, r13
     32c:	8e 2d       	mov	r24, r14
     32e:	9f 2d       	mov	r25, r15
     330:	04 e0       	ldi	r16, 0x04	; 4
     332:	0e 94 31 0a 	call	0x1462	; 0x1462 <__lshrdi3>
     336:	02 2f       	mov	r16, r18
     338:	93 2e       	mov	r9, r19
     33a:	a4 2e       	mov	r10, r20
     33c:	b5 2e       	mov	r11, r21
     33e:	c6 2e       	mov	r12, r22
     340:	d7 2e       	mov	r13, r23
     342:	e8 2e       	mov	r14, r24
     344:	f9 2e       	mov	r15, r25

		}
		
		if (TransmitChar[Count] > 9)
     346:	e1 2f       	mov	r30, r17
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	a1 e0       	ldi	r26, 0x01	; 1
     34c:	b0 e0       	ldi	r27, 0x00	; 0
     34e:	ac 0f       	add	r26, r28
     350:	bd 1f       	adc	r27, r29
     352:	ae 0f       	add	r26, r30
     354:	bf 1f       	adc	r27, r31
     356:	8c 91       	ld	r24, X
     358:	8a 30       	cpi	r24, 0x0A	; 10
     35a:	20 f0       	brcs	.+8      	; 0x364 <SendHexValue+0xcc>
		{
			TransmitChar[Count] = TransmitChar[Count] + ASCII_HEX_CONVERSION;
     35c:	fd 01       	movw	r30, r26
     35e:	89 5a       	subi	r24, 0xA9	; 169
     360:	80 83       	st	Z, r24
     362:	08 c0       	rjmp	.+16     	; 0x374 <SendHexValue+0xdc>
		}
		else
		{
			TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     364:	21 e0       	ldi	r18, 0x01	; 1
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	2c 0f       	add	r18, r28
     36a:	3d 1f       	adc	r19, r29
     36c:	e2 0f       	add	r30, r18
     36e:	f3 1f       	adc	r31, r19
     370:	80 5d       	subi	r24, 0xD0	; 208
     372:	80 83       	st	Z, r24
		}
		
		Count++;
     374:	1f 5f       	subi	r17, 0xFF	; 255

	} while (Value != 0);
     376:	20 2f       	mov	r18, r16
     378:	39 2d       	mov	r19, r9
     37a:	4a 2d       	mov	r20, r10
     37c:	5b 2d       	mov	r21, r11
     37e:	6c 2d       	mov	r22, r12
     380:	7d 2d       	mov	r23, r13
     382:	8e 2d       	mov	r24, r14
     384:	9f 2d       	mov	r25, r15
     386:	a8 2d       	mov	r26, r8
     388:	0e 94 4d 0a 	call	0x149a	; 0x149a <__cmpdi2_s8>
     38c:	09 f0       	breq	.+2      	; 0x390 <SendHexValue+0xf8>
     38e:	a2 cf       	rjmp	.-188    	; 0x2d4 <SendHexValue+0x3c>

	while (Count != 0)
     390:	11 23       	and	r17, r17
     392:	91 f0       	breq	.+36     	; 0x3b8 <SendHexValue+0x120>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     394:	61 2f       	mov	r22, r17
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	61 50       	subi	r22, 0x01	; 1
     39a:	71 09       	sbc	r23, r1
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	8c 0f       	add	r24, r28
     3a2:	9d 1f       	adc	r25, r29
     3a4:	68 0f       	add	r22, r24
     3a6:	79 1f       	adc	r23, r25
     3a8:	21 e0       	ldi	r18, 0x01	; 1
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	40 e0       	ldi	r20, 0x00	; 0
     3ae:	50 e0       	ldi	r21, 0x00	; 0
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	a3 d6       	rcall	.+3398   	; 0x10fa <UARTTransmitSync>
		
		Count--;
     3b4:	11 50       	subi	r17, 0x01	; 1
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
     3b6:	71 f7       	brne	.-36     	; 0x394 <SendHexValue+0xfc>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}
}
     3b8:	d3 95       	inc	r29
     3ba:	0f b6       	in	r0, 0x3f	; 63
     3bc:	f8 94       	cli
     3be:	de bf       	out	0x3e, r29	; 62
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	cd bf       	out	0x3d, r28	; 61
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	df 90       	pop	r13
     3d2:	cf 90       	pop	r12
     3d4:	bf 90       	pop	r11
     3d6:	af 90       	pop	r10
     3d8:	9f 90       	pop	r9
     3da:	8f 90       	pop	r8
     3dc:	08 95       	ret

000003de <SendDecimalValue>:


void
SendDecimalValue(unsigned long long Value)
{
     3de:	2f 92       	push	r2
     3e0:	3f 92       	push	r3
     3e2:	4f 92       	push	r4
     3e4:	5f 92       	push	r5
     3e6:	6f 92       	push	r6
     3e8:	7f 92       	push	r7
     3ea:	8f 92       	push	r8
     3ec:	9f 92       	push	r9
     3ee:	af 92       	push	r10
     3f0:	bf 92       	push	r11
     3f2:	cf 92       	push	r12
     3f4:	df 92       	push	r13
     3f6:	ef 92       	push	r14
     3f8:	ff 92       	push	r15
     3fa:	0f 93       	push	r16
     3fc:	1f 93       	push	r17
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62
     406:	c2 50       	subi	r28, 0x02	; 2
     408:	d1 40       	sbci	r29, 0x01	; 1
     40a:	0f b6       	in	r0, 0x3f	; 63
     40c:	f8 94       	cli
     40e:	de bf       	out	0x3e, r29	; 62
     410:	0f be       	out	0x3f, r0	; 63
     412:	cd bf       	out	0x3d, r28	; 61
     414:	cf 5f       	subi	r28, 0xFF	; 255
     416:	de 4f       	sbci	r29, 0xFE	; 254
     418:	28 83       	st	Y, r18
     41a:	c1 50       	subi	r28, 0x01	; 1
     41c:	d1 40       	sbci	r29, 0x01	; 1
     41e:	23 2e       	mov	r2, r19
     420:	34 2e       	mov	r3, r20
     422:	45 2e       	mov	r4, r21
     424:	56 2e       	mov	r5, r22
     426:	67 2e       	mov	r6, r23
     428:	78 2e       	mov	r7, r24
     42a:	89 2e       	mov	r8, r25

	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
     42c:	91 2c       	mov	r9, r1


	do
	{

		if (Value < 10)
     42e:	cf 5f       	subi	r28, 0xFF	; 255
     430:	de 4f       	sbci	r29, 0xFE	; 254
     432:	28 81       	ld	r18, Y
     434:	c1 50       	subi	r28, 0x01	; 1
     436:	d1 40       	sbci	r29, 0x01	; 1
     438:	32 2d       	mov	r19, r2
     43a:	43 2d       	mov	r20, r3
     43c:	54 2d       	mov	r21, r4
     43e:	65 2d       	mov	r22, r5
     440:	76 2d       	mov	r23, r6
     442:	87 2d       	mov	r24, r7
     444:	98 2d       	mov	r25, r8
     446:	a9 e0       	ldi	r26, 0x09	; 9
     448:	0e 94 4d 0a 	call	0x149a	; 0x149a <__cmpdi2_s8>
     44c:	09 f0       	breq	.+2      	; 0x450 <SendDecimalValue+0x72>
     44e:	40 f4       	brcc	.+16     	; 0x460 <SendDecimalValue+0x82>

			Value = Value / 10;

		}
		
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     450:	fe 01       	movw	r30, r28
     452:	e9 0d       	add	r30, r9
     454:	f1 1d       	adc	r31, r1
     456:	82 2f       	mov	r24, r18
     458:	80 5d       	subi	r24, 0xD0	; 208
     45a:	81 83       	std	Z+1, r24	; 0x01
		
		Count++;
     45c:	93 94       	inc	r9
     45e:	48 c0       	rjmp	.+144    	; 0x4f0 <SendDecimalValue+0x112>

			Value = 0;
		}
		else
		{
			TransmitChar[Count] = Value % 10;
     460:	0f 2e       	mov	r0, r31
     462:	fa e0       	ldi	r31, 0x0A	; 10
     464:	af 2e       	mov	r10, r31
     466:	f0 2d       	mov	r31, r0
     468:	b1 2c       	mov	r11, r1
     46a:	c1 2c       	mov	r12, r1
     46c:	d1 2c       	mov	r13, r1
     46e:	e1 2c       	mov	r14, r1
     470:	f1 2c       	mov	r15, r1
     472:	00 e0       	ldi	r16, 0x00	; 0
     474:	10 e0       	ldi	r17, 0x00	; 0
     476:	cf 5f       	subi	r28, 0xFF	; 255
     478:	de 4f       	sbci	r29, 0xFE	; 254
     47a:	28 81       	ld	r18, Y
     47c:	c1 50       	subi	r28, 0x01	; 1
     47e:	d1 40       	sbci	r29, 0x01	; 1
     480:	32 2d       	mov	r19, r2
     482:	43 2d       	mov	r20, r3
     484:	54 2d       	mov	r21, r4
     486:	65 2d       	mov	r22, r5
     488:	76 2d       	mov	r23, r6
     48a:	87 2d       	mov	r24, r7
     48c:	98 2d       	mov	r25, r8
     48e:	42 d7       	rcall	.+3716   	; 0x1314 <__umoddi3>
     490:	ce 5f       	subi	r28, 0xFE	; 254
     492:	de 4f       	sbci	r29, 0xFE	; 254
     494:	28 83       	st	Y, r18
     496:	c2 50       	subi	r28, 0x02	; 2
     498:	d1 40       	sbci	r29, 0x01	; 1

			Value = Value / 10;
     49a:	cf 5f       	subi	r28, 0xFF	; 255
     49c:	de 4f       	sbci	r29, 0xFE	; 254
     49e:	28 81       	ld	r18, Y
     4a0:	c1 50       	subi	r28, 0x01	; 1
     4a2:	d1 40       	sbci	r29, 0x01	; 1
     4a4:	32 2d       	mov	r19, r2
     4a6:	43 2d       	mov	r20, r3
     4a8:	54 2d       	mov	r21, r4
     4aa:	65 2d       	mov	r22, r5
     4ac:	76 2d       	mov	r23, r6
     4ae:	87 2d       	mov	r24, r7
     4b0:	98 2d       	mov	r25, r8
     4b2:	32 d7       	rcall	.+3684   	; 0x1318 <__udivdi3>
     4b4:	cf 5f       	subi	r28, 0xFF	; 255
     4b6:	de 4f       	sbci	r29, 0xFE	; 254
     4b8:	28 83       	st	Y, r18
     4ba:	c1 50       	subi	r28, 0x01	; 1
     4bc:	d1 40       	sbci	r29, 0x01	; 1
     4be:	23 2e       	mov	r2, r19
     4c0:	34 2e       	mov	r3, r20
     4c2:	45 2e       	mov	r4, r21
     4c4:	56 2e       	mov	r5, r22
     4c6:	67 2e       	mov	r6, r23
     4c8:	78 2e       	mov	r7, r24
     4ca:	89 2e       	mov	r8, r25

		}
		
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     4cc:	e1 e0       	ldi	r30, 0x01	; 1
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	ec 0f       	add	r30, r28
     4d2:	fd 1f       	adc	r31, r29
     4d4:	e9 0d       	add	r30, r9
     4d6:	f1 1d       	adc	r31, r1
     4d8:	ce 5f       	subi	r28, 0xFE	; 254
     4da:	de 4f       	sbci	r29, 0xFE	; 254
     4dc:	a8 81       	ld	r26, Y
     4de:	c2 50       	subi	r28, 0x02	; 2
     4e0:	d1 40       	sbci	r29, 0x01	; 1
     4e2:	a0 5d       	subi	r26, 0xD0	; 208
     4e4:	a0 83       	st	Z, r26
		
		Count++;
     4e6:	93 94       	inc	r9

	} while (Value != 0);
     4e8:	a0 e0       	ldi	r26, 0x00	; 0
     4ea:	d7 d7       	rcall	.+4014   	; 0x149a <__cmpdi2_s8>
     4ec:	09 f0       	breq	.+2      	; 0x4f0 <SendDecimalValue+0x112>
     4ee:	9f cf       	rjmp	.-194    	; 0x42e <SendDecimalValue+0x50>

	while (Count != 0)
     4f0:	99 20       	and	r9, r9
     4f2:	91 f0       	breq	.+36     	; 0x518 <SendDecimalValue+0x13a>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     4f4:	69 2d       	mov	r22, r9
     4f6:	70 e0       	ldi	r23, 0x00	; 0
     4f8:	61 50       	subi	r22, 0x01	; 1
     4fa:	71 09       	sbc	r23, r1
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	8c 0f       	add	r24, r28
     502:	9d 1f       	adc	r25, r29
     504:	68 0f       	add	r22, r24
     506:	79 1f       	adc	r23, r25
     508:	21 e0       	ldi	r18, 0x01	; 1
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	40 e0       	ldi	r20, 0x00	; 0
     50e:	50 e0       	ldi	r21, 0x00	; 0
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	f3 d5       	rcall	.+3046   	; 0x10fa <UARTTransmitSync>
		
		Count--;
     514:	9a 94       	dec	r9
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
     516:	71 f7       	brne	.-36     	; 0x4f4 <SendDecimalValue+0x116>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}	
}
     518:	ce 5f       	subi	r28, 0xFE	; 254
     51a:	de 4f       	sbci	r29, 0xFE	; 254
     51c:	0f b6       	in	r0, 0x3f	; 63
     51e:	f8 94       	cli
     520:	de bf       	out	0x3e, r29	; 62
     522:	0f be       	out	0x3f, r0	; 63
     524:	cd bf       	out	0x3d, r28	; 61
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	1f 91       	pop	r17
     52c:	0f 91       	pop	r16
     52e:	ff 90       	pop	r15
     530:	ef 90       	pop	r14
     532:	df 90       	pop	r13
     534:	cf 90       	pop	r12
     536:	bf 90       	pop	r11
     538:	af 90       	pop	r10
     53a:	9f 90       	pop	r9
     53c:	8f 90       	pop	r8
     53e:	7f 90       	pop	r7
     540:	6f 90       	pop	r6
     542:	5f 90       	pop	r5
     544:	4f 90       	pop	r4
     546:	3f 90       	pop	r3
     548:	2f 90       	pop	r2
     54a:	08 95       	ret

0000054c <SendDoubleValue>:

void
SendDoubleValue(double Value)
{
     54c:	6f 92       	push	r6
     54e:	7f 92       	push	r7
     550:	8f 92       	push	r8
     552:	9f 92       	push	r9
     554:	af 92       	push	r10
     556:	bf 92       	push	r11
     558:	cf 92       	push	r12
     55a:	df 92       	push	r13
     55c:	ef 92       	push	r14
     55e:	ff 92       	push	r15
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	00 d0       	rcall	.+0      	; 0x56a <SendDoubleValue+0x1e>
     56a:	1f 92       	push	r1
     56c:	cd b7       	in	r28, 0x3d	; 61
     56e:	de b7       	in	r29, 0x3e	; 62
     570:	6b 01       	movw	r12, r22
     572:	7c 01       	movw	r14, r24
	
	long long IntPart;
	
	unsigned char FracPart;
	
	unsigned char Dot = '.';
     574:	8e e2       	ldi	r24, 0x2E	; 46
     576:	8a 83       	std	Y+2, r24	; 0x02
	
	unsigned char Minus = '-';
     578:	8d e2       	ldi	r24, 0x2D	; 45
     57a:	8b 83       	std	Y+3, r24	; 0x03
	
	if (Value < 0)
     57c:	20 e0       	ldi	r18, 0x00	; 0
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	a9 01       	movw	r20, r18
     582:	c7 01       	movw	r24, r14
     584:	b6 01       	movw	r22, r12
     586:	12 d3       	rcall	.+1572   	; 0xbac <__cmpsf2>
     588:	88 23       	and	r24, r24
     58a:	6c f4       	brge	.+26     	; 0x5a6 <SendDoubleValue+0x5a>
	{
		
		UARTTransmitSync(UART_ZERO, (PVOID) &Minus, 1);
     58c:	21 e0       	ldi	r18, 0x01	; 1
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	40 e0       	ldi	r20, 0x00	; 0
     592:	50 e0       	ldi	r21, 0x00	; 0
     594:	be 01       	movw	r22, r28
     596:	6d 5f       	subi	r22, 0xFD	; 253
     598:	7f 4f       	sbci	r23, 0xFF	; 255
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	ae d5       	rcall	.+2908   	; 0x10fa <UARTTransmitSync>
		
		Value = Value * -1;
     59e:	f7 fa       	bst	r15, 7
     5a0:	f0 94       	com	r15
     5a2:	f7 f8       	bld	r15, 7
     5a4:	f0 94       	com	r15
	}
	
	IntPart = (long long) Value;
     5a6:	c7 01       	movw	r24, r14
     5a8:	b6 01       	movw	r22, r12
     5aa:	04 d3       	rcall	.+1544   	; 0xbb4 <__fixsfdi>
     5ac:	62 2e       	mov	r6, r18
     5ae:	73 2e       	mov	r7, r19
     5b0:	84 2e       	mov	r8, r20
     5b2:	95 2e       	mov	r9, r21
     5b4:	a6 2e       	mov	r10, r22
     5b6:	b7 2e       	mov	r11, r23
     5b8:	08 2f       	mov	r16, r24
     5ba:	19 2f       	mov	r17, r25
		
	Value = Value - IntPart;
     5bc:	61 d3       	rcall	.+1730   	; 0xc80 <__floatdisf>
     5be:	9b 01       	movw	r18, r22
     5c0:	ac 01       	movw	r20, r24
     5c2:	c7 01       	movw	r24, r14
     5c4:	b6 01       	movw	r22, r12
     5c6:	8d d2       	rcall	.+1306   	; 0xae2 <__subsf3>
     5c8:	6b 01       	movw	r12, r22
     5ca:	7c 01       	movw	r14, r24
	
	SendDecimalValue(IntPart);
     5cc:	26 2d       	mov	r18, r6
     5ce:	37 2d       	mov	r19, r7
     5d0:	48 2d       	mov	r20, r8
     5d2:	59 2d       	mov	r21, r9
     5d4:	6a 2d       	mov	r22, r10
     5d6:	7b 2d       	mov	r23, r11
     5d8:	80 2f       	mov	r24, r16
     5da:	91 2f       	mov	r25, r17
     5dc:	00 df       	rcall	.-512    	; 0x3de <SendDecimalValue>
	
	UARTTransmitSync(UART_ZERO, (PVOID) &Dot, 1);
     5de:	21 e0       	ldi	r18, 0x01	; 1
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	40 e0       	ldi	r20, 0x00	; 0
     5e4:	50 e0       	ldi	r21, 0x00	; 0
     5e6:	be 01       	movw	r22, r28
     5e8:	6e 5f       	subi	r22, 0xFE	; 254
     5ea:	7f 4f       	sbci	r23, 0xFF	; 255
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	85 d5       	rcall	.+2826   	; 0x10fa <UARTTransmitSync>
	
	while (Value != 0)
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	a9 01       	movw	r20, r18
     5f6:	c7 01       	movw	r24, r14
     5f8:	b6 01       	movw	r22, r12
     5fa:	d8 d2       	rcall	.+1456   	; 0xbac <__cmpsf2>
     5fc:	88 23       	and	r24, r24
     5fe:	49 f1       	breq	.+82     	; 0x652 <SendDoubleValue+0x106>
	{
		FracPart = (Value * 10);
     600:	20 e0       	ldi	r18, 0x00	; 0
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	40 e2       	ldi	r20, 0x20	; 32
     606:	51 e4       	ldi	r21, 0x41	; 65
     608:	c7 01       	movw	r24, r14
     60a:	b6 01       	movw	r22, r12
     60c:	3d d4       	rcall	.+2170   	; 0xe88 <__mulsf3>
     60e:	6b 01       	movw	r12, r22
     610:	7c 01       	movw	r14, r24
     612:	0a d3       	rcall	.+1556   	; 0xc28 <__fixunssfsi>
     614:	16 2f       	mov	r17, r22
		
		Value = (Value * 10) - FracPart;
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	37 d3       	rcall	.+1646   	; 0xc8c <__floatsisf>
     61e:	9b 01       	movw	r18, r22
     620:	ac 01       	movw	r20, r24
     622:	c7 01       	movw	r24, r14
     624:	b6 01       	movw	r22, r12
     626:	5d d2       	rcall	.+1210   	; 0xae2 <__subsf3>
     628:	6b 01       	movw	r12, r22
     62a:	7c 01       	movw	r14, r24
		
		FracPart = FracPart + ASCII_DECIMAL_CONVERSION;
     62c:	10 5d       	subi	r17, 0xD0	; 208
     62e:	19 83       	std	Y+1, r17	; 0x01
		
		UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
     630:	21 e0       	ldi	r18, 0x01	; 1
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	40 e0       	ldi	r20, 0x00	; 0
     636:	50 e0       	ldi	r21, 0x00	; 0
     638:	be 01       	movw	r22, r28
     63a:	6f 5f       	subi	r22, 0xFF	; 255
     63c:	7f 4f       	sbci	r23, 0xFF	; 255
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	5c d5       	rcall	.+2744   	; 0x10fa <UARTTransmitSync>
	
	SendDecimalValue(IntPart);
	
	UARTTransmitSync(UART_ZERO, (PVOID) &Dot, 1);
	
	while (Value != 0)
     642:	20 e0       	ldi	r18, 0x00	; 0
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	a9 01       	movw	r20, r18
     648:	c7 01       	movw	r24, r14
     64a:	b6 01       	movw	r22, r12
     64c:	af d2       	rcall	.+1374   	; 0xbac <__cmpsf2>
     64e:	81 11       	cpse	r24, r1
     650:	d7 cf       	rjmp	.-82     	; 0x600 <SendDoubleValue+0xb4>
	
	//
	// Print 0
	//
	
	FracPart = ASCII_DECIMAL_CONVERSION;
     652:	80 e3       	ldi	r24, 0x30	; 48
     654:	89 83       	std	Y+1, r24	; 0x01
	
	UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
     656:	21 e0       	ldi	r18, 0x01	; 1
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	40 e0       	ldi	r20, 0x00	; 0
     65c:	50 e0       	ldi	r21, 0x00	; 0
     65e:	be 01       	movw	r22, r28
     660:	6f 5f       	subi	r22, 0xFF	; 255
     662:	7f 4f       	sbci	r23, 0xFF	; 255
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	49 d5       	rcall	.+2706   	; 0x10fa <UARTTransmitSync>
}
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	0f 91       	pop	r16
     676:	ff 90       	pop	r15
     678:	ef 90       	pop	r14
     67a:	df 90       	pop	r13
     67c:	cf 90       	pop	r12
     67e:	bf 90       	pop	r11
     680:	af 90       	pop	r10
     682:	9f 90       	pop	r9
     684:	8f 90       	pop	r8
     686:	7f 90       	pop	r7
     688:	6f 90       	pop	r6
     68a:	08 95       	ret

0000068c <SendSignedDecimalValue>:

void
SendSignedDecimalValue(long long Value)
{
     68c:	2f 92       	push	r2
     68e:	3f 92       	push	r3
     690:	4f 92       	push	r4
     692:	5f 92       	push	r5
     694:	6f 92       	push	r6
     696:	7f 92       	push	r7
     698:	8f 92       	push	r8
     69a:	9f 92       	push	r9
     69c:	af 92       	push	r10
     69e:	bf 92       	push	r11
     6a0:	cf 92       	push	r12
     6a2:	df 92       	push	r13
     6a4:	ef 92       	push	r14
     6a6:	ff 92       	push	r15
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	cd b7       	in	r28, 0x3d	; 61
     6b2:	de b7       	in	r29, 0x3e	; 62
     6b4:	c3 50       	subi	r28, 0x03	; 3
     6b6:	d1 40       	sbci	r29, 0x01	; 1
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	f8 94       	cli
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	cd bf       	out	0x3d, r28	; 61
     6c2:	ce 5f       	subi	r28, 0xFE	; 254
     6c4:	de 4f       	sbci	r29, 0xFE	; 254
     6c6:	28 83       	st	Y, r18
     6c8:	c2 50       	subi	r28, 0x02	; 2
     6ca:	d1 40       	sbci	r29, 0x01	; 1
     6cc:	83 2e       	mov	r8, r19
     6ce:	74 2e       	mov	r7, r20
     6d0:	65 2e       	mov	r6, r21
     6d2:	56 2e       	mov	r5, r22
     6d4:	47 2e       	mov	r4, r23
     6d6:	38 2e       	mov	r3, r24
     6d8:	29 2e       	mov	r2, r25
	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
	
	unsigned char Minus = '-';
     6da:	8d e2       	ldi	r24, 0x2D	; 45
     6dc:	cf 5f       	subi	r28, 0xFF	; 255
     6de:	de 4f       	sbci	r29, 0xFE	; 254
     6e0:	88 83       	st	Y, r24
     6e2:	c1 50       	subi	r28, 0x01	; 1
     6e4:	d1 40       	sbci	r29, 0x01	; 1

	//
	// If the value is negative, print - sign and make the value positive.
	//

	if (Value < 0)
     6e6:	83 2d       	mov	r24, r3
     6e8:	a0 e0       	ldi	r26, 0x00	; 0
     6ea:	d7 d6       	rcall	.+3502   	; 0x149a <__cmpdi2_s8>
     6ec:	14 f5       	brge	.+68     	; 0x732 <SendSignedDecimalValue+0xa6>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &Minus, 1);
     6ee:	21 e0       	ldi	r18, 0x01	; 1
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	40 e0       	ldi	r20, 0x00	; 0
     6f4:	50 e0       	ldi	r21, 0x00	; 0
     6f6:	be 01       	movw	r22, r28
     6f8:	6f 5f       	subi	r22, 0xFF	; 255
     6fa:	7e 4f       	sbci	r23, 0xFE	; 254
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	fd d4       	rcall	.+2554   	; 0x10fa <UARTTransmitSync>

		Value *= -1;
     700:	ce 5f       	subi	r28, 0xFE	; 254
     702:	de 4f       	sbci	r29, 0xFE	; 254
     704:	28 81       	ld	r18, Y
     706:	c2 50       	subi	r28, 0x02	; 2
     708:	d1 40       	sbci	r29, 0x01	; 1
     70a:	38 2d       	mov	r19, r8
     70c:	47 2d       	mov	r20, r7
     70e:	56 2d       	mov	r21, r6
     710:	65 2d       	mov	r22, r5
     712:	74 2d       	mov	r23, r4
     714:	83 2d       	mov	r24, r3
     716:	92 2d       	mov	r25, r2
     718:	5b d6       	rcall	.+3254   	; 0x13d0 <__negdi2>
     71a:	ce 5f       	subi	r28, 0xFE	; 254
     71c:	de 4f       	sbci	r29, 0xFE	; 254
     71e:	28 83       	st	Y, r18
     720:	c2 50       	subi	r28, 0x02	; 2
     722:	d1 40       	sbci	r29, 0x01	; 1
     724:	83 2e       	mov	r8, r19
     726:	74 2e       	mov	r7, r20
     728:	65 2e       	mov	r6, r21
     72a:	56 2e       	mov	r5, r22
     72c:	47 2e       	mov	r4, r23
     72e:	38 2e       	mov	r3, r24
     730:	29 2e       	mov	r2, r25
	UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
}

void
SendSignedDecimalValue(long long Value)
{
     732:	91 2c       	mov	r9, r1
	}

	do
	{

		if (Value < 10)
     734:	ce 5f       	subi	r28, 0xFE	; 254
     736:	de 4f       	sbci	r29, 0xFE	; 254
     738:	28 81       	ld	r18, Y
     73a:	c2 50       	subi	r28, 0x02	; 2
     73c:	d1 40       	sbci	r29, 0x01	; 1
     73e:	38 2d       	mov	r19, r8
     740:	47 2d       	mov	r20, r7
     742:	56 2d       	mov	r21, r6
     744:	65 2d       	mov	r22, r5
     746:	74 2d       	mov	r23, r4
     748:	83 2d       	mov	r24, r3
     74a:	92 2d       	mov	r25, r2
     74c:	a9 e0       	ldi	r26, 0x09	; 9
     74e:	a5 d6       	rcall	.+3402   	; 0x149a <__cmpdi2_s8>
     750:	09 f0       	breq	.+2      	; 0x754 <SendSignedDecimalValue+0xc8>
     752:	44 f4       	brge	.+16     	; 0x764 <SendSignedDecimalValue+0xd8>

			Value = Value / 10;

		}
	
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     754:	fe 01       	movw	r30, r28
     756:	e9 0d       	add	r30, r9
     758:	f1 1d       	adc	r31, r1
     75a:	82 2f       	mov	r24, r18
     75c:	80 5d       	subi	r24, 0xD0	; 208
     75e:	81 83       	std	Z+1, r24	; 0x01
		
		Count++;
     760:	93 94       	inc	r9
     762:	48 c0       	rjmp	.+144    	; 0x7f4 <SendSignedDecimalValue+0x168>

			Value = 0;
		}
		else
		{
			TransmitChar[Count] = Value % 10;
     764:	0f 2e       	mov	r0, r31
     766:	fa e0       	ldi	r31, 0x0A	; 10
     768:	af 2e       	mov	r10, r31
     76a:	f0 2d       	mov	r31, r0
     76c:	b1 2c       	mov	r11, r1
     76e:	c1 2c       	mov	r12, r1
     770:	d1 2c       	mov	r13, r1
     772:	e1 2c       	mov	r14, r1
     774:	f1 2c       	mov	r15, r1
     776:	00 e0       	ldi	r16, 0x00	; 0
     778:	10 e0       	ldi	r17, 0x00	; 0
     77a:	ce 5f       	subi	r28, 0xFE	; 254
     77c:	de 4f       	sbci	r29, 0xFE	; 254
     77e:	28 81       	ld	r18, Y
     780:	c2 50       	subi	r28, 0x02	; 2
     782:	d1 40       	sbci	r29, 0x01	; 1
     784:	38 2d       	mov	r19, r8
     786:	47 2d       	mov	r20, r7
     788:	56 2d       	mov	r21, r6
     78a:	65 2d       	mov	r22, r5
     78c:	74 2d       	mov	r23, r4
     78e:	83 2d       	mov	r24, r3
     790:	92 2d       	mov	r25, r2
     792:	95 d5       	rcall	.+2858   	; 0x12be <__moddi3>
     794:	cd 5f       	subi	r28, 0xFD	; 253
     796:	de 4f       	sbci	r29, 0xFE	; 254
     798:	28 83       	st	Y, r18
     79a:	c3 50       	subi	r28, 0x03	; 3
     79c:	d1 40       	sbci	r29, 0x01	; 1

			Value = Value / 10;
     79e:	ce 5f       	subi	r28, 0xFE	; 254
     7a0:	de 4f       	sbci	r29, 0xFE	; 254
     7a2:	28 81       	ld	r18, Y
     7a4:	c2 50       	subi	r28, 0x02	; 2
     7a6:	d1 40       	sbci	r29, 0x01	; 1
     7a8:	38 2d       	mov	r19, r8
     7aa:	47 2d       	mov	r20, r7
     7ac:	56 2d       	mov	r21, r6
     7ae:	65 2d       	mov	r22, r5
     7b0:	74 2d       	mov	r23, r4
     7b2:	83 2d       	mov	r24, r3
     7b4:	92 2d       	mov	r25, r2
     7b6:	85 d5       	rcall	.+2826   	; 0x12c2 <__divdi3>
     7b8:	ce 5f       	subi	r28, 0xFE	; 254
     7ba:	de 4f       	sbci	r29, 0xFE	; 254
     7bc:	28 83       	st	Y, r18
     7be:	c2 50       	subi	r28, 0x02	; 2
     7c0:	d1 40       	sbci	r29, 0x01	; 1
     7c2:	83 2e       	mov	r8, r19
     7c4:	74 2e       	mov	r7, r20
     7c6:	65 2e       	mov	r6, r21
     7c8:	56 2e       	mov	r5, r22
     7ca:	47 2e       	mov	r4, r23
     7cc:	38 2e       	mov	r3, r24
     7ce:	29 2e       	mov	r2, r25

		}
	
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     7d0:	e1 e0       	ldi	r30, 0x01	; 1
     7d2:	f0 e0       	ldi	r31, 0x00	; 0
     7d4:	ec 0f       	add	r30, r28
     7d6:	fd 1f       	adc	r31, r29
     7d8:	e9 0d       	add	r30, r9
     7da:	f1 1d       	adc	r31, r1
     7dc:	cd 5f       	subi	r28, 0xFD	; 253
     7de:	de 4f       	sbci	r29, 0xFE	; 254
     7e0:	a8 81       	ld	r26, Y
     7e2:	c3 50       	subi	r28, 0x03	; 3
     7e4:	d1 40       	sbci	r29, 0x01	; 1
     7e6:	a0 5d       	subi	r26, 0xD0	; 208
     7e8:	a0 83       	st	Z, r26
		
		Count++;
     7ea:	93 94       	inc	r9

	} while (Value != 0);
     7ec:	a0 e0       	ldi	r26, 0x00	; 0
     7ee:	55 d6       	rcall	.+3242   	; 0x149a <__cmpdi2_s8>
     7f0:	09 f0       	breq	.+2      	; 0x7f4 <SendSignedDecimalValue+0x168>
     7f2:	a0 cf       	rjmp	.-192    	; 0x734 <SendSignedDecimalValue+0xa8>

	while (Count != 0)
     7f4:	99 20       	and	r9, r9
     7f6:	91 f0       	breq	.+36     	; 0x81c <SendSignedDecimalValue+0x190>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     7f8:	69 2d       	mov	r22, r9
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	61 50       	subi	r22, 0x01	; 1
     7fe:	71 09       	sbc	r23, r1
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	8c 0f       	add	r24, r28
     806:	9d 1f       	adc	r25, r29
     808:	68 0f       	add	r22, r24
     80a:	79 1f       	adc	r23, r25
     80c:	21 e0       	ldi	r18, 0x01	; 1
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	40 e0       	ldi	r20, 0x00	; 0
     812:	50 e0       	ldi	r21, 0x00	; 0
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	71 d4       	rcall	.+2274   	; 0x10fa <UARTTransmitSync>
		
		Count--;
     818:	9a 94       	dec	r9
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
     81a:	71 f7       	brne	.-36     	; 0x7f8 <SendSignedDecimalValue+0x16c>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}
}
     81c:	cd 5f       	subi	r28, 0xFD	; 253
     81e:	de 4f       	sbci	r29, 0xFE	; 254
     820:	0f b6       	in	r0, 0x3f	; 63
     822:	f8 94       	cli
     824:	de bf       	out	0x3e, r29	; 62
     826:	0f be       	out	0x3f, r0	; 63
     828:	cd bf       	out	0x3d, r28	; 61
     82a:	df 91       	pop	r29
     82c:	cf 91       	pop	r28
     82e:	1f 91       	pop	r17
     830:	0f 91       	pop	r16
     832:	ff 90       	pop	r15
     834:	ef 90       	pop	r14
     836:	df 90       	pop	r13
     838:	cf 90       	pop	r12
     83a:	bf 90       	pop	r11
     83c:	af 90       	pop	r10
     83e:	9f 90       	pop	r9
     840:	8f 90       	pop	r8
     842:	7f 90       	pop	r7
     844:	6f 90       	pop	r6
     846:	5f 90       	pop	r5
     848:	4f 90       	pop	r4
     84a:	3f 90       	pop	r3
     84c:	2f 90       	pop	r2
     84e:	08 95       	ret

00000850 <SendTrace>:
	}
}

void
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{
     850:	3f 92       	push	r3
     852:	4f 92       	push	r4
     854:	5f 92       	push	r5
     856:	6f 92       	push	r6
     858:	7f 92       	push	r7
     85a:	8f 92       	push	r8
     85c:	9f 92       	push	r9
     85e:	af 92       	push	r10
     860:	bf 92       	push	r11
     862:	cf 92       	push	r12
     864:	df 92       	push	r13
     866:	ef 92       	push	r14
     868:	ff 92       	push	r15
     86a:	0f 93       	push	r16
     86c:	1f 93       	push	r17
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	1f 92       	push	r1
     874:	cd b7       	in	r28, 0x3d	; 61
     876:	de b7       	in	r29, 0x3e	; 62
     878:	0e 89       	ldd	r16, Y+22	; 0x16
     87a:	1f 89       	ldd	r17, Y+23	; 0x17
	
	char Character;

	va_list ArgList;

	if (!gTraceInitialized || !(TraceLevel & gTraceLevel))
     87c:	80 91 39 01 	lds	r24, 0x0139
     880:	88 23       	and	r24, r24
     882:	09 f4       	brne	.+2      	; 0x886 <SendTrace+0x36>
     884:	1b c1       	rjmp	.+566    	; 0xabc <SendTrace+0x26c>
     886:	80 91 3c 01 	lds	r24, 0x013C
     88a:	9d 89       	ldd	r25, Y+21	; 0x15
     88c:	89 23       	and	r24, r25
     88e:	09 f4       	brne	.+2      	; 0x892 <SendTrace+0x42>
     890:	15 c1       	rjmp	.+554    	; 0xabc <SendTrace+0x26c>
	{
		return;
	}

	va_start(ArgList, String);
     892:	7e 01       	movw	r14, r28
     894:	28 e1       	ldi	r18, 0x18	; 24
     896:	e2 0e       	add	r14, r18
     898:	f1 1c       	adc	r15, r1

	while (*String != '\0')
     89a:	f8 01       	movw	r30, r16
     89c:	20 81       	ld	r18, Z
     89e:	22 23       	and	r18, r18
     8a0:	09 f4       	brne	.+2      	; 0x8a4 <SendTrace+0x54>
     8a2:	0c c1       	rjmp	.+536    	; 0xabc <SendTrace+0x26c>
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{

	bool IsLong = FALSE;
	
	bool IsLongLong = FALSE;
     8a4:	41 2c       	mov	r4, r1

void
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{

	bool IsLong = FALSE;
     8a6:	d1 2c       	mov	r13, r1
						IsLong = FALSE;
					}
					
					SendDoubleValue(va_arg(ArgList, double));
					
					break;
     8a8:	51 2c       	mov	r5, r1
						
						IsLong = FALSE;
					}
					else
					{
						IsLong = TRUE;
     8aa:	33 24       	eor	r3, r3
     8ac:	33 94       	inc	r3
	va_start(ArgList, String);

	while (*String != '\0')
	{

		if (*String == '%' || IsLong || IsLongLong)
     8ae:	25 32       	cpi	r18, 0x25	; 37
     8b0:	29 f0       	breq	.+10     	; 0x8bc <SendTrace+0x6c>
     8b2:	d1 10       	cpse	r13, r1
     8b4:	05 c0       	rjmp	.+10     	; 0x8c0 <SendTrace+0x70>
     8b6:	41 10       	cpse	r4, r1
     8b8:	03 c0       	rjmp	.+6      	; 0x8c0 <SendTrace+0x70>
     8ba:	ef c0       	rjmp	.+478    	; 0xa9a <SendTrace+0x24a>
		{

			if (*String == '%')
			{
				String++;
     8bc:	0f 5f       	subi	r16, 0xFF	; 255
     8be:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			switch (*String)
     8c0:	f8 01       	movw	r30, r16
     8c2:	80 81       	ld	r24, Z
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	fc 01       	movw	r30, r24
     8c8:	e3 56       	subi	r30, 0x63	; 99
     8ca:	f1 09       	sbc	r31, r1
     8cc:	e6 31       	cpi	r30, 0x16	; 22
     8ce:	f1 05       	cpc	r31, r1
     8d0:	08 f0       	brcs	.+2      	; 0x8d4 <SendTrace+0x84>
     8d2:	ec c0       	rjmp	.+472    	; 0xaac <SendTrace+0x25c>
     8d4:	ea 5b       	subi	r30, 0xBA	; 186
     8d6:	ff 4f       	sbci	r31, 0xFF	; 255
     8d8:	ec c4       	rjmp	.+2520   	; 0x12b2 <__tablejump2__>
			{
				case 'c':
				{

					Character = va_arg(ArgList, int);
     8da:	57 01       	movw	r10, r14
     8dc:	f2 e0       	ldi	r31, 0x02	; 2
     8de:	af 0e       	add	r10, r31
     8e0:	b1 1c       	adc	r11, r1
     8e2:	f7 01       	movw	r30, r14
     8e4:	80 81       	ld	r24, Z
     8e6:	89 83       	std	Y+1, r24	; 0x01
					
					UARTTransmitSync(UART_ZERO, (PVOID) &Character, 1);
     8e8:	21 e0       	ldi	r18, 0x01	; 1
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	50 e0       	ldi	r21, 0x00	; 0
     8f0:	be 01       	movw	r22, r28
     8f2:	6f 5f       	subi	r22, 0xFF	; 255
     8f4:	7f 4f       	sbci	r23, 0xFF	; 255
     8f6:	85 2d       	mov	r24, r5
     8f8:	00 d4       	rcall	.+2048   	; 0x10fa <UARTTransmitSync>
			switch (*String)
			{
				case 'c':
				{

					Character = va_arg(ArgList, int);
     8fa:	75 01       	movw	r14, r10
					
					UARTTransmitSync(UART_ZERO, (PVOID) &Character, 1);

					break;
     8fc:	d7 c0       	rjmp	.+430    	; 0xaac <SendTrace+0x25c>

				}
				case 'd':
				{

					if (IsLong)
     8fe:	dd 20       	and	r13, r13
     900:	d9 f0       	breq	.+54     	; 0x938 <SendTrace+0xe8>
					{

						SendSignedDecimalValue(va_arg(ArgList, long));
     902:	67 01       	movw	r12, r14
     904:	f4 e0       	ldi	r31, 0x04	; 4
     906:	cf 0e       	add	r12, r31
     908:	d1 1c       	adc	r13, r1
     90a:	f7 01       	movw	r30, r14
     90c:	80 81       	ld	r24, Z
     90e:	91 81       	ldd	r25, Z+1	; 0x01
     910:	a2 81       	ldd	r26, Z+2	; 0x02
     912:	b3 81       	ldd	r27, Z+3	; 0x03
     914:	4c 01       	movw	r8, r24
     916:	5d 01       	movw	r10, r26
     918:	bb 0c       	add	r11, r11
     91a:	88 08       	sbc	r8, r8
     91c:	98 2c       	mov	r9, r8
     91e:	54 01       	movw	r10, r8
     920:	28 2f       	mov	r18, r24
     922:	39 2f       	mov	r19, r25
     924:	4a 2f       	mov	r20, r26
     926:	5b 2f       	mov	r21, r27
     928:	68 2d       	mov	r22, r8
     92a:	78 2d       	mov	r23, r8
     92c:	88 2d       	mov	r24, r8
     92e:	98 2d       	mov	r25, r8
     930:	ad de       	rcall	.-678    	; 0x68c <SendSignedDecimalValue>
     932:	76 01       	movw	r14, r12

						IsLong = FALSE;
     934:	d5 2c       	mov	r13, r5
     936:	ba c0       	rjmp	.+372    	; 0xaac <SendTrace+0x25c>

					}
					else if (IsLongLong)
     938:	44 20       	and	r4, r4
     93a:	89 f0       	breq	.+34     	; 0x95e <SendTrace+0x10e>
					{
						SendSignedDecimalValue(va_arg(ArgList, long long));
     93c:	57 01       	movw	r10, r14
     93e:	f8 e0       	ldi	r31, 0x08	; 8
     940:	af 0e       	add	r10, r31
     942:	b1 1c       	adc	r11, r1
     944:	f7 01       	movw	r30, r14
     946:	20 81       	ld	r18, Z
     948:	31 81       	ldd	r19, Z+1	; 0x01
     94a:	42 81       	ldd	r20, Z+2	; 0x02
     94c:	53 81       	ldd	r21, Z+3	; 0x03
     94e:	64 81       	ldd	r22, Z+4	; 0x04
     950:	75 81       	ldd	r23, Z+5	; 0x05
     952:	86 81       	ldd	r24, Z+6	; 0x06
     954:	97 81       	ldd	r25, Z+7	; 0x07
     956:	9a de       	rcall	.-716    	; 0x68c <SendSignedDecimalValue>
     958:	75 01       	movw	r14, r10

						IsLongLong = FALSE;
     95a:	45 2c       	mov	r4, r5
     95c:	a7 c0       	rjmp	.+334    	; 0xaac <SendTrace+0x25c>
					}
					else
					{

						SendSignedDecimalValue(va_arg(ArgList, int));
     95e:	57 01       	movw	r10, r14
     960:	f2 e0       	ldi	r31, 0x02	; 2
     962:	af 0e       	add	r10, r31
     964:	b1 1c       	adc	r11, r1
     966:	f7 01       	movw	r30, r14
     968:	31 81       	ldd	r19, Z+1	; 0x01
     96a:	20 81       	ld	r18, Z
     96c:	93 2f       	mov	r25, r19
     96e:	99 0f       	add	r25, r25
     970:	99 0b       	sbc	r25, r25
     972:	49 2f       	mov	r20, r25
     974:	59 2f       	mov	r21, r25
     976:	69 2f       	mov	r22, r25
     978:	79 2f       	mov	r23, r25
     97a:	89 2f       	mov	r24, r25
     97c:	87 de       	rcall	.-754    	; 0x68c <SendSignedDecimalValue>
     97e:	75 01       	movw	r14, r10
     980:	95 c0       	rjmp	.+298    	; 0xaac <SendTrace+0x25c>
					break;
				}
				case 'u':
				{

					if(IsLong)
     982:	dd 20       	and	r13, r13
     984:	b9 f0       	breq	.+46     	; 0x9b4 <SendTrace+0x164>
					{

						SendDecimalValue(va_arg(ArgList, unsigned long));
     986:	37 01       	movw	r6, r14
     988:	f4 e0       	ldi	r31, 0x04	; 4
     98a:	6f 0e       	add	r6, r31
     98c:	71 1c       	adc	r7, r1
     98e:	f7 01       	movw	r30, r14
     990:	80 81       	ld	r24, Z
     992:	91 81       	ldd	r25, Z+1	; 0x01
     994:	a2 81       	ldd	r26, Z+2	; 0x02
     996:	b3 81       	ldd	r27, Z+3	; 0x03
     998:	4c 01       	movw	r8, r24
     99a:	5d 01       	movw	r10, r26
     99c:	28 2f       	mov	r18, r24
     99e:	39 2d       	mov	r19, r9
     9a0:	4a 2d       	mov	r20, r10
     9a2:	5b 2d       	mov	r21, r11
     9a4:	65 2d       	mov	r22, r5
     9a6:	75 2d       	mov	r23, r5
     9a8:	85 2d       	mov	r24, r5
     9aa:	95 2d       	mov	r25, r5
     9ac:	18 dd       	rcall	.-1488   	; 0x3de <SendDecimalValue>
     9ae:	73 01       	movw	r14, r6
						
						IsLong = FALSE;
     9b0:	d5 2c       	mov	r13, r5
     9b2:	7c c0       	rjmp	.+248    	; 0xaac <SendTrace+0x25c>
					
					}
					else if(IsLongLong)
     9b4:	44 20       	and	r4, r4
     9b6:	89 f0       	breq	.+34     	; 0x9da <SendTrace+0x18a>
					{
						SendDecimalValue(va_arg(ArgList, unsigned long long));
     9b8:	57 01       	movw	r10, r14
     9ba:	f8 e0       	ldi	r31, 0x08	; 8
     9bc:	af 0e       	add	r10, r31
     9be:	b1 1c       	adc	r11, r1
     9c0:	f7 01       	movw	r30, r14
     9c2:	20 81       	ld	r18, Z
     9c4:	31 81       	ldd	r19, Z+1	; 0x01
     9c6:	42 81       	ldd	r20, Z+2	; 0x02
     9c8:	53 81       	ldd	r21, Z+3	; 0x03
     9ca:	64 81       	ldd	r22, Z+4	; 0x04
     9cc:	75 81       	ldd	r23, Z+5	; 0x05
     9ce:	86 81       	ldd	r24, Z+6	; 0x06
     9d0:	97 81       	ldd	r25, Z+7	; 0x07
     9d2:	05 dd       	rcall	.-1526   	; 0x3de <SendDecimalValue>
     9d4:	75 01       	movw	r14, r10
						
						IsLongLong = FALSE;
     9d6:	45 2c       	mov	r4, r5
     9d8:	69 c0       	rjmp	.+210    	; 0xaac <SendTrace+0x25c>
					}
					else
					{

						SendDecimalValue(va_arg(ArgList, unsigned int));
     9da:	f7 01       	movw	r30, r14
     9dc:	40 81       	ld	r20, Z
     9de:	51 81       	ldd	r21, Z+1	; 0x01
     9e0:	f2 e0       	ldi	r31, 0x02	; 2
     9e2:	ef 0e       	add	r14, r31
     9e4:	f1 1c       	adc	r15, r1
     9e6:	24 2f       	mov	r18, r20
     9e8:	35 2f       	mov	r19, r21
     9ea:	45 2d       	mov	r20, r5
     9ec:	55 2d       	mov	r21, r5
     9ee:	65 2d       	mov	r22, r5
     9f0:	75 2d       	mov	r23, r5
     9f2:	85 2d       	mov	r24, r5
     9f4:	95 2d       	mov	r25, r5
     9f6:	f3 dc       	rcall	.-1562   	; 0x3de <SendDecimalValue>
     9f8:	59 c0       	rjmp	.+178    	; 0xaac <SendTrace+0x25c>
					break;
				}
				case 'x':
				{

					if (IsLong)
     9fa:	dd 20       	and	r13, r13
     9fc:	a9 f0       	breq	.+42     	; 0xa28 <SendTrace+0x1d8>
					{

						SendHexValue(va_arg(ArgList, unsigned long));
     9fe:	f7 01       	movw	r30, r14
     a00:	80 81       	ld	r24, Z
     a02:	91 81       	ldd	r25, Z+1	; 0x01
     a04:	a2 81       	ldd	r26, Z+2	; 0x02
     a06:	b3 81       	ldd	r27, Z+3	; 0x03
     a08:	24 e0       	ldi	r18, 0x04	; 4
     a0a:	e2 0e       	add	r14, r18
     a0c:	f1 1c       	adc	r15, r1
     a0e:	3c 01       	movw	r6, r24
     a10:	4d 01       	movw	r8, r26
     a12:	28 2f       	mov	r18, r24
     a14:	37 2d       	mov	r19, r7
     a16:	48 2d       	mov	r20, r8
     a18:	59 2d       	mov	r21, r9
     a1a:	65 2d       	mov	r22, r5
     a1c:	75 2d       	mov	r23, r5
     a1e:	85 2d       	mov	r24, r5
     a20:	95 2d       	mov	r25, r5
     a22:	3a dc       	rcall	.-1932   	; 0x298 <SendHexValue>

						IsLong = FALSE;
     a24:	d5 2c       	mov	r13, r5
     a26:	42 c0       	rjmp	.+132    	; 0xaac <SendTrace+0x25c>

					}
					else if (IsLongLong)
     a28:	44 20       	and	r4, r4
     a2a:	79 f0       	breq	.+30     	; 0xa4a <SendTrace+0x1fa>
					{
						SendHexValue(va_arg(ArgList, unsigned long long));
     a2c:	f7 01       	movw	r30, r14
     a2e:	20 81       	ld	r18, Z
     a30:	88 e0       	ldi	r24, 0x08	; 8
     a32:	e8 0e       	add	r14, r24
     a34:	f1 1c       	adc	r15, r1
     a36:	31 81       	ldd	r19, Z+1	; 0x01
     a38:	42 81       	ldd	r20, Z+2	; 0x02
     a3a:	53 81       	ldd	r21, Z+3	; 0x03
     a3c:	64 81       	ldd	r22, Z+4	; 0x04
     a3e:	75 81       	ldd	r23, Z+5	; 0x05
     a40:	86 81       	ldd	r24, Z+6	; 0x06
     a42:	97 81       	ldd	r25, Z+7	; 0x07
     a44:	29 dc       	rcall	.-1966   	; 0x298 <SendHexValue>
						
						IsLongLong = FALSE;
     a46:	45 2c       	mov	r4, r5
     a48:	31 c0       	rjmp	.+98     	; 0xaac <SendTrace+0x25c>
					}
					else
					{

						SendHexValue(va_arg(ArgList, unsigned int));
     a4a:	f7 01       	movw	r30, r14
     a4c:	40 81       	ld	r20, Z
     a4e:	51 81       	ldd	r21, Z+1	; 0x01
     a50:	e2 e0       	ldi	r30, 0x02	; 2
     a52:	ee 0e       	add	r14, r30
     a54:	f1 1c       	adc	r15, r1
     a56:	24 2f       	mov	r18, r20
     a58:	35 2f       	mov	r19, r21
     a5a:	45 2d       	mov	r20, r5
     a5c:	55 2d       	mov	r21, r5
     a5e:	65 2d       	mov	r22, r5
     a60:	75 2d       	mov	r23, r5
     a62:	85 2d       	mov	r24, r5
     a64:	95 2d       	mov	r25, r5
     a66:	18 dc       	rcall	.-2000   	; 0x298 <SendHexValue>
     a68:	21 c0       	rjmp	.+66     	; 0xaac <SendTrace+0x25c>
					break;
				}
				case 'l':
				{

					if (IsLong)
     a6a:	dd 20       	and	r13, r13
     a6c:	f1 f0       	breq	.+60     	; 0xaaa <SendTrace+0x25a>
					{
						IsLongLong = TRUE;
     a6e:	43 2c       	mov	r4, r3
						
						IsLong = FALSE;
     a70:	d5 2c       	mov	r13, r5
     a72:	1c c0       	rjmp	.+56     	; 0xaac <SendTrace+0x25c>
					break;
				}
				case 's':
				{
					
					SendStringValue(va_arg(ArgList, char *)); 
     a74:	f7 01       	movw	r30, r14
     a76:	80 81       	ld	r24, Z
     a78:	91 81       	ldd	r25, Z+1	; 0x01
     a7a:	f2 e0       	ldi	r31, 0x02	; 2
     a7c:	ef 0e       	add	r14, r31
     a7e:	f1 1c       	adc	r15, r1
     a80:	fd db       	rcall	.-2054   	; 0x27c <SendStringValue>

					break;
     a82:	14 c0       	rjmp	.+40     	; 0xaac <SendTrace+0x25c>
					if(IsLong)
					{
						IsLong = FALSE;
					}
					
					SendDoubleValue(va_arg(ArgList, double));
     a84:	f7 01       	movw	r30, r14
     a86:	60 81       	ld	r22, Z
     a88:	71 81       	ldd	r23, Z+1	; 0x01
     a8a:	82 81       	ldd	r24, Z+2	; 0x02
     a8c:	93 81       	ldd	r25, Z+3	; 0x03
     a8e:	24 e0       	ldi	r18, 0x04	; 4
     a90:	e2 0e       	add	r14, r18
     a92:	f1 1c       	adc	r15, r1
     a94:	5b dd       	rcall	.-1354   	; 0x54c <SendDoubleValue>
					
					break;
     a96:	d5 2c       	mov	r13, r5
     a98:	09 c0       	rjmp	.+18     	; 0xaac <SendTrace+0x25c>

		}
		else
		{

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
     a9a:	21 e0       	ldi	r18, 0x01	; 1
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	40 e0       	ldi	r20, 0x00	; 0
     aa0:	50 e0       	ldi	r21, 0x00	; 0
     aa2:	b8 01       	movw	r22, r16
     aa4:	85 2d       	mov	r24, r5
     aa6:	29 d3       	rcall	.+1618   	; 0x10fa <UARTTransmitSync>
     aa8:	01 c0       	rjmp	.+2      	; 0xaac <SendTrace+0x25c>
						
						IsLong = FALSE;
					}
					else
					{
						IsLong = TRUE;
     aaa:	d3 2c       	mov	r13, r3

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
				
		}

		String++;
     aac:	c8 01       	movw	r24, r16
     aae:	01 96       	adiw	r24, 0x01	; 1
		return;
	}

	va_start(ArgList, String);

	while (*String != '\0')
     ab0:	f8 01       	movw	r30, r16
     ab2:	21 81       	ldd	r18, Z+1	; 0x01
     ab4:	22 23       	and	r18, r18
     ab6:	11 f0       	breq	.+4      	; 0xabc <SendTrace+0x26c>

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
				
		}

		String++;
     ab8:	8c 01       	movw	r16, r24
     aba:	f9 ce       	rjmp	.-526    	; 0x8ae <SendTrace+0x5e>
		
	}
	
	va_end(ArgList);
	
}
     abc:	0f 90       	pop	r0
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	ff 90       	pop	r15
     ac8:	ef 90       	pop	r14
     aca:	df 90       	pop	r13
     acc:	cf 90       	pop	r12
     ace:	bf 90       	pop	r11
     ad0:	af 90       	pop	r10
     ad2:	9f 90       	pop	r9
     ad4:	8f 90       	pop	r8
     ad6:	7f 90       	pop	r7
     ad8:	6f 90       	pop	r6
     ada:	5f 90       	pop	r5
     adc:	4f 90       	pop	r4
     ade:	3f 90       	pop	r3
     ae0:	08 95       	ret

00000ae2 <__subsf3>:
     ae2:	50 58       	subi	r21, 0x80	; 128

00000ae4 <__addsf3>:
     ae4:	bb 27       	eor	r27, r27
     ae6:	aa 27       	eor	r26, r26
     ae8:	0e d0       	rcall	.+28     	; 0xb06 <__addsf3x>
     aea:	94 c1       	rjmp	.+808    	; 0xe14 <__fp_round>
     aec:	85 d1       	rcall	.+778    	; 0xdf8 <__fp_pscA>
     aee:	30 f0       	brcs	.+12     	; 0xafc <__addsf3+0x18>
     af0:	8a d1       	rcall	.+788    	; 0xe06 <__fp_pscB>
     af2:	20 f0       	brcs	.+8      	; 0xafc <__addsf3+0x18>
     af4:	31 f4       	brne	.+12     	; 0xb02 <__addsf3+0x1e>
     af6:	9f 3f       	cpi	r25, 0xFF	; 255
     af8:	11 f4       	brne	.+4      	; 0xafe <__addsf3+0x1a>
     afa:	1e f4       	brtc	.+6      	; 0xb02 <__addsf3+0x1e>
     afc:	6a c1       	rjmp	.+724    	; 0xdd2 <__fp_nan>
     afe:	0e f4       	brtc	.+2      	; 0xb02 <__addsf3+0x1e>
     b00:	e0 95       	com	r30
     b02:	e7 fb       	bst	r30, 7
     b04:	60 c1       	rjmp	.+704    	; 0xdc6 <__fp_inf>

00000b06 <__addsf3x>:
     b06:	e9 2f       	mov	r30, r25
     b08:	96 d1       	rcall	.+812    	; 0xe36 <__fp_split3>
     b0a:	80 f3       	brcs	.-32     	; 0xaec <__addsf3+0x8>
     b0c:	ba 17       	cp	r27, r26
     b0e:	62 07       	cpc	r22, r18
     b10:	73 07       	cpc	r23, r19
     b12:	84 07       	cpc	r24, r20
     b14:	95 07       	cpc	r25, r21
     b16:	18 f0       	brcs	.+6      	; 0xb1e <__addsf3x+0x18>
     b18:	71 f4       	brne	.+28     	; 0xb36 <__addsf3x+0x30>
     b1a:	9e f5       	brtc	.+102    	; 0xb82 <__addsf3x+0x7c>
     b1c:	ae c1       	rjmp	.+860    	; 0xe7a <__fp_zero>
     b1e:	0e f4       	brtc	.+2      	; 0xb22 <__addsf3x+0x1c>
     b20:	e0 95       	com	r30
     b22:	0b 2e       	mov	r0, r27
     b24:	ba 2f       	mov	r27, r26
     b26:	a0 2d       	mov	r26, r0
     b28:	0b 01       	movw	r0, r22
     b2a:	b9 01       	movw	r22, r18
     b2c:	90 01       	movw	r18, r0
     b2e:	0c 01       	movw	r0, r24
     b30:	ca 01       	movw	r24, r20
     b32:	a0 01       	movw	r20, r0
     b34:	11 24       	eor	r1, r1
     b36:	ff 27       	eor	r31, r31
     b38:	59 1b       	sub	r21, r25
     b3a:	99 f0       	breq	.+38     	; 0xb62 <__addsf3x+0x5c>
     b3c:	59 3f       	cpi	r21, 0xF9	; 249
     b3e:	50 f4       	brcc	.+20     	; 0xb54 <__addsf3x+0x4e>
     b40:	50 3e       	cpi	r21, 0xE0	; 224
     b42:	68 f1       	brcs	.+90     	; 0xb9e <__addsf3x+0x98>
     b44:	1a 16       	cp	r1, r26
     b46:	f0 40       	sbci	r31, 0x00	; 0
     b48:	a2 2f       	mov	r26, r18
     b4a:	23 2f       	mov	r18, r19
     b4c:	34 2f       	mov	r19, r20
     b4e:	44 27       	eor	r20, r20
     b50:	58 5f       	subi	r21, 0xF8	; 248
     b52:	f3 cf       	rjmp	.-26     	; 0xb3a <__addsf3x+0x34>
     b54:	46 95       	lsr	r20
     b56:	37 95       	ror	r19
     b58:	27 95       	ror	r18
     b5a:	a7 95       	ror	r26
     b5c:	f0 40       	sbci	r31, 0x00	; 0
     b5e:	53 95       	inc	r21
     b60:	c9 f7       	brne	.-14     	; 0xb54 <__addsf3x+0x4e>
     b62:	7e f4       	brtc	.+30     	; 0xb82 <__addsf3x+0x7c>
     b64:	1f 16       	cp	r1, r31
     b66:	ba 0b       	sbc	r27, r26
     b68:	62 0b       	sbc	r22, r18
     b6a:	73 0b       	sbc	r23, r19
     b6c:	84 0b       	sbc	r24, r20
     b6e:	ba f0       	brmi	.+46     	; 0xb9e <__addsf3x+0x98>
     b70:	91 50       	subi	r25, 0x01	; 1
     b72:	a1 f0       	breq	.+40     	; 0xb9c <__addsf3x+0x96>
     b74:	ff 0f       	add	r31, r31
     b76:	bb 1f       	adc	r27, r27
     b78:	66 1f       	adc	r22, r22
     b7a:	77 1f       	adc	r23, r23
     b7c:	88 1f       	adc	r24, r24
     b7e:	c2 f7       	brpl	.-16     	; 0xb70 <__addsf3x+0x6a>
     b80:	0e c0       	rjmp	.+28     	; 0xb9e <__addsf3x+0x98>
     b82:	ba 0f       	add	r27, r26
     b84:	62 1f       	adc	r22, r18
     b86:	73 1f       	adc	r23, r19
     b88:	84 1f       	adc	r24, r20
     b8a:	48 f4       	brcc	.+18     	; 0xb9e <__addsf3x+0x98>
     b8c:	87 95       	ror	r24
     b8e:	77 95       	ror	r23
     b90:	67 95       	ror	r22
     b92:	b7 95       	ror	r27
     b94:	f7 95       	ror	r31
     b96:	9e 3f       	cpi	r25, 0xFE	; 254
     b98:	08 f0       	brcs	.+2      	; 0xb9c <__addsf3x+0x96>
     b9a:	b3 cf       	rjmp	.-154    	; 0xb02 <__addsf3+0x1e>
     b9c:	93 95       	inc	r25
     b9e:	88 0f       	add	r24, r24
     ba0:	08 f0       	brcs	.+2      	; 0xba4 <__addsf3x+0x9e>
     ba2:	99 27       	eor	r25, r25
     ba4:	ee 0f       	add	r30, r30
     ba6:	97 95       	ror	r25
     ba8:	87 95       	ror	r24
     baa:	08 95       	ret

00000bac <__cmpsf2>:
     bac:	e8 d0       	rcall	.+464    	; 0xd7e <__fp_cmp>
     bae:	08 f4       	brcc	.+2      	; 0xbb2 <__cmpsf2+0x6>
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	08 95       	ret

00000bb4 <__fixsfdi>:
     bb4:	be e3       	ldi	r27, 0x3E	; 62
     bb6:	04 d0       	rcall	.+8      	; 0xbc0 <__fixunssfdi+0x2>
     bb8:	08 f4       	brcc	.+2      	; 0xbbc <__fixsfdi+0x8>
     bba:	90 e8       	ldi	r25, 0x80	; 128
     bbc:	08 95       	ret

00000bbe <__fixunssfdi>:
     bbe:	bf e3       	ldi	r27, 0x3F	; 63
     bc0:	22 27       	eor	r18, r18
     bc2:	33 27       	eor	r19, r19
     bc4:	a9 01       	movw	r20, r18
     bc6:	3f d1       	rcall	.+638    	; 0xe46 <__fp_splitA>
     bc8:	58 f1       	brcs	.+86     	; 0xc20 <__fixunssfdi+0x62>
     bca:	9f 57       	subi	r25, 0x7F	; 127
     bcc:	40 f1       	brcs	.+80     	; 0xc1e <__fixunssfdi+0x60>
     bce:	b9 17       	cp	r27, r25
     bd0:	38 f1       	brcs	.+78     	; 0xc20 <__fixunssfdi+0x62>
     bd2:	bf e3       	ldi	r27, 0x3F	; 63
     bd4:	b9 1b       	sub	r27, r25
     bd6:	99 27       	eor	r25, r25
     bd8:	b8 50       	subi	r27, 0x08	; 8
     bda:	3a f4       	brpl	.+14     	; 0xbea <__fixunssfdi+0x2c>
     bdc:	66 0f       	add	r22, r22
     bde:	77 1f       	adc	r23, r23
     be0:	88 1f       	adc	r24, r24
     be2:	99 1f       	adc	r25, r25
     be4:	b3 95       	inc	r27
     be6:	d2 f3       	brmi	.-12     	; 0xbdc <__fixunssfdi+0x1e>
     be8:	16 c0       	rjmp	.+44     	; 0xc16 <__fixunssfdi+0x58>
     bea:	b8 50       	subi	r27, 0x08	; 8
     bec:	4a f0       	brmi	.+18     	; 0xc00 <__fixunssfdi+0x42>
     bee:	23 2f       	mov	r18, r19
     bf0:	34 2f       	mov	r19, r20
     bf2:	45 2f       	mov	r20, r21
     bf4:	56 2f       	mov	r21, r22
     bf6:	67 2f       	mov	r22, r23
     bf8:	78 2f       	mov	r23, r24
     bfa:	88 27       	eor	r24, r24
     bfc:	b8 50       	subi	r27, 0x08	; 8
     bfe:	ba f7       	brpl	.-18     	; 0xbee <__fixunssfdi+0x30>
     c00:	b8 5f       	subi	r27, 0xF8	; 248
     c02:	49 f0       	breq	.+18     	; 0xc16 <__fixunssfdi+0x58>
     c04:	86 95       	lsr	r24
     c06:	77 95       	ror	r23
     c08:	67 95       	ror	r22
     c0a:	57 95       	ror	r21
     c0c:	47 95       	ror	r20
     c0e:	37 95       	ror	r19
     c10:	27 95       	ror	r18
     c12:	ba 95       	dec	r27
     c14:	b9 f7       	brne	.-18     	; 0xc04 <__fixunssfdi+0x46>
     c16:	0e f4       	brtc	.+2      	; 0xc1a <__fixunssfdi+0x5c>
     c18:	df d0       	rcall	.+446    	; 0xdd8 <__fp_negdi>
     c1a:	88 94       	clc
     c1c:	08 95       	ret
     c1e:	88 94       	clc
     c20:	60 e0       	ldi	r22, 0x00	; 0
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	cb 01       	movw	r24, r22
     c26:	08 95       	ret

00000c28 <__fixunssfsi>:
     c28:	0e d1       	rcall	.+540    	; 0xe46 <__fp_splitA>
     c2a:	88 f0       	brcs	.+34     	; 0xc4e <__fixunssfsi+0x26>
     c2c:	9f 57       	subi	r25, 0x7F	; 127
     c2e:	90 f0       	brcs	.+36     	; 0xc54 <__fixunssfsi+0x2c>
     c30:	b9 2f       	mov	r27, r25
     c32:	99 27       	eor	r25, r25
     c34:	b7 51       	subi	r27, 0x17	; 23
     c36:	a0 f0       	brcs	.+40     	; 0xc60 <__fixunssfsi+0x38>
     c38:	d1 f0       	breq	.+52     	; 0xc6e <__fixunssfsi+0x46>
     c3a:	66 0f       	add	r22, r22
     c3c:	77 1f       	adc	r23, r23
     c3e:	88 1f       	adc	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	1a f0       	brmi	.+6      	; 0xc4a <__fixunssfsi+0x22>
     c44:	ba 95       	dec	r27
     c46:	c9 f7       	brne	.-14     	; 0xc3a <__fixunssfsi+0x12>
     c48:	12 c0       	rjmp	.+36     	; 0xc6e <__fixunssfsi+0x46>
     c4a:	b1 30       	cpi	r27, 0x01	; 1
     c4c:	81 f0       	breq	.+32     	; 0xc6e <__fixunssfsi+0x46>
     c4e:	15 d1       	rcall	.+554    	; 0xe7a <__fp_zero>
     c50:	b1 e0       	ldi	r27, 0x01	; 1
     c52:	08 95       	ret
     c54:	12 c1       	rjmp	.+548    	; 0xe7a <__fp_zero>
     c56:	67 2f       	mov	r22, r23
     c58:	78 2f       	mov	r23, r24
     c5a:	88 27       	eor	r24, r24
     c5c:	b8 5f       	subi	r27, 0xF8	; 248
     c5e:	39 f0       	breq	.+14     	; 0xc6e <__fixunssfsi+0x46>
     c60:	b9 3f       	cpi	r27, 0xF9	; 249
     c62:	cc f3       	brlt	.-14     	; 0xc56 <__fixunssfsi+0x2e>
     c64:	86 95       	lsr	r24
     c66:	77 95       	ror	r23
     c68:	67 95       	ror	r22
     c6a:	b3 95       	inc	r27
     c6c:	d9 f7       	brne	.-10     	; 0xc64 <__fixunssfsi+0x3c>
     c6e:	3e f4       	brtc	.+14     	; 0xc7e <__fixunssfsi+0x56>
     c70:	90 95       	com	r25
     c72:	80 95       	com	r24
     c74:	70 95       	com	r23
     c76:	61 95       	neg	r22
     c78:	7f 4f       	sbci	r23, 0xFF	; 255
     c7a:	8f 4f       	sbci	r24, 0xFF	; 255
     c7c:	9f 4f       	sbci	r25, 0xFF	; 255
     c7e:	08 95       	ret

00000c80 <__floatdisf>:
     c80:	97 fb       	bst	r25, 7
     c82:	0e f4       	brtc	.+2      	; 0xc86 <__floatdisf+0x6>
     c84:	a9 d0       	rcall	.+338    	; 0xdd8 <__fp_negdi>
     c86:	3e c0       	rjmp	.+124    	; 0xd04 <__fp_di2sf>

00000c88 <__floatunsisf>:
     c88:	e8 94       	clt
     c8a:	09 c0       	rjmp	.+18     	; 0xc9e <__floatsisf+0x12>

00000c8c <__floatsisf>:
     c8c:	97 fb       	bst	r25, 7
     c8e:	3e f4       	brtc	.+14     	; 0xc9e <__floatsisf+0x12>
     c90:	90 95       	com	r25
     c92:	80 95       	com	r24
     c94:	70 95       	com	r23
     c96:	61 95       	neg	r22
     c98:	7f 4f       	sbci	r23, 0xFF	; 255
     c9a:	8f 4f       	sbci	r24, 0xFF	; 255
     c9c:	9f 4f       	sbci	r25, 0xFF	; 255
     c9e:	99 23       	and	r25, r25
     ca0:	a9 f0       	breq	.+42     	; 0xccc <__floatsisf+0x40>
     ca2:	f9 2f       	mov	r31, r25
     ca4:	96 e9       	ldi	r25, 0x96	; 150
     ca6:	bb 27       	eor	r27, r27
     ca8:	93 95       	inc	r25
     caa:	f6 95       	lsr	r31
     cac:	87 95       	ror	r24
     cae:	77 95       	ror	r23
     cb0:	67 95       	ror	r22
     cb2:	b7 95       	ror	r27
     cb4:	f1 11       	cpse	r31, r1
     cb6:	f8 cf       	rjmp	.-16     	; 0xca8 <__floatsisf+0x1c>
     cb8:	fa f4       	brpl	.+62     	; 0xcf8 <__floatsisf+0x6c>
     cba:	bb 0f       	add	r27, r27
     cbc:	11 f4       	brne	.+4      	; 0xcc2 <__floatsisf+0x36>
     cbe:	60 ff       	sbrs	r22, 0
     cc0:	1b c0       	rjmp	.+54     	; 0xcf8 <__floatsisf+0x6c>
     cc2:	6f 5f       	subi	r22, 0xFF	; 255
     cc4:	7f 4f       	sbci	r23, 0xFF	; 255
     cc6:	8f 4f       	sbci	r24, 0xFF	; 255
     cc8:	9f 4f       	sbci	r25, 0xFF	; 255
     cca:	16 c0       	rjmp	.+44     	; 0xcf8 <__floatsisf+0x6c>
     ccc:	88 23       	and	r24, r24
     cce:	11 f0       	breq	.+4      	; 0xcd4 <__floatsisf+0x48>
     cd0:	96 e9       	ldi	r25, 0x96	; 150
     cd2:	11 c0       	rjmp	.+34     	; 0xcf6 <__floatsisf+0x6a>
     cd4:	77 23       	and	r23, r23
     cd6:	21 f0       	breq	.+8      	; 0xce0 <__floatsisf+0x54>
     cd8:	9e e8       	ldi	r25, 0x8E	; 142
     cda:	87 2f       	mov	r24, r23
     cdc:	76 2f       	mov	r23, r22
     cde:	05 c0       	rjmp	.+10     	; 0xcea <__floatsisf+0x5e>
     ce0:	66 23       	and	r22, r22
     ce2:	71 f0       	breq	.+28     	; 0xd00 <__floatsisf+0x74>
     ce4:	96 e8       	ldi	r25, 0x86	; 134
     ce6:	86 2f       	mov	r24, r22
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	2a f0       	brmi	.+10     	; 0xcf8 <__floatsisf+0x6c>
     cee:	9a 95       	dec	r25
     cf0:	66 0f       	add	r22, r22
     cf2:	77 1f       	adc	r23, r23
     cf4:	88 1f       	adc	r24, r24
     cf6:	da f7       	brpl	.-10     	; 0xcee <__floatsisf+0x62>
     cf8:	88 0f       	add	r24, r24
     cfa:	96 95       	lsr	r25
     cfc:	87 95       	ror	r24
     cfe:	97 f9       	bld	r25, 7
     d00:	08 95       	ret

00000d02 <__floatundisf>:
     d02:	e8 94       	clt

00000d04 <__fp_di2sf>:
     d04:	f9 2f       	mov	r31, r25
     d06:	96 eb       	ldi	r25, 0xB6	; 182
     d08:	ff 23       	and	r31, r31
     d0a:	81 f0       	breq	.+32     	; 0xd2c <__fp_di2sf+0x28>
     d0c:	12 16       	cp	r1, r18
     d0e:	13 06       	cpc	r1, r19
     d10:	14 06       	cpc	r1, r20
     d12:	44 0b       	sbc	r20, r20
     d14:	93 95       	inc	r25
     d16:	f6 95       	lsr	r31
     d18:	87 95       	ror	r24
     d1a:	77 95       	ror	r23
     d1c:	67 95       	ror	r22
     d1e:	57 95       	ror	r21
     d20:	40 40       	sbci	r20, 0x00	; 0
     d22:	ff 23       	and	r31, r31
     d24:	b9 f7       	brne	.-18     	; 0xd14 <__fp_di2sf+0x10>
     d26:	1b c0       	rjmp	.+54     	; 0xd5e <__fp_di2sf+0x5a>
     d28:	99 27       	eor	r25, r25
     d2a:	08 95       	ret
     d2c:	88 23       	and	r24, r24
     d2e:	51 f4       	brne	.+20     	; 0xd44 <__fp_di2sf+0x40>
     d30:	98 50       	subi	r25, 0x08	; 8
     d32:	d2 f7       	brpl	.-12     	; 0xd28 <__fp_di2sf+0x24>
     d34:	87 2b       	or	r24, r23
     d36:	76 2f       	mov	r23, r22
     d38:	65 2f       	mov	r22, r21
     d3a:	54 2f       	mov	r21, r20
     d3c:	43 2f       	mov	r20, r19
     d3e:	32 2f       	mov	r19, r18
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	b1 f3       	breq	.-20     	; 0xd30 <__fp_di2sf+0x2c>
     d44:	12 16       	cp	r1, r18
     d46:	13 06       	cpc	r1, r19
     d48:	14 06       	cpc	r1, r20
     d4a:	44 0b       	sbc	r20, r20
     d4c:	88 23       	and	r24, r24
     d4e:	3a f0       	brmi	.+14     	; 0xd5e <__fp_di2sf+0x5a>
     d50:	9a 95       	dec	r25
     d52:	44 0f       	add	r20, r20
     d54:	55 1f       	adc	r21, r21
     d56:	66 1f       	adc	r22, r22
     d58:	77 1f       	adc	r23, r23
     d5a:	88 1f       	adc	r24, r24
     d5c:	ca f7       	brpl	.-14     	; 0xd50 <__fp_di2sf+0x4c>
     d5e:	55 23       	and	r21, r21
     d60:	4a f4       	brpl	.+18     	; 0xd74 <__fp_di2sf+0x70>
     d62:	44 0f       	add	r20, r20
     d64:	55 1f       	adc	r21, r21
     d66:	11 f4       	brne	.+4      	; 0xd6c <__fp_di2sf+0x68>
     d68:	60 ff       	sbrs	r22, 0
     d6a:	04 c0       	rjmp	.+8      	; 0xd74 <__fp_di2sf+0x70>
     d6c:	6f 5f       	subi	r22, 0xFF	; 255
     d6e:	7f 4f       	sbci	r23, 0xFF	; 255
     d70:	8f 4f       	sbci	r24, 0xFF	; 255
     d72:	9f 4f       	sbci	r25, 0xFF	; 255
     d74:	88 0f       	add	r24, r24
     d76:	96 95       	lsr	r25
     d78:	87 95       	ror	r24
     d7a:	97 f9       	bld	r25, 7
     d7c:	08 95       	ret

00000d7e <__fp_cmp>:
     d7e:	99 0f       	add	r25, r25
     d80:	00 08       	sbc	r0, r0
     d82:	55 0f       	add	r21, r21
     d84:	aa 0b       	sbc	r26, r26
     d86:	e0 e8       	ldi	r30, 0x80	; 128
     d88:	fe ef       	ldi	r31, 0xFE	; 254
     d8a:	16 16       	cp	r1, r22
     d8c:	17 06       	cpc	r1, r23
     d8e:	e8 07       	cpc	r30, r24
     d90:	f9 07       	cpc	r31, r25
     d92:	c0 f0       	brcs	.+48     	; 0xdc4 <__fp_cmp+0x46>
     d94:	12 16       	cp	r1, r18
     d96:	13 06       	cpc	r1, r19
     d98:	e4 07       	cpc	r30, r20
     d9a:	f5 07       	cpc	r31, r21
     d9c:	98 f0       	brcs	.+38     	; 0xdc4 <__fp_cmp+0x46>
     d9e:	62 1b       	sub	r22, r18
     da0:	73 0b       	sbc	r23, r19
     da2:	84 0b       	sbc	r24, r20
     da4:	95 0b       	sbc	r25, r21
     da6:	39 f4       	brne	.+14     	; 0xdb6 <__fp_cmp+0x38>
     da8:	0a 26       	eor	r0, r26
     daa:	61 f0       	breq	.+24     	; 0xdc4 <__fp_cmp+0x46>
     dac:	23 2b       	or	r18, r19
     dae:	24 2b       	or	r18, r20
     db0:	25 2b       	or	r18, r21
     db2:	21 f4       	brne	.+8      	; 0xdbc <__fp_cmp+0x3e>
     db4:	08 95       	ret
     db6:	0a 26       	eor	r0, r26
     db8:	09 f4       	brne	.+2      	; 0xdbc <__fp_cmp+0x3e>
     dba:	a1 40       	sbci	r26, 0x01	; 1
     dbc:	a6 95       	lsr	r26
     dbe:	8f ef       	ldi	r24, 0xFF	; 255
     dc0:	81 1d       	adc	r24, r1
     dc2:	81 1d       	adc	r24, r1
     dc4:	08 95       	ret

00000dc6 <__fp_inf>:
     dc6:	97 f9       	bld	r25, 7
     dc8:	9f 67       	ori	r25, 0x7F	; 127
     dca:	80 e8       	ldi	r24, 0x80	; 128
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	08 95       	ret

00000dd2 <__fp_nan>:
     dd2:	9f ef       	ldi	r25, 0xFF	; 255
     dd4:	80 ec       	ldi	r24, 0xC0	; 192
     dd6:	08 95       	ret

00000dd8 <__fp_negdi>:
     dd8:	90 95       	com	r25
     dda:	80 95       	com	r24
     ddc:	70 95       	com	r23
     dde:	60 95       	com	r22
     de0:	50 95       	com	r21
     de2:	40 95       	com	r20
     de4:	30 95       	com	r19
     de6:	21 95       	neg	r18
     de8:	3f 4f       	sbci	r19, 0xFF	; 255
     dea:	4f 4f       	sbci	r20, 0xFF	; 255
     dec:	5f 4f       	sbci	r21, 0xFF	; 255
     dee:	6f 4f       	sbci	r22, 0xFF	; 255
     df0:	7f 4f       	sbci	r23, 0xFF	; 255
     df2:	8f 4f       	sbci	r24, 0xFF	; 255
     df4:	9f 4f       	sbci	r25, 0xFF	; 255
     df6:	08 95       	ret

00000df8 <__fp_pscA>:
     df8:	00 24       	eor	r0, r0
     dfa:	0a 94       	dec	r0
     dfc:	16 16       	cp	r1, r22
     dfe:	17 06       	cpc	r1, r23
     e00:	18 06       	cpc	r1, r24
     e02:	09 06       	cpc	r0, r25
     e04:	08 95       	ret

00000e06 <__fp_pscB>:
     e06:	00 24       	eor	r0, r0
     e08:	0a 94       	dec	r0
     e0a:	12 16       	cp	r1, r18
     e0c:	13 06       	cpc	r1, r19
     e0e:	14 06       	cpc	r1, r20
     e10:	05 06       	cpc	r0, r21
     e12:	08 95       	ret

00000e14 <__fp_round>:
     e14:	09 2e       	mov	r0, r25
     e16:	03 94       	inc	r0
     e18:	00 0c       	add	r0, r0
     e1a:	11 f4       	brne	.+4      	; 0xe20 <__fp_round+0xc>
     e1c:	88 23       	and	r24, r24
     e1e:	52 f0       	brmi	.+20     	; 0xe34 <__fp_round+0x20>
     e20:	bb 0f       	add	r27, r27
     e22:	40 f4       	brcc	.+16     	; 0xe34 <__fp_round+0x20>
     e24:	bf 2b       	or	r27, r31
     e26:	11 f4       	brne	.+4      	; 0xe2c <__fp_round+0x18>
     e28:	60 ff       	sbrs	r22, 0
     e2a:	04 c0       	rjmp	.+8      	; 0xe34 <__fp_round+0x20>
     e2c:	6f 5f       	subi	r22, 0xFF	; 255
     e2e:	7f 4f       	sbci	r23, 0xFF	; 255
     e30:	8f 4f       	sbci	r24, 0xFF	; 255
     e32:	9f 4f       	sbci	r25, 0xFF	; 255
     e34:	08 95       	ret

00000e36 <__fp_split3>:
     e36:	57 fd       	sbrc	r21, 7
     e38:	90 58       	subi	r25, 0x80	; 128
     e3a:	44 0f       	add	r20, r20
     e3c:	55 1f       	adc	r21, r21
     e3e:	59 f0       	breq	.+22     	; 0xe56 <__fp_splitA+0x10>
     e40:	5f 3f       	cpi	r21, 0xFF	; 255
     e42:	71 f0       	breq	.+28     	; 0xe60 <__fp_splitA+0x1a>
     e44:	47 95       	ror	r20

00000e46 <__fp_splitA>:
     e46:	88 0f       	add	r24, r24
     e48:	97 fb       	bst	r25, 7
     e4a:	99 1f       	adc	r25, r25
     e4c:	61 f0       	breq	.+24     	; 0xe66 <__fp_splitA+0x20>
     e4e:	9f 3f       	cpi	r25, 0xFF	; 255
     e50:	79 f0       	breq	.+30     	; 0xe70 <__fp_splitA+0x2a>
     e52:	87 95       	ror	r24
     e54:	08 95       	ret
     e56:	12 16       	cp	r1, r18
     e58:	13 06       	cpc	r1, r19
     e5a:	14 06       	cpc	r1, r20
     e5c:	55 1f       	adc	r21, r21
     e5e:	f2 cf       	rjmp	.-28     	; 0xe44 <__fp_split3+0xe>
     e60:	46 95       	lsr	r20
     e62:	f1 df       	rcall	.-30     	; 0xe46 <__fp_splitA>
     e64:	08 c0       	rjmp	.+16     	; 0xe76 <__fp_splitA+0x30>
     e66:	16 16       	cp	r1, r22
     e68:	17 06       	cpc	r1, r23
     e6a:	18 06       	cpc	r1, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	f1 cf       	rjmp	.-30     	; 0xe52 <__fp_splitA+0xc>
     e70:	86 95       	lsr	r24
     e72:	71 05       	cpc	r23, r1
     e74:	61 05       	cpc	r22, r1
     e76:	08 94       	sec
     e78:	08 95       	ret

00000e7a <__fp_zero>:
     e7a:	e8 94       	clt

00000e7c <__fp_szero>:
     e7c:	bb 27       	eor	r27, r27
     e7e:	66 27       	eor	r22, r22
     e80:	77 27       	eor	r23, r23
     e82:	cb 01       	movw	r24, r22
     e84:	97 f9       	bld	r25, 7
     e86:	08 95       	ret

00000e88 <__mulsf3>:
     e88:	0b d0       	rcall	.+22     	; 0xea0 <__mulsf3x>
     e8a:	c4 cf       	rjmp	.-120    	; 0xe14 <__fp_round>
     e8c:	b5 df       	rcall	.-150    	; 0xdf8 <__fp_pscA>
     e8e:	28 f0       	brcs	.+10     	; 0xe9a <__mulsf3+0x12>
     e90:	ba df       	rcall	.-140    	; 0xe06 <__fp_pscB>
     e92:	18 f0       	brcs	.+6      	; 0xe9a <__mulsf3+0x12>
     e94:	95 23       	and	r25, r21
     e96:	09 f0       	breq	.+2      	; 0xe9a <__mulsf3+0x12>
     e98:	96 cf       	rjmp	.-212    	; 0xdc6 <__fp_inf>
     e9a:	9b cf       	rjmp	.-202    	; 0xdd2 <__fp_nan>
     e9c:	11 24       	eor	r1, r1
     e9e:	ee cf       	rjmp	.-36     	; 0xe7c <__fp_szero>

00000ea0 <__mulsf3x>:
     ea0:	ca df       	rcall	.-108    	; 0xe36 <__fp_split3>
     ea2:	a0 f3       	brcs	.-24     	; 0xe8c <__mulsf3+0x4>

00000ea4 <__mulsf3_pse>:
     ea4:	95 9f       	mul	r25, r21
     ea6:	d1 f3       	breq	.-12     	; 0xe9c <__mulsf3+0x14>
     ea8:	95 0f       	add	r25, r21
     eaa:	50 e0       	ldi	r21, 0x00	; 0
     eac:	55 1f       	adc	r21, r21
     eae:	62 9f       	mul	r22, r18
     eb0:	f0 01       	movw	r30, r0
     eb2:	72 9f       	mul	r23, r18
     eb4:	bb 27       	eor	r27, r27
     eb6:	f0 0d       	add	r31, r0
     eb8:	b1 1d       	adc	r27, r1
     eba:	63 9f       	mul	r22, r19
     ebc:	aa 27       	eor	r26, r26
     ebe:	f0 0d       	add	r31, r0
     ec0:	b1 1d       	adc	r27, r1
     ec2:	aa 1f       	adc	r26, r26
     ec4:	64 9f       	mul	r22, r20
     ec6:	66 27       	eor	r22, r22
     ec8:	b0 0d       	add	r27, r0
     eca:	a1 1d       	adc	r26, r1
     ecc:	66 1f       	adc	r22, r22
     ece:	82 9f       	mul	r24, r18
     ed0:	22 27       	eor	r18, r18
     ed2:	b0 0d       	add	r27, r0
     ed4:	a1 1d       	adc	r26, r1
     ed6:	62 1f       	adc	r22, r18
     ed8:	73 9f       	mul	r23, r19
     eda:	b0 0d       	add	r27, r0
     edc:	a1 1d       	adc	r26, r1
     ede:	62 1f       	adc	r22, r18
     ee0:	83 9f       	mul	r24, r19
     ee2:	a0 0d       	add	r26, r0
     ee4:	61 1d       	adc	r22, r1
     ee6:	22 1f       	adc	r18, r18
     ee8:	74 9f       	mul	r23, r20
     eea:	33 27       	eor	r19, r19
     eec:	a0 0d       	add	r26, r0
     eee:	61 1d       	adc	r22, r1
     ef0:	23 1f       	adc	r18, r19
     ef2:	84 9f       	mul	r24, r20
     ef4:	60 0d       	add	r22, r0
     ef6:	21 1d       	adc	r18, r1
     ef8:	82 2f       	mov	r24, r18
     efa:	76 2f       	mov	r23, r22
     efc:	6a 2f       	mov	r22, r26
     efe:	11 24       	eor	r1, r1
     f00:	9f 57       	subi	r25, 0x7F	; 127
     f02:	50 40       	sbci	r21, 0x00	; 0
     f04:	8a f0       	brmi	.+34     	; 0xf28 <__mulsf3_pse+0x84>
     f06:	e1 f0       	breq	.+56     	; 0xf40 <__mulsf3_pse+0x9c>
     f08:	88 23       	and	r24, r24
     f0a:	4a f0       	brmi	.+18     	; 0xf1e <__mulsf3_pse+0x7a>
     f0c:	ee 0f       	add	r30, r30
     f0e:	ff 1f       	adc	r31, r31
     f10:	bb 1f       	adc	r27, r27
     f12:	66 1f       	adc	r22, r22
     f14:	77 1f       	adc	r23, r23
     f16:	88 1f       	adc	r24, r24
     f18:	91 50       	subi	r25, 0x01	; 1
     f1a:	50 40       	sbci	r21, 0x00	; 0
     f1c:	a9 f7       	brne	.-22     	; 0xf08 <__mulsf3_pse+0x64>
     f1e:	9e 3f       	cpi	r25, 0xFE	; 254
     f20:	51 05       	cpc	r21, r1
     f22:	70 f0       	brcs	.+28     	; 0xf40 <__mulsf3_pse+0x9c>
     f24:	50 cf       	rjmp	.-352    	; 0xdc6 <__fp_inf>
     f26:	aa cf       	rjmp	.-172    	; 0xe7c <__fp_szero>
     f28:	5f 3f       	cpi	r21, 0xFF	; 255
     f2a:	ec f3       	brlt	.-6      	; 0xf26 <__mulsf3_pse+0x82>
     f2c:	98 3e       	cpi	r25, 0xE8	; 232
     f2e:	dc f3       	brlt	.-10     	; 0xf26 <__mulsf3_pse+0x82>
     f30:	86 95       	lsr	r24
     f32:	77 95       	ror	r23
     f34:	67 95       	ror	r22
     f36:	b7 95       	ror	r27
     f38:	f7 95       	ror	r31
     f3a:	e7 95       	ror	r30
     f3c:	9f 5f       	subi	r25, 0xFF	; 255
     f3e:	c1 f7       	brne	.-16     	; 0xf30 <__mulsf3_pse+0x8c>
     f40:	fe 2b       	or	r31, r30
     f42:	88 0f       	add	r24, r24
     f44:	91 1d       	adc	r25, r1
     f46:	96 95       	lsr	r25
     f48:	87 95       	ror	r24
     f4a:	97 f9       	bld	r25, 7
     f4c:	08 95       	ret

00000f4e <InitializeUARTTimer>:

unsigned long
UARTReceiveSync(UART_NUMBER UARTNumber, PVOID ReceiveValue, unsigned long Length)
{
	return UARTReceive(UARTNumber, ReceiveValue, Length, 0);
}
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	84 bd       	out	0x24, r24	; 36
     f52:	15 bc       	out	0x25, r1	; 37
     f54:	16 bc       	out	0x26, r1	; 38
     f56:	17 bc       	out	0x27, r1	; 39
     f58:	18 bc       	out	0x28, r1	; 40
     f5a:	80 93 6e 00 	sts	0x006E, r24
     f5e:	08 95       	ret

00000f60 <InitUARTSync>:
     f60:	cf 93       	push	r28
     f62:	40 93 4b 01 	sts	0x014B, r20
     f66:	88 23       	and	r24, r24
     f68:	19 f0       	breq	.+6      	; 0xf70 <InitUARTSync+0x10>
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	c9 f0       	breq	.+50     	; 0xfa0 <InitUARTSync+0x40>
     f6e:	30 c0       	rjmp	.+96     	; 0xfd0 <InitUARTSync+0x70>
     f70:	70 93 c5 00 	sts	0x00C5, r23
     f74:	60 93 c4 00 	sts	0x00C4, r22
     f78:	88 e9       	ldi	r24, 0x98	; 152
     f7a:	80 93 c1 00 	sts	0x00C1, r24
     f7e:	41 30       	cpi	r20, 0x01	; 1
     f80:	39 f4       	brne	.+14     	; 0xf90 <InitUARTSync+0x30>
     f82:	86 e0       	ldi	r24, 0x06	; 6
     f84:	80 93 c2 00 	sts	0x00C2, r24
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	80 93 c0 00 	sts	0x00C0, r24
     f8e:	03 c0       	rjmp	.+6      	; 0xf96 <InitUARTSync+0x36>
     f90:	86 e0       	ldi	r24, 0x06	; 6
     f92:	80 93 c2 00 	sts	0x00C2, r24
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	80 93 3a 01 	sts	0x013A, r24
     f9c:	c1 e0       	ldi	r28, 0x01	; 1
     f9e:	19 c0       	rjmp	.+50     	; 0xfd2 <InitUARTSync+0x72>
     fa0:	70 93 cd 00 	sts	0x00CD, r23
     fa4:	60 93 cc 00 	sts	0x00CC, r22
     fa8:	88 e9       	ldi	r24, 0x98	; 152
     faa:	80 93 c9 00 	sts	0x00C9, r24
     fae:	41 30       	cpi	r20, 0x01	; 1
     fb0:	39 f4       	brne	.+14     	; 0xfc0 <InitUARTSync+0x60>
     fb2:	86 e0       	ldi	r24, 0x06	; 6
     fb4:	80 93 ca 00 	sts	0x00CA, r24
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	80 93 c8 00 	sts	0x00C8, r24
     fbe:	03 c0       	rjmp	.+6      	; 0xfc6 <InitUARTSync+0x66>
     fc0:	86 e0       	ldi	r24, 0x06	; 6
     fc2:	80 93 ca 00 	sts	0x00CA, r24
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	80 93 3b 01 	sts	0x013B, r24
     fcc:	c1 e0       	ldi	r28, 0x01	; 1
     fce:	01 c0       	rjmp	.+2      	; 0xfd2 <InitUARTSync+0x72>
     fd0:	c0 e0       	ldi	r28, 0x00	; 0
     fd2:	bd df       	rcall	.-134    	; 0xf4e <InitializeUARTTimer>
     fd4:	8c 2f       	mov	r24, r28
     fd6:	cf 91       	pop	r28
     fd8:	08 95       	ret

00000fda <UARTTransmit>:
     fda:	cf 92       	push	r12
     fdc:	df 92       	push	r13
     fde:	ef 92       	push	r14
     fe0:	ff 92       	push	r15
     fe2:	0f 93       	push	r16
     fe4:	1f 93       	push	r17
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	6b 01       	movw	r12, r22
     fec:	88 23       	and	r24, r24
     fee:	19 f0       	breq	.+6      	; 0xff6 <UARTTransmit+0x1c>
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	c1 f1       	breq	.+112    	; 0x1064 <UARTTransmit+0x8a>
     ff4:	6c c0       	rjmp	.+216    	; 0x10ce <UARTTransmit+0xf4>
     ff6:	80 91 3a 01 	lds	r24, 0x013A
     ffa:	88 23       	and	r24, r24
     ffc:	09 f4       	brne	.+2      	; 0x1000 <UARTTransmit+0x26>
     ffe:	6b c0       	rjmp	.+214    	; 0x10d6 <UARTTransmit+0xfc>
    1000:	21 15       	cp	r18, r1
    1002:	31 05       	cpc	r19, r1
    1004:	41 05       	cpc	r20, r1
    1006:	51 05       	cpc	r21, r1
    1008:	09 f4       	brne	.+2      	; 0x100c <UARTTransmit+0x32>
    100a:	6c c0       	rjmp	.+216    	; 0x10e4 <UARTTransmit+0x10a>
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	dc 01       	movw	r26, r24
    1012:	c0 ec       	ldi	r28, 0xC0	; 192
    1014:	d0 e0       	ldi	r29, 0x00	; 0
    1016:	0f 2e       	mov	r0, r31
    1018:	f1 ec       	ldi	r31, 0xC1	; 193
    101a:	ef 2e       	mov	r14, r31
    101c:	f1 2c       	mov	r15, r1
    101e:	f0 2d       	mov	r31, r0
    1020:	66 ec       	ldi	r22, 0xC6	; 198
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	18 81       	ld	r17, Y
    1026:	15 ff       	sbrs	r17, 5
    1028:	fd cf       	rjmp	.-6      	; 0x1024 <UARTTransmit+0x4a>
    102a:	10 91 4b 01 	lds	r17, 0x014B
    102e:	11 23       	and	r17, r17
    1030:	59 f0       	breq	.+22     	; 0x1048 <UARTTransmit+0x6e>
    1032:	00 23       	and	r16, r16
    1034:	29 f0       	breq	.+10     	; 0x1040 <UARTTransmit+0x66>
    1036:	f7 01       	movw	r30, r14
    1038:	10 81       	ld	r17, Z
    103a:	11 60       	ori	r17, 0x01	; 1
    103c:	10 83       	st	Z, r17
    103e:	04 c0       	rjmp	.+8      	; 0x1048 <UARTTransmit+0x6e>
    1040:	f7 01       	movw	r30, r14
    1042:	10 81       	ld	r17, Z
    1044:	1e 7f       	andi	r17, 0xFE	; 254
    1046:	10 83       	st	Z, r17
    1048:	f6 01       	movw	r30, r12
    104a:	11 91       	ld	r17, Z+
    104c:	6f 01       	movw	r12, r30
    104e:	fb 01       	movw	r30, r22
    1050:	10 83       	st	Z, r17
    1052:	01 96       	adiw	r24, 0x01	; 1
    1054:	a1 1d       	adc	r26, r1
    1056:	b1 1d       	adc	r27, r1
    1058:	82 17       	cp	r24, r18
    105a:	93 07       	cpc	r25, r19
    105c:	a4 07       	cpc	r26, r20
    105e:	b5 07       	cpc	r27, r21
    1060:	09 f7       	brne	.-62     	; 0x1024 <UARTTransmit+0x4a>
    1062:	40 c0       	rjmp	.+128    	; 0x10e4 <UARTTransmit+0x10a>
    1064:	80 91 3b 01 	lds	r24, 0x013B
    1068:	88 23       	and	r24, r24
    106a:	c9 f1       	breq	.+114    	; 0x10de <UARTTransmit+0x104>
    106c:	21 15       	cp	r18, r1
    106e:	31 05       	cpc	r19, r1
    1070:	41 05       	cpc	r20, r1
    1072:	51 05       	cpc	r21, r1
    1074:	b9 f1       	breq	.+110    	; 0x10e4 <UARTTransmit+0x10a>
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	dc 01       	movw	r26, r24
    107c:	c8 ec       	ldi	r28, 0xC8	; 200
    107e:	d0 e0       	ldi	r29, 0x00	; 0
    1080:	0f 2e       	mov	r0, r31
    1082:	f9 ec       	ldi	r31, 0xC9	; 201
    1084:	ef 2e       	mov	r14, r31
    1086:	f1 2c       	mov	r15, r1
    1088:	f0 2d       	mov	r31, r0
    108a:	6e ec       	ldi	r22, 0xCE	; 206
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	18 81       	ld	r17, Y
    1090:	15 ff       	sbrs	r17, 5
    1092:	fd cf       	rjmp	.-6      	; 0x108e <UARTTransmit+0xb4>
    1094:	10 91 4b 01 	lds	r17, 0x014B
    1098:	11 23       	and	r17, r17
    109a:	59 f0       	breq	.+22     	; 0x10b2 <UARTTransmit+0xd8>
    109c:	00 23       	and	r16, r16
    109e:	29 f0       	breq	.+10     	; 0x10aa <UARTTransmit+0xd0>
    10a0:	f7 01       	movw	r30, r14
    10a2:	10 81       	ld	r17, Z
    10a4:	11 60       	ori	r17, 0x01	; 1
    10a6:	10 83       	st	Z, r17
    10a8:	04 c0       	rjmp	.+8      	; 0x10b2 <UARTTransmit+0xd8>
    10aa:	f7 01       	movw	r30, r14
    10ac:	10 81       	ld	r17, Z
    10ae:	1e 7f       	andi	r17, 0xFE	; 254
    10b0:	10 83       	st	Z, r17
    10b2:	f6 01       	movw	r30, r12
    10b4:	11 91       	ld	r17, Z+
    10b6:	6f 01       	movw	r12, r30
    10b8:	fb 01       	movw	r30, r22
    10ba:	10 83       	st	Z, r17
    10bc:	01 96       	adiw	r24, 0x01	; 1
    10be:	a1 1d       	adc	r26, r1
    10c0:	b1 1d       	adc	r27, r1
    10c2:	82 17       	cp	r24, r18
    10c4:	93 07       	cpc	r25, r19
    10c6:	a4 07       	cpc	r26, r20
    10c8:	b5 07       	cpc	r27, r21
    10ca:	09 f7       	brne	.-62     	; 0x108e <UARTTransmit+0xb4>
    10cc:	0b c0       	rjmp	.+22     	; 0x10e4 <UARTTransmit+0x10a>
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	a9 01       	movw	r20, r18
    10d4:	07 c0       	rjmp	.+14     	; 0x10e4 <UARTTransmit+0x10a>
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	a9 01       	movw	r20, r18
    10dc:	03 c0       	rjmp	.+6      	; 0x10e4 <UARTTransmit+0x10a>
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	a9 01       	movw	r20, r18
    10e4:	ca 01       	movw	r24, r20
    10e6:	b9 01       	movw	r22, r18
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	ff 90       	pop	r15
    10f2:	ef 90       	pop	r14
    10f4:	df 90       	pop	r13
    10f6:	cf 90       	pop	r12
    10f8:	08 95       	ret

000010fa <UARTTransmitSync>:
    10fa:	0f 93       	push	r16
    10fc:	00 e0       	ldi	r16, 0x00	; 0
    10fe:	6d df       	rcall	.-294    	; 0xfda <UARTTransmit>
    1100:	0f 91       	pop	r16
    1102:	08 95       	ret

00001104 <__vector_16>:
	return IndexI;

}

ISR(TIMER0_COMPA_vect)
{
    1104:	1f 92       	push	r1
    1106:	0f 92       	push	r0
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	0f 92       	push	r0
    110c:	11 24       	eor	r1, r1
    110e:	8f 93       	push	r24
	gUARTTimerTriggered = TRUE;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	80 93 4e 01 	sts	0x014E, r24
}
    1116:	8f 91       	pop	r24
    1118:	0f 90       	pop	r0
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	0f 90       	pop	r0
    111e:	1f 90       	pop	r1
    1120:	18 95       	reti

00001122 <__vector_20>:

ISR(USART0_RX_vect)
{
    1122:	1f 92       	push	r1
    1124:	0f 92       	push	r0
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	0f 92       	push	r0
    112a:	11 24       	eor	r1, r1
    112c:	0b b6       	in	r0, 0x3b	; 59
    112e:	0f 92       	push	r0
    1130:	2f 93       	push	r18
    1132:	3f 93       	push	r19
    1134:	4f 93       	push	r20
    1136:	5f 93       	push	r21
    1138:	6f 93       	push	r22
    113a:	7f 93       	push	r23
    113c:	8f 93       	push	r24
    113e:	9f 93       	push	r25
    1140:	af 93       	push	r26
    1142:	bf 93       	push	r27
    1144:	ef 93       	push	r30
    1146:	ff 93       	push	r31
	if(gRCICallback0 != NULL)
    1148:	e0 91 3d 01 	lds	r30, 0x013D
    114c:	f0 91 3e 01 	lds	r31, 0x013E
    1150:	30 97       	sbiw	r30, 0x00	; 0
    1152:	31 f0       	breq	.+12     	; 0x1160 <__vector_20+0x3e>
	{
		gRCICallback0(UART_ZERO, gRCICallbackContext0);
    1154:	60 91 49 01 	lds	r22, 0x0149
    1158:	70 91 4a 01 	lds	r23, 0x014A
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	09 95       	icall
	}
}
    1160:	ff 91       	pop	r31
    1162:	ef 91       	pop	r30
    1164:	bf 91       	pop	r27
    1166:	af 91       	pop	r26
    1168:	9f 91       	pop	r25
    116a:	8f 91       	pop	r24
    116c:	7f 91       	pop	r23
    116e:	6f 91       	pop	r22
    1170:	5f 91       	pop	r21
    1172:	4f 91       	pop	r20
    1174:	3f 91       	pop	r19
    1176:	2f 91       	pop	r18
    1178:	0f 90       	pop	r0
    117a:	0b be       	out	0x3b, r0	; 59
    117c:	0f 90       	pop	r0
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	0f 90       	pop	r0
    1182:	1f 90       	pop	r1
    1184:	18 95       	reti

00001186 <__vector_28>:

ISR(USART1_RX_vect)
{
    1186:	1f 92       	push	r1
    1188:	0f 92       	push	r0
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	0f 92       	push	r0
    118e:	11 24       	eor	r1, r1
    1190:	0b b6       	in	r0, 0x3b	; 59
    1192:	0f 92       	push	r0
    1194:	2f 93       	push	r18
    1196:	3f 93       	push	r19
    1198:	4f 93       	push	r20
    119a:	5f 93       	push	r21
    119c:	6f 93       	push	r22
    119e:	7f 93       	push	r23
    11a0:	8f 93       	push	r24
    11a2:	9f 93       	push	r25
    11a4:	af 93       	push	r26
    11a6:	bf 93       	push	r27
    11a8:	ef 93       	push	r30
    11aa:	ff 93       	push	r31
	if(gRCICallback1 != NULL)
    11ac:	e0 91 43 01 	lds	r30, 0x0143
    11b0:	f0 91 44 01 	lds	r31, 0x0144
    11b4:	30 97       	sbiw	r30, 0x00	; 0
    11b6:	31 f0       	breq	.+12     	; 0x11c4 <__vector_28+0x3e>
	{
		gRCICallback1(UART_ONE, gRCICallbackContext1);
    11b8:	60 91 41 01 	lds	r22, 0x0141
    11bc:	70 91 42 01 	lds	r23, 0x0142
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	09 95       	icall
	}
}
    11c4:	ff 91       	pop	r31
    11c6:	ef 91       	pop	r30
    11c8:	bf 91       	pop	r27
    11ca:	af 91       	pop	r26
    11cc:	9f 91       	pop	r25
    11ce:	8f 91       	pop	r24
    11d0:	7f 91       	pop	r23
    11d2:	6f 91       	pop	r22
    11d4:	5f 91       	pop	r21
    11d6:	4f 91       	pop	r20
    11d8:	3f 91       	pop	r19
    11da:	2f 91       	pop	r18
    11dc:	0f 90       	pop	r0
    11de:	0b be       	out	0x3b, r0	; 59
    11e0:	0f 90       	pop	r0
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	0f 90       	pop	r0
    11e6:	1f 90       	pop	r1
    11e8:	18 95       	reti

000011ea <__vector_22>:

ISR(USART0_TX_vect)
{
    11ea:	1f 92       	push	r1
    11ec:	0f 92       	push	r0
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	0f 92       	push	r0
    11f2:	11 24       	eor	r1, r1
    11f4:	0b b6       	in	r0, 0x3b	; 59
    11f6:	0f 92       	push	r0
    11f8:	2f 93       	push	r18
    11fa:	3f 93       	push	r19
    11fc:	4f 93       	push	r20
    11fe:	5f 93       	push	r21
    1200:	6f 93       	push	r22
    1202:	7f 93       	push	r23
    1204:	8f 93       	push	r24
    1206:	9f 93       	push	r25
    1208:	af 93       	push	r26
    120a:	bf 93       	push	r27
    120c:	ef 93       	push	r30
    120e:	ff 93       	push	r31
	if(gTCICallback0 != NULL)
    1210:	e0 91 3f 01 	lds	r30, 0x013F
    1214:	f0 91 40 01 	lds	r31, 0x0140
    1218:	30 97       	sbiw	r30, 0x00	; 0
    121a:	31 f0       	breq	.+12     	; 0x1228 <__vector_22+0x3e>
	{
		gTCICallback0(UART_ZERO, gTCICallbackContext0);
    121c:	60 91 47 01 	lds	r22, 0x0147
    1220:	70 91 48 01 	lds	r23, 0x0148
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	09 95       	icall
	}
}
    1228:	ff 91       	pop	r31
    122a:	ef 91       	pop	r30
    122c:	bf 91       	pop	r27
    122e:	af 91       	pop	r26
    1230:	9f 91       	pop	r25
    1232:	8f 91       	pop	r24
    1234:	7f 91       	pop	r23
    1236:	6f 91       	pop	r22
    1238:	5f 91       	pop	r21
    123a:	4f 91       	pop	r20
    123c:	3f 91       	pop	r19
    123e:	2f 91       	pop	r18
    1240:	0f 90       	pop	r0
    1242:	0b be       	out	0x3b, r0	; 59
    1244:	0f 90       	pop	r0
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	0f 90       	pop	r0
    124a:	1f 90       	pop	r1
    124c:	18 95       	reti

0000124e <__vector_30>:

ISR(USART1_TX_vect)
{
    124e:	1f 92       	push	r1
    1250:	0f 92       	push	r0
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	0f 92       	push	r0
    1256:	11 24       	eor	r1, r1
    1258:	0b b6       	in	r0, 0x3b	; 59
    125a:	0f 92       	push	r0
    125c:	2f 93       	push	r18
    125e:	3f 93       	push	r19
    1260:	4f 93       	push	r20
    1262:	5f 93       	push	r21
    1264:	6f 93       	push	r22
    1266:	7f 93       	push	r23
    1268:	8f 93       	push	r24
    126a:	9f 93       	push	r25
    126c:	af 93       	push	r26
    126e:	bf 93       	push	r27
    1270:	ef 93       	push	r30
    1272:	ff 93       	push	r31
	if(gTCICallback1 != NULL)
    1274:	e0 91 45 01 	lds	r30, 0x0145
    1278:	f0 91 46 01 	lds	r31, 0x0146
    127c:	30 97       	sbiw	r30, 0x00	; 0
    127e:	31 f0       	breq	.+12     	; 0x128c <__vector_30+0x3e>
	{
		gTCICallback1(UART_ONE, gTCICallbackContext1);
    1280:	60 91 4c 01 	lds	r22, 0x014C
    1284:	70 91 4d 01 	lds	r23, 0x014D
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	09 95       	icall
	}
    128c:	ff 91       	pop	r31
    128e:	ef 91       	pop	r30
    1290:	bf 91       	pop	r27
    1292:	af 91       	pop	r26
    1294:	9f 91       	pop	r25
    1296:	8f 91       	pop	r24
    1298:	7f 91       	pop	r23
    129a:	6f 91       	pop	r22
    129c:	5f 91       	pop	r21
    129e:	4f 91       	pop	r20
    12a0:	3f 91       	pop	r19
    12a2:	2f 91       	pop	r18
    12a4:	0f 90       	pop	r0
    12a6:	0b be       	out	0x3b, r0	; 59
    12a8:	0f 90       	pop	r0
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	0f 90       	pop	r0
    12ae:	1f 90       	pop	r1
    12b0:	18 95       	reti

000012b2 <__tablejump2__>:
    12b2:	ee 0f       	add	r30, r30
    12b4:	ff 1f       	adc	r31, r31

000012b6 <__tablejump__>:
    12b6:	05 90       	lpm	r0, Z+
    12b8:	f4 91       	lpm	r31, Z
    12ba:	e0 2d       	mov	r30, r0
    12bc:	09 94       	ijmp

000012be <__moddi3>:
    12be:	68 94       	set
    12c0:	01 c0       	rjmp	.+2      	; 0x12c4 <__divdi3_moddi3>

000012c2 <__divdi3>:
    12c2:	e8 94       	clt

000012c4 <__divdi3_moddi3>:
    12c4:	f9 2f       	mov	r31, r25
    12c6:	f1 2b       	or	r31, r17
    12c8:	0a f0       	brmi	.+2      	; 0x12cc <__divdi3_moddi3+0x8>
    12ca:	27 c0       	rjmp	.+78     	; 0x131a <__udivdi3_umoddi3>
    12cc:	a0 e0       	ldi	r26, 0x00	; 0
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	eb e6       	ldi	r30, 0x6B	; 107
    12d2:	f9 e0       	ldi	r31, 0x09	; 9
    12d4:	93 c0       	rjmp	.+294    	; 0x13fc <__prologue_saves__+0xc>
    12d6:	09 2e       	mov	r0, r25
    12d8:	05 94       	asr	r0
    12da:	1a f4       	brpl	.+6      	; 0x12e2 <__divdi3_moddi3+0x1e>
    12dc:	79 d0       	rcall	.+242    	; 0x13d0 <__negdi2>
    12de:	11 23       	and	r17, r17
    12e0:	92 f4       	brpl	.+36     	; 0x1306 <__divdi3_moddi3+0x42>
    12e2:	f0 e8       	ldi	r31, 0x80	; 128
    12e4:	0f 26       	eor	r0, r31
    12e6:	ff ef       	ldi	r31, 0xFF	; 255
    12e8:	e0 94       	com	r14
    12ea:	f0 94       	com	r15
    12ec:	00 95       	com	r16
    12ee:	10 95       	com	r17
    12f0:	b0 94       	com	r11
    12f2:	c0 94       	com	r12
    12f4:	d0 94       	com	r13
    12f6:	a1 94       	neg	r10
    12f8:	bf 0a       	sbc	r11, r31
    12fa:	cf 0a       	sbc	r12, r31
    12fc:	df 0a       	sbc	r13, r31
    12fe:	ef 0a       	sbc	r14, r31
    1300:	ff 0a       	sbc	r15, r31
    1302:	0f 0b       	sbc	r16, r31
    1304:	1f 0b       	sbc	r17, r31
    1306:	13 d0       	rcall	.+38     	; 0x132e <__udivmod64>
    1308:	07 fc       	sbrc	r0, 7
    130a:	62 d0       	rcall	.+196    	; 0x13d0 <__negdi2>
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	ec e0       	ldi	r30, 0x0C	; 12
    1312:	90 c0       	rjmp	.+288    	; 0x1434 <__epilogue_restores__+0xc>

00001314 <__umoddi3>:
    1314:	68 94       	set
    1316:	01 c0       	rjmp	.+2      	; 0x131a <__udivdi3_umoddi3>

00001318 <__udivdi3>:
    1318:	e8 94       	clt

0000131a <__udivdi3_umoddi3>:
    131a:	8f 92       	push	r8
    131c:	9f 92       	push	r9
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	05 d0       	rcall	.+10     	; 0x132e <__udivmod64>
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	9f 90       	pop	r9
    132a:	8f 90       	pop	r8
    132c:	08 95       	ret

0000132e <__udivmod64>:
    132e:	88 24       	eor	r8, r8
    1330:	99 24       	eor	r9, r9
    1332:	f4 01       	movw	r30, r8
    1334:	e4 01       	movw	r28, r8
    1336:	b0 e4       	ldi	r27, 0x40	; 64
    1338:	9f 93       	push	r25
    133a:	aa 27       	eor	r26, r26
    133c:	9a 15       	cp	r25, r10
    133e:	8b 04       	cpc	r8, r11
    1340:	9c 04       	cpc	r9, r12
    1342:	ed 05       	cpc	r30, r13
    1344:	fe 05       	cpc	r31, r14
    1346:	cf 05       	cpc	r28, r15
    1348:	d0 07       	cpc	r29, r16
    134a:	a1 07       	cpc	r26, r17
    134c:	98 f4       	brcc	.+38     	; 0x1374 <__udivmod64+0x46>
    134e:	ad 2f       	mov	r26, r29
    1350:	dc 2f       	mov	r29, r28
    1352:	cf 2f       	mov	r28, r31
    1354:	fe 2f       	mov	r31, r30
    1356:	e9 2d       	mov	r30, r9
    1358:	98 2c       	mov	r9, r8
    135a:	89 2e       	mov	r8, r25
    135c:	98 2f       	mov	r25, r24
    135e:	87 2f       	mov	r24, r23
    1360:	76 2f       	mov	r23, r22
    1362:	65 2f       	mov	r22, r21
    1364:	54 2f       	mov	r21, r20
    1366:	43 2f       	mov	r20, r19
    1368:	32 2f       	mov	r19, r18
    136a:	22 27       	eor	r18, r18
    136c:	b8 50       	subi	r27, 0x08	; 8
    136e:	31 f7       	brne	.-52     	; 0x133c <__udivmod64+0xe>
    1370:	bf 91       	pop	r27
    1372:	27 c0       	rjmp	.+78     	; 0x13c2 <__udivmod64+0x94>
    1374:	1b 2e       	mov	r1, r27
    1376:	bf 91       	pop	r27
    1378:	bb 27       	eor	r27, r27
    137a:	22 0f       	add	r18, r18
    137c:	33 1f       	adc	r19, r19
    137e:	44 1f       	adc	r20, r20
    1380:	55 1f       	adc	r21, r21
    1382:	66 1f       	adc	r22, r22
    1384:	77 1f       	adc	r23, r23
    1386:	88 1f       	adc	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	88 1c       	adc	r8, r8
    138c:	99 1c       	adc	r9, r9
    138e:	ee 1f       	adc	r30, r30
    1390:	ff 1f       	adc	r31, r31
    1392:	cc 1f       	adc	r28, r28
    1394:	dd 1f       	adc	r29, r29
    1396:	aa 1f       	adc	r26, r26
    1398:	bb 1f       	adc	r27, r27
    139a:	8a 14       	cp	r8, r10
    139c:	9b 04       	cpc	r9, r11
    139e:	ec 05       	cpc	r30, r12
    13a0:	fd 05       	cpc	r31, r13
    13a2:	ce 05       	cpc	r28, r14
    13a4:	df 05       	cpc	r29, r15
    13a6:	a0 07       	cpc	r26, r16
    13a8:	b1 07       	cpc	r27, r17
    13aa:	48 f0       	brcs	.+18     	; 0x13be <__udivmod64+0x90>
    13ac:	8a 18       	sub	r8, r10
    13ae:	9b 08       	sbc	r9, r11
    13b0:	ec 09       	sbc	r30, r12
    13b2:	fd 09       	sbc	r31, r13
    13b4:	ce 09       	sbc	r28, r14
    13b6:	df 09       	sbc	r29, r15
    13b8:	a0 0b       	sbc	r26, r16
    13ba:	b1 0b       	sbc	r27, r17
    13bc:	21 60       	ori	r18, 0x01	; 1
    13be:	1a 94       	dec	r1
    13c0:	e1 f6       	brne	.-72     	; 0x137a <__udivmod64+0x4c>
    13c2:	2e f4       	brtc	.+10     	; 0x13ce <__udivmod64+0xa0>
    13c4:	94 01       	movw	r18, r8
    13c6:	af 01       	movw	r20, r30
    13c8:	be 01       	movw	r22, r28
    13ca:	cd 01       	movw	r24, r26
    13cc:	00 0c       	add	r0, r0
    13ce:	08 95       	ret

000013d0 <__negdi2>:
    13d0:	60 95       	com	r22
    13d2:	70 95       	com	r23
    13d4:	80 95       	com	r24
    13d6:	90 95       	com	r25
    13d8:	30 95       	com	r19
    13da:	40 95       	com	r20
    13dc:	50 95       	com	r21
    13de:	21 95       	neg	r18
    13e0:	3f 4f       	sbci	r19, 0xFF	; 255
    13e2:	4f 4f       	sbci	r20, 0xFF	; 255
    13e4:	5f 4f       	sbci	r21, 0xFF	; 255
    13e6:	6f 4f       	sbci	r22, 0xFF	; 255
    13e8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ea:	8f 4f       	sbci	r24, 0xFF	; 255
    13ec:	9f 4f       	sbci	r25, 0xFF	; 255
    13ee:	08 95       	ret

000013f0 <__prologue_saves__>:
    13f0:	2f 92       	push	r2
    13f2:	3f 92       	push	r3
    13f4:	4f 92       	push	r4
    13f6:	5f 92       	push	r5
    13f8:	6f 92       	push	r6
    13fa:	7f 92       	push	r7
    13fc:	8f 92       	push	r8
    13fe:	9f 92       	push	r9
    1400:	af 92       	push	r10
    1402:	bf 92       	push	r11
    1404:	cf 92       	push	r12
    1406:	df 92       	push	r13
    1408:	ef 92       	push	r14
    140a:	ff 92       	push	r15
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	ca 1b       	sub	r28, r26
    141a:	db 0b       	sbc	r29, r27
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	de bf       	out	0x3e, r29	; 62
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	cd bf       	out	0x3d, r28	; 61
    1426:	09 94       	ijmp

00001428 <__epilogue_restores__>:
    1428:	2a 88       	ldd	r2, Y+18	; 0x12
    142a:	39 88       	ldd	r3, Y+17	; 0x11
    142c:	48 88       	ldd	r4, Y+16	; 0x10
    142e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1430:	6e 84       	ldd	r6, Y+14	; 0x0e
    1432:	7d 84       	ldd	r7, Y+13	; 0x0d
    1434:	8c 84       	ldd	r8, Y+12	; 0x0c
    1436:	9b 84       	ldd	r9, Y+11	; 0x0b
    1438:	aa 84       	ldd	r10, Y+10	; 0x0a
    143a:	b9 84       	ldd	r11, Y+9	; 0x09
    143c:	c8 84       	ldd	r12, Y+8	; 0x08
    143e:	df 80       	ldd	r13, Y+7	; 0x07
    1440:	ee 80       	ldd	r14, Y+6	; 0x06
    1442:	fd 80       	ldd	r15, Y+5	; 0x05
    1444:	0c 81       	ldd	r16, Y+4	; 0x04
    1446:	1b 81       	ldd	r17, Y+3	; 0x03
    1448:	aa 81       	ldd	r26, Y+2	; 0x02
    144a:	b9 81       	ldd	r27, Y+1	; 0x01
    144c:	ce 0f       	add	r28, r30
    144e:	d1 1d       	adc	r29, r1
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	ed 01       	movw	r28, r26
    145c:	08 95       	ret

0000145e <__ashrdi3>:
    145e:	97 fb       	bst	r25, 7
    1460:	10 f8       	bld	r1, 0

00001462 <__lshrdi3>:
    1462:	16 94       	lsr	r1
    1464:	00 08       	sbc	r0, r0
    1466:	0f 93       	push	r16
    1468:	08 30       	cpi	r16, 0x08	; 8
    146a:	98 f0       	brcs	.+38     	; 0x1492 <__lshrdi3+0x30>
    146c:	08 50       	subi	r16, 0x08	; 8
    146e:	23 2f       	mov	r18, r19
    1470:	34 2f       	mov	r19, r20
    1472:	45 2f       	mov	r20, r21
    1474:	56 2f       	mov	r21, r22
    1476:	67 2f       	mov	r22, r23
    1478:	78 2f       	mov	r23, r24
    147a:	89 2f       	mov	r24, r25
    147c:	90 2d       	mov	r25, r0
    147e:	f4 cf       	rjmp	.-24     	; 0x1468 <__lshrdi3+0x6>
    1480:	05 94       	asr	r0
    1482:	97 95       	ror	r25
    1484:	87 95       	ror	r24
    1486:	77 95       	ror	r23
    1488:	67 95       	ror	r22
    148a:	57 95       	ror	r21
    148c:	47 95       	ror	r20
    148e:	37 95       	ror	r19
    1490:	27 95       	ror	r18
    1492:	0a 95       	dec	r16
    1494:	aa f7       	brpl	.-22     	; 0x1480 <__lshrdi3+0x1e>
    1496:	0f 91       	pop	r16
    1498:	08 95       	ret

0000149a <__cmpdi2_s8>:
    149a:	00 24       	eor	r0, r0
    149c:	a7 fd       	sbrc	r26, 7
    149e:	00 94       	com	r0
    14a0:	2a 17       	cp	r18, r26
    14a2:	30 05       	cpc	r19, r0
    14a4:	40 05       	cpc	r20, r0
    14a6:	50 05       	cpc	r21, r0
    14a8:	60 05       	cpc	r22, r0
    14aa:	70 05       	cpc	r23, r0
    14ac:	80 05       	cpc	r24, r0
    14ae:	90 05       	cpc	r25, r0
    14b0:	08 95       	ret

000014b2 <_exit>:
    14b2:	f8 94       	cli

000014b4 <__stop_program>:
    14b4:	ff cf       	rjmp	.-2      	; 0x14b4 <__stop_program>
