
LCDTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000370  00800100  00001378  0000140c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001378  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800470  00800470  0000177c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000177c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d8d  00000000  00000000  00001914  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000091b  00000000  00000000  000036a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000125e  00000000  00000000  00003fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006b0  00000000  00000000  0000521c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a1d  00000000  00000000  000058cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002b87  00000000  00000000  000062e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  00008e70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e7       	ldi	r30, 0x78	; 120
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 37       	cpi	r26, 0x70	; 112
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	24 e0       	ldi	r18, 0x04	; 4
      b4:	a0 e7       	ldi	r26, 0x70	; 112
      b6:	b4 e0       	ldi	r27, 0x04	; 4
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	af 37       	cpi	r26, 0x7F	; 127
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	03 d0       	rcall	.+6      	; 0xca <main>
      c4:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <main>:
#define MAX_CHARACTERS  0x10

#define MAX_LINES		0x2

int main(void)
{
      ca:	1f 93       	push	r17
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
      d0:	00 d0       	rcall	.+0      	; 0xd2 <main+0x8>
      d2:	00 d0       	rcall	.+0      	; 0xd4 <main+0xa>
      d4:	1f 92       	push	r1
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
	bool Status;
	
	LCD_INIT_PARAMS InitParams;
	
	InitTrace(F_CPU, (ERROR_LEVEL | INFO_LEVEL));
      da:	45 e0       	ldi	r20, 0x05	; 5
      dc:	60 e0       	ldi	r22, 0x00	; 0
      de:	72 e1       	ldi	r23, 0x12	; 18
      e0:	8a e7       	ldi	r24, 0x7A	; 122
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	46 d0       	rcall	.+140    	; 0x172 <InitTrace>
	
	SendTrace(INFO_LEVEL,"LCD Test\r\n");
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	91 e0       	ldi	r25, 0x01	; 1
      ea:	9f 93       	push	r25
      ec:	8f 93       	push	r24
      ee:	14 e0       	ldi	r17, 0x04	; 4
      f0:	1f 93       	push	r17
      f2:	9b d2       	rcall	.+1334   	; 0x62a <SendTrace>
	
	SendTrace(INFO_LEVEL,"---------\r\n");
      f4:	8b e0       	ldi	r24, 0x0B	; 11
      f6:	91 e0       	ldi	r25, 0x01	; 1
      f8:	9f 93       	push	r25
      fa:	8f 93       	push	r24
      fc:	1f 93       	push	r17
      fe:	95 d2       	rcall	.+1322   	; 0x62a <SendTrace>
	
	//
	// Initialize Init Params Structure
	//
	
	InitParams.Flags.AsUINT16 = 0;
     100:	1a 82       	std	Y+2, r1	; 0x02
     102:	19 82       	std	Y+1, r1	; 0x01
	
	InitParams.Flags.IsDisplayShift = 1;
	
	InitParams.Flags.IsIncrementPos = 0;
	
	InitParams.Flags.IsAutoScroll = 0;
     104:	8d e5       	ldi	r24, 0x5D	; 93
     106:	8f 77       	andi	r24, 0x7F	; 127
     108:	89 83       	std	Y+1, r24	; 0x01
	// Set LCD Address
	//
	
	InitParams.SlaveAddress.AsUINT8 = 0;
	
	InitParams.SlaveAddress.Address = LCD_ADDRESS;
     10a:	8e e4       	ldi	r24, 0x4E	; 78
     10c:	8d 83       	std	Y+5, r24	; 0x05
	
	//
	// Set Max Characters per line and number of lines
	//
	
	InitParams.MaxCharacters = MAX_CHARACTERS;
     10e:	80 e1       	ldi	r24, 0x10	; 16
     110:	8c 83       	std	Y+4, r24	; 0x04
	
	InitParams.MaxLines = MAX_LINES;
     112:	82 e0       	ldi	r24, 0x02	; 2
     114:	8b 83       	std	Y+3, r24	; 0x03
	
	//
	// Initialize TWI
	//

	Status = InitTWI(TWI_MASTER, NULL, NULL);
     116:	40 e0       	ldi	r20, 0x00	; 0
     118:	50 e0       	ldi	r21, 0x00	; 0
     11a:	60 e0       	ldi	r22, 0x00	; 0
     11c:	70 e0       	ldi	r23, 0x00	; 0
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	c8 d3       	rcall	.+1936   	; 0x8b2 <InitTWI>
     122:	18 2f       	mov	r17, r24
	
	if (!Status)
     124:	0f 90       	pop	r0
     126:	0f 90       	pop	r0
     128:	0f 90       	pop	r0
     12a:	0f 90       	pop	r0
     12c:	0f 90       	pop	r0
     12e:	0f 90       	pop	r0
     130:	81 11       	cpse	r24, r1
     132:	0b c0       	rjmp	.+22     	; 0x14a <main+0x80>
	{
		SendTrace(ERROR_LEVEL,"InitLCD - TWI Initialization Failed\r\n");
     134:	27 e1       	ldi	r18, 0x17	; 23
     136:	31 e0       	ldi	r19, 0x01	; 1
     138:	3f 93       	push	r19
     13a:	2f 93       	push	r18
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	8f 93       	push	r24
     140:	74 d2       	rcall	.+1256   	; 0x62a <SendTrace>
		
		goto Exit;
     142:	0f 90       	pop	r0
     144:	0f 90       	pop	r0
     146:	0f 90       	pop	r0
     148:	09 c0       	rjmp	.+18     	; 0x15c <main+0x92>
	
	//
	// Initialize LCD
	//

	InitLCD(&InitParams);
     14a:	ce 01       	movw	r24, r28
     14c:	01 96       	adiw	r24, 0x01	; 1
     14e:	e4 d6       	rcall	.+3528   	; 0xf18 <InitLCD>
	
	//
	// Set Cursor Position
	//
	
	LCDSetCursorPosition(0, 0);
     150:	60 e0       	ldi	r22, 0x00	; 0
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	00 d6       	rcall	.+3072   	; 0xd56 <LCDSetCursorPosition>
	
	//
	// Display String
	//
	
	LCDPrint("Welcome To Robot World!! Hello");
     156:	8d e3       	ldi	r24, 0x3D	; 61
     158:	91 e0       	ldi	r25, 0x01	; 1
     15a:	43 d6       	rcall	.+3206   	; 0xde2 <LCDPrint>
	//LCDPrint("Hello Pinchu!!");
	
Exit:

	return Status;
     15c:	81 2f       	mov	r24, r17
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0f 90       	pop	r0
     162:	0f 90       	pop	r0
     164:	0f 90       	pop	r0
     166:	0f 90       	pop	r0
     168:	0f 90       	pop	r0
     16a:	df 91       	pop	r29
     16c:	cf 91       	pop	r28
     16e:	1f 91       	pop	r17
     170:	08 95       	ret

00000172 <InitTrace>:

#ifdef DEBUG

void
InitTrace(unsigned long ProcFrequency, unsigned char TraceLevel)
{
     172:	0f 93       	push	r16
	if (!gTraceInitialized)
     174:	20 91 70 04 	lds	r18, 0x0470
     178:	21 11       	cpse	r18, r1
     17a:	0c c0       	rjmp	.+24     	; 0x194 <InitTrace+0x22>
	{

		gTraceLevel = TraceLevel;
     17c:	40 93 7c 04 	sts	0x047C, r20

		InitUARTSync(UART_ZERO, ProcFrequency, TRACE_BAUD_RATE, NORMAL_MODE);	
     180:	00 e1       	ldi	r16, 0x10	; 16
     182:	20 e8       	ldi	r18, 0x80	; 128
     184:	35 e2       	ldi	r19, 0x25	; 37
     186:	ab 01       	movw	r20, r22
     188:	bc 01       	movw	r22, r24
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	08 d7       	rcall	.+3600   	; 0xf9e <InitUARTSync>
		
		gTraceInitialized = TRUE;
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	80 93 70 04 	sts	0x0470, r24
	
	}
}
     194:	0f 91       	pop	r16
     196:	08 95       	ret

00000198 <SendStringValue>:
SendStringValue(char *String)
{

	unsigned long Length = 0;
	
	Length = strlen(String);
     198:	fc 01       	movw	r30, r24
     19a:	01 90       	ld	r0, Z+
     19c:	00 20       	and	r0, r0
     19e:	e9 f7       	brne	.-6      	; 0x19a <SendStringValue+0x2>
     1a0:	31 97       	sbiw	r30, 0x01	; 1
     1a2:	9f 01       	movw	r18, r30
     1a4:	28 1b       	sub	r18, r24
     1a6:	39 0b       	sbc	r19, r25
     1a8:	40 e0       	ldi	r20, 0x00	; 0
     1aa:	50 e0       	ldi	r21, 0x00	; 0
	
	UARTTransmitSync(UART_ZERO, (PVOID) String, Length);
     1ac:	bc 01       	movw	r22, r24
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	3c c7       	rjmp	.+3704   	; 0x102a <UARTTransmitSync>
     1b2:	08 95       	ret

000001b4 <SendHexValue>:
	
}

void
SendHexValue(unsigned long long Value)
{
     1b4:	8f 92       	push	r8
     1b6:	9f 92       	push	r9
     1b8:	af 92       	push	r10
     1ba:	bf 92       	push	r11
     1bc:	cf 92       	push	r12
     1be:	df 92       	push	r13
     1c0:	ef 92       	push	r14
     1c2:	ff 92       	push	r15
     1c4:	0f 93       	push	r16
     1c6:	1f 93       	push	r17
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	cd b7       	in	r28, 0x3d	; 61
     1ce:	de b7       	in	r29, 0x3e	; 62
     1d0:	da 95       	dec	r29
     1d2:	0f b6       	in	r0, 0x3f	; 63
     1d4:	f8 94       	cli
     1d6:	de bf       	out	0x3e, r29	; 62
     1d8:	0f be       	out	0x3f, r0	; 63
     1da:	cd bf       	out	0x3d, r28	; 61
     1dc:	02 2f       	mov	r16, r18
     1de:	93 2e       	mov	r9, r19
     1e0:	a4 2e       	mov	r10, r20
     1e2:	b5 2e       	mov	r11, r21
     1e4:	c6 2e       	mov	r12, r22
     1e6:	d7 2e       	mov	r13, r23
     1e8:	e8 2e       	mov	r14, r24
     1ea:	f9 2e       	mov	r15, r25

	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
     1ec:	10 e0       	ldi	r17, 0x00	; 0

		if (Value < 16)
		{
			TransmitChar[Count] = Value;

			Value = 0;
     1ee:	81 2c       	mov	r8, r1


	do
	{

		if (Value < 16)
     1f0:	20 2f       	mov	r18, r16
     1f2:	39 2d       	mov	r19, r9
     1f4:	4a 2d       	mov	r20, r10
     1f6:	5b 2d       	mov	r21, r11
     1f8:	6c 2d       	mov	r22, r12
     1fa:	7d 2d       	mov	r23, r13
     1fc:	8e 2d       	mov	r24, r14
     1fe:	9f 2d       	mov	r25, r15
     200:	af e0       	ldi	r26, 0x0F	; 15
     202:	0e 94 9a 09 	call	0x1334	; 0x1334 <__cmpdi2_s8>
     206:	09 f0       	breq	.+2      	; 0x20a <SendHexValue+0x56>
     208:	80 f4       	brcc	.+32     	; 0x22a <SendHexValue+0x76>
		{
			TransmitChar[Count] = Value;
     20a:	e1 e0       	ldi	r30, 0x01	; 1
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	ec 0f       	add	r30, r28
     210:	fd 1f       	adc	r31, r29
     212:	e1 0f       	add	r30, r17
     214:	f1 1d       	adc	r31, r1
     216:	00 83       	st	Z, r16

			Value = 0;
     218:	08 2d       	mov	r16, r8
     21a:	98 2c       	mov	r9, r8
     21c:	a8 2c       	mov	r10, r8
     21e:	b8 2c       	mov	r11, r8
     220:	c8 2c       	mov	r12, r8
     222:	d8 2c       	mov	r13, r8
     224:	e8 2c       	mov	r14, r8
     226:	f8 2c       	mov	r15, r8
     228:	1c c0       	rjmp	.+56     	; 0x262 <SendHexValue+0xae>
		}
		else
		{
			TransmitChar[Count] = Value % 16;
     22a:	e1 e0       	ldi	r30, 0x01	; 1
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	ec 0f       	add	r30, r28
     230:	fd 1f       	adc	r31, r29
     232:	e1 0f       	add	r30, r17
     234:	f1 1d       	adc	r31, r1
     236:	80 2f       	mov	r24, r16
     238:	8f 70       	andi	r24, 0x0F	; 15
     23a:	80 83       	st	Z, r24

			Value = Value / 16;
     23c:	20 2f       	mov	r18, r16
     23e:	39 2d       	mov	r19, r9
     240:	4a 2d       	mov	r20, r10
     242:	5b 2d       	mov	r21, r11
     244:	6c 2d       	mov	r22, r12
     246:	7d 2d       	mov	r23, r13
     248:	8e 2d       	mov	r24, r14
     24a:	9f 2d       	mov	r25, r15
     24c:	04 e0       	ldi	r16, 0x04	; 4
     24e:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__lshrdi3>
     252:	02 2f       	mov	r16, r18
     254:	93 2e       	mov	r9, r19
     256:	a4 2e       	mov	r10, r20
     258:	b5 2e       	mov	r11, r21
     25a:	c6 2e       	mov	r12, r22
     25c:	d7 2e       	mov	r13, r23
     25e:	e8 2e       	mov	r14, r24
     260:	f9 2e       	mov	r15, r25

		}
		
		if (TransmitChar[Count] > 9)
     262:	e1 2f       	mov	r30, r17
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	a1 e0       	ldi	r26, 0x01	; 1
     268:	b0 e0       	ldi	r27, 0x00	; 0
     26a:	ac 0f       	add	r26, r28
     26c:	bd 1f       	adc	r27, r29
     26e:	ae 0f       	add	r26, r30
     270:	bf 1f       	adc	r27, r31
     272:	8c 91       	ld	r24, X
     274:	8a 30       	cpi	r24, 0x0A	; 10
     276:	20 f0       	brcs	.+8      	; 0x280 <SendHexValue+0xcc>
		{
			TransmitChar[Count] = TransmitChar[Count] + ASCII_HEX_CONVERSION;
     278:	fd 01       	movw	r30, r26
     27a:	89 5a       	subi	r24, 0xA9	; 169
     27c:	80 83       	st	Z, r24
     27e:	08 c0       	rjmp	.+16     	; 0x290 <SendHexValue+0xdc>
		}
		else
		{
			TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     280:	21 e0       	ldi	r18, 0x01	; 1
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	2c 0f       	add	r18, r28
     286:	3d 1f       	adc	r19, r29
     288:	e2 0f       	add	r30, r18
     28a:	f3 1f       	adc	r31, r19
     28c:	80 5d       	subi	r24, 0xD0	; 208
     28e:	80 83       	st	Z, r24
		}
		
		Count++;
     290:	1f 5f       	subi	r17, 0xFF	; 255

	} while (Value != 0);
     292:	20 2f       	mov	r18, r16
     294:	39 2d       	mov	r19, r9
     296:	4a 2d       	mov	r20, r10
     298:	5b 2d       	mov	r21, r11
     29a:	6c 2d       	mov	r22, r12
     29c:	7d 2d       	mov	r23, r13
     29e:	8e 2d       	mov	r24, r14
     2a0:	9f 2d       	mov	r25, r15
     2a2:	a8 2d       	mov	r26, r8
     2a4:	0e 94 9a 09 	call	0x1334	; 0x1334 <__cmpdi2_s8>
     2a8:	09 f0       	breq	.+2      	; 0x2ac <SendHexValue+0xf8>
     2aa:	a2 cf       	rjmp	.-188    	; 0x1f0 <SendHexValue+0x3c>

	while (Count != 0)
     2ac:	11 23       	and	r17, r17
     2ae:	91 f0       	breq	.+36     	; 0x2d4 <SendHexValue+0x120>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     2b0:	61 2f       	mov	r22, r17
     2b2:	70 e0       	ldi	r23, 0x00	; 0
     2b4:	61 50       	subi	r22, 0x01	; 1
     2b6:	71 09       	sbc	r23, r1
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	8c 0f       	add	r24, r28
     2be:	9d 1f       	adc	r25, r29
     2c0:	68 0f       	add	r22, r24
     2c2:	79 1f       	adc	r23, r25
     2c4:	21 e0       	ldi	r18, 0x01	; 1
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	40 e0       	ldi	r20, 0x00	; 0
     2ca:	50 e0       	ldi	r21, 0x00	; 0
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	ad d6       	rcall	.+3418   	; 0x102a <UARTTransmitSync>
		
		Count--;
     2d0:	11 50       	subi	r17, 0x01	; 1
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
     2d2:	71 f7       	brne	.-36     	; 0x2b0 <SendHexValue+0xfc>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}
}
     2d4:	d3 95       	inc	r29
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	f8 94       	cli
     2da:	de bf       	out	0x3e, r29	; 62
     2dc:	0f be       	out	0x3f, r0	; 63
     2de:	cd bf       	out	0x3d, r28	; 61
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	1f 91       	pop	r17
     2e6:	0f 91       	pop	r16
     2e8:	ff 90       	pop	r15
     2ea:	ef 90       	pop	r14
     2ec:	df 90       	pop	r13
     2ee:	cf 90       	pop	r12
     2f0:	bf 90       	pop	r11
     2f2:	af 90       	pop	r10
     2f4:	9f 90       	pop	r9
     2f6:	8f 90       	pop	r8
     2f8:	08 95       	ret

000002fa <SendDecimalValue>:


void
SendDecimalValue(unsigned long long Value)
{
     2fa:	2f 92       	push	r2
     2fc:	3f 92       	push	r3
     2fe:	4f 92       	push	r4
     300:	5f 92       	push	r5
     302:	6f 92       	push	r6
     304:	7f 92       	push	r7
     306:	8f 92       	push	r8
     308:	9f 92       	push	r9
     30a:	af 92       	push	r10
     30c:	bf 92       	push	r11
     30e:	cf 92       	push	r12
     310:	df 92       	push	r13
     312:	ef 92       	push	r14
     314:	ff 92       	push	r15
     316:	0f 93       	push	r16
     318:	1f 93       	push	r17
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
     322:	c2 50       	subi	r28, 0x02	; 2
     324:	d1 40       	sbci	r29, 0x01	; 1
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	f8 94       	cli
     32a:	de bf       	out	0x3e, r29	; 62
     32c:	0f be       	out	0x3f, r0	; 63
     32e:	cd bf       	out	0x3d, r28	; 61
     330:	cf 5f       	subi	r28, 0xFF	; 255
     332:	de 4f       	sbci	r29, 0xFE	; 254
     334:	28 83       	st	Y, r18
     336:	c1 50       	subi	r28, 0x01	; 1
     338:	d1 40       	sbci	r29, 0x01	; 1
     33a:	23 2e       	mov	r2, r19
     33c:	34 2e       	mov	r3, r20
     33e:	45 2e       	mov	r4, r21
     340:	56 2e       	mov	r5, r22
     342:	67 2e       	mov	r6, r23
     344:	78 2e       	mov	r7, r24
     346:	89 2e       	mov	r8, r25

	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
     348:	91 2c       	mov	r9, r1


	do
	{

		if (Value < 10)
     34a:	cf 5f       	subi	r28, 0xFF	; 255
     34c:	de 4f       	sbci	r29, 0xFE	; 254
     34e:	28 81       	ld	r18, Y
     350:	c1 50       	subi	r28, 0x01	; 1
     352:	d1 40       	sbci	r29, 0x01	; 1
     354:	32 2d       	mov	r19, r2
     356:	43 2d       	mov	r20, r3
     358:	54 2d       	mov	r21, r4
     35a:	65 2d       	mov	r22, r5
     35c:	76 2d       	mov	r23, r6
     35e:	87 2d       	mov	r24, r7
     360:	98 2d       	mov	r25, r8
     362:	a9 e0       	ldi	r26, 0x09	; 9
     364:	e7 d7       	rcall	.+4046   	; 0x1334 <__cmpdi2_s8>
     366:	09 f0       	breq	.+2      	; 0x36a <SendDecimalValue+0x70>
     368:	40 f4       	brcc	.+16     	; 0x37a <SendDecimalValue+0x80>

			Value = Value / 10;

		}
		
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     36a:	fe 01       	movw	r30, r28
     36c:	e9 0d       	add	r30, r9
     36e:	f1 1d       	adc	r31, r1
     370:	82 2f       	mov	r24, r18
     372:	80 5d       	subi	r24, 0xD0	; 208
     374:	81 83       	std	Z+1, r24	; 0x01
		
		Count++;
     376:	93 94       	inc	r9
     378:	48 c0       	rjmp	.+144    	; 0x40a <SendDecimalValue+0x110>

			Value = 0;
		}
		else
		{
			TransmitChar[Count] = Value % 10;
     37a:	0f 2e       	mov	r0, r31
     37c:	fa e0       	ldi	r31, 0x0A	; 10
     37e:	af 2e       	mov	r10, r31
     380:	f0 2d       	mov	r31, r0
     382:	b1 2c       	mov	r11, r1
     384:	c1 2c       	mov	r12, r1
     386:	d1 2c       	mov	r13, r1
     388:	e1 2c       	mov	r14, r1
     38a:	f1 2c       	mov	r15, r1
     38c:	00 e0       	ldi	r16, 0x00	; 0
     38e:	10 e0       	ldi	r17, 0x00	; 0
     390:	cf 5f       	subi	r28, 0xFF	; 255
     392:	de 4f       	sbci	r29, 0xFE	; 254
     394:	28 81       	ld	r18, Y
     396:	c1 50       	subi	r28, 0x01	; 1
     398:	d1 40       	sbci	r29, 0x01	; 1
     39a:	32 2d       	mov	r19, r2
     39c:	43 2d       	mov	r20, r3
     39e:	54 2d       	mov	r21, r4
     3a0:	65 2d       	mov	r22, r5
     3a2:	76 2d       	mov	r23, r6
     3a4:	87 2d       	mov	r24, r7
     3a6:	98 2d       	mov	r25, r8
     3a8:	02 d7       	rcall	.+3588   	; 0x11ae <__umoddi3>
     3aa:	ce 5f       	subi	r28, 0xFE	; 254
     3ac:	de 4f       	sbci	r29, 0xFE	; 254
     3ae:	28 83       	st	Y, r18
     3b0:	c2 50       	subi	r28, 0x02	; 2
     3b2:	d1 40       	sbci	r29, 0x01	; 1

			Value = Value / 10;
     3b4:	cf 5f       	subi	r28, 0xFF	; 255
     3b6:	de 4f       	sbci	r29, 0xFE	; 254
     3b8:	28 81       	ld	r18, Y
     3ba:	c1 50       	subi	r28, 0x01	; 1
     3bc:	d1 40       	sbci	r29, 0x01	; 1
     3be:	32 2d       	mov	r19, r2
     3c0:	43 2d       	mov	r20, r3
     3c2:	54 2d       	mov	r21, r4
     3c4:	65 2d       	mov	r22, r5
     3c6:	76 2d       	mov	r23, r6
     3c8:	87 2d       	mov	r24, r7
     3ca:	98 2d       	mov	r25, r8
     3cc:	f2 d6       	rcall	.+3556   	; 0x11b2 <__udivdi3>
     3ce:	cf 5f       	subi	r28, 0xFF	; 255
     3d0:	de 4f       	sbci	r29, 0xFE	; 254
     3d2:	28 83       	st	Y, r18
     3d4:	c1 50       	subi	r28, 0x01	; 1
     3d6:	d1 40       	sbci	r29, 0x01	; 1
     3d8:	23 2e       	mov	r2, r19
     3da:	34 2e       	mov	r3, r20
     3dc:	45 2e       	mov	r4, r21
     3de:	56 2e       	mov	r5, r22
     3e0:	67 2e       	mov	r6, r23
     3e2:	78 2e       	mov	r7, r24
     3e4:	89 2e       	mov	r8, r25

		}
		
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     3e6:	e1 e0       	ldi	r30, 0x01	; 1
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	ec 0f       	add	r30, r28
     3ec:	fd 1f       	adc	r31, r29
     3ee:	e9 0d       	add	r30, r9
     3f0:	f1 1d       	adc	r31, r1
     3f2:	ce 5f       	subi	r28, 0xFE	; 254
     3f4:	de 4f       	sbci	r29, 0xFE	; 254
     3f6:	a8 81       	ld	r26, Y
     3f8:	c2 50       	subi	r28, 0x02	; 2
     3fa:	d1 40       	sbci	r29, 0x01	; 1
     3fc:	a0 5d       	subi	r26, 0xD0	; 208
     3fe:	a0 83       	st	Z, r26
		
		Count++;
     400:	93 94       	inc	r9

	} while (Value != 0);
     402:	a0 e0       	ldi	r26, 0x00	; 0
     404:	97 d7       	rcall	.+3886   	; 0x1334 <__cmpdi2_s8>
     406:	09 f0       	breq	.+2      	; 0x40a <SendDecimalValue+0x110>
     408:	a0 cf       	rjmp	.-192    	; 0x34a <SendDecimalValue+0x50>

	while (Count != 0)
     40a:	99 20       	and	r9, r9
     40c:	91 f0       	breq	.+36     	; 0x432 <SendDecimalValue+0x138>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     40e:	69 2d       	mov	r22, r9
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	61 50       	subi	r22, 0x01	; 1
     414:	71 09       	sbc	r23, r1
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	8c 0f       	add	r24, r28
     41c:	9d 1f       	adc	r25, r29
     41e:	68 0f       	add	r22, r24
     420:	79 1f       	adc	r23, r25
     422:	21 e0       	ldi	r18, 0x01	; 1
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	40 e0       	ldi	r20, 0x00	; 0
     428:	50 e0       	ldi	r21, 0x00	; 0
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	fe d5       	rcall	.+3068   	; 0x102a <UARTTransmitSync>
		
		Count--;
     42e:	9a 94       	dec	r9
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
     430:	71 f7       	brne	.-36     	; 0x40e <SendDecimalValue+0x114>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}	
}
     432:	ce 5f       	subi	r28, 0xFE	; 254
     434:	de 4f       	sbci	r29, 0xFE	; 254
     436:	0f b6       	in	r0, 0x3f	; 63
     438:	f8 94       	cli
     43a:	de bf       	out	0x3e, r29	; 62
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	cd bf       	out	0x3d, r28	; 61
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	1f 91       	pop	r17
     446:	0f 91       	pop	r16
     448:	ff 90       	pop	r15
     44a:	ef 90       	pop	r14
     44c:	df 90       	pop	r13
     44e:	cf 90       	pop	r12
     450:	bf 90       	pop	r11
     452:	af 90       	pop	r10
     454:	9f 90       	pop	r9
     456:	8f 90       	pop	r8
     458:	7f 90       	pop	r7
     45a:	6f 90       	pop	r6
     45c:	5f 90       	pop	r5
     45e:	4f 90       	pop	r4
     460:	3f 90       	pop	r3
     462:	2f 90       	pop	r2
     464:	08 95       	ret

00000466 <SendSignedDecimalValue>:

void
SendSignedDecimalValue(long long Value)
{
     466:	2f 92       	push	r2
     468:	3f 92       	push	r3
     46a:	4f 92       	push	r4
     46c:	5f 92       	push	r5
     46e:	6f 92       	push	r6
     470:	7f 92       	push	r7
     472:	8f 92       	push	r8
     474:	9f 92       	push	r9
     476:	af 92       	push	r10
     478:	bf 92       	push	r11
     47a:	cf 92       	push	r12
     47c:	df 92       	push	r13
     47e:	ef 92       	push	r14
     480:	ff 92       	push	r15
     482:	0f 93       	push	r16
     484:	1f 93       	push	r17
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
     48e:	c3 50       	subi	r28, 0x03	; 3
     490:	d1 40       	sbci	r29, 0x01	; 1
     492:	0f b6       	in	r0, 0x3f	; 63
     494:	f8 94       	cli
     496:	de bf       	out	0x3e, r29	; 62
     498:	0f be       	out	0x3f, r0	; 63
     49a:	cd bf       	out	0x3d, r28	; 61
     49c:	ce 5f       	subi	r28, 0xFE	; 254
     49e:	de 4f       	sbci	r29, 0xFE	; 254
     4a0:	28 83       	st	Y, r18
     4a2:	c2 50       	subi	r28, 0x02	; 2
     4a4:	d1 40       	sbci	r29, 0x01	; 1
     4a6:	83 2e       	mov	r8, r19
     4a8:	74 2e       	mov	r7, r20
     4aa:	65 2e       	mov	r6, r21
     4ac:	56 2e       	mov	r5, r22
     4ae:	47 2e       	mov	r4, r23
     4b0:	38 2e       	mov	r3, r24
     4b2:	29 2e       	mov	r2, r25
	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
	
	unsigned char Minus = '-';
     4b4:	8d e2       	ldi	r24, 0x2D	; 45
     4b6:	cf 5f       	subi	r28, 0xFF	; 255
     4b8:	de 4f       	sbci	r29, 0xFE	; 254
     4ba:	88 83       	st	Y, r24
     4bc:	c1 50       	subi	r28, 0x01	; 1
     4be:	d1 40       	sbci	r29, 0x01	; 1

	//
	// If the value is negative, print - sign and make the value positive.
	//

	if (Value < 0)
     4c0:	83 2d       	mov	r24, r3
     4c2:	a0 e0       	ldi	r26, 0x00	; 0
     4c4:	37 d7       	rcall	.+3694   	; 0x1334 <__cmpdi2_s8>
     4c6:	14 f5       	brge	.+68     	; 0x50c <SendSignedDecimalValue+0xa6>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &Minus, 1);
     4c8:	21 e0       	ldi	r18, 0x01	; 1
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	40 e0       	ldi	r20, 0x00	; 0
     4ce:	50 e0       	ldi	r21, 0x00	; 0
     4d0:	be 01       	movw	r22, r28
     4d2:	6f 5f       	subi	r22, 0xFF	; 255
     4d4:	7e 4f       	sbci	r23, 0xFE	; 254
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	a8 d5       	rcall	.+2896   	; 0x102a <UARTTransmitSync>

		Value *= -1;
     4da:	ce 5f       	subi	r28, 0xFE	; 254
     4dc:	de 4f       	sbci	r29, 0xFE	; 254
     4de:	28 81       	ld	r18, Y
     4e0:	c2 50       	subi	r28, 0x02	; 2
     4e2:	d1 40       	sbci	r29, 0x01	; 1
     4e4:	38 2d       	mov	r19, r8
     4e6:	47 2d       	mov	r20, r7
     4e8:	56 2d       	mov	r21, r6
     4ea:	65 2d       	mov	r22, r5
     4ec:	74 2d       	mov	r23, r4
     4ee:	83 2d       	mov	r24, r3
     4f0:	92 2d       	mov	r25, r2
     4f2:	bb d6       	rcall	.+3446   	; 0x126a <__negdi2>
     4f4:	ce 5f       	subi	r28, 0xFE	; 254
     4f6:	de 4f       	sbci	r29, 0xFE	; 254
     4f8:	28 83       	st	Y, r18
     4fa:	c2 50       	subi	r28, 0x02	; 2
     4fc:	d1 40       	sbci	r29, 0x01	; 1
     4fe:	83 2e       	mov	r8, r19
     500:	74 2e       	mov	r7, r20
     502:	65 2e       	mov	r6, r21
     504:	56 2e       	mov	r5, r22
     506:	47 2e       	mov	r4, r23
     508:	38 2e       	mov	r3, r24
     50a:	29 2e       	mov	r2, r25
	}	
}

void
SendSignedDecimalValue(long long Value)
{
     50c:	91 2c       	mov	r9, r1
	}

	do
	{

		if (Value < 10)
     50e:	ce 5f       	subi	r28, 0xFE	; 254
     510:	de 4f       	sbci	r29, 0xFE	; 254
     512:	28 81       	ld	r18, Y
     514:	c2 50       	subi	r28, 0x02	; 2
     516:	d1 40       	sbci	r29, 0x01	; 1
     518:	38 2d       	mov	r19, r8
     51a:	47 2d       	mov	r20, r7
     51c:	56 2d       	mov	r21, r6
     51e:	65 2d       	mov	r22, r5
     520:	74 2d       	mov	r23, r4
     522:	83 2d       	mov	r24, r3
     524:	92 2d       	mov	r25, r2
     526:	a9 e0       	ldi	r26, 0x09	; 9
     528:	05 d7       	rcall	.+3594   	; 0x1334 <__cmpdi2_s8>
     52a:	09 f0       	breq	.+2      	; 0x52e <SendSignedDecimalValue+0xc8>
     52c:	44 f4       	brge	.+16     	; 0x53e <SendSignedDecimalValue+0xd8>

			Value = Value / 10;

		}
	
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     52e:	fe 01       	movw	r30, r28
     530:	e9 0d       	add	r30, r9
     532:	f1 1d       	adc	r31, r1
     534:	82 2f       	mov	r24, r18
     536:	80 5d       	subi	r24, 0xD0	; 208
     538:	81 83       	std	Z+1, r24	; 0x01
		
		Count++;
     53a:	93 94       	inc	r9
     53c:	48 c0       	rjmp	.+144    	; 0x5ce <SendSignedDecimalValue+0x168>

			Value = 0;
		}
		else
		{
			TransmitChar[Count] = Value % 10;
     53e:	0f 2e       	mov	r0, r31
     540:	fa e0       	ldi	r31, 0x0A	; 10
     542:	af 2e       	mov	r10, r31
     544:	f0 2d       	mov	r31, r0
     546:	b1 2c       	mov	r11, r1
     548:	c1 2c       	mov	r12, r1
     54a:	d1 2c       	mov	r13, r1
     54c:	e1 2c       	mov	r14, r1
     54e:	f1 2c       	mov	r15, r1
     550:	00 e0       	ldi	r16, 0x00	; 0
     552:	10 e0       	ldi	r17, 0x00	; 0
     554:	ce 5f       	subi	r28, 0xFE	; 254
     556:	de 4f       	sbci	r29, 0xFE	; 254
     558:	28 81       	ld	r18, Y
     55a:	c2 50       	subi	r28, 0x02	; 2
     55c:	d1 40       	sbci	r29, 0x01	; 1
     55e:	38 2d       	mov	r19, r8
     560:	47 2d       	mov	r20, r7
     562:	56 2d       	mov	r21, r6
     564:	65 2d       	mov	r22, r5
     566:	74 2d       	mov	r23, r4
     568:	83 2d       	mov	r24, r3
     56a:	92 2d       	mov	r25, r2
     56c:	f5 d5       	rcall	.+3050   	; 0x1158 <__moddi3>
     56e:	cd 5f       	subi	r28, 0xFD	; 253
     570:	de 4f       	sbci	r29, 0xFE	; 254
     572:	28 83       	st	Y, r18
     574:	c3 50       	subi	r28, 0x03	; 3
     576:	d1 40       	sbci	r29, 0x01	; 1

			Value = Value / 10;
     578:	ce 5f       	subi	r28, 0xFE	; 254
     57a:	de 4f       	sbci	r29, 0xFE	; 254
     57c:	28 81       	ld	r18, Y
     57e:	c2 50       	subi	r28, 0x02	; 2
     580:	d1 40       	sbci	r29, 0x01	; 1
     582:	38 2d       	mov	r19, r8
     584:	47 2d       	mov	r20, r7
     586:	56 2d       	mov	r21, r6
     588:	65 2d       	mov	r22, r5
     58a:	74 2d       	mov	r23, r4
     58c:	83 2d       	mov	r24, r3
     58e:	92 2d       	mov	r25, r2
     590:	e5 d5       	rcall	.+3018   	; 0x115c <__divdi3>
     592:	ce 5f       	subi	r28, 0xFE	; 254
     594:	de 4f       	sbci	r29, 0xFE	; 254
     596:	28 83       	st	Y, r18
     598:	c2 50       	subi	r28, 0x02	; 2
     59a:	d1 40       	sbci	r29, 0x01	; 1
     59c:	83 2e       	mov	r8, r19
     59e:	74 2e       	mov	r7, r20
     5a0:	65 2e       	mov	r6, r21
     5a2:	56 2e       	mov	r5, r22
     5a4:	47 2e       	mov	r4, r23
     5a6:	38 2e       	mov	r3, r24
     5a8:	29 2e       	mov	r2, r25

		}
	
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     5aa:	e1 e0       	ldi	r30, 0x01	; 1
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	ec 0f       	add	r30, r28
     5b0:	fd 1f       	adc	r31, r29
     5b2:	e9 0d       	add	r30, r9
     5b4:	f1 1d       	adc	r31, r1
     5b6:	cd 5f       	subi	r28, 0xFD	; 253
     5b8:	de 4f       	sbci	r29, 0xFE	; 254
     5ba:	a8 81       	ld	r26, Y
     5bc:	c3 50       	subi	r28, 0x03	; 3
     5be:	d1 40       	sbci	r29, 0x01	; 1
     5c0:	a0 5d       	subi	r26, 0xD0	; 208
     5c2:	a0 83       	st	Z, r26
		
		Count++;
     5c4:	93 94       	inc	r9

	} while (Value != 0);
     5c6:	a0 e0       	ldi	r26, 0x00	; 0
     5c8:	b5 d6       	rcall	.+3434   	; 0x1334 <__cmpdi2_s8>
     5ca:	09 f0       	breq	.+2      	; 0x5ce <SendSignedDecimalValue+0x168>
     5cc:	a0 cf       	rjmp	.-192    	; 0x50e <SendSignedDecimalValue+0xa8>

	while (Count != 0)
     5ce:	99 20       	and	r9, r9
     5d0:	91 f0       	breq	.+36     	; 0x5f6 <SendSignedDecimalValue+0x190>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     5d2:	69 2d       	mov	r22, r9
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	61 50       	subi	r22, 0x01	; 1
     5d8:	71 09       	sbc	r23, r1
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	8c 0f       	add	r24, r28
     5e0:	9d 1f       	adc	r25, r29
     5e2:	68 0f       	add	r22, r24
     5e4:	79 1f       	adc	r23, r25
     5e6:	21 e0       	ldi	r18, 0x01	; 1
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	40 e0       	ldi	r20, 0x00	; 0
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	1c d5       	rcall	.+2616   	; 0x102a <UARTTransmitSync>
		
		Count--;
     5f2:	9a 94       	dec	r9
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
     5f4:	71 f7       	brne	.-36     	; 0x5d2 <SendSignedDecimalValue+0x16c>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}
}
     5f6:	cd 5f       	subi	r28, 0xFD	; 253
     5f8:	de 4f       	sbci	r29, 0xFE	; 254
     5fa:	0f b6       	in	r0, 0x3f	; 63
     5fc:	f8 94       	cli
     5fe:	de bf       	out	0x3e, r29	; 62
     600:	0f be       	out	0x3f, r0	; 63
     602:	cd bf       	out	0x3d, r28	; 61
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	1f 91       	pop	r17
     60a:	0f 91       	pop	r16
     60c:	ff 90       	pop	r15
     60e:	ef 90       	pop	r14
     610:	df 90       	pop	r13
     612:	cf 90       	pop	r12
     614:	bf 90       	pop	r11
     616:	af 90       	pop	r10
     618:	9f 90       	pop	r9
     61a:	8f 90       	pop	r8
     61c:	7f 90       	pop	r7
     61e:	6f 90       	pop	r6
     620:	5f 90       	pop	r5
     622:	4f 90       	pop	r4
     624:	3f 90       	pop	r3
     626:	2f 90       	pop	r2
     628:	08 95       	ret

0000062a <SendTrace>:
	}
}

void
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{
     62a:	3f 92       	push	r3
     62c:	4f 92       	push	r4
     62e:	5f 92       	push	r5
     630:	6f 92       	push	r6
     632:	7f 92       	push	r7
     634:	8f 92       	push	r8
     636:	9f 92       	push	r9
     638:	af 92       	push	r10
     63a:	bf 92       	push	r11
     63c:	cf 92       	push	r12
     63e:	df 92       	push	r13
     640:	ef 92       	push	r14
     642:	ff 92       	push	r15
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	1f 92       	push	r1
     64e:	cd b7       	in	r28, 0x3d	; 61
     650:	de b7       	in	r29, 0x3e	; 62
     652:	0e 89       	ldd	r16, Y+22	; 0x16
     654:	1f 89       	ldd	r17, Y+23	; 0x17
	
	char Character;

	va_list ArgList;

	if (!gTraceInitialized || !(TraceLevel & gTraceLevel))
     656:	80 91 70 04 	lds	r24, 0x0470
     65a:	88 23       	and	r24, r24
     65c:	09 f4       	brne	.+2      	; 0x660 <SendTrace+0x36>
     65e:	16 c1       	rjmp	.+556    	; 0x88c <SendTrace+0x262>
     660:	80 91 7c 04 	lds	r24, 0x047C
     664:	9d 89       	ldd	r25, Y+21	; 0x15
     666:	89 23       	and	r24, r25
     668:	09 f4       	brne	.+2      	; 0x66c <SendTrace+0x42>
     66a:	10 c1       	rjmp	.+544    	; 0x88c <SendTrace+0x262>
	{
		return;
	}

	va_start(ArgList, String);
     66c:	7e 01       	movw	r14, r28
     66e:	28 e1       	ldi	r18, 0x18	; 24
     670:	e2 0e       	add	r14, r18
     672:	f1 1c       	adc	r15, r1

	while (*String != '\0')
     674:	f8 01       	movw	r30, r16
     676:	20 81       	ld	r18, Z
     678:	22 23       	and	r18, r18
     67a:	09 f4       	brne	.+2      	; 0x67e <SendTrace+0x54>
     67c:	07 c1       	rjmp	.+526    	; 0x88c <SendTrace+0x262>
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{

	bool IsLong = FALSE;
	
	bool IsLongLong = FALSE;
     67e:	41 2c       	mov	r4, r1

void
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{

	bool IsLong = FALSE;
     680:	d1 2c       	mov	r13, r1
						
						IsLong = FALSE;
					}
					else
					{
						IsLong = TRUE;
     682:	33 24       	eor	r3, r3
     684:	33 94       	inc	r3

					if (IsLong)
					{
						IsLongLong = TRUE;
						
						IsLong = FALSE;
     686:	51 2c       	mov	r5, r1
	va_start(ArgList, String);

	while (*String != '\0')
	{

		if (*String == '%' || IsLong || IsLongLong)
     688:	25 32       	cpi	r18, 0x25	; 37
     68a:	29 f0       	breq	.+10     	; 0x696 <SendTrace+0x6c>
     68c:	d1 10       	cpse	r13, r1
     68e:	05 c0       	rjmp	.+10     	; 0x69a <SendTrace+0x70>
     690:	41 10       	cpse	r4, r1
     692:	03 c0       	rjmp	.+6      	; 0x69a <SendTrace+0x70>
     694:	ea c0       	rjmp	.+468    	; 0x86a <SendTrace+0x240>
		{

			if (*String == '%')
			{
				String++;
     696:	0f 5f       	subi	r16, 0xFF	; 255
     698:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			switch (*String)
     69a:	f8 01       	movw	r30, r16
     69c:	80 81       	ld	r24, Z
     69e:	8c 36       	cpi	r24, 0x6C	; 108
     6a0:	09 f4       	brne	.+2      	; 0x6a4 <SendTrace+0x7a>
     6a2:	d6 c0       	rjmp	.+428    	; 0x850 <SendTrace+0x226>
     6a4:	28 f4       	brcc	.+10     	; 0x6b0 <SendTrace+0x86>
     6a6:	83 36       	cpi	r24, 0x63	; 99
     6a8:	69 f0       	breq	.+26     	; 0x6c4 <SendTrace+0x9a>
     6aa:	84 36       	cpi	r24, 0x64	; 100
     6ac:	e9 f0       	breq	.+58     	; 0x6e8 <SendTrace+0xbe>
     6ae:	e6 c0       	rjmp	.+460    	; 0x87c <SendTrace+0x252>
     6b0:	85 37       	cpi	r24, 0x75	; 117
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <SendTrace+0x8c>
     6b4:	5b c0       	rjmp	.+182    	; 0x76c <SendTrace+0x142>
     6b6:	88 37       	cpi	r24, 0x78	; 120
     6b8:	09 f4       	brne	.+2      	; 0x6bc <SendTrace+0x92>
     6ba:	92 c0       	rjmp	.+292    	; 0x7e0 <SendTrace+0x1b6>
     6bc:	83 37       	cpi	r24, 0x73	; 115
     6be:	09 f0       	breq	.+2      	; 0x6c2 <SendTrace+0x98>
     6c0:	dd c0       	rjmp	.+442    	; 0x87c <SendTrace+0x252>
     6c2:	cb c0       	rjmp	.+406    	; 0x85a <SendTrace+0x230>
			{
				case 'c':
				{

					Character = va_arg(ArgList, int);
     6c4:	57 01       	movw	r10, r14
     6c6:	f2 e0       	ldi	r31, 0x02	; 2
     6c8:	af 0e       	add	r10, r31
     6ca:	b1 1c       	adc	r11, r1
     6cc:	f7 01       	movw	r30, r14
     6ce:	80 81       	ld	r24, Z
     6d0:	89 83       	std	Y+1, r24	; 0x01
					
					UARTTransmitSync(UART_ZERO, (PVOID) &Character, 1);
     6d2:	21 e0       	ldi	r18, 0x01	; 1
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	40 e0       	ldi	r20, 0x00	; 0
     6d8:	50 e0       	ldi	r21, 0x00	; 0
     6da:	be 01       	movw	r22, r28
     6dc:	6f 5f       	subi	r22, 0xFF	; 255
     6de:	7f 4f       	sbci	r23, 0xFF	; 255
     6e0:	85 2d       	mov	r24, r5
     6e2:	a3 d4       	rcall	.+2374   	; 0x102a <UARTTransmitSync>
			switch (*String)
			{
				case 'c':
				{

					Character = va_arg(ArgList, int);
     6e4:	75 01       	movw	r14, r10
					
					UARTTransmitSync(UART_ZERO, (PVOID) &Character, 1);

					break;
     6e6:	ca c0       	rjmp	.+404    	; 0x87c <SendTrace+0x252>

				}
				case 'd':
				{

					if (IsLong)
     6e8:	dd 20       	and	r13, r13
     6ea:	d9 f0       	breq	.+54     	; 0x722 <SendTrace+0xf8>
					{

						SendSignedDecimalValue(va_arg(ArgList, long));
     6ec:	67 01       	movw	r12, r14
     6ee:	f4 e0       	ldi	r31, 0x04	; 4
     6f0:	cf 0e       	add	r12, r31
     6f2:	d1 1c       	adc	r13, r1
     6f4:	f7 01       	movw	r30, r14
     6f6:	80 81       	ld	r24, Z
     6f8:	91 81       	ldd	r25, Z+1	; 0x01
     6fa:	a2 81       	ldd	r26, Z+2	; 0x02
     6fc:	b3 81       	ldd	r27, Z+3	; 0x03
     6fe:	4c 01       	movw	r8, r24
     700:	5d 01       	movw	r10, r26
     702:	bb 0c       	add	r11, r11
     704:	88 08       	sbc	r8, r8
     706:	98 2c       	mov	r9, r8
     708:	54 01       	movw	r10, r8
     70a:	28 2f       	mov	r18, r24
     70c:	39 2f       	mov	r19, r25
     70e:	4a 2f       	mov	r20, r26
     710:	5b 2f       	mov	r21, r27
     712:	68 2d       	mov	r22, r8
     714:	78 2d       	mov	r23, r8
     716:	88 2d       	mov	r24, r8
     718:	98 2d       	mov	r25, r8
     71a:	a5 de       	rcall	.-694    	; 0x466 <SendSignedDecimalValue>
     71c:	76 01       	movw	r14, r12

						IsLong = FALSE;
     71e:	d5 2c       	mov	r13, r5
     720:	ad c0       	rjmp	.+346    	; 0x87c <SendTrace+0x252>

					}
					else if (IsLongLong)
     722:	44 20       	and	r4, r4
     724:	89 f0       	breq	.+34     	; 0x748 <SendTrace+0x11e>
					{
						SendSignedDecimalValue(va_arg(ArgList, long long));
     726:	57 01       	movw	r10, r14
     728:	f8 e0       	ldi	r31, 0x08	; 8
     72a:	af 0e       	add	r10, r31
     72c:	b1 1c       	adc	r11, r1
     72e:	f7 01       	movw	r30, r14
     730:	20 81       	ld	r18, Z
     732:	31 81       	ldd	r19, Z+1	; 0x01
     734:	42 81       	ldd	r20, Z+2	; 0x02
     736:	53 81       	ldd	r21, Z+3	; 0x03
     738:	64 81       	ldd	r22, Z+4	; 0x04
     73a:	75 81       	ldd	r23, Z+5	; 0x05
     73c:	86 81       	ldd	r24, Z+6	; 0x06
     73e:	97 81       	ldd	r25, Z+7	; 0x07
     740:	92 de       	rcall	.-732    	; 0x466 <SendSignedDecimalValue>
     742:	75 01       	movw	r14, r10

						IsLongLong = FALSE;
     744:	45 2c       	mov	r4, r5
     746:	9a c0       	rjmp	.+308    	; 0x87c <SendTrace+0x252>
					}
					else
					{

						SendSignedDecimalValue(va_arg(ArgList, int));
     748:	57 01       	movw	r10, r14
     74a:	f2 e0       	ldi	r31, 0x02	; 2
     74c:	af 0e       	add	r10, r31
     74e:	b1 1c       	adc	r11, r1
     750:	f7 01       	movw	r30, r14
     752:	31 81       	ldd	r19, Z+1	; 0x01
     754:	20 81       	ld	r18, Z
     756:	93 2f       	mov	r25, r19
     758:	99 0f       	add	r25, r25
     75a:	99 0b       	sbc	r25, r25
     75c:	49 2f       	mov	r20, r25
     75e:	59 2f       	mov	r21, r25
     760:	69 2f       	mov	r22, r25
     762:	79 2f       	mov	r23, r25
     764:	89 2f       	mov	r24, r25
     766:	7f de       	rcall	.-770    	; 0x466 <SendSignedDecimalValue>
     768:	75 01       	movw	r14, r10
     76a:	88 c0       	rjmp	.+272    	; 0x87c <SendTrace+0x252>
					break;
				}
				case 'u':
				{

					if(IsLong)
     76c:	dd 20       	and	r13, r13
     76e:	b9 f0       	breq	.+46     	; 0x79e <SendTrace+0x174>
					{

						SendDecimalValue(va_arg(ArgList, unsigned long));
     770:	37 01       	movw	r6, r14
     772:	f4 e0       	ldi	r31, 0x04	; 4
     774:	6f 0e       	add	r6, r31
     776:	71 1c       	adc	r7, r1
     778:	f7 01       	movw	r30, r14
     77a:	80 81       	ld	r24, Z
     77c:	91 81       	ldd	r25, Z+1	; 0x01
     77e:	a2 81       	ldd	r26, Z+2	; 0x02
     780:	b3 81       	ldd	r27, Z+3	; 0x03
     782:	4c 01       	movw	r8, r24
     784:	5d 01       	movw	r10, r26
     786:	28 2f       	mov	r18, r24
     788:	39 2d       	mov	r19, r9
     78a:	4a 2d       	mov	r20, r10
     78c:	5b 2d       	mov	r21, r11
     78e:	65 2d       	mov	r22, r5
     790:	75 2d       	mov	r23, r5
     792:	85 2d       	mov	r24, r5
     794:	95 2d       	mov	r25, r5
     796:	b1 dd       	rcall	.-1182   	; 0x2fa <SendDecimalValue>
     798:	73 01       	movw	r14, r6
						
						IsLong = FALSE;
     79a:	d5 2c       	mov	r13, r5
     79c:	6f c0       	rjmp	.+222    	; 0x87c <SendTrace+0x252>
					
					}
					else if(IsLongLong)
     79e:	44 20       	and	r4, r4
     7a0:	79 f0       	breq	.+30     	; 0x7c0 <SendTrace+0x196>
					{
						SendDecimalValue(va_arg(ArgList, unsigned long long));
     7a2:	f7 01       	movw	r30, r14
     7a4:	20 81       	ld	r18, Z
     7a6:	88 e0       	ldi	r24, 0x08	; 8
     7a8:	e8 0e       	add	r14, r24
     7aa:	f1 1c       	adc	r15, r1
     7ac:	31 81       	ldd	r19, Z+1	; 0x01
     7ae:	42 81       	ldd	r20, Z+2	; 0x02
     7b0:	53 81       	ldd	r21, Z+3	; 0x03
     7b2:	64 81       	ldd	r22, Z+4	; 0x04
     7b4:	75 81       	ldd	r23, Z+5	; 0x05
     7b6:	86 81       	ldd	r24, Z+6	; 0x06
     7b8:	97 81       	ldd	r25, Z+7	; 0x07
     7ba:	9f dd       	rcall	.-1218   	; 0x2fa <SendDecimalValue>
						
						IsLongLong = FALSE;
     7bc:	45 2c       	mov	r4, r5
     7be:	5e c0       	rjmp	.+188    	; 0x87c <SendTrace+0x252>
					}
					else
					{

						SendDecimalValue(va_arg(ArgList, unsigned int));
     7c0:	f7 01       	movw	r30, r14
     7c2:	40 81       	ld	r20, Z
     7c4:	51 81       	ldd	r21, Z+1	; 0x01
     7c6:	e2 e0       	ldi	r30, 0x02	; 2
     7c8:	ee 0e       	add	r14, r30
     7ca:	f1 1c       	adc	r15, r1
     7cc:	24 2f       	mov	r18, r20
     7ce:	35 2f       	mov	r19, r21
     7d0:	45 2d       	mov	r20, r5
     7d2:	55 2d       	mov	r21, r5
     7d4:	65 2d       	mov	r22, r5
     7d6:	75 2d       	mov	r23, r5
     7d8:	85 2d       	mov	r24, r5
     7da:	95 2d       	mov	r25, r5
     7dc:	8e dd       	rcall	.-1252   	; 0x2fa <SendDecimalValue>
     7de:	4e c0       	rjmp	.+156    	; 0x87c <SendTrace+0x252>
					break;
				}
				case 'x':
				{

					if (IsLong)
     7e0:	dd 20       	and	r13, r13
     7e2:	a9 f0       	breq	.+42     	; 0x80e <SendTrace+0x1e4>
					{

						SendHexValue(va_arg(ArgList, unsigned long));
     7e4:	f7 01       	movw	r30, r14
     7e6:	80 81       	ld	r24, Z
     7e8:	91 81       	ldd	r25, Z+1	; 0x01
     7ea:	a2 81       	ldd	r26, Z+2	; 0x02
     7ec:	b3 81       	ldd	r27, Z+3	; 0x03
     7ee:	f4 e0       	ldi	r31, 0x04	; 4
     7f0:	ef 0e       	add	r14, r31
     7f2:	f1 1c       	adc	r15, r1
     7f4:	3c 01       	movw	r6, r24
     7f6:	4d 01       	movw	r8, r26
     7f8:	28 2f       	mov	r18, r24
     7fa:	37 2d       	mov	r19, r7
     7fc:	48 2d       	mov	r20, r8
     7fe:	59 2d       	mov	r21, r9
     800:	65 2d       	mov	r22, r5
     802:	75 2d       	mov	r23, r5
     804:	85 2d       	mov	r24, r5
     806:	95 2d       	mov	r25, r5
     808:	d5 dc       	rcall	.-1622   	; 0x1b4 <SendHexValue>

						IsLong = FALSE;
     80a:	d5 2c       	mov	r13, r5
     80c:	37 c0       	rjmp	.+110    	; 0x87c <SendTrace+0x252>

					}
					else if (IsLongLong)
     80e:	44 20       	and	r4, r4
     810:	79 f0       	breq	.+30     	; 0x830 <SendTrace+0x206>
					{
						SendHexValue(va_arg(ArgList, unsigned long long));
     812:	f7 01       	movw	r30, r14
     814:	20 81       	ld	r18, Z
     816:	88 e0       	ldi	r24, 0x08	; 8
     818:	e8 0e       	add	r14, r24
     81a:	f1 1c       	adc	r15, r1
     81c:	31 81       	ldd	r19, Z+1	; 0x01
     81e:	42 81       	ldd	r20, Z+2	; 0x02
     820:	53 81       	ldd	r21, Z+3	; 0x03
     822:	64 81       	ldd	r22, Z+4	; 0x04
     824:	75 81       	ldd	r23, Z+5	; 0x05
     826:	86 81       	ldd	r24, Z+6	; 0x06
     828:	97 81       	ldd	r25, Z+7	; 0x07
     82a:	c4 dc       	rcall	.-1656   	; 0x1b4 <SendHexValue>
						
						IsLongLong = FALSE;
     82c:	45 2c       	mov	r4, r5
     82e:	26 c0       	rjmp	.+76     	; 0x87c <SendTrace+0x252>
					}
					else
					{

						SendHexValue(va_arg(ArgList, unsigned int));
     830:	f7 01       	movw	r30, r14
     832:	40 81       	ld	r20, Z
     834:	51 81       	ldd	r21, Z+1	; 0x01
     836:	e2 e0       	ldi	r30, 0x02	; 2
     838:	ee 0e       	add	r14, r30
     83a:	f1 1c       	adc	r15, r1
     83c:	24 2f       	mov	r18, r20
     83e:	35 2f       	mov	r19, r21
     840:	45 2d       	mov	r20, r5
     842:	55 2d       	mov	r21, r5
     844:	65 2d       	mov	r22, r5
     846:	75 2d       	mov	r23, r5
     848:	85 2d       	mov	r24, r5
     84a:	95 2d       	mov	r25, r5
     84c:	b3 dc       	rcall	.-1690   	; 0x1b4 <SendHexValue>
     84e:	16 c0       	rjmp	.+44     	; 0x87c <SendTrace+0x252>
					break;
				}
				case 'l':
				{

					if (IsLong)
     850:	dd 20       	and	r13, r13
     852:	99 f0       	breq	.+38     	; 0x87a <SendTrace+0x250>
					{
						IsLongLong = TRUE;
     854:	43 2c       	mov	r4, r3
						
						IsLong = FALSE;
     856:	d5 2c       	mov	r13, r5
     858:	11 c0       	rjmp	.+34     	; 0x87c <SendTrace+0x252>
					break;
				}
				case 's':
				{
					
					SendStringValue(va_arg(ArgList, char *)); 
     85a:	f7 01       	movw	r30, r14
     85c:	80 81       	ld	r24, Z
     85e:	91 81       	ldd	r25, Z+1	; 0x01
     860:	f2 e0       	ldi	r31, 0x02	; 2
     862:	ef 0e       	add	r14, r31
     864:	f1 1c       	adc	r15, r1
     866:	98 dc       	rcall	.-1744   	; 0x198 <SendStringValue>

					break;
     868:	09 c0       	rjmp	.+18     	; 0x87c <SendTrace+0x252>

		}
		else
		{

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
     86a:	21 e0       	ldi	r18, 0x01	; 1
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	b8 01       	movw	r22, r16
     874:	85 2d       	mov	r24, r5
     876:	d9 d3       	rcall	.+1970   	; 0x102a <UARTTransmitSync>
     878:	01 c0       	rjmp	.+2      	; 0x87c <SendTrace+0x252>
						
						IsLong = FALSE;
					}
					else
					{
						IsLong = TRUE;
     87a:	d3 2c       	mov	r13, r3

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
				
		}

		String++;
     87c:	c8 01       	movw	r24, r16
     87e:	01 96       	adiw	r24, 0x01	; 1
		return;
	}

	va_start(ArgList, String);

	while (*String != '\0')
     880:	f8 01       	movw	r30, r16
     882:	21 81       	ldd	r18, Z+1	; 0x01
     884:	22 23       	and	r18, r18
     886:	11 f0       	breq	.+4      	; 0x88c <SendTrace+0x262>

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
				
		}

		String++;
     888:	8c 01       	movw	r16, r24
     88a:	fe ce       	rjmp	.-516    	; 0x688 <SendTrace+0x5e>
		
	}
	
	va_end(ArgList);
	
}
     88c:	0f 90       	pop	r0
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	ff 90       	pop	r15
     898:	ef 90       	pop	r14
     89a:	df 90       	pop	r13
     89c:	cf 90       	pop	r12
     89e:	bf 90       	pop	r11
     8a0:	af 90       	pop	r10
     8a2:	9f 90       	pop	r9
     8a4:	8f 90       	pop	r8
     8a6:	7f 90       	pop	r7
     8a8:	6f 90       	pop	r6
     8aa:	5f 90       	pop	r5
     8ac:	4f 90       	pop	r4
     8ae:	3f 90       	pop	r3
     8b0:	08 95       	ret

000008b2 <InitTWI>:
bool
InitTWI(TWI_MODE Mode, PTWI_ADDRESS Address, PTWI_ADDRESS_MASK AddressMask)
{	
	bool Status = TRUE;
	
	if (Mode == TWI_SLAVE)
     8b2:	81 11       	cpse	r24, r1
     8b4:	20 c0       	rjmp	.+64     	; 0x8f6 <InitTWI+0x44>
	{
		if (Address != NULL && AddressMask != NULL)
     8b6:	61 15       	cp	r22, r1
     8b8:	71 05       	cpc	r23, r1
     8ba:	89 f0       	breq	.+34     	; 0x8de <InitTWI+0x2c>
     8bc:	41 15       	cp	r20, r1
     8be:	51 05       	cpc	r21, r1
     8c0:	71 f0       	breq	.+28     	; 0x8de <InitTWI+0x2c>
		{
			//
			// Set Slave Address and Mask
			//
				
			TWAR = Address->AsUINT8;
     8c2:	fb 01       	movw	r30, r22
     8c4:	80 81       	ld	r24, Z
     8c6:	80 93 ba 00 	sts	0x00BA, r24
				
			TWAMR = AddressMask->AsUINT8;
     8ca:	fa 01       	movw	r30, r20
     8cc:	80 81       	ld	r24, Z
     8ce:	80 93 bd 00 	sts	0x00BD, r24
			
			//
			// Set Data and Clock to IN
			//
			
			DDRC &= ~((0x1 << PORTC0) | (0x1 << PORTC1));
     8d2:	87 b1       	in	r24, 0x07	; 7
     8d4:	8c 7f       	andi	r24, 0xFC	; 252
     8d6:	87 b9       	out	0x07, r24	; 7
			
			gMode = TWI_SLAVE;
     8d8:	10 92 7d 04 	sts	0x047D, r1
     8dc:	12 c0       	rjmp	.+36     	; 0x902 <InitTWI+0x50>
		}
		else
		{
			SendTrace(ERROR_LEVEL, "InitTWI - Invalid Parameters\r\n");
     8de:	8c e5       	ldi	r24, 0x5C	; 92
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	9f 93       	push	r25
     8e4:	8f 93       	push	r24
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	8f 93       	push	r24
     8ea:	9f de       	rcall	.-706    	; 0x62a <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	0f 90       	pop	r0
		}
		else
		{
			SendTrace(ERROR_LEVEL, "InitTWI - Invalid Parameters\r\n");
			
			Status = FALSE;
     8f2:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
     8f4:	08 95       	ret
		}
	}
	else
	{
		gMode = TWI_MASTER;
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	80 93 7d 04 	sts	0x047D, r24
		
		//
		// Set Data and Clock to Out
		//
		
		DDRC |= ((0x1 << PORTC0) | (0x1 << PORTC1));
     8fc:	87 b1       	in	r24, 0x07	; 7
     8fe:	83 60       	ori	r24, 0x03	; 3
     900:	87 b9       	out	0x07, r24	; 7
	//
	// Set TWI Bit Rate Register to 8 so that
	// SCL is set to 100 KHz.
	//

	TWBR = BIT_RATE_VALUE;
     902:	80 e2       	ldi	r24, 0x20	; 32
     904:	80 93 b8 00 	sts	0x00B8, r24
	
	//
	// Set Pre-scalar value to 1
	//

	TWSR = 0;
     908:	10 92 b9 00 	sts	0x00B9, r1
	
	//
	// Set TWI Control Register
	//
	
	TWCR = (0x1 << TWEN) | (0x1 << TWEA);
     90c:	84 e4       	ldi	r24, 0x44	; 68
     90e:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     912:	ff ef       	ldi	r31, 0xFF	; 255
     914:	20 e7       	ldi	r18, 0x70	; 112
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	f1 50       	subi	r31, 0x01	; 1
     91a:	20 40       	sbci	r18, 0x00	; 0
     91c:	80 40       	sbci	r24, 0x00	; 0
     91e:	e1 f7       	brne	.-8      	; 0x918 <InitTWI+0x66>
     920:	00 c0       	rjmp	.+0      	; 0x922 <InitTWI+0x70>
     922:	00 00       	nop
	// Wait for 100 ms for bus to settle down
	//
	
	_delay_ms(100);
	
	gIsRepeatedStart = FALSE;
     924:	10 92 71 04 	sts	0x0471, r1
	
	gIsTWIInitialized = TRUE;
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	80 93 72 04 	sts	0x0472, r24

Exit:

	return Status;
}
     92e:	08 95       	ret

00000930 <SendStartCondition>:
	
	//
	// Send Start Condition
	//
	
	ENABLE_START();
     930:	ec eb       	ldi	r30, 0xBC	; 188
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	80 81       	ld	r24, Z
     936:	8f 75       	andi	r24, 0x5F	; 95
     938:	80 62       	ori	r24, 0x20	; 32
     93a:	80 83       	st	Z, r24
	
	WAIT_FOR_OP_COMPLETION();
     93c:	80 81       	ld	r24, Z
     93e:	80 68       	ori	r24, 0x80	; 128
     940:	80 83       	st	Z, r24
     942:	80 81       	ld	r24, Z
     944:	88 23       	and	r24, r24
     946:	ec f7       	brge	.-6      	; 0x942 <SendStartCondition+0x12>
	
	DISABLE_START();
     948:	ec eb       	ldi	r30, 0xBC	; 188
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	80 81       	ld	r24, Z
     94e:	8f 75       	andi	r24, 0x5F	; 95
     950:	80 83       	st	Z, r24
	
	if (gIsRepeatedStart)
     952:	80 91 71 04 	lds	r24, 0x0471
     956:	88 23       	and	r24, r24
     958:	41 f0       	breq	.+16     	; 0x96a <SendStartCondition+0x3a>
	{
		Status = ProcessTwiStatus(REPEATED_START_TRANSMITTED);
     95a:	90 91 b9 00 	lds	r25, 0x00B9
     95e:	98 7f       	andi	r25, 0xF8	; 248
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	90 31       	cpi	r25, 0x10	; 16
     964:	49 f0       	breq	.+18     	; 0x978 <SendStartCondition+0x48>
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	08 95       	ret
	}
	else
	{
		Status = ProcessTwiStatus(START_TRANSMITTED);
     96a:	90 91 b9 00 	lds	r25, 0x00B9
     96e:	98 7f       	andi	r25, 0xF8	; 248
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	98 30       	cpi	r25, 0x08	; 8
     974:	09 f0       	breq	.+2      	; 0x978 <SendStartCondition+0x48>
     976:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return Status;
}
     978:	08 95       	ret

0000097a <SendStopCondition>:

void
SendStopCondition()
{	
	ENABLE_STOP();
     97a:	ec eb       	ldi	r30, 0xBC	; 188
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	80 81       	ld	r24, Z
     980:	8f 76       	andi	r24, 0x6F	; 111
     982:	80 61       	ori	r24, 0x10	; 16
     984:	80 83       	st	Z, r24
	
	//
	// Send the Stop condition by clearing the TWINT flag
	//
	
	TWCR |= (1 << TWINT);
     986:	80 81       	ld	r24, Z
     988:	80 68       	ori	r24, 0x80	; 128
     98a:	80 83       	st	Z, r24
	//
	// TWINT is not set after stop condition.
	// Instead TWSTO bit in TWCR is cleared.
	//
	
	while (!(TWCR & (0x1 << TWSTO)));
     98c:	80 81       	ld	r24, Z
     98e:	84 ff       	sbrs	r24, 4
     990:	fd cf       	rjmp	.-6      	; 0x98c <SendStopCondition+0x12>
}
     992:	08 95       	ret

00000994 <Transmit>:

bool
Transmit(PVOID Buffer, unsigned long Length)
{
     994:	8f 92       	push	r8
     996:	9f 92       	push	r9
     998:	af 92       	push	r10
     99a:	bf 92       	push	r11
     99c:	df 92       	push	r13
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
	
	unsigned char *BytePtr;
	
	TWI_STATUS TransmitStatus;
	
	if (gMode == TWI_MASTER)
     9aa:	20 91 7d 04 	lds	r18, 0x047D
     9ae:	21 30       	cpi	r18, 0x01	; 1
     9b0:	29 f4       	brne	.+10     	; 0x9bc <Transmit+0x28>
	{
		TransmitStatus = DATA_TRANSMITTED_ACK;
     9b2:	0f 2e       	mov	r0, r31
     9b4:	f8 e2       	ldi	r31, 0x28	; 40
     9b6:	df 2e       	mov	r13, r31
     9b8:	f0 2d       	mov	r31, r0
     9ba:	04 c0       	rjmp	.+8      	; 0x9c4 <Transmit+0x30>
	}
	else
	{
		TransmitStatus = SLA_R_DATA_TRANSMITTED_ACK;
     9bc:	0f 2e       	mov	r0, r31
     9be:	f8 eb       	ldi	r31, 0xB8	; 184
     9c0:	df 2e       	mov	r13, r31
     9c2:	f0 2d       	mov	r31, r0
	// Now transmit the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
     9c4:	4a 01       	movw	r8, r20
     9c6:	5b 01       	movw	r10, r22
     9c8:	21 e0       	ldi	r18, 0x01	; 1
     9ca:	82 1a       	sub	r8, r18
     9cc:	91 08       	sbc	r9, r1
     9ce:	a1 08       	sbc	r10, r1
     9d0:	b1 08       	sbc	r11, r1
     9d2:	81 14       	cp	r8, r1
     9d4:	91 04       	cpc	r9, r1
     9d6:	a1 04       	cpc	r10, r1
     9d8:	b1 04       	cpc	r11, r1
     9da:	e1 f1       	breq	.+120    	; 0xa54 <Transmit+0xc0>
     9dc:	dc 01       	movw	r26, r24
     9de:	00 e0       	ldi	r16, 0x00	; 0
     9e0:	10 e0       	ldi	r17, 0x00	; 0
     9e2:	98 01       	movw	r18, r16
	{
		TWDR = *BytePtr;
     9e4:	4b eb       	ldi	r20, 0xBB	; 187
     9e6:	50 e0       	ldi	r21, 0x00	; 0
		
		WAIT_FOR_OP_COMPLETION();
     9e8:	ec eb       	ldi	r30, 0xBC	; 188
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
		
		if (!ProcessTwiStatus(TransmitStatus))
     9ec:	0f 2e       	mov	r0, r31
     9ee:	f9 eb       	ldi	r31, 0xB9	; 185
     9f0:	ef 2e       	mov	r14, r31
     9f2:	f1 2c       	mov	r15, r1
     9f4:	f0 2d       	mov	r31, r0
     9f6:	6d 2d       	mov	r22, r13
     9f8:	70 e0       	ldi	r23, 0x00	; 0
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
	{
		TWDR = *BytePtr;
     9fa:	8d 91       	ld	r24, X+
     9fc:	ea 01       	movw	r28, r20
     9fe:	88 83       	st	Y, r24
		
		WAIT_FOR_OP_COMPLETION();
     a00:	80 81       	ld	r24, Z
     a02:	80 68       	ori	r24, 0x80	; 128
     a04:	80 83       	st	Z, r24
     a06:	80 81       	ld	r24, Z
     a08:	88 23       	and	r24, r24
     a0a:	ec f7       	brge	.-6      	; 0xa06 <Transmit+0x72>
		
		if (!ProcessTwiStatus(TransmitStatus))
     a0c:	e7 01       	movw	r28, r14
     a0e:	88 81       	ld	r24, Y
     a10:	88 7f       	andi	r24, 0xF8	; 248
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	86 17       	cp	r24, r22
     a16:	97 07       	cpc	r25, r23
     a18:	99 f0       	breq	.+38     	; 0xa40 <Transmit+0xac>
		{
			SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     a1a:	80 91 b9 00 	lds	r24, 0x00B9
     a1e:	88 7f       	andi	r24, 0xF8	; 248
     a20:	1f 92       	push	r1
     a22:	8f 93       	push	r24
     a24:	8b e7       	ldi	r24, 0x7B	; 123
     a26:	91 e0       	ldi	r25, 0x01	; 1
     a28:	9f 93       	push	r25
     a2a:	8f 93       	push	r24
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	8f 93       	push	r24
     a30:	fc dd       	rcall	.-1032   	; 0x62a <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(TransmitStatus))
		{
			SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
			
			Status = FALSE;
     a3c:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
     a3e:	3b c0       	rjmp	.+118    	; 0xab6 <Transmit+0x122>
		}
		
		BytePtr++;
     a40:	cd 01       	movw	r24, r26
	// Now transmit the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
     a42:	0f 5f       	subi	r16, 0xFF	; 255
     a44:	1f 4f       	sbci	r17, 0xFF	; 255
     a46:	2f 4f       	sbci	r18, 0xFF	; 255
     a48:	3f 4f       	sbci	r19, 0xFF	; 255
     a4a:	08 15       	cp	r16, r8
     a4c:	19 05       	cpc	r17, r9
     a4e:	2a 05       	cpc	r18, r10
     a50:	3b 05       	cpc	r19, r11
     a52:	98 f2       	brcs	.-90     	; 0x9fa <Transmit+0x66>
	
	//
	// In slave mode after transmitting the last byte we will get a NACK from the Master
	//
	
	if (gMode == TWI_SLAVE)
     a54:	20 91 7d 04 	lds	r18, 0x047D
     a58:	21 11       	cpse	r18, r1
     a5a:	04 c0       	rjmp	.+8      	; 0xa64 <Transmit+0xd0>
	{
		TransmitStatus = SLA_R_DATA_TRANSMITTED_NACK;
     a5c:	0f 2e       	mov	r0, r31
     a5e:	f0 ec       	ldi	r31, 0xC0	; 192
     a60:	df 2e       	mov	r13, r31
     a62:	f0 2d       	mov	r31, r0
	}
	
	TWDR = *BytePtr;
     a64:	fc 01       	movw	r30, r24
     a66:	80 81       	ld	r24, Z
     a68:	80 93 bb 00 	sts	0x00BB, r24
	
	WAIT_FOR_OP_COMPLETION();
     a6c:	ec eb       	ldi	r30, 0xBC	; 188
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	80 81       	ld	r24, Z
     a72:	80 68       	ori	r24, 0x80	; 128
     a74:	80 83       	st	Z, r24
     a76:	80 81       	ld	r24, Z
     a78:	88 23       	and	r24, r24
     a7a:	ec f7       	brge	.-6      	; 0xa76 <Transmit+0xe2>
	
	if (!ProcessTwiStatus(TransmitStatus))
     a7c:	20 91 b9 00 	lds	r18, 0x00B9
     a80:	28 7f       	andi	r18, 0xF8	; 248
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	8d 2d       	mov	r24, r13
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	28 17       	cp	r18, r24
     a8a:	39 07       	cpc	r19, r25
     a8c:	99 f0       	breq	.+38     	; 0xab4 <Transmit+0x120>
	{
		SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     a8e:	80 91 b9 00 	lds	r24, 0x00B9
     a92:	88 7f       	andi	r24, 0xF8	; 248
     a94:	1f 92       	push	r1
     a96:	8f 93       	push	r24
     a98:	8b e7       	ldi	r24, 0x7B	; 123
     a9a:	91 e0       	ldi	r25, 0x01	; 1
     a9c:	9f 93       	push	r25
     a9e:	8f 93       	push	r24
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	8f 93       	push	r24
     aa4:	c2 dd       	rcall	.-1148   	; 0x62a <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
     aa6:	0f 90       	pop	r0
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
	
	if (!ProcessTwiStatus(TransmitStatus))
	{
		SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     ab0:	80 e0       	ldi	r24, 0x00	; 0
		
		goto Exit;
     ab2:	01 c0       	rjmp	.+2      	; 0xab6 <Transmit+0x122>
}

bool
Transmit(PVOID Buffer, unsigned long Length)
{
	bool Status = TRUE;
     ab4:	81 e0       	ldi	r24, 0x01	; 1
	}
	
Exit:

	return Status;	
}
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	ff 90       	pop	r15
     ac0:	ef 90       	pop	r14
     ac2:	df 90       	pop	r13
     ac4:	bf 90       	pop	r11
     ac6:	af 90       	pop	r10
     ac8:	9f 90       	pop	r9
     aca:	8f 90       	pop	r8
     acc:	08 95       	ret

00000ace <TwiMasterTransmit>:
bool
TwiMasterTransmit(PVOID Buffer, 
				  unsigned long Length, 
				  PTWI_ADDRESS Address,
				  bool SendStop)
{
     ace:	af 92       	push	r10
     ad0:	bf 92       	push	r11
     ad2:	cf 92       	push	r12
     ad4:	df 92       	push	r13
     ad6:	ef 92       	push	r14
     ad8:	ff 92       	push	r15
     ada:	0f 93       	push	r16
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	5c 01       	movw	r10, r24
     ae2:	6a 01       	movw	r12, r20
     ae4:	7b 01       	movw	r14, r22
     ae6:	e9 01       	movw	r28, r18
	bool Status = TRUE;
	
	if (!SendStartCondition())
     ae8:	23 df       	rcall	.-442    	; 0x930 <SendStartCondition>
     aea:	81 11       	cpse	r24, r1
     aec:	13 c0       	rjmp	.+38     	; 0xb14 <TwiMasterTransmit+0x46>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     aee:	80 91 b9 00 	lds	r24, 0x00B9
     af2:	88 7f       	andi	r24, 0xF8	; 248
     af4:	1f 92       	push	r1
     af6:	8f 93       	push	r24
     af8:	81 eb       	ldi	r24, 0xB1	; 177
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	9f 93       	push	r25
     afe:	8f 93       	push	r24
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	8f 93       	push	r24
     b04:	92 dd       	rcall	.-1244   	; 0x62a <SendTrace>
		
		Status = FALSE;
			
		goto Exit;
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
	
	if (!SendStartCondition())
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     b10:	c0 e0       	ldi	r28, 0x00	; 0
			
		goto Exit;
     b12:	33 c0       	rjmp	.+102    	; 0xb7a <TwiMasterTransmit+0xac>
	}
	
	gIsRepeatedStart = FALSE;
     b14:	10 92 71 04 	sts	0x0471, r1
	//
	// Set Address->ReadWrite = 0 indicating a write operation.
	// Then transmit SLA+W
	//
	
	Address->RW_EnGenCall = 0;
     b18:	88 81       	ld	r24, Y
     b1a:	8e 7f       	andi	r24, 0xFE	; 254
     b1c:	88 83       	st	Y, r24
	
	TWDR = Address->AsUINT8;
     b1e:	80 93 bb 00 	sts	0x00BB, r24
		
	WAIT_FOR_OP_COMPLETION();
     b22:	ec eb       	ldi	r30, 0xBC	; 188
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	80 81       	ld	r24, Z
     b28:	80 68       	ori	r24, 0x80	; 128
     b2a:	80 83       	st	Z, r24
     b2c:	80 81       	ld	r24, Z
     b2e:	88 23       	and	r24, r24
     b30:	ec f7       	brge	.-6      	; 0xb2c <TwiMasterTransmit+0x5e>
		
	if (!ProcessTwiStatus(SLA_W_TRANSMITTED_ACK))
     b32:	80 91 b9 00 	lds	r24, 0x00B9
     b36:	88 7f       	andi	r24, 0xF8	; 248
     b38:	88 31       	cpi	r24, 0x18	; 24
     b3a:	99 f0       	breq	.+38     	; 0xb62 <TwiMasterTransmit+0x94>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Slave Address and Write Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     b3c:	80 91 b9 00 	lds	r24, 0x00B9
     b40:	88 7f       	andi	r24, 0xF8	; 248
     b42:	1f 92       	push	r1
     b44:	8f 93       	push	r24
     b46:	8b ef       	ldi	r24, 0xFB	; 251
     b48:	91 e0       	ldi	r25, 0x01	; 1
     b4a:	9f 93       	push	r25
     b4c:	8f 93       	push	r24
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	8f 93       	push	r24
     b52:	6b dd       	rcall	.-1322   	; 0x62a <SendTrace>
		
		Status = FALSE;
			
		goto Exit;
     b54:	0f 90       	pop	r0
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
     b5a:	0f 90       	pop	r0
     b5c:	0f 90       	pop	r0
		
	if (!ProcessTwiStatus(SLA_W_TRANSMITTED_ACK))
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Slave Address and Write Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     b5e:	c0 e0       	ldi	r28, 0x00	; 0
			
		goto Exit;
     b60:	0c c0       	rjmp	.+24     	; 0xb7a <TwiMasterTransmit+0xac>
	}
	
	Status = Transmit(Buffer, Length);
     b62:	b7 01       	movw	r22, r14
     b64:	a6 01       	movw	r20, r12
     b66:	c5 01       	movw	r24, r10
     b68:	15 df       	rcall	.-470    	; 0x994 <Transmit>
     b6a:	c8 2f       	mov	r28, r24
	
	//
	// Send stop condition
	//
	
	if (SendStop)
     b6c:	00 23       	and	r16, r16
     b6e:	11 f0       	breq	.+4      	; 0xb74 <TwiMasterTransmit+0xa6>
	{
		SendStopCondition();
     b70:	04 df       	rcall	.-504    	; 0x97a <SendStopCondition>
     b72:	03 c0       	rjmp	.+6      	; 0xb7a <TwiMasterTransmit+0xac>
	}
	else
	{
		gIsRepeatedStart = TRUE;
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	80 93 71 04 	sts	0x0471, r24
	}
	
Exit:

	return Status;
}
     b7a:	8c 2f       	mov	r24, r28
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	0f 91       	pop	r16
     b82:	ff 90       	pop	r15
     b84:	ef 90       	pop	r14
     b86:	df 90       	pop	r13
     b88:	cf 90       	pop	r12
     b8a:	bf 90       	pop	r11
     b8c:	af 90       	pop	r10
     b8e:	08 95       	ret

00000b90 <TwiTransmit>:
bool 
TwiTransmit(PVOID Buffer, 
			unsigned long Length,
			PTWI_ADDRESS Address,
			bool SendStop)
{
     b90:	0f 93       	push	r16
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
     b92:	e0 91 72 04 	lds	r30, 0x0472
     b96:	ee 23       	and	r30, r30
     b98:	09 f4       	brne	.+2      	; 0xb9c <TwiTransmit+0xc>
     b9a:	48 c0       	rjmp	.+144    	; 0xc2c <TwiTransmit+0x9c>
     b9c:	00 97       	sbiw	r24, 0x00	; 0
     b9e:	09 f4       	brne	.+2      	; 0xba2 <TwiTransmit+0x12>
     ba0:	47 c0       	rjmp	.+142    	; 0xc30 <TwiTransmit+0xa0>
		Status = FALSE;
		
		goto Exit;
	}
	
	if (gMode == TWI_MASTER)
     ba2:	e0 91 7d 04 	lds	r30, 0x047D
     ba6:	e1 30       	cpi	r30, 0x01	; 1
     ba8:	89 f4       	brne	.+34     	; 0xbcc <TwiTransmit+0x3c>
	{
		if (Address == NULL)
     baa:	21 15       	cp	r18, r1
     bac:	31 05       	cpc	r19, r1
     bae:	61 f4       	brne	.+24     	; 0xbc8 <TwiTransmit+0x38>
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Invalid Parameters\r\n");
     bb0:	82 e5       	ldi	r24, 0x52	; 82
     bb2:	92 e0       	ldi	r25, 0x02	; 2
     bb4:	9f 93       	push	r25
     bb6:	8f 93       	push	r24
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	8f 93       	push	r24
     bbc:	36 dd       	rcall	.-1428   	; 0x62a <SendTrace>
			
			Status = FALSE;
		
			goto Exit;
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
	{
		if (Address == NULL)
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Invalid Parameters\r\n");
			
			Status = FALSE;
     bc4:	80 e0       	ldi	r24, 0x00	; 0
		
			goto Exit;
     bc6:	35 c0       	rjmp	.+106    	; 0xc32 <TwiTransmit+0xa2>
		}
		else
		{
			Status = TwiMasterTransmit(Buffer, Length, Address, SendStop);	
     bc8:	82 df       	rcall	.-252    	; 0xace <TwiMasterTransmit>
     bca:	33 c0       	rjmp	.+102    	; 0xc32 <TwiTransmit+0xa2>
		}
	}
	else
	{
		WAIT_FOR_OP_COMPLETION();
     bcc:	ec eb       	ldi	r30, 0xBC	; 188
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	20 81       	ld	r18, Z
     bd2:	20 68       	ori	r18, 0x80	; 128
     bd4:	20 83       	st	Z, r18
     bd6:	20 81       	ld	r18, Z
     bd8:	22 23       	and	r18, r18
     bda:	ec f7       	brge	.-6      	; 0xbd6 <TwiTransmit+0x46>
		
		if (ProcessTwiStatus(STOP_REPEATED_START_RECEIVED))
     bdc:	20 91 b9 00 	lds	r18, 0x00B9
     be0:	28 7f       	andi	r18, 0xF8	; 248
     be2:	20 3a       	cpi	r18, 0xA0	; 160
     be4:	41 f4       	brne	.+16     	; 0xbf6 <TwiTransmit+0x66>
		{
			WAIT_FOR_OP_COMPLETION();	
     be6:	ec eb       	ldi	r30, 0xBC	; 188
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	20 81       	ld	r18, Z
     bec:	20 68       	ori	r18, 0x80	; 128
     bee:	20 83       	st	Z, r18
     bf0:	20 81       	ld	r18, Z
     bf2:	22 23       	and	r18, r18
     bf4:	ec f7       	brge	.-6      	; 0xbf0 <TwiTransmit+0x60>
		}
		
		if (!ProcessTwiStatus(SLA_R_RECEIVED_ACK))
     bf6:	20 91 b9 00 	lds	r18, 0x00B9
     bfa:	28 7f       	andi	r18, 0xF8	; 248
     bfc:	28 3a       	cpi	r18, 0xA8	; 168
     bfe:	91 f0       	breq	.+36     	; 0xc24 <TwiTransmit+0x94>
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Slave Read Not Requested by Master - 0x%x\r\n", TWSR);
     c00:	80 91 b9 00 	lds	r24, 0x00B9
     c04:	1f 92       	push	r1
     c06:	8f 93       	push	r24
     c08:	85 e7       	ldi	r24, 0x75	; 117
     c0a:	92 e0       	ldi	r25, 0x02	; 2
     c0c:	9f 93       	push	r25
     c0e:	8f 93       	push	r24
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	8f 93       	push	r24
     c14:	0a dd       	rcall	.-1516   	; 0x62a <SendTrace>
			
			Status = FALSE;
		
			goto Exit;
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(SLA_R_RECEIVED_ACK))
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Slave Read Not Requested by Master - 0x%x\r\n", TWSR);
			
			Status = FALSE;
     c20:	80 e0       	ldi	r24, 0x00	; 0
		
			goto Exit;
     c22:	07 c0       	rjmp	.+14     	; 0xc32 <TwiTransmit+0xa2>
		}
		else
		{	
			DATA_OUT();
     c24:	39 9a       	sbi	0x07, 1	; 7
		
			Status = Transmit(Buffer, Length);
     c26:	b6 de       	rcall	.-660    	; 0x994 <Transmit>
		
			DATA_IN();
     c28:	39 98       	cbi	0x07, 1	; 7
     c2a:	03 c0       	rjmp	.+6      	; 0xc32 <TwiTransmit+0xa2>
{
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
	{
		Status = FALSE;
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	01 c0       	rjmp	.+2      	; 0xc32 <TwiTransmit+0xa2>
     c30:	80 e0       	ldi	r24, 0x00	; 0
	}
	
Exit:

	return Status;
}
     c32:	0f 91       	pop	r16
     c34:	08 95       	ret

00000c36 <LCDWrite>:
	return Status;
}

bool
LCDWrite(PLCD_TWI_DATA TwiData, bool IsEndOfTransfer)
{
     c36:	ff 92       	push	r15
     c38:	0f 93       	push	r16
     c3a:	1f 93       	push	r17
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	ec 01       	movw	r28, r24
     c42:	f6 2e       	mov	r15, r22
	bool Status = FALSE;
	
	gSlaveAddress.RW_EnGenCall = 0;
     c44:	80 91 7e 04 	lds	r24, 0x047E
     c48:	8e 7f       	andi	r24, 0xFE	; 254
     c4a:	80 93 7e 04 	sts	0x047E, r24
	
	//
	// Send the value using TWI Transmit.
	//
	
	TwiData->Enable = 1;
     c4e:	88 81       	ld	r24, Y
     c50:	84 60       	ori	r24, 0x04	; 4
     c52:	88 83       	st	Y, r24
	
	Status = TwiTransmit(&TwiData->AsUINT8, 1, &gSlaveAddress, FALSE);
     c54:	00 e0       	ldi	r16, 0x00	; 0
     c56:	2e e7       	ldi	r18, 0x7E	; 126
     c58:	34 e0       	ldi	r19, 0x04	; 4
     c5a:	41 e0       	ldi	r20, 0x01	; 1
     c5c:	50 e0       	ldi	r21, 0x00	; 0
     c5e:	60 e0       	ldi	r22, 0x00	; 0
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	ce 01       	movw	r24, r28
     c64:	95 df       	rcall	.-214    	; 0xb90 <TwiTransmit>
     c66:	18 2f       	mov	r17, r24
	
	if (!Status)
     c68:	81 11       	cpse	r24, r1
     c6a:	0b c0       	rjmp	.+22     	; 0xc82 <LCDWrite+0x4c>
	{
		SendTrace(ERROR_LEVEL, "Transmit - Twi Transmit Failed\r\n");
     c6c:	22 ee       	ldi	r18, 0xE2	; 226
     c6e:	33 e0       	ldi	r19, 0x03	; 3
     c70:	3f 93       	push	r19
     c72:	2f 93       	push	r18
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	8f 93       	push	r24
     c78:	d8 dc       	rcall	.-1616   	; 0x62a <SendTrace>
		
		goto Exit;
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	19 c0       	rjmp	.+50     	; 0xcb4 <LCDWrite+0x7e>
	
	//
	// Now pulse the enable bit.
	//
	
	TwiData->Enable = 0;
     c82:	88 81       	ld	r24, Y
     c84:	8b 7f       	andi	r24, 0xFB	; 251
     c86:	88 83       	st	Y, r24

	Status = TwiTransmit(&TwiData->AsUINT8, 1, &gSlaveAddress, IsEndOfTransfer);
     c88:	0f 2d       	mov	r16, r15
     c8a:	2e e7       	ldi	r18, 0x7E	; 126
     c8c:	34 e0       	ldi	r19, 0x04	; 4
     c8e:	41 e0       	ldi	r20, 0x01	; 1
     c90:	50 e0       	ldi	r21, 0x00	; 0
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	ce 01       	movw	r24, r28
     c98:	7b df       	rcall	.-266    	; 0xb90 <TwiTransmit>
     c9a:	18 2f       	mov	r17, r24
	
	if (!Status)
     c9c:	81 11       	cpse	r24, r1
     c9e:	0a c0       	rjmp	.+20     	; 0xcb4 <LCDWrite+0x7e>
	{
		SendTrace(ERROR_LEVEL, "Transmit - Twi Transmit Failed\r\n");
     ca0:	22 ee       	ldi	r18, 0xE2	; 226
     ca2:	33 e0       	ldi	r19, 0x03	; 3
     ca4:	3f 93       	push	r19
     ca6:	2f 93       	push	r18
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	8f 93       	push	r24
     cac:	be dc       	rcall	.-1668   	; 0x62a <SendTrace>
		
		goto Exit;
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
	
	
Exit:

	return Status;
     cb4:	81 2f       	mov	r24, r17
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	08 95       	ret

00000cc2 <LCDTransmit>:
	return Status;
}

bool
LCDTransmit(unsigned char Value, LCD_REG_SELECT RegSelect, bool IsEndOfTransfer)
{
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	1f 92       	push	r1
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	18 2f       	mov	r17, r24
     cd2:	04 2f       	mov	r16, r20
	bool Status;
	
	LCD_TWI_DATA TwiData;
	
	
	TwiData.RegSelect = RegSelect;
     cd4:	99 81       	ldd	r25, Y+1	; 0x01
     cd6:	60 fb       	bst	r22, 0
     cd8:	90 f9       	bld	r25, 0
	
	TwiData.BackLight = gBackLight;
     cda:	80 91 78 04 	lds	r24, 0x0478
     cde:	80 fb       	bst	r24, 0
     ce0:	93 f9       	bld	r25, 3
	//
	// We send upper nibble first and then the lower nibble of the Value
	// First four bits E, RS, BL, RW stays the same in both the transfers.
	//
	
	TwiData.Data = Value >> UPPER_NIBBLE_SHIFT;
     ce2:	81 2f       	mov	r24, r17
     ce4:	80 7f       	andi	r24, 0xF0	; 240
     ce6:	9d 70       	andi	r25, 0x0D	; 13
     ce8:	98 2b       	or	r25, r24
     cea:	99 83       	std	Y+1, r25	; 0x01
	
	Status = LCDWrite(&TwiData, FALSE);
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	ce 01       	movw	r24, r28
     cf0:	01 96       	adiw	r24, 0x01	; 1
     cf2:	a1 df       	rcall	.-190    	; 0xc36 <LCDWrite>
	
	if (!Status)
     cf4:	88 23       	and	r24, r24
     cf6:	51 f0       	breq	.+20     	; 0xd0c <LCDTransmit+0x4a>
	
	//
	// Send the Lower Nibble
	//
	
	TwiData.Data = Value & LOWER_NIBBLE_MASK;
     cf8:	12 95       	swap	r17
     cfa:	10 7f       	andi	r17, 0xF0	; 240
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	8f 70       	andi	r24, 0x0F	; 15
     d00:	18 2b       	or	r17, r24
     d02:	19 83       	std	Y+1, r17	; 0x01
	
	Status = LCDWrite(&TwiData, IsEndOfTransfer);
     d04:	60 2f       	mov	r22, r16
     d06:	ce 01       	movw	r24, r28
     d08:	01 96       	adiw	r24, 0x01	; 1
     d0a:	95 df       	rcall	.-214    	; 0xc36 <LCDWrite>
	}
	
Exit:
	
	return Status;
}
     d0c:	0f 90       	pop	r0
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	08 95       	ret

00000d18 <LCDClearDisplay>:
bool
LCDClearDisplay()
{	
	bool Status;
	
	Status = LCDTransmit(CLEAR_DISPLAY_CTRL, LCD_IR_REG, TRUE);
     d18:	41 e0       	ldi	r20, 0x01	; 1
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	d1 cf       	rjmp	.-94     	; 0xcc2 <LCDTransmit>

	return Status;
}
     d20:	08 95       	ret

00000d22 <LCDSetCursorToHomePos>:
bool
LCDSetCursorToHomePos()
{
	bool Status;
	
	Status = LCDTransmit(RETURN_HOME_CTRL, LCD_IR_REG, TRUE);
     d22:	41 e0       	ldi	r20, 0x01	; 1
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	cc df       	rcall	.-104    	; 0xcc2 <LCDTransmit>
     d2a:	ef e9       	ldi	r30, 0x9F	; 159
     d2c:	ff e0       	ldi	r31, 0x0F	; 15
     d2e:	31 97       	sbiw	r30, 0x01	; 1
     d30:	f1 f7       	brne	.-4      	; 0xd2e <LCDSetCursorToHomePos+0xc>
     d32:	00 c0       	rjmp	.+0      	; 0xd34 <LCDSetCursorToHomePos+0x12>
     d34:	00 00       	nop
	
	_delay_ms(2);

	return Status;
}
     d36:	08 95       	ret

00000d38 <LCDSetDisplayControl>:
	
	//
	// Set Display On Flag
	//
	
	if (IsDisplayOn)
     d38:	81 11       	cpse	r24, r1
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <LCDSetDisplayControl+0x8>
bool
LCDSetDisplayControl(bool IsDisplayOn, bool IsCursorOn, bool IsCursorBlinkOn, bool IsBackLightOn)
{
	bool Status = FALSE;
	
	unsigned char Value = DISPLAY_CTRL;
     d3c:	88 e0       	ldi	r24, 0x08	; 8
     d3e:	01 c0       	rjmp	.+2      	; 0xd42 <LCDSetDisplayControl+0xa>
	// Set Display On Flag
	//
	
	if (IsDisplayOn)
	{
		Value |= DISPLAY_ON;
     d40:	8c e0       	ldi	r24, 0x0C	; 12
	
	//
	// Set Cursor On Flag
	//
	
	if (IsCursorOn)
     d42:	61 11       	cpse	r22, r1
	{
		Value |= CURSOR_ON;
     d44:	82 60       	ori	r24, 0x02	; 2
	
	//
	// Set Cursor Blink On Flag
	//
	
	if (IsCursorBlinkOn)
     d46:	41 11       	cpse	r20, r1
	{
		Value |= BLINK_ON;
     d48:	81 60       	ori	r24, 0x01	; 1
	
	//
	// Set Back Light On
	//
	
	gBackLight = IsBackLightOn;
     d4a:	20 93 78 04 	sts	0x0478, r18
	
	Status = LCDTransmit(Value, LCD_IR_REG, TRUE);
     d4e:	41 e0       	ldi	r20, 0x01	; 1
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	b7 cf       	rjmp	.-146    	; 0xcc2 <LCDTransmit>

	return Status;
}
     d54:	08 95       	ret

00000d56 <LCDSetCursorPosition>:

bool
LCDSetCursorPosition(unsigned char LineNumber, unsigned char Position)
{
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	c8 2f       	mov	r28, r24
     d5c:	d6 2f       	mov	r29, r22
	bool Status = FALSE;
	
	unsigned char Value = DDRAM_CTRL;
	
	if (!gLCDInitialized)
     d5e:	80 91 79 04 	lds	r24, 0x0479
     d62:	81 11       	cpse	r24, r1
     d64:	0c c0       	rjmp	.+24     	; 0xd7e <LCDSetCursorPosition+0x28>
	{
		SendTrace(ERROR_LEVEL, "LCDSetCursorPosition - LCD Not Initialized\r\n");
     d66:	83 e0       	ldi	r24, 0x03	; 3
     d68:	94 e0       	ldi	r25, 0x04	; 4
     d6a:	9f 93       	push	r25
     d6c:	8f 93       	push	r24
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	8f 93       	push	r24
     d72:	5b dc       	rcall	.-1866   	; 0x62a <SendTrace>
		
		goto Exit;
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
}

bool
LCDSetCursorPosition(unsigned char LineNumber, unsigned char Position)
{
	bool Status = FALSE;
     d7a:	80 e0       	ldi	r24, 0x00	; 0
	
	if (!gLCDInitialized)
	{
		SendTrace(ERROR_LEVEL, "LCDSetCursorPosition - LCD Not Initialized\r\n");
		
		goto Exit;
     d7c:	19 c0       	rjmp	.+50     	; 0xdb0 <LCDSetCursorPosition+0x5a>
	}
	
	if (LineNumber >= gMaxLines)
     d7e:	80 91 73 04 	lds	r24, 0x0473
     d82:	c8 17       	cp	r28, r24
     d84:	90 f4       	brcc	.+36     	; 0xdaa <LCDSetCursorPosition+0x54>
	{
		goto Exit;
	}
	
	if (Position >= MAX_BUFFER_SIZE)
     d86:	60 34       	cpi	r22, 0x40	; 64
     d88:	90 f4       	brcc	.+36     	; 0xdae <LCDSetCursorPosition+0x58>
	// Set DDRAM Address
	//
	
	Value |= (LineNumber * DDRAM_ADDRESS_INTERLEAVING) + Position;
	
	Status = LCDTransmit(Value, LCD_IR_REG, TRUE);
     d8a:	41 e0       	ldi	r20, 0x01	; 1
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	8d 2f       	mov	r24, r29
     d90:	90 e4       	ldi	r25, 0x40	; 64
     d92:	c9 9f       	mul	r28, r25
     d94:	80 0d       	add	r24, r0
     d96:	11 24       	eor	r1, r1
     d98:	80 68       	ori	r24, 0x80	; 128
     d9a:	93 df       	rcall	.-218    	; 0xcc2 <LCDTransmit>
	
	if (Status)
     d9c:	88 23       	and	r24, r24
     d9e:	41 f0       	breq	.+16     	; 0xdb0 <LCDSetCursorPosition+0x5a>
	{
		gLineNumber = LineNumber;
     da0:	c0 93 75 04 	sts	0x0475, r28
		
		gCursorPosition = Position;
     da4:	d0 93 76 04 	sts	0x0476, r29
     da8:	03 c0       	rjmp	.+6      	; 0xdb0 <LCDSetCursorPosition+0x5a>
}

bool
LCDSetCursorPosition(unsigned char LineNumber, unsigned char Position)
{
	bool Status = FALSE;
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	01 c0       	rjmp	.+2      	; 0xdb0 <LCDSetCursorPosition+0x5a>
     dae:	80 e0       	ldi	r24, 0x00	; 0
	}
	
Exit:

	return Status;
}
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	08 95       	ret

00000db6 <LCDSetEntryMode>:
	
	//
	// Set Display Shift Flag
	//
	
	if (IsDisplayShift)
     db6:	81 11       	cpse	r24, r1
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <LCDSetEntryMode+0x8>
bool
LCDSetEntryMode(bool IsDisplayShift, bool IsIncrement)
{
	bool Status; 
	
	unsigned char Value = ENTRY_MODE_CTRL;
     dba:	84 e0       	ldi	r24, 0x04	; 4
     dbc:	01 c0       	rjmp	.+2      	; 0xdc0 <LCDSetEntryMode+0xa>
	// Set Display Shift Flag
	//
	
	if (IsDisplayShift)
	{
		Value |= EM_DISPLAY_SHIFT;
     dbe:	85 e0       	ldi	r24, 0x05	; 5
	
	//
	// Set Increment Position Flag
	//
	
	if (IsIncrement)
     dc0:	61 11       	cpse	r22, r1
	{
		Value |= INCREMENT_POS;
     dc2:	82 60       	ori	r24, 0x02	; 2
	}
	
	Status = LCDTransmit(Value, LCD_IR_REG, TRUE);
     dc4:	41 e0       	ldi	r20, 0x01	; 1
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	7c cf       	rjmp	.-264    	; 0xcc2 <LCDTransmit>

	return Status;

}
     dca:	08 95       	ret

00000dcc <LCDShiftCursorOrDisplay>:
	
	//
	// Set Display Shift Flag
	//
	
	if (IsDisplayShift)
     dcc:	81 11       	cpse	r24, r1
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <LCDShiftCursorOrDisplay+0x8>
bool
LCDShiftCursorOrDisplay(bool IsDisplayShift, bool IsIncrement)
{
	bool Status;
	
	unsigned char Value = CURSOR_DISPLAY_SHIFT_CTRL;
     dd0:	80 e1       	ldi	r24, 0x10	; 16
     dd2:	01 c0       	rjmp	.+2      	; 0xdd6 <LCDShiftCursorOrDisplay+0xa>
	// Set Display Shift Flag
	//
	
	if (IsDisplayShift)
	{
		Value |= CD_DISPLAY_SHIFT;
     dd4:	88 e1       	ldi	r24, 0x18	; 24
	
	//
	// Set Increment Flag
	//
	
	if (IsIncrement)
     dd6:	61 11       	cpse	r22, r1
	{
		Value |= MOVE_RIGHT;
     dd8:	84 60       	ori	r24, 0x04	; 4
	}
	
	Status = LCDTransmit(Value, LCD_IR_REG, TRUE);
     dda:	41 e0       	ldi	r20, 0x01	; 1
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	71 cf       	rjmp	.-286    	; 0xcc2 <LCDTransmit>

	return Status;
}
     de0:	08 95       	ret

00000de2 <LCDPrint>:
	return Status;
}

bool
LCDPrint(char *String)
{
     de2:	7f 92       	push	r7
     de4:	8f 92       	push	r8
     de6:	9f 92       	push	r9
     de8:	af 92       	push	r10
     dea:	bf 92       	push	r11
     dec:	cf 92       	push	r12
     dee:	df 92       	push	r13
     df0:	ef 92       	push	r14
     df2:	ff 92       	push	r15
     df4:	0f 93       	push	r16
     df6:	1f 93       	push	r17
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
	
	unsigned long Len;
	
	unsigned long IndexI;
	
	if (!gLCDInitialized)
     dfc:	20 91 79 04 	lds	r18, 0x0479
     e00:	21 11       	cpse	r18, r1
     e02:	0c c0       	rjmp	.+24     	; 0xe1c <LCDPrint+0x3a>
	{
		SendTrace(ERROR_LEVEL, "LCDPrint - LCD Not Initialized\r\n");
     e04:	80 e3       	ldi	r24, 0x30	; 48
     e06:	94 e0       	ldi	r25, 0x04	; 4
     e08:	9f 93       	push	r25
     e0a:	8f 93       	push	r24
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	8f 93       	push	r24
     e10:	0c dc       	rcall	.-2024   	; 0x62a <SendTrace>
		
		goto Exit;
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
}

bool
LCDPrint(char *String)
{
	bool Status = FALSE;
     e18:	80 e0       	ldi	r24, 0x00	; 0
	
	if (!gLCDInitialized)
	{
		SendTrace(ERROR_LEVEL, "LCDPrint - LCD Not Initialized\r\n");
		
		goto Exit;
     e1a:	65 c0       	rjmp	.+202    	; 0xee6 <LCDPrint+0x104>
	}
	
	Len = strlen(String);
     e1c:	fc 01       	movw	r30, r24
     e1e:	01 90       	ld	r0, Z+
     e20:	00 20       	and	r0, r0
     e22:	e9 f7       	brne	.-6      	; 0xe1e <LCDPrint+0x3c>
     e24:	31 97       	sbiw	r30, 0x01	; 1
     e26:	4f 01       	movw	r8, r30
     e28:	88 1a       	sub	r8, r24
     e2a:	99 0a       	sbc	r9, r25
     e2c:	a1 2c       	mov	r10, r1
     e2e:	b1 2c       	mov	r11, r1
	
	//
	// Loop through each character and send it to Data Register
	//
	
	for(IndexI = 0; IndexI < Len; IndexI++)
     e30:	81 14       	cp	r8, r1
     e32:	91 04       	cpc	r9, r1
     e34:	a1 04       	cpc	r10, r1
     e36:	b1 04       	cpc	r11, r1
     e38:	09 f4       	brne	.+2      	; 0xe3c <LCDPrint+0x5a>
     e3a:	54 c0       	rjmp	.+168    	; 0xee4 <LCDPrint+0x102>
     e3c:	ec 01       	movw	r28, r24
     e3e:	c1 2c       	mov	r12, r1
     e40:	d1 2c       	mov	r13, r1
     e42:	76 01       	movw	r14, r12
			
				gLineNumber = (gLineNumber + 1) % gMaxLines;
			
				gCursorPosition = 0;
				
				SendTrace(INFO_LEVEL, "Exceeded Max Chars - %d, %d\r\n", gLineNumber, gCursorPosition);
     e44:	01 e5       	ldi	r16, 0x51	; 81
     e46:	14 e0       	ldi	r17, 0x04	; 4
     e48:	68 94       	set
     e4a:	77 24       	eor	r7, r7
     e4c:	72 f8       	bld	r7, 2
	// Loop through each character and send it to Data Register
	//
	
	for(IndexI = 0; IndexI < Len; IndexI++)
	{
		if (gCursorPosition >= gMaxCharacters)
     e4e:	90 91 76 04 	lds	r25, 0x0476
     e52:	80 91 74 04 	lds	r24, 0x0474
     e56:	98 17       	cp	r25, r24
     e58:	50 f1       	brcs	.+84     	; 0xeae <LCDPrint+0xcc>
		{

			if (gIsAutoScroll)
     e5a:	80 91 77 04 	lds	r24, 0x0477
     e5e:	88 23       	and	r24, r24
     e60:	21 f0       	breq	.+8      	; 0xe6a <LCDPrint+0x88>
			{
				//
				// If Auto scroll is enabled shit the display
				//
			
				LCDShiftCursorOrDisplay(TRUE, FALSE);
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	b2 df       	rcall	.-156    	; 0xdcc <LCDShiftCursorOrDisplay>
     e68:	22 c0       	rjmp	.+68     	; 0xeae <LCDPrint+0xcc>
			{
				//
				// Do word wrap
				//
			
				gLineNumber = (gLineNumber + 1) % gMaxLines;
     e6a:	80 91 75 04 	lds	r24, 0x0475
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	01 96       	adiw	r24, 0x01	; 1
     e72:	60 91 73 04 	lds	r22, 0x0473
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	3a d1       	rcall	.+628    	; 0x10ee <__divmodhi4>
     e7a:	80 93 75 04 	sts	0x0475, r24
			
				gCursorPosition = 0;
     e7e:	10 92 76 04 	sts	0x0476, r1
				
				SendTrace(INFO_LEVEL, "Exceeded Max Chars - %d, %d\r\n", gLineNumber, gCursorPosition);
     e82:	1f 92       	push	r1
     e84:	1f 92       	push	r1
     e86:	99 27       	eor	r25, r25
     e88:	9f 93       	push	r25
     e8a:	8f 93       	push	r24
     e8c:	1f 93       	push	r17
     e8e:	0f 93       	push	r16
     e90:	7f 92       	push	r7
     e92:	cb db       	rcall	.-2154   	; 0x62a <SendTrace>
			
				LCDSetCursorPosition(gLineNumber, gCursorPosition);
     e94:	60 91 76 04 	lds	r22, 0x0476
     e98:	80 91 75 04 	lds	r24, 0x0475
     e9c:	5c df       	rcall	.-328    	; 0xd56 <LCDSetCursorPosition>
     e9e:	8d b7       	in	r24, 0x3d	; 61
     ea0:	9e b7       	in	r25, 0x3e	; 62
     ea2:	07 96       	adiw	r24, 0x07	; 7
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	9e bf       	out	0x3e, r25	; 62
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	8d bf       	out	0x3d, r24	; 61
			}
		}
		
		Status = LCDTransmit(*String, LCD_DR_REG, TRUE);
     eae:	41 e0       	ldi	r20, 0x01	; 1
     eb0:	61 e0       	ldi	r22, 0x01	; 1
     eb2:	89 91       	ld	r24, Y+
     eb4:	06 df       	rcall	.-500    	; 0xcc2 <LCDTransmit>
		
		if (!Status)
     eb6:	88 23       	and	r24, r24
     eb8:	b1 f0       	breq	.+44     	; 0xee6 <LCDPrint+0x104>
		{
			goto Exit;
		}
		
		gCursorPosition = (gCursorPosition + 1) % MAX_BUFFER_SIZE;
     eba:	20 91 76 04 	lds	r18, 0x0476
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	2f 5f       	subi	r18, 0xFF	; 255
     ec2:	3f 4f       	sbci	r19, 0xFF	; 255
     ec4:	2f 73       	andi	r18, 0x3F	; 63
     ec6:	30 78       	andi	r19, 0x80	; 128
     ec8:	20 93 76 04 	sts	0x0476, r18
	
	//
	// Loop through each character and send it to Data Register
	//
	
	for(IndexI = 0; IndexI < Len; IndexI++)
     ecc:	9f ef       	ldi	r25, 0xFF	; 255
     ece:	c9 1a       	sub	r12, r25
     ed0:	d9 0a       	sbc	r13, r25
     ed2:	e9 0a       	sbc	r14, r25
     ed4:	f9 0a       	sbc	r15, r25
     ed6:	c8 14       	cp	r12, r8
     ed8:	d9 04       	cpc	r13, r9
     eda:	ea 04       	cpc	r14, r10
     edc:	fb 04       	cpc	r15, r11
     ede:	08 f4       	brcc	.+2      	; 0xee2 <LCDPrint+0x100>
     ee0:	b6 cf       	rjmp	.-148    	; 0xe4e <LCDPrint+0x6c>
     ee2:	01 c0       	rjmp	.+2      	; 0xee6 <LCDPrint+0x104>
}

bool
LCDPrint(char *String)
{
	bool Status = FALSE;
     ee4:	80 e0       	ldi	r24, 0x00	; 0
	}
	
Exit:

	return Status;
}
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	ff 90       	pop	r15
     ef0:	ef 90       	pop	r14
     ef2:	df 90       	pop	r13
     ef4:	cf 90       	pop	r12
     ef6:	bf 90       	pop	r11
     ef8:	af 90       	pop	r10
     efa:	9f 90       	pop	r9
     efc:	8f 90       	pop	r8
     efe:	7f 90       	pop	r7
     f00:	08 95       	ret

00000f02 <LCDSetFunctionControl>:
	
	//
	// Set Two Line Display Flag
	//
	
	if(IsTwoLineDisplay)
     f02:	81 11       	cpse	r24, r1
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <LCDSetFunctionControl+0x8>
bool
LCDSetFunctionControl(bool IsTwoLineDisplay, bool Is5X10Font)
{
	bool Status;
	
	unsigned char Value = FUNC_SET_CTRL;
     f06:	80 e2       	ldi	r24, 0x20	; 32
     f08:	01 c0       	rjmp	.+2      	; 0xf0c <LCDSetFunctionControl+0xa>
	// Set Two Line Display Flag
	//
	
	if(IsTwoLineDisplay)
	{	
		Value |= TWO_LINES;
     f0a:	88 e2       	ldi	r24, 0x28	; 40
	
	//
	// Set 5X10 Font Flag
	//
	
	if(Is5X10Font)
     f0c:	61 11       	cpse	r22, r1
	{
		Value |= FONT_5X10;
     f0e:	84 60       	ori	r24, 0x04	; 4
	}
	
	Status = LCDTransmit(Value, LCD_IR_REG, TRUE);
     f10:	41 e0       	ldi	r20, 0x01	; 1
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	d6 ce       	rjmp	.-596    	; 0xcc2 <LCDTransmit>

	return Status;
}
     f16:	08 95       	ret

00000f18 <InitLCD>:
// Public Functions
//

bool
InitLCD(PLCD_INIT_PARAMS InitParams)
{
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	ec 01       	movw	r28, r24
	bool IsTwoLineDisplay = FALSE;
		
	if (InitParams->MaxCharacters == 0 || InitParams->MaxLines == 0)
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	88 23       	and	r24, r24
     f22:	c1 f1       	breq	.+112    	; 0xf94 <InitLCD+0x7c>
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	88 23       	and	r24, r24
     f28:	a9 f1       	breq	.+106    	; 0xf94 <InitLCD+0x7c>
	
	//
	// Set Slave Address
	//
	
	gSlaveAddress.AsUINT8 = InitParams->SlaveAddress.AsUINT8;
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	80 93 7e 04 	sts	0x047E, r24
	
	//
	// Clear Display
	//
		
	LCDClearDisplay();
     f30:	f3 de       	rcall	.-538    	; 0xd18 <LCDClearDisplay>
	
	LCDSetCursorToHomePos();
     f32:	f7 de       	rcall	.-530    	; 0xd22 <LCDSetCursorToHomePos>
	
	//
	// Set Function Set Control
	//
	
	gMaxLines = InitParams->MaxLines;
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	80 93 73 04 	sts	0x0473, r24
	
	gMaxCharacters = InitParams->MaxCharacters;
     f3a:	9b 81       	ldd	r25, Y+3	; 0x03
     f3c:	90 93 74 04 	sts	0x0474, r25
	
	if (gMaxLines > 1)
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	28 f0       	brcs	.+10     	; 0xf4e <InitLCD+0x36>
	{
		InitParams->Flags.Is5X10Font = 0;
     f44:	88 81       	ld	r24, Y
     f46:	8f 7d       	andi	r24, 0xDF	; 223
     f48:	88 83       	st	Y, r24
		
		IsTwoLineDisplay = TRUE;
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	01 c0       	rjmp	.+2      	; 0xf50 <InitLCD+0x38>
//

bool
InitLCD(PLCD_INIT_PARAMS InitParams)
{
	bool IsTwoLineDisplay = FALSE;
     f4e:	80 e0       	ldi	r24, 0x00	; 0
		InitParams->Flags.Is5X10Font = 0;
		
		IsTwoLineDisplay = TRUE;
	}
	
	LCDSetFunctionControl(IsTwoLineDisplay, InitParams->Flags.Is5X10Font);
     f50:	68 81       	ld	r22, Y
     f52:	65 fb       	bst	r22, 5
     f54:	66 27       	eor	r22, r22
     f56:	60 f9       	bld	r22, 0
     f58:	d4 df       	rcall	.-88     	; 0xf02 <LCDSetFunctionControl>
	//
	
	LCDSetDisplayControl(InitParams->Flags.IsDisplayOn, 
						 InitParams->Flags.IsCursorOn, 
						 InitParams->Flags.IsCursorBlinkOn,
						 InitParams->Flags.IsBackLightOn);
     f5a:	88 81       	ld	r24, Y
     f5c:	86 fb       	bst	r24, 6
     f5e:	22 27       	eor	r18, r18
     f60:	20 f9       	bld	r18, 0
	// Set Display ON/OFF Control
	//
	
	LCDSetDisplayControl(InitParams->Flags.IsDisplayOn, 
						 InitParams->Flags.IsCursorOn, 
						 InitParams->Flags.IsCursorBlinkOn,
     f62:	84 fb       	bst	r24, 4
     f64:	44 27       	eor	r20, r20
     f66:	40 f9       	bld	r20, 0
	//
	// Set Display ON/OFF Control
	//
	
	LCDSetDisplayControl(InitParams->Flags.IsDisplayOn, 
						 InitParams->Flags.IsCursorOn, 
     f68:	83 fb       	bst	r24, 3
     f6a:	66 27       	eor	r22, r22
     f6c:	60 f9       	bld	r22, 0
	
	//
	// Set Display ON/OFF Control
	//
	
	LCDSetDisplayControl(InitParams->Flags.IsDisplayOn, 
     f6e:	82 fb       	bst	r24, 2
     f70:	88 27       	eor	r24, r24
     f72:	80 f9       	bld	r24, 0
     f74:	e1 de       	rcall	.-574    	; 0xd38 <LCDSetDisplayControl>
	
	//
	// Set Entry Mode
	//
	
	LCDSetEntryMode(InitParams->Flags.IsIncrementPos, InitParams->Flags.IsDisplayShift);
     f76:	88 81       	ld	r24, Y
     f78:	68 2f       	mov	r22, r24
     f7a:	61 70       	andi	r22, 0x01	; 1
     f7c:	86 95       	lsr	r24
     f7e:	81 70       	andi	r24, 0x01	; 1
     f80:	1a df       	rcall	.-460    	; 0xdb6 <LCDSetEntryMode>
	
	//
	// Set Auto Scroll Flag
	//
	
	gIsAutoScroll = InitParams->Flags.IsAutoScroll;
     f82:	88 81       	ld	r24, Y
     f84:	87 fb       	bst	r24, 7
     f86:	88 27       	eor	r24, r24
     f88:	80 f9       	bld	r24, 0
     f8a:	80 93 77 04 	sts	0x0477, r24
	
	gLCDInitialized = TRUE;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	80 93 79 04 	sts	0x0479, r24
	
Exit:

	return gLCDInitialized;

}
     f94:	80 91 79 04 	lds	r24, 0x0479
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	08 95       	ret

00000f9e <InitUARTSync>:

bool gUARTInitialized[MAX_UART] = {FALSE, FALSE};

bool
InitUARTSync(UART_NUMBER UARTNumber, unsigned long ProcFrequency, unsigned int BaudRate, UART_MODE UARTMode)
{
     f9e:	cf 92       	push	r12
     fa0:	df 92       	push	r13
     fa2:	ef 92       	push	r14
     fa4:	ff 92       	push	r15
     fa6:	0f 93       	push	r16
	unsigned short BaudRatePreScalar;
	

	BaudRatePreScalar = (ProcFrequency / (UARTMode * BaudRate)) - 1;
	
	switch (UARTNumber)
     fa8:	88 23       	and	r24, r24
     faa:	19 f0       	breq	.+6      	; 0xfb2 <InitUARTSync+0x14>
     fac:	81 30       	cpi	r24, 0x01	; 1
     fae:	a9 f0       	breq	.+42     	; 0xfda <InitUARTSync+0x3c>
     fb0:	35 c0       	rjmp	.+106    	; 0x101c <InitUARTSync+0x7e>

			//UBRR0H = (unsigned char) BaudRatePreScalar >> 8;
	
			//UBRR0L = (unsigned char) BaudRatePreScalar;

			UBRR0H = (unsigned char) 51 >> 8;
     fb2:	10 92 c5 00 	sts	0x00C5, r1
	
			UBRR0L = (unsigned char) 51;
     fb6:	83 e3       	ldi	r24, 0x33	; 51
     fb8:	80 93 c4 00 	sts	0x00C4, r24
	
			//
			// Enable Receiver and Transmitter.
			//
	
			UCSR0B = ((1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0));
     fbc:	88 e9       	ldi	r24, 0x98	; 152
     fbe:	80 93 c1 00 	sts	0x00C1, r24
	
			//
			// Asynchronous USART, Parity Disabled, Stop Bits - 1, Character Size - 8 bit.
			//
	
			UCSR0C = ((1 << UCSZ00) | (1 << UCSZ01));
     fc2:	86 e0       	ldi	r24, 0x06	; 6
     fc4:	80 93 c2 00 	sts	0x00C2, r24

			//
			// Set Double Speed Mode
			//

			if (UARTMode == DOUBLE_SPEED_MODE)
     fc8:	08 30       	cpi	r16, 0x08	; 8
     fca:	19 f4       	brne	.+6      	; 0xfd2 <InitUARTSync+0x34>
			{
				UCSR0A = (1 << U2X0);
     fcc:	82 e0       	ldi	r24, 0x02	; 2
     fce:	80 93 c0 00 	sts	0x00C0, r24
			}

			gUARTInitialized[0] = TRUE;
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	80 93 7a 04 	sts	0x047A, r24

			break;
     fd8:	22 c0       	rjmp	.+68     	; 0x101e <InitUARTSync+0x80>
	
		}
		case 1:
		{

			UBRR1H = (unsigned char) BaudRatePreScalar >> 8;
     fda:	10 92 cd 00 	sts	0x00CD, r1
	bool Status = TRUE;

	unsigned short BaudRatePreScalar;
	

	BaudRatePreScalar = (ProcFrequency / (UARTMode * BaudRate)) - 1;
     fde:	02 9f       	mul	r16, r18
     fe0:	60 01       	movw	r12, r0
     fe2:	03 9f       	mul	r16, r19
     fe4:	d0 0c       	add	r13, r0
     fe6:	11 24       	eor	r1, r1
     fe8:	e1 2c       	mov	r14, r1
     fea:	f1 2c       	mov	r15, r1
     fec:	cb 01       	movw	r24, r22
     fee:	ba 01       	movw	r22, r20
     ff0:	a7 01       	movw	r20, r14
     ff2:	96 01       	movw	r18, r12
     ff4:	8f d0       	rcall	.+286    	; 0x1114 <__udivmodsi4>
     ff6:	21 50       	subi	r18, 0x01	; 1
     ff8:	31 09       	sbc	r19, r1
		case 1:
		{

			UBRR1H = (unsigned char) BaudRatePreScalar >> 8;
	
			UBRR1L = (unsigned char) BaudRatePreScalar;
     ffa:	20 93 cc 00 	sts	0x00CC, r18
	
			//
			// Enable Receiver and Transmitter.
			//
	
			UCSR1B = ((1 << TXEN1) | (1 << RXEN1) | (1 << RXCIE1));
     ffe:	88 e9       	ldi	r24, 0x98	; 152
    1000:	80 93 c9 00 	sts	0x00C9, r24
	
			//
			// Asynchronous USART, Parity Disabled, Stop Bits - 1, Character Size - 8 bit.
			//
	
			UCSR1C = ((1 << UCSZ10) | (1 << UCSZ11));
    1004:	86 e0       	ldi	r24, 0x06	; 6
    1006:	80 93 ca 00 	sts	0x00CA, r24

			//
			// Set Double Speed Mode
			//

			if (UARTMode == DOUBLE_SPEED_MODE)
    100a:	08 30       	cpi	r16, 0x08	; 8
    100c:	19 f4       	brne	.+6      	; 0x1014 <InitUARTSync+0x76>
			{
				UCSR1A = (1 << U2X1);
    100e:	82 e0       	ldi	r24, 0x02	; 2
    1010:	80 93 c8 00 	sts	0x00C8, r24
			}

			gUARTInitialized[1] = TRUE;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	80 93 7b 04 	sts	0x047B, r24

			break;
    101a:	01 c0       	rjmp	.+2      	; 0x101e <InitUARTSync+0x80>

		}
		default:
		{
			Status = FALSE;
    101c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return Status;

}
    101e:	0f 91       	pop	r16
    1020:	ff 90       	pop	r15
    1022:	ef 90       	pop	r14
    1024:	df 90       	pop	r13
    1026:	cf 90       	pop	r12
    1028:	08 95       	ret

0000102a <UARTTransmitSync>:

unsigned long
UARTTransmitSync(UART_NUMBER UARTNumber, PVOID TransmitValue, unsigned long Length)
{
    102a:	ef 92       	push	r14
    102c:	ff 92       	push	r15
    102e:	1f 93       	push	r17
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	7b 01       	movw	r14, r22
	unsigned char *Value = (unsigned char *) TransmitValue;
	
	unsigned long IndexI = 0;
	
	switch (UARTNumber)
    1036:	88 23       	and	r24, r24
    1038:	19 f0       	breq	.+6      	; 0x1040 <UARTTransmitSync+0x16>
    103a:	81 30       	cpi	r24, 0x01	; 1
    103c:	21 f1       	breq	.+72     	; 0x1086 <UARTTransmitSync+0x5c>
    103e:	44 c0       	rjmp	.+136    	; 0x10c8 <UARTTransmitSync+0x9e>
	{
		case 0:
		{
			if (!gUARTInitialized[0])
    1040:	80 91 7a 04 	lds	r24, 0x047A
    1044:	88 23       	and	r24, r24
    1046:	09 f4       	brne	.+2      	; 0x104a <UARTTransmitSync+0x20>
    1048:	43 c0       	rjmp	.+134    	; 0x10d0 <UARTTransmitSync+0xa6>
			{
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
    104a:	21 15       	cp	r18, r1
    104c:	31 05       	cpc	r19, r1
    104e:	41 05       	cpc	r20, r1
    1050:	51 05       	cpc	r21, r1
    1052:	09 f4       	brne	.+2      	; 0x1056 <UARTTransmitSync+0x2c>
    1054:	44 c0       	rjmp	.+136    	; 0x10de <UARTTransmitSync+0xb4>
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	dc 01       	movw	r26, r24
			{
				while (!(UCSR0A & (1 << UDRE0)));
    105c:	c0 ec       	ldi	r28, 0xC0	; 192
    105e:	d0 e0       	ldi	r29, 0x00	; 0

				//
				// Transmit the value
				//

				UDR0 = *Value;
    1060:	66 ec       	ldi	r22, 0xC6	; 198
    1062:	70 e0       	ldi	r23, 0x00	; 0
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
			{
				while (!(UCSR0A & (1 << UDRE0)));
    1064:	18 81       	ld	r17, Y
    1066:	15 ff       	sbrs	r17, 5
    1068:	fd cf       	rjmp	.-6      	; 0x1064 <UARTTransmitSync+0x3a>

				//
				// Transmit the value
				//

				UDR0 = *Value;
    106a:	f7 01       	movw	r30, r14
    106c:	11 91       	ld	r17, Z+
    106e:	7f 01       	movw	r14, r30
    1070:	fb 01       	movw	r30, r22
    1072:	10 83       	st	Z, r17
			if (!gUARTInitialized[0])
			{
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	a1 1d       	adc	r26, r1
    1078:	b1 1d       	adc	r27, r1
    107a:	82 17       	cp	r24, r18
    107c:	93 07       	cpc	r25, r19
    107e:	a4 07       	cpc	r26, r20
    1080:	b5 07       	cpc	r27, r21
    1082:	81 f7       	brne	.-32     	; 0x1064 <UARTTransmitSync+0x3a>
    1084:	2c c0       	rjmp	.+88     	; 0x10de <UARTTransmitSync+0xb4>

		}
		case 1:
		{

			if (!gUARTInitialized[1])
    1086:	80 91 7b 04 	lds	r24, 0x047B
    108a:	88 23       	and	r24, r24
    108c:	29 f1       	breq	.+74     	; 0x10d8 <UARTTransmitSync+0xae>
			{
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
    108e:	21 15       	cp	r18, r1
    1090:	31 05       	cpc	r19, r1
    1092:	41 05       	cpc	r20, r1
    1094:	51 05       	cpc	r21, r1
    1096:	19 f1       	breq	.+70     	; 0x10de <UARTTransmitSync+0xb4>
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	dc 01       	movw	r26, r24
			{

				while (!(UCSR1A & (1 << UDRE1)));
    109e:	c8 ec       	ldi	r28, 0xC8	; 200
    10a0:	d0 e0       	ldi	r29, 0x00	; 0

				//
				// Transmit the value
				//

				UDR1 = *Value;
    10a2:	6e ec       	ldi	r22, 0xCE	; 206
    10a4:	70 e0       	ldi	r23, 0x00	; 0
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
			{

				while (!(UCSR1A & (1 << UDRE1)));
    10a6:	18 81       	ld	r17, Y
    10a8:	15 ff       	sbrs	r17, 5
    10aa:	fd cf       	rjmp	.-6      	; 0x10a6 <UARTTransmitSync+0x7c>

				//
				// Transmit the value
				//

				UDR1 = *Value;
    10ac:	f7 01       	movw	r30, r14
    10ae:	11 91       	ld	r17, Z+
    10b0:	7f 01       	movw	r14, r30
    10b2:	fb 01       	movw	r30, r22
    10b4:	10 83       	st	Z, r17
			if (!gUARTInitialized[1])
			{
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	a1 1d       	adc	r26, r1
    10ba:	b1 1d       	adc	r27, r1
    10bc:	82 17       	cp	r24, r18
    10be:	93 07       	cpc	r25, r19
    10c0:	a4 07       	cpc	r26, r20
    10c2:	b5 07       	cpc	r27, r21
    10c4:	81 f7       	brne	.-32     	; 0x10a6 <UARTTransmitSync+0x7c>
    10c6:	0b c0       	rjmp	.+22     	; 0x10de <UARTTransmitSync+0xb4>
unsigned long
UARTTransmitSync(UART_NUMBER UARTNumber, PVOID TransmitValue, unsigned long Length)
{
	unsigned char *Value = (unsigned char *) TransmitValue;
	
	unsigned long IndexI = 0;
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	a9 01       	movw	r20, r18
    10ce:	07 c0       	rjmp	.+14     	; 0x10de <UARTTransmitSync+0xb4>
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	a9 01       	movw	r20, r18
    10d6:	03 c0       	rjmp	.+6      	; 0x10de <UARTTransmitSync+0xb4>
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	a9 01       	movw	r20, r18

Exit:

	return IndexI;

}
    10de:	ca 01       	movw	r24, r20
    10e0:	b9 01       	movw	r22, r18
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	1f 91       	pop	r17
    10e8:	ff 90       	pop	r15
    10ea:	ef 90       	pop	r14
    10ec:	08 95       	ret

000010ee <__divmodhi4>:
    10ee:	97 fb       	bst	r25, 7
    10f0:	07 2e       	mov	r0, r23
    10f2:	16 f4       	brtc	.+4      	; 0x10f8 <__divmodhi4+0xa>
    10f4:	00 94       	com	r0
    10f6:	06 d0       	rcall	.+12     	; 0x1104 <__divmodhi4_neg1>
    10f8:	77 fd       	sbrc	r23, 7
    10fa:	08 d0       	rcall	.+16     	; 0x110c <__divmodhi4_neg2>
    10fc:	27 d1       	rcall	.+590    	; 0x134c <__udivmodhi4>
    10fe:	07 fc       	sbrc	r0, 7
    1100:	05 d0       	rcall	.+10     	; 0x110c <__divmodhi4_neg2>
    1102:	3e f4       	brtc	.+14     	; 0x1112 <__divmodhi4_exit>

00001104 <__divmodhi4_neg1>:
    1104:	90 95       	com	r25
    1106:	81 95       	neg	r24
    1108:	9f 4f       	sbci	r25, 0xFF	; 255
    110a:	08 95       	ret

0000110c <__divmodhi4_neg2>:
    110c:	70 95       	com	r23
    110e:	61 95       	neg	r22
    1110:	7f 4f       	sbci	r23, 0xFF	; 255

00001112 <__divmodhi4_exit>:
    1112:	08 95       	ret

00001114 <__udivmodsi4>:
    1114:	a1 e2       	ldi	r26, 0x21	; 33
    1116:	1a 2e       	mov	r1, r26
    1118:	aa 1b       	sub	r26, r26
    111a:	bb 1b       	sub	r27, r27
    111c:	fd 01       	movw	r30, r26
    111e:	0d c0       	rjmp	.+26     	; 0x113a <__udivmodsi4_ep>

00001120 <__udivmodsi4_loop>:
    1120:	aa 1f       	adc	r26, r26
    1122:	bb 1f       	adc	r27, r27
    1124:	ee 1f       	adc	r30, r30
    1126:	ff 1f       	adc	r31, r31
    1128:	a2 17       	cp	r26, r18
    112a:	b3 07       	cpc	r27, r19
    112c:	e4 07       	cpc	r30, r20
    112e:	f5 07       	cpc	r31, r21
    1130:	20 f0       	brcs	.+8      	; 0x113a <__udivmodsi4_ep>
    1132:	a2 1b       	sub	r26, r18
    1134:	b3 0b       	sbc	r27, r19
    1136:	e4 0b       	sbc	r30, r20
    1138:	f5 0b       	sbc	r31, r21

0000113a <__udivmodsi4_ep>:
    113a:	66 1f       	adc	r22, r22
    113c:	77 1f       	adc	r23, r23
    113e:	88 1f       	adc	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	1a 94       	dec	r1
    1144:	69 f7       	brne	.-38     	; 0x1120 <__udivmodsi4_loop>
    1146:	60 95       	com	r22
    1148:	70 95       	com	r23
    114a:	80 95       	com	r24
    114c:	90 95       	com	r25
    114e:	9b 01       	movw	r18, r22
    1150:	ac 01       	movw	r20, r24
    1152:	bd 01       	movw	r22, r26
    1154:	cf 01       	movw	r24, r30
    1156:	08 95       	ret

00001158 <__moddi3>:
    1158:	68 94       	set
    115a:	01 c0       	rjmp	.+2      	; 0x115e <__divdi3_moddi3>

0000115c <__divdi3>:
    115c:	e8 94       	clt

0000115e <__divdi3_moddi3>:
    115e:	f9 2f       	mov	r31, r25
    1160:	f1 2b       	or	r31, r17
    1162:	0a f0       	brmi	.+2      	; 0x1166 <__divdi3_moddi3+0x8>
    1164:	27 c0       	rjmp	.+78     	; 0x11b4 <__udivdi3_umoddi3>
    1166:	a0 e0       	ldi	r26, 0x00	; 0
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e8 eb       	ldi	r30, 0xB8	; 184
    116c:	f8 e0       	ldi	r31, 0x08	; 8
    116e:	93 c0       	rjmp	.+294    	; 0x1296 <__prologue_saves__+0xc>
    1170:	09 2e       	mov	r0, r25
    1172:	05 94       	asr	r0
    1174:	1a f4       	brpl	.+6      	; 0x117c <__divdi3_moddi3+0x1e>
    1176:	79 d0       	rcall	.+242    	; 0x126a <__negdi2>
    1178:	11 23       	and	r17, r17
    117a:	92 f4       	brpl	.+36     	; 0x11a0 <__divdi3_moddi3+0x42>
    117c:	f0 e8       	ldi	r31, 0x80	; 128
    117e:	0f 26       	eor	r0, r31
    1180:	ff ef       	ldi	r31, 0xFF	; 255
    1182:	e0 94       	com	r14
    1184:	f0 94       	com	r15
    1186:	00 95       	com	r16
    1188:	10 95       	com	r17
    118a:	b0 94       	com	r11
    118c:	c0 94       	com	r12
    118e:	d0 94       	com	r13
    1190:	a1 94       	neg	r10
    1192:	bf 0a       	sbc	r11, r31
    1194:	cf 0a       	sbc	r12, r31
    1196:	df 0a       	sbc	r13, r31
    1198:	ef 0a       	sbc	r14, r31
    119a:	ff 0a       	sbc	r15, r31
    119c:	0f 0b       	sbc	r16, r31
    119e:	1f 0b       	sbc	r17, r31
    11a0:	13 d0       	rcall	.+38     	; 0x11c8 <__udivmod64>
    11a2:	07 fc       	sbrc	r0, 7
    11a4:	62 d0       	rcall	.+196    	; 0x126a <__negdi2>
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	ec e0       	ldi	r30, 0x0C	; 12
    11ac:	90 c0       	rjmp	.+288    	; 0x12ce <__epilogue_restores__+0xc>

000011ae <__umoddi3>:
    11ae:	68 94       	set
    11b0:	01 c0       	rjmp	.+2      	; 0x11b4 <__udivdi3_umoddi3>

000011b2 <__udivdi3>:
    11b2:	e8 94       	clt

000011b4 <__udivdi3_umoddi3>:
    11b4:	8f 92       	push	r8
    11b6:	9f 92       	push	r9
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	05 d0       	rcall	.+10     	; 0x11c8 <__udivmod64>
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	9f 90       	pop	r9
    11c4:	8f 90       	pop	r8
    11c6:	08 95       	ret

000011c8 <__udivmod64>:
    11c8:	88 24       	eor	r8, r8
    11ca:	99 24       	eor	r9, r9
    11cc:	f4 01       	movw	r30, r8
    11ce:	e4 01       	movw	r28, r8
    11d0:	b0 e4       	ldi	r27, 0x40	; 64
    11d2:	9f 93       	push	r25
    11d4:	aa 27       	eor	r26, r26
    11d6:	9a 15       	cp	r25, r10
    11d8:	8b 04       	cpc	r8, r11
    11da:	9c 04       	cpc	r9, r12
    11dc:	ed 05       	cpc	r30, r13
    11de:	fe 05       	cpc	r31, r14
    11e0:	cf 05       	cpc	r28, r15
    11e2:	d0 07       	cpc	r29, r16
    11e4:	a1 07       	cpc	r26, r17
    11e6:	98 f4       	brcc	.+38     	; 0x120e <__udivmod64+0x46>
    11e8:	ad 2f       	mov	r26, r29
    11ea:	dc 2f       	mov	r29, r28
    11ec:	cf 2f       	mov	r28, r31
    11ee:	fe 2f       	mov	r31, r30
    11f0:	e9 2d       	mov	r30, r9
    11f2:	98 2c       	mov	r9, r8
    11f4:	89 2e       	mov	r8, r25
    11f6:	98 2f       	mov	r25, r24
    11f8:	87 2f       	mov	r24, r23
    11fa:	76 2f       	mov	r23, r22
    11fc:	65 2f       	mov	r22, r21
    11fe:	54 2f       	mov	r21, r20
    1200:	43 2f       	mov	r20, r19
    1202:	32 2f       	mov	r19, r18
    1204:	22 27       	eor	r18, r18
    1206:	b8 50       	subi	r27, 0x08	; 8
    1208:	31 f7       	brne	.-52     	; 0x11d6 <__udivmod64+0xe>
    120a:	bf 91       	pop	r27
    120c:	27 c0       	rjmp	.+78     	; 0x125c <__udivmod64+0x94>
    120e:	1b 2e       	mov	r1, r27
    1210:	bf 91       	pop	r27
    1212:	bb 27       	eor	r27, r27
    1214:	22 0f       	add	r18, r18
    1216:	33 1f       	adc	r19, r19
    1218:	44 1f       	adc	r20, r20
    121a:	55 1f       	adc	r21, r21
    121c:	66 1f       	adc	r22, r22
    121e:	77 1f       	adc	r23, r23
    1220:	88 1f       	adc	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	88 1c       	adc	r8, r8
    1226:	99 1c       	adc	r9, r9
    1228:	ee 1f       	adc	r30, r30
    122a:	ff 1f       	adc	r31, r31
    122c:	cc 1f       	adc	r28, r28
    122e:	dd 1f       	adc	r29, r29
    1230:	aa 1f       	adc	r26, r26
    1232:	bb 1f       	adc	r27, r27
    1234:	8a 14       	cp	r8, r10
    1236:	9b 04       	cpc	r9, r11
    1238:	ec 05       	cpc	r30, r12
    123a:	fd 05       	cpc	r31, r13
    123c:	ce 05       	cpc	r28, r14
    123e:	df 05       	cpc	r29, r15
    1240:	a0 07       	cpc	r26, r16
    1242:	b1 07       	cpc	r27, r17
    1244:	48 f0       	brcs	.+18     	; 0x1258 <__udivmod64+0x90>
    1246:	8a 18       	sub	r8, r10
    1248:	9b 08       	sbc	r9, r11
    124a:	ec 09       	sbc	r30, r12
    124c:	fd 09       	sbc	r31, r13
    124e:	ce 09       	sbc	r28, r14
    1250:	df 09       	sbc	r29, r15
    1252:	a0 0b       	sbc	r26, r16
    1254:	b1 0b       	sbc	r27, r17
    1256:	21 60       	ori	r18, 0x01	; 1
    1258:	1a 94       	dec	r1
    125a:	e1 f6       	brne	.-72     	; 0x1214 <__udivmod64+0x4c>
    125c:	2e f4       	brtc	.+10     	; 0x1268 <__udivmod64+0xa0>
    125e:	94 01       	movw	r18, r8
    1260:	af 01       	movw	r20, r30
    1262:	be 01       	movw	r22, r28
    1264:	cd 01       	movw	r24, r26
    1266:	00 0c       	add	r0, r0
    1268:	08 95       	ret

0000126a <__negdi2>:
    126a:	60 95       	com	r22
    126c:	70 95       	com	r23
    126e:	80 95       	com	r24
    1270:	90 95       	com	r25
    1272:	30 95       	com	r19
    1274:	40 95       	com	r20
    1276:	50 95       	com	r21
    1278:	21 95       	neg	r18
    127a:	3f 4f       	sbci	r19, 0xFF	; 255
    127c:	4f 4f       	sbci	r20, 0xFF	; 255
    127e:	5f 4f       	sbci	r21, 0xFF	; 255
    1280:	6f 4f       	sbci	r22, 0xFF	; 255
    1282:	7f 4f       	sbci	r23, 0xFF	; 255
    1284:	8f 4f       	sbci	r24, 0xFF	; 255
    1286:	9f 4f       	sbci	r25, 0xFF	; 255
    1288:	08 95       	ret

0000128a <__prologue_saves__>:
    128a:	2f 92       	push	r2
    128c:	3f 92       	push	r3
    128e:	4f 92       	push	r4
    1290:	5f 92       	push	r5
    1292:	6f 92       	push	r6
    1294:	7f 92       	push	r7
    1296:	8f 92       	push	r8
    1298:	9f 92       	push	r9
    129a:	af 92       	push	r10
    129c:	bf 92       	push	r11
    129e:	cf 92       	push	r12
    12a0:	df 92       	push	r13
    12a2:	ef 92       	push	r14
    12a4:	ff 92       	push	r15
    12a6:	0f 93       	push	r16
    12a8:	1f 93       	push	r17
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	ca 1b       	sub	r28, r26
    12b4:	db 0b       	sbc	r29, r27
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	cd bf       	out	0x3d, r28	; 61
    12c0:	09 94       	ijmp

000012c2 <__epilogue_restores__>:
    12c2:	2a 88       	ldd	r2, Y+18	; 0x12
    12c4:	39 88       	ldd	r3, Y+17	; 0x11
    12c6:	48 88       	ldd	r4, Y+16	; 0x10
    12c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    12ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    12cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    12ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    12d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    12d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    12d4:	b9 84       	ldd	r11, Y+9	; 0x09
    12d6:	c8 84       	ldd	r12, Y+8	; 0x08
    12d8:	df 80       	ldd	r13, Y+7	; 0x07
    12da:	ee 80       	ldd	r14, Y+6	; 0x06
    12dc:	fd 80       	ldd	r15, Y+5	; 0x05
    12de:	0c 81       	ldd	r16, Y+4	; 0x04
    12e0:	1b 81       	ldd	r17, Y+3	; 0x03
    12e2:	aa 81       	ldd	r26, Y+2	; 0x02
    12e4:	b9 81       	ldd	r27, Y+1	; 0x01
    12e6:	ce 0f       	add	r28, r30
    12e8:	d1 1d       	adc	r29, r1
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	ed 01       	movw	r28, r26
    12f6:	08 95       	ret

000012f8 <__ashrdi3>:
    12f8:	97 fb       	bst	r25, 7
    12fa:	10 f8       	bld	r1, 0

000012fc <__lshrdi3>:
    12fc:	16 94       	lsr	r1
    12fe:	00 08       	sbc	r0, r0
    1300:	0f 93       	push	r16
    1302:	08 30       	cpi	r16, 0x08	; 8
    1304:	98 f0       	brcs	.+38     	; 0x132c <__lshrdi3+0x30>
    1306:	08 50       	subi	r16, 0x08	; 8
    1308:	23 2f       	mov	r18, r19
    130a:	34 2f       	mov	r19, r20
    130c:	45 2f       	mov	r20, r21
    130e:	56 2f       	mov	r21, r22
    1310:	67 2f       	mov	r22, r23
    1312:	78 2f       	mov	r23, r24
    1314:	89 2f       	mov	r24, r25
    1316:	90 2d       	mov	r25, r0
    1318:	f4 cf       	rjmp	.-24     	; 0x1302 <__lshrdi3+0x6>
    131a:	05 94       	asr	r0
    131c:	97 95       	ror	r25
    131e:	87 95       	ror	r24
    1320:	77 95       	ror	r23
    1322:	67 95       	ror	r22
    1324:	57 95       	ror	r21
    1326:	47 95       	ror	r20
    1328:	37 95       	ror	r19
    132a:	27 95       	ror	r18
    132c:	0a 95       	dec	r16
    132e:	aa f7       	brpl	.-22     	; 0x131a <__lshrdi3+0x1e>
    1330:	0f 91       	pop	r16
    1332:	08 95       	ret

00001334 <__cmpdi2_s8>:
    1334:	00 24       	eor	r0, r0
    1336:	a7 fd       	sbrc	r26, 7
    1338:	00 94       	com	r0
    133a:	2a 17       	cp	r18, r26
    133c:	30 05       	cpc	r19, r0
    133e:	40 05       	cpc	r20, r0
    1340:	50 05       	cpc	r21, r0
    1342:	60 05       	cpc	r22, r0
    1344:	70 05       	cpc	r23, r0
    1346:	80 05       	cpc	r24, r0
    1348:	90 05       	cpc	r25, r0
    134a:	08 95       	ret

0000134c <__udivmodhi4>:
    134c:	aa 1b       	sub	r26, r26
    134e:	bb 1b       	sub	r27, r27
    1350:	51 e1       	ldi	r21, 0x11	; 17
    1352:	07 c0       	rjmp	.+14     	; 0x1362 <__udivmodhi4_ep>

00001354 <__udivmodhi4_loop>:
    1354:	aa 1f       	adc	r26, r26
    1356:	bb 1f       	adc	r27, r27
    1358:	a6 17       	cp	r26, r22
    135a:	b7 07       	cpc	r27, r23
    135c:	10 f0       	brcs	.+4      	; 0x1362 <__udivmodhi4_ep>
    135e:	a6 1b       	sub	r26, r22
    1360:	b7 0b       	sbc	r27, r23

00001362 <__udivmodhi4_ep>:
    1362:	88 1f       	adc	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	5a 95       	dec	r21
    1368:	a9 f7       	brne	.-22     	; 0x1354 <__udivmodhi4_loop>
    136a:	80 95       	com	r24
    136c:	90 95       	com	r25
    136e:	bc 01       	movw	r22, r24
    1370:	cd 01       	movw	r24, r26
    1372:	08 95       	ret

00001374 <_exit>:
    1374:	f8 94       	cli

00001376 <__stop_program>:
    1376:	ff cf       	rjmp	.-2      	; 0x1376 <__stop_program>
