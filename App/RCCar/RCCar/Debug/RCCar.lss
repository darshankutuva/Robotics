
RCCar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000510  00800100  00002302  00002396  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002302  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800610  00800610  000028a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000028a6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000188  00000000  00000000  000028d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000bf  00000000  00000000  00002a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e21  00000000  00000000  00002b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e2  00000000  00000000  0000493e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014d1  00000000  00000000  00005220  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b8  00000000  00000000  000066f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c06  00000000  00000000  00006dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002402  00000000  00000000  000079b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00009db4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5b c0       	rjmp	.+182    	; 0xb8 <__ctors_end>
       2:	00 00       	nop
       4:	77 c0       	rjmp	.+238    	; 0xf4 <__bad_interrupt>
       6:	00 00       	nop
       8:	75 c0       	rjmp	.+234    	; 0xf4 <__bad_interrupt>
       a:	00 00       	nop
       c:	73 c0       	rjmp	.+230    	; 0xf4 <__bad_interrupt>
       e:	00 00       	nop
      10:	71 c0       	rjmp	.+226    	; 0xf4 <__bad_interrupt>
      12:	00 00       	nop
      14:	6f c0       	rjmp	.+222    	; 0xf4 <__bad_interrupt>
      16:	00 00       	nop
      18:	6d c0       	rjmp	.+218    	; 0xf4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6b c0       	rjmp	.+214    	; 0xf4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	69 c0       	rjmp	.+210    	; 0xf4 <__bad_interrupt>
      22:	00 00       	nop
      24:	67 c0       	rjmp	.+206    	; 0xf4 <__bad_interrupt>
      26:	00 00       	nop
      28:	65 c0       	rjmp	.+202    	; 0xf4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2c c2       	rjmp	.+1112   	; 0x486 <__vector_11>
      2e:	00 00       	nop
      30:	61 c0       	rjmp	.+194    	; 0xf4 <__bad_interrupt>
      32:	00 00       	nop
      34:	5f c0       	rjmp	.+190    	; 0xf4 <__bad_interrupt>
      36:	00 00       	nop
      38:	5d c0       	rjmp	.+186    	; 0xf4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5b c0       	rjmp	.+182    	; 0xf4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__vector_16>
      44:	57 c0       	rjmp	.+174    	; 0xf4 <__bad_interrupt>
      46:	00 00       	nop
      48:	55 c0       	rjmp	.+170    	; 0xf4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	53 c0       	rjmp	.+166    	; 0xf4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <__vector_20>
      54:	4f c0       	rjmp	.+158    	; 0xf4 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 07 10 	jmp	0x200e	; 0x200e <__vector_22>
      5c:	4b c0       	rjmp	.+150    	; 0xf4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	49 c0       	rjmp	.+146    	; 0xf4 <__bad_interrupt>
      62:	00 00       	nop
      64:	47 c0       	rjmp	.+142    	; 0xf4 <__bad_interrupt>
      66:	00 00       	nop
      68:	45 c0       	rjmp	.+138    	; 0xf4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	43 c0       	rjmp	.+134    	; 0xf4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 d5 0f 	jmp	0x1faa	; 0x1faa <__vector_28>
      74:	3f c0       	rjmp	.+126    	; 0xf4 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 39 10 	jmp	0x2072	; 0x2072 <__vector_30>
      7c:	3b c0       	rjmp	.+118    	; 0xf4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	39 c0       	rjmp	.+114    	; 0xf4 <__bad_interrupt>
      82:	00 00       	nop
      84:	37 c0       	rjmp	.+110    	; 0xf4 <__bad_interrupt>
      86:	00 00       	nop
      88:	35 c0       	rjmp	.+106    	; 0xf4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	16 06       	cpc	r1, r22
      8e:	29 06       	cpc	r2, r25
      90:	00 07       	cpc	r16, r16
      92:	ec 06       	cpc	r14, r28
      94:	00 07       	cpc	r16, r16
      96:	00 07       	cpc	r16, r16
      98:	00 07       	cpc	r16, r16
      9a:	00 07       	cpc	r16, r16
      9c:	00 07       	cpc	r16, r16
      9e:	df 06       	cpc	r13, r31
      a0:	00 07       	cpc	r16, r16
      a2:	00 07       	cpc	r16, r16
      a4:	00 07       	cpc	r16, r16
      a6:	00 07       	cpc	r16, r16
      a8:	00 07       	cpc	r16, r16
      aa:	00 07       	cpc	r16, r16
      ac:	e4 06       	cpc	r14, r20
      ae:	00 07       	cpc	r16, r16
      b0:	6b 06       	cpc	r6, r27
      b2:	00 07       	cpc	r16, r16
      b4:	00 07       	cpc	r16, r16
      b6:	a7 06       	cpc	r10, r23

000000b8 <__ctors_end>:
      b8:	11 24       	eor	r1, r1
      ba:	1f be       	out	0x3f, r1	; 63
      bc:	cf ef       	ldi	r28, 0xFF	; 255
      be:	d0 e4       	ldi	r29, 0x40	; 64
      c0:	de bf       	out	0x3e, r29	; 62
      c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
      c4:	16 e0       	ldi	r17, 0x06	; 6
      c6:	a0 e0       	ldi	r26, 0x00	; 0
      c8:	b1 e0       	ldi	r27, 0x01	; 1
      ca:	e2 e0       	ldi	r30, 0x02	; 2
      cc:	f3 e2       	ldi	r31, 0x23	; 35
      ce:	00 e0       	ldi	r16, 0x00	; 0
      d0:	0b bf       	out	0x3b, r16	; 59
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x14>
      d4:	07 90       	elpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	a0 31       	cpi	r26, 0x10	; 16
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0x10>

000000de <__do_clear_bss>:
      de:	26 e0       	ldi	r18, 0x06	; 6
      e0:	a0 e1       	ldi	r26, 0x10	; 16
      e2:	b6 e0       	ldi	r27, 0x06	; 6
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	a1 33       	cpi	r26, 0x31	; 49
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>
      ee:	9e d0       	rcall	.+316    	; 0x22c <main>
      f0:	0c 94 7f 11 	jmp	0x22fe	; 0x22fe <_exit>

000000f4 <__bad_interrupt>:
      f4:	85 cf       	rjmp	.-246    	; 0x0 <__vectors>

000000f6 <InitServoPWM>:
{
	//
	// Set OC2A pin to output
	//
	
	DDRD |= (0x1 << PIND7);
      f6:	57 9a       	sbi	0x0a, 7	; 10
	
	TCCR2A = (0x1 << COM2A0) | (0x1 << COM2A1) | (0x1 << WGM20);
      f8:	81 ec       	ldi	r24, 0xC1	; 193
      fa:	80 93 b0 00 	sts	0x00B0, r24
	
	//
	// Set Clock Pre-scaling to 256.
	//
	
	TCCR2B = (0x1 << CS20) | (0x1 << CS21) | (0x1 << CS22) | (0x1 << WGM22);
      fe:	8f e0       	ldi	r24, 0x0F	; 15
     100:	80 93 b1 00 	sts	0x00B1, r24
	
	//
	// Set Timer Overflow Interrupt to 1
	//
	
	TIMSK2 = (0x1 << TOIE2);
     104:	81 e0       	ldi	r24, 0x01	; 1
     106:	80 93 70 00 	sts	0x0070, r24
	
	//
	// Set OCR2B to TOP value
	//
	
	OCR2B = TIMER_TOP;
     10a:	9c e9       	ldi	r25, 0x9C	; 156
     10c:	90 93 b4 00 	sts	0x00B4, r25
	
	//
	// Set OCR2A and TCNT2 to 0
	//
	
	OCR2A = 0;
     110:	10 92 b3 00 	sts	0x00B3, r1
	
	TCNT2 = 0;
     114:	10 92 b2 00 	sts	0x00B2, r1
	
	gPWMInitialized = TRUE;
     118:	80 93 10 06 	sts	0x0610, r24
     11c:	08 95       	ret

0000011e <PerformHandshake>:
}

bool
PerformHandshake()
{
     11e:	1f 93       	push	r17
     120:	cf 93       	push	r28
     122:	df 93       	push	r29
     124:	00 d0       	rcall	.+0      	; 0x126 <PerformHandshake+0x8>
     126:	00 d0       	rcall	.+0      	; 0x128 <PerformHandshake+0xa>
     128:	00 d0       	rcall	.+0      	; 0x12a <PerformHandshake+0xc>
     12a:	cd b7       	in	r28, 0x3d	; 61
     12c:	de b7       	in	r29, 0x3e	; 62
	
	unsigned long Length;
	
	unsigned short RxValue;
	
	Length = sizeof(unsigned short);
     12e:	82 e0       	ldi	r24, 0x02	; 2
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	a0 e0       	ldi	r26, 0x00	; 0
     134:	b0 e0       	ldi	r27, 0x00	; 0
     136:	89 83       	std	Y+1, r24	; 0x01
     138:	9a 83       	std	Y+2, r25	; 0x02
     13a:	ab 83       	std	Y+3, r26	; 0x03
     13c:	bc 83       	std	Y+4, r27	; 0x04
	
	//
	// Wait until handshake data arrives
	//
	
	Status = Xymk5vXyfstReceive(&RxValue, &Length, GENERAL_MESSAGE);
     13e:	41 e0       	ldi	r20, 0x01	; 1
     140:	be 01       	movw	r22, r28
     142:	6f 5f       	subi	r22, 0xFF	; 255
     144:	7f 4f       	sbci	r23, 0xFF	; 255
     146:	ce 01       	movw	r24, r28
     148:	05 96       	adiw	r24, 0x05	; 5
     14a:	0e 94 b2 08 	call	0x1164	; 0x1164 <Xymk5vXyfstReceive>
     14e:	18 2f       	mov	r17, r24
	
	if (!Status)
     150:	81 11       	cpse	r24, r1
     152:	0b c0       	rjmp	.+22     	; 0x16a <PerformHandshake+0x4c>
	{
		SendTrace(ERROR_LEVEL, "PerformHandshake - Receive Data Failed\r\n");
     154:	25 e6       	ldi	r18, 0x65	; 101
     156:	34 e0       	ldi	r19, 0x04	; 4
     158:	3f 93       	push	r19
     15a:	2f 93       	push	r18
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	8f 93       	push	r24
     160:	1f d5       	rcall	.+2622   	; 0xba0 <SendTrace>
		
		goto Exit;
     162:	0f 90       	pop	r0
     164:	0f 90       	pop	r0
     166:	0f 90       	pop	r0
     168:	56 c0       	rjmp	.+172    	; 0x216 <PerformHandshake+0xf8>
	}
	
	if (Length != sizeof(unsigned short))
     16a:	89 81       	ldd	r24, Y+1	; 0x01
     16c:	9a 81       	ldd	r25, Y+2	; 0x02
     16e:	ab 81       	ldd	r26, Y+3	; 0x03
     170:	bc 81       	ldd	r27, Y+4	; 0x04
     172:	82 30       	cpi	r24, 0x02	; 2
     174:	91 05       	cpc	r25, r1
     176:	a1 05       	cpc	r26, r1
     178:	b1 05       	cpc	r27, r1
     17a:	91 f0       	breq	.+36     	; 0x1a0 <PerformHandshake+0x82>
	{
		SendTrace(ERROR_LEVEL, "PerformHandshake - Receive Data Failed - Received Length = %d\r\n", Length);
     17c:	bf 93       	push	r27
     17e:	af 93       	push	r26
     180:	9f 93       	push	r25
     182:	8f 93       	push	r24
     184:	8e e8       	ldi	r24, 0x8E	; 142
     186:	94 e0       	ldi	r25, 0x04	; 4
     188:	9f 93       	push	r25
     18a:	8f 93       	push	r24
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	8f 93       	push	r24
     190:	07 d5       	rcall	.+2574   	; 0xba0 <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	f8 94       	cli
     196:	de bf       	out	0x3e, r29	; 62
     198:	0f be       	out	0x3f, r0	; 63
     19a:	cd bf       	out	0x3d, r28	; 61
	
	if (Length != sizeof(unsigned short))
	{
		SendTrace(ERROR_LEVEL, "PerformHandshake - Receive Data Failed - Received Length = %d\r\n", Length);
		
		Status = FALSE;
     19c:	10 e0       	ldi	r17, 0x00	; 0
		
		goto Exit;
     19e:	3b c0       	rjmp	.+118    	; 0x216 <PerformHandshake+0xf8>
	}
	
	if (RxValue != ADC_MAX_VALUE)
     1a0:	8d 81       	ldd	r24, Y+5	; 0x05
     1a2:	9e 81       	ldd	r25, Y+6	; 0x06
     1a4:	8c 3f       	cpi	r24, 0xFC	; 252
     1a6:	23 e0       	ldi	r18, 0x03	; 3
     1a8:	92 07       	cpc	r25, r18
     1aa:	81 f0       	breq	.+32     	; 0x1cc <PerformHandshake+0xae>
	{
		SendTrace(ERROR_LEVEL, "PerformHandshake - Invalid Value - %d\r\n", RxValue);
     1ac:	9f 93       	push	r25
     1ae:	8f 93       	push	r24
     1b0:	8e ec       	ldi	r24, 0xCE	; 206
     1b2:	94 e0       	ldi	r25, 0x04	; 4
     1b4:	9f 93       	push	r25
     1b6:	8f 93       	push	r24
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	8f 93       	push	r24
     1bc:	f1 d4       	rcall	.+2530   	; 0xba0 <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
     1be:	0f 90       	pop	r0
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	0f 90       	pop	r0
     1c6:	0f 90       	pop	r0
	
	if (RxValue != ADC_MAX_VALUE)
	{
		SendTrace(ERROR_LEVEL, "PerformHandshake - Invalid Value - %d\r\n", RxValue);
		
		Status = FALSE;
     1c8:	10 e0       	ldi	r17, 0x00	; 0
		
		goto Exit;
     1ca:	25 c0       	rjmp	.+74     	; 0x216 <PerformHandshake+0xf8>
	}
	
	RxValue++;
     1cc:	8d ef       	ldi	r24, 0xFD	; 253
     1ce:	93 e0       	ldi	r25, 0x03	; 3
     1d0:	9e 83       	std	Y+6, r25	; 0x06
     1d2:	8d 83       	std	Y+5, r24	; 0x05
	
	Status = Xymk5vXyfstTransmit((PVOID)&RxValue, sizeof(unsigned short), GENERAL_MESSAGE);
     1d4:	21 e0       	ldi	r18, 0x01	; 1
     1d6:	42 e0       	ldi	r20, 0x02	; 2
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	ce 01       	movw	r24, r28
     1e0:	05 96       	adiw	r24, 0x05	; 5
     1e2:	29 d6       	rcall	.+3154   	; 0xe36 <Xymk5vXyfstTransmit>
     1e4:	18 2f       	mov	r17, r24
	
	if (!Status)
     1e6:	81 11       	cpse	r24, r1
     1e8:	0b c0       	rjmp	.+22     	; 0x200 <PerformHandshake+0xe2>
	{
		SendTrace(ERROR_LEVEL, "PerformHandshake - Transmit Data Failed\r\n");
     1ea:	26 ef       	ldi	r18, 0xF6	; 246
     1ec:	34 e0       	ldi	r19, 0x04	; 4
     1ee:	3f 93       	push	r19
     1f0:	2f 93       	push	r18
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	8f 93       	push	r24
     1f6:	d4 d4       	rcall	.+2472   	; 0xba0 <SendTrace>
		
		goto Exit;
     1f8:	0f 90       	pop	r0
     1fa:	0f 90       	pop	r0
     1fc:	0f 90       	pop	r0
     1fe:	0b c0       	rjmp	.+22     	; 0x216 <PerformHandshake+0xf8>
	}
	
	SendTrace(INFO_LEVEL, "Handshake completed\r\n");
     200:	80 e2       	ldi	r24, 0x20	; 32
     202:	95 e0       	ldi	r25, 0x05	; 5
     204:	9f 93       	push	r25
     206:	8f 93       	push	r24
     208:	84 e0       	ldi	r24, 0x04	; 4
     20a:	8f 93       	push	r24
     20c:	c9 d4       	rcall	.+2450   	; 0xba0 <SendTrace>
     20e:	0f 90       	pop	r0
     210:	0f 90       	pop	r0
     212:	0f 90       	pop	r0
	
	Status = TRUE;
     214:	11 e0       	ldi	r17, 0x01	; 1
	
Exit:

	return Status;
}
     216:	81 2f       	mov	r24, r17
     218:	26 96       	adiw	r28, 0x06	; 6
     21a:	0f b6       	in	r0, 0x3f	; 63
     21c:	f8 94       	cli
     21e:	de bf       	out	0x3e, r29	; 62
     220:	0f be       	out	0x3f, r0	; 63
     222:	cd bf       	out	0x3d, r28	; 61
     224:	df 91       	pop	r29
     226:	cf 91       	pop	r28
     228:	1f 91       	pop	r17
     22a:	08 95       	ret

0000022c <main>:
//
// Function Definition
//

int main(void)
{	
     22c:	4f 92       	push	r4
     22e:	5f 92       	push	r5
     230:	6f 92       	push	r6
     232:	7f 92       	push	r7
     234:	9f 92       	push	r9
     236:	af 92       	push	r10
     238:	bf 92       	push	r11
     23a:	cf 92       	push	r12
     23c:	df 92       	push	r13
     23e:	ef 92       	push	r14
     240:	ff 92       	push	r15
     242:	0f 93       	push	r16
     244:	1f 93       	push	r17
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	cd b7       	in	r28, 0x3d	; 61
     24c:	de b7       	in	r29, 0x3e	; 62
     24e:	2e 97       	sbiw	r28, 0x0e	; 14
     250:	0f b6       	in	r0, 0x3f	; 63
     252:	f8 94       	cli
     254:	de bf       	out	0x3e, r29	; 62
     256:	0f be       	out	0x3f, r0	; 63
     258:	cd bf       	out	0x3d, r28	; 61
	bool Status;
	
	unsigned int InputValues[NUM_INPUT_VALUES];
	
	unsigned long InputLength = NUM_INPUT_VALUES * sizeof(unsigned int);
     25a:	84 e0       	ldi	r24, 0x04	; 4
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	a0 e0       	ldi	r26, 0x00	; 0
     260:	b0 e0       	ldi	r27, 0x00	; 0
     262:	8d 83       	std	Y+5, r24	; 0x05
     264:	9e 83       	std	Y+6, r25	; 0x06
     266:	af 83       	std	Y+7, r26	; 0x07
     268:	b8 87       	std	Y+8, r27	; 0x08
	
	//
	// First Initialize Tracing
	//
	
	InitTrace(F_CPU, INFO_LEVEL | ERROR_LEVEL);
     26a:	45 e0       	ldi	r20, 0x05	; 5
     26c:	60 e0       	ldi	r22, 0x00	; 0
     26e:	72 e1       	ldi	r23, 0x12	; 18
     270:	8a e7       	ldi	r24, 0x7A	; 122
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	89 d1       	rcall	.+786    	; 0x588 <InitTrace>
	
	SendTrace(INFO_LEVEL, "RC Car\r\n");
     276:	86 ea       	ldi	r24, 0xA6	; 166
     278:	95 e0       	ldi	r25, 0x05	; 5
     27a:	9f 93       	push	r25
     27c:	8f 93       	push	r24
     27e:	14 e0       	ldi	r17, 0x04	; 4
     280:	1f 93       	push	r17
     282:	8e d4       	rcall	.+2332   	; 0xba0 <SendTrace>
	
	SendTrace(INFO_LEVEL, "-----------------\r\n");
     284:	86 e3       	ldi	r24, 0x36	; 54
     286:	95 e0       	ldi	r25, 0x05	; 5
     288:	9f 93       	push	r25
     28a:	8f 93       	push	r24
     28c:	1f 93       	push	r17
     28e:	88 d4       	rcall	.+2320   	; 0xba0 <SendTrace>
	
	//
	// Init PWM
	//
	
	InitServoPWM();
     290:	32 df       	rcall	.-412    	; 0xf6 <InitServoPWM>
	
	//
	// Initialize ADC Params
	//
	
	AdcParams.Flags.IsLeftAdjustResult = 0;
     292:	89 85       	ldd	r24, Y+9	; 0x09
     294:	8e 7f       	andi	r24, 0xFE	; 254
     296:	89 87       	std	Y+9, r24	; 0x09
	
	AdcParams.RefVoltSelect = AREF_VOLT;
     298:	1a 86       	std	Y+10, r1	; 0x0a
	
	AdcParams.Prescalar = DIV_FACTOR_0;
     29a:	1b 86       	std	Y+11, r1	; 0x0b
	
	AdcParams.EnabledChannelsBitVector = (0x1 << ADC_CHANNEL_0);
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	8c 87       	std	Y+12, r24	; 0x0c
	
	Status = InitADC(&AdcParams);
     2a0:	ce 01       	movw	r24, r28
     2a2:	09 96       	adiw	r24, 0x09	; 9
     2a4:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <InitADC>
	
	if (!Status)
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	81 11       	cpse	r24, r1
     2b6:	0b c0       	rjmp	.+22     	; 0x2ce <main+0xa2>
	{
		SendTrace(ERROR_LEVEL, "Init ADC Failed\r\n");
     2b8:	8a e4       	ldi	r24, 0x4A	; 74
     2ba:	95 e0       	ldi	r25, 0x05	; 5
     2bc:	9f 93       	push	r25
     2be:	8f 93       	push	r24
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	8f 93       	push	r24
     2c4:	6d d4       	rcall	.+2266   	; 0xba0 <SendTrace>
		
		goto Exit;
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
     2ca:	0f 90       	pop	r0
     2cc:	c4 c0       	rjmp	.+392    	; 0x456 <main+0x22a>
	
	//
	// Init Transceiver
	//
	
	Status = InitXymk5vXyfst(MY_ADDRESS, DEST_ADDRESS, TRUE);
     2ce:	41 e0       	ldi	r20, 0x01	; 1
     2d0:	6f e0       	ldi	r22, 0x0F	; 15
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	0e 94 c3 0a 	call	0x1586	; 0x1586 <InitXymk5vXyfst>
	
	if (!Status)
     2d8:	81 11       	cpse	r24, r1
     2da:	0b c0       	rjmp	.+22     	; 0x2f2 <main+0xc6>
	{
		SendTrace(ERROR_LEVEL, "Init Transceiver Failed\r\n");
     2dc:	8c e5       	ldi	r24, 0x5C	; 92
     2de:	95 e0       	ldi	r25, 0x05	; 5
     2e0:	9f 93       	push	r25
     2e2:	8f 93       	push	r24
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	8f 93       	push	r24
     2e8:	5b d4       	rcall	.+2230   	; 0xba0 <SendTrace>
		
		goto Exit;
     2ea:	0f 90       	pop	r0
     2ec:	0f 90       	pop	r0
     2ee:	0f 90       	pop	r0
     2f0:	b2 c0       	rjmp	.+356    	; 0x456 <main+0x22a>
	//
	// Init H-Bridge
	// Make PC4, PC5, PC6 PC7 as output
	// 
	
	DDRC |= (0x1 << PINC4) | (0x1 << PINC5) | (0x1 << PINC6) | (0x1 << PINC7);
     2f2:	87 b1       	in	r24, 0x07	; 7
     2f4:	80 6f       	ori	r24, 0xF0	; 240
     2f6:	87 b9       	out	0x07, r24	; 7
	
	//
	// Perform Handshake
	//
	
	SendTrace(INFO_LEVEL, "Performing Handshake\r\n");
     2f8:	86 e7       	ldi	r24, 0x76	; 118
     2fa:	95 e0       	ldi	r25, 0x05	; 5
     2fc:	9f 93       	push	r25
     2fe:	8f 93       	push	r24
     300:	84 e0       	ldi	r24, 0x04	; 4
     302:	8f 93       	push	r24
     304:	4d d4       	rcall	.+2202   	; 0xba0 <SendTrace>
	
	Status = PerformHandshake();
     306:	0b df       	rcall	.-490    	; 0x11e <PerformHandshake>
	
	if (!Status)
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	81 11       	cpse	r24, r1
     310:	0b c0       	rjmp	.+22     	; 0x328 <main+0xfc>
	{
		SendTrace(ERROR_LEVEL, "Handshake Failed\r\n");
     312:	8d e8       	ldi	r24, 0x8D	; 141
     314:	95 e0       	ldi	r25, 0x05	; 5
     316:	9f 93       	push	r25
     318:	8f 93       	push	r24
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	8f 93       	push	r24
     31e:	40 d4       	rcall	.+2176   	; 0xba0 <SendTrace>
		
		goto Exit;
     320:	0f 90       	pop	r0
     322:	0f 90       	pop	r0
     324:	0f 90       	pop	r0
     326:	97 c0       	rjmp	.+302    	; 0x456 <main+0x22a>
	}
	
	SendTrace(INFO_LEVEL, "Drive RC Car\r\n");
     328:	80 ea       	ldi	r24, 0xA0	; 160
     32a:	95 e0       	ldi	r25, 0x05	; 5
     32c:	9f 93       	push	r25
     32e:	8f 93       	push	r24
     330:	84 e0       	ldi	r24, 0x04	; 4
     332:	8f 93       	push	r24
     334:	35 d4       	rcall	.+2154   	; 0xba0 <SendTrace>
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
		// Program Servo to turn in the selected direction
		//
		
		gCurrentPulse = (InputValues[1] / SERVO_PULSE_INTERVAL) + MIN_PULSE;
		
		SendTrace(INFO_LEVEL, "Current Pulse = %d\r\n", gCurrentPulse);
     33c:	0f 2e       	mov	r0, r31
     33e:	f1 ee       	ldi	r31, 0xE1	; 225
     340:	ef 2e       	mov	r14, r31
     342:	f5 e0       	ldi	r31, 0x05	; 5
     344:	ff 2e       	mov	r15, r31
     346:	f0 2d       	mov	r31, r0
     348:	68 94       	set
     34a:	bb 24       	eor	r11, r11
     34c:	b2 f8       	bld	r11, 2
		{	
			DriveForward();
		}
		else if (InputValues[0] < ADC_CENTER)
		{
			DriveBackward();
     34e:	0f 2e       	mov	r0, r31
     350:	f0 ea       	ldi	r31, 0xA0	; 160
     352:	9f 2e       	mov	r9, r31
     354:	f0 2d       	mov	r31, r0
		// Program the H-Bridge to Drive Motor
		//
		
		if (InputValues[0] > ADC_CENTER)
		{	
			DriveForward();
     356:	0f 2e       	mov	r0, r31
     358:	f0 e5       	ldi	r31, 0x50	; 80
     35a:	af 2e       	mov	r10, r31
     35c:	f0 2d       	mov	r31, r0
			continue;
		}
		
		if (InputLength != (NUM_INPUT_VALUES * sizeof(unsigned int)))
		{
			SendTrace(ERROR_LEVEL, "Invalid Length = %d\r\n", InputLength);
     35e:	0b ec       	ldi	r16, 0xCB	; 203
     360:	15 e0       	ldi	r17, 0x05	; 5
		
		Status = Xymk5vXyfstReceive(&InputValues[0], &InputLength, GENERAL_MESSAGE);
        
		if (!Status)
		{
			SendTrace(ERROR_LEVEL, "Failed to receive command\r\n");
     362:	0f 2e       	mov	r0, r31
     364:	ff ea       	ldi	r31, 0xAF	; 175
     366:	cf 2e       	mov	r12, r31
     368:	f5 e0       	ldi	r31, 0x05	; 5
     36a:	df 2e       	mov	r13, r31
     36c:	f0 2d       	mov	r31, r0
	SendTrace(INFO_LEVEL, "Drive RC Car\r\n");
	
    while(1)
    {
		
		Status = Xymk5vXyfstReceive(&InputValues[0], &InputLength, GENERAL_MESSAGE);
     36e:	41 e0       	ldi	r20, 0x01	; 1
     370:	be 01       	movw	r22, r28
     372:	6b 5f       	subi	r22, 0xFB	; 251
     374:	7f 4f       	sbci	r23, 0xFF	; 255
     376:	ce 01       	movw	r24, r28
     378:	01 96       	adiw	r24, 0x01	; 1
     37a:	f4 d6       	rcall	.+3560   	; 0x1164 <Xymk5vXyfstReceive>
        
		if (!Status)
     37c:	81 11       	cpse	r24, r1
     37e:	09 c0       	rjmp	.+18     	; 0x392 <main+0x166>
		{
			SendTrace(ERROR_LEVEL, "Failed to receive command\r\n");
     380:	df 92       	push	r13
     382:	cf 92       	push	r12
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	8f 93       	push	r24
     388:	0b d4       	rcall	.+2070   	; 0xba0 <SendTrace>
			
			continue;
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	ee cf       	rjmp	.-36     	; 0x36e <main+0x142>
		}
		
		if (InputLength != (NUM_INPUT_VALUES * sizeof(unsigned int)))
     392:	8d 81       	ldd	r24, Y+5	; 0x05
     394:	9e 81       	ldd	r25, Y+6	; 0x06
     396:	af 81       	ldd	r26, Y+7	; 0x07
     398:	b8 85       	ldd	r27, Y+8	; 0x08
     39a:	84 30       	cpi	r24, 0x04	; 4
     39c:	91 05       	cpc	r25, r1
     39e:	a1 05       	cpc	r26, r1
     3a0:	b1 05       	cpc	r27, r1
     3a2:	79 f0       	breq	.+30     	; 0x3c2 <main+0x196>
		{
			SendTrace(ERROR_LEVEL, "Invalid Length = %d\r\n", InputLength);
     3a4:	bf 93       	push	r27
     3a6:	af 93       	push	r26
     3a8:	9f 93       	push	r25
     3aa:	8f 93       	push	r24
     3ac:	1f 93       	push	r17
     3ae:	0f 93       	push	r16
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	8f 93       	push	r24
     3b4:	f5 d3       	rcall	.+2026   	; 0xba0 <SendTrace>
			
			continue;	
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	f8 94       	cli
     3ba:	de bf       	out	0x3e, r29	; 62
     3bc:	0f be       	out	0x3f, r0	; 63
     3be:	cd bf       	out	0x3d, r28	; 61
     3c0:	d6 cf       	rjmp	.-84     	; 0x36e <main+0x142>
		
		//
		// Program the H-Bridge to Drive Motor
		//
		
		if (InputValues[0] > ADC_CENTER)
     3c2:	69 81       	ldd	r22, Y+1	; 0x01
     3c4:	7a 81       	ldd	r23, Y+2	; 0x02
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	79 d0       	rcall	.+242    	; 0x4be <__floatunsisf>
     3cc:	2b 01       	movw	r4, r22
     3ce:	3c 01       	movw	r6, r24
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	4f ef       	ldi	r20, 0xFF	; 255
     3d6:	53 e4       	ldi	r21, 0x43	; 67
     3d8:	d3 d0       	rcall	.+422    	; 0x580 <__gesf2>
     3da:	18 16       	cp	r1, r24
     3dc:	14 f4       	brge	.+4      	; 0x3e2 <main+0x1b6>
		{	
			DriveForward();
     3de:	a8 b8       	out	0x08, r10	; 8
     3e0:	0c c0       	rjmp	.+24     	; 0x3fa <main+0x1ce>
		}
		else if (InputValues[0] < ADC_CENTER)
     3e2:	20 e0       	ldi	r18, 0x00	; 0
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	4f ef       	ldi	r20, 0xFF	; 255
     3e8:	53 e4       	ldi	r21, 0x43	; 67
     3ea:	c3 01       	movw	r24, r6
     3ec:	b2 01       	movw	r22, r4
     3ee:	63 d0       	rcall	.+198    	; 0x4b6 <__cmpsf2>
     3f0:	88 23       	and	r24, r24
     3f2:	14 f4       	brge	.+4      	; 0x3f8 <main+0x1cc>
		{
			DriveBackward();
     3f4:	98 b8       	out	0x08, r9	; 8
     3f6:	01 c0       	rjmp	.+2      	; 0x3fa <main+0x1ce>
		}
		else
		{
			Stop();
     3f8:	18 b8       	out	0x08, r1	; 8
		
		//
		// Program Servo to turn in the selected direction
		//
		
		gCurrentPulse = (InputValues[1] / SERVO_PULSE_INTERVAL) + MIN_PULSE;
     3fa:	2b 81       	ldd	r18, Y+3	; 0x03
     3fc:	3c 81       	ldd	r19, Y+4	; 0x04
     3fe:	a1 ec       	ldi	r26, 0xC1	; 193
     400:	b0 ec       	ldi	r27, 0xC0	; 192
     402:	0e 94 76 10 	call	0x20ec	; 0x20ec <__umulhisi3>
     406:	88 0f       	add	r24, r24
     408:	89 2f       	mov	r24, r25
     40a:	88 1f       	adc	r24, r24
     40c:	99 0b       	sbc	r25, r25
     40e:	91 95       	neg	r25
     410:	8d 5f       	subi	r24, 0xFD	; 253
     412:	80 93 64 04 	sts	0x0464, r24
		
		SendTrace(INFO_LEVEL, "Current Pulse = %d\r\n", gCurrentPulse);
     416:	1f 92       	push	r1
     418:	8f 93       	push	r24
     41a:	ff 92       	push	r15
     41c:	ef 92       	push	r14
     41e:	bf 92       	push	r11
     420:	bf d3       	rcall	.+1918   	; 0xba0 <SendTrace>
		
		//
		// Read Voltage
		//
		
		ADCRead(ADC_CHANNEL_0, &Voltage);
     422:	be 01       	movw	r22, r28
     424:	63 5f       	subi	r22, 0xF3	; 243
     426:	7f 4f       	sbci	r23, 0xFF	; 255
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	0e 94 09 0b 	call	0x1612	; 0x1612 <ADCRead>
		
		ADCRead(ADC_CHANNEL_0, &Voltage);
     42e:	be 01       	movw	r22, r28
     430:	63 5f       	subi	r22, 0xF3	; 243
     432:	7f 4f       	sbci	r23, 0xFF	; 255
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	0e 94 09 0b 	call	0x1612	; 0x1612 <ADCRead>
		
		Xymk5vXyfstTransmit(&Voltage, VoltageLength, GENERAL_MESSAGE);
     43a:	21 e0       	ldi	r18, 0x01	; 1
     43c:	42 e0       	ldi	r20, 0x02	; 2
     43e:	50 e0       	ldi	r21, 0x00	; 0
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	ce 01       	movw	r24, r28
     446:	0d 96       	adiw	r24, 0x0d	; 13
     448:	f6 d4       	rcall	.+2540   	; 0xe36 <Xymk5vXyfstTransmit>
     44a:	0f 90       	pop	r0
     44c:	0f 90       	pop	r0
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	8c cf       	rjmp	.-232    	; 0x36e <main+0x142>
    }
	
Exit:
	
	return Status;
}
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	2e 96       	adiw	r28, 0x0e	; 14
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	f8 94       	cli
     460:	de bf       	out	0x3e, r29	; 62
     462:	0f be       	out	0x3f, r0	; 63
     464:	cd bf       	out	0x3d, r28	; 61
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	1f 91       	pop	r17
     46c:	0f 91       	pop	r16
     46e:	ff 90       	pop	r15
     470:	ef 90       	pop	r14
     472:	df 90       	pop	r13
     474:	cf 90       	pop	r12
     476:	bf 90       	pop	r11
     478:	af 90       	pop	r10
     47a:	9f 90       	pop	r9
     47c:	7f 90       	pop	r7
     47e:	6f 90       	pop	r6
     480:	5f 90       	pop	r5
     482:	4f 90       	pop	r4
     484:	08 95       	ret

00000486 <__vector_11>:

	return Status;
}

ISR(TIMER2_OVF_vect)
{
     486:	1f 92       	push	r1
     488:	0f 92       	push	r0
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	0f 92       	push	r0
     48e:	11 24       	eor	r1, r1
     490:	8f 93       	push	r24
     492:	9f 93       	push	r25
	if (gPWMInitialized)
     494:	80 91 10 06 	lds	r24, 0x0610
     498:	88 23       	and	r24, r24
     49a:	31 f0       	breq	.+12     	; 0x4a8 <__vector_11+0x22>
	{
		OCR2A = (TIMER_TOP - gCurrentPulse);
     49c:	90 91 64 04 	lds	r25, 0x0464
     4a0:	8c e9       	ldi	r24, 0x9C	; 156
     4a2:	89 1b       	sub	r24, r25
     4a4:	80 93 b3 00 	sts	0x00B3, r24
	}
	
	return;
     4a8:	9f 91       	pop	r25
     4aa:	8f 91       	pop	r24
     4ac:	0f 90       	pop	r0
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	0f 90       	pop	r0
     4b2:	1f 90       	pop	r1
     4b4:	18 95       	reti

000004b6 <__cmpsf2>:
     4b6:	40 d0       	rcall	.+128    	; 0x538 <__fp_cmp>
     4b8:	08 f4       	brcc	.+2      	; 0x4bc <__cmpsf2+0x6>
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	08 95       	ret

000004be <__floatunsisf>:
     4be:	e8 94       	clt
     4c0:	09 c0       	rjmp	.+18     	; 0x4d4 <__floatsisf+0x12>

000004c2 <__floatsisf>:
     4c2:	97 fb       	bst	r25, 7
     4c4:	3e f4       	brtc	.+14     	; 0x4d4 <__floatsisf+0x12>
     4c6:	90 95       	com	r25
     4c8:	80 95       	com	r24
     4ca:	70 95       	com	r23
     4cc:	61 95       	neg	r22
     4ce:	7f 4f       	sbci	r23, 0xFF	; 255
     4d0:	8f 4f       	sbci	r24, 0xFF	; 255
     4d2:	9f 4f       	sbci	r25, 0xFF	; 255
     4d4:	99 23       	and	r25, r25
     4d6:	a9 f0       	breq	.+42     	; 0x502 <__floatsisf+0x40>
     4d8:	f9 2f       	mov	r31, r25
     4da:	96 e9       	ldi	r25, 0x96	; 150
     4dc:	bb 27       	eor	r27, r27
     4de:	93 95       	inc	r25
     4e0:	f6 95       	lsr	r31
     4e2:	87 95       	ror	r24
     4e4:	77 95       	ror	r23
     4e6:	67 95       	ror	r22
     4e8:	b7 95       	ror	r27
     4ea:	f1 11       	cpse	r31, r1
     4ec:	f8 cf       	rjmp	.-16     	; 0x4de <__floatsisf+0x1c>
     4ee:	fa f4       	brpl	.+62     	; 0x52e <__floatsisf+0x6c>
     4f0:	bb 0f       	add	r27, r27
     4f2:	11 f4       	brne	.+4      	; 0x4f8 <__floatsisf+0x36>
     4f4:	60 ff       	sbrs	r22, 0
     4f6:	1b c0       	rjmp	.+54     	; 0x52e <__floatsisf+0x6c>
     4f8:	6f 5f       	subi	r22, 0xFF	; 255
     4fa:	7f 4f       	sbci	r23, 0xFF	; 255
     4fc:	8f 4f       	sbci	r24, 0xFF	; 255
     4fe:	9f 4f       	sbci	r25, 0xFF	; 255
     500:	16 c0       	rjmp	.+44     	; 0x52e <__floatsisf+0x6c>
     502:	88 23       	and	r24, r24
     504:	11 f0       	breq	.+4      	; 0x50a <__floatsisf+0x48>
     506:	96 e9       	ldi	r25, 0x96	; 150
     508:	11 c0       	rjmp	.+34     	; 0x52c <__floatsisf+0x6a>
     50a:	77 23       	and	r23, r23
     50c:	21 f0       	breq	.+8      	; 0x516 <__floatsisf+0x54>
     50e:	9e e8       	ldi	r25, 0x8E	; 142
     510:	87 2f       	mov	r24, r23
     512:	76 2f       	mov	r23, r22
     514:	05 c0       	rjmp	.+10     	; 0x520 <__floatsisf+0x5e>
     516:	66 23       	and	r22, r22
     518:	71 f0       	breq	.+28     	; 0x536 <__floatsisf+0x74>
     51a:	96 e8       	ldi	r25, 0x86	; 134
     51c:	86 2f       	mov	r24, r22
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	60 e0       	ldi	r22, 0x00	; 0
     522:	2a f0       	brmi	.+10     	; 0x52e <__floatsisf+0x6c>
     524:	9a 95       	dec	r25
     526:	66 0f       	add	r22, r22
     528:	77 1f       	adc	r23, r23
     52a:	88 1f       	adc	r24, r24
     52c:	da f7       	brpl	.-10     	; 0x524 <__floatsisf+0x62>
     52e:	88 0f       	add	r24, r24
     530:	96 95       	lsr	r25
     532:	87 95       	ror	r24
     534:	97 f9       	bld	r25, 7
     536:	08 95       	ret

00000538 <__fp_cmp>:
     538:	99 0f       	add	r25, r25
     53a:	00 08       	sbc	r0, r0
     53c:	55 0f       	add	r21, r21
     53e:	aa 0b       	sbc	r26, r26
     540:	e0 e8       	ldi	r30, 0x80	; 128
     542:	fe ef       	ldi	r31, 0xFE	; 254
     544:	16 16       	cp	r1, r22
     546:	17 06       	cpc	r1, r23
     548:	e8 07       	cpc	r30, r24
     54a:	f9 07       	cpc	r31, r25
     54c:	c0 f0       	brcs	.+48     	; 0x57e <__fp_cmp+0x46>
     54e:	12 16       	cp	r1, r18
     550:	13 06       	cpc	r1, r19
     552:	e4 07       	cpc	r30, r20
     554:	f5 07       	cpc	r31, r21
     556:	98 f0       	brcs	.+38     	; 0x57e <__fp_cmp+0x46>
     558:	62 1b       	sub	r22, r18
     55a:	73 0b       	sbc	r23, r19
     55c:	84 0b       	sbc	r24, r20
     55e:	95 0b       	sbc	r25, r21
     560:	39 f4       	brne	.+14     	; 0x570 <__fp_cmp+0x38>
     562:	0a 26       	eor	r0, r26
     564:	61 f0       	breq	.+24     	; 0x57e <__fp_cmp+0x46>
     566:	23 2b       	or	r18, r19
     568:	24 2b       	or	r18, r20
     56a:	25 2b       	or	r18, r21
     56c:	21 f4       	brne	.+8      	; 0x576 <__fp_cmp+0x3e>
     56e:	08 95       	ret
     570:	0a 26       	eor	r0, r26
     572:	09 f4       	brne	.+2      	; 0x576 <__fp_cmp+0x3e>
     574:	a1 40       	sbci	r26, 0x01	; 1
     576:	a6 95       	lsr	r26
     578:	8f ef       	ldi	r24, 0xFF	; 255
     57a:	81 1d       	adc	r24, r1
     57c:	81 1d       	adc	r24, r1
     57e:	08 95       	ret

00000580 <__gesf2>:
     580:	db df       	rcall	.-74     	; 0x538 <__fp_cmp>
     582:	08 f4       	brcc	.+2      	; 0x586 <__gesf2+0x6>
     584:	8f ef       	ldi	r24, 0xFF	; 255
     586:	08 95       	ret

00000588 <InitTrace>:
#ifdef DEBUG

void
InitTrace(unsigned long ProcFrequency, unsigned char TraceLevel)
{
	if (!gTraceInitialized)
     588:	80 91 11 06 	lds	r24, 0x0611
     58c:	81 11       	cpse	r24, r1
     58e:	0a c0       	rjmp	.+20     	; 0x5a4 <InitTrace+0x1c>
	{

		gTraceLevel = TraceLevel;
     590:	40 93 18 06 	sts	0x0618, r20

		InitUARTSync(UART_ZERO, BR_9600, NORMAL_MODE);	
     594:	40 e0       	ldi	r20, 0x00	; 0
     596:	63 e3       	ldi	r22, 0x33	; 51
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <InitUARTSync>
		
		gTraceInitialized = TRUE;
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	80 93 11 06 	sts	0x0611, r24
     5a4:	08 95       	ret

000005a6 <SendStringValue>:
SendStringValue(char *String)
{

	unsigned long Length = 0;
	
	Length = strlen(String);
     5a6:	fc 01       	movw	r30, r24
     5a8:	01 90       	ld	r0, Z+
     5aa:	00 20       	and	r0, r0
     5ac:	e9 f7       	brne	.-6      	; 0x5a8 <SendStringValue+0x2>
     5ae:	31 97       	sbiw	r30, 0x01	; 1
     5b0:	9f 01       	movw	r18, r30
     5b2:	28 1b       	sub	r18, r24
     5b4:	39 0b       	sbc	r19, r25
     5b6:	40 e0       	ldi	r20, 0x00	; 0
     5b8:	50 e0       	ldi	r21, 0x00	; 0
	
	UARTTransmitSync(UART_ZERO, (PVOID) String, Length);
     5ba:	bc 01       	movw	r22, r24
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <UARTTransmitSync>
     5c2:	08 95       	ret

000005c4 <SendHexValue>:
	
}

void
SendHexValue(unsigned long long Value)
{
     5c4:	8f 92       	push	r8
     5c6:	9f 92       	push	r9
     5c8:	af 92       	push	r10
     5ca:	bf 92       	push	r11
     5cc:	cf 92       	push	r12
     5ce:	df 92       	push	r13
     5d0:	ef 92       	push	r14
     5d2:	ff 92       	push	r15
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	cd b7       	in	r28, 0x3d	; 61
     5de:	de b7       	in	r29, 0x3e	; 62
     5e0:	da 95       	dec	r29
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	f8 94       	cli
     5e6:	de bf       	out	0x3e, r29	; 62
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	cd bf       	out	0x3d, r28	; 61
     5ec:	02 2f       	mov	r16, r18
     5ee:	93 2e       	mov	r9, r19
     5f0:	a4 2e       	mov	r10, r20
     5f2:	b5 2e       	mov	r11, r21
     5f4:	c6 2e       	mov	r12, r22
     5f6:	d7 2e       	mov	r13, r23
     5f8:	e8 2e       	mov	r14, r24
     5fa:	f9 2e       	mov	r15, r25

	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
     5fc:	10 e0       	ldi	r17, 0x00	; 0

		if (Value < 16)
		{
			TransmitChar[Count] = Value;

			Value = 0;
     5fe:	81 2c       	mov	r8, r1


	do
	{

		if (Value < 16)
     600:	20 2f       	mov	r18, r16
     602:	39 2d       	mov	r19, r9
     604:	4a 2d       	mov	r20, r10
     606:	5b 2d       	mov	r21, r11
     608:	6c 2d       	mov	r22, r12
     60a:	7d 2d       	mov	r23, r13
     60c:	8e 2d       	mov	r24, r14
     60e:	9f 2d       	mov	r25, r15
     610:	af e0       	ldi	r26, 0x0F	; 15
     612:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__cmpdi2_s8>
     616:	09 f0       	breq	.+2      	; 0x61a <SendHexValue+0x56>
     618:	80 f4       	brcc	.+32     	; 0x63a <SendHexValue+0x76>
		{
			TransmitChar[Count] = Value;
     61a:	e1 e0       	ldi	r30, 0x01	; 1
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	ec 0f       	add	r30, r28
     620:	fd 1f       	adc	r31, r29
     622:	e1 0f       	add	r30, r17
     624:	f1 1d       	adc	r31, r1
     626:	00 83       	st	Z, r16

			Value = 0;
     628:	08 2d       	mov	r16, r8
     62a:	98 2c       	mov	r9, r8
     62c:	a8 2c       	mov	r10, r8
     62e:	b8 2c       	mov	r11, r8
     630:	c8 2c       	mov	r12, r8
     632:	d8 2c       	mov	r13, r8
     634:	e8 2c       	mov	r14, r8
     636:	f8 2c       	mov	r15, r8
     638:	1c c0       	rjmp	.+56     	; 0x672 <SendHexValue+0xae>
		}
		else
		{
			TransmitChar[Count] = Value % 16;
     63a:	e1 e0       	ldi	r30, 0x01	; 1
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	ec 0f       	add	r30, r28
     640:	fd 1f       	adc	r31, r29
     642:	e1 0f       	add	r30, r17
     644:	f1 1d       	adc	r31, r1
     646:	80 2f       	mov	r24, r16
     648:	8f 70       	andi	r24, 0x0F	; 15
     64a:	80 83       	st	Z, r24

			Value = Value / 16;
     64c:	20 2f       	mov	r18, r16
     64e:	39 2d       	mov	r19, r9
     650:	4a 2d       	mov	r20, r10
     652:	5b 2d       	mov	r21, r11
     654:	6c 2d       	mov	r22, r12
     656:	7d 2d       	mov	r23, r13
     658:	8e 2d       	mov	r24, r14
     65a:	9f 2d       	mov	r25, r15
     65c:	04 e0       	ldi	r16, 0x04	; 4
     65e:	0e 94 57 11 	call	0x22ae	; 0x22ae <__lshrdi3>
     662:	02 2f       	mov	r16, r18
     664:	93 2e       	mov	r9, r19
     666:	a4 2e       	mov	r10, r20
     668:	b5 2e       	mov	r11, r21
     66a:	c6 2e       	mov	r12, r22
     66c:	d7 2e       	mov	r13, r23
     66e:	e8 2e       	mov	r14, r24
     670:	f9 2e       	mov	r15, r25

		}
		
		if (TransmitChar[Count] > 9)
     672:	e1 2f       	mov	r30, r17
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	a1 e0       	ldi	r26, 0x01	; 1
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	ac 0f       	add	r26, r28
     67c:	bd 1f       	adc	r27, r29
     67e:	ae 0f       	add	r26, r30
     680:	bf 1f       	adc	r27, r31
     682:	8c 91       	ld	r24, X
     684:	8a 30       	cpi	r24, 0x0A	; 10
     686:	20 f0       	brcs	.+8      	; 0x690 <SendHexValue+0xcc>
		{
			TransmitChar[Count] = TransmitChar[Count] + ASCII_HEX_CONVERSION;
     688:	fd 01       	movw	r30, r26
     68a:	89 5a       	subi	r24, 0xA9	; 169
     68c:	80 83       	st	Z, r24
     68e:	08 c0       	rjmp	.+16     	; 0x6a0 <SendHexValue+0xdc>
		}
		else
		{
			TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     690:	21 e0       	ldi	r18, 0x01	; 1
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	2c 0f       	add	r18, r28
     696:	3d 1f       	adc	r19, r29
     698:	e2 0f       	add	r30, r18
     69a:	f3 1f       	adc	r31, r19
     69c:	80 5d       	subi	r24, 0xD0	; 208
     69e:	80 83       	st	Z, r24
		}
		
		Count++;
     6a0:	1f 5f       	subi	r17, 0xFF	; 255

	} while (Value != 0);
     6a2:	20 2f       	mov	r18, r16
     6a4:	39 2d       	mov	r19, r9
     6a6:	4a 2d       	mov	r20, r10
     6a8:	5b 2d       	mov	r21, r11
     6aa:	6c 2d       	mov	r22, r12
     6ac:	7d 2d       	mov	r23, r13
     6ae:	8e 2d       	mov	r24, r14
     6b0:	9f 2d       	mov	r25, r15
     6b2:	a8 2d       	mov	r26, r8
     6b4:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__cmpdi2_s8>
     6b8:	09 f0       	breq	.+2      	; 0x6bc <SendHexValue+0xf8>
     6ba:	a2 cf       	rjmp	.-188    	; 0x600 <SendHexValue+0x3c>

	while (Count != 0)
     6bc:	11 23       	and	r17, r17
     6be:	99 f0       	breq	.+38     	; 0x6e6 <SendHexValue+0x122>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     6c0:	61 2f       	mov	r22, r17
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	61 50       	subi	r22, 0x01	; 1
     6c6:	71 09       	sbc	r23, r1
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	8c 0f       	add	r24, r28
     6ce:	9d 1f       	adc	r25, r29
     6d0:	68 0f       	add	r22, r24
     6d2:	79 1f       	adc	r23, r25
     6d4:	21 e0       	ldi	r18, 0x01	; 1
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	40 e0       	ldi	r20, 0x00	; 0
     6da:	50 e0       	ldi	r21, 0x00	; 0
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <UARTTransmitSync>
		
		Count--;
     6e2:	11 50       	subi	r17, 0x01	; 1
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
     6e4:	69 f7       	brne	.-38     	; 0x6c0 <SendHexValue+0xfc>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}
}
     6e6:	d3 95       	inc	r29
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	f8 94       	cli
     6ec:	de bf       	out	0x3e, r29	; 62
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	cd bf       	out	0x3d, r28	; 61
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	0f 91       	pop	r16
     6fa:	ff 90       	pop	r15
     6fc:	ef 90       	pop	r14
     6fe:	df 90       	pop	r13
     700:	cf 90       	pop	r12
     702:	bf 90       	pop	r11
     704:	af 90       	pop	r10
     706:	9f 90       	pop	r9
     708:	8f 90       	pop	r8
     70a:	08 95       	ret

0000070c <SendDecimalValue>:


void
SendDecimalValue(unsigned long long Value)
{
     70c:	2f 92       	push	r2
     70e:	3f 92       	push	r3
     710:	4f 92       	push	r4
     712:	5f 92       	push	r5
     714:	6f 92       	push	r6
     716:	7f 92       	push	r7
     718:	8f 92       	push	r8
     71a:	9f 92       	push	r9
     71c:	af 92       	push	r10
     71e:	bf 92       	push	r11
     720:	cf 92       	push	r12
     722:	df 92       	push	r13
     724:	ef 92       	push	r14
     726:	ff 92       	push	r15
     728:	0f 93       	push	r16
     72a:	1f 93       	push	r17
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	cd b7       	in	r28, 0x3d	; 61
     732:	de b7       	in	r29, 0x3e	; 62
     734:	c2 50       	subi	r28, 0x02	; 2
     736:	d1 40       	sbci	r29, 0x01	; 1
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	f8 94       	cli
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	0f be       	out	0x3f, r0	; 63
     740:	cd bf       	out	0x3d, r28	; 61
     742:	cf 5f       	subi	r28, 0xFF	; 255
     744:	de 4f       	sbci	r29, 0xFE	; 254
     746:	28 83       	st	Y, r18
     748:	c1 50       	subi	r28, 0x01	; 1
     74a:	d1 40       	sbci	r29, 0x01	; 1
     74c:	23 2e       	mov	r2, r19
     74e:	34 2e       	mov	r3, r20
     750:	45 2e       	mov	r4, r21
     752:	56 2e       	mov	r5, r22
     754:	67 2e       	mov	r6, r23
     756:	78 2e       	mov	r7, r24
     758:	89 2e       	mov	r8, r25

	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
     75a:	91 2c       	mov	r9, r1


	do
	{

		if (Value < 10)
     75c:	cf 5f       	subi	r28, 0xFF	; 255
     75e:	de 4f       	sbci	r29, 0xFE	; 254
     760:	28 81       	ld	r18, Y
     762:	c1 50       	subi	r28, 0x01	; 1
     764:	d1 40       	sbci	r29, 0x01	; 1
     766:	32 2d       	mov	r19, r2
     768:	43 2d       	mov	r20, r3
     76a:	54 2d       	mov	r21, r4
     76c:	65 2d       	mov	r22, r5
     76e:	76 2d       	mov	r23, r6
     770:	87 2d       	mov	r24, r7
     772:	98 2d       	mov	r25, r8
     774:	a9 e0       	ldi	r26, 0x09	; 9
     776:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__cmpdi2_s8>
     77a:	09 f0       	breq	.+2      	; 0x77e <SendDecimalValue+0x72>
     77c:	40 f4       	brcc	.+16     	; 0x78e <SendDecimalValue+0x82>

			Value = Value / 10;

		}
		
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     77e:	fe 01       	movw	r30, r28
     780:	e9 0d       	add	r30, r9
     782:	f1 1d       	adc	r31, r1
     784:	82 2f       	mov	r24, r18
     786:	80 5d       	subi	r24, 0xD0	; 208
     788:	81 83       	std	Z+1, r24	; 0x01
		
		Count++;
     78a:	93 94       	inc	r9
     78c:	4b c0       	rjmp	.+150    	; 0x824 <SendDecimalValue+0x118>

			Value = 0;
		}
		else
		{
			TransmitChar[Count] = Value % 10;
     78e:	0f 2e       	mov	r0, r31
     790:	fa e0       	ldi	r31, 0x0A	; 10
     792:	af 2e       	mov	r10, r31
     794:	f0 2d       	mov	r31, r0
     796:	b1 2c       	mov	r11, r1
     798:	c1 2c       	mov	r12, r1
     79a:	d1 2c       	mov	r13, r1
     79c:	e1 2c       	mov	r14, r1
     79e:	f1 2c       	mov	r15, r1
     7a0:	00 e0       	ldi	r16, 0x00	; 0
     7a2:	10 e0       	ldi	r17, 0x00	; 0
     7a4:	cf 5f       	subi	r28, 0xFF	; 255
     7a6:	de 4f       	sbci	r29, 0xFE	; 254
     7a8:	28 81       	ld	r18, Y
     7aa:	c1 50       	subi	r28, 0x01	; 1
     7ac:	d1 40       	sbci	r29, 0x01	; 1
     7ae:	32 2d       	mov	r19, r2
     7b0:	43 2d       	mov	r20, r3
     7b2:	54 2d       	mov	r21, r4
     7b4:	65 2d       	mov	r22, r5
     7b6:	76 2d       	mov	r23, r6
     7b8:	87 2d       	mov	r24, r7
     7ba:	98 2d       	mov	r25, r8
     7bc:	0e 94 b0 10 	call	0x2160	; 0x2160 <__umoddi3>
     7c0:	ce 5f       	subi	r28, 0xFE	; 254
     7c2:	de 4f       	sbci	r29, 0xFE	; 254
     7c4:	28 83       	st	Y, r18
     7c6:	c2 50       	subi	r28, 0x02	; 2
     7c8:	d1 40       	sbci	r29, 0x01	; 1

			Value = Value / 10;
     7ca:	cf 5f       	subi	r28, 0xFF	; 255
     7cc:	de 4f       	sbci	r29, 0xFE	; 254
     7ce:	28 81       	ld	r18, Y
     7d0:	c1 50       	subi	r28, 0x01	; 1
     7d2:	d1 40       	sbci	r29, 0x01	; 1
     7d4:	32 2d       	mov	r19, r2
     7d6:	43 2d       	mov	r20, r3
     7d8:	54 2d       	mov	r21, r4
     7da:	65 2d       	mov	r22, r5
     7dc:	76 2d       	mov	r23, r6
     7de:	87 2d       	mov	r24, r7
     7e0:	98 2d       	mov	r25, r8
     7e2:	0e 94 b2 10 	call	0x2164	; 0x2164 <__udivdi3>
     7e6:	cf 5f       	subi	r28, 0xFF	; 255
     7e8:	de 4f       	sbci	r29, 0xFE	; 254
     7ea:	28 83       	st	Y, r18
     7ec:	c1 50       	subi	r28, 0x01	; 1
     7ee:	d1 40       	sbci	r29, 0x01	; 1
     7f0:	23 2e       	mov	r2, r19
     7f2:	34 2e       	mov	r3, r20
     7f4:	45 2e       	mov	r4, r21
     7f6:	56 2e       	mov	r5, r22
     7f8:	67 2e       	mov	r6, r23
     7fa:	78 2e       	mov	r7, r24
     7fc:	89 2e       	mov	r8, r25

		}
		
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     7fe:	e1 e0       	ldi	r30, 0x01	; 1
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	ec 0f       	add	r30, r28
     804:	fd 1f       	adc	r31, r29
     806:	e9 0d       	add	r30, r9
     808:	f1 1d       	adc	r31, r1
     80a:	ce 5f       	subi	r28, 0xFE	; 254
     80c:	de 4f       	sbci	r29, 0xFE	; 254
     80e:	a8 81       	ld	r26, Y
     810:	c2 50       	subi	r28, 0x02	; 2
     812:	d1 40       	sbci	r29, 0x01	; 1
     814:	a0 5d       	subi	r26, 0xD0	; 208
     816:	a0 83       	st	Z, r26
		
		Count++;
     818:	93 94       	inc	r9

	} while (Value != 0);
     81a:	a0 e0       	ldi	r26, 0x00	; 0
     81c:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__cmpdi2_s8>
     820:	09 f0       	breq	.+2      	; 0x824 <SendDecimalValue+0x118>
     822:	9c cf       	rjmp	.-200    	; 0x75c <SendDecimalValue+0x50>

	while (Count != 0)
     824:	99 20       	and	r9, r9
     826:	99 f0       	breq	.+38     	; 0x84e <SendDecimalValue+0x142>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     828:	69 2d       	mov	r22, r9
     82a:	70 e0       	ldi	r23, 0x00	; 0
     82c:	61 50       	subi	r22, 0x01	; 1
     82e:	71 09       	sbc	r23, r1
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	8c 0f       	add	r24, r28
     836:	9d 1f       	adc	r25, r29
     838:	68 0f       	add	r22, r24
     83a:	79 1f       	adc	r23, r25
     83c:	21 e0       	ldi	r18, 0x01	; 1
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	40 e0       	ldi	r20, 0x00	; 0
     842:	50 e0       	ldi	r21, 0x00	; 0
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <UARTTransmitSync>
		
		Count--;
     84a:	9a 94       	dec	r9
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
     84c:	69 f7       	brne	.-38     	; 0x828 <SendDecimalValue+0x11c>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}	
}
     84e:	ce 5f       	subi	r28, 0xFE	; 254
     850:	de 4f       	sbci	r29, 0xFE	; 254
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	f8 94       	cli
     856:	de bf       	out	0x3e, r29	; 62
     858:	0f be       	out	0x3f, r0	; 63
     85a:	cd bf       	out	0x3d, r28	; 61
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	ff 90       	pop	r15
     866:	ef 90       	pop	r14
     868:	df 90       	pop	r13
     86a:	cf 90       	pop	r12
     86c:	bf 90       	pop	r11
     86e:	af 90       	pop	r10
     870:	9f 90       	pop	r9
     872:	8f 90       	pop	r8
     874:	7f 90       	pop	r7
     876:	6f 90       	pop	r6
     878:	5f 90       	pop	r5
     87a:	4f 90       	pop	r4
     87c:	3f 90       	pop	r3
     87e:	2f 90       	pop	r2
     880:	08 95       	ret

00000882 <SendDoubleValue>:

void
SendDoubleValue(double Value)
{
     882:	6f 92       	push	r6
     884:	7f 92       	push	r7
     886:	8f 92       	push	r8
     888:	9f 92       	push	r9
     88a:	af 92       	push	r10
     88c:	bf 92       	push	r11
     88e:	cf 92       	push	r12
     890:	df 92       	push	r13
     892:	ef 92       	push	r14
     894:	ff 92       	push	r15
     896:	0f 93       	push	r16
     898:	1f 93       	push	r17
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	00 d0       	rcall	.+0      	; 0x8a0 <SendDoubleValue+0x1e>
     8a0:	1f 92       	push	r1
     8a2:	cd b7       	in	r28, 0x3d	; 61
     8a4:	de b7       	in	r29, 0x3e	; 62
     8a6:	6b 01       	movw	r12, r22
     8a8:	7c 01       	movw	r14, r24
	
	long long IntPart;
	
	unsigned char FracPart;
	
	unsigned char Dot = '.';
     8aa:	8e e2       	ldi	r24, 0x2E	; 46
     8ac:	8a 83       	std	Y+2, r24	; 0x02
	
	unsigned char Minus = '-';
     8ae:	8d e2       	ldi	r24, 0x2D	; 45
     8b0:	8b 83       	std	Y+3, r24	; 0x03
	
	if (Value < 0)
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	a9 01       	movw	r20, r18
     8b8:	c7 01       	movw	r24, r14
     8ba:	b6 01       	movw	r22, r12
     8bc:	fc dd       	rcall	.-1032   	; 0x4b6 <__cmpsf2>
     8be:	88 23       	and	r24, r24
     8c0:	74 f4       	brge	.+28     	; 0x8de <SendDoubleValue+0x5c>
	{
		
		UARTTransmitSync(UART_ZERO, (PVOID) &Minus, 1);
     8c2:	21 e0       	ldi	r18, 0x01	; 1
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	40 e0       	ldi	r20, 0x00	; 0
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	be 01       	movw	r22, r28
     8cc:	6d 5f       	subi	r22, 0xFD	; 253
     8ce:	7f 4f       	sbci	r23, 0xFF	; 255
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <UARTTransmitSync>
		
		Value = Value * -1;
     8d6:	f7 fa       	bst	r15, 7
     8d8:	f0 94       	com	r15
     8da:	f7 f8       	bld	r15, 7
     8dc:	f0 94       	com	r15
	}
	
	IntPart = (long long) Value;
     8de:	c7 01       	movw	r24, r14
     8e0:	b6 01       	movw	r22, r12
     8e2:	3b d7       	rcall	.+3702   	; 0x175a <__fixsfdi>
     8e4:	62 2e       	mov	r6, r18
     8e6:	73 2e       	mov	r7, r19
     8e8:	84 2e       	mov	r8, r20
     8ea:	95 2e       	mov	r9, r21
     8ec:	a6 2e       	mov	r10, r22
     8ee:	b7 2e       	mov	r11, r23
     8f0:	08 2f       	mov	r16, r24
     8f2:	19 2f       	mov	r17, r25
		
	Value = Value - IntPart;
     8f4:	98 d7       	rcall	.+3888   	; 0x1826 <__floatdisf>
     8f6:	9b 01       	movw	r18, r22
     8f8:	ac 01       	movw	r20, r24
     8fa:	c7 01       	movw	r24, r14
     8fc:	b6 01       	movw	r22, r12
     8fe:	c8 d6       	rcall	.+3472   	; 0x1690 <__subsf3>
     900:	6b 01       	movw	r12, r22
     902:	7c 01       	movw	r14, r24
	
	SendDecimalValue(IntPart);
     904:	26 2d       	mov	r18, r6
     906:	37 2d       	mov	r19, r7
     908:	48 2d       	mov	r20, r8
     90a:	59 2d       	mov	r21, r9
     90c:	6a 2d       	mov	r22, r10
     90e:	7b 2d       	mov	r23, r11
     910:	80 2f       	mov	r24, r16
     912:	91 2f       	mov	r25, r17
     914:	fb de       	rcall	.-522    	; 0x70c <SendDecimalValue>
	
	UARTTransmitSync(UART_ZERO, (PVOID) &Dot, 1);
     916:	21 e0       	ldi	r18, 0x01	; 1
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	40 e0       	ldi	r20, 0x00	; 0
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	be 01       	movw	r22, r28
     920:	6e 5f       	subi	r22, 0xFE	; 254
     922:	7f 4f       	sbci	r23, 0xFF	; 255
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <UARTTransmitSync>
	
	while (Value != 0)
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	a9 01       	movw	r20, r18
     930:	c7 01       	movw	r24, r14
     932:	b6 01       	movw	r22, r12
     934:	c0 dd       	rcall	.-1152   	; 0x4b6 <__cmpsf2>
     936:	88 23       	and	r24, r24
     938:	59 f1       	breq	.+86     	; 0x990 <SendDoubleValue+0x10e>
	{
		FracPart = (Value * 10);
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	40 e2       	ldi	r20, 0x20	; 32
     940:	51 e4       	ldi	r21, 0x41	; 65
     942:	c7 01       	movw	r24, r14
     944:	b6 01       	movw	r22, r12
     946:	0e 94 b6 0c 	call	0x196c	; 0x196c <__mulsf3>
     94a:	6b 01       	movw	r12, r22
     94c:	7c 01       	movw	r14, r24
     94e:	3f d7       	rcall	.+3710   	; 0x17ce <__fixunssfsi>
     950:	16 2f       	mov	r17, r22
		
		Value = (Value * 10) - FracPart;
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	b4 dd       	rcall	.-1176   	; 0x4c2 <__floatsisf>
     95a:	9b 01       	movw	r18, r22
     95c:	ac 01       	movw	r20, r24
     95e:	c7 01       	movw	r24, r14
     960:	b6 01       	movw	r22, r12
     962:	96 d6       	rcall	.+3372   	; 0x1690 <__subsf3>
     964:	6b 01       	movw	r12, r22
     966:	7c 01       	movw	r14, r24
		
		FracPart = FracPart + ASCII_DECIMAL_CONVERSION;
     968:	10 5d       	subi	r17, 0xD0	; 208
     96a:	19 83       	std	Y+1, r17	; 0x01
		
		UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
     96c:	21 e0       	ldi	r18, 0x01	; 1
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	40 e0       	ldi	r20, 0x00	; 0
     972:	50 e0       	ldi	r21, 0x00	; 0
     974:	be 01       	movw	r22, r28
     976:	6f 5f       	subi	r22, 0xFF	; 255
     978:	7f 4f       	sbci	r23, 0xFF	; 255
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <UARTTransmitSync>
	
	SendDecimalValue(IntPart);
	
	UARTTransmitSync(UART_ZERO, (PVOID) &Dot, 1);
	
	while (Value != 0)
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	a9 01       	movw	r20, r18
     986:	c7 01       	movw	r24, r14
     988:	b6 01       	movw	r22, r12
     98a:	95 dd       	rcall	.-1238   	; 0x4b6 <__cmpsf2>
     98c:	81 11       	cpse	r24, r1
     98e:	d5 cf       	rjmp	.-86     	; 0x93a <SendDoubleValue+0xb8>
	
	//
	// Print 0
	//
	
	FracPart = ASCII_DECIMAL_CONVERSION;
     990:	80 e3       	ldi	r24, 0x30	; 48
     992:	89 83       	std	Y+1, r24	; 0x01
	
	UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
     994:	21 e0       	ldi	r18, 0x01	; 1
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	40 e0       	ldi	r20, 0x00	; 0
     99a:	50 e0       	ldi	r21, 0x00	; 0
     99c:	be 01       	movw	r22, r28
     99e:	6f 5f       	subi	r22, 0xFF	; 255
     9a0:	7f 4f       	sbci	r23, 0xFF	; 255
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <UARTTransmitSync>
}
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	0f 90       	pop	r0
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	bf 90       	pop	r11
     9c0:	af 90       	pop	r10
     9c2:	9f 90       	pop	r9
     9c4:	8f 90       	pop	r8
     9c6:	7f 90       	pop	r7
     9c8:	6f 90       	pop	r6
     9ca:	08 95       	ret

000009cc <SendSignedDecimalValue>:

void
SendSignedDecimalValue(long long Value)
{
     9cc:	2f 92       	push	r2
     9ce:	3f 92       	push	r3
     9d0:	4f 92       	push	r4
     9d2:	5f 92       	push	r5
     9d4:	6f 92       	push	r6
     9d6:	7f 92       	push	r7
     9d8:	8f 92       	push	r8
     9da:	9f 92       	push	r9
     9dc:	af 92       	push	r10
     9de:	bf 92       	push	r11
     9e0:	cf 92       	push	r12
     9e2:	df 92       	push	r13
     9e4:	ef 92       	push	r14
     9e6:	ff 92       	push	r15
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	cd b7       	in	r28, 0x3d	; 61
     9f2:	de b7       	in	r29, 0x3e	; 62
     9f4:	c3 50       	subi	r28, 0x03	; 3
     9f6:	d1 40       	sbci	r29, 0x01	; 1
     9f8:	0f b6       	in	r0, 0x3f	; 63
     9fa:	f8 94       	cli
     9fc:	de bf       	out	0x3e, r29	; 62
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	cd bf       	out	0x3d, r28	; 61
     a02:	ce 5f       	subi	r28, 0xFE	; 254
     a04:	de 4f       	sbci	r29, 0xFE	; 254
     a06:	28 83       	st	Y, r18
     a08:	c2 50       	subi	r28, 0x02	; 2
     a0a:	d1 40       	sbci	r29, 0x01	; 1
     a0c:	83 2e       	mov	r8, r19
     a0e:	74 2e       	mov	r7, r20
     a10:	65 2e       	mov	r6, r21
     a12:	56 2e       	mov	r5, r22
     a14:	47 2e       	mov	r4, r23
     a16:	38 2e       	mov	r3, r24
     a18:	29 2e       	mov	r2, r25
	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
	
	unsigned char Minus = '-';
     a1a:	8d e2       	ldi	r24, 0x2D	; 45
     a1c:	cf 5f       	subi	r28, 0xFF	; 255
     a1e:	de 4f       	sbci	r29, 0xFE	; 254
     a20:	88 83       	st	Y, r24
     a22:	c1 50       	subi	r28, 0x01	; 1
     a24:	d1 40       	sbci	r29, 0x01	; 1

	//
	// If the value is negative, print - sign and make the value positive.
	//

	if (Value < 0)
     a26:	83 2d       	mov	r24, r3
     a28:	a0 e0       	ldi	r26, 0x00	; 0
     a2a:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__cmpdi2_s8>
     a2e:	24 f5       	brge	.+72     	; 0xa78 <SendSignedDecimalValue+0xac>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &Minus, 1);
     a30:	21 e0       	ldi	r18, 0x01	; 1
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	40 e0       	ldi	r20, 0x00	; 0
     a36:	50 e0       	ldi	r21, 0x00	; 0
     a38:	be 01       	movw	r22, r28
     a3a:	6f 5f       	subi	r22, 0xFF	; 255
     a3c:	7e 4f       	sbci	r23, 0xFE	; 254
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <UARTTransmitSync>

		Value *= -1;
     a44:	ce 5f       	subi	r28, 0xFE	; 254
     a46:	de 4f       	sbci	r29, 0xFE	; 254
     a48:	28 81       	ld	r18, Y
     a4a:	c2 50       	subi	r28, 0x02	; 2
     a4c:	d1 40       	sbci	r29, 0x01	; 1
     a4e:	38 2d       	mov	r19, r8
     a50:	47 2d       	mov	r20, r7
     a52:	56 2d       	mov	r21, r6
     a54:	65 2d       	mov	r22, r5
     a56:	74 2d       	mov	r23, r4
     a58:	83 2d       	mov	r24, r3
     a5a:	92 2d       	mov	r25, r2
     a5c:	0e 94 0e 11 	call	0x221c	; 0x221c <__negdi2>
     a60:	ce 5f       	subi	r28, 0xFE	; 254
     a62:	de 4f       	sbci	r29, 0xFE	; 254
     a64:	28 83       	st	Y, r18
     a66:	c2 50       	subi	r28, 0x02	; 2
     a68:	d1 40       	sbci	r29, 0x01	; 1
     a6a:	83 2e       	mov	r8, r19
     a6c:	74 2e       	mov	r7, r20
     a6e:	65 2e       	mov	r6, r21
     a70:	56 2e       	mov	r5, r22
     a72:	47 2e       	mov	r4, r23
     a74:	38 2e       	mov	r3, r24
     a76:	29 2e       	mov	r2, r25
	UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
}

void
SendSignedDecimalValue(long long Value)
{
     a78:	91 2c       	mov	r9, r1
	}

	do
	{

		if (Value < 10)
     a7a:	ce 5f       	subi	r28, 0xFE	; 254
     a7c:	de 4f       	sbci	r29, 0xFE	; 254
     a7e:	28 81       	ld	r18, Y
     a80:	c2 50       	subi	r28, 0x02	; 2
     a82:	d1 40       	sbci	r29, 0x01	; 1
     a84:	38 2d       	mov	r19, r8
     a86:	47 2d       	mov	r20, r7
     a88:	56 2d       	mov	r21, r6
     a8a:	65 2d       	mov	r22, r5
     a8c:	74 2d       	mov	r23, r4
     a8e:	83 2d       	mov	r24, r3
     a90:	92 2d       	mov	r25, r2
     a92:	a9 e0       	ldi	r26, 0x09	; 9
     a94:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__cmpdi2_s8>
     a98:	09 f0       	breq	.+2      	; 0xa9c <SendSignedDecimalValue+0xd0>
     a9a:	44 f4       	brge	.+16     	; 0xaac <SendSignedDecimalValue+0xe0>

			Value = Value / 10;

		}
	
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     a9c:	fe 01       	movw	r30, r28
     a9e:	e9 0d       	add	r30, r9
     aa0:	f1 1d       	adc	r31, r1
     aa2:	82 2f       	mov	r24, r18
     aa4:	80 5d       	subi	r24, 0xD0	; 208
     aa6:	81 83       	std	Z+1, r24	; 0x01
		
		Count++;
     aa8:	93 94       	inc	r9
     aaa:	4b c0       	rjmp	.+150    	; 0xb42 <SendSignedDecimalValue+0x176>

			Value = 0;
		}
		else
		{
			TransmitChar[Count] = Value % 10;
     aac:	0f 2e       	mov	r0, r31
     aae:	fa e0       	ldi	r31, 0x0A	; 10
     ab0:	af 2e       	mov	r10, r31
     ab2:	f0 2d       	mov	r31, r0
     ab4:	b1 2c       	mov	r11, r1
     ab6:	c1 2c       	mov	r12, r1
     ab8:	d1 2c       	mov	r13, r1
     aba:	e1 2c       	mov	r14, r1
     abc:	f1 2c       	mov	r15, r1
     abe:	00 e0       	ldi	r16, 0x00	; 0
     ac0:	10 e0       	ldi	r17, 0x00	; 0
     ac2:	ce 5f       	subi	r28, 0xFE	; 254
     ac4:	de 4f       	sbci	r29, 0xFE	; 254
     ac6:	28 81       	ld	r18, Y
     ac8:	c2 50       	subi	r28, 0x02	; 2
     aca:	d1 40       	sbci	r29, 0x01	; 1
     acc:	38 2d       	mov	r19, r8
     ace:	47 2d       	mov	r20, r7
     ad0:	56 2d       	mov	r21, r6
     ad2:	65 2d       	mov	r22, r5
     ad4:	74 2d       	mov	r23, r4
     ad6:	83 2d       	mov	r24, r3
     ad8:	92 2d       	mov	r25, r2
     ada:	0e 94 85 10 	call	0x210a	; 0x210a <__moddi3>
     ade:	cd 5f       	subi	r28, 0xFD	; 253
     ae0:	de 4f       	sbci	r29, 0xFE	; 254
     ae2:	28 83       	st	Y, r18
     ae4:	c3 50       	subi	r28, 0x03	; 3
     ae6:	d1 40       	sbci	r29, 0x01	; 1

			Value = Value / 10;
     ae8:	ce 5f       	subi	r28, 0xFE	; 254
     aea:	de 4f       	sbci	r29, 0xFE	; 254
     aec:	28 81       	ld	r18, Y
     aee:	c2 50       	subi	r28, 0x02	; 2
     af0:	d1 40       	sbci	r29, 0x01	; 1
     af2:	38 2d       	mov	r19, r8
     af4:	47 2d       	mov	r20, r7
     af6:	56 2d       	mov	r21, r6
     af8:	65 2d       	mov	r22, r5
     afa:	74 2d       	mov	r23, r4
     afc:	83 2d       	mov	r24, r3
     afe:	92 2d       	mov	r25, r2
     b00:	0e 94 87 10 	call	0x210e	; 0x210e <__divdi3>
     b04:	ce 5f       	subi	r28, 0xFE	; 254
     b06:	de 4f       	sbci	r29, 0xFE	; 254
     b08:	28 83       	st	Y, r18
     b0a:	c2 50       	subi	r28, 0x02	; 2
     b0c:	d1 40       	sbci	r29, 0x01	; 1
     b0e:	83 2e       	mov	r8, r19
     b10:	74 2e       	mov	r7, r20
     b12:	65 2e       	mov	r6, r21
     b14:	56 2e       	mov	r5, r22
     b16:	47 2e       	mov	r4, r23
     b18:	38 2e       	mov	r3, r24
     b1a:	29 2e       	mov	r2, r25

		}
	
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     b1c:	e1 e0       	ldi	r30, 0x01	; 1
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	ec 0f       	add	r30, r28
     b22:	fd 1f       	adc	r31, r29
     b24:	e9 0d       	add	r30, r9
     b26:	f1 1d       	adc	r31, r1
     b28:	cd 5f       	subi	r28, 0xFD	; 253
     b2a:	de 4f       	sbci	r29, 0xFE	; 254
     b2c:	a8 81       	ld	r26, Y
     b2e:	c3 50       	subi	r28, 0x03	; 3
     b30:	d1 40       	sbci	r29, 0x01	; 1
     b32:	a0 5d       	subi	r26, 0xD0	; 208
     b34:	a0 83       	st	Z, r26
		
		Count++;
     b36:	93 94       	inc	r9

	} while (Value != 0);
     b38:	a0 e0       	ldi	r26, 0x00	; 0
     b3a:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__cmpdi2_s8>
     b3e:	09 f0       	breq	.+2      	; 0xb42 <SendSignedDecimalValue+0x176>
     b40:	9c cf       	rjmp	.-200    	; 0xa7a <SendSignedDecimalValue+0xae>

	while (Count != 0)
     b42:	99 20       	and	r9, r9
     b44:	99 f0       	breq	.+38     	; 0xb6c <SendSignedDecimalValue+0x1a0>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     b46:	69 2d       	mov	r22, r9
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	61 50       	subi	r22, 0x01	; 1
     b4c:	71 09       	sbc	r23, r1
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	8c 0f       	add	r24, r28
     b54:	9d 1f       	adc	r25, r29
     b56:	68 0f       	add	r22, r24
     b58:	79 1f       	adc	r23, r25
     b5a:	21 e0       	ldi	r18, 0x01	; 1
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <UARTTransmitSync>
		
		Count--;
     b68:	9a 94       	dec	r9
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
     b6a:	69 f7       	brne	.-38     	; 0xb46 <SendSignedDecimalValue+0x17a>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}
}
     b6c:	cd 5f       	subi	r28, 0xFD	; 253
     b6e:	de 4f       	sbci	r29, 0xFE	; 254
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	cd bf       	out	0x3d, r28	; 61
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	1f 91       	pop	r17
     b80:	0f 91       	pop	r16
     b82:	ff 90       	pop	r15
     b84:	ef 90       	pop	r14
     b86:	df 90       	pop	r13
     b88:	cf 90       	pop	r12
     b8a:	bf 90       	pop	r11
     b8c:	af 90       	pop	r10
     b8e:	9f 90       	pop	r9
     b90:	8f 90       	pop	r8
     b92:	7f 90       	pop	r7
     b94:	6f 90       	pop	r6
     b96:	5f 90       	pop	r5
     b98:	4f 90       	pop	r4
     b9a:	3f 90       	pop	r3
     b9c:	2f 90       	pop	r2
     b9e:	08 95       	ret

00000ba0 <SendTrace>:
	}
}

void
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{
     ba0:	3f 92       	push	r3
     ba2:	4f 92       	push	r4
     ba4:	5f 92       	push	r5
     ba6:	6f 92       	push	r6
     ba8:	7f 92       	push	r7
     baa:	8f 92       	push	r8
     bac:	9f 92       	push	r9
     bae:	af 92       	push	r10
     bb0:	bf 92       	push	r11
     bb2:	cf 92       	push	r12
     bb4:	df 92       	push	r13
     bb6:	ef 92       	push	r14
     bb8:	ff 92       	push	r15
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	1f 92       	push	r1
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
     bc8:	0e 89       	ldd	r16, Y+22	; 0x16
     bca:	1f 89       	ldd	r17, Y+23	; 0x17
	
	char Character;

	va_list ArgList;

	if (!gTraceInitialized || !(TraceLevel & gTraceLevel))
     bcc:	80 91 11 06 	lds	r24, 0x0611
     bd0:	88 23       	and	r24, r24
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <SendTrace+0x36>
     bd4:	1d c1       	rjmp	.+570    	; 0xe10 <SendTrace+0x270>
     bd6:	80 91 18 06 	lds	r24, 0x0618
     bda:	9d 89       	ldd	r25, Y+21	; 0x15
     bdc:	89 23       	and	r24, r25
     bde:	09 f4       	brne	.+2      	; 0xbe2 <SendTrace+0x42>
     be0:	17 c1       	rjmp	.+558    	; 0xe10 <SendTrace+0x270>
	{
		return;
	}

	va_start(ArgList, String);
     be2:	7e 01       	movw	r14, r28
     be4:	28 e1       	ldi	r18, 0x18	; 24
     be6:	e2 0e       	add	r14, r18
     be8:	f1 1c       	adc	r15, r1

	while (*String != '\0')
     bea:	f8 01       	movw	r30, r16
     bec:	20 81       	ld	r18, Z
     bee:	22 23       	and	r18, r18
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <SendTrace+0x54>
     bf2:	0e c1       	rjmp	.+540    	; 0xe10 <SendTrace+0x270>
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{

	bool IsLong = FALSE;
	
	bool IsLongLong = FALSE;
     bf4:	41 2c       	mov	r4, r1

void
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{

	bool IsLong = FALSE;
     bf6:	d1 2c       	mov	r13, r1
						IsLong = FALSE;
					}
					
					SendDoubleValue(va_arg(ArgList, double));
					
					break;
     bf8:	51 2c       	mov	r5, r1
						
						IsLong = FALSE;
					}
					else
					{
						IsLong = TRUE;
     bfa:	33 24       	eor	r3, r3
     bfc:	33 94       	inc	r3
	va_start(ArgList, String);

	while (*String != '\0')
	{

		if (*String == '%' || IsLong || IsLongLong)
     bfe:	25 32       	cpi	r18, 0x25	; 37
     c00:	29 f0       	breq	.+10     	; 0xc0c <SendTrace+0x6c>
     c02:	d1 10       	cpse	r13, r1
     c04:	05 c0       	rjmp	.+10     	; 0xc10 <SendTrace+0x70>
     c06:	41 10       	cpse	r4, r1
     c08:	03 c0       	rjmp	.+6      	; 0xc10 <SendTrace+0x70>
     c0a:	f1 c0       	rjmp	.+482    	; 0xdee <SendTrace+0x24e>
		{

			if (*String == '%')
			{
				String++;
     c0c:	0f 5f       	subi	r16, 0xFF	; 255
     c0e:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			switch (*String)
     c10:	f8 01       	movw	r30, r16
     c12:	80 81       	ld	r24, Z
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	fc 01       	movw	r30, r24
     c18:	e3 56       	subi	r30, 0x63	; 99
     c1a:	f1 09       	sbc	r31, r1
     c1c:	e6 31       	cpi	r30, 0x16	; 22
     c1e:	f1 05       	cpc	r31, r1
     c20:	08 f0       	brcs	.+2      	; 0xc24 <SendTrace+0x84>
     c22:	ee c0       	rjmp	.+476    	; 0xe00 <SendTrace+0x260>
     c24:	ea 5b       	subi	r30, 0xBA	; 186
     c26:	ff 4f       	sbci	r31, 0xFF	; 255
     c28:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <__tablejump2__>
			{
				case 'c':
				{

					Character = va_arg(ArgList, int);
     c2c:	57 01       	movw	r10, r14
     c2e:	f2 e0       	ldi	r31, 0x02	; 2
     c30:	af 0e       	add	r10, r31
     c32:	b1 1c       	adc	r11, r1
     c34:	f7 01       	movw	r30, r14
     c36:	80 81       	ld	r24, Z
     c38:	89 83       	std	Y+1, r24	; 0x01
					
					UARTTransmitSync(UART_ZERO, (PVOID) &Character, 1);
     c3a:	21 e0       	ldi	r18, 0x01	; 1
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	40 e0       	ldi	r20, 0x00	; 0
     c40:	50 e0       	ldi	r21, 0x00	; 0
     c42:	be 01       	movw	r22, r28
     c44:	6f 5f       	subi	r22, 0xFF	; 255
     c46:	7f 4f       	sbci	r23, 0xFF	; 255
     c48:	85 2d       	mov	r24, r5
     c4a:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <UARTTransmitSync>
			switch (*String)
			{
				case 'c':
				{

					Character = va_arg(ArgList, int);
     c4e:	75 01       	movw	r14, r10
					
					UARTTransmitSync(UART_ZERO, (PVOID) &Character, 1);

					break;
     c50:	d7 c0       	rjmp	.+430    	; 0xe00 <SendTrace+0x260>

				}
				case 'd':
				{

					if (IsLong)
     c52:	dd 20       	and	r13, r13
     c54:	d9 f0       	breq	.+54     	; 0xc8c <SendTrace+0xec>
					{

						SendSignedDecimalValue(va_arg(ArgList, long));
     c56:	67 01       	movw	r12, r14
     c58:	f4 e0       	ldi	r31, 0x04	; 4
     c5a:	cf 0e       	add	r12, r31
     c5c:	d1 1c       	adc	r13, r1
     c5e:	f7 01       	movw	r30, r14
     c60:	80 81       	ld	r24, Z
     c62:	91 81       	ldd	r25, Z+1	; 0x01
     c64:	a2 81       	ldd	r26, Z+2	; 0x02
     c66:	b3 81       	ldd	r27, Z+3	; 0x03
     c68:	4c 01       	movw	r8, r24
     c6a:	5d 01       	movw	r10, r26
     c6c:	bb 0c       	add	r11, r11
     c6e:	88 08       	sbc	r8, r8
     c70:	98 2c       	mov	r9, r8
     c72:	54 01       	movw	r10, r8
     c74:	28 2f       	mov	r18, r24
     c76:	39 2f       	mov	r19, r25
     c78:	4a 2f       	mov	r20, r26
     c7a:	5b 2f       	mov	r21, r27
     c7c:	68 2d       	mov	r22, r8
     c7e:	78 2d       	mov	r23, r8
     c80:	88 2d       	mov	r24, r8
     c82:	98 2d       	mov	r25, r8
     c84:	a3 de       	rcall	.-698    	; 0x9cc <SendSignedDecimalValue>
     c86:	76 01       	movw	r14, r12

						IsLong = FALSE;
     c88:	d5 2c       	mov	r13, r5
     c8a:	ba c0       	rjmp	.+372    	; 0xe00 <SendTrace+0x260>

					}
					else if (IsLongLong)
     c8c:	44 20       	and	r4, r4
     c8e:	89 f0       	breq	.+34     	; 0xcb2 <SendTrace+0x112>
					{
						SendSignedDecimalValue(va_arg(ArgList, long long));
     c90:	57 01       	movw	r10, r14
     c92:	f8 e0       	ldi	r31, 0x08	; 8
     c94:	af 0e       	add	r10, r31
     c96:	b1 1c       	adc	r11, r1
     c98:	f7 01       	movw	r30, r14
     c9a:	20 81       	ld	r18, Z
     c9c:	31 81       	ldd	r19, Z+1	; 0x01
     c9e:	42 81       	ldd	r20, Z+2	; 0x02
     ca0:	53 81       	ldd	r21, Z+3	; 0x03
     ca2:	64 81       	ldd	r22, Z+4	; 0x04
     ca4:	75 81       	ldd	r23, Z+5	; 0x05
     ca6:	86 81       	ldd	r24, Z+6	; 0x06
     ca8:	97 81       	ldd	r25, Z+7	; 0x07
     caa:	90 de       	rcall	.-736    	; 0x9cc <SendSignedDecimalValue>
     cac:	75 01       	movw	r14, r10

						IsLongLong = FALSE;
     cae:	45 2c       	mov	r4, r5
     cb0:	a7 c0       	rjmp	.+334    	; 0xe00 <SendTrace+0x260>
					}
					else
					{

						SendSignedDecimalValue(va_arg(ArgList, int));
     cb2:	57 01       	movw	r10, r14
     cb4:	f2 e0       	ldi	r31, 0x02	; 2
     cb6:	af 0e       	add	r10, r31
     cb8:	b1 1c       	adc	r11, r1
     cba:	f7 01       	movw	r30, r14
     cbc:	31 81       	ldd	r19, Z+1	; 0x01
     cbe:	20 81       	ld	r18, Z
     cc0:	93 2f       	mov	r25, r19
     cc2:	99 0f       	add	r25, r25
     cc4:	99 0b       	sbc	r25, r25
     cc6:	49 2f       	mov	r20, r25
     cc8:	59 2f       	mov	r21, r25
     cca:	69 2f       	mov	r22, r25
     ccc:	79 2f       	mov	r23, r25
     cce:	89 2f       	mov	r24, r25
     cd0:	7d de       	rcall	.-774    	; 0x9cc <SendSignedDecimalValue>
     cd2:	75 01       	movw	r14, r10
     cd4:	95 c0       	rjmp	.+298    	; 0xe00 <SendTrace+0x260>
					break;
				}
				case 'u':
				{

					if(IsLong)
     cd6:	dd 20       	and	r13, r13
     cd8:	b9 f0       	breq	.+46     	; 0xd08 <SendTrace+0x168>
					{

						SendDecimalValue(va_arg(ArgList, unsigned long));
     cda:	37 01       	movw	r6, r14
     cdc:	f4 e0       	ldi	r31, 0x04	; 4
     cde:	6f 0e       	add	r6, r31
     ce0:	71 1c       	adc	r7, r1
     ce2:	f7 01       	movw	r30, r14
     ce4:	80 81       	ld	r24, Z
     ce6:	91 81       	ldd	r25, Z+1	; 0x01
     ce8:	a2 81       	ldd	r26, Z+2	; 0x02
     cea:	b3 81       	ldd	r27, Z+3	; 0x03
     cec:	4c 01       	movw	r8, r24
     cee:	5d 01       	movw	r10, r26
     cf0:	28 2f       	mov	r18, r24
     cf2:	39 2d       	mov	r19, r9
     cf4:	4a 2d       	mov	r20, r10
     cf6:	5b 2d       	mov	r21, r11
     cf8:	65 2d       	mov	r22, r5
     cfa:	75 2d       	mov	r23, r5
     cfc:	85 2d       	mov	r24, r5
     cfe:	95 2d       	mov	r25, r5
     d00:	05 dd       	rcall	.-1526   	; 0x70c <SendDecimalValue>
     d02:	73 01       	movw	r14, r6
						
						IsLong = FALSE;
     d04:	d5 2c       	mov	r13, r5
     d06:	7c c0       	rjmp	.+248    	; 0xe00 <SendTrace+0x260>
					
					}
					else if(IsLongLong)
     d08:	44 20       	and	r4, r4
     d0a:	89 f0       	breq	.+34     	; 0xd2e <SendTrace+0x18e>
					{
						SendDecimalValue(va_arg(ArgList, unsigned long long));
     d0c:	57 01       	movw	r10, r14
     d0e:	f8 e0       	ldi	r31, 0x08	; 8
     d10:	af 0e       	add	r10, r31
     d12:	b1 1c       	adc	r11, r1
     d14:	f7 01       	movw	r30, r14
     d16:	20 81       	ld	r18, Z
     d18:	31 81       	ldd	r19, Z+1	; 0x01
     d1a:	42 81       	ldd	r20, Z+2	; 0x02
     d1c:	53 81       	ldd	r21, Z+3	; 0x03
     d1e:	64 81       	ldd	r22, Z+4	; 0x04
     d20:	75 81       	ldd	r23, Z+5	; 0x05
     d22:	86 81       	ldd	r24, Z+6	; 0x06
     d24:	97 81       	ldd	r25, Z+7	; 0x07
     d26:	f2 dc       	rcall	.-1564   	; 0x70c <SendDecimalValue>
     d28:	75 01       	movw	r14, r10
						
						IsLongLong = FALSE;
     d2a:	45 2c       	mov	r4, r5
     d2c:	69 c0       	rjmp	.+210    	; 0xe00 <SendTrace+0x260>
					}
					else
					{

						SendDecimalValue(va_arg(ArgList, unsigned int));
     d2e:	f7 01       	movw	r30, r14
     d30:	40 81       	ld	r20, Z
     d32:	51 81       	ldd	r21, Z+1	; 0x01
     d34:	f2 e0       	ldi	r31, 0x02	; 2
     d36:	ef 0e       	add	r14, r31
     d38:	f1 1c       	adc	r15, r1
     d3a:	24 2f       	mov	r18, r20
     d3c:	35 2f       	mov	r19, r21
     d3e:	45 2d       	mov	r20, r5
     d40:	55 2d       	mov	r21, r5
     d42:	65 2d       	mov	r22, r5
     d44:	75 2d       	mov	r23, r5
     d46:	85 2d       	mov	r24, r5
     d48:	95 2d       	mov	r25, r5
     d4a:	e0 dc       	rcall	.-1600   	; 0x70c <SendDecimalValue>
     d4c:	59 c0       	rjmp	.+178    	; 0xe00 <SendTrace+0x260>
					break;
				}
				case 'x':
				{

					if (IsLong)
     d4e:	dd 20       	and	r13, r13
     d50:	a9 f0       	breq	.+42     	; 0xd7c <SendTrace+0x1dc>
					{

						SendHexValue(va_arg(ArgList, unsigned long));
     d52:	f7 01       	movw	r30, r14
     d54:	80 81       	ld	r24, Z
     d56:	91 81       	ldd	r25, Z+1	; 0x01
     d58:	a2 81       	ldd	r26, Z+2	; 0x02
     d5a:	b3 81       	ldd	r27, Z+3	; 0x03
     d5c:	24 e0       	ldi	r18, 0x04	; 4
     d5e:	e2 0e       	add	r14, r18
     d60:	f1 1c       	adc	r15, r1
     d62:	3c 01       	movw	r6, r24
     d64:	4d 01       	movw	r8, r26
     d66:	28 2f       	mov	r18, r24
     d68:	37 2d       	mov	r19, r7
     d6a:	48 2d       	mov	r20, r8
     d6c:	59 2d       	mov	r21, r9
     d6e:	65 2d       	mov	r22, r5
     d70:	75 2d       	mov	r23, r5
     d72:	85 2d       	mov	r24, r5
     d74:	95 2d       	mov	r25, r5
     d76:	26 dc       	rcall	.-1972   	; 0x5c4 <SendHexValue>

						IsLong = FALSE;
     d78:	d5 2c       	mov	r13, r5
     d7a:	42 c0       	rjmp	.+132    	; 0xe00 <SendTrace+0x260>

					}
					else if (IsLongLong)
     d7c:	44 20       	and	r4, r4
     d7e:	79 f0       	breq	.+30     	; 0xd9e <SendTrace+0x1fe>
					{
						SendHexValue(va_arg(ArgList, unsigned long long));
     d80:	f7 01       	movw	r30, r14
     d82:	20 81       	ld	r18, Z
     d84:	88 e0       	ldi	r24, 0x08	; 8
     d86:	e8 0e       	add	r14, r24
     d88:	f1 1c       	adc	r15, r1
     d8a:	31 81       	ldd	r19, Z+1	; 0x01
     d8c:	42 81       	ldd	r20, Z+2	; 0x02
     d8e:	53 81       	ldd	r21, Z+3	; 0x03
     d90:	64 81       	ldd	r22, Z+4	; 0x04
     d92:	75 81       	ldd	r23, Z+5	; 0x05
     d94:	86 81       	ldd	r24, Z+6	; 0x06
     d96:	97 81       	ldd	r25, Z+7	; 0x07
     d98:	15 dc       	rcall	.-2006   	; 0x5c4 <SendHexValue>
						
						IsLongLong = FALSE;
     d9a:	45 2c       	mov	r4, r5
     d9c:	31 c0       	rjmp	.+98     	; 0xe00 <SendTrace+0x260>
					}
					else
					{

						SendHexValue(va_arg(ArgList, unsigned int));
     d9e:	f7 01       	movw	r30, r14
     da0:	40 81       	ld	r20, Z
     da2:	51 81       	ldd	r21, Z+1	; 0x01
     da4:	e2 e0       	ldi	r30, 0x02	; 2
     da6:	ee 0e       	add	r14, r30
     da8:	f1 1c       	adc	r15, r1
     daa:	24 2f       	mov	r18, r20
     dac:	35 2f       	mov	r19, r21
     dae:	45 2d       	mov	r20, r5
     db0:	55 2d       	mov	r21, r5
     db2:	65 2d       	mov	r22, r5
     db4:	75 2d       	mov	r23, r5
     db6:	85 2d       	mov	r24, r5
     db8:	95 2d       	mov	r25, r5
     dba:	04 dc       	rcall	.-2040   	; 0x5c4 <SendHexValue>
     dbc:	21 c0       	rjmp	.+66     	; 0xe00 <SendTrace+0x260>
					break;
				}
				case 'l':
				{

					if (IsLong)
     dbe:	dd 20       	and	r13, r13
     dc0:	f1 f0       	breq	.+60     	; 0xdfe <SendTrace+0x25e>
					{
						IsLongLong = TRUE;
     dc2:	43 2c       	mov	r4, r3
						
						IsLong = FALSE;
     dc4:	d5 2c       	mov	r13, r5
     dc6:	1c c0       	rjmp	.+56     	; 0xe00 <SendTrace+0x260>
					break;
				}
				case 's':
				{
					
					SendStringValue(va_arg(ArgList, char *)); 
     dc8:	f7 01       	movw	r30, r14
     dca:	80 81       	ld	r24, Z
     dcc:	91 81       	ldd	r25, Z+1	; 0x01
     dce:	f2 e0       	ldi	r31, 0x02	; 2
     dd0:	ef 0e       	add	r14, r31
     dd2:	f1 1c       	adc	r15, r1
     dd4:	e8 db       	rcall	.-2096   	; 0x5a6 <SendStringValue>

					break;
     dd6:	14 c0       	rjmp	.+40     	; 0xe00 <SendTrace+0x260>
					if(IsLong)
					{
						IsLong = FALSE;
					}
					
					SendDoubleValue(va_arg(ArgList, double));
     dd8:	f7 01       	movw	r30, r14
     dda:	60 81       	ld	r22, Z
     ddc:	71 81       	ldd	r23, Z+1	; 0x01
     dde:	82 81       	ldd	r24, Z+2	; 0x02
     de0:	93 81       	ldd	r25, Z+3	; 0x03
     de2:	24 e0       	ldi	r18, 0x04	; 4
     de4:	e2 0e       	add	r14, r18
     de6:	f1 1c       	adc	r15, r1
     de8:	4c dd       	rcall	.-1384   	; 0x882 <SendDoubleValue>
					
					break;
     dea:	d5 2c       	mov	r13, r5
     dec:	09 c0       	rjmp	.+18     	; 0xe00 <SendTrace+0x260>

		}
		else
		{

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
     dee:	21 e0       	ldi	r18, 0x01	; 1
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	40 e0       	ldi	r20, 0x00	; 0
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	b8 01       	movw	r22, r16
     df8:	85 2d       	mov	r24, r5
     dfa:	a2 d7       	rcall	.+3908   	; 0x1d40 <UARTTransmitSync>
     dfc:	01 c0       	rjmp	.+2      	; 0xe00 <SendTrace+0x260>
						
						IsLong = FALSE;
					}
					else
					{
						IsLong = TRUE;
     dfe:	d3 2c       	mov	r13, r3

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
				
		}

		String++;
     e00:	c8 01       	movw	r24, r16
     e02:	01 96       	adiw	r24, 0x01	; 1
		return;
	}

	va_start(ArgList, String);

	while (*String != '\0')
     e04:	f8 01       	movw	r30, r16
     e06:	21 81       	ldd	r18, Z+1	; 0x01
     e08:	22 23       	and	r18, r18
     e0a:	11 f0       	breq	.+4      	; 0xe10 <SendTrace+0x270>

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
				
		}

		String++;
     e0c:	8c 01       	movw	r16, r24
     e0e:	f7 ce       	rjmp	.-530    	; 0xbfe <SendTrace+0x5e>
		
	}
	
	va_end(ArgList);
	
}
     e10:	0f 90       	pop	r0
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	1f 91       	pop	r17
     e18:	0f 91       	pop	r16
     e1a:	ff 90       	pop	r15
     e1c:	ef 90       	pop	r14
     e1e:	df 90       	pop	r13
     e20:	cf 90       	pop	r12
     e22:	bf 90       	pop	r11
     e24:	af 90       	pop	r10
     e26:	9f 90       	pop	r9
     e28:	8f 90       	pop	r8
     e2a:	7f 90       	pop	r7
     e2c:	6f 90       	pop	r6
     e2e:	5f 90       	pop	r5
     e30:	4f 90       	pop	r4
     e32:	3f 90       	pop	r3
     e34:	08 95       	ret

00000e36 <Xymk5vXyfstTransmit>:
    return Status;
}

bool
Xymk5vXyfstTransmit(PVOID Buffer, unsigned long Length, MESSAGE_TYPE MessageType)
{
     e36:	2f 92       	push	r2
     e38:	3f 92       	push	r3
     e3a:	4f 92       	push	r4
     e3c:	5f 92       	push	r5
     e3e:	6f 92       	push	r6
     e40:	7f 92       	push	r7
     e42:	8f 92       	push	r8
     e44:	9f 92       	push	r9
     e46:	af 92       	push	r10
     e48:	bf 92       	push	r11
     e4a:	cf 92       	push	r12
     e4c:	df 92       	push	r13
     e4e:	ef 92       	push	r14
     e50:	ff 92       	push	r15
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	2c 97       	sbiw	r28, 0x0c	; 12
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	cd bf       	out	0x3d, r28	; 61
     e6a:	7c 01       	movw	r14, r24
     e6c:	49 87       	std	Y+9, r20	; 0x09
     e6e:	5a 87       	std	Y+10, r21	; 0x0a
     e70:	6b 87       	std	Y+11, r22	; 0x0b
     e72:	7c 87       	std	Y+12, r23	; 0x0c
     e74:	02 2f       	mov	r16, r18
	bool Status = FALSE;
	
	unsigned long AckMessage = 0;
     e76:	19 82       	std	Y+1, r1	; 0x01
     e78:	1a 82       	std	Y+2, r1	; 0x02
     e7a:	1b 82       	std	Y+3, r1	; 0x03
     e7c:	1c 82       	std	Y+4, r1	; 0x04
	
	//
	// Check if Xymk5vXyfst is initialized.
	//
	
	if (!gXymk5vXyfstInitialized)
     e7e:	80 91 12 06 	lds	r24, 0x0612
     e82:	88 23       	and	r24, r24
     e84:	89 f4       	brne	.+34     	; 0xea8 <Xymk5vXyfstTransmit+0x72>
	{
		SendTrace(ERROR_LEVEL, "Xymk5vXyfst not Initialized\r\n");
     e86:	00 d0       	rcall	.+0      	; 0xe88 <Xymk5vXyfstTransmit+0x52>
     e88:	0f 92       	push	r0
     e8a:	ed b7       	in	r30, 0x3d	; 61
     e8c:	fe b7       	in	r31, 0x3e	; 62
     e8e:	31 96       	adiw	r30, 0x01	; 1
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	80 83       	st	Z, r24
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	92 83       	std	Z+2, r25	; 0x02
     e9a:	81 83       	std	Z+1, r24	; 0x01
     e9c:	81 de       	rcall	.-766    	; 0xba0 <SendTrace>
     e9e:	10 e0       	ldi	r17, 0x00	; 0
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	41 c1       	rjmp	.+642    	; 0x112a <Xymk5vXyfstTransmit+0x2f4>
	
	//
	// Now disable our receiver UART
	//
	
	Status = UARTEnableDisableReceiver(UART_ONE, DISABLE);
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	c2 d5       	rcall	.+2948   	; 0x1a32 <UARTEnableDisableReceiver>
     eae:	18 2f       	mov	r17, r24
	
	if (!Status)
     eb0:	88 23       	and	r24, r24
     eb2:	81 f4       	brne	.+32     	; 0xed4 <Xymk5vXyfstTransmit+0x9e>
	{
		SendTrace(ERROR_LEVEL, "Unable to disable receiver\r\n");
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <Xymk5vXyfstTransmit+0x80>
     eb6:	0f 92       	push	r0
     eb8:	ed b7       	in	r30, 0x3d	; 61
     eba:	fe b7       	in	r31, 0x3e	; 62
     ebc:	31 96       	adiw	r30, 0x01	; 1
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	80 83       	st	Z, r24
     ec2:	8e e1       	ldi	r24, 0x1E	; 30
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	92 83       	std	Z+2, r25	; 0x02
     ec8:	81 83       	std	Z+1, r24	; 0x01
     eca:	6a de       	rcall	.-812    	; 0xba0 <SendTrace>
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	2b c1       	rjmp	.+598    	; 0x112a <Xymk5vXyfstTransmit+0x2f4>
		
		goto Exit;
	}
	
	if (MessageType == ACK_MESSAGE)
     ed4:	00 23       	and	r16, r16
     ed6:	09 f0       	breq	.+2      	; 0xeda <Xymk5vXyfstTransmit+0xa4>
     ed8:	45 c0       	rjmp	.+138    	; 0xf64 <Xymk5vXyfstTransmit+0x12e>
	{
		SendTrace(INFO_LEVEL, "Transmitting Ack Message\r\n");
     eda:	00 d0       	rcall	.+0      	; 0xedc <Xymk5vXyfstTransmit+0xa6>
     edc:	0f 92       	push	r0
     ede:	ed b7       	in	r30, 0x3d	; 61
     ee0:	fe b7       	in	r31, 0x3e	; 62
     ee2:	31 96       	adiw	r30, 0x01	; 1
     ee4:	84 e0       	ldi	r24, 0x04	; 4
     ee6:	80 83       	st	Z, r24
     ee8:	8b e3       	ldi	r24, 0x3B	; 59
     eea:	91 e0       	ldi	r25, 0x01	; 1
     eec:	92 83       	std	Z+2, r25	; 0x02
     eee:	81 83       	std	Z+1, r24	; 0x01
     ef0:	57 de       	rcall	.-850    	; 0xba0 <SendTrace>
		
		//
		// First transmit the destination address
		//
		
		Status = UARTTransmitAddress(UART_ONE, gDestAddress);
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	60 91 1f 06 	lds	r22, 0x061F
     efe:	00 d7       	rcall	.+3584   	; 0x1d00 <UARTTransmitAddress>
     f00:	16 2f       	mov	r17, r22
		
		if (!Status)
     f02:	66 23       	and	r22, r22
     f04:	81 f4       	brne	.+32     	; 0xf26 <Xymk5vXyfstTransmit+0xf0>
		{
			SendTrace(ERROR_LEVEL, "Failed to transmit Dest Address\r\n");
     f06:	00 d0       	rcall	.+0      	; 0xf08 <Xymk5vXyfstTransmit+0xd2>
     f08:	0f 92       	push	r0
     f0a:	ed b7       	in	r30, 0x3d	; 61
     f0c:	fe b7       	in	r31, 0x3e	; 62
     f0e:	31 96       	adiw	r30, 0x01	; 1
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	80 83       	st	Z, r24
     f14:	86 e5       	ldi	r24, 0x56	; 86
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	92 83       	std	Z+2, r25	; 0x02
     f1a:	81 83       	std	Z+1, r24	; 0x01
     f1c:	41 de       	rcall	.-894    	; 0xba0 <SendTrace>
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	02 c1       	rjmp	.+516    	; 0x112a <Xymk5vXyfstTransmit+0x2f4>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f26:	80 ed       	ldi	r24, 0xD0	; 208
     f28:	97 e0       	ldi	r25, 0x07	; 7
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	f1 f7       	brne	.-4      	; 0xf2a <Xymk5vXyfstTransmit+0xf4>
		
		//
		// Now transmit the buffer
		//
		
		Status = UARTTransmitSync(UART_ONE, Buffer, Length);
     f2e:	29 85       	ldd	r18, Y+9	; 0x09
     f30:	3a 85       	ldd	r19, Y+10	; 0x0a
     f32:	4b 85       	ldd	r20, Y+11	; 0x0b
     f34:	5c 85       	ldd	r21, Y+12	; 0x0c
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	b7 01       	movw	r22, r14
     f3a:	02 d7       	rcall	.+3588   	; 0x1d40 <UARTTransmitSync>
     f3c:	16 2f       	mov	r17, r22
		
		if (!Status)
     f3e:	66 23       	and	r22, r22
     f40:	09 f0       	breq	.+2      	; 0xf44 <Xymk5vXyfstTransmit+0x10e>
     f42:	f3 c0       	rjmp	.+486    	; 0x112a <Xymk5vXyfstTransmit+0x2f4>
		{
			SendTrace(ERROR_LEVEL, "Failed to transmit Buffer\r\n");
     f44:	00 d0       	rcall	.+0      	; 0xf46 <Xymk5vXyfstTransmit+0x110>
     f46:	0f 92       	push	r0
     f48:	ed b7       	in	r30, 0x3d	; 61
     f4a:	fe b7       	in	r31, 0x3e	; 62
     f4c:	31 96       	adiw	r30, 0x01	; 1
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	80 83       	st	Z, r24
     f52:	88 e7       	ldi	r24, 0x78	; 120
     f54:	91 e0       	ldi	r25, 0x01	; 1
     f56:	92 83       	std	Z+2, r25	; 0x02
     f58:	81 83       	std	Z+1, r24	; 0x01
     f5a:	22 de       	rcall	.-956    	; 0xba0 <SendTrace>
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	e3 c0       	rjmp	.+454    	; 0x112a <Xymk5vXyfstTransmit+0x2f4>
	else
	{
	
		do
		{
			SendTrace(INFO_LEVEL, "Transmitting General Message\r\n");
     f64:	04 e0       	ldi	r16, 0x04	; 4
     f66:	0f 2e       	mov	r0, r31
     f68:	f4 e9       	ldi	r31, 0x94	; 148
     f6a:	6f 2e       	mov	r6, r31
     f6c:	f1 e0       	ldi	r31, 0x01	; 1
     f6e:	7f 2e       	mov	r7, r31
     f70:	f0 2d       	mov	r31, r0
     f72:	0f 2e       	mov	r0, r31
     f74:	f0 ed       	ldi	r31, 0xD0	; 208
     f76:	4f 2e       	mov	r4, r31
     f78:	f7 e0       	ldi	r31, 0x07	; 7
     f7a:	5f 2e       	mov	r5, r31
     f7c:	f0 2d       	mov	r31, r0
	
			//
			// Now transmit the Message ID
			//
	
			Status = UARTTransmitSync(UART_ONE, &gMessageId, sizeof(unsigned long));
     f7e:	0f 2e       	mov	r0, r31
     f80:	fa e1       	ldi	r31, 0x1A	; 26
     f82:	cf 2e       	mov	r12, r31
     f84:	f6 e0       	ldi	r31, 0x06	; 6
     f86:	df 2e       	mov	r13, r31
     f88:	f0 2d       	mov	r31, r0

			//
			// Now transmit the length of the message
			//
	
			Status = UARTTransmitSync(UART_ONE, &Length, sizeof(unsigned long));
     f8a:	0f 2e       	mov	r0, r31
     f8c:	f9 e0       	ldi	r31, 0x09	; 9
     f8e:	af 2e       	mov	r10, r31
     f90:	bb 24       	eor	r11, r11
     f92:	f0 2d       	mov	r31, r0
     f94:	ac 0e       	add	r10, r28
     f96:	bd 1e       	adc	r11, r29
			// Now receive the acknowledgment
			//
		
			AckMessageLength = sizeof(unsigned long);
		
			Status = Xymk5vXyfstReceive(&AckMessage, &AckMessageLength, ACK_MESSAGE);
     f98:	0f 2e       	mov	r0, r31
     f9a:	f5 e0       	ldi	r31, 0x05	; 5
     f9c:	2f 2e       	mov	r2, r31
     f9e:	33 24       	eor	r3, r3
     fa0:	f0 2d       	mov	r31, r0
     fa2:	2c 0e       	add	r2, r28
     fa4:	3d 1e       	adc	r3, r29
     fa6:	4e 01       	movw	r8, r28
     fa8:	08 94       	sec
     faa:	81 1c       	adc	r8, r1
     fac:	91 1c       	adc	r9, r1
	else
	{
	
		do
		{
			SendTrace(INFO_LEVEL, "Transmitting General Message\r\n");
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <Xymk5vXyfstTransmit+0x17a>
     fb0:	0f 92       	push	r0
     fb2:	ed b7       	in	r30, 0x3d	; 61
     fb4:	fe b7       	in	r31, 0x3e	; 62
     fb6:	31 96       	adiw	r30, 0x01	; 1
     fb8:	00 83       	st	Z, r16
     fba:	72 82       	std	Z+2, r7	; 0x02
     fbc:	61 82       	std	Z+1, r6	; 0x01
     fbe:	f0 dd       	rcall	.-1056   	; 0xba0 <SendTrace>
			
			//
			// First transmit the destination address
			//
	
			Status = UARTTransmitAddress(UART_ONE, gDestAddress);
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	60 91 1f 06 	lds	r22, 0x061F
     fcc:	99 d6       	rcall	.+3378   	; 0x1d00 <UARTTransmitAddress>
     fce:	16 2f       	mov	r17, r22
	
			if (!Status)
     fd0:	66 23       	and	r22, r22
     fd2:	81 f4       	brne	.+32     	; 0xff4 <Xymk5vXyfstTransmit+0x1be>
			{
				SendTrace(ERROR_LEVEL, "Failed to transmit Dest Address\r\n");
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <Xymk5vXyfstTransmit+0x1a0>
     fd6:	0f 92       	push	r0
     fd8:	ed b7       	in	r30, 0x3d	; 61
     fda:	fe b7       	in	r31, 0x3e	; 62
     fdc:	31 96       	adiw	r30, 0x01	; 1
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	80 83       	st	Z, r24
     fe2:	86 e5       	ldi	r24, 0x56	; 86
     fe4:	91 e0       	ldi	r25, 0x01	; 1
     fe6:	92 83       	std	Z+2, r25	; 0x02
     fe8:	81 83       	std	Z+1, r24	; 0x01
     fea:	da dd       	rcall	.-1100   	; 0xba0 <SendTrace>
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	9b c0       	rjmp	.+310    	; 0x112a <Xymk5vXyfstTransmit+0x2f4>
     ff4:	c2 01       	movw	r24, r4
     ff6:	01 97       	sbiw	r24, 0x01	; 1
     ff8:	f1 f7       	brne	.-4      	; 0xff6 <Xymk5vXyfstTransmit+0x1c0>
	
			//
			// Now transmit the Message ID
			//
	
			Status = UARTTransmitSync(UART_ONE, &gMessageId, sizeof(unsigned long));
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	b6 01       	movw	r22, r12
     ffe:	24 e0       	ldi	r18, 0x04	; 4
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	40 e0       	ldi	r20, 0x00	; 0
    1004:	50 e0       	ldi	r21, 0x00	; 0
    1006:	9c d6       	rcall	.+3384   	; 0x1d40 <UARTTransmitSync>
    1008:	16 2f       	mov	r17, r22
	
			if (!Status)
    100a:	66 23       	and	r22, r22
    100c:	81 f4       	brne	.+32     	; 0x102e <Xymk5vXyfstTransmit+0x1f8>
			{
				SendTrace(ERROR_LEVEL, "Failed to transmit Message ID\r\n");
    100e:	00 d0       	rcall	.+0      	; 0x1010 <Xymk5vXyfstTransmit+0x1da>
    1010:	0f 92       	push	r0
    1012:	ed b7       	in	r30, 0x3d	; 61
    1014:	fe b7       	in	r31, 0x3e	; 62
    1016:	31 96       	adiw	r30, 0x01	; 1
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	80 83       	st	Z, r24
    101c:	83 eb       	ldi	r24, 0xB3	; 179
    101e:	91 e0       	ldi	r25, 0x01	; 1
    1020:	92 83       	std	Z+2, r25	; 0x02
    1022:	81 83       	std	Z+1, r24	; 0x01
    1024:	bd dd       	rcall	.-1158   	; 0xba0 <SendTrace>
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	7e c0       	rjmp	.+252    	; 0x112a <Xymk5vXyfstTransmit+0x2f4>

			//
			// Now transmit the length of the message
			//
	
			Status = UARTTransmitSync(UART_ONE, &Length, sizeof(unsigned long));
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	b5 01       	movw	r22, r10
    1032:	24 e0       	ldi	r18, 0x04	; 4
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	40 e0       	ldi	r20, 0x00	; 0
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	82 d6       	rcall	.+3332   	; 0x1d40 <UARTTransmitSync>
    103c:	16 2f       	mov	r17, r22
	
			if (!Status)
    103e:	66 23       	and	r22, r22
    1040:	81 f4       	brne	.+32     	; 0x1062 <Xymk5vXyfstTransmit+0x22c>
			{
				SendTrace(ERROR_LEVEL, "Failed to transmit Length\r\n");
    1042:	00 d0       	rcall	.+0      	; 0x1044 <Xymk5vXyfstTransmit+0x20e>
    1044:	0f 92       	push	r0
    1046:	ed b7       	in	r30, 0x3d	; 61
    1048:	fe b7       	in	r31, 0x3e	; 62
    104a:	31 96       	adiw	r30, 0x01	; 1
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	80 83       	st	Z, r24
    1050:	83 ed       	ldi	r24, 0xD3	; 211
    1052:	91 e0       	ldi	r25, 0x01	; 1
    1054:	92 83       	std	Z+2, r25	; 0x02
    1056:	81 83       	std	Z+1, r24	; 0x01
    1058:	a3 dd       	rcall	.-1210   	; 0xba0 <SendTrace>
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	64 c0       	rjmp	.+200    	; 0x112a <Xymk5vXyfstTransmit+0x2f4>
	
			//
			// Now transmit the buffer
			//
	
			Status = UARTTransmitSync(UART_ONE, Buffer, Length);
    1062:	29 85       	ldd	r18, Y+9	; 0x09
    1064:	3a 85       	ldd	r19, Y+10	; 0x0a
    1066:	4b 85       	ldd	r20, Y+11	; 0x0b
    1068:	5c 85       	ldd	r21, Y+12	; 0x0c
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	b7 01       	movw	r22, r14
    106e:	68 d6       	rcall	.+3280   	; 0x1d40 <UARTTransmitSync>
    1070:	16 2f       	mov	r17, r22
	
			if (!Status)
    1072:	66 23       	and	r22, r22
    1074:	81 f4       	brne	.+32     	; 0x1096 <Xymk5vXyfstTransmit+0x260>
			{
				SendTrace(ERROR_LEVEL, "Failed to transmit Buffer\r\n");
    1076:	00 d0       	rcall	.+0      	; 0x1078 <Xymk5vXyfstTransmit+0x242>
    1078:	0f 92       	push	r0
    107a:	ed b7       	in	r30, 0x3d	; 61
    107c:	fe b7       	in	r31, 0x3e	; 62
    107e:	31 96       	adiw	r30, 0x01	; 1
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	80 83       	st	Z, r24
    1084:	88 e7       	ldi	r24, 0x78	; 120
    1086:	91 e0       	ldi	r25, 0x01	; 1
    1088:	92 83       	std	Z+2, r25	; 0x02
    108a:	81 83       	std	Z+1, r24	; 0x01
    108c:	89 dd       	rcall	.-1262   	; 0xba0 <SendTrace>
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	4a c0       	rjmp	.+148    	; 0x112a <Xymk5vXyfstTransmit+0x2f4>
		
			//
			// Now receive the acknowledgment
			//
		
			AckMessageLength = sizeof(unsigned long);
    1096:	84 e0       	ldi	r24, 0x04	; 4
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	a0 e0       	ldi	r26, 0x00	; 0
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	8d 83       	std	Y+5, r24	; 0x05
    10a0:	9e 83       	std	Y+6, r25	; 0x06
    10a2:	af 83       	std	Y+7, r26	; 0x07
    10a4:	b8 87       	std	Y+8, r27	; 0x08
		
			Status = Xymk5vXyfstReceive(&AckMessage, &AckMessageLength, ACK_MESSAGE);
    10a6:	c4 01       	movw	r24, r8
    10a8:	b1 01       	movw	r22, r2
    10aa:	40 e0       	ldi	r20, 0x00	; 0
    10ac:	5b d0       	rcall	.+182    	; 0x1164 <Xymk5vXyfstReceive>
    10ae:	18 2f       	mov	r17, r24
		
			if (!Status)
    10b0:	88 23       	and	r24, r24
    10b2:	79 f4       	brne	.+30     	; 0x10d2 <Xymk5vXyfstTransmit+0x29c>
			{
				SendTrace (INFO_LEVEL, "Failed to receive Ack Message\r\n");
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <Xymk5vXyfstTransmit+0x280>
    10b6:	0f 92       	push	r0
    10b8:	ed b7       	in	r30, 0x3d	; 61
    10ba:	fe b7       	in	r31, 0x3e	; 62
    10bc:	31 96       	adiw	r30, 0x01	; 1
    10be:	00 83       	st	Z, r16
    10c0:	8f ee       	ldi	r24, 0xEF	; 239
    10c2:	91 e0       	ldi	r25, 0x01	; 1
    10c4:	92 83       	std	Z+2, r25	; 0x02
    10c6:	81 83       	std	Z+1, r24	; 0x01
    10c8:	6b dd       	rcall	.-1322   	; 0xba0 <SendTrace>
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	6e cf       	rjmp	.-292    	; 0xfae <Xymk5vXyfstTransmit+0x178>
			}
			else if ((AckMessage == (gMessageId + 1)) || !gXymk5vXyfstAutoRetransmit)
    10d2:	80 91 1a 06 	lds	r24, 0x061A
    10d6:	90 91 1b 06 	lds	r25, 0x061B
    10da:	a0 91 1c 06 	lds	r26, 0x061C
    10de:	b0 91 1d 06 	lds	r27, 0x061D
    10e2:	01 96       	adiw	r24, 0x01	; 1
    10e4:	a1 1d       	adc	r26, r1
    10e6:	b1 1d       	adc	r27, r1
    10e8:	29 81       	ldd	r18, Y+1	; 0x01
    10ea:	3a 81       	ldd	r19, Y+2	; 0x02
    10ec:	4b 81       	ldd	r20, Y+3	; 0x03
    10ee:	5c 81       	ldd	r21, Y+4	; 0x04
    10f0:	82 17       	cp	r24, r18
    10f2:	93 07       	cpc	r25, r19
    10f4:	a4 07       	cpc	r26, r20
    10f6:	b5 07       	cpc	r27, r21
    10f8:	29 f0       	breq	.+10     	; 0x1104 <Xymk5vXyfstTransmit+0x2ce>
    10fa:	80 91 19 06 	lds	r24, 0x0619
    10fe:	88 23       	and	r24, r24
    1100:	09 f0       	breq	.+2      	; 0x1104 <Xymk5vXyfstTransmit+0x2ce>
    1102:	55 cf       	rjmp	.-342    	; 0xfae <Xymk5vXyfstTransmit+0x178>
				IsAckReceived = 1;
			}
		
		} while(IsAckReceived == 0);
		
		gMessageId++;
    1104:	80 91 1a 06 	lds	r24, 0x061A
    1108:	90 91 1b 06 	lds	r25, 0x061B
    110c:	a0 91 1c 06 	lds	r26, 0x061C
    1110:	b0 91 1d 06 	lds	r27, 0x061D
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	a1 1d       	adc	r26, r1
    1118:	b1 1d       	adc	r27, r1
    111a:	80 93 1a 06 	sts	0x061A, r24
    111e:	90 93 1b 06 	sts	0x061B, r25
    1122:	a0 93 1c 06 	sts	0x061C, r26
    1126:	b0 93 1d 06 	sts	0x061D, r27

	//
	// Now enable our receiver after transmit is over
	//
	
	UARTEnableDisableReceiver(UART_ONE, ENABLE);
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	61 e0       	ldi	r22, 0x01	; 1
    112e:	81 d4       	rcall	.+2306   	; 0x1a32 <UARTEnableDisableReceiver>

	return Status;	
}
    1130:	81 2f       	mov	r24, r17
    1132:	2c 96       	adiw	r28, 0x0c	; 12
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	ff 90       	pop	r15
    1148:	ef 90       	pop	r14
    114a:	df 90       	pop	r13
    114c:	cf 90       	pop	r12
    114e:	bf 90       	pop	r11
    1150:	af 90       	pop	r10
    1152:	9f 90       	pop	r9
    1154:	8f 90       	pop	r8
    1156:	7f 90       	pop	r7
    1158:	6f 90       	pop	r6
    115a:	5f 90       	pop	r5
    115c:	4f 90       	pop	r4
    115e:	3f 90       	pop	r3
    1160:	2f 90       	pop	r2
    1162:	08 95       	ret

00001164 <Xymk5vXyfstReceive>:

bool
Xymk5vXyfstReceive(PVOID Buffer, unsigned long *Length, MESSAGE_TYPE MessageType)
{
    1164:	6f 92       	push	r6
    1166:	7f 92       	push	r7
    1168:	8f 92       	push	r8
    116a:	9f 92       	push	r9
    116c:	af 92       	push	r10
    116e:	bf 92       	push	r11
    1170:	cf 92       	push	r12
    1172:	df 92       	push	r13
    1174:	ef 92       	push	r14
    1176:	ff 92       	push	r15
    1178:	0f 93       	push	r16
    117a:	1f 93       	push	r17
    117c:	df 93       	push	r29
    117e:	cf 93       	push	r28
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	29 97       	sbiw	r28, 0x09	; 9
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	3c 01       	movw	r6, r24
    1192:	6b 01       	movw	r12, r22
    1194:	04 2f       	mov	r16, r20
	
	//
	// Enable Receiver UART
	//
	
	Status = UARTEnableDisableReceiver(UART_ONE, ENABLE);
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	61 e0       	ldi	r22, 0x01	; 1
    119a:	4b d4       	rcall	.+2198   	; 0x1a32 <UARTEnableDisableReceiver>
    119c:	18 2f       	mov	r17, r24
	
	if (!Status)
    119e:	88 23       	and	r24, r24
    11a0:	81 f4       	brne	.+32     	; 0x11c2 <Xymk5vXyfstReceive+0x5e>
	{
		SendTrace(ERROR_LEVEL, "Unable to enable receiver\r\n");
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <Xymk5vXyfstReceive+0x40>
    11a4:	0f 92       	push	r0
    11a6:	ed b7       	in	r30, 0x3d	; 61
    11a8:	fe b7       	in	r31, 0x3e	; 62
    11aa:	31 96       	adiw	r30, 0x01	; 1
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	80 83       	st	Z, r24
    11b0:	8f e0       	ldi	r24, 0x0F	; 15
    11b2:	92 e0       	ldi	r25, 0x02	; 2
    11b4:	92 83       	std	Z+2, r25	; 0x02
    11b6:	81 83       	std	Z+1, r24	; 0x01
    11b8:	f3 dc       	rcall	.-1562   	; 0xba0 <SendTrace>
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	c9 c1       	rjmp	.+914    	; 0x1554 <Xymk5vXyfstReceive+0x3f0>
		
		goto Exit;
	}
		
	if (MessageType == GENERAL_MESSAGE)
    11c2:	01 30       	cpi	r16, 0x01	; 1
    11c4:	09 f0       	breq	.+2      	; 0x11c8 <Xymk5vXyfstReceive+0x64>
    11c6:	2c c1       	rjmp	.+600    	; 0x1420 <Xymk5vXyfstReceive+0x2bc>
	{	
		SendTrace(INFO_LEVEL, "General Message - Waiting for Address\r\n");
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <Xymk5vXyfstReceive+0x66>
    11ca:	0f 92       	push	r0
    11cc:	ed b7       	in	r30, 0x3d	; 61
    11ce:	fe b7       	in	r31, 0x3e	; 62
    11d0:	31 96       	adiw	r30, 0x01	; 1
    11d2:	84 e0       	ldi	r24, 0x04	; 4
    11d4:	80 83       	st	Z, r24
    11d6:	8b e2       	ldi	r24, 0x2B	; 43
    11d8:	92 e0       	ldi	r25, 0x02	; 2
    11da:	92 83       	std	Z+2, r25	; 0x02
    11dc:	81 83       	std	Z+1, r24	; 0x01
    11de:	e0 dc       	rcall	.-1600   	; 0xba0 <SendTrace>
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
			//
			// First receive the destination address and match it with
			// My address
			//
			
			Len = UARTReceiveSync(UART_ONE, &DestAddress, sizeof(unsigned char));
    11e6:	7e 01       	movw	r14, r28
    11e8:	08 94       	sec
    11ea:	e1 1c       	adc	r14, r1
    11ec:	f1 1c       	adc	r15, r1
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	b7 01       	movw	r22, r14
    11f2:	21 e0       	ldi	r18, 0x01	; 1
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	40 e0       	ldi	r20, 0x00	; 0
    11f8:	50 e0       	ldi	r21, 0x00	; 0
    11fa:	91 d6       	rcall	.+3362   	; 0x1f1e <UARTReceiveSync>
			
			if (Len != sizeof(unsigned char))
    11fc:	61 30       	cpi	r22, 0x01	; 1
    11fe:	71 05       	cpc	r23, r1
    1200:	81 05       	cpc	r24, r1
    1202:	91 05       	cpc	r25, r1
    1204:	89 f0       	breq	.+34     	; 0x1228 <Xymk5vXyfstReceive+0xc4>
			{
				SendTrace(ERROR_LEVEL, "Invalid Destination Address.\r\n");
    1206:	00 d0       	rcall	.+0      	; 0x1208 <Xymk5vXyfstReceive+0xa4>
    1208:	0f 92       	push	r0
    120a:	ed b7       	in	r30, 0x3d	; 61
    120c:	fe b7       	in	r31, 0x3e	; 62
    120e:	31 96       	adiw	r30, 0x01	; 1
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	80 83       	st	Z, r24
    1214:	83 e5       	ldi	r24, 0x53	; 83
    1216:	92 e0       	ldi	r25, 0x02	; 2
    1218:	92 83       	std	Z+2, r25	; 0x02
    121a:	81 83       	std	Z+1, r24	; 0x01
    121c:	c1 dc       	rcall	.-1662   	; 0xba0 <SendTrace>
    121e:	10 e0       	ldi	r17, 0x00	; 0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	96 c1       	rjmp	.+812    	; 0x1554 <Xymk5vXyfstReceive+0x3f0>
				Status = FALSE;
				
				goto Exit;
			}
			
		} while(DestAddress != gMyAddress);
    1228:	99 81       	ldd	r25, Y+1	; 0x01
    122a:	80 91 1e 06 	lds	r24, 0x061E
    122e:	98 17       	cp	r25, r24
    1230:	f1 f6       	brne	.-68     	; 0x11ee <Xymk5vXyfstReceive+0x8a>
		
		SendTrace(INFO_LEVEL, "General Message - Receiving New Message\r\n");
    1232:	00 d0       	rcall	.+0      	; 0x1234 <Xymk5vXyfstReceive+0xd0>
    1234:	0f 92       	push	r0
    1236:	ed b7       	in	r30, 0x3d	; 61
    1238:	fe b7       	in	r31, 0x3e	; 62
    123a:	31 96       	adiw	r30, 0x01	; 1
    123c:	84 e0       	ldi	r24, 0x04	; 4
    123e:	80 83       	st	Z, r24
    1240:	82 e7       	ldi	r24, 0x72	; 114
    1242:	92 e0       	ldi	r25, 0x02	; 2
    1244:	92 83       	std	Z+2, r25	; 0x02
    1246:	81 83       	std	Z+1, r24	; 0x01
    1248:	ab dc       	rcall	.-1706   	; 0xba0 <SendTrace>
		
		//
		// Disable MPCM Mode
		//
		
		UARTEnableDisableMPCM(UART_ONE, DISABLE);	
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	60 e0       	ldi	r22, 0x00	; 0
    1254:	2b d4       	rcall	.+2134   	; 0x1aac <UARTEnableDisableMPCM>
		//
		// Get Message ID
		//
	
		Len = UARTReceiveASync(UART_ONE, &MessageId, sizeof(unsigned long), RECEIVE_TIMEOUT);
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	be 01       	movw	r22, r28
    125a:	6e 5f       	subi	r22, 0xFE	; 254
    125c:	7f 4f       	sbci	r23, 0xFF	; 255
    125e:	24 e0       	ldi	r18, 0x04	; 4
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	40 e0       	ldi	r20, 0x00	; 0
    1264:	50 e0       	ldi	r21, 0x00	; 0
    1266:	0a e0       	ldi	r16, 0x0A	; 10
    1268:	56 d6       	rcall	.+3244   	; 0x1f16 <UARTReceiveASync>
	
		if (Len != sizeof(unsigned long))
    126a:	64 30       	cpi	r22, 0x04	; 4
    126c:	71 05       	cpc	r23, r1
    126e:	81 05       	cpc	r24, r1
    1270:	91 05       	cpc	r25, r1
    1272:	89 f0       	breq	.+34     	; 0x1296 <Xymk5vXyfstReceive+0x132>
		{
			SendTrace(ERROR_LEVEL, "Failed to receive Message Id.\r\n");
    1274:	00 d0       	rcall	.+0      	; 0x1276 <Xymk5vXyfstReceive+0x112>
    1276:	0f 92       	push	r0
    1278:	ed b7       	in	r30, 0x3d	; 61
    127a:	fe b7       	in	r31, 0x3e	; 62
    127c:	31 96       	adiw	r30, 0x01	; 1
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	80 83       	st	Z, r24
    1282:	8c e9       	ldi	r24, 0x9C	; 156
    1284:	92 e0       	ldi	r25, 0x02	; 2
    1286:	92 83       	std	Z+2, r25	; 0x02
    1288:	81 83       	std	Z+1, r24	; 0x01
    128a:	8a dc       	rcall	.-1772   	; 0xba0 <SendTrace>
    128c:	10 e0       	ldi	r17, 0x00	; 0
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	5f c1       	rjmp	.+702    	; 0x1554 <Xymk5vXyfstReceive+0x3f0>
			Status = FALSE;
		
			goto Exit;
		}
		
		SendTrace(INFO_LEVEL, "Message Id = %d\r\n", MessageId);
    1296:	8d b7       	in	r24, 0x3d	; 61
    1298:	9e b7       	in	r25, 0x3e	; 62
    129a:	07 97       	sbiw	r24, 0x07	; 7
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	9e bf       	out	0x3e, r25	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	8d bf       	out	0x3d, r24	; 61
    12a6:	ed b7       	in	r30, 0x3d	; 61
    12a8:	fe b7       	in	r31, 0x3e	; 62
    12aa:	31 96       	adiw	r30, 0x01	; 1
    12ac:	84 e0       	ldi	r24, 0x04	; 4
    12ae:	80 83       	st	Z, r24
    12b0:	8c eb       	ldi	r24, 0xBC	; 188
    12b2:	92 e0       	ldi	r25, 0x02	; 2
    12b4:	92 83       	std	Z+2, r25	; 0x02
    12b6:	81 83       	std	Z+1, r24	; 0x01
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	9b 81       	ldd	r25, Y+3	; 0x03
    12bc:	ac 81       	ldd	r26, Y+4	; 0x04
    12be:	bd 81       	ldd	r27, Y+5	; 0x05
    12c0:	83 83       	std	Z+3, r24	; 0x03
    12c2:	94 83       	std	Z+4, r25	; 0x04
    12c4:	a5 83       	std	Z+5, r26	; 0x05
    12c6:	b6 83       	std	Z+6, r27	; 0x06
    12c8:	6b dc       	rcall	.-1834   	; 0xba0 <SendTrace>
		
		//
		// Get Message Length
		//
		
		Len = UARTReceiveASync(UART_ONE, &MessageLength, sizeof(unsigned long), RECEIVE_TIMEOUT);
    12ca:	ed b7       	in	r30, 0x3d	; 61
    12cc:	fe b7       	in	r31, 0x3e	; 62
    12ce:	37 96       	adiw	r30, 0x07	; 7
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	fe bf       	out	0x3e, r31	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	ed bf       	out	0x3d, r30	; 61
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	be 01       	movw	r22, r28
    12de:	6a 5f       	subi	r22, 0xFA	; 250
    12e0:	7f 4f       	sbci	r23, 0xFF	; 255
    12e2:	24 e0       	ldi	r18, 0x04	; 4
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	40 e0       	ldi	r20, 0x00	; 0
    12e8:	50 e0       	ldi	r21, 0x00	; 0
    12ea:	0a e0       	ldi	r16, 0x0A	; 10
    12ec:	14 d6       	rcall	.+3112   	; 0x1f16 <UARTReceiveASync>
		
		if (Len != sizeof(unsigned long))
    12ee:	64 30       	cpi	r22, 0x04	; 4
    12f0:	71 05       	cpc	r23, r1
    12f2:	81 05       	cpc	r24, r1
    12f4:	91 05       	cpc	r25, r1
    12f6:	89 f0       	breq	.+34     	; 0x131a <Xymk5vXyfstReceive+0x1b6>
		{
			SendTrace(ERROR_LEVEL, "Failed to receive Message Length.\r\n");
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <Xymk5vXyfstReceive+0x196>
    12fa:	0f 92       	push	r0
    12fc:	ed b7       	in	r30, 0x3d	; 61
    12fe:	fe b7       	in	r31, 0x3e	; 62
    1300:	31 96       	adiw	r30, 0x01	; 1
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	80 83       	st	Z, r24
    1306:	8e ec       	ldi	r24, 0xCE	; 206
    1308:	92 e0       	ldi	r25, 0x02	; 2
    130a:	92 83       	std	Z+2, r25	; 0x02
    130c:	81 83       	std	Z+1, r24	; 0x01
    130e:	48 dc       	rcall	.-1904   	; 0xba0 <SendTrace>
    1310:	10 e0       	ldi	r17, 0x00	; 0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	1d c1       	rjmp	.+570    	; 0x1554 <Xymk5vXyfstReceive+0x3f0>
		
		//
		// Verify we have enough buffer to store the received message.
		//
			
		if (*Length < MessageLength)
    131a:	f6 01       	movw	r30, r12
    131c:	80 80       	ld	r8, Z
    131e:	91 80       	ldd	r9, Z+1	; 0x01
    1320:	a2 80       	ldd	r10, Z+2	; 0x02
    1322:	b3 80       	ldd	r11, Z+3	; 0x03
    1324:	2e 81       	ldd	r18, Y+6	; 0x06
    1326:	3f 81       	ldd	r19, Y+7	; 0x07
    1328:	48 85       	ldd	r20, Y+8	; 0x08
    132a:	59 85       	ldd	r21, Y+9	; 0x09
    132c:	82 16       	cp	r8, r18
    132e:	93 06       	cpc	r9, r19
    1330:	a4 06       	cpc	r10, r20
    1332:	b5 06       	cpc	r11, r21
    1334:	48 f5       	brcc	.+82     	; 0x1388 <Xymk5vXyfstReceive+0x224>
		{
			SendTrace(ERROR_LEVEL, "Insufficient Receive Buffer - Buffer Length = %d, Message Length = %d\r\n", *Length, MessageLength);
    1336:	8d b7       	in	r24, 0x3d	; 61
    1338:	9e b7       	in	r25, 0x3e	; 62
    133a:	0b 97       	sbiw	r24, 0x0b	; 11
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	9e bf       	out	0x3e, r25	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	8d bf       	out	0x3d, r24	; 61
    1346:	ed b7       	in	r30, 0x3d	; 61
    1348:	fe b7       	in	r31, 0x3e	; 62
    134a:	31 96       	adiw	r30, 0x01	; 1
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	80 83       	st	Z, r24
    1350:	82 ef       	ldi	r24, 0xF2	; 242
    1352:	92 e0       	ldi	r25, 0x02	; 2
    1354:	92 83       	std	Z+2, r25	; 0x02
    1356:	81 83       	std	Z+1, r24	; 0x01
    1358:	83 82       	std	Z+3, r8	; 0x03
    135a:	94 82       	std	Z+4, r9	; 0x04
    135c:	a5 82       	std	Z+5, r10	; 0x05
    135e:	b6 82       	std	Z+6, r11	; 0x06
    1360:	27 83       	std	Z+7, r18	; 0x07
    1362:	30 87       	std	Z+8, r19	; 0x08
    1364:	41 87       	std	Z+9, r20	; 0x09
    1366:	52 87       	std	Z+10, r21	; 0x0a
    1368:	1b dc       	rcall	.-1994   	; 0xba0 <SendTrace>
				
			*Length = 0;
    136a:	f6 01       	movw	r30, r12
    136c:	10 82       	st	Z, r1
    136e:	11 82       	std	Z+1, r1	; 0x01
    1370:	12 82       	std	Z+2, r1	; 0x02
    1372:	13 82       	std	Z+3, r1	; 0x03
    1374:	10 e0       	ldi	r17, 0x00	; 0
    1376:	8d b7       	in	r24, 0x3d	; 61
    1378:	9e b7       	in	r25, 0x3e	; 62
    137a:	0b 96       	adiw	r24, 0x0b	; 11
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	f8 94       	cli
    1380:	9e bf       	out	0x3e, r25	; 62
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	8d bf       	out	0x3d, r24	; 61
    1386:	e6 c0       	rjmp	.+460    	; 0x1554 <Xymk5vXyfstReceive+0x3f0>
			
		//
		// Receive the message
		//
			
		*Length = UARTReceiveASync(UART_ONE, Buffer, MessageLength, RECEIVE_TIMEOUT);
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	b3 01       	movw	r22, r6
    138c:	0a e0       	ldi	r16, 0x0A	; 10
    138e:	c3 d5       	rcall	.+2950   	; 0x1f16 <UARTReceiveASync>
    1390:	9b 01       	movw	r18, r22
    1392:	ac 01       	movw	r20, r24
    1394:	f6 01       	movw	r30, r12
    1396:	60 83       	st	Z, r22
    1398:	71 83       	std	Z+1, r23	; 0x01
    139a:	82 83       	std	Z+2, r24	; 0x02
    139c:	93 83       	std	Z+3, r25	; 0x03
			
		if (*Length != MessageLength)
    139e:	ce 80       	ldd	r12, Y+6	; 0x06
    13a0:	df 80       	ldd	r13, Y+7	; 0x07
    13a2:	e8 84       	ldd	r14, Y+8	; 0x08
    13a4:	f9 84       	ldd	r15, Y+9	; 0x09
    13a6:	6c 15       	cp	r22, r12
    13a8:	7d 05       	cpc	r23, r13
    13aa:	8e 05       	cpc	r24, r14
    13ac:	9f 05       	cpc	r25, r15
    13ae:	21 f1       	breq	.+72     	; 0x13f8 <Xymk5vXyfstReceive+0x294>
		{
			SendTrace(ERROR_LEVEL, "Failed to receive entire message, Expected Message Length = %d, Received Message Length = %d.\r\n", MessageLength, *Length);
    13b0:	8d b7       	in	r24, 0x3d	; 61
    13b2:	9e b7       	in	r25, 0x3e	; 62
    13b4:	0b 97       	sbiw	r24, 0x0b	; 11
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	9e bf       	out	0x3e, r25	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	8d bf       	out	0x3d, r24	; 61
    13c0:	ed b7       	in	r30, 0x3d	; 61
    13c2:	fe b7       	in	r31, 0x3e	; 62
    13c4:	31 96       	adiw	r30, 0x01	; 1
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	80 83       	st	Z, r24
    13ca:	8a e3       	ldi	r24, 0x3A	; 58
    13cc:	93 e0       	ldi	r25, 0x03	; 3
    13ce:	92 83       	std	Z+2, r25	; 0x02
    13d0:	81 83       	std	Z+1, r24	; 0x01
    13d2:	c3 82       	std	Z+3, r12	; 0x03
    13d4:	d4 82       	std	Z+4, r13	; 0x04
    13d6:	e5 82       	std	Z+5, r14	; 0x05
    13d8:	f6 82       	std	Z+6, r15	; 0x06
    13da:	27 83       	std	Z+7, r18	; 0x07
    13dc:	30 87       	std	Z+8, r19	; 0x08
    13de:	41 87       	std	Z+9, r20	; 0x09
    13e0:	52 87       	std	Z+10, r21	; 0x0a
    13e2:	de db       	rcall	.-2116   	; 0xba0 <SendTrace>
    13e4:	10 e0       	ldi	r17, 0x00	; 0
    13e6:	ed b7       	in	r30, 0x3d	; 61
    13e8:	fe b7       	in	r31, 0x3e	; 62
    13ea:	3b 96       	adiw	r30, 0x0b	; 11
    13ec:	0f b6       	in	r0, 0x3f	; 63
    13ee:	f8 94       	cli
    13f0:	fe bf       	out	0x3e, r31	; 62
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	ed bf       	out	0x3d, r30	; 61
    13f6:	ae c0       	rjmp	.+348    	; 0x1554 <Xymk5vXyfstReceive+0x3f0>
			
		//
		// We have received the entire message without error, so send a Ack Message
		//
			
		MessageId++;
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	9b 81       	ldd	r25, Y+3	; 0x03
    13fc:	ac 81       	ldd	r26, Y+4	; 0x04
    13fe:	bd 81       	ldd	r27, Y+5	; 0x05
    1400:	01 96       	adiw	r24, 0x01	; 1
    1402:	a1 1d       	adc	r26, r1
    1404:	b1 1d       	adc	r27, r1
    1406:	8a 83       	std	Y+2, r24	; 0x02
    1408:	9b 83       	std	Y+3, r25	; 0x03
    140a:	ac 83       	std	Y+4, r26	; 0x04
    140c:	bd 83       	std	Y+5, r27	; 0x05
				
		Xymk5vXyfstTransmit(&MessageId, sizeof(unsigned long), ACK_MESSAGE);
    140e:	ce 01       	movw	r24, r28
    1410:	02 96       	adiw	r24, 0x02	; 2
    1412:	44 e0       	ldi	r20, 0x04	; 4
    1414:	50 e0       	ldi	r21, 0x00	; 0
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	0c dd       	rcall	.-1512   	; 0xe36 <Xymk5vXyfstTransmit>
    141e:	9a c0       	rjmp	.+308    	; 0x1554 <Xymk5vXyfstReceive+0x3f0>
				
	}
	else
	{
		SendTrace(INFO_LEVEL, "Ack Message - Waiting for Address\r\n");
    1420:	00 d0       	rcall	.+0      	; 0x1422 <Xymk5vXyfstReceive+0x2be>
    1422:	0f 92       	push	r0
    1424:	ed b7       	in	r30, 0x3d	; 61
    1426:	fe b7       	in	r31, 0x3e	; 62
    1428:	31 96       	adiw	r30, 0x01	; 1
    142a:	84 e0       	ldi	r24, 0x04	; 4
    142c:	80 83       	st	Z, r24
    142e:	8a e9       	ldi	r24, 0x9A	; 154
    1430:	93 e0       	ldi	r25, 0x03	; 3
    1432:	92 83       	std	Z+2, r25	; 0x02
    1434:	81 83       	std	Z+1, r24	; 0x01
    1436:	b4 db       	rcall	.-2200   	; 0xba0 <SendTrace>
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
			//
			// First receive the destination address and match it with
			// My address
			//
			
			Len = UARTReceiveASync(UART_ONE, &DestAddress, sizeof(unsigned char), RECEIVE_TIMEOUT);
    143e:	7e 01       	movw	r14, r28
    1440:	08 94       	sec
    1442:	e1 1c       	adc	r14, r1
    1444:	f1 1c       	adc	r15, r1
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	b7 01       	movw	r22, r14
    144a:	21 e0       	ldi	r18, 0x01	; 1
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e0       	ldi	r20, 0x00	; 0
    1450:	50 e0       	ldi	r21, 0x00	; 0
    1452:	0a e0       	ldi	r16, 0x0A	; 10
    1454:	60 d5       	rcall	.+2752   	; 0x1f16 <UARTReceiveASync>
			
			if (Len != sizeof(unsigned char))
    1456:	61 30       	cpi	r22, 0x01	; 1
    1458:	71 05       	cpc	r23, r1
    145a:	81 05       	cpc	r24, r1
    145c:	91 05       	cpc	r25, r1
    145e:	89 f0       	breq	.+34     	; 0x1482 <Xymk5vXyfstReceive+0x31e>
			{
				SendTrace(ERROR_LEVEL, "Invalid Destination Address.\r\n");
    1460:	00 d0       	rcall	.+0      	; 0x1462 <Xymk5vXyfstReceive+0x2fe>
    1462:	0f 92       	push	r0
    1464:	ed b7       	in	r30, 0x3d	; 61
    1466:	fe b7       	in	r31, 0x3e	; 62
    1468:	31 96       	adiw	r30, 0x01	; 1
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	80 83       	st	Z, r24
    146e:	83 e5       	ldi	r24, 0x53	; 83
    1470:	92 e0       	ldi	r25, 0x02	; 2
    1472:	92 83       	std	Z+2, r25	; 0x02
    1474:	81 83       	std	Z+1, r24	; 0x01
    1476:	94 db       	rcall	.-2264   	; 0xba0 <SendTrace>
    1478:	10 e0       	ldi	r17, 0x00	; 0
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	69 c0       	rjmp	.+210    	; 0x1554 <Xymk5vXyfstReceive+0x3f0>
				Status = FALSE;
				
				goto Exit;
			}
			
		} while(DestAddress != gMyAddress);
    1482:	99 81       	ldd	r25, Y+1	; 0x01
    1484:	80 91 1e 06 	lds	r24, 0x061E
    1488:	98 17       	cp	r25, r24
    148a:	e9 f6       	brne	.-70     	; 0x1446 <Xymk5vXyfstReceive+0x2e2>
		
		SendTrace(INFO_LEVEL, "Ack Message - Receiving New Message\r\n");
    148c:	00 d0       	rcall	.+0      	; 0x148e <Xymk5vXyfstReceive+0x32a>
    148e:	0f 92       	push	r0
    1490:	ed b7       	in	r30, 0x3d	; 61
    1492:	fe b7       	in	r31, 0x3e	; 62
    1494:	31 96       	adiw	r30, 0x01	; 1
    1496:	84 e0       	ldi	r24, 0x04	; 4
    1498:	80 83       	st	Z, r24
    149a:	8e eb       	ldi	r24, 0xBE	; 190
    149c:	93 e0       	ldi	r25, 0x03	; 3
    149e:	92 83       	std	Z+2, r25	; 0x02
    14a0:	81 83       	std	Z+1, r24	; 0x01
    14a2:	7e db       	rcall	.-2308   	; 0xba0 <SendTrace>
		
		//
		// Disable MPCM Mode
		//
		
		UARTEnableDisableMPCM(UART_ONE, DISABLE);
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	60 e0       	ldi	r22, 0x00	; 0
    14ae:	fe d2       	rcall	.+1532   	; 0x1aac <UARTEnableDisableMPCM>
		
		//
		// Verify we have enough buffer to store the received message.
		//
			
		if (*Length < sizeof(unsigned long))
    14b0:	f6 01       	movw	r30, r12
    14b2:	80 81       	ld	r24, Z
    14b4:	91 81       	ldd	r25, Z+1	; 0x01
    14b6:	a2 81       	ldd	r26, Z+2	; 0x02
    14b8:	b3 81       	ldd	r27, Z+3	; 0x03
    14ba:	04 97       	sbiw	r24, 0x04	; 4
    14bc:	a1 05       	cpc	r26, r1
    14be:	b1 05       	cpc	r27, r1
    14c0:	b0 f4       	brcc	.+44     	; 0x14ee <Xymk5vXyfstReceive+0x38a>
		{
			SendTrace(ERROR_LEVEL, "Insufficient Receive Buffer \r\n");
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <Xymk5vXyfstReceive+0x360>
    14c4:	0f 92       	push	r0
    14c6:	ed b7       	in	r30, 0x3d	; 61
    14c8:	fe b7       	in	r31, 0x3e	; 62
    14ca:	31 96       	adiw	r30, 0x01	; 1
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	80 83       	st	Z, r24
    14d0:	84 ee       	ldi	r24, 0xE4	; 228
    14d2:	93 e0       	ldi	r25, 0x03	; 3
    14d4:	92 83       	std	Z+2, r25	; 0x02
    14d6:	81 83       	std	Z+1, r24	; 0x01
    14d8:	63 db       	rcall	.-2362   	; 0xba0 <SendTrace>
				
			*Length = 0;
    14da:	f6 01       	movw	r30, r12
    14dc:	10 82       	st	Z, r1
    14de:	11 82       	std	Z+1, r1	; 0x01
    14e0:	12 82       	std	Z+2, r1	; 0x02
    14e2:	13 82       	std	Z+3, r1	; 0x03
    14e4:	10 e0       	ldi	r17, 0x00	; 0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	33 c0       	rjmp	.+102    	; 0x1554 <Xymk5vXyfstReceive+0x3f0>
			
		//
		// Receive the message
		//
			
		*Length = UARTReceiveASync(UART_ONE, Buffer, sizeof(unsigned long), RECEIVE_TIMEOUT);
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	b3 01       	movw	r22, r6
    14f2:	24 e0       	ldi	r18, 0x04	; 4
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	40 e0       	ldi	r20, 0x00	; 0
    14f8:	50 e0       	ldi	r21, 0x00	; 0
    14fa:	0a e0       	ldi	r16, 0x0A	; 10
    14fc:	0c d5       	rcall	.+2584   	; 0x1f16 <UARTReceiveASync>
    14fe:	9b 01       	movw	r18, r22
    1500:	ac 01       	movw	r20, r24
    1502:	f6 01       	movw	r30, r12
    1504:	60 83       	st	Z, r22
    1506:	71 83       	std	Z+1, r23	; 0x01
    1508:	82 83       	std	Z+2, r24	; 0x02
    150a:	93 83       	std	Z+3, r25	; 0x03
			
		if (*Length != sizeof(unsigned long))
    150c:	64 30       	cpi	r22, 0x04	; 4
    150e:	71 05       	cpc	r23, r1
    1510:	81 05       	cpc	r24, r1
    1512:	91 05       	cpc	r25, r1
    1514:	f9 f0       	breq	.+62     	; 0x1554 <Xymk5vXyfstReceive+0x3f0>
		{
			SendTrace(ERROR_LEVEL, "Failed to receive entire message, Received Message Length = %d.\r\n", *Length);
    1516:	8d b7       	in	r24, 0x3d	; 61
    1518:	9e b7       	in	r25, 0x3e	; 62
    151a:	07 97       	sbiw	r24, 0x07	; 7
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	f8 94       	cli
    1520:	9e bf       	out	0x3e, r25	; 62
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	8d bf       	out	0x3d, r24	; 61
    1526:	ed b7       	in	r30, 0x3d	; 61
    1528:	fe b7       	in	r31, 0x3e	; 62
    152a:	31 96       	adiw	r30, 0x01	; 1
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	80 83       	st	Z, r24
    1530:	83 e0       	ldi	r24, 0x03	; 3
    1532:	94 e0       	ldi	r25, 0x04	; 4
    1534:	92 83       	std	Z+2, r25	; 0x02
    1536:	81 83       	std	Z+1, r24	; 0x01
    1538:	23 83       	std	Z+3, r18	; 0x03
    153a:	34 83       	std	Z+4, r19	; 0x04
    153c:	45 83       	std	Z+5, r20	; 0x05
    153e:	56 83       	std	Z+6, r21	; 0x06
    1540:	2f db       	rcall	.-2466   	; 0xba0 <SendTrace>
    1542:	10 e0       	ldi	r17, 0x00	; 0
    1544:	ed b7       	in	r30, 0x3d	; 61
    1546:	fe b7       	in	r31, 0x3e	; 62
    1548:	37 96       	adiw	r30, 0x07	; 7
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	fe bf       	out	0x3e, r31	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	ed bf       	out	0x3d, r30	; 61
		}
	}

Exit:

	UARTEnableDisableMPCM(UART_ONE, ENABLE);
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	61 e0       	ldi	r22, 0x01	; 1
    1558:	a9 d2       	rcall	.+1362   	; 0x1aac <UARTEnableDisableMPCM>
	
	return Status;
}
    155a:	81 2f       	mov	r24, r17
    155c:	29 96       	adiw	r28, 0x09	; 9
    155e:	0f b6       	in	r0, 0x3f	; 63
    1560:	f8 94       	cli
    1562:	de bf       	out	0x3e, r29	; 62
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	cd bf       	out	0x3d, r28	; 61
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	1f 91       	pop	r17
    156e:	0f 91       	pop	r16
    1570:	ff 90       	pop	r15
    1572:	ef 90       	pop	r14
    1574:	df 90       	pop	r13
    1576:	cf 90       	pop	r12
    1578:	bf 90       	pop	r11
    157a:	af 90       	pop	r10
    157c:	9f 90       	pop	r9
    157e:	8f 90       	pop	r8
    1580:	7f 90       	pop	r7
    1582:	6f 90       	pop	r6
    1584:	08 95       	ret

00001586 <InitXymk5vXyfst>:



bool 
InitXymk5vXyfst(unsigned char MyAddress, unsigned char DestAddress, bool EnableAutoReTransmit)
{
    1586:	ff 92       	push	r15
    1588:	0f 93       	push	r16
    158a:	1f 93       	push	r17
    158c:	08 2f       	mov	r16, r24
    158e:	f4 2e       	mov	r15, r20
    bool Status;
	
	Status = InitUARTSync(UART_ONE, BR_2400, MULTI_PROCESSOR_COMMUNICATION_MODE);
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	6f ec       	ldi	r22, 0xCF	; 207
    1594:	70 e0       	ldi	r23, 0x00	; 0
    1596:	41 e0       	ldi	r20, 0x01	; 1
    1598:	d8 d2       	rcall	.+1456   	; 0x1b4a <InitUARTSync>
    159a:	18 2f       	mov	r17, r24
	
	if (!Status)
    159c:	88 23       	and	r24, r24
    159e:	81 f4       	brne	.+32     	; 0x15c0 <InitXymk5vXyfst+0x3a>
	{
		SendTrace(ERROR_LEVEL, "Failed to initialized UART 1\r\n");
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <InitXymk5vXyfst+0x1c>
    15a2:	0f 92       	push	r0
    15a4:	ed b7       	in	r30, 0x3d	; 61
    15a6:	fe b7       	in	r31, 0x3e	; 62
    15a8:	31 96       	adiw	r30, 0x01	; 1
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	80 83       	st	Z, r24
    15ae:	85 e4       	ldi	r24, 0x45	; 69
    15b0:	94 e0       	ldi	r25, 0x04	; 4
    15b2:	92 83       	std	Z+2, r25	; 0x02
    15b4:	81 83       	std	Z+1, r24	; 0x01
    15b6:	f4 da       	rcall	.-2584   	; 0xba0 <SendTrace>
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	07 c0       	rjmp	.+14     	; 0x15ce <InitXymk5vXyfst+0x48>
		
		goto Exit;
	}

	gMyAddress = MyAddress;
    15c0:	00 93 1e 06 	sts	0x061E, r16
	
	gDestAddress = gDestAddress;

	gXymk5vXyfstAutoRetransmit = EnableAutoReTransmit;
    15c4:	f0 92 19 06 	sts	0x0619, r15
	
	gXymk5vXyfstInitialized = TRUE;
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	80 93 12 06 	sts	0x0612, r24

Exit:

    return Status;
}
    15ce:	81 2f       	mov	r24, r17
    15d0:	1f 91       	pop	r17
    15d2:	0f 91       	pop	r16
    15d4:	ff 90       	pop	r15
    15d6:	08 95       	ret

000015d8 <InitADC>:

bool gADCInitialized = FALSE;

bool
InitADC(PADC_INIT_PARAMS InitParams)
{
    15d8:	fc 01       	movw	r30, r24
	
	//
	// Check to see if the init params is set to NULL
	//
	
	if (InitParams == NULL)
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	b9 f0       	breq	.+46     	; 0x160c <InitADC+0x34>
	// Initialize ADC Mux register
	//
	
	AdcMux.AsUINT8 = 0;
	
	AdcMux.RefVoltSelect = InitParams->RefVoltSelect;
    15de:	81 81       	ldd	r24, Z+1	; 0x01
    15e0:	82 95       	swap	r24
    15e2:	88 0f       	add	r24, r24
    15e4:	88 0f       	add	r24, r24
    15e6:	80 7c       	andi	r24, 0xC0	; 192
	
	AdcMux.Adlar = InitParams->Flags.IsLeftAdjustResult;
    15e8:	90 81       	ld	r25, Z
    15ea:	90 fb       	bst	r25, 0
    15ec:	85 f9       	bld	r24, 5
	
	ADMUX = AdcMux.AsUINT8;
    15ee:	80 93 7c 00 	sts	0x007C, r24
	// Initialize Control and Status A Register
	//
	
	AdcCtrlStatusA.AsUINT8 = 0;
	
	AdcCtrlStatusA.Prescalar = InitParams->Prescalar;
    15f2:	82 81       	ldd	r24, Z+2	; 0x02
    15f4:	87 70       	andi	r24, 0x07	; 7
	
	AdcCtrlStatusA.ADCEnable = 1;
    15f6:	80 68       	ori	r24, 0x80	; 128
	
	ADCSRA = AdcCtrlStatusA.AsUINT8;
    15f8:	80 93 7a 00 	sts	0x007A, r24
	
	//
	// Initialize Control and Status Register B
	//
	
	ADCSRB = 0;
    15fc:	10 92 7b 00 	sts	0x007B, r1
	
	//
	// Initialize Digital Input Disable Register 0
	//
	
	DIDR0 = InitParams->EnabledChannelsBitVector;
    1600:	83 81       	ldd	r24, Z+3	; 0x03
    1602:	80 93 7e 00 	sts	0x007E, r24
	
	
	gADCInitialized = TRUE;
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	80 93 13 06 	sts	0x0613, r24
	
	Exit:

	return gADCInitialized;
}
    160c:	80 91 13 06 	lds	r24, 0x0613
    1610:	08 95       	ret

00001612 <ADCRead>:
	
	//
	// Read DIDR0 register to check enabled channels
	//
	
	if (!(DIDR0 & (0x1 << AdcChannel)))
    1612:	20 91 7e 00 	lds	r18, 0x007E
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	08 2e       	mov	r0, r24
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <ADCRead+0xe>
    161c:	35 95       	asr	r19
    161e:	27 95       	ror	r18
    1620:	0a 94       	dec	r0
    1622:	e2 f7       	brpl	.-8      	; 0x161c <ADCRead+0xa>
    1624:	20 fd       	sbrc	r18, 0
    1626:	0c c0       	rjmp	.+24     	; 0x1640 <ADCRead+0x2e>
	{
		Status = FALSE;
		
		SendTrace(ERROR_LEVEL, "ADC Channel Not Enabled\r\n");
    1628:	86 ef       	ldi	r24, 0xF6	; 246
    162a:	95 e0       	ldi	r25, 0x05	; 5
    162c:	9f 93       	push	r25
    162e:	8f 93       	push	r24
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	8f 93       	push	r24
    1634:	b5 da       	rcall	.-2710   	; 0xba0 <SendTrace>
		
		goto Exit;
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
	// Read DIDR0 register to check enabled channels
	//
	
	if (!(DIDR0 & (0x1 << AdcChannel)))
	{
		Status = FALSE;
    163c:	80 e0       	ldi	r24, 0x00	; 0
		
		SendTrace(ERROR_LEVEL, "ADC Channel Not Enabled\r\n");
		
		goto Exit;
    163e:	08 95       	ret
	
	//
	// Write the ADC Channel in ADCMUX
	//
	
	AdcMux.AsUINT8 = ADMUX;
    1640:	ec e7       	ldi	r30, 0x7C	; 124
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	90 81       	ld	r25, Z
	
	AdcMux.Mux = AdcChannel;
    1646:	8f 71       	andi	r24, 0x1F	; 31
    1648:	90 7e       	andi	r25, 0xE0	; 224
    164a:	89 2b       	or	r24, r25
	
	ADMUX = AdcMux.AsUINT8; 
    164c:	80 83       	st	Z, r24
	
	//
	// Start Conversion
	//
	
	START_CONVERSION();
    164e:	ea e7       	ldi	r30, 0x7A	; 122
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	80 64       	ori	r24, 0x40	; 64
    1656:	80 83       	st	Z, r24
	
	//
	// Wait for Conversion to complete
	//
	
	WAIT_FOR_CONVERSION();
    1658:	80 81       	ld	r24, Z
    165a:	84 ff       	sbrs	r24, 4
    165c:	fd cf       	rjmp	.-6      	; 0x1658 <ADCRead+0x46>
	
	//
	// Read the data
	//
	
	*Value = ADCL;
    165e:	80 91 78 00 	lds	r24, 0x0078
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	fb 01       	movw	r30, r22
    1666:	91 83       	std	Z+1, r25	; 0x01
    1668:	80 83       	st	Z, r24
	
	*Value |= (ADCH << 8);
    166a:	20 91 79 00 	lds	r18, 0x0079
    166e:	92 2b       	or	r25, r18
	
	if (*Value >= ADC_MAX_VALUE)
    1670:	8c 3f       	cpi	r24, 0xFC	; 252
    1672:	f3 e0       	ldi	r31, 0x03	; 3
    1674:	9f 07       	cpc	r25, r31
    1676:	28 f4       	brcc	.+10     	; 0x1682 <ADCRead+0x70>
	// Read the data
	//
	
	*Value = ADCL;
	
	*Value |= (ADCH << 8);
    1678:	fb 01       	movw	r30, r22
    167a:	91 83       	std	Z+1, r25	; 0x01
    167c:	80 83       	st	Z, r24
}

bool
ADCRead(ADC_CHANNEL AdcChannel, unsigned int *Value)
{
	bool Status = TRUE;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	08 95       	ret
	
	*Value |= (ADCH << 8);
	
	if (*Value >= ADC_MAX_VALUE)
	{
		*Value = ADC_MAX_VALUE - 1;
    1682:	8b ef       	ldi	r24, 0xFB	; 251
    1684:	93 e0       	ldi	r25, 0x03	; 3
    1686:	fb 01       	movw	r30, r22
    1688:	91 83       	std	Z+1, r25	; 0x01
    168a:	80 83       	st	Z, r24
}

bool
ADCRead(ADC_CHANNEL AdcChannel, unsigned int *Value)
{
	bool Status = TRUE;
    168c:	81 e0       	ldi	r24, 0x01	; 1
	}
	
Exit:

	return Status;
    168e:	08 95       	ret

00001690 <__subsf3>:
    1690:	50 58       	subi	r21, 0x80	; 128

00001692 <__addsf3>:
    1692:	bb 27       	eor	r27, r27
    1694:	aa 27       	eor	r26, r26
    1696:	0e d0       	rcall	.+28     	; 0x16b4 <__addsf3x>
    1698:	2f c1       	rjmp	.+606    	; 0x18f8 <__fp_round>
    169a:	20 d1       	rcall	.+576    	; 0x18dc <__fp_pscA>
    169c:	30 f0       	brcs	.+12     	; 0x16aa <__addsf3+0x18>
    169e:	25 d1       	rcall	.+586    	; 0x18ea <__fp_pscB>
    16a0:	20 f0       	brcs	.+8      	; 0x16aa <__addsf3+0x18>
    16a2:	31 f4       	brne	.+12     	; 0x16b0 <__addsf3+0x1e>
    16a4:	9f 3f       	cpi	r25, 0xFF	; 255
    16a6:	11 f4       	brne	.+4      	; 0x16ac <__addsf3+0x1a>
    16a8:	1e f4       	brtc	.+6      	; 0x16b0 <__addsf3+0x1e>
    16aa:	05 c1       	rjmp	.+522    	; 0x18b6 <__fp_nan>
    16ac:	0e f4       	brtc	.+2      	; 0x16b0 <__addsf3+0x1e>
    16ae:	e0 95       	com	r30
    16b0:	e7 fb       	bst	r30, 7
    16b2:	fb c0       	rjmp	.+502    	; 0x18aa <__fp_inf>

000016b4 <__addsf3x>:
    16b4:	e9 2f       	mov	r30, r25
    16b6:	31 d1       	rcall	.+610    	; 0x191a <__fp_split3>
    16b8:	80 f3       	brcs	.-32     	; 0x169a <__addsf3+0x8>
    16ba:	ba 17       	cp	r27, r26
    16bc:	62 07       	cpc	r22, r18
    16be:	73 07       	cpc	r23, r19
    16c0:	84 07       	cpc	r24, r20
    16c2:	95 07       	cpc	r25, r21
    16c4:	18 f0       	brcs	.+6      	; 0x16cc <__addsf3x+0x18>
    16c6:	71 f4       	brne	.+28     	; 0x16e4 <__addsf3x+0x30>
    16c8:	9e f5       	brtc	.+102    	; 0x1730 <__addsf3x+0x7c>
    16ca:	49 c1       	rjmp	.+658    	; 0x195e <__fp_zero>
    16cc:	0e f4       	brtc	.+2      	; 0x16d0 <__addsf3x+0x1c>
    16ce:	e0 95       	com	r30
    16d0:	0b 2e       	mov	r0, r27
    16d2:	ba 2f       	mov	r27, r26
    16d4:	a0 2d       	mov	r26, r0
    16d6:	0b 01       	movw	r0, r22
    16d8:	b9 01       	movw	r22, r18
    16da:	90 01       	movw	r18, r0
    16dc:	0c 01       	movw	r0, r24
    16de:	ca 01       	movw	r24, r20
    16e0:	a0 01       	movw	r20, r0
    16e2:	11 24       	eor	r1, r1
    16e4:	ff 27       	eor	r31, r31
    16e6:	59 1b       	sub	r21, r25
    16e8:	99 f0       	breq	.+38     	; 0x1710 <__addsf3x+0x5c>
    16ea:	59 3f       	cpi	r21, 0xF9	; 249
    16ec:	50 f4       	brcc	.+20     	; 0x1702 <__addsf3x+0x4e>
    16ee:	50 3e       	cpi	r21, 0xE0	; 224
    16f0:	68 f1       	brcs	.+90     	; 0x174c <__addsf3x+0x98>
    16f2:	1a 16       	cp	r1, r26
    16f4:	f0 40       	sbci	r31, 0x00	; 0
    16f6:	a2 2f       	mov	r26, r18
    16f8:	23 2f       	mov	r18, r19
    16fa:	34 2f       	mov	r19, r20
    16fc:	44 27       	eor	r20, r20
    16fe:	58 5f       	subi	r21, 0xF8	; 248
    1700:	f3 cf       	rjmp	.-26     	; 0x16e8 <__addsf3x+0x34>
    1702:	46 95       	lsr	r20
    1704:	37 95       	ror	r19
    1706:	27 95       	ror	r18
    1708:	a7 95       	ror	r26
    170a:	f0 40       	sbci	r31, 0x00	; 0
    170c:	53 95       	inc	r21
    170e:	c9 f7       	brne	.-14     	; 0x1702 <__addsf3x+0x4e>
    1710:	7e f4       	brtc	.+30     	; 0x1730 <__addsf3x+0x7c>
    1712:	1f 16       	cp	r1, r31
    1714:	ba 0b       	sbc	r27, r26
    1716:	62 0b       	sbc	r22, r18
    1718:	73 0b       	sbc	r23, r19
    171a:	84 0b       	sbc	r24, r20
    171c:	ba f0       	brmi	.+46     	; 0x174c <__addsf3x+0x98>
    171e:	91 50       	subi	r25, 0x01	; 1
    1720:	a1 f0       	breq	.+40     	; 0x174a <__addsf3x+0x96>
    1722:	ff 0f       	add	r31, r31
    1724:	bb 1f       	adc	r27, r27
    1726:	66 1f       	adc	r22, r22
    1728:	77 1f       	adc	r23, r23
    172a:	88 1f       	adc	r24, r24
    172c:	c2 f7       	brpl	.-16     	; 0x171e <__addsf3x+0x6a>
    172e:	0e c0       	rjmp	.+28     	; 0x174c <__addsf3x+0x98>
    1730:	ba 0f       	add	r27, r26
    1732:	62 1f       	adc	r22, r18
    1734:	73 1f       	adc	r23, r19
    1736:	84 1f       	adc	r24, r20
    1738:	48 f4       	brcc	.+18     	; 0x174c <__addsf3x+0x98>
    173a:	87 95       	ror	r24
    173c:	77 95       	ror	r23
    173e:	67 95       	ror	r22
    1740:	b7 95       	ror	r27
    1742:	f7 95       	ror	r31
    1744:	9e 3f       	cpi	r25, 0xFE	; 254
    1746:	08 f0       	brcs	.+2      	; 0x174a <__addsf3x+0x96>
    1748:	b3 cf       	rjmp	.-154    	; 0x16b0 <__addsf3+0x1e>
    174a:	93 95       	inc	r25
    174c:	88 0f       	add	r24, r24
    174e:	08 f0       	brcs	.+2      	; 0x1752 <__addsf3x+0x9e>
    1750:	99 27       	eor	r25, r25
    1752:	ee 0f       	add	r30, r30
    1754:	97 95       	ror	r25
    1756:	87 95       	ror	r24
    1758:	08 95       	ret

0000175a <__fixsfdi>:
    175a:	be e3       	ldi	r27, 0x3E	; 62
    175c:	04 d0       	rcall	.+8      	; 0x1766 <__fixunssfdi+0x2>
    175e:	08 f4       	brcc	.+2      	; 0x1762 <__fixsfdi+0x8>
    1760:	90 e8       	ldi	r25, 0x80	; 128
    1762:	08 95       	ret

00001764 <__fixunssfdi>:
    1764:	bf e3       	ldi	r27, 0x3F	; 63
    1766:	22 27       	eor	r18, r18
    1768:	33 27       	eor	r19, r19
    176a:	a9 01       	movw	r20, r18
    176c:	de d0       	rcall	.+444    	; 0x192a <__fp_splitA>
    176e:	58 f1       	brcs	.+86     	; 0x17c6 <__fixunssfdi+0x62>
    1770:	9f 57       	subi	r25, 0x7F	; 127
    1772:	40 f1       	brcs	.+80     	; 0x17c4 <__fixunssfdi+0x60>
    1774:	b9 17       	cp	r27, r25
    1776:	38 f1       	brcs	.+78     	; 0x17c6 <__fixunssfdi+0x62>
    1778:	bf e3       	ldi	r27, 0x3F	; 63
    177a:	b9 1b       	sub	r27, r25
    177c:	99 27       	eor	r25, r25
    177e:	b8 50       	subi	r27, 0x08	; 8
    1780:	3a f4       	brpl	.+14     	; 0x1790 <__fixunssfdi+0x2c>
    1782:	66 0f       	add	r22, r22
    1784:	77 1f       	adc	r23, r23
    1786:	88 1f       	adc	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	b3 95       	inc	r27
    178c:	d2 f3       	brmi	.-12     	; 0x1782 <__fixunssfdi+0x1e>
    178e:	16 c0       	rjmp	.+44     	; 0x17bc <__fixunssfdi+0x58>
    1790:	b8 50       	subi	r27, 0x08	; 8
    1792:	4a f0       	brmi	.+18     	; 0x17a6 <__fixunssfdi+0x42>
    1794:	23 2f       	mov	r18, r19
    1796:	34 2f       	mov	r19, r20
    1798:	45 2f       	mov	r20, r21
    179a:	56 2f       	mov	r21, r22
    179c:	67 2f       	mov	r22, r23
    179e:	78 2f       	mov	r23, r24
    17a0:	88 27       	eor	r24, r24
    17a2:	b8 50       	subi	r27, 0x08	; 8
    17a4:	ba f7       	brpl	.-18     	; 0x1794 <__fixunssfdi+0x30>
    17a6:	b8 5f       	subi	r27, 0xF8	; 248
    17a8:	49 f0       	breq	.+18     	; 0x17bc <__fixunssfdi+0x58>
    17aa:	86 95       	lsr	r24
    17ac:	77 95       	ror	r23
    17ae:	67 95       	ror	r22
    17b0:	57 95       	ror	r21
    17b2:	47 95       	ror	r20
    17b4:	37 95       	ror	r19
    17b6:	27 95       	ror	r18
    17b8:	ba 95       	dec	r27
    17ba:	b9 f7       	brne	.-18     	; 0x17aa <__fixunssfdi+0x46>
    17bc:	0e f4       	brtc	.+2      	; 0x17c0 <__fixunssfdi+0x5c>
    17be:	7e d0       	rcall	.+252    	; 0x18bc <__fp_negdi>
    17c0:	88 94       	clc
    17c2:	08 95       	ret
    17c4:	88 94       	clc
    17c6:	60 e0       	ldi	r22, 0x00	; 0
    17c8:	70 e0       	ldi	r23, 0x00	; 0
    17ca:	cb 01       	movw	r24, r22
    17cc:	08 95       	ret

000017ce <__fixunssfsi>:
    17ce:	ad d0       	rcall	.+346    	; 0x192a <__fp_splitA>
    17d0:	88 f0       	brcs	.+34     	; 0x17f4 <__fixunssfsi+0x26>
    17d2:	9f 57       	subi	r25, 0x7F	; 127
    17d4:	90 f0       	brcs	.+36     	; 0x17fa <__fixunssfsi+0x2c>
    17d6:	b9 2f       	mov	r27, r25
    17d8:	99 27       	eor	r25, r25
    17da:	b7 51       	subi	r27, 0x17	; 23
    17dc:	a0 f0       	brcs	.+40     	; 0x1806 <__fixunssfsi+0x38>
    17de:	d1 f0       	breq	.+52     	; 0x1814 <__fixunssfsi+0x46>
    17e0:	66 0f       	add	r22, r22
    17e2:	77 1f       	adc	r23, r23
    17e4:	88 1f       	adc	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	1a f0       	brmi	.+6      	; 0x17f0 <__fixunssfsi+0x22>
    17ea:	ba 95       	dec	r27
    17ec:	c9 f7       	brne	.-14     	; 0x17e0 <__fixunssfsi+0x12>
    17ee:	12 c0       	rjmp	.+36     	; 0x1814 <__fixunssfsi+0x46>
    17f0:	b1 30       	cpi	r27, 0x01	; 1
    17f2:	81 f0       	breq	.+32     	; 0x1814 <__fixunssfsi+0x46>
    17f4:	b4 d0       	rcall	.+360    	; 0x195e <__fp_zero>
    17f6:	b1 e0       	ldi	r27, 0x01	; 1
    17f8:	08 95       	ret
    17fa:	b1 c0       	rjmp	.+354    	; 0x195e <__fp_zero>
    17fc:	67 2f       	mov	r22, r23
    17fe:	78 2f       	mov	r23, r24
    1800:	88 27       	eor	r24, r24
    1802:	b8 5f       	subi	r27, 0xF8	; 248
    1804:	39 f0       	breq	.+14     	; 0x1814 <__fixunssfsi+0x46>
    1806:	b9 3f       	cpi	r27, 0xF9	; 249
    1808:	cc f3       	brlt	.-14     	; 0x17fc <__fixunssfsi+0x2e>
    180a:	86 95       	lsr	r24
    180c:	77 95       	ror	r23
    180e:	67 95       	ror	r22
    1810:	b3 95       	inc	r27
    1812:	d9 f7       	brne	.-10     	; 0x180a <__fixunssfsi+0x3c>
    1814:	3e f4       	brtc	.+14     	; 0x1824 <__fixunssfsi+0x56>
    1816:	90 95       	com	r25
    1818:	80 95       	com	r24
    181a:	70 95       	com	r23
    181c:	61 95       	neg	r22
    181e:	7f 4f       	sbci	r23, 0xFF	; 255
    1820:	8f 4f       	sbci	r24, 0xFF	; 255
    1822:	9f 4f       	sbci	r25, 0xFF	; 255
    1824:	08 95       	ret

00001826 <__floatdisf>:
    1826:	97 fb       	bst	r25, 7
    1828:	0e f4       	brtc	.+2      	; 0x182c <__floatdisf+0x6>
    182a:	48 d0       	rcall	.+144    	; 0x18bc <__fp_negdi>
    182c:	01 c0       	rjmp	.+2      	; 0x1830 <__fp_di2sf>

0000182e <__floatundisf>:
    182e:	e8 94       	clt

00001830 <__fp_di2sf>:
    1830:	f9 2f       	mov	r31, r25
    1832:	96 eb       	ldi	r25, 0xB6	; 182
    1834:	ff 23       	and	r31, r31
    1836:	81 f0       	breq	.+32     	; 0x1858 <__fp_di2sf+0x28>
    1838:	12 16       	cp	r1, r18
    183a:	13 06       	cpc	r1, r19
    183c:	14 06       	cpc	r1, r20
    183e:	44 0b       	sbc	r20, r20
    1840:	93 95       	inc	r25
    1842:	f6 95       	lsr	r31
    1844:	87 95       	ror	r24
    1846:	77 95       	ror	r23
    1848:	67 95       	ror	r22
    184a:	57 95       	ror	r21
    184c:	40 40       	sbci	r20, 0x00	; 0
    184e:	ff 23       	and	r31, r31
    1850:	b9 f7       	brne	.-18     	; 0x1840 <__fp_di2sf+0x10>
    1852:	1b c0       	rjmp	.+54     	; 0x188a <__fp_di2sf+0x5a>
    1854:	99 27       	eor	r25, r25
    1856:	08 95       	ret
    1858:	88 23       	and	r24, r24
    185a:	51 f4       	brne	.+20     	; 0x1870 <__fp_di2sf+0x40>
    185c:	98 50       	subi	r25, 0x08	; 8
    185e:	d2 f7       	brpl	.-12     	; 0x1854 <__fp_di2sf+0x24>
    1860:	87 2b       	or	r24, r23
    1862:	76 2f       	mov	r23, r22
    1864:	65 2f       	mov	r22, r21
    1866:	54 2f       	mov	r21, r20
    1868:	43 2f       	mov	r20, r19
    186a:	32 2f       	mov	r19, r18
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	b1 f3       	breq	.-20     	; 0x185c <__fp_di2sf+0x2c>
    1870:	12 16       	cp	r1, r18
    1872:	13 06       	cpc	r1, r19
    1874:	14 06       	cpc	r1, r20
    1876:	44 0b       	sbc	r20, r20
    1878:	88 23       	and	r24, r24
    187a:	3a f0       	brmi	.+14     	; 0x188a <__fp_di2sf+0x5a>
    187c:	9a 95       	dec	r25
    187e:	44 0f       	add	r20, r20
    1880:	55 1f       	adc	r21, r21
    1882:	66 1f       	adc	r22, r22
    1884:	77 1f       	adc	r23, r23
    1886:	88 1f       	adc	r24, r24
    1888:	ca f7       	brpl	.-14     	; 0x187c <__fp_di2sf+0x4c>
    188a:	55 23       	and	r21, r21
    188c:	4a f4       	brpl	.+18     	; 0x18a0 <__fp_di2sf+0x70>
    188e:	44 0f       	add	r20, r20
    1890:	55 1f       	adc	r21, r21
    1892:	11 f4       	brne	.+4      	; 0x1898 <__fp_di2sf+0x68>
    1894:	60 ff       	sbrs	r22, 0
    1896:	04 c0       	rjmp	.+8      	; 0x18a0 <__fp_di2sf+0x70>
    1898:	6f 5f       	subi	r22, 0xFF	; 255
    189a:	7f 4f       	sbci	r23, 0xFF	; 255
    189c:	8f 4f       	sbci	r24, 0xFF	; 255
    189e:	9f 4f       	sbci	r25, 0xFF	; 255
    18a0:	88 0f       	add	r24, r24
    18a2:	96 95       	lsr	r25
    18a4:	87 95       	ror	r24
    18a6:	97 f9       	bld	r25, 7
    18a8:	08 95       	ret

000018aa <__fp_inf>:
    18aa:	97 f9       	bld	r25, 7
    18ac:	9f 67       	ori	r25, 0x7F	; 127
    18ae:	80 e8       	ldi	r24, 0x80	; 128
    18b0:	70 e0       	ldi	r23, 0x00	; 0
    18b2:	60 e0       	ldi	r22, 0x00	; 0
    18b4:	08 95       	ret

000018b6 <__fp_nan>:
    18b6:	9f ef       	ldi	r25, 0xFF	; 255
    18b8:	80 ec       	ldi	r24, 0xC0	; 192
    18ba:	08 95       	ret

000018bc <__fp_negdi>:
    18bc:	90 95       	com	r25
    18be:	80 95       	com	r24
    18c0:	70 95       	com	r23
    18c2:	60 95       	com	r22
    18c4:	50 95       	com	r21
    18c6:	40 95       	com	r20
    18c8:	30 95       	com	r19
    18ca:	21 95       	neg	r18
    18cc:	3f 4f       	sbci	r19, 0xFF	; 255
    18ce:	4f 4f       	sbci	r20, 0xFF	; 255
    18d0:	5f 4f       	sbci	r21, 0xFF	; 255
    18d2:	6f 4f       	sbci	r22, 0xFF	; 255
    18d4:	7f 4f       	sbci	r23, 0xFF	; 255
    18d6:	8f 4f       	sbci	r24, 0xFF	; 255
    18d8:	9f 4f       	sbci	r25, 0xFF	; 255
    18da:	08 95       	ret

000018dc <__fp_pscA>:
    18dc:	00 24       	eor	r0, r0
    18de:	0a 94       	dec	r0
    18e0:	16 16       	cp	r1, r22
    18e2:	17 06       	cpc	r1, r23
    18e4:	18 06       	cpc	r1, r24
    18e6:	09 06       	cpc	r0, r25
    18e8:	08 95       	ret

000018ea <__fp_pscB>:
    18ea:	00 24       	eor	r0, r0
    18ec:	0a 94       	dec	r0
    18ee:	12 16       	cp	r1, r18
    18f0:	13 06       	cpc	r1, r19
    18f2:	14 06       	cpc	r1, r20
    18f4:	05 06       	cpc	r0, r21
    18f6:	08 95       	ret

000018f8 <__fp_round>:
    18f8:	09 2e       	mov	r0, r25
    18fa:	03 94       	inc	r0
    18fc:	00 0c       	add	r0, r0
    18fe:	11 f4       	brne	.+4      	; 0x1904 <__fp_round+0xc>
    1900:	88 23       	and	r24, r24
    1902:	52 f0       	brmi	.+20     	; 0x1918 <__fp_round+0x20>
    1904:	bb 0f       	add	r27, r27
    1906:	40 f4       	brcc	.+16     	; 0x1918 <__fp_round+0x20>
    1908:	bf 2b       	or	r27, r31
    190a:	11 f4       	brne	.+4      	; 0x1910 <__fp_round+0x18>
    190c:	60 ff       	sbrs	r22, 0
    190e:	04 c0       	rjmp	.+8      	; 0x1918 <__fp_round+0x20>
    1910:	6f 5f       	subi	r22, 0xFF	; 255
    1912:	7f 4f       	sbci	r23, 0xFF	; 255
    1914:	8f 4f       	sbci	r24, 0xFF	; 255
    1916:	9f 4f       	sbci	r25, 0xFF	; 255
    1918:	08 95       	ret

0000191a <__fp_split3>:
    191a:	57 fd       	sbrc	r21, 7
    191c:	90 58       	subi	r25, 0x80	; 128
    191e:	44 0f       	add	r20, r20
    1920:	55 1f       	adc	r21, r21
    1922:	59 f0       	breq	.+22     	; 0x193a <__fp_splitA+0x10>
    1924:	5f 3f       	cpi	r21, 0xFF	; 255
    1926:	71 f0       	breq	.+28     	; 0x1944 <__fp_splitA+0x1a>
    1928:	47 95       	ror	r20

0000192a <__fp_splitA>:
    192a:	88 0f       	add	r24, r24
    192c:	97 fb       	bst	r25, 7
    192e:	99 1f       	adc	r25, r25
    1930:	61 f0       	breq	.+24     	; 0x194a <__fp_splitA+0x20>
    1932:	9f 3f       	cpi	r25, 0xFF	; 255
    1934:	79 f0       	breq	.+30     	; 0x1954 <__fp_splitA+0x2a>
    1936:	87 95       	ror	r24
    1938:	08 95       	ret
    193a:	12 16       	cp	r1, r18
    193c:	13 06       	cpc	r1, r19
    193e:	14 06       	cpc	r1, r20
    1940:	55 1f       	adc	r21, r21
    1942:	f2 cf       	rjmp	.-28     	; 0x1928 <__fp_split3+0xe>
    1944:	46 95       	lsr	r20
    1946:	f1 df       	rcall	.-30     	; 0x192a <__fp_splitA>
    1948:	08 c0       	rjmp	.+16     	; 0x195a <__fp_splitA+0x30>
    194a:	16 16       	cp	r1, r22
    194c:	17 06       	cpc	r1, r23
    194e:	18 06       	cpc	r1, r24
    1950:	99 1f       	adc	r25, r25
    1952:	f1 cf       	rjmp	.-30     	; 0x1936 <__fp_splitA+0xc>
    1954:	86 95       	lsr	r24
    1956:	71 05       	cpc	r23, r1
    1958:	61 05       	cpc	r22, r1
    195a:	08 94       	sec
    195c:	08 95       	ret

0000195e <__fp_zero>:
    195e:	e8 94       	clt

00001960 <__fp_szero>:
    1960:	bb 27       	eor	r27, r27
    1962:	66 27       	eor	r22, r22
    1964:	77 27       	eor	r23, r23
    1966:	cb 01       	movw	r24, r22
    1968:	97 f9       	bld	r25, 7
    196a:	08 95       	ret

0000196c <__mulsf3>:
    196c:	0b d0       	rcall	.+22     	; 0x1984 <__mulsf3x>
    196e:	c4 cf       	rjmp	.-120    	; 0x18f8 <__fp_round>
    1970:	b5 df       	rcall	.-150    	; 0x18dc <__fp_pscA>
    1972:	28 f0       	brcs	.+10     	; 0x197e <__mulsf3+0x12>
    1974:	ba df       	rcall	.-140    	; 0x18ea <__fp_pscB>
    1976:	18 f0       	brcs	.+6      	; 0x197e <__mulsf3+0x12>
    1978:	95 23       	and	r25, r21
    197a:	09 f0       	breq	.+2      	; 0x197e <__mulsf3+0x12>
    197c:	96 cf       	rjmp	.-212    	; 0x18aa <__fp_inf>
    197e:	9b cf       	rjmp	.-202    	; 0x18b6 <__fp_nan>
    1980:	11 24       	eor	r1, r1
    1982:	ee cf       	rjmp	.-36     	; 0x1960 <__fp_szero>

00001984 <__mulsf3x>:
    1984:	ca df       	rcall	.-108    	; 0x191a <__fp_split3>
    1986:	a0 f3       	brcs	.-24     	; 0x1970 <__mulsf3+0x4>

00001988 <__mulsf3_pse>:
    1988:	95 9f       	mul	r25, r21
    198a:	d1 f3       	breq	.-12     	; 0x1980 <__mulsf3+0x14>
    198c:	95 0f       	add	r25, r21
    198e:	50 e0       	ldi	r21, 0x00	; 0
    1990:	55 1f       	adc	r21, r21
    1992:	62 9f       	mul	r22, r18
    1994:	f0 01       	movw	r30, r0
    1996:	72 9f       	mul	r23, r18
    1998:	bb 27       	eor	r27, r27
    199a:	f0 0d       	add	r31, r0
    199c:	b1 1d       	adc	r27, r1
    199e:	63 9f       	mul	r22, r19
    19a0:	aa 27       	eor	r26, r26
    19a2:	f0 0d       	add	r31, r0
    19a4:	b1 1d       	adc	r27, r1
    19a6:	aa 1f       	adc	r26, r26
    19a8:	64 9f       	mul	r22, r20
    19aa:	66 27       	eor	r22, r22
    19ac:	b0 0d       	add	r27, r0
    19ae:	a1 1d       	adc	r26, r1
    19b0:	66 1f       	adc	r22, r22
    19b2:	82 9f       	mul	r24, r18
    19b4:	22 27       	eor	r18, r18
    19b6:	b0 0d       	add	r27, r0
    19b8:	a1 1d       	adc	r26, r1
    19ba:	62 1f       	adc	r22, r18
    19bc:	73 9f       	mul	r23, r19
    19be:	b0 0d       	add	r27, r0
    19c0:	a1 1d       	adc	r26, r1
    19c2:	62 1f       	adc	r22, r18
    19c4:	83 9f       	mul	r24, r19
    19c6:	a0 0d       	add	r26, r0
    19c8:	61 1d       	adc	r22, r1
    19ca:	22 1f       	adc	r18, r18
    19cc:	74 9f       	mul	r23, r20
    19ce:	33 27       	eor	r19, r19
    19d0:	a0 0d       	add	r26, r0
    19d2:	61 1d       	adc	r22, r1
    19d4:	23 1f       	adc	r18, r19
    19d6:	84 9f       	mul	r24, r20
    19d8:	60 0d       	add	r22, r0
    19da:	21 1d       	adc	r18, r1
    19dc:	82 2f       	mov	r24, r18
    19de:	76 2f       	mov	r23, r22
    19e0:	6a 2f       	mov	r22, r26
    19e2:	11 24       	eor	r1, r1
    19e4:	9f 57       	subi	r25, 0x7F	; 127
    19e6:	50 40       	sbci	r21, 0x00	; 0
    19e8:	8a f0       	brmi	.+34     	; 0x1a0c <__mulsf3_pse+0x84>
    19ea:	e1 f0       	breq	.+56     	; 0x1a24 <__mulsf3_pse+0x9c>
    19ec:	88 23       	and	r24, r24
    19ee:	4a f0       	brmi	.+18     	; 0x1a02 <__mulsf3_pse+0x7a>
    19f0:	ee 0f       	add	r30, r30
    19f2:	ff 1f       	adc	r31, r31
    19f4:	bb 1f       	adc	r27, r27
    19f6:	66 1f       	adc	r22, r22
    19f8:	77 1f       	adc	r23, r23
    19fa:	88 1f       	adc	r24, r24
    19fc:	91 50       	subi	r25, 0x01	; 1
    19fe:	50 40       	sbci	r21, 0x00	; 0
    1a00:	a9 f7       	brne	.-22     	; 0x19ec <__mulsf3_pse+0x64>
    1a02:	9e 3f       	cpi	r25, 0xFE	; 254
    1a04:	51 05       	cpc	r21, r1
    1a06:	70 f0       	brcs	.+28     	; 0x1a24 <__mulsf3_pse+0x9c>
    1a08:	50 cf       	rjmp	.-352    	; 0x18aa <__fp_inf>
    1a0a:	aa cf       	rjmp	.-172    	; 0x1960 <__fp_szero>
    1a0c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a0e:	ec f3       	brlt	.-6      	; 0x1a0a <__mulsf3_pse+0x82>
    1a10:	98 3e       	cpi	r25, 0xE8	; 232
    1a12:	dc f3       	brlt	.-10     	; 0x1a0a <__mulsf3_pse+0x82>
    1a14:	86 95       	lsr	r24
    1a16:	77 95       	ror	r23
    1a18:	67 95       	ror	r22
    1a1a:	b7 95       	ror	r27
    1a1c:	f7 95       	ror	r31
    1a1e:	e7 95       	ror	r30
    1a20:	9f 5f       	subi	r25, 0xFF	; 255
    1a22:	c1 f7       	brne	.-16     	; 0x1a14 <__mulsf3_pse+0x8c>
    1a24:	fe 2b       	or	r31, r30
    1a26:	88 0f       	add	r24, r24
    1a28:	91 1d       	adc	r25, r1
    1a2a:	96 95       	lsr	r25
    1a2c:	87 95       	ror	r24
    1a2e:	97 f9       	bld	r25, 7
    1a30:	08 95       	ret

00001a32 <UARTEnableDisableReceiver>:
	Status = TRUE;

Exit:

	return Status;
}
    1a32:	88 23       	and	r24, r24
    1a34:	19 f0       	breq	.+6      	; 0x1a3c <UARTEnableDisableReceiver+0xa>
    1a36:	81 30       	cpi	r24, 0x01	; 1
    1a38:	d9 f0       	breq	.+54     	; 0x1a70 <UARTEnableDisableReceiver+0x3e>
    1a3a:	2e c0       	rjmp	.+92     	; 0x1a98 <UARTEnableDisableReceiver+0x66>
    1a3c:	80 91 16 06 	lds	r24, 0x0616
    1a40:	88 23       	and	r24, r24
    1a42:	61 f1       	breq	.+88     	; 0x1a9c <UARTEnableDisableReceiver+0x6a>
    1a44:	66 23       	and	r22, r22
    1a46:	51 f0       	breq	.+20     	; 0x1a5c <UARTEnableDisableReceiver+0x2a>
    1a48:	e1 ec       	ldi	r30, 0xC1	; 193
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	80 61       	ori	r24, 0x10	; 16
    1a50:	80 83       	st	Z, r24
    1a52:	80 91 17 06 	lds	r24, 0x0617
    1a56:	81 11       	cpse	r24, r1
    1a58:	11 c0       	rjmp	.+34     	; 0x1a7c <UARTEnableDisableReceiver+0x4a>
    1a5a:	22 c0       	rjmp	.+68     	; 0x1aa0 <UARTEnableDisableReceiver+0x6e>
    1a5c:	e1 ec       	ldi	r30, 0xC1	; 193
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	8f 7e       	andi	r24, 0xEF	; 239
    1a64:	80 83       	st	Z, r24
    1a66:	80 91 17 06 	lds	r24, 0x0617
    1a6a:	81 11       	cpse	r24, r1
    1a6c:	0e c0       	rjmp	.+28     	; 0x1a8a <UARTEnableDisableReceiver+0x58>
    1a6e:	1a c0       	rjmp	.+52     	; 0x1aa4 <UARTEnableDisableReceiver+0x72>
    1a70:	80 91 17 06 	lds	r24, 0x0617
    1a74:	88 23       	and	r24, r24
    1a76:	c1 f0       	breq	.+48     	; 0x1aa8 <UARTEnableDisableReceiver+0x76>
    1a78:	66 23       	and	r22, r22
    1a7a:	39 f0       	breq	.+14     	; 0x1a8a <UARTEnableDisableReceiver+0x58>
    1a7c:	e9 ec       	ldi	r30, 0xC9	; 201
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	80 61       	ori	r24, 0x10	; 16
    1a84:	80 83       	st	Z, r24
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	08 95       	ret
    1a8a:	e9 ec       	ldi	r30, 0xC9	; 201
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	8f 7e       	andi	r24, 0xEF	; 239
    1a92:	80 83       	st	Z, r24
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	08 95       	ret
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	08 95       	ret
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	08 95       	ret
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	08 95       	ret
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	08 95       	ret
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	08 95       	ret

00001aac <UARTEnableDisableMPCM>:
    1aac:	e8 2f       	mov	r30, r24
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	ec 5e       	subi	r30, 0xEC	; 236
    1ab2:	f9 4f       	sbci	r31, 0xF9	; 249
    1ab4:	90 81       	ld	r25, Z
    1ab6:	99 23       	and	r25, r25
    1ab8:	99 f1       	breq	.+102    	; 0x1b20 <UARTEnableDisableMPCM+0x74>
    1aba:	88 23       	and	r24, r24
    1abc:	19 f0       	breq	.+6      	; 0x1ac4 <UARTEnableDisableMPCM+0x18>
    1abe:	81 30       	cpi	r24, 0x01	; 1
    1ac0:	d9 f0       	breq	.+54     	; 0x1af8 <UARTEnableDisableMPCM+0x4c>
    1ac2:	30 c0       	rjmp	.+96     	; 0x1b24 <UARTEnableDisableMPCM+0x78>
    1ac4:	80 91 16 06 	lds	r24, 0x0616
    1ac8:	88 23       	and	r24, r24
    1aca:	71 f1       	breq	.+92     	; 0x1b28 <UARTEnableDisableMPCM+0x7c>
    1acc:	66 23       	and	r22, r22
    1ace:	51 f0       	breq	.+20     	; 0x1ae4 <UARTEnableDisableMPCM+0x38>
    1ad0:	e0 ec       	ldi	r30, 0xC0	; 192
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	81 60       	ori	r24, 0x01	; 1
    1ad8:	80 83       	st	Z, r24
    1ada:	80 91 17 06 	lds	r24, 0x0617
    1ade:	81 11       	cpse	r24, r1
    1ae0:	11 c0       	rjmp	.+34     	; 0x1b04 <UARTEnableDisableMPCM+0x58>
    1ae2:	24 c0       	rjmp	.+72     	; 0x1b2c <UARTEnableDisableMPCM+0x80>
    1ae4:	e0 ec       	ldi	r30, 0xC0	; 192
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	8e 7f       	andi	r24, 0xFE	; 254
    1aec:	80 83       	st	Z, r24
    1aee:	80 91 17 06 	lds	r24, 0x0617
    1af2:	81 11       	cpse	r24, r1
    1af4:	0e c0       	rjmp	.+28     	; 0x1b12 <UARTEnableDisableMPCM+0x66>
    1af6:	1c c0       	rjmp	.+56     	; 0x1b30 <UARTEnableDisableMPCM+0x84>
    1af8:	80 91 17 06 	lds	r24, 0x0617
    1afc:	88 23       	and	r24, r24
    1afe:	d1 f0       	breq	.+52     	; 0x1b34 <UARTEnableDisableMPCM+0x88>
    1b00:	66 23       	and	r22, r22
    1b02:	39 f0       	breq	.+14     	; 0x1b12 <UARTEnableDisableMPCM+0x66>
    1b04:	e8 ec       	ldi	r30, 0xC8	; 200
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	81 60       	ori	r24, 0x01	; 1
    1b0c:	80 83       	st	Z, r24
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	08 95       	ret
    1b12:	e8 ec       	ldi	r30, 0xC8	; 200
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	8e 7f       	andi	r24, 0xFE	; 254
    1b1a:	80 83       	st	Z, r24
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	08 95       	ret
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	08 95       	ret
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	08 95       	ret
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	08 95       	ret
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	08 95       	ret
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	08 95       	ret
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	08 95       	ret

00001b38 <InitializeUARTTimer>:
	
	//
	// Set Timer/Counter Control Register A to normal mode of operation.
	//
	
	TCCR0A = (0x1 << WGM01);
    1b38:	82 e0       	ldi	r24, 0x02	; 2
    1b3a:	84 bd       	out	0x24, r24	; 36
	//
	// Set Timer/Counter Control Register B to have a clock with pre-scalar = 1024.
	// The timer will expire every 32.64 ms.
	//
	
	TCCR0B = 0;
    1b3c:	15 bc       	out	0x25, r1	; 37
	
	//
	// Set Timer/Counter Register to 0xFF
	//
	
	TCNT0 = 0x0;
    1b3e:	16 bc       	out	0x26, r1	; 38
	
	//
	// Set OCR0A and OCR0B to zero
	//
	
	OCR0A = 0;
    1b40:	17 bc       	out	0x27, r1	; 39
	
	OCR0B = 0;
    1b42:	18 bc       	out	0x28, r1	; 40
	
	//
	// Enable Timer/Counter0 compare Interrupt
	//
	
	TIMSK0 = (0x1 << OCIE0A);
    1b44:	80 93 6e 00 	sts	0x006E, r24
    1b48:	08 95       	ret

00001b4a <InitUARTSync>:
	TCCR0B = 0x0;								\
}

bool
InitUARTSync(UART_NUMBER UARTNumber, BAUD_RATE BaudRate, UART_MODE UARTMode)
{
    1b4a:	cf 93       	push	r28

	bool Status = TRUE;
	
	gIsMPCMEnabled[UARTNumber] = UARTMode;
    1b4c:	e8 2f       	mov	r30, r24
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	ec 5e       	subi	r30, 0xEC	; 236
    1b52:	f9 4f       	sbci	r31, 0xF9	; 249
    1b54:	40 83       	st	Z, r20
	
	switch (UARTNumber)
    1b56:	88 23       	and	r24, r24
    1b58:	19 f0       	breq	.+6      	; 0x1b60 <InitUARTSync+0x16>
    1b5a:	81 30       	cpi	r24, 0x01	; 1
    1b5c:	c9 f0       	breq	.+50     	; 0x1b90 <InitUARTSync+0x46>
    1b5e:	30 c0       	rjmp	.+96     	; 0x1bc0 <InitUARTSync+0x76>
	{

		case 0:
		{
			UBRR0H = (unsigned char) (BaudRate >> 8);
    1b60:	70 93 c5 00 	sts	0x00C5, r23
	
			UBRR0L = (unsigned char) BaudRate;
    1b64:	60 93 c4 00 	sts	0x00C4, r22
	
			//
			// Enable Receiver and Transmitter.
			//
	
			UCSR0B = ((0x1 << TXEN0) | (0x1 << RXEN0) | (0x1 << RXCIE0));
    1b68:	88 e9       	ldi	r24, 0x98	; 152
    1b6a:	80 93 c1 00 	sts	0x00C1, r24
			//
			// USART Control and Status Register A
			// Set MPCM mode
			//

			if (UARTMode == MULTI_PROCESSOR_COMMUNICATION_MODE)
    1b6e:	41 30       	cpi	r20, 0x01	; 1
    1b70:	39 f4       	brne	.+14     	; 0x1b80 <InitUARTSync+0x36>
			{
				//
				// Asynchronous USART, Parity Disabled, Stop Bits - 1, Character Size - 9 bits.
				//
				
				UCSR0C = ((0x1 << UCSZ00) | (0x1 << UCSZ01) | (0x1 << UCSZ02));
    1b72:	86 e0       	ldi	r24, 0x06	; 6
    1b74:	80 93 c2 00 	sts	0x00C2, r24
				
				UCSR0A = (0x1 << MPCM0);
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	80 93 c0 00 	sts	0x00C0, r24
    1b7e:	03 c0       	rjmp	.+6      	; 0x1b86 <InitUARTSync+0x3c>
				//
				// Normal Mode
				// Asynchronous USART, Parity Disabled, Stop Bits - 1, Character Size - 8 bits.
				//
				
				UCSR0C = ((0x1 << UCSZ00) | (0x1 << UCSZ01));
    1b80:	86 e0       	ldi	r24, 0x06	; 6
    1b82:	80 93 c2 00 	sts	0x00C2, r24
			}

			gUARTInitialized[0] = TRUE;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	80 93 16 06 	sts	0x0616, r24

bool
InitUARTSync(UART_NUMBER UARTNumber, BAUD_RATE BaudRate, UART_MODE UARTMode)
{

	bool Status = TRUE;
    1b8c:	c1 e0       	ldi	r28, 0x01	; 1
				UCSR0C = ((0x1 << UCSZ00) | (0x1 << UCSZ01));
			}

			gUARTInitialized[0] = TRUE;

			break;
    1b8e:	19 c0       	rjmp	.+50     	; 0x1bc2 <InitUARTSync+0x78>
	
		}
		case 1:
		{

			UBRR1H = (unsigned char) (BaudRate >> 8);
    1b90:	70 93 cd 00 	sts	0x00CD, r23
	
			UBRR1L = (unsigned char) BaudRate;
    1b94:	60 93 cc 00 	sts	0x00CC, r22
	
			//
			// Enable Receiver and Transmitter.
			//
	
			UCSR1B = ((0x1 << TXEN1) | (0x1 << RXEN1) | (0x1 << RXCIE1));
    1b98:	88 e9       	ldi	r24, 0x98	; 152
    1b9a:	80 93 c9 00 	sts	0x00C9, r24
			//
			// USART Control and Status Register A.
			// Set MPCM Mode
			//

			if (UARTMode == MULTI_PROCESSOR_COMMUNICATION_MODE)
    1b9e:	41 30       	cpi	r20, 0x01	; 1
    1ba0:	39 f4       	brne	.+14     	; 0x1bb0 <InitUARTSync+0x66>
			{
				// Asynchronous USART, Parity Disabled, Stop Bits - 1, Character Size - 9 bits.
				//
				
				UCSR1C = ((0x1 << UCSZ10) | (0x1 << UCSZ11) | (0x1 << UCSZ12));
    1ba2:	86 e0       	ldi	r24, 0x06	; 6
    1ba4:	80 93 ca 00 	sts	0x00CA, r24
				
				UCSR1A = (0x1 << MPCM1);
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	80 93 c8 00 	sts	0x00C8, r24
    1bae:	03 c0       	rjmp	.+6      	; 0x1bb6 <InitUARTSync+0x6c>
				// 
				// Normal Mode
				// Asynchronous USART, Parity Disabled, Stop Bits - 1, Character Size - 8 bits.
				//
				
				UCSR1C = ((0x1 << UCSZ10) | (0x1 << UCSZ11));
    1bb0:	86 e0       	ldi	r24, 0x06	; 6
    1bb2:	80 93 ca 00 	sts	0x00CA, r24
			}

			gUARTInitialized[1] = TRUE;
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	80 93 17 06 	sts	0x0617, r24

bool
InitUARTSync(UART_NUMBER UARTNumber, BAUD_RATE BaudRate, UART_MODE UARTMode)
{

	bool Status = TRUE;
    1bbc:	c1 e0       	ldi	r28, 0x01	; 1
				UCSR1C = ((0x1 << UCSZ10) | (0x1 << UCSZ11));
			}

			gUARTInitialized[1] = TRUE;

			break;
    1bbe:	01 c0       	rjmp	.+2      	; 0x1bc2 <InitUARTSync+0x78>

		}
		default:
		{
			Status = FALSE;
    1bc0:	c0 e0       	ldi	r28, 0x00	; 0

			break;
		}
	}
	
	InitializeUARTTimer();
    1bc2:	ba df       	rcall	.-140    	; 0x1b38 <InitializeUARTTimer>

	return Status;

}
    1bc4:	8c 2f       	mov	r24, r28
    1bc6:	cf 91       	pop	r28
    1bc8:	08 95       	ret

00001bca <UARTTransmit>:
	TIMSK0 = (0x1 << OCIE0A);
}

unsigned long
UARTTransmit(UART_NUMBER UARTNumber, PVOID TransmitValue, unsigned long Length, bool IsAddress)
{
    1bca:	af 92       	push	r10
    1bcc:	bf 92       	push	r11
    1bce:	cf 92       	push	r12
    1bd0:	df 92       	push	r13
    1bd2:	ef 92       	push	r14
    1bd4:	ff 92       	push	r15
    1bd6:	0f 93       	push	r16
    1bd8:	1f 93       	push	r17
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
    1bde:	5b 01       	movw	r10, r22
	unsigned char *Value = (unsigned char *) TransmitValue;
	
	unsigned long IndexI = 0;
	
	switch (UARTNumber)
    1be0:	88 23       	and	r24, r24
    1be2:	19 f0       	breq	.+6      	; 0x1bea <UARTTransmit+0x20>
    1be4:	81 30       	cpi	r24, 0x01	; 1
    1be6:	c1 f1       	breq	.+112    	; 0x1c58 <UARTTransmit+0x8e>
    1be8:	73 c0       	rjmp	.+230    	; 0x1cd0 <UARTTransmit+0x106>
	{
		case 0:
		{
			if (!gUARTInitialized[0])
    1bea:	80 91 16 06 	lds	r24, 0x0616
    1bee:	88 23       	and	r24, r24
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <UARTTransmit+0x2a>
    1bf2:	72 c0       	rjmp	.+228    	; 0x1cd8 <UARTTransmit+0x10e>
			{
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
    1bf4:	21 15       	cp	r18, r1
    1bf6:	31 05       	cpc	r19, r1
    1bf8:	41 05       	cpc	r20, r1
    1bfa:	51 05       	cpc	r21, r1
    1bfc:	09 f4       	brne	.+2      	; 0x1c00 <UARTTransmit+0x36>
    1bfe:	73 c0       	rjmp	.+230    	; 0x1ce6 <UARTTransmit+0x11c>
    1c00:	c1 2c       	mov	r12, r1
    1c02:	d1 2c       	mov	r13, r1
    1c04:	76 01       	movw	r14, r12
			{
				while (!(UCSR0A & (1 << UDRE0)));
    1c06:	e0 ec       	ldi	r30, 0xC0	; 192
    1c08:	f0 e0       	ldi	r31, 0x00	; 0

				//
				// Check if bit 9 is enabled.
				//

				if (gIsMPCMEnabled[0]) 
    1c0a:	84 e1       	ldi	r24, 0x14	; 20
    1c0c:	96 e0       	ldi	r25, 0x06	; 6
					{
						UCSR0B |= (0x1 << TXB80);
					}
					else
					{
						UCSR0B &= ~(0x1 << TXB80);
    1c0e:	61 ec       	ldi	r22, 0xC1	; 193
    1c10:	70 e0       	ldi	r23, 0x00	; 0

				//
				// Transmit the value
				//

				UDR0 = *Value;
    1c12:	c6 ec       	ldi	r28, 0xC6	; 198
    1c14:	d0 e0       	ldi	r29, 0x00	; 0
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
			{
				while (!(UCSR0A & (1 << UDRE0)));
    1c16:	10 81       	ld	r17, Z
    1c18:	15 ff       	sbrs	r17, 5
    1c1a:	fd cf       	rjmp	.-6      	; 0x1c16 <UARTTransmit+0x4c>

				//
				// Check if bit 9 is enabled.
				//

				if (gIsMPCMEnabled[0]) 
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	1c 91       	ld	r17, X
    1c20:	11 23       	and	r17, r17
    1c22:	59 f0       	breq	.+22     	; 0x1c3a <UARTTransmit+0x70>
				{
					if (IsAddress)
    1c24:	00 23       	and	r16, r16
    1c26:	29 f0       	breq	.+10     	; 0x1c32 <UARTTransmit+0x68>
					{
						UCSR0B |= (0x1 << TXB80);
    1c28:	db 01       	movw	r26, r22
    1c2a:	1c 91       	ld	r17, X
    1c2c:	11 60       	ori	r17, 0x01	; 1
    1c2e:	1c 93       	st	X, r17
    1c30:	04 c0       	rjmp	.+8      	; 0x1c3a <UARTTransmit+0x70>
					}
					else
					{
						UCSR0B &= ~(0x1 << TXB80);
    1c32:	db 01       	movw	r26, r22
    1c34:	1c 91       	ld	r17, X
    1c36:	1e 7f       	andi	r17, 0xFE	; 254
    1c38:	1c 93       	st	X, r17

				//
				// Transmit the value
				//

				UDR0 = *Value;
    1c3a:	d5 01       	movw	r26, r10
    1c3c:	1d 91       	ld	r17, X+
    1c3e:	5d 01       	movw	r10, r26
    1c40:	18 83       	st	Y, r17
			if (!gUARTInitialized[0])
			{
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
    1c42:	bf ef       	ldi	r27, 0xFF	; 255
    1c44:	cb 1a       	sub	r12, r27
    1c46:	db 0a       	sbc	r13, r27
    1c48:	eb 0a       	sbc	r14, r27
    1c4a:	fb 0a       	sbc	r15, r27
    1c4c:	c2 16       	cp	r12, r18
    1c4e:	d3 06       	cpc	r13, r19
    1c50:	e4 06       	cpc	r14, r20
    1c52:	f5 06       	cpc	r15, r21
    1c54:	01 f7       	brne	.-64     	; 0x1c16 <UARTTransmit+0x4c>
    1c56:	47 c0       	rjmp	.+142    	; 0x1ce6 <UARTTransmit+0x11c>
			break;

		}
		case 1:
		{
			if (!gUARTInitialized[1])
    1c58:	80 91 17 06 	lds	r24, 0x0617
    1c5c:	88 23       	and	r24, r24
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <UARTTransmit+0x98>
    1c60:	3f c0       	rjmp	.+126    	; 0x1ce0 <UARTTransmit+0x116>
			{
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
    1c62:	21 15       	cp	r18, r1
    1c64:	31 05       	cpc	r19, r1
    1c66:	41 05       	cpc	r20, r1
    1c68:	51 05       	cpc	r21, r1
    1c6a:	e9 f1       	breq	.+122    	; 0x1ce6 <UARTTransmit+0x11c>
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	dc 01       	movw	r26, r24
			{

				while (!(UCSR1A & (1 << UDRE1)));
    1c72:	e8 ec       	ldi	r30, 0xC8	; 200
    1c74:	f0 e0       	ldi	r31, 0x00	; 0

				//
				// Check if bit 9 is enabled.
				//

				if (gIsMPCMEnabled[1])
    1c76:	0f 2e       	mov	r0, r31
    1c78:	f5 e1       	ldi	r31, 0x15	; 21
    1c7a:	ef 2e       	mov	r14, r31
    1c7c:	f6 e0       	ldi	r31, 0x06	; 6
    1c7e:	ff 2e       	mov	r15, r31
    1c80:	f0 2d       	mov	r31, r0
					{
						UCSR1B |= (0x1 << TXB81);
					}
					else
					{
						UCSR1B &= ~(0x1 << TXB81);
    1c82:	0f 2e       	mov	r0, r31
    1c84:	f9 ec       	ldi	r31, 0xC9	; 201
    1c86:	cf 2e       	mov	r12, r31
    1c88:	d1 2c       	mov	r13, r1
    1c8a:	f0 2d       	mov	r31, r0

				//
				// Transmit the value
				//

				UDR1 = *Value;
    1c8c:	6e ec       	ldi	r22, 0xCE	; 206
    1c8e:	70 e0       	ldi	r23, 0x00	; 0
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
			{

				while (!(UCSR1A & (1 << UDRE1)));
    1c90:	10 81       	ld	r17, Z
    1c92:	15 ff       	sbrs	r17, 5
    1c94:	fd cf       	rjmp	.-6      	; 0x1c90 <UARTTransmit+0xc6>

				//
				// Check if bit 9 is enabled.
				//

				if (gIsMPCMEnabled[1])
    1c96:	e7 01       	movw	r28, r14
    1c98:	18 81       	ld	r17, Y
    1c9a:	11 23       	and	r17, r17
    1c9c:	59 f0       	breq	.+22     	; 0x1cb4 <UARTTransmit+0xea>
				{
					if (IsAddress)
    1c9e:	00 23       	and	r16, r16
    1ca0:	29 f0       	breq	.+10     	; 0x1cac <UARTTransmit+0xe2>
					{
						UCSR1B |= (0x1 << TXB81);
    1ca2:	e6 01       	movw	r28, r12
    1ca4:	18 81       	ld	r17, Y
    1ca6:	11 60       	ori	r17, 0x01	; 1
    1ca8:	18 83       	st	Y, r17
    1caa:	04 c0       	rjmp	.+8      	; 0x1cb4 <UARTTransmit+0xea>
					}
					else
					{
						UCSR1B &= ~(0x1 << TXB81);
    1cac:	e6 01       	movw	r28, r12
    1cae:	18 81       	ld	r17, Y
    1cb0:	1e 7f       	andi	r17, 0xFE	; 254
    1cb2:	18 83       	st	Y, r17

				//
				// Transmit the value
				//

				UDR1 = *Value;
    1cb4:	e5 01       	movw	r28, r10
    1cb6:	19 91       	ld	r17, Y+
    1cb8:	5e 01       	movw	r10, r28
    1cba:	eb 01       	movw	r28, r22
    1cbc:	18 83       	st	Y, r17
			if (!gUARTInitialized[1])
			{
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
    1cbe:	01 96       	adiw	r24, 0x01	; 1
    1cc0:	a1 1d       	adc	r26, r1
    1cc2:	b1 1d       	adc	r27, r1
    1cc4:	82 17       	cp	r24, r18
    1cc6:	93 07       	cpc	r25, r19
    1cc8:	a4 07       	cpc	r26, r20
    1cca:	b5 07       	cpc	r27, r21
    1ccc:	09 f7       	brne	.-62     	; 0x1c90 <UARTTransmit+0xc6>
    1cce:	0b c0       	rjmp	.+22     	; 0x1ce6 <UARTTransmit+0x11c>
unsigned long
UARTTransmit(UART_NUMBER UARTNumber, PVOID TransmitValue, unsigned long Length, bool IsAddress)
{
	unsigned char *Value = (unsigned char *) TransmitValue;
	
	unsigned long IndexI = 0;
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	a9 01       	movw	r20, r18
    1cd6:	07 c0       	rjmp	.+14     	; 0x1ce6 <UARTTransmit+0x11c>
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	a9 01       	movw	r20, r18
    1cde:	03 c0       	rjmp	.+6      	; 0x1ce6 <UARTTransmit+0x11c>
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	a9 01       	movw	r20, r18

Exit:

	return IndexI;

}
    1ce6:	ca 01       	movw	r24, r20
    1ce8:	b9 01       	movw	r22, r18
    1cea:	df 91       	pop	r29
    1cec:	cf 91       	pop	r28
    1cee:	1f 91       	pop	r17
    1cf0:	0f 91       	pop	r16
    1cf2:	ff 90       	pop	r15
    1cf4:	ef 90       	pop	r14
    1cf6:	df 90       	pop	r13
    1cf8:	cf 90       	pop	r12
    1cfa:	bf 90       	pop	r11
    1cfc:	af 90       	pop	r10
    1cfe:	08 95       	ret

00001d00 <UARTTransmitAddress>:

}

unsigned long
UARTTransmitAddress(UART_NUMBER UARTNumber, unsigned char Address)
{
    1d00:	0f 93       	push	r16
    1d02:	cf 93       	push	r28
    1d04:	df 93       	push	r29
    1d06:	1f 92       	push	r1
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	69 83       	std	Y+1, r22	; 0x01
	//
	// Check if bit 9 is enabled
	//
	
	if (!gIsMPCMEnabled[UARTNumber])
    1d0e:	e8 2f       	mov	r30, r24
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	ec 5e       	subi	r30, 0xEC	; 236
    1d14:	f9 4f       	sbci	r31, 0xF9	; 249
    1d16:	90 81       	ld	r25, Z
    1d18:	99 23       	and	r25, r25
    1d1a:	51 f0       	breq	.+20     	; 0x1d30 <UARTTransmitAddress+0x30>
	{
		return 0;
	}
	
	return UARTTransmit(UARTNumber, &Address, sizeof(unsigned char), TRUE);
    1d1c:	01 e0       	ldi	r16, 0x01	; 1
    1d1e:	21 e0       	ldi	r18, 0x01	; 1
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e0       	ldi	r20, 0x00	; 0
    1d24:	50 e0       	ldi	r21, 0x00	; 0
    1d26:	be 01       	movw	r22, r28
    1d28:	6f 5f       	subi	r22, 0xFF	; 255
    1d2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2c:	4e df       	rcall	.-356    	; 0x1bca <UARTTransmit>
    1d2e:	03 c0       	rjmp	.+6      	; 0x1d36 <UARTTransmitAddress+0x36>
	// Check if bit 9 is enabled
	//
	
	if (!gIsMPCMEnabled[UARTNumber])
	{
		return 0;
    1d30:	60 e0       	ldi	r22, 0x00	; 0
    1d32:	70 e0       	ldi	r23, 0x00	; 0
    1d34:	cb 01       	movw	r24, r22
	}
	
	return UARTTransmit(UARTNumber, &Address, sizeof(unsigned char), TRUE);
}
    1d36:	0f 90       	pop	r0
    1d38:	df 91       	pop	r29
    1d3a:	cf 91       	pop	r28
    1d3c:	0f 91       	pop	r16
    1d3e:	08 95       	ret

00001d40 <UARTTransmitSync>:

unsigned long
UARTTransmitSync(UART_NUMBER UARTNumber, PVOID TransmitValue, unsigned long Length)
{
    1d40:	0f 93       	push	r16
	return UARTTransmit(UARTNumber, TransmitValue, Length, FALSE);
    1d42:	00 e0       	ldi	r16, 0x00	; 0
    1d44:	42 df       	rcall	.-380    	; 0x1bca <UARTTransmit>
}
    1d46:	0f 91       	pop	r16
    1d48:	08 95       	ret

00001d4a <UARTReceive>:

}

unsigned long
UARTReceive(UART_NUMBER UARTNumber, PVOID ReceiveValue, unsigned long Length, unsigned char WaitTimeInMs)
{
    1d4a:	2f 92       	push	r2
    1d4c:	3f 92       	push	r3
    1d4e:	4f 92       	push	r4
    1d50:	5f 92       	push	r5
    1d52:	6f 92       	push	r6
    1d54:	7f 92       	push	r7
    1d56:	8f 92       	push	r8
    1d58:	9f 92       	push	r9
    1d5a:	af 92       	push	r10
    1d5c:	bf 92       	push	r11
    1d5e:	cf 92       	push	r12
    1d60:	df 92       	push	r13
    1d62:	ef 92       	push	r14
    1d64:	ff 92       	push	r15
    1d66:	0f 93       	push	r16
    1d68:	1f 93       	push	r17
    1d6a:	cf 93       	push	r28
    1d6c:	df 93       	push	r29
    1d6e:	1b 01       	movw	r2, r22
    1d70:	49 01       	movw	r8, r18
    1d72:	5a 01       	movw	r10, r20

	unsigned char BitNine;

	unsigned long IndexI = 0;
	
	if (WaitTimeInMs > MAX_WAIT_TIME)
    1d74:	01 32       	cpi	r16, 0x21	; 33
    1d76:	08 f0       	brcs	.+2      	; 0x1d7a <UARTReceive+0x30>
    1d78:	a2 c0       	rjmp	.+324    	; 0x1ebe <UARTReceive+0x174>
	{
		goto Exit;
	}

	switch (UARTNumber)
    1d7a:	88 23       	and	r24, r24
    1d7c:	21 f0       	breq	.+8      	; 0x1d86 <UARTReceive+0x3c>
    1d7e:	81 30       	cpi	r24, 0x01	; 1
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <UARTReceive+0x3a>
    1d82:	4f c0       	rjmp	.+158    	; 0x1e22 <UARTReceive+0xd8>
    1d84:	a0 c0       	rjmp	.+320    	; 0x1ec6 <UARTReceive+0x17c>
	{
		case 0:
		{

			if (!gUARTInitialized[0])
    1d86:	80 91 16 06 	lds	r24, 0x0616
    1d8a:	88 23       	and	r24, r24
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <UARTReceive+0x46>
    1d8e:	9f c0       	rjmp	.+318    	; 0x1ece <UARTReceive+0x184>
			{
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
    1d90:	21 15       	cp	r18, r1
    1d92:	31 05       	cpc	r19, r1
    1d94:	41 05       	cpc	r20, r1
    1d96:	51 05       	cpc	r21, r1
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <UARTReceive+0x52>
    1d9a:	9d c0       	rjmp	.+314    	; 0x1ed6 <UARTReceive+0x18c>
    1d9c:	c1 2c       	mov	r12, r1
    1d9e:	d1 2c       	mov	r13, r1
    1da0:	76 01       	movw	r14, r12
				
					StopUARTTimer();
				}
				else
				{
					while (!(UCSR0A & (1 << RXC0)));
    1da2:	c0 ec       	ldi	r28, 0xC0	; 192
    1da4:	d0 e0       	ldi	r29, 0x00	; 0
			{

				if(WaitTimeInMs > 0)
				{
					
					StartUARTTimer(WaitTimeInMs);
    1da6:	15 e0       	ldi	r17, 0x05	; 5
    1da8:	40 2e       	mov	r4, r16
    1daa:	51 2c       	mov	r5, r1
    1dac:	61 2c       	mov	r6, r1
    1dae:	71 2c       	mov	r7, r1
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
			{

				if(WaitTimeInMs > 0)
    1db0:	00 23       	and	r16, r16
    1db2:	d9 f0       	breq	.+54     	; 0x1dea <UARTReceive+0xa0>
				{
					
					StartUARTTimer(WaitTimeInMs);
    1db4:	10 92 30 06 	sts	0x0630, r1
    1db8:	15 bd       	out	0x25, r17	; 37
    1dba:	c3 01       	movw	r24, r6
    1dbc:	b2 01       	movw	r22, r4
    1dbe:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__floatsisf>
    1dc2:	2a e9       	ldi	r18, 0x9A	; 154
    1dc4:	39 e9       	ldi	r19, 0x99	; 153
    1dc6:	49 ef       	ldi	r20, 0xF9	; 249
    1dc8:	50 e4       	ldi	r21, 0x40	; 64
    1dca:	d0 dd       	rcall	.-1120   	; 0x196c <__mulsf3>
    1dcc:	84 d1       	rcall	.+776    	; 0x20d6 <__fixsfsi>
    1dce:	67 bd       	out	0x27, r22	; 39
    1dd0:	16 bc       	out	0x26, r1	; 38

					while (!(UCSR0A & (1 << RXC0)))
					{
						if (gUARTTimerTriggered)
    1dd2:	90 91 30 06 	lds	r25, 0x0630
				if(WaitTimeInMs > 0)
				{
					
					StartUARTTimer(WaitTimeInMs);

					while (!(UCSR0A & (1 << RXC0)))
    1dd6:	04 c0       	rjmp	.+8      	; 0x1de0 <UARTReceive+0x96>
					{
						if (gUARTTimerTriggered)
    1dd8:	99 23       	and	r25, r25
    1dda:	11 f0       	breq	.+4      	; 0x1de0 <UARTReceive+0x96>
						{
							StopUARTTimer();
    1ddc:	15 bc       	out	0x25, r1	; 37
						
							goto Exit;
    1dde:	86 c0       	rjmp	.+268    	; 0x1eec <UARTReceive+0x1a2>
				if(WaitTimeInMs > 0)
				{
					
					StartUARTTimer(WaitTimeInMs);

					while (!(UCSR0A & (1 << RXC0)))
    1de0:	88 81       	ld	r24, Y
    1de2:	88 23       	and	r24, r24
    1de4:	cc f7       	brge	.-14     	; 0x1dd8 <UARTReceive+0x8e>
						
							goto Exit;
						}
					}
				
					StopUARTTimer();
    1de6:	15 bc       	out	0x25, r1	; 37
    1de8:	03 c0       	rjmp	.+6      	; 0x1df0 <UARTReceive+0xa6>
				}
				else
				{
					while (!(UCSR0A & (1 << RXC0)));
    1dea:	88 81       	ld	r24, Y
    1dec:	88 23       	and	r24, r24
    1dee:	ec f7       	brge	.-6      	; 0x1dea <UARTReceive+0xa0>

				//
				// Receive the value
				//

				if (gIsMPCMEnabled[0])
    1df0:	e4 e1       	ldi	r30, 0x14	; 20
    1df2:	f6 e0       	ldi	r31, 0x06	; 6
    1df4:	80 81       	ld	r24, Z
    1df6:	88 23       	and	r24, r24
    1df8:	19 f0       	breq	.+6      	; 0x1e00 <UARTReceive+0xb6>
				{
					BitNine = UCSR0B & (0x1 << RXB80);
    1dfa:	e1 ec       	ldi	r30, 0xC1	; 193
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
						
					BitNine = BitNine >> RXB80;
				}

				*Value = UDR0;
    1e00:	e6 ec       	ldi	r30, 0xC6	; 198
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	f1 01       	movw	r30, r2
    1e08:	81 93       	st	Z+, r24
    1e0a:	1f 01       	movw	r2, r30
			if (!gUARTInitialized[0])
			{
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
    1e0c:	ff ef       	ldi	r31, 0xFF	; 255
    1e0e:	cf 1a       	sub	r12, r31
    1e10:	df 0a       	sbc	r13, r31
    1e12:	ef 0a       	sbc	r14, r31
    1e14:	ff 0a       	sbc	r15, r31
    1e16:	c8 14       	cp	r12, r8
    1e18:	d9 04       	cpc	r13, r9
    1e1a:	ea 04       	cpc	r14, r10
    1e1c:	fb 04       	cpc	r15, r11
    1e1e:	41 f6       	brne	.-112    	; 0x1db0 <UARTReceive+0x66>
    1e20:	65 c0       	rjmp	.+202    	; 0x1eec <UARTReceive+0x1a2>
			break;
		}
		case 1:
		{

			if (!gUARTInitialized[1])
    1e22:	80 91 17 06 	lds	r24, 0x0617
    1e26:	88 23       	and	r24, r24
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <UARTReceive+0xe2>
    1e2a:	59 c0       	rjmp	.+178    	; 0x1ede <UARTReceive+0x194>
			{
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
    1e2c:	21 15       	cp	r18, r1
    1e2e:	31 05       	cpc	r19, r1
    1e30:	41 05       	cpc	r20, r1
    1e32:	51 05       	cpc	r21, r1
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <UARTReceive+0xee>
    1e36:	57 c0       	rjmp	.+174    	; 0x1ee6 <UARTReceive+0x19c>
    1e38:	c1 2c       	mov	r12, r1
    1e3a:	d1 2c       	mov	r13, r1
    1e3c:	76 01       	movw	r14, r12

					StopUARTTimer();
				}
				else
				{
					while (!(UCSR1A & (1 << RXC1)));
    1e3e:	c8 ec       	ldi	r28, 0xC8	; 200
    1e40:	d0 e0       	ldi	r29, 0x00	; 0
			{
				
				if (WaitTimeInMs > 0)
				{
					
					StartUARTTimer(WaitTimeInMs);
    1e42:	15 e0       	ldi	r17, 0x05	; 5
    1e44:	40 2e       	mov	r4, r16
    1e46:	51 2c       	mov	r5, r1
    1e48:	61 2c       	mov	r6, r1
    1e4a:	71 2c       	mov	r7, r1
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
			{
				
				if (WaitTimeInMs > 0)
    1e4c:	00 23       	and	r16, r16
    1e4e:	d9 f0       	breq	.+54     	; 0x1e86 <UARTReceive+0x13c>
				{
					
					StartUARTTimer(WaitTimeInMs);
    1e50:	10 92 30 06 	sts	0x0630, r1
    1e54:	15 bd       	out	0x25, r17	; 37
    1e56:	c3 01       	movw	r24, r6
    1e58:	b2 01       	movw	r22, r4
    1e5a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__floatsisf>
    1e5e:	2a e9       	ldi	r18, 0x9A	; 154
    1e60:	39 e9       	ldi	r19, 0x99	; 153
    1e62:	49 ef       	ldi	r20, 0xF9	; 249
    1e64:	50 e4       	ldi	r21, 0x40	; 64
    1e66:	82 dd       	rcall	.-1276   	; 0x196c <__mulsf3>
    1e68:	36 d1       	rcall	.+620    	; 0x20d6 <__fixsfsi>
    1e6a:	67 bd       	out	0x27, r22	; 39
    1e6c:	16 bc       	out	0x26, r1	; 38

					while (!(UCSR1A & (1 << RXC1)))
					{
						if (gUARTTimerTriggered)
    1e6e:	90 91 30 06 	lds	r25, 0x0630
				if (WaitTimeInMs > 0)
				{
					
					StartUARTTimer(WaitTimeInMs);

					while (!(UCSR1A & (1 << RXC1)))
    1e72:	04 c0       	rjmp	.+8      	; 0x1e7c <UARTReceive+0x132>
					{
						if (gUARTTimerTriggered)
    1e74:	99 23       	and	r25, r25
    1e76:	11 f0       	breq	.+4      	; 0x1e7c <UARTReceive+0x132>
						{
							StopUARTTimer();
    1e78:	15 bc       	out	0x25, r1	; 37
						
							goto Exit;
    1e7a:	38 c0       	rjmp	.+112    	; 0x1eec <UARTReceive+0x1a2>
				if (WaitTimeInMs > 0)
				{
					
					StartUARTTimer(WaitTimeInMs);

					while (!(UCSR1A & (1 << RXC1)))
    1e7c:	88 81       	ld	r24, Y
    1e7e:	88 23       	and	r24, r24
    1e80:	cc f7       	brge	.-14     	; 0x1e74 <UARTReceive+0x12a>
						
							goto Exit;
						}
					}

					StopUARTTimer();
    1e82:	15 bc       	out	0x25, r1	; 37
    1e84:	03 c0       	rjmp	.+6      	; 0x1e8c <UARTReceive+0x142>
				}
				else
				{
					while (!(UCSR1A & (1 << RXC1)));
    1e86:	88 81       	ld	r24, Y
    1e88:	88 23       	and	r24, r24
    1e8a:	ec f7       	brge	.-6      	; 0x1e86 <UARTReceive+0x13c>

				//
				// Receive the value
				//

				if (gIsMPCMEnabled[1])
    1e8c:	e5 e1       	ldi	r30, 0x15	; 21
    1e8e:	f6 e0       	ldi	r31, 0x06	; 6
    1e90:	80 81       	ld	r24, Z
    1e92:	88 23       	and	r24, r24
    1e94:	19 f0       	breq	.+6      	; 0x1e9c <UARTReceive+0x152>
				{
					BitNine = UCSR1B & (0x1 << RXB81);
    1e96:	e9 ec       	ldi	r30, 0xC9	; 201
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
						
					BitNine = BitNine >> RXB81;
				}

				*Value = UDR1;
    1e9c:	ee ec       	ldi	r30, 0xCE	; 206
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	f1 01       	movw	r30, r2
    1ea4:	81 93       	st	Z+, r24
    1ea6:	1f 01       	movw	r2, r30
			if (!gUARTInitialized[1])
			{
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
    1ea8:	ff ef       	ldi	r31, 0xFF	; 255
    1eaa:	cf 1a       	sub	r12, r31
    1eac:	df 0a       	sbc	r13, r31
    1eae:	ef 0a       	sbc	r14, r31
    1eb0:	ff 0a       	sbc	r15, r31
    1eb2:	c8 14       	cp	r12, r8
    1eb4:	d9 04       	cpc	r13, r9
    1eb6:	ea 04       	cpc	r14, r10
    1eb8:	fb 04       	cpc	r15, r11
    1eba:	41 f6       	brne	.-112    	; 0x1e4c <UARTReceive+0x102>
    1ebc:	17 c0       	rjmp	.+46     	; 0x1eec <UARTReceive+0x1a2>
	
	unsigned char *Value = (unsigned char *) ReceiveValue;

	unsigned char BitNine;

	unsigned long IndexI = 0;
    1ebe:	c1 2c       	mov	r12, r1
    1ec0:	d1 2c       	mov	r13, r1
    1ec2:	76 01       	movw	r14, r12
    1ec4:	13 c0       	rjmp	.+38     	; 0x1eec <UARTReceive+0x1a2>
    1ec6:	c1 2c       	mov	r12, r1
    1ec8:	d1 2c       	mov	r13, r1
    1eca:	76 01       	movw	r14, r12
    1ecc:	0f c0       	rjmp	.+30     	; 0x1eec <UARTReceive+0x1a2>
    1ece:	c1 2c       	mov	r12, r1
    1ed0:	d1 2c       	mov	r13, r1
    1ed2:	76 01       	movw	r14, r12
    1ed4:	0b c0       	rjmp	.+22     	; 0x1eec <UARTReceive+0x1a2>
			if (!gUARTInitialized[0])
			{
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
    1ed6:	c1 2c       	mov	r12, r1
    1ed8:	d1 2c       	mov	r13, r1
    1eda:	76 01       	movw	r14, r12
    1edc:	07 c0       	rjmp	.+14     	; 0x1eec <UARTReceive+0x1a2>
	
	unsigned char *Value = (unsigned char *) ReceiveValue;

	unsigned char BitNine;

	unsigned long IndexI = 0;
    1ede:	c1 2c       	mov	r12, r1
    1ee0:	d1 2c       	mov	r13, r1
    1ee2:	76 01       	movw	r14, r12
    1ee4:	03 c0       	rjmp	.+6      	; 0x1eec <UARTReceive+0x1a2>
			if (!gUARTInitialized[1])
			{
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
    1ee6:	c1 2c       	mov	r12, r1
    1ee8:	d1 2c       	mov	r13, r1
    1eea:	76 01       	movw	r14, r12

Exit:

	return IndexI;

}
    1eec:	c7 01       	movw	r24, r14
    1eee:	b6 01       	movw	r22, r12
    1ef0:	df 91       	pop	r29
    1ef2:	cf 91       	pop	r28
    1ef4:	1f 91       	pop	r17
    1ef6:	0f 91       	pop	r16
    1ef8:	ff 90       	pop	r15
    1efa:	ef 90       	pop	r14
    1efc:	df 90       	pop	r13
    1efe:	cf 90       	pop	r12
    1f00:	bf 90       	pop	r11
    1f02:	af 90       	pop	r10
    1f04:	9f 90       	pop	r9
    1f06:	8f 90       	pop	r8
    1f08:	7f 90       	pop	r7
    1f0a:	6f 90       	pop	r6
    1f0c:	5f 90       	pop	r5
    1f0e:	4f 90       	pop	r4
    1f10:	3f 90       	pop	r3
    1f12:	2f 90       	pop	r2
    1f14:	08 95       	ret

00001f16 <UARTReceiveASync>:
	return UARTTransmit(UARTNumber, TransmitValue, Length, FALSE);
}

unsigned long
UARTReceiveASync(UART_NUMBER UARTNumber, PVOID ReceiveValue, unsigned long Length, unsigned char WaitTimeInMs)
{
    1f16:	0f 93       	push	r16
	return UARTReceive(UARTNumber, ReceiveValue, Length, WaitTimeInMs);
    1f18:	18 df       	rcall	.-464    	; 0x1d4a <UARTReceive>
}
    1f1a:	0f 91       	pop	r16
    1f1c:	08 95       	ret

00001f1e <UARTReceiveSync>:

unsigned long
UARTReceiveSync(UART_NUMBER UARTNumber, PVOID ReceiveValue, unsigned long Length)
{
    1f1e:	0f 93       	push	r16
	return UARTReceive(UARTNumber, ReceiveValue, Length, 0);
    1f20:	00 e0       	ldi	r16, 0x00	; 0
    1f22:	13 df       	rcall	.-474    	; 0x1d4a <UARTReceive>
}
    1f24:	0f 91       	pop	r16
    1f26:	08 95       	ret

00001f28 <__vector_16>:
	return IndexI;

}

ISR(TIMER0_COMPA_vect)
{
    1f28:	1f 92       	push	r1
    1f2a:	0f 92       	push	r0
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	0f 92       	push	r0
    1f30:	11 24       	eor	r1, r1
    1f32:	8f 93       	push	r24
	gUARTTimerTriggered = TRUE;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	80 93 30 06 	sts	0x0630, r24
}
    1f3a:	8f 91       	pop	r24
    1f3c:	0f 90       	pop	r0
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	0f 90       	pop	r0
    1f42:	1f 90       	pop	r1
    1f44:	18 95       	reti

00001f46 <__vector_20>:

ISR(USART0_RX_vect)
{
    1f46:	1f 92       	push	r1
    1f48:	0f 92       	push	r0
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	0f 92       	push	r0
    1f4e:	11 24       	eor	r1, r1
    1f50:	0b b6       	in	r0, 0x3b	; 59
    1f52:	0f 92       	push	r0
    1f54:	2f 93       	push	r18
    1f56:	3f 93       	push	r19
    1f58:	4f 93       	push	r20
    1f5a:	5f 93       	push	r21
    1f5c:	6f 93       	push	r22
    1f5e:	7f 93       	push	r23
    1f60:	8f 93       	push	r24
    1f62:	9f 93       	push	r25
    1f64:	af 93       	push	r26
    1f66:	bf 93       	push	r27
    1f68:	ef 93       	push	r30
    1f6a:	ff 93       	push	r31
	if(gRCICallback0 != NULL)
    1f6c:	e0 91 20 06 	lds	r30, 0x0620
    1f70:	f0 91 21 06 	lds	r31, 0x0621
    1f74:	30 97       	sbiw	r30, 0x00	; 0
    1f76:	31 f0       	breq	.+12     	; 0x1f84 <__vector_20+0x3e>
	{
		gRCICallback0(UART_ZERO, gRCICallbackContext0);
    1f78:	60 91 2c 06 	lds	r22, 0x062C
    1f7c:	70 91 2d 06 	lds	r23, 0x062D
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	09 95       	icall
	}
}
    1f84:	ff 91       	pop	r31
    1f86:	ef 91       	pop	r30
    1f88:	bf 91       	pop	r27
    1f8a:	af 91       	pop	r26
    1f8c:	9f 91       	pop	r25
    1f8e:	8f 91       	pop	r24
    1f90:	7f 91       	pop	r23
    1f92:	6f 91       	pop	r22
    1f94:	5f 91       	pop	r21
    1f96:	4f 91       	pop	r20
    1f98:	3f 91       	pop	r19
    1f9a:	2f 91       	pop	r18
    1f9c:	0f 90       	pop	r0
    1f9e:	0b be       	out	0x3b, r0	; 59
    1fa0:	0f 90       	pop	r0
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	0f 90       	pop	r0
    1fa6:	1f 90       	pop	r1
    1fa8:	18 95       	reti

00001faa <__vector_28>:

ISR(USART1_RX_vect)
{
    1faa:	1f 92       	push	r1
    1fac:	0f 92       	push	r0
    1fae:	0f b6       	in	r0, 0x3f	; 63
    1fb0:	0f 92       	push	r0
    1fb2:	11 24       	eor	r1, r1
    1fb4:	0b b6       	in	r0, 0x3b	; 59
    1fb6:	0f 92       	push	r0
    1fb8:	2f 93       	push	r18
    1fba:	3f 93       	push	r19
    1fbc:	4f 93       	push	r20
    1fbe:	5f 93       	push	r21
    1fc0:	6f 93       	push	r22
    1fc2:	7f 93       	push	r23
    1fc4:	8f 93       	push	r24
    1fc6:	9f 93       	push	r25
    1fc8:	af 93       	push	r26
    1fca:	bf 93       	push	r27
    1fcc:	ef 93       	push	r30
    1fce:	ff 93       	push	r31
	if(gRCICallback1 != NULL)
    1fd0:	e0 91 26 06 	lds	r30, 0x0626
    1fd4:	f0 91 27 06 	lds	r31, 0x0627
    1fd8:	30 97       	sbiw	r30, 0x00	; 0
    1fda:	31 f0       	breq	.+12     	; 0x1fe8 <__vector_28+0x3e>
	{
		gRCICallback1(UART_ONE, gRCICallbackContext1);
    1fdc:	60 91 24 06 	lds	r22, 0x0624
    1fe0:	70 91 25 06 	lds	r23, 0x0625
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	09 95       	icall
	}
}
    1fe8:	ff 91       	pop	r31
    1fea:	ef 91       	pop	r30
    1fec:	bf 91       	pop	r27
    1fee:	af 91       	pop	r26
    1ff0:	9f 91       	pop	r25
    1ff2:	8f 91       	pop	r24
    1ff4:	7f 91       	pop	r23
    1ff6:	6f 91       	pop	r22
    1ff8:	5f 91       	pop	r21
    1ffa:	4f 91       	pop	r20
    1ffc:	3f 91       	pop	r19
    1ffe:	2f 91       	pop	r18
    2000:	0f 90       	pop	r0
    2002:	0b be       	out	0x3b, r0	; 59
    2004:	0f 90       	pop	r0
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	0f 90       	pop	r0
    200a:	1f 90       	pop	r1
    200c:	18 95       	reti

0000200e <__vector_22>:

ISR(USART0_TX_vect)
{
    200e:	1f 92       	push	r1
    2010:	0f 92       	push	r0
    2012:	0f b6       	in	r0, 0x3f	; 63
    2014:	0f 92       	push	r0
    2016:	11 24       	eor	r1, r1
    2018:	0b b6       	in	r0, 0x3b	; 59
    201a:	0f 92       	push	r0
    201c:	2f 93       	push	r18
    201e:	3f 93       	push	r19
    2020:	4f 93       	push	r20
    2022:	5f 93       	push	r21
    2024:	6f 93       	push	r22
    2026:	7f 93       	push	r23
    2028:	8f 93       	push	r24
    202a:	9f 93       	push	r25
    202c:	af 93       	push	r26
    202e:	bf 93       	push	r27
    2030:	ef 93       	push	r30
    2032:	ff 93       	push	r31
	if(gTCICallback0 != NULL)
    2034:	e0 91 22 06 	lds	r30, 0x0622
    2038:	f0 91 23 06 	lds	r31, 0x0623
    203c:	30 97       	sbiw	r30, 0x00	; 0
    203e:	31 f0       	breq	.+12     	; 0x204c <__vector_22+0x3e>
	{
		gTCICallback0(UART_ZERO, gTCICallbackContext0);
    2040:	60 91 2a 06 	lds	r22, 0x062A
    2044:	70 91 2b 06 	lds	r23, 0x062B
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	09 95       	icall
	}
}
    204c:	ff 91       	pop	r31
    204e:	ef 91       	pop	r30
    2050:	bf 91       	pop	r27
    2052:	af 91       	pop	r26
    2054:	9f 91       	pop	r25
    2056:	8f 91       	pop	r24
    2058:	7f 91       	pop	r23
    205a:	6f 91       	pop	r22
    205c:	5f 91       	pop	r21
    205e:	4f 91       	pop	r20
    2060:	3f 91       	pop	r19
    2062:	2f 91       	pop	r18
    2064:	0f 90       	pop	r0
    2066:	0b be       	out	0x3b, r0	; 59
    2068:	0f 90       	pop	r0
    206a:	0f be       	out	0x3f, r0	; 63
    206c:	0f 90       	pop	r0
    206e:	1f 90       	pop	r1
    2070:	18 95       	reti

00002072 <__vector_30>:

ISR(USART1_TX_vect)
{
    2072:	1f 92       	push	r1
    2074:	0f 92       	push	r0
    2076:	0f b6       	in	r0, 0x3f	; 63
    2078:	0f 92       	push	r0
    207a:	11 24       	eor	r1, r1
    207c:	0b b6       	in	r0, 0x3b	; 59
    207e:	0f 92       	push	r0
    2080:	2f 93       	push	r18
    2082:	3f 93       	push	r19
    2084:	4f 93       	push	r20
    2086:	5f 93       	push	r21
    2088:	6f 93       	push	r22
    208a:	7f 93       	push	r23
    208c:	8f 93       	push	r24
    208e:	9f 93       	push	r25
    2090:	af 93       	push	r26
    2092:	bf 93       	push	r27
    2094:	ef 93       	push	r30
    2096:	ff 93       	push	r31
	if(gTCICallback1 != NULL)
    2098:	e0 91 28 06 	lds	r30, 0x0628
    209c:	f0 91 29 06 	lds	r31, 0x0629
    20a0:	30 97       	sbiw	r30, 0x00	; 0
    20a2:	31 f0       	breq	.+12     	; 0x20b0 <__vector_30+0x3e>
	{
		gTCICallback1(UART_ONE, gTCICallbackContext1);
    20a4:	60 91 2e 06 	lds	r22, 0x062E
    20a8:	70 91 2f 06 	lds	r23, 0x062F
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	09 95       	icall
	}
    20b0:	ff 91       	pop	r31
    20b2:	ef 91       	pop	r30
    20b4:	bf 91       	pop	r27
    20b6:	af 91       	pop	r26
    20b8:	9f 91       	pop	r25
    20ba:	8f 91       	pop	r24
    20bc:	7f 91       	pop	r23
    20be:	6f 91       	pop	r22
    20c0:	5f 91       	pop	r21
    20c2:	4f 91       	pop	r20
    20c4:	3f 91       	pop	r19
    20c6:	2f 91       	pop	r18
    20c8:	0f 90       	pop	r0
    20ca:	0b be       	out	0x3b, r0	; 59
    20cc:	0f 90       	pop	r0
    20ce:	0f be       	out	0x3f, r0	; 63
    20d0:	0f 90       	pop	r0
    20d2:	1f 90       	pop	r1
    20d4:	18 95       	reti

000020d6 <__fixsfsi>:
    20d6:	7b db       	rcall	.-2314   	; 0x17ce <__fixunssfsi>
    20d8:	68 94       	set
    20da:	b1 11       	cpse	r27, r1
    20dc:	41 cc       	rjmp	.-1918   	; 0x1960 <__fp_szero>
    20de:	08 95       	ret

000020e0 <__tablejump2__>:
    20e0:	ee 0f       	add	r30, r30
    20e2:	ff 1f       	adc	r31, r31

000020e4 <__tablejump__>:
    20e4:	05 90       	lpm	r0, Z+
    20e6:	f4 91       	lpm	r31, Z
    20e8:	e0 2d       	mov	r30, r0
    20ea:	09 94       	ijmp

000020ec <__umulhisi3>:
    20ec:	a2 9f       	mul	r26, r18
    20ee:	b0 01       	movw	r22, r0
    20f0:	b3 9f       	mul	r27, r19
    20f2:	c0 01       	movw	r24, r0
    20f4:	a3 9f       	mul	r26, r19
    20f6:	70 0d       	add	r23, r0
    20f8:	81 1d       	adc	r24, r1
    20fa:	11 24       	eor	r1, r1
    20fc:	91 1d       	adc	r25, r1
    20fe:	b2 9f       	mul	r27, r18
    2100:	70 0d       	add	r23, r0
    2102:	81 1d       	adc	r24, r1
    2104:	11 24       	eor	r1, r1
    2106:	91 1d       	adc	r25, r1
    2108:	08 95       	ret

0000210a <__moddi3>:
    210a:	68 94       	set
    210c:	01 c0       	rjmp	.+2      	; 0x2110 <__divdi3_moddi3>

0000210e <__divdi3>:
    210e:	e8 94       	clt

00002110 <__divdi3_moddi3>:
    2110:	f9 2f       	mov	r31, r25
    2112:	f1 2b       	or	r31, r17
    2114:	0a f0       	brmi	.+2      	; 0x2118 <__divdi3_moddi3+0x8>
    2116:	27 c0       	rjmp	.+78     	; 0x2166 <__udivdi3_umoddi3>
    2118:	a0 e0       	ldi	r26, 0x00	; 0
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	e1 e9       	ldi	r30, 0x91	; 145
    211e:	f0 e1       	ldi	r31, 0x10	; 16
    2120:	93 c0       	rjmp	.+294    	; 0x2248 <__prologue_saves__+0xc>
    2122:	09 2e       	mov	r0, r25
    2124:	05 94       	asr	r0
    2126:	1a f4       	brpl	.+6      	; 0x212e <__divdi3_moddi3+0x1e>
    2128:	79 d0       	rcall	.+242    	; 0x221c <__negdi2>
    212a:	11 23       	and	r17, r17
    212c:	92 f4       	brpl	.+36     	; 0x2152 <__divdi3_moddi3+0x42>
    212e:	f0 e8       	ldi	r31, 0x80	; 128
    2130:	0f 26       	eor	r0, r31
    2132:	ff ef       	ldi	r31, 0xFF	; 255
    2134:	e0 94       	com	r14
    2136:	f0 94       	com	r15
    2138:	00 95       	com	r16
    213a:	10 95       	com	r17
    213c:	b0 94       	com	r11
    213e:	c0 94       	com	r12
    2140:	d0 94       	com	r13
    2142:	a1 94       	neg	r10
    2144:	bf 0a       	sbc	r11, r31
    2146:	cf 0a       	sbc	r12, r31
    2148:	df 0a       	sbc	r13, r31
    214a:	ef 0a       	sbc	r14, r31
    214c:	ff 0a       	sbc	r15, r31
    214e:	0f 0b       	sbc	r16, r31
    2150:	1f 0b       	sbc	r17, r31
    2152:	13 d0       	rcall	.+38     	; 0x217a <__udivmod64>
    2154:	07 fc       	sbrc	r0, 7
    2156:	62 d0       	rcall	.+196    	; 0x221c <__negdi2>
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	ec e0       	ldi	r30, 0x0C	; 12
    215e:	90 c0       	rjmp	.+288    	; 0x2280 <__epilogue_restores__+0xc>

00002160 <__umoddi3>:
    2160:	68 94       	set
    2162:	01 c0       	rjmp	.+2      	; 0x2166 <__udivdi3_umoddi3>

00002164 <__udivdi3>:
    2164:	e8 94       	clt

00002166 <__udivdi3_umoddi3>:
    2166:	8f 92       	push	r8
    2168:	9f 92       	push	r9
    216a:	cf 93       	push	r28
    216c:	df 93       	push	r29
    216e:	05 d0       	rcall	.+10     	; 0x217a <__udivmod64>
    2170:	df 91       	pop	r29
    2172:	cf 91       	pop	r28
    2174:	9f 90       	pop	r9
    2176:	8f 90       	pop	r8
    2178:	08 95       	ret

0000217a <__udivmod64>:
    217a:	88 24       	eor	r8, r8
    217c:	99 24       	eor	r9, r9
    217e:	f4 01       	movw	r30, r8
    2180:	e4 01       	movw	r28, r8
    2182:	b0 e4       	ldi	r27, 0x40	; 64
    2184:	9f 93       	push	r25
    2186:	aa 27       	eor	r26, r26
    2188:	9a 15       	cp	r25, r10
    218a:	8b 04       	cpc	r8, r11
    218c:	9c 04       	cpc	r9, r12
    218e:	ed 05       	cpc	r30, r13
    2190:	fe 05       	cpc	r31, r14
    2192:	cf 05       	cpc	r28, r15
    2194:	d0 07       	cpc	r29, r16
    2196:	a1 07       	cpc	r26, r17
    2198:	98 f4       	brcc	.+38     	; 0x21c0 <__udivmod64+0x46>
    219a:	ad 2f       	mov	r26, r29
    219c:	dc 2f       	mov	r29, r28
    219e:	cf 2f       	mov	r28, r31
    21a0:	fe 2f       	mov	r31, r30
    21a2:	e9 2d       	mov	r30, r9
    21a4:	98 2c       	mov	r9, r8
    21a6:	89 2e       	mov	r8, r25
    21a8:	98 2f       	mov	r25, r24
    21aa:	87 2f       	mov	r24, r23
    21ac:	76 2f       	mov	r23, r22
    21ae:	65 2f       	mov	r22, r21
    21b0:	54 2f       	mov	r21, r20
    21b2:	43 2f       	mov	r20, r19
    21b4:	32 2f       	mov	r19, r18
    21b6:	22 27       	eor	r18, r18
    21b8:	b8 50       	subi	r27, 0x08	; 8
    21ba:	31 f7       	brne	.-52     	; 0x2188 <__udivmod64+0xe>
    21bc:	bf 91       	pop	r27
    21be:	27 c0       	rjmp	.+78     	; 0x220e <__udivmod64+0x94>
    21c0:	1b 2e       	mov	r1, r27
    21c2:	bf 91       	pop	r27
    21c4:	bb 27       	eor	r27, r27
    21c6:	22 0f       	add	r18, r18
    21c8:	33 1f       	adc	r19, r19
    21ca:	44 1f       	adc	r20, r20
    21cc:	55 1f       	adc	r21, r21
    21ce:	66 1f       	adc	r22, r22
    21d0:	77 1f       	adc	r23, r23
    21d2:	88 1f       	adc	r24, r24
    21d4:	99 1f       	adc	r25, r25
    21d6:	88 1c       	adc	r8, r8
    21d8:	99 1c       	adc	r9, r9
    21da:	ee 1f       	adc	r30, r30
    21dc:	ff 1f       	adc	r31, r31
    21de:	cc 1f       	adc	r28, r28
    21e0:	dd 1f       	adc	r29, r29
    21e2:	aa 1f       	adc	r26, r26
    21e4:	bb 1f       	adc	r27, r27
    21e6:	8a 14       	cp	r8, r10
    21e8:	9b 04       	cpc	r9, r11
    21ea:	ec 05       	cpc	r30, r12
    21ec:	fd 05       	cpc	r31, r13
    21ee:	ce 05       	cpc	r28, r14
    21f0:	df 05       	cpc	r29, r15
    21f2:	a0 07       	cpc	r26, r16
    21f4:	b1 07       	cpc	r27, r17
    21f6:	48 f0       	brcs	.+18     	; 0x220a <__udivmod64+0x90>
    21f8:	8a 18       	sub	r8, r10
    21fa:	9b 08       	sbc	r9, r11
    21fc:	ec 09       	sbc	r30, r12
    21fe:	fd 09       	sbc	r31, r13
    2200:	ce 09       	sbc	r28, r14
    2202:	df 09       	sbc	r29, r15
    2204:	a0 0b       	sbc	r26, r16
    2206:	b1 0b       	sbc	r27, r17
    2208:	21 60       	ori	r18, 0x01	; 1
    220a:	1a 94       	dec	r1
    220c:	e1 f6       	brne	.-72     	; 0x21c6 <__udivmod64+0x4c>
    220e:	2e f4       	brtc	.+10     	; 0x221a <__udivmod64+0xa0>
    2210:	94 01       	movw	r18, r8
    2212:	af 01       	movw	r20, r30
    2214:	be 01       	movw	r22, r28
    2216:	cd 01       	movw	r24, r26
    2218:	00 0c       	add	r0, r0
    221a:	08 95       	ret

0000221c <__negdi2>:
    221c:	60 95       	com	r22
    221e:	70 95       	com	r23
    2220:	80 95       	com	r24
    2222:	90 95       	com	r25
    2224:	30 95       	com	r19
    2226:	40 95       	com	r20
    2228:	50 95       	com	r21
    222a:	21 95       	neg	r18
    222c:	3f 4f       	sbci	r19, 0xFF	; 255
    222e:	4f 4f       	sbci	r20, 0xFF	; 255
    2230:	5f 4f       	sbci	r21, 0xFF	; 255
    2232:	6f 4f       	sbci	r22, 0xFF	; 255
    2234:	7f 4f       	sbci	r23, 0xFF	; 255
    2236:	8f 4f       	sbci	r24, 0xFF	; 255
    2238:	9f 4f       	sbci	r25, 0xFF	; 255
    223a:	08 95       	ret

0000223c <__prologue_saves__>:
    223c:	2f 92       	push	r2
    223e:	3f 92       	push	r3
    2240:	4f 92       	push	r4
    2242:	5f 92       	push	r5
    2244:	6f 92       	push	r6
    2246:	7f 92       	push	r7
    2248:	8f 92       	push	r8
    224a:	9f 92       	push	r9
    224c:	af 92       	push	r10
    224e:	bf 92       	push	r11
    2250:	cf 92       	push	r12
    2252:	df 92       	push	r13
    2254:	ef 92       	push	r14
    2256:	ff 92       	push	r15
    2258:	0f 93       	push	r16
    225a:	1f 93       	push	r17
    225c:	cf 93       	push	r28
    225e:	df 93       	push	r29
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
    2264:	ca 1b       	sub	r28, r26
    2266:	db 0b       	sbc	r29, r27
    2268:	0f b6       	in	r0, 0x3f	; 63
    226a:	f8 94       	cli
    226c:	de bf       	out	0x3e, r29	; 62
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	cd bf       	out	0x3d, r28	; 61
    2272:	09 94       	ijmp

00002274 <__epilogue_restores__>:
    2274:	2a 88       	ldd	r2, Y+18	; 0x12
    2276:	39 88       	ldd	r3, Y+17	; 0x11
    2278:	48 88       	ldd	r4, Y+16	; 0x10
    227a:	5f 84       	ldd	r5, Y+15	; 0x0f
    227c:	6e 84       	ldd	r6, Y+14	; 0x0e
    227e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2280:	8c 84       	ldd	r8, Y+12	; 0x0c
    2282:	9b 84       	ldd	r9, Y+11	; 0x0b
    2284:	aa 84       	ldd	r10, Y+10	; 0x0a
    2286:	b9 84       	ldd	r11, Y+9	; 0x09
    2288:	c8 84       	ldd	r12, Y+8	; 0x08
    228a:	df 80       	ldd	r13, Y+7	; 0x07
    228c:	ee 80       	ldd	r14, Y+6	; 0x06
    228e:	fd 80       	ldd	r15, Y+5	; 0x05
    2290:	0c 81       	ldd	r16, Y+4	; 0x04
    2292:	1b 81       	ldd	r17, Y+3	; 0x03
    2294:	aa 81       	ldd	r26, Y+2	; 0x02
    2296:	b9 81       	ldd	r27, Y+1	; 0x01
    2298:	ce 0f       	add	r28, r30
    229a:	d1 1d       	adc	r29, r1
    229c:	0f b6       	in	r0, 0x3f	; 63
    229e:	f8 94       	cli
    22a0:	de bf       	out	0x3e, r29	; 62
    22a2:	0f be       	out	0x3f, r0	; 63
    22a4:	cd bf       	out	0x3d, r28	; 61
    22a6:	ed 01       	movw	r28, r26
    22a8:	08 95       	ret

000022aa <__ashrdi3>:
    22aa:	97 fb       	bst	r25, 7
    22ac:	10 f8       	bld	r1, 0

000022ae <__lshrdi3>:
    22ae:	16 94       	lsr	r1
    22b0:	00 08       	sbc	r0, r0
    22b2:	0f 93       	push	r16
    22b4:	08 30       	cpi	r16, 0x08	; 8
    22b6:	98 f0       	brcs	.+38     	; 0x22de <__lshrdi3+0x30>
    22b8:	08 50       	subi	r16, 0x08	; 8
    22ba:	23 2f       	mov	r18, r19
    22bc:	34 2f       	mov	r19, r20
    22be:	45 2f       	mov	r20, r21
    22c0:	56 2f       	mov	r21, r22
    22c2:	67 2f       	mov	r22, r23
    22c4:	78 2f       	mov	r23, r24
    22c6:	89 2f       	mov	r24, r25
    22c8:	90 2d       	mov	r25, r0
    22ca:	f4 cf       	rjmp	.-24     	; 0x22b4 <__lshrdi3+0x6>
    22cc:	05 94       	asr	r0
    22ce:	97 95       	ror	r25
    22d0:	87 95       	ror	r24
    22d2:	77 95       	ror	r23
    22d4:	67 95       	ror	r22
    22d6:	57 95       	ror	r21
    22d8:	47 95       	ror	r20
    22da:	37 95       	ror	r19
    22dc:	27 95       	ror	r18
    22de:	0a 95       	dec	r16
    22e0:	aa f7       	brpl	.-22     	; 0x22cc <__lshrdi3+0x1e>
    22e2:	0f 91       	pop	r16
    22e4:	08 95       	ret

000022e6 <__cmpdi2_s8>:
    22e6:	00 24       	eor	r0, r0
    22e8:	a7 fd       	sbrc	r26, 7
    22ea:	00 94       	com	r0
    22ec:	2a 17       	cp	r18, r26
    22ee:	30 05       	cpc	r19, r0
    22f0:	40 05       	cpc	r20, r0
    22f2:	50 05       	cpc	r21, r0
    22f4:	60 05       	cpc	r22, r0
    22f6:	70 05       	cpc	r23, r0
    22f8:	80 05       	cpc	r24, r0
    22fa:	90 05       	cpc	r25, r0
    22fc:	08 95       	ret

000022fe <_exit>:
    22fe:	f8 94       	cli

00002300 <__stop_program>:
    2300:	ff cf       	rjmp	.-2      	; 0x2300 <__stop_program>
