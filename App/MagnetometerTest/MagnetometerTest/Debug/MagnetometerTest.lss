
MagnetometerTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000de2  00800100  00003936  000039ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003936  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800ee2  00800ee2  000047ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000047ac  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000298  00000000  00000000  000047dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004e03  00000000  00000000  00004a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e17  00000000  00000000  00009877  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002367  00000000  00000000  0000a68e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000f44  00000000  00000000  0000c9f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000017fe  00000000  00000000  0000d93c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005438  00000000  00000000  0000f13a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000238  00000000  00000000  00014572  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	81 c0       	rjmp	.+258    	; 0x104 <__ctors_end>
       2:	00 00       	nop
       4:	9d c0       	rjmp	.+314    	; 0x140 <__bad_interrupt>
       6:	00 00       	nop
       8:	9b c0       	rjmp	.+310    	; 0x140 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c0       	rjmp	.+306    	; 0x140 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c0       	rjmp	.+302    	; 0x140 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c0       	rjmp	.+298    	; 0x140 <__bad_interrupt>
      16:	00 00       	nop
      18:	b8 c2       	rjmp	.+1392   	; 0x58a <__vector_6>
      1a:	00 00       	nop
      1c:	91 c0       	rjmp	.+290    	; 0x140 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c0       	rjmp	.+286    	; 0x140 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c0       	rjmp	.+282    	; 0x140 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c0       	rjmp	.+278    	; 0x140 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c0       	rjmp	.+274    	; 0x140 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c0       	rjmp	.+270    	; 0x140 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c0       	rjmp	.+266    	; 0x140 <__bad_interrupt>
      36:	00 00       	nop
      38:	83 c0       	rjmp	.+262    	; 0x140 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	81 c0       	rjmp	.+258    	; 0x140 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <__vector_16>
      44:	7d c0       	rjmp	.+250    	; 0x140 <__bad_interrupt>
      46:	00 00       	nop
      48:	7b c0       	rjmp	.+246    	; 0x140 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	79 c0       	rjmp	.+242    	; 0x140 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <__vector_20>
      54:	75 c0       	rjmp	.+234    	; 0x140 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 28 16 	jmp	0x2c50	; 0x2c50 <__vector_22>
      5c:	71 c0       	rjmp	.+226    	; 0x140 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c0       	rjmp	.+222    	; 0x140 <__bad_interrupt>
      62:	00 00       	nop
      64:	6d c0       	rjmp	.+218    	; 0x140 <__bad_interrupt>
      66:	00 00       	nop
      68:	6b c0       	rjmp	.+214    	; 0x140 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	69 c0       	rjmp	.+210    	; 0x140 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__vector_28>
      74:	65 c0       	rjmp	.+202    	; 0x140 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 5a 16 	jmp	0x2cb4	; 0x2cb4 <__vector_30>
      7c:	61 c0       	rjmp	.+194    	; 0x140 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5f c0       	rjmp	.+190    	; 0x140 <__bad_interrupt>
      82:	00 00       	nop
      84:	5d c0       	rjmp	.+186    	; 0x140 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c0       	rjmp	.+182    	; 0x140 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c8 10       	cpse	r12, r8
      8e:	da 10       	cpse	r13, r10
      90:	b1 11       	cpse	r27, r1
      92:	9d 11       	cpse	r25, r13
      94:	b1 11       	cpse	r27, r1
      96:	b1 11       	cpse	r27, r1
      98:	b1 11       	cpse	r27, r1
      9a:	b1 11       	cpse	r27, r1
      9c:	b1 11       	cpse	r27, r1
      9e:	90 11       	cpse	r25, r0
      a0:	b1 11       	cpse	r27, r1
      a2:	b1 11       	cpse	r27, r1
      a4:	b1 11       	cpse	r27, r1
      a6:	b1 11       	cpse	r27, r1
      a8:	b1 11       	cpse	r27, r1
      aa:	b1 11       	cpse	r27, r1
      ac:	95 11       	cpse	r25, r5
      ae:	b1 11       	cpse	r27, r1
      b0:	1c 11       	cpse	r17, r12
      b2:	b1 11       	cpse	r27, r1
      b4:	b1 11       	cpse	r27, r1
      b6:	58 11       	cpse	r21, r8
      b8:	08 4a       	sbci	r16, 0xA8	; 168
      ba:	d7 3b       	cpi	r29, 0xB7	; 183
      bc:	3b ce       	rjmp	.-906    	; 0xfffffd34 <__eeprom_end+0xff7efd34>
      be:	01 6e       	ori	r16, 0xE1	; 225
      c0:	84 bc       	out	0x24, r8	; 36
      c2:	bf fd       	.word	0xfdbf	; ????
      c4:	c1 2f       	mov	r28, r17
      c6:	3d 6c       	ori	r19, 0xCD	; 205
      c8:	74 31       	cpi	r23, 0x14	; 20
      ca:	9a bd       	out	0x2a, r25	; 42
      cc:	56 83       	std	Z+6, r21	; 0x06
      ce:	3d da       	rcall	.-2950   	; 0xfffff54a <__eeprom_end+0xff7ef54a>
      d0:	3d 00       	.word	0x003d	; ????
      d2:	c7 7f       	andi	r28, 0xF7	; 247
      d4:	11 be       	out	0x31, r1	; 49
      d6:	d9 e4       	ldi	r29, 0x49	; 73
      d8:	bb 4c       	sbci	r27, 0xCB	; 203
      da:	3e 91       	ld	r19, -X
      dc:	6b aa       	std	Y+51, r6	; 0x33
      de:	aa be       	out	0x3a, r10	; 58
      e0:	00 00       	nop
      e2:	00 80       	ld	r0, Z
      e4:	3f 05       	cpc	r19, r15
      e6:	a8 4c       	sbci	r26, 0xC8	; 200
      e8:	cd b2       	in	r12, 0x1d	; 29
      ea:	d4 4e       	sbci	r29, 0xE4	; 228
      ec:	b9 38       	cpi	r27, 0x89	; 137
      ee:	36 a9       	ldd	r19, Z+54	; 0x36
      f0:	02 0c       	add	r0, r2
      f2:	50 b9       	out	0x00, r21	; 0
      f4:	91 86       	std	Z+9, r9	; 0x09
      f6:	88 08       	sbc	r8, r8
      f8:	3c a6       	std	Y+44, r3	; 0x2c
      fa:	aa aa       	std	Y+50, r10	; 0x32
      fc:	2a be       	out	0x3a, r2	; 58
      fe:	00 00       	nop
     100:	00 80       	ld	r0, Z
     102:	3f 00       	.word	0x003f	; ????

00000104 <__ctors_end>:
     104:	11 24       	eor	r1, r1
     106:	1f be       	out	0x3f, r1	; 63
     108:	cf ef       	ldi	r28, 0xFF	; 255
     10a:	d0 e4       	ldi	r29, 0x40	; 64
     10c:	de bf       	out	0x3e, r29	; 62
     10e:	cd bf       	out	0x3d, r28	; 61

00000110 <__do_copy_data>:
     110:	1e e0       	ldi	r17, 0x0E	; 14
     112:	a0 e0       	ldi	r26, 0x00	; 0
     114:	b1 e0       	ldi	r27, 0x01	; 1
     116:	e6 e3       	ldi	r30, 0x36	; 54
     118:	f9 e3       	ldi	r31, 0x39	; 57
     11a:	00 e0       	ldi	r16, 0x00	; 0
     11c:	0b bf       	out	0x3b, r16	; 59
     11e:	02 c0       	rjmp	.+4      	; 0x124 <__do_copy_data+0x14>
     120:	07 90       	elpm	r0, Z+
     122:	0d 92       	st	X+, r0
     124:	a2 3e       	cpi	r26, 0xE2	; 226
     126:	b1 07       	cpc	r27, r17
     128:	d9 f7       	brne	.-10     	; 0x120 <__do_copy_data+0x10>

0000012a <__do_clear_bss>:
     12a:	2f e0       	ldi	r18, 0x0F	; 15
     12c:	a2 ee       	ldi	r26, 0xE2	; 226
     12e:	be e0       	ldi	r27, 0x0E	; 14
     130:	01 c0       	rjmp	.+2      	; 0x134 <.do_clear_bss_start>

00000132 <.do_clear_bss_loop>:
     132:	1d 92       	st	X+, r1

00000134 <.do_clear_bss_start>:
     134:	a5 30       	cpi	r26, 0x05	; 5
     136:	b2 07       	cpc	r27, r18
     138:	e1 f7       	brne	.-8      	; 0x132 <.do_clear_bss_loop>
     13a:	7e d0       	rcall	.+252    	; 0x238 <main>
     13c:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <_exit>

00000140 <__bad_interrupt>:
     140:	5f cf       	rjmp	.-322    	; 0x0 <__vectors>

00000142 <InitializeAccelerometer>:
	return 1;
	
}

bool InitializeAccelerometer()
{
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	cd b7       	in	r28, 0x3d	; 61
     148:	de b7       	in	r29, 0x3e	; 62
     14a:	27 97       	sbiw	r28, 0x07	; 7
     14c:	0f b6       	in	r0, 0x3f	; 63
     14e:	f8 94       	cli
     150:	de bf       	out	0x3e, r29	; 62
     152:	0f be       	out	0x3f, r0	; 63
     154:	cd bf       	out	0x3d, r28	; 61
		
	//
	// Initialize Accelerometer
	//
		
	if(!InitADXL345DevAddress(TRUE))
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	bf d4       	rcall	.+2430   	; 0xad8 <InitADXL345DevAddress>
     15a:	88 23       	and	r24, r24
     15c:	09 f4       	brne	.+2      	; 0x160 <InitializeAccelerometer+0x1e>
     15e:	54 c0       	rjmp	.+168    	; 0x208 <InitializeAccelerometer+0xc6>
		
	//
	// Place Accelerometer in accelerometer in standby mode
	//
		
	if(!EnableDisableADXL345StandbyMode(TRUE))
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	49 d5       	rcall	.+2706   	; 0xbf6 <EnableDisableADXL345StandbyMode>
     164:	88 23       	and	r24, r24
     166:	09 f4       	brne	.+2      	; 0x16a <InitializeAccelerometer+0x28>
     168:	51 c0       	rjmp	.+162    	; 0x20c <InitializeAccelerometer+0xca>
		
	FifoCtl.AsUINT8 = 0;
		
	FifoCtl.FIFOMode = FIFO;
		
	FifoCtl.Samples = 20;
     16a:	84 e5       	ldi	r24, 0x54	; 84
     16c:	8e 83       	std	Y+6, r24	; 0x06
		
	if (!ProgramADXL345FifoControl(&FifoCtl))
     16e:	ce 01       	movw	r24, r28
     170:	06 96       	adiw	r24, 0x06	; 6
     172:	97 d6       	rcall	.+3374   	; 0xea2 <ProgramADXL345FifoControl>
     174:	88 23       	and	r24, r24
     176:	09 f4       	brne	.+2      	; 0x17a <InitializeAccelerometer+0x38>
     178:	4b c0       	rjmp	.+150    	; 0x210 <InitializeAccelerometer+0xce>
		
	ActInactCtl.ActXEnable = 1;
		
	ActInactCtl.ActYEnable = 1;
		
	ActInactCtl.ActZEnable = 1;
     17a:	80 e7       	ldi	r24, 0x70	; 112
     17c:	8f 83       	std	Y+7, r24	; 0x07
		
	if (!ProgramADXL345ActivityInactivityDetection(&ActInactCtl, 0x8, 0x8, 0xf))
     17e:	2f e0       	ldi	r18, 0x0F	; 15
     180:	48 e0       	ldi	r20, 0x08	; 8
     182:	68 e0       	ldi	r22, 0x08	; 8
     184:	ce 01       	movw	r24, r28
     186:	07 96       	adiw	r24, 0x07	; 7
     188:	79 d7       	rcall	.+3826   	; 0x107c <ProgramADXL345ActivityInactivityDetection>
     18a:	88 23       	and	r24, r24
     18c:	09 f4       	brne	.+2      	; 0x190 <InitializeAccelerometer+0x4e>
     18e:	42 c0       	rjmp	.+132    	; 0x214 <InitializeAccelerometer+0xd2>
		
	//
	// Program Data Offset
	//
		
	DataOffset.OffsetX = -1;
     190:	8f ef       	ldi	r24, 0xFF	; 255
     192:	8b 83       	std	Y+3, r24	; 0x03
		
	DataOffset.OffsetY = -4;
     194:	8c ef       	ldi	r24, 0xFC	; 252
     196:	8c 83       	std	Y+4, r24	; 0x04
		
	DataOffset.OffsetZ = 6;
     198:	86 e0       	ldi	r24, 0x06	; 6
     19a:	8d 83       	std	Y+5, r24	; 0x05
		
	if(!ProgramADXL345DataFormat(FOUR_G, TRUE, &DataOffset, HUNDRED_HZ))
     19c:	2a e0       	ldi	r18, 0x0A	; 10
     19e:	ae 01       	movw	r20, r28
     1a0:	4d 5f       	subi	r20, 0xFD	; 253
     1a2:	5f 4f       	sbci	r21, 0xFF	; 255
     1a4:	61 e0       	ldi	r22, 0x01	; 1
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	a6 d6       	rcall	.+3404   	; 0xef6 <ProgramADXL345DataFormat>
     1aa:	88 23       	and	r24, r24
     1ac:	a9 f1       	breq	.+106    	; 0x218 <InitializeAccelerometer+0xd6>
	// Program Interrupts
	//
		
	IntEnable.AsUINT8 = 0;
		
	IntEnable.DataReady = 1;
     1ae:	80 e8       	ldi	r24, 0x80	; 128
     1b0:	89 83       	std	Y+1, r24	; 0x01
		
	IntMap.AsUINT8 = 0;
		
	IntMap.DataReady = 1;
     1b2:	8a 83       	std	Y+2, r24	; 0x02
		
	if(!ProgramADXL345Interrupts(&IntEnable, &IntMap))
     1b4:	be 01       	movw	r22, r28
     1b6:	6e 5f       	subi	r22, 0xFE	; 254
     1b8:	7f 4f       	sbci	r23, 0xFF	; 255
     1ba:	ce 01       	movw	r24, r28
     1bc:	01 96       	adiw	r24, 0x01	; 1
     1be:	2c d6       	rcall	.+3160   	; 0xe18 <ProgramADXL345Interrupts>
     1c0:	88 23       	and	r24, r24
     1c2:	61 f1       	breq	.+88     	; 0x21c <InitializeAccelerometer+0xda>
		
	//
	// Set PORT C - Pin 5 as input
	//
		
	DDRC &= ~(1 << DDC5);
     1c4:	3d 98       	cbi	0x07, 5	; 7
		
	//
	// Turn on the pull up resistor for PORT C - Pin 5
	//
		
	PORTC |= (1 << PORTC5);
     1c6:	45 9a       	sbi	0x08, 5	; 8
		
	PCMSK2 = PCMSK2 | (0x1 << PCINT21);
     1c8:	ed e6       	ldi	r30, 0x6D	; 109
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	80 62       	ori	r24, 0x20	; 32
     1d0:	80 83       	st	Z, r24
		
	PCICR = PCICR | (0x1 << PCIE2);
     1d2:	e8 e6       	ldi	r30, 0x68	; 104
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	84 60       	ori	r24, 0x04	; 4
     1da:	80 83       	st	Z, r24
		
	sei();
     1dc:	78 94       	sei
		
	//
	// Flush FIFO
	//
		
	if(!FlushADXL345Fifo())
     1de:	d5 d2       	rcall	.+1450   	; 0x78a <FlushADXL345Fifo>
     1e0:	88 23       	and	r24, r24
     1e2:	f1 f0       	breq	.+60     	; 0x220 <InitializeAccelerometer+0xde>
		
	//
	// Program Accelerometer Power Mode
	//
		
	if(!ProgramADXL345PowerCtl(FULL_POWER, NO_WAKEUP))
     1e4:	64 e0       	ldi	r22, 0x04	; 4
     1e6:	82 e0       	ldi	r24, 0x02	; 2
     1e8:	5f d5       	rcall	.+2750   	; 0xca8 <ProgramADXL345PowerCtl>
     1ea:	88 23       	and	r24, r24
     1ec:	d9 f0       	breq	.+54     	; 0x224 <InitializeAccelerometer+0xe2>
	{
		goto Exit;
	}
		
	SendTrace(INFO_LEVEL, "Accelerometer Setup Complete\r\n");
     1ee:	87 e0       	ldi	r24, 0x07	; 7
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	9f 93       	push	r25
     1f4:	8f 93       	push	r24
     1f6:	84 e0       	ldi	r24, 0x04	; 4
     1f8:	8f 93       	push	r24
     1fa:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
     1fe:	0f 90       	pop	r0
     200:	0f 90       	pop	r0
     202:	0f 90       	pop	r0
	
	Status = TRUE;
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	0f c0       	rjmp	.+30     	; 0x226 <InitializeAccelerometer+0xe4>
	
}

bool InitializeAccelerometer()
{
	bool Status = FALSE;
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	0d c0       	rjmp	.+26     	; 0x226 <InitializeAccelerometer+0xe4>
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	0b c0       	rjmp	.+22     	; 0x226 <InitializeAccelerometer+0xe4>
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	09 c0       	rjmp	.+18     	; 0x226 <InitializeAccelerometer+0xe4>
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	07 c0       	rjmp	.+14     	; 0x226 <InitializeAccelerometer+0xe4>
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	05 c0       	rjmp	.+10     	; 0x226 <InitializeAccelerometer+0xe4>
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	03 c0       	rjmp	.+6      	; 0x226 <InitializeAccelerometer+0xe4>
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	01 c0       	rjmp	.+2      	; 0x226 <InitializeAccelerometer+0xe4>
     224:	80 e0       	ldi	r24, 0x00	; 0
	Status = TRUE;
	
Exit:

	return Status;
}
     226:	27 96       	adiw	r28, 0x07	; 7
     228:	0f b6       	in	r0, 0x3f	; 63
     22a:	f8 94       	cli
     22c:	de bf       	out	0x3e, r29	; 62
     22e:	0f be       	out	0x3f, r0	; 63
     230:	cd bf       	out	0x3d, r28	; 61
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	08 95       	ret

00000238 <main>:
#include "HMC5883L.h"

bool IsAccelerometerInterruptFired;

int main(void)
{
     238:	2f 92       	push	r2
     23a:	3f 92       	push	r3
     23c:	4f 92       	push	r4
     23e:	5f 92       	push	r5
     240:	6f 92       	push	r6
     242:	7f 92       	push	r7
     244:	8f 92       	push	r8
     246:	9f 92       	push	r9
     248:	af 92       	push	r10
     24a:	bf 92       	push	r11
     24c:	cf 92       	push	r12
     24e:	df 92       	push	r13
     250:	ef 92       	push	r14
     252:	ff 92       	push	r15
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	cd b7       	in	r28, 0x3d	; 61
     25e:	de b7       	in	r29, 0x3e	; 62
     260:	e0 97       	sbiw	r28, 0x30	; 48
     262:	0f b6       	in	r0, 0x3f	; 63
     264:	f8 94       	cli
     266:	de bf       	out	0x3e, r29	; 62
     268:	0f be       	out	0x3f, r0	; 63
     26a:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     26c:	2f ef       	ldi	r18, 0xFF	; 255
     26e:	3c e2       	ldi	r19, 0x2C	; 44
     270:	81 e3       	ldi	r24, 0x31	; 49
     272:	91 e0       	ldi	r25, 0x01	; 1
     274:	21 50       	subi	r18, 0x01	; 1
     276:	30 40       	sbci	r19, 0x00	; 0
     278:	80 40       	sbci	r24, 0x00	; 0
     27a:	90 40       	sbci	r25, 0x00	; 0
     27c:	d9 f7       	brne	.-10     	; 0x274 <main+0x3c>
     27e:	00 c0       	rjmp	.+0      	; 0x280 <main+0x48>
     280:	00 00       	nop
	
	//
	// Initialize Tracing
	//
	
	InitTrace(F_CPU, ERROR_LEVEL | INFO_LEVEL);
     282:	45 e0       	ldi	r20, 0x05	; 5
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	72 e1       	ldi	r23, 0x12	; 18
     288:	8a e7       	ldi	r24, 0x7A	; 122
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <InitTrace>
	
	//
	// Initialize TWI
	//

	if (!InitTWI(TWI_MASTER, NULL, NULL))
     290:	40 e0       	ldi	r20, 0x00	; 0
     292:	50 e0       	ldi	r21, 0x00	; 0
     294:	60 e0       	ldi	r22, 0x00	; 0
     296:	70 e0       	ldi	r23, 0x00	; 0
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	0e 94 cc 11 	call	0x2398	; 0x2398 <InitTWI>
     29e:	88 23       	and	r24, r24
     2a0:	09 f4       	brne	.+2      	; 0x2a4 <main+0x6c>
     2a2:	58 c1       	rjmp	.+688    	; 0x554 <main+0x31c>
	
	//
	// Initialize Accelerometer
	//
	
	if (!InitializeAccelerometer())
     2a4:	4e df       	rcall	.-356    	; 0x142 <InitializeAccelerometer>
     2a6:	88 23       	and	r24, r24
     2a8:	09 f4       	brne	.+2      	; 0x2ac <main+0x74>
     2aa:	54 c1       	rjmp	.+680    	; 0x554 <main+0x31c>
	{
		goto Exit;
	}
	
	if (!InitHMC5883LMagnetometer(SINGLE_MEASUREMENT_MODE, NORMAL, FIFTEEN_HZ, EIGHT_SAMPLES, THOUSAND_AND_NINTY))
     2ac:	01 e0       	ldi	r16, 0x01	; 1
     2ae:	23 e0       	ldi	r18, 0x03	; 3
     2b0:	44 e0       	ldi	r20, 0x04	; 4
     2b2:	60 e0       	ldi	r22, 0x00	; 0
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	0e 94 ab 0c 	call	0x1956	; 0x1956 <InitHMC5883LMagnetometer>
     2ba:	88 23       	and	r24, r24
     2bc:	09 f4       	brne	.+2      	; 0x2c0 <main+0x88>
     2be:	4a c1       	rjmp	.+660    	; 0x554 <main+0x31c>
		goto Exit;
	}
	
    while(1)
    {
        if (!ReadADXL345InterruptSource(&IntSource))
     2c0:	ce 01       	movw	r24, r28
     2c2:	01 96       	adiw	r24, 0x01	; 1
     2c4:	e4 d1       	rcall	.+968    	; 0x68e <ReadADXL345InterruptSource>
     2c6:	88 23       	and	r24, r24
     2c8:	d9 f3       	breq	.-10     	; 0x2c0 <main+0x88>
		{
			continue;
		}
		
		SendTrace(INFO_LEVEL, "Interrupt Source = 0x%x\r\n", IntSource.AsUINT8);
     2ca:	89 81       	ldd	r24, Y+1	; 0x01
     2cc:	1f 92       	push	r1
     2ce:	8f 93       	push	r24
     2d0:	86 e2       	ldi	r24, 0x26	; 38
     2d2:	91 e0       	ldi	r25, 0x01	; 1
     2d4:	9f 93       	push	r25
     2d6:	8f 93       	push	r24
     2d8:	84 e0       	ldi	r24, 0x04	; 4
     2da:	8f 93       	push	r24
     2dc:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
		
		if (IsAccelerometerInterruptFired || IntSource.DataReady)
     2e0:	0f 90       	pop	r0
     2e2:	0f 90       	pop	r0
     2e4:	0f 90       	pop	r0
     2e6:	0f 90       	pop	r0
     2e8:	0f 90       	pop	r0
     2ea:	80 91 e9 0e 	lds	r24, 0x0EE9
     2ee:	81 11       	cpse	r24, r1
     2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <main+0xc0>
     2f2:	89 81       	ldd	r24, Y+1	; 0x01
     2f4:	88 23       	and	r24, r24
     2f6:	24 f7       	brge	.-56     	; 0x2c0 <main+0x88>
		{
			IsAccelerometerInterruptFired = FALSE;
     2f8:	10 92 e9 0e 	sts	0x0EE9, r1
			
			if (!ReadADXL345FifoStatus(&FifoStatus))
     2fc:	ce 01       	movw	r24, r28
     2fe:	02 96       	adiw	r24, 0x02	; 2
     300:	f0 d1       	rcall	.+992    	; 0x6e2 <ReadADXL345FifoStatus>
     302:	88 23       	and	r24, r24
     304:	e9 f2       	breq	.-70     	; 0x2c0 <main+0x88>
			{
				continue;
			}
				
			SendTrace(INFO_LEVEL, "Fifo Entries = %d\r\n", FifoStatus.Entries);
     306:	8a 81       	ldd	r24, Y+2	; 0x02
     308:	8f 73       	andi	r24, 0x3F	; 63
     30a:	1f 92       	push	r1
     30c:	8f 93       	push	r24
     30e:	80 e4       	ldi	r24, 0x40	; 64
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	9f 93       	push	r25
     314:	8f 93       	push	r24
     316:	14 e0       	ldi	r17, 0x04	; 4
     318:	1f 93       	push	r17
     31a:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
				
			SendTrace(INFO_LEVEL, "Fifo Triggered = %d\r\n", FifoStatus.FIFOTrig); 
     31e:	8a 81       	ldd	r24, Y+2	; 0x02
     320:	87 fb       	bst	r24, 7
     322:	88 27       	eor	r24, r24
     324:	80 f9       	bld	r24, 0
     326:	1f 92       	push	r1
     328:	8f 93       	push	r24
     32a:	84 e5       	ldi	r24, 0x54	; 84
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	9f 93       	push	r25
     330:	8f 93       	push	r24
     332:	1f 93       	push	r17
     334:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
				
			for (index=0; index < FifoStatus.Entries; index++)
     338:	8a 81       	ldd	r24, Y+2	; 0x02
     33a:	8f 73       	andi	r24, 0x3F	; 63
     33c:	0f b6       	in	r0, 0x3f	; 63
     33e:	f8 94       	cli
     340:	de bf       	out	0x3e, r29	; 62
     342:	0f be       	out	0x3f, r0	; 63
     344:	cd bf       	out	0x3d, r28	; 61
     346:	09 f4       	brne	.+2      	; 0x34a <main+0x112>
     348:	bb cf       	rjmp	.-138    	; 0x2c0 <main+0x88>
     34a:	f1 2c       	mov	r15, r1
					
				SendTrace(INFO_LEVEL, "X Axis Acc = %fg\t", AccTiltData.AccX);
					
				SendTrace(INFO_LEVEL, "Y Axis Acc = %fg\t", AccTiltData.AccY);
					
				SendTrace(INFO_LEVEL, "Z Axis Acc = %fg\r\n", AccTiltData.AccZ);
     34c:	0f 2e       	mov	r0, r31
     34e:	fe e8       	ldi	r31, 0x8E	; 142
     350:	4f 2e       	mov	r4, r31
     352:	f1 e0       	ldi	r31, 0x01	; 1
     354:	5f 2e       	mov	r5, r31
     356:	f0 2d       	mov	r31, r0
				
				SendTrace(INFO_LEVEL, "X Axis Tilt = %f degrees\t", AccTiltData.TiltX);
     358:	0f 2e       	mov	r0, r31
     35a:	f1 ea       	ldi	r31, 0xA1	; 161
     35c:	6f 2e       	mov	r6, r31
     35e:	f1 e0       	ldi	r31, 0x01	; 1
     360:	7f 2e       	mov	r7, r31
     362:	f0 2d       	mov	r31, r0
				
				SendTrace(INFO_LEVEL, "Y Axis Tilt = %f degrees\t", AccTiltData.TiltY);
     364:	0f 2e       	mov	r0, r31
     366:	fb eb       	ldi	r31, 0xBB	; 187
     368:	8f 2e       	mov	r8, r31
     36a:	f1 e0       	ldi	r31, 0x01	; 1
     36c:	9f 2e       	mov	r9, r31
     36e:	f0 2d       	mov	r31, r0
				
				SendTrace(INFO_LEVEL, "Z Axis Tilt = %f degrees\r\n", AccTiltData.TiltZ);
     370:	0f 2e       	mov	r0, r31
     372:	f5 ed       	ldi	r31, 0xD5	; 213
     374:	af 2e       	mov	r10, r31
     376:	f1 e0       	ldi	r31, 0x01	; 1
     378:	bf 2e       	mov	r11, r31
     37a:	f0 2d       	mov	r31, r0
				
				SendTrace(INFO_LEVEL, "X Axis Raw = %dG\t", MagData.RawDataX);
     37c:	0f 2e       	mov	r0, r31
     37e:	f0 ef       	ldi	r31, 0xF0	; 240
     380:	2f 2e       	mov	r2, r31
     382:	f1 e0       	ldi	r31, 0x01	; 1
     384:	3f 2e       	mov	r3, r31
     386:	f0 2d       	mov	r31, r0
			SendTrace(INFO_LEVEL, "Fifo Triggered = %d\r\n", FifoStatus.FIFOTrig); 
				
			for (index=0; index < FifoStatus.Entries; index++)
			{
					
				if(!ReadADXL345AccAndTiltData(RADS, &AccTiltData))
     388:	be 01       	movw	r22, r28
     38a:	6d 5f       	subi	r22, 0xFD	; 253
     38c:	7f 4f       	sbci	r23, 0xFF	; 255
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	40 d2       	rcall	.+1152   	; 0x812 <ReadADXL345AccAndTiltData>
     392:	88 23       	and	r24, r24
     394:	09 f4       	brne	.+2      	; 0x398 <main+0x160>
     396:	d3 c0       	rjmp	.+422    	; 0x53e <main+0x306>
				{
					continue;
				}
				
				if (!ReadHMC5883LSingleMeasurementData(&MagData))
     398:	ce 01       	movw	r24, r28
     39a:	4b 96       	adiw	r24, 0x1b	; 27
     39c:	0e 94 8e 0b 	call	0x171c	; 0x171c <ReadHMC5883LSingleMeasurementData>
     3a0:	88 23       	and	r24, r24
     3a2:	09 f4       	brne	.+2      	; 0x3a6 <main+0x16e>
     3a4:	cc c0       	rjmp	.+408    	; 0x53e <main+0x306>
				{
					continue;	
				}
				
				CalculateCompassHeading(&MagData, AccTiltData.TiltX, AccTiltData.TiltY, DEGREES, &CompassHeading);
     3a6:	0b 89       	ldd	r16, Y+19	; 0x13
     3a8:	1c 89       	ldd	r17, Y+20	; 0x14
     3aa:	2d 89       	ldd	r18, Y+21	; 0x15
     3ac:	3e 89       	ldd	r19, Y+22	; 0x16
     3ae:	4f 85       	ldd	r20, Y+15	; 0x0f
     3b0:	58 89       	ldd	r21, Y+16	; 0x10
     3b2:	69 89       	ldd	r22, Y+17	; 0x11
     3b4:	7a 89       	ldd	r23, Y+18	; 0x12
     3b6:	ce 01       	movw	r24, r28
     3b8:	8d 96       	adiw	r24, 0x2d	; 45
     3ba:	6c 01       	movw	r12, r24
     3bc:	ee 24       	eor	r14, r14
     3be:	e3 94       	inc	r14
     3c0:	42 97       	sbiw	r24, 0x12	; 18
     3c2:	da d6       	rcall	.+3508   	; 0x1178 <CalculateCompassHeading>
					
				SendTrace(INFO_LEVEL, "X Axis Acc = %fg\t", AccTiltData.AccX);
     3c4:	8e 81       	ldd	r24, Y+6	; 0x06
     3c6:	8f 93       	push	r24
     3c8:	8d 81       	ldd	r24, Y+5	; 0x05
     3ca:	8f 93       	push	r24
     3cc:	8c 81       	ldd	r24, Y+4	; 0x04
     3ce:	8f 93       	push	r24
     3d0:	8b 81       	ldd	r24, Y+3	; 0x03
     3d2:	8f 93       	push	r24
     3d4:	aa e6       	ldi	r26, 0x6A	; 106
     3d6:	b1 e0       	ldi	r27, 0x01	; 1
     3d8:	bf 93       	push	r27
     3da:	af 93       	push	r26
     3dc:	14 e0       	ldi	r17, 0x04	; 4
     3de:	1f 93       	push	r17
     3e0:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
					
				SendTrace(INFO_LEVEL, "Y Axis Acc = %fg\t", AccTiltData.AccY);
     3e4:	8a 85       	ldd	r24, Y+10	; 0x0a
     3e6:	8f 93       	push	r24
     3e8:	89 85       	ldd	r24, Y+9	; 0x09
     3ea:	8f 93       	push	r24
     3ec:	88 85       	ldd	r24, Y+8	; 0x08
     3ee:	8f 93       	push	r24
     3f0:	8f 81       	ldd	r24, Y+7	; 0x07
     3f2:	8f 93       	push	r24
     3f4:	ac e7       	ldi	r26, 0x7C	; 124
     3f6:	b1 e0       	ldi	r27, 0x01	; 1
     3f8:	bf 93       	push	r27
     3fa:	af 93       	push	r26
     3fc:	1f 93       	push	r17
     3fe:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
					
				SendTrace(INFO_LEVEL, "Z Axis Acc = %fg\r\n", AccTiltData.AccZ);
     402:	8e 85       	ldd	r24, Y+14	; 0x0e
     404:	8f 93       	push	r24
     406:	8d 85       	ldd	r24, Y+13	; 0x0d
     408:	8f 93       	push	r24
     40a:	8c 85       	ldd	r24, Y+12	; 0x0c
     40c:	8f 93       	push	r24
     40e:	8b 85       	ldd	r24, Y+11	; 0x0b
     410:	8f 93       	push	r24
     412:	5f 92       	push	r5
     414:	4f 92       	push	r4
     416:	1f 93       	push	r17
     418:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
				
				SendTrace(INFO_LEVEL, "X Axis Tilt = %f degrees\t", AccTiltData.TiltX);
     41c:	8a 89       	ldd	r24, Y+18	; 0x12
     41e:	8f 93       	push	r24
     420:	89 89       	ldd	r24, Y+17	; 0x11
     422:	8f 93       	push	r24
     424:	88 89       	ldd	r24, Y+16	; 0x10
     426:	8f 93       	push	r24
     428:	8f 85       	ldd	r24, Y+15	; 0x0f
     42a:	8f 93       	push	r24
     42c:	7f 92       	push	r7
     42e:	6f 92       	push	r6
     430:	1f 93       	push	r17
     432:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
				
				SendTrace(INFO_LEVEL, "Y Axis Tilt = %f degrees\t", AccTiltData.TiltY);
     436:	8e 89       	ldd	r24, Y+22	; 0x16
     438:	8f 93       	push	r24
     43a:	8d 89       	ldd	r24, Y+21	; 0x15
     43c:	8f 93       	push	r24
     43e:	8c 89       	ldd	r24, Y+20	; 0x14
     440:	8f 93       	push	r24
     442:	8b 89       	ldd	r24, Y+19	; 0x13
     444:	8f 93       	push	r24
     446:	9f 92       	push	r9
     448:	8f 92       	push	r8
     44a:	1f 93       	push	r17
     44c:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
				
				SendTrace(INFO_LEVEL, "Z Axis Tilt = %f degrees\r\n", AccTiltData.TiltZ);
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	f8 94       	cli
     454:	de bf       	out	0x3e, r29	; 62
     456:	0f be       	out	0x3f, r0	; 63
     458:	cd bf       	out	0x3d, r28	; 61
     45a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     45c:	8f 93       	push	r24
     45e:	89 8d       	ldd	r24, Y+25	; 0x19
     460:	8f 93       	push	r24
     462:	88 8d       	ldd	r24, Y+24	; 0x18
     464:	8f 93       	push	r24
     466:	8f 89       	ldd	r24, Y+23	; 0x17
     468:	8f 93       	push	r24
     46a:	bf 92       	push	r11
     46c:	af 92       	push	r10
     46e:	1f 93       	push	r17
     470:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
				
				SendTrace(INFO_LEVEL, "X Axis Raw = %dG\t", MagData.RawDataX);
     474:	8c 8d       	ldd	r24, Y+28	; 0x1c
     476:	8f 93       	push	r24
     478:	8b 8d       	ldd	r24, Y+27	; 0x1b
     47a:	8f 93       	push	r24
     47c:	3f 92       	push	r3
     47e:	2f 92       	push	r2
     480:	1f 93       	push	r17
     482:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
				
				SendTrace(INFO_LEVEL, "Y Axis Raw = %dG\t", MagData.RawDataY);
     486:	8e 8d       	ldd	r24, Y+30	; 0x1e
     488:	8f 93       	push	r24
     48a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     48c:	8f 93       	push	r24
     48e:	a2 e0       	ldi	r26, 0x02	; 2
     490:	b2 e0       	ldi	r27, 0x02	; 2
     492:	bf 93       	push	r27
     494:	af 93       	push	r26
     496:	1f 93       	push	r17
     498:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
				
				SendTrace(INFO_LEVEL, "Z Axis Raw = %dG\r\n", MagData.RawDataZ);
     49c:	88 a1       	ldd	r24, Y+32	; 0x20
     49e:	8f 93       	push	r24
     4a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     4a2:	8f 93       	push	r24
     4a4:	a4 e1       	ldi	r26, 0x14	; 20
     4a6:	b2 e0       	ldi	r27, 0x02	; 2
     4a8:	bf 93       	push	r27
     4aa:	af 93       	push	r26
     4ac:	1f 93       	push	r17
     4ae:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
				
				SendTrace(INFO_LEVEL, "X Axis Mag = %fG\t", MagData.GaussX);
     4b2:	8c a1       	ldd	r24, Y+36	; 0x24
     4b4:	8f 93       	push	r24
     4b6:	8b a1       	ldd	r24, Y+35	; 0x23
     4b8:	8f 93       	push	r24
     4ba:	8a a1       	ldd	r24, Y+34	; 0x22
     4bc:	8f 93       	push	r24
     4be:	89 a1       	ldd	r24, Y+33	; 0x21
     4c0:	8f 93       	push	r24
     4c2:	a7 e2       	ldi	r26, 0x27	; 39
     4c4:	b2 e0       	ldi	r27, 0x02	; 2
     4c6:	bf 93       	push	r27
     4c8:	af 93       	push	r26
     4ca:	1f 93       	push	r17
     4cc:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
				
				SendTrace(INFO_LEVEL, "Y Axis Mag = %fG\t", MagData.GaussY);
     4d0:	88 a5       	ldd	r24, Y+40	; 0x28
     4d2:	8f 93       	push	r24
     4d4:	8f a1       	ldd	r24, Y+39	; 0x27
     4d6:	8f 93       	push	r24
     4d8:	8e a1       	ldd	r24, Y+38	; 0x26
     4da:	8f 93       	push	r24
     4dc:	8d a1       	ldd	r24, Y+37	; 0x25
     4de:	8f 93       	push	r24
     4e0:	89 e3       	ldi	r24, 0x39	; 57
     4e2:	92 e0       	ldi	r25, 0x02	; 2
     4e4:	9f 93       	push	r25
     4e6:	8f 93       	push	r24
     4e8:	1f 93       	push	r17
     4ea:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
				
				SendTrace(INFO_LEVEL, "Z Axis Mag = %fG\r\n", MagData.GaussZ);
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	f8 94       	cli
     4f2:	de bf       	out	0x3e, r29	; 62
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	cd bf       	out	0x3d, r28	; 61
     4f8:	8c a5       	ldd	r24, Y+44	; 0x2c
     4fa:	8f 93       	push	r24
     4fc:	8b a5       	ldd	r24, Y+43	; 0x2b
     4fe:	8f 93       	push	r24
     500:	8a a5       	ldd	r24, Y+42	; 0x2a
     502:	8f 93       	push	r24
     504:	89 a5       	ldd	r24, Y+41	; 0x29
     506:	8f 93       	push	r24
     508:	8b e4       	ldi	r24, 0x4B	; 75
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	9f 93       	push	r25
     50e:	8f 93       	push	r24
     510:	1f 93       	push	r17
     512:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
				
				SendTrace(INFO_LEVEL, "Compass Heading = %f degrees\r\n\r\n", CompassHeading);
     516:	88 a9       	ldd	r24, Y+48	; 0x30
     518:	8f 93       	push	r24
     51a:	8f a5       	ldd	r24, Y+47	; 0x2f
     51c:	8f 93       	push	r24
     51e:	8e a5       	ldd	r24, Y+46	; 0x2e
     520:	8f 93       	push	r24
     522:	8d a5       	ldd	r24, Y+45	; 0x2d
     524:	8f 93       	push	r24
     526:	8e e5       	ldi	r24, 0x5E	; 94
     528:	92 e0       	ldi	r25, 0x02	; 2
     52a:	9f 93       	push	r25
     52c:	8f 93       	push	r24
     52e:	1f 93       	push	r17
     530:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	f8 94       	cli
     538:	de bf       	out	0x3e, r29	; 62
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	cd bf       	out	0x3d, r28	; 61
				
			SendTrace(INFO_LEVEL, "Fifo Entries = %d\r\n", FifoStatus.Entries);
				
			SendTrace(INFO_LEVEL, "Fifo Triggered = %d\r\n", FifoStatus.FIFOTrig); 
				
			for (index=0; index < FifoStatus.Entries; index++)
     53e:	f3 94       	inc	r15
     540:	2f 2d       	mov	r18, r15
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	8a 81       	ldd	r24, Y+2	; 0x02
     546:	8f 73       	andi	r24, 0x3F	; 63
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	28 17       	cp	r18, r24
     54c:	39 07       	cpc	r19, r25
     54e:	0c f4       	brge	.+2      	; 0x552 <main+0x31a>
     550:	1b cf       	rjmp	.-458    	; 0x388 <main+0x150>
     552:	b6 ce       	rjmp	.-660    	; 0x2c0 <main+0x88>
	
Exit:

	return 1;
	
}
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	e0 96       	adiw	r28, 0x30	; 48
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	f8 94       	cli
     55e:	de bf       	out	0x3e, r29	; 62
     560:	0f be       	out	0x3f, r0	; 63
     562:	cd bf       	out	0x3d, r28	; 61
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	ff 90       	pop	r15
     56e:	ef 90       	pop	r14
     570:	df 90       	pop	r13
     572:	cf 90       	pop	r12
     574:	bf 90       	pop	r11
     576:	af 90       	pop	r10
     578:	9f 90       	pop	r9
     57a:	8f 90       	pop	r8
     57c:	7f 90       	pop	r7
     57e:	6f 90       	pop	r6
     580:	5f 90       	pop	r5
     582:	4f 90       	pop	r4
     584:	3f 90       	pop	r3
     586:	2f 90       	pop	r2
     588:	08 95       	ret

0000058a <__vector_6>:

	return Status;
}

ISR(PCINT2_vect)
{
     58a:	1f 92       	push	r1
     58c:	0f 92       	push	r0
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	0f 92       	push	r0
     592:	11 24       	eor	r1, r1
     594:	0b b6       	in	r0, 0x3b	; 59
     596:	0f 92       	push	r0
     598:	2f 93       	push	r18
     59a:	3f 93       	push	r19
     59c:	4f 93       	push	r20
     59e:	5f 93       	push	r21
     5a0:	6f 93       	push	r22
     5a2:	7f 93       	push	r23
     5a4:	8f 93       	push	r24
     5a6:	9f 93       	push	r25
     5a8:	af 93       	push	r26
     5aa:	bf 93       	push	r27
     5ac:	ef 93       	push	r30
     5ae:	ff 93       	push	r31
	SendTrace(INFO_LEVEL, "Interrupt Fired\r\n");
     5b0:	8f e7       	ldi	r24, 0x7F	; 127
     5b2:	92 e0       	ldi	r25, 0x02	; 2
     5b4:	9f 93       	push	r25
     5b6:	8f 93       	push	r24
     5b8:	84 e0       	ldi	r24, 0x04	; 4
     5ba:	8f 93       	push	r24
     5bc:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
	
	IsAccelerometerInterruptFired = TRUE;
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	80 93 e9 0e 	sts	0x0EE9, r24
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	0f 90       	pop	r0
}
     5cc:	ff 91       	pop	r31
     5ce:	ef 91       	pop	r30
     5d0:	bf 91       	pop	r27
     5d2:	af 91       	pop	r26
     5d4:	9f 91       	pop	r25
     5d6:	8f 91       	pop	r24
     5d8:	7f 91       	pop	r23
     5da:	6f 91       	pop	r22
     5dc:	5f 91       	pop	r21
     5de:	4f 91       	pop	r20
     5e0:	3f 91       	pop	r19
     5e2:	2f 91       	pop	r18
     5e4:	0f 90       	pop	r0
     5e6:	0b be       	out	0x3b, r0	; 59
     5e8:	0f 90       	pop	r0
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	0f 90       	pop	r0
     5ee:	1f 90       	pop	r1
     5f0:	18 95       	reti

000005f2 <ReadADXL345Register>:
	}
	
Exit:

	return Status;
}
     5f2:	af 92       	push	r10
     5f4:	bf 92       	push	r11
     5f6:	cf 92       	push	r12
     5f8:	df 92       	push	r13
     5fa:	ef 92       	push	r14
     5fc:	ff 92       	push	r15
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	1f 92       	push	r1
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	89 83       	std	Y+1, r24	; 0x01
     60e:	5b 01       	movw	r10, r22
     610:	69 01       	movw	r12, r18
     612:	7a 01       	movw	r14, r20
     614:	00 e0       	ldi	r16, 0x00	; 0
     616:	2a ee       	ldi	r18, 0xEA	; 234
     618:	3e e0       	ldi	r19, 0x0E	; 14
     61a:	41 e0       	ldi	r20, 0x01	; 1
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	ce 01       	movw	r24, r28
     624:	01 96       	adiw	r24, 0x01	; 1
     626:	0e 94 3b 13 	call	0x2676	; 0x2676 <TwiTransmit>
     62a:	18 2f       	mov	r17, r24
     62c:	81 11       	cpse	r24, r1
     62e:	0c c0       	rjmp	.+24     	; 0x648 <ReadADXL345Register+0x56>
     630:	21 e9       	ldi	r18, 0x91	; 145
     632:	32 e0       	ldi	r19, 0x02	; 2
     634:	3f 93       	push	r19
     636:	2f 93       	push	r18
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	8f 93       	push	r24
     63c:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	16 c0       	rjmp	.+44     	; 0x674 <ReadADXL345Register+0x82>
     648:	01 e0       	ldi	r16, 0x01	; 1
     64a:	2a ee       	ldi	r18, 0xEA	; 234
     64c:	3e e0       	ldi	r19, 0x0E	; 14
     64e:	b7 01       	movw	r22, r14
     650:	a6 01       	movw	r20, r12
     652:	c5 01       	movw	r24, r10
     654:	0e 94 96 14 	call	0x292c	; 0x292c <TwiReceive>
     658:	18 2f       	mov	r17, r24
     65a:	81 11       	cpse	r24, r1
     65c:	0b c0       	rjmp	.+22     	; 0x674 <ReadADXL345Register+0x82>
     65e:	29 eb       	ldi	r18, 0xB9	; 185
     660:	32 e0       	ldi	r19, 0x02	; 2
     662:	3f 93       	push	r19
     664:	2f 93       	push	r18
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	8f 93       	push	r24
     66a:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	81 2f       	mov	r24, r17
     676:	0f 90       	pop	r0
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	1f 91       	pop	r17
     67e:	0f 91       	pop	r16
     680:	ff 90       	pop	r15
     682:	ef 90       	pop	r14
     684:	df 90       	pop	r13
     686:	cf 90       	pop	r12
     688:	bf 90       	pop	r11
     68a:	af 90       	pop	r10
     68c:	08 95       	ret

0000068e <ReadADXL345InterruptSource>:
     68e:	cf 93       	push	r28
     690:	20 91 e2 0e 	lds	r18, 0x0EE2
     694:	21 11       	cpse	r18, r1
     696:	0d c0       	rjmp	.+26     	; 0x6b2 <ReadADXL345InterruptSource+0x24>
     698:	8f ed       	ldi	r24, 0xDF	; 223
     69a:	92 e0       	ldi	r25, 0x02	; 2
     69c:	9f 93       	push	r25
     69e:	8f 93       	push	r24
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	8f 93       	push	r24
     6a4:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	c0 e0       	ldi	r28, 0x00	; 0
     6b0:	15 c0       	rjmp	.+42     	; 0x6dc <ReadADXL345InterruptSource+0x4e>
     6b2:	21 e0       	ldi	r18, 0x01	; 1
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	40 e0       	ldi	r20, 0x00	; 0
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	bc 01       	movw	r22, r24
     6bc:	80 e3       	ldi	r24, 0x30	; 48
     6be:	99 df       	rcall	.-206    	; 0x5f2 <ReadADXL345Register>
     6c0:	c8 2f       	mov	r28, r24
     6c2:	81 11       	cpse	r24, r1
     6c4:	0b c0       	rjmp	.+22     	; 0x6dc <ReadADXL345InterruptSource+0x4e>
     6c6:	2c e6       	ldi	r18, 0x6C	; 108
     6c8:	33 e0       	ldi	r19, 0x03	; 3
     6ca:	3f 93       	push	r19
     6cc:	2f 93       	push	r18
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	8f 93       	push	r24
     6d2:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	8c 2f       	mov	r24, r28
     6de:	cf 91       	pop	r28
     6e0:	08 95       	ret

000006e2 <ReadADXL345FifoStatus>:
     6e2:	cf 93       	push	r28
     6e4:	20 91 e2 0e 	lds	r18, 0x0EE2
     6e8:	21 11       	cpse	r18, r1
     6ea:	0d c0       	rjmp	.+26     	; 0x706 <ReadADXL345FifoStatus+0x24>
     6ec:	8f ed       	ldi	r24, 0xDF	; 223
     6ee:	92 e0       	ldi	r25, 0x02	; 2
     6f0:	9f 93       	push	r25
     6f2:	8f 93       	push	r24
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	8f 93       	push	r24
     6f8:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	c0 e0       	ldi	r28, 0x00	; 0
     704:	15 c0       	rjmp	.+42     	; 0x730 <ReadADXL345FifoStatus+0x4e>
     706:	21 e0       	ldi	r18, 0x01	; 1
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	40 e0       	ldi	r20, 0x00	; 0
     70c:	50 e0       	ldi	r21, 0x00	; 0
     70e:	bc 01       	movw	r22, r24
     710:	89 e3       	ldi	r24, 0x39	; 57
     712:	6f df       	rcall	.-290    	; 0x5f2 <ReadADXL345Register>
     714:	c8 2f       	mov	r28, r24
     716:	81 11       	cpse	r24, r1
     718:	0b c0       	rjmp	.+22     	; 0x730 <ReadADXL345FifoStatus+0x4e>
     71a:	23 e9       	ldi	r18, 0x93	; 147
     71c:	33 e0       	ldi	r19, 0x03	; 3
     71e:	3f 93       	push	r19
     720:	2f 93       	push	r18
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	8f 93       	push	r24
     726:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
     72a:	0f 90       	pop	r0
     72c:	0f 90       	pop	r0
     72e:	0f 90       	pop	r0
     730:	8c 2f       	mov	r24, r28
     732:	cf 91       	pop	r28
     734:	08 95       	ret

00000736 <ReadADXL345RawData>:

bool ReadADXL345RawData(PRAW_DATA_XYZ RawData)
{
     736:	cf 93       	push	r28
	bool Status = FALSE;
	
	if (!gIsADXL345Initialized)
     738:	20 91 e2 0e 	lds	r18, 0x0EE2
     73c:	21 11       	cpse	r18, r1
     73e:	0d c0       	rjmp	.+26     	; 0x75a <ReadADXL345RawData+0x24>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
     740:	8f ed       	ldi	r24, 0xDF	; 223
     742:	92 e0       	ldi	r25, 0x02	; 2
     744:	9f 93       	push	r25
     746:	8f 93       	push	r24
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	8f 93       	push	r24
     74c:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
		
		goto Exit;
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
	return Status;
}

bool ReadADXL345RawData(PRAW_DATA_XYZ RawData)
{
	bool Status = FALSE;
     756:	c0 e0       	ldi	r28, 0x00	; 0
	
	if (!gIsADXL345Initialized)
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
		
		goto Exit;
     758:	15 c0       	rjmp	.+42     	; 0x784 <ReadADXL345RawData+0x4e>
	}
	
	Status = ReadADXL345Register(ADR_DATAX0, RawData, sizeof(RAW_DATA_XYZ));
     75a:	26 e0       	ldi	r18, 0x06	; 6
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	40 e0       	ldi	r20, 0x00	; 0
     760:	50 e0       	ldi	r21, 0x00	; 0
     762:	bc 01       	movw	r22, r24
     764:	82 e3       	ldi	r24, 0x32	; 50
     766:	45 df       	rcall	.-374    	; 0x5f2 <ReadADXL345Register>
     768:	c8 2f       	mov	r28, r24
	
	if(!Status)
     76a:	81 11       	cpse	r24, r1
     76c:	0b c0       	rjmp	.+22     	; 0x784 <ReadADXL345RawData+0x4e>
	{
		SendTrace(ERROR_LEVEL, "Failed to read Data Register. \r\n");
     76e:	26 ee       	ldi	r18, 0xE6	; 230
     770:	33 e0       	ldi	r19, 0x03	; 3
     772:	3f 93       	push	r19
     774:	2f 93       	push	r18
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	8f 93       	push	r24
     77a:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
	}
	
Exit:

	return Status;
}
     784:	8c 2f       	mov	r24, r28
     786:	cf 91       	pop	r28
     788:	08 95       	ret

0000078a <FlushADXL345Fifo>:

	return Status;	
}

bool FlushADXL345Fifo()
{
     78a:	ef 92       	push	r14
     78c:	ff 92       	push	r15
     78e:	0f 93       	push	r16
     790:	1f 93       	push	r17
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	cd b7       	in	r28, 0x3d	; 61
     798:	de b7       	in	r29, 0x3e	; 62
     79a:	27 97       	sbiw	r28, 0x07	; 7
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	de bf       	out	0x3e, r29	; 62
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char index;
	
	RAW_DATA_XYZ Data;
	
	if (!ReadADXL345FifoStatus(&FifoStatus))
     7a6:	ce 01       	movw	r24, r28
     7a8:	01 96       	adiw	r24, 0x01	; 1
     7aa:	9b df       	rcall	.-202    	; 0x6e2 <ReadADXL345FifoStatus>
     7ac:	88 23       	and	r24, r24
     7ae:	f9 f0       	breq	.+62     	; 0x7ee <FlushADXL345Fifo+0x64>
		Status = FALSE;
		
		goto Exit;
	}
	
	for (index=0; index < FifoStatus.Entries; index++)
     7b0:	89 81       	ldd	r24, Y+1	; 0x01
     7b2:	8f 73       	andi	r24, 0x3F	; 63
     7b4:	f1 f0       	breq	.+60     	; 0x7f2 <FlushADXL345Fifo+0x68>
     7b6:	f1 2c       	mov	r15, r1
	{
		if(!ReadADXL345RawData(&Data))
		{
			SendTrace(ERROR_LEVEL, "Reading data failed while attempting to flush FIFO. \r\n");
     7b8:	07 e0       	ldi	r16, 0x07	; 7
     7ba:	14 e0       	ldi	r17, 0x04	; 4
     7bc:	ee 24       	eor	r14, r14
     7be:	e3 94       	inc	r14
		goto Exit;
	}
	
	for (index=0; index < FifoStatus.Entries; index++)
	{
		if(!ReadADXL345RawData(&Data))
     7c0:	ce 01       	movw	r24, r28
     7c2:	02 96       	adiw	r24, 0x02	; 2
     7c4:	b8 df       	rcall	.-144    	; 0x736 <ReadADXL345RawData>
     7c6:	81 11       	cpse	r24, r1
     7c8:	08 c0       	rjmp	.+16     	; 0x7da <FlushADXL345Fifo+0x50>
		{
			SendTrace(ERROR_LEVEL, "Reading data failed while attempting to flush FIFO. \r\n");
     7ca:	1f 93       	push	r17
     7cc:	0f 93       	push	r16
     7ce:	ef 92       	push	r14
     7d0:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
     7d4:	0f 90       	pop	r0
     7d6:	0f 90       	pop	r0
     7d8:	0f 90       	pop	r0
		Status = FALSE;
		
		goto Exit;
	}
	
	for (index=0; index < FifoStatus.Entries; index++)
     7da:	f3 94       	inc	r15
     7dc:	2f 2d       	mov	r18, r15
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
     7e2:	8f 73       	andi	r24, 0x3F	; 63
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	28 17       	cp	r18, r24
     7e8:	39 07       	cpc	r19, r25
     7ea:	54 f3       	brlt	.-44     	; 0x7c0 <FlushADXL345Fifo+0x36>
     7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <FlushADXL345Fifo+0x6c>
	
	RAW_DATA_XYZ Data;
	
	if (!ReadADXL345FifoStatus(&FifoStatus))
	{
		Status = FALSE;
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <FlushADXL345Fifo+0x6e>
	return Status;	
}

bool FlushADXL345Fifo()
{
	bool Status = TRUE;
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <FlushADXL345Fifo+0x6e>
     7f6:	81 e0       	ldi	r24, 0x01	; 1
	}
	
Exit:

	return Status;
}
     7f8:	27 96       	adiw	r28, 0x07	; 7
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	f8 94       	cli
     7fe:	de bf       	out	0x3e, r29	; 62
     800:	0f be       	out	0x3f, r0	; 63
     802:	cd bf       	out	0x3d, r28	; 61
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	1f 91       	pop	r17
     80a:	0f 91       	pop	r16
     80c:	ff 90       	pop	r15
     80e:	ef 90       	pop	r14
     810:	08 95       	ret

00000812 <ReadADXL345AccAndTiltData>:

	return Status;
}

bool ReadADXL345AccAndTiltData(ANGLE_UNIT AngleUnit, PACC_TILT_DATA_XYZ AccTiltData)
{
     812:	2f 92       	push	r2
     814:	3f 92       	push	r3
     816:	4f 92       	push	r4
     818:	5f 92       	push	r5
     81a:	6f 92       	push	r6
     81c:	7f 92       	push	r7
     81e:	8f 92       	push	r8
     820:	9f 92       	push	r9
     822:	af 92       	push	r10
     824:	bf 92       	push	r11
     826:	cf 92       	push	r12
     828:	df 92       	push	r13
     82a:	ef 92       	push	r14
     82c:	ff 92       	push	r15
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	cd b7       	in	r28, 0x3d	; 61
     838:	de b7       	in	r29, 0x3e	; 62
     83a:	62 97       	sbiw	r28, 0x12	; 18
     83c:	0f b6       	in	r0, 0x3f	; 63
     83e:	f8 94       	cli
     840:	de bf       	out	0x3e, r29	; 62
     842:	0f be       	out	0x3f, r0	; 63
     844:	cd bf       	out	0x3d, r28	; 61
     846:	08 2f       	mov	r16, r24
     848:	1b 01       	movw	r2, r22
	
	double RadToDegree;
	
	RAW_DATA_XYZ RawData;
	
	if (!gIsADXL345Initialized)
     84a:	80 91 e2 0e 	lds	r24, 0x0EE2
     84e:	81 11       	cpse	r24, r1
     850:	0d c0       	rjmp	.+26     	; 0x86c <ReadADXL345AccAndTiltData+0x5a>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
     852:	8f ed       	ldi	r24, 0xDF	; 223
     854:	92 e0       	ldi	r25, 0x02	; 2
     856:	9f 93       	push	r25
     858:	8f 93       	push	r24
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	8f 93       	push	r24
     85e:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
		
		goto Exit;
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
	return Status;
}

bool ReadADXL345AccAndTiltData(ANGLE_UNIT AngleUnit, PACC_TILT_DATA_XYZ AccTiltData)
{
	bool Status = FALSE;
     868:	10 e0       	ldi	r17, 0x00	; 0
	
	if (!gIsADXL345Initialized)
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
		
		goto Exit;
     86a:	e5 c0       	rjmp	.+458    	; 0xa36 <ReadADXL345AccAndTiltData+0x224>
	}
	
	Status = ReadADXL345Register(ADR_DATAX0, &RawData, sizeof(RAW_DATA_XYZ));
     86c:	26 e0       	ldi	r18, 0x06	; 6
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	40 e0       	ldi	r20, 0x00	; 0
     872:	50 e0       	ldi	r21, 0x00	; 0
     874:	be 01       	movw	r22, r28
     876:	6f 5f       	subi	r22, 0xFF	; 255
     878:	7f 4f       	sbci	r23, 0xFF	; 255
     87a:	82 e3       	ldi	r24, 0x32	; 50
     87c:	ba de       	rcall	.-652    	; 0x5f2 <ReadADXL345Register>
     87e:	18 2f       	mov	r17, r24
	
	if(!Status)
     880:	81 11       	cpse	r24, r1
     882:	0c c0       	rjmp	.+24     	; 0x89c <ReadADXL345AccAndTiltData+0x8a>
	{
		SendTrace(ERROR_LEVEL, "Failed to read Data Register. \r\n");
     884:	86 ee       	ldi	r24, 0xE6	; 230
     886:	93 e0       	ldi	r25, 0x03	; 3
     888:	9f 93       	push	r25
     88a:	8f 93       	push	r24
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	8f 93       	push	r24
     890:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
		
		goto Exit;
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	0f 90       	pop	r0
     89a:	cd c0       	rjmp	.+410    	; 0xa36 <ReadADXL345AccAndTiltData+0x224>
	
	//
	// Calculate G Data in X, Y and Z axis
	//
	
	AccTiltData->AccX = RawData.DataX / LsbPerG;
     89c:	69 81       	ldd	r22, Y+1	; 0x01
     89e:	7a 81       	ldd	r23, Y+2	; 0x02
     8a0:	88 27       	eor	r24, r24
     8a2:	77 fd       	sbrc	r23, 7
     8a4:	80 95       	com	r24
     8a6:	98 2f       	mov	r25, r24
     8a8:	0e 94 2c 18 	call	0x3058	; 0x3058 <__floatsisf>
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	40 e8       	ldi	r20, 0x80	; 128
     8b2:	5b e3       	ldi	r21, 0x3B	; 59
     8b4:	0e 94 93 19 	call	0x3326	; 0x3326 <__mulsf3>
     8b8:	4b 01       	movw	r8, r22
     8ba:	5c 01       	movw	r10, r24
     8bc:	f1 01       	movw	r30, r2
     8be:	60 83       	st	Z, r22
     8c0:	71 83       	std	Z+1, r23	; 0x01
     8c2:	82 83       	std	Z+2, r24	; 0x02
     8c4:	93 83       	std	Z+3, r25	; 0x03
	
	AccTiltData->AccY = RawData.DataY / LsbPerG;
     8c6:	6b 81       	ldd	r22, Y+3	; 0x03
     8c8:	7c 81       	ldd	r23, Y+4	; 0x04
     8ca:	88 27       	eor	r24, r24
     8cc:	77 fd       	sbrc	r23, 7
     8ce:	80 95       	com	r24
     8d0:	98 2f       	mov	r25, r24
     8d2:	0e 94 2c 18 	call	0x3058	; 0x3058 <__floatsisf>
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	40 e8       	ldi	r20, 0x80	; 128
     8dc:	5b e3       	ldi	r21, 0x3B	; 59
     8de:	0e 94 93 19 	call	0x3326	; 0x3326 <__mulsf3>
     8e2:	6b 01       	movw	r12, r22
     8e4:	7c 01       	movw	r14, r24
     8e6:	f1 01       	movw	r30, r2
     8e8:	64 83       	std	Z+4, r22	; 0x04
     8ea:	75 83       	std	Z+5, r23	; 0x05
     8ec:	86 83       	std	Z+6, r24	; 0x06
     8ee:	97 83       	std	Z+7, r25	; 0x07
	
	AccTiltData->AccZ = RawData.DataZ / LsbPerG;
     8f0:	6d 81       	ldd	r22, Y+5	; 0x05
     8f2:	7e 81       	ldd	r23, Y+6	; 0x06
     8f4:	88 27       	eor	r24, r24
     8f6:	77 fd       	sbrc	r23, 7
     8f8:	80 95       	com	r24
     8fa:	98 2f       	mov	r25, r24
     8fc:	0e 94 2c 18 	call	0x3058	; 0x3058 <__floatsisf>
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	40 e8       	ldi	r20, 0x80	; 128
     906:	5b e3       	ldi	r21, 0x3B	; 59
     908:	0e 94 93 19 	call	0x3326	; 0x3326 <__mulsf3>
     90c:	2b 01       	movw	r4, r22
     90e:	3c 01       	movw	r6, r24
     910:	f1 01       	movw	r30, r2
     912:	60 87       	std	Z+8, r22	; 0x08
     914:	71 87       	std	Z+9, r23	; 0x09
     916:	82 87       	std	Z+10, r24	; 0x0a
     918:	93 87       	std	Z+11, r25	; 0x0b
	
	//
	// Calculate Tilt in X, Y and Z axis
	//
	
	DataXSqrd = pow(AccTiltData->AccX, 2.0);
     91a:	a5 01       	movw	r20, r10
     91c:	94 01       	movw	r18, r8
     91e:	c5 01       	movw	r24, r10
     920:	b4 01       	movw	r22, r8
     922:	0e 94 93 19 	call	0x3326	; 0x3326 <__mulsf3>
     926:	6f 83       	std	Y+7, r22	; 0x07
     928:	78 87       	std	Y+8, r23	; 0x08
     92a:	89 87       	std	Y+9, r24	; 0x09
     92c:	9a 87       	std	Y+10, r25	; 0x0a
	
	DataYSqrd = pow(AccTiltData->AccY, 2.0);
     92e:	a7 01       	movw	r20, r14
     930:	96 01       	movw	r18, r12
     932:	c7 01       	movw	r24, r14
     934:	b6 01       	movw	r22, r12
     936:	0e 94 93 19 	call	0x3326	; 0x3326 <__mulsf3>
     93a:	6b 87       	std	Y+11, r22	; 0x0b
     93c:	7c 87       	std	Y+12, r23	; 0x0c
     93e:	8d 87       	std	Y+13, r24	; 0x0d
     940:	9e 87       	std	Y+14, r25	; 0x0e
	
	DataZSqrd = pow(AccTiltData->AccZ, 2.0);
     942:	a3 01       	movw	r20, r6
     944:	92 01       	movw	r18, r4
     946:	c3 01       	movw	r24, r6
     948:	b2 01       	movw	r22, r4
     94a:	0e 94 93 19 	call	0x3326	; 0x3326 <__mulsf3>
     94e:	6f 87       	std	Y+15, r22	; 0x0f
     950:	78 8b       	std	Y+16, r23	; 0x10
     952:	89 8b       	std	Y+17, r24	; 0x11
     954:	9a 8b       	std	Y+18, r25	; 0x12
	
	AccTiltData->TiltX = atan2 (AccTiltData->AccX, sqrt(DataYSqrd + DataZSqrd));
     956:	9b 01       	movw	r18, r22
     958:	ac 01       	movw	r20, r24
     95a:	6b 85       	ldd	r22, Y+11	; 0x0b
     95c:	7c 85       	ldd	r23, Y+12	; 0x0c
     95e:	8d 85       	ldd	r24, Y+13	; 0x0d
     960:	9e 85       	ldd	r25, Y+14	; 0x0e
     962:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <__addsf3>
     966:	0e 94 00 1a 	call	0x3400	; 0x3400 <sqrt>
     96a:	9b 01       	movw	r18, r22
     96c:	ac 01       	movw	r20, r24
     96e:	c5 01       	movw	r24, r10
     970:	b4 01       	movw	r22, r8
     972:	0e 94 00 17 	call	0x2e00	; 0x2e00 <atan2>
     976:	4b 01       	movw	r8, r22
     978:	5c 01       	movw	r10, r24
     97a:	f1 01       	movw	r30, r2
     97c:	64 87       	std	Z+12, r22	; 0x0c
     97e:	75 87       	std	Z+13, r23	; 0x0d
     980:	86 87       	std	Z+14, r24	; 0x0e
     982:	97 87       	std	Z+15, r25	; 0x0f
	
	AccTiltData->TiltY = atan2 (AccTiltData->AccY, sqrt(DataXSqrd + DataZSqrd));
     984:	2f 85       	ldd	r18, Y+15	; 0x0f
     986:	38 89       	ldd	r19, Y+16	; 0x10
     988:	49 89       	ldd	r20, Y+17	; 0x11
     98a:	5a 89       	ldd	r21, Y+18	; 0x12
     98c:	6f 81       	ldd	r22, Y+7	; 0x07
     98e:	78 85       	ldd	r23, Y+8	; 0x08
     990:	89 85       	ldd	r24, Y+9	; 0x09
     992:	9a 85       	ldd	r25, Y+10	; 0x0a
     994:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <__addsf3>
     998:	0e 94 00 1a 	call	0x3400	; 0x3400 <sqrt>
     99c:	9b 01       	movw	r18, r22
     99e:	ac 01       	movw	r20, r24
     9a0:	c7 01       	movw	r24, r14
     9a2:	b6 01       	movw	r22, r12
     9a4:	0e 94 00 17 	call	0x2e00	; 0x2e00 <atan2>
     9a8:	6b 01       	movw	r12, r22
     9aa:	7c 01       	movw	r14, r24
     9ac:	f1 01       	movw	r30, r2
     9ae:	60 8b       	std	Z+16, r22	; 0x10
     9b0:	71 8b       	std	Z+17, r23	; 0x11
     9b2:	82 8b       	std	Z+18, r24	; 0x12
     9b4:	93 8b       	std	Z+19, r25	; 0x13
	
	AccTiltData->TiltZ = atan2 (sqrt(DataXSqrd + DataYSqrd), AccTiltData->AccZ);
     9b6:	2b 85       	ldd	r18, Y+11	; 0x0b
     9b8:	3c 85       	ldd	r19, Y+12	; 0x0c
     9ba:	4d 85       	ldd	r20, Y+13	; 0x0d
     9bc:	5e 85       	ldd	r21, Y+14	; 0x0e
     9be:	6f 81       	ldd	r22, Y+7	; 0x07
     9c0:	78 85       	ldd	r23, Y+8	; 0x08
     9c2:	89 85       	ldd	r24, Y+9	; 0x09
     9c4:	9a 85       	ldd	r25, Y+10	; 0x0a
     9c6:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <__addsf3>
     9ca:	0e 94 00 1a 	call	0x3400	; 0x3400 <sqrt>
     9ce:	a3 01       	movw	r20, r6
     9d0:	92 01       	movw	r18, r4
     9d2:	0e 94 00 17 	call	0x2e00	; 0x2e00 <atan2>
     9d6:	2b 01       	movw	r4, r22
     9d8:	3c 01       	movw	r6, r24
     9da:	f1 01       	movw	r30, r2
     9dc:	64 8b       	std	Z+20, r22	; 0x14
     9de:	75 8b       	std	Z+21, r23	; 0x15
     9e0:	86 8b       	std	Z+22, r24	; 0x16
     9e2:	97 8b       	std	Z+23, r25	; 0x17
	
	if (AngleUnit == DEGREES)
     9e4:	01 30       	cpi	r16, 0x01	; 1
     9e6:	39 f5       	brne	.+78     	; 0xa36 <ReadADXL345AccAndTiltData+0x224>
	{
		RadToDegree = 180.0 / M_PI;
		
		AccTiltData->TiltX = AccTiltData->TiltX * RadToDegree;
     9e8:	20 ee       	ldi	r18, 0xE0	; 224
     9ea:	3e e2       	ldi	r19, 0x2E	; 46
     9ec:	45 e6       	ldi	r20, 0x65	; 101
     9ee:	52 e4       	ldi	r21, 0x42	; 66
     9f0:	c5 01       	movw	r24, r10
     9f2:	b4 01       	movw	r22, r8
     9f4:	0e 94 93 19 	call	0x3326	; 0x3326 <__mulsf3>
     9f8:	f1 01       	movw	r30, r2
     9fa:	64 87       	std	Z+12, r22	; 0x0c
     9fc:	75 87       	std	Z+13, r23	; 0x0d
     9fe:	86 87       	std	Z+14, r24	; 0x0e
     a00:	97 87       	std	Z+15, r25	; 0x0f
	
		AccTiltData->TiltY = AccTiltData->TiltY * RadToDegree;
     a02:	20 ee       	ldi	r18, 0xE0	; 224
     a04:	3e e2       	ldi	r19, 0x2E	; 46
     a06:	45 e6       	ldi	r20, 0x65	; 101
     a08:	52 e4       	ldi	r21, 0x42	; 66
     a0a:	c7 01       	movw	r24, r14
     a0c:	b6 01       	movw	r22, r12
     a0e:	0e 94 93 19 	call	0x3326	; 0x3326 <__mulsf3>
     a12:	f1 01       	movw	r30, r2
     a14:	60 8b       	std	Z+16, r22	; 0x10
     a16:	71 8b       	std	Z+17, r23	; 0x11
     a18:	82 8b       	std	Z+18, r24	; 0x12
     a1a:	93 8b       	std	Z+19, r25	; 0x13
	
		AccTiltData->TiltZ = AccTiltData->TiltZ * RadToDegree;
     a1c:	20 ee       	ldi	r18, 0xE0	; 224
     a1e:	3e e2       	ldi	r19, 0x2E	; 46
     a20:	45 e6       	ldi	r20, 0x65	; 101
     a22:	52 e4       	ldi	r21, 0x42	; 66
     a24:	c3 01       	movw	r24, r6
     a26:	b2 01       	movw	r22, r4
     a28:	0e 94 93 19 	call	0x3326	; 0x3326 <__mulsf3>
     a2c:	f1 01       	movw	r30, r2
     a2e:	64 8b       	std	Z+20, r22	; 0x14
     a30:	75 8b       	std	Z+21, r23	; 0x15
     a32:	86 8b       	std	Z+22, r24	; 0x16
     a34:	97 8b       	std	Z+23, r25	; 0x17
	}
	
Exit:

	return Status;	
}
     a36:	81 2f       	mov	r24, r17
     a38:	62 96       	adiw	r28, 0x12	; 18
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	f8 94       	cli
     a3e:	de bf       	out	0x3e, r29	; 62
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	cd bf       	out	0x3d, r28	; 61
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	ff 90       	pop	r15
     a4e:	ef 90       	pop	r14
     a50:	df 90       	pop	r13
     a52:	cf 90       	pop	r12
     a54:	bf 90       	pop	r11
     a56:	af 90       	pop	r10
     a58:	9f 90       	pop	r9
     a5a:	8f 90       	pop	r8
     a5c:	7f 90       	pop	r7
     a5e:	6f 90       	pop	r6
     a60:	5f 90       	pop	r5
     a62:	4f 90       	pop	r4
     a64:	3f 90       	pop	r3
     a66:	2f 90       	pop	r2
     a68:	08 95       	ret

00000a6a <CheckADXL345DeviceId>:
//
// Private Functions
//

bool CheckADXL345DeviceId()
{
     a6a:	1f 93       	push	r17
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
     a70:	1f 92       	push	r1
     a72:	cd b7       	in	r28, 0x3d	; 61
     a74:	de b7       	in	r29, 0x3e	; 62
	bool Status = FALSE;
	
	unsigned char DeviceId;
	
	Status = ReadADXL345Register(ADR_DEVID, &DeviceId, sizeof(unsigned char));
     a76:	21 e0       	ldi	r18, 0x01	; 1
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	40 e0       	ldi	r20, 0x00	; 0
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	be 01       	movw	r22, r28
     a80:	6f 5f       	subi	r22, 0xFF	; 255
     a82:	7f 4f       	sbci	r23, 0xFF	; 255
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	b5 dd       	rcall	.-1174   	; 0x5f2 <ReadADXL345Register>
     a88:	18 2f       	mov	r17, r24
	
	if (!Status)
     a8a:	81 11       	cpse	r24, r1
     a8c:	0c c0       	rjmp	.+24     	; 0xaa6 <CheckADXL345DeviceId+0x3c>
	{
		SendTrace(ERROR_LEVEL, "Failed to read Accelerometer Device Id. \r\n");
     a8e:	2e e3       	ldi	r18, 0x3E	; 62
     a90:	34 e0       	ldi	r19, 0x04	; 4
     a92:	3f 93       	push	r19
     a94:	2f 93       	push	r18
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	8f 93       	push	r24
     a9a:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
		
		goto Exit;
     a9e:	0f 90       	pop	r0
     aa0:	0f 90       	pop	r0
     aa2:	0f 90       	pop	r0
     aa4:	13 c0       	rjmp	.+38     	; 0xacc <CheckADXL345DeviceId+0x62>
	}
	
	if (DeviceId != DEVID)
     aa6:	89 81       	ldd	r24, Y+1	; 0x01
     aa8:	85 3e       	cpi	r24, 0xE5	; 229
     aaa:	81 f0       	breq	.+32     	; 0xacc <CheckADXL345DeviceId+0x62>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer Device Id does not match 0x%x. \r\n", DeviceId);
     aac:	1f 92       	push	r1
     aae:	8f 93       	push	r24
     ab0:	89 e6       	ldi	r24, 0x69	; 105
     ab2:	94 e0       	ldi	r25, 0x04	; 4
     ab4:	9f 93       	push	r25
     ab6:	8f 93       	push	r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	8f 93       	push	r24
     abc:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
     ac0:	0f 90       	pop	r0
     ac2:	0f 90       	pop	r0
     ac4:	0f 90       	pop	r0
     ac6:	0f 90       	pop	r0
     ac8:	0f 90       	pop	r0
		
		Status = FALSE;
     aca:	10 e0       	ldi	r17, 0x00	; 0
	}
	
Exit:
	
	return Status;
}
     acc:	81 2f       	mov	r24, r17
     ace:	0f 90       	pop	r0
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	08 95       	ret

00000ad8 <InitADXL345DevAddress>:

bool InitADXL345DevAddress(bool IsAltAddressGnd)
{
	bool Status = FALSE;
	
    gADXL345DeviceAddress.Address = GET_DEVICE_ADDRESS(IsAltAddressGnd);
     ad8:	88 23       	and	r24, r24
     ada:	11 f0       	breq	.+4      	; 0xae0 <InitADXL345DevAddress+0x8>
     adc:	83 e5       	ldi	r24, 0x53	; 83
     ade:	01 c0       	rjmp	.+2      	; 0xae2 <InitADXL345DevAddress+0xa>
     ae0:	8d e1       	ldi	r24, 0x1D	; 29
     ae2:	28 2f       	mov	r18, r24
     ae4:	22 0f       	add	r18, r18
     ae6:	90 91 ea 0e 	lds	r25, 0x0EEA
     aea:	91 70       	andi	r25, 0x01	; 1
     aec:	92 2b       	or	r25, r18
     aee:	90 93 ea 0e 	sts	0x0EEA, r25
	
	SendTrace(INFO_LEVEL, "Device Address = 0x%x\r\n", gADXL345DeviceAddress.Address);
     af2:	1f 92       	push	r1
     af4:	8f 93       	push	r24
     af6:	89 e9       	ldi	r24, 0x99	; 153
     af8:	94 e0       	ldi	r25, 0x04	; 4
     afa:	9f 93       	push	r25
     afc:	8f 93       	push	r24
     afe:	84 e0       	ldi	r24, 0x04	; 4
     b00:	8f 93       	push	r24
     b02:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
	
	//
	// Check Accelerometer Device ID
	//
	
	Status = CheckADXL345DeviceId();
     b06:	b1 df       	rcall	.-158    	; 0xa6a <CheckADXL345DeviceId>
	
	if (!Status)
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	0f 90       	pop	r0
     b12:	88 23       	and	r24, r24
     b14:	19 f0       	breq	.+6      	; 0xb1c <InitADXL345DevAddress+0x44>
	{
		goto Exit;
	}
	
	gIsADXL345Initialized = TRUE;
     b16:	91 e0       	ldi	r25, 0x01	; 1
     b18:	90 93 e2 0e 	sts	0x0EE2, r25
	
Exit:
	
    return Status;
}
     b1c:	08 95       	ret

00000b1e <SetADXL345Register>:

	return Status;
}

bool SetADXL345Register(unsigned char RegisterAddress, PVOID RegisterValue, unsigned long Length)
{
     b1e:	af 92       	push	r10
     b20:	bf 92       	push	r11
     b22:	cf 92       	push	r12
     b24:	df 92       	push	r13
     b26:	ef 92       	push	r14
     b28:	ff 92       	push	r15
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	18 2f       	mov	r17, r24
     b34:	5b 01       	movw	r10, r22
     b36:	69 01       	movw	r12, r18
     b38:	7a 01       	movw	r14, r20
	bool Status = FALSE;
	
	PVOID WriteValue;
	
	WriteValue = malloc(Length + 1);
     b3a:	c9 01       	movw	r24, r18
     b3c:	01 96       	adiw	r24, 0x01	; 1
     b3e:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <malloc>
     b42:	ec 01       	movw	r28, r24
	
	if (WriteValue == NULL)
     b44:	00 97       	sbiw	r24, 0x00	; 0
     b46:	09 f4       	brne	.+2      	; 0xb4a <SetADXL345Register+0x2c>
     b48:	49 c0       	rjmp	.+146    	; 0xbdc <SetADXL345Register+0xbe>
	{
		goto Exit;
	}
	
	*(unsigned char *)(WriteValue) = RegisterAddress;
     b4a:	fc 01       	movw	r30, r24
     b4c:	11 93       	st	Z+, r17
	
	memcpy(WriteValue + 1, RegisterValue, Length);
     b4e:	a6 01       	movw	r20, r12
     b50:	b5 01       	movw	r22, r10
     b52:	cf 01       	movw	r24, r30
     b54:	0e 94 90 1c 	call	0x3920	; 0x3920 <memcpy>
	
	Status = TwiTransmit(WriteValue, Length + 1, &gADXL345DeviceAddress, TRUE);
     b58:	01 e0       	ldi	r16, 0x01	; 1
     b5a:	2a ee       	ldi	r18, 0xEA	; 234
     b5c:	3e e0       	ldi	r19, 0x0E	; 14
     b5e:	b7 01       	movw	r22, r14
     b60:	a6 01       	movw	r20, r12
     b62:	4f 5f       	subi	r20, 0xFF	; 255
     b64:	5f 4f       	sbci	r21, 0xFF	; 255
     b66:	6f 4f       	sbci	r22, 0xFF	; 255
     b68:	7f 4f       	sbci	r23, 0xFF	; 255
     b6a:	ce 01       	movw	r24, r28
     b6c:	0e 94 3b 13 	call	0x2676	; 0x2676 <TwiTransmit>
     b70:	08 2f       	mov	r16, r24
	
	if (!Status)
     b72:	81 11       	cpse	r24, r1
     b74:	0b c0       	rjmp	.+22     	; 0xb8c <SetADXL345Register+0x6e>
	{
		SendTrace(ERROR_LEVEL, "Failed to transmit Register Value. \r\n");
     b76:	21 eb       	ldi	r18, 0xB1	; 177
     b78:	34 e0       	ldi	r19, 0x04	; 4
     b7a:	3f 93       	push	r19
     b7c:	2f 93       	push	r18
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	8f 93       	push	r24
     b82:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
	}
	
	free(WriteValue);
     b8c:	ce 01       	movw	r24, r28
     b8e:	0e 94 01 1c 	call	0x3802	; 0x3802 <free>
	
	SendTrace(INFO_LEVEL, "Written Value 0x%x\t", *(unsigned char *)RegisterValue);
     b92:	f5 01       	movw	r30, r10
     b94:	80 81       	ld	r24, Z
     b96:	1f 92       	push	r1
     b98:	8f 93       	push	r24
     b9a:	27 ed       	ldi	r18, 0xD7	; 215
     b9c:	34 e0       	ldi	r19, 0x04	; 4
     b9e:	3f 93       	push	r19
     ba0:	2f 93       	push	r18
     ba2:	c4 e0       	ldi	r28, 0x04	; 4
     ba4:	cf 93       	push	r28
     ba6:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
	
	ReadADXL345Register(RegisterAddress, RegisterValue, Length);
     baa:	a7 01       	movw	r20, r14
     bac:	96 01       	movw	r18, r12
     bae:	b5 01       	movw	r22, r10
     bb0:	81 2f       	mov	r24, r17
     bb2:	1f dd       	rcall	.-1474   	; 0x5f2 <ReadADXL345Register>
	
	SendTrace(INFO_LEVEL, "Read Value 0x%x\r\n", *(unsigned char *)RegisterValue);
     bb4:	f5 01       	movw	r30, r10
     bb6:	80 81       	ld	r24, Z
     bb8:	1f 92       	push	r1
     bba:	8f 93       	push	r24
     bbc:	2b ee       	ldi	r18, 0xEB	; 235
     bbe:	34 e0       	ldi	r19, 0x04	; 4
     bc0:	3f 93       	push	r19
     bc2:	2f 93       	push	r18
     bc4:	cf 93       	push	r28
     bc6:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
     bca:	8d b7       	in	r24, 0x3d	; 61
     bcc:	9e b7       	in	r25, 0x3e	; 62
     bce:	0a 96       	adiw	r24, 0x0a	; 10
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	9e bf       	out	0x3e, r25	; 62
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	8d bf       	out	0x3d, r24	; 61
     bda:	01 c0       	rjmp	.+2      	; 0xbde <SetADXL345Register+0xc0>
	return Status;
}

bool SetADXL345Register(unsigned char RegisterAddress, PVOID RegisterValue, unsigned long Length)
{
	bool Status = FALSE;
     bdc:	00 e0       	ldi	r16, 0x00	; 0
	SendTrace(INFO_LEVEL, "Read Value 0x%x\r\n", *(unsigned char *)RegisterValue);
	
Exit:

	return Status;
}
     bde:	80 2f       	mov	r24, r16
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	cf 90       	pop	r12
     bf0:	bf 90       	pop	r11
     bf2:	af 90       	pop	r10
     bf4:	08 95       	ret

00000bf6 <EnableDisableADXL345StandbyMode>:
	
    return Status;
}

bool EnableDisableADXL345StandbyMode(bool Enable)
{
     bf6:	0f 93       	push	r16
     bf8:	1f 93       	push	r17
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	1f 92       	push	r1
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	08 2f       	mov	r16, r24
	bool Status = FALSE;
	
	POWER_CTL PowerCtl;
	
	if (!gIsADXL345Initialized)
     c06:	90 91 e2 0e 	lds	r25, 0x0EE2
     c0a:	91 11       	cpse	r25, r1
     c0c:	0d c0       	rjmp	.+26     	; 0xc28 <EnableDisableADXL345StandbyMode+0x32>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
     c0e:	8f ed       	ldi	r24, 0xDF	; 223
     c10:	92 e0       	ldi	r25, 0x02	; 2
     c12:	9f 93       	push	r25
     c14:	8f 93       	push	r24
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	8f 93       	push	r24
     c1a:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
		
		goto Exit;
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
    return Status;
}

bool EnableDisableADXL345StandbyMode(bool Enable)
{
	bool Status = FALSE;
     c24:	10 e0       	ldi	r17, 0x00	; 0
	
	if (!gIsADXL345Initialized)
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
		
		goto Exit;
     c26:	39 c0       	rjmp	.+114    	; 0xc9a <EnableDisableADXL345StandbyMode+0xa4>
	
	//
	// Read Power Ctl Register
	//
	
	Status = ReadADXL345Register(ADR_POWER_CTL, &PowerCtl, sizeof(POWER_CTL));
     c28:	21 e0       	ldi	r18, 0x01	; 1
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	40 e0       	ldi	r20, 0x00	; 0
     c2e:	50 e0       	ldi	r21, 0x00	; 0
     c30:	be 01       	movw	r22, r28
     c32:	6f 5f       	subi	r22, 0xFF	; 255
     c34:	7f 4f       	sbci	r23, 0xFF	; 255
     c36:	8d e2       	ldi	r24, 0x2D	; 45
     c38:	dc dc       	rcall	.-1608   	; 0x5f2 <ReadADXL345Register>
     c3a:	18 2f       	mov	r17, r24
	
	if (!Status)
     c3c:	81 11       	cpse	r24, r1
     c3e:	0c c0       	rjmp	.+24     	; 0xc58 <EnableDisableADXL345StandbyMode+0x62>
	{
		SendTrace(ERROR_LEVEL, "Failed to read Power CTL register. \r\n");
     c40:	2d ef       	ldi	r18, 0xFD	; 253
     c42:	34 e0       	ldi	r19, 0x04	; 4
     c44:	3f 93       	push	r19
     c46:	2f 93       	push	r18
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	8f 93       	push	r24
     c4c:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
		
		goto Exit;
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	21 c0       	rjmp	.+66     	; 0xc9a <EnableDisableADXL345StandbyMode+0xa4>
	
	//
	// Now place the accelerometer in standby mode
	//
	
	PowerCtl.Measure = (Enable ? 0 : 1);
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	01 11       	cpse	r16, r1
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	90 fb       	bst	r25, 0
     c62:	83 f9       	bld	r24, 3
     c64:	89 83       	std	Y+1, r24	; 0x01
	
	Status = SetADXL345Register(ADR_POWER_CTL, &PowerCtl, sizeof(POWER_CTL));
     c66:	21 e0       	ldi	r18, 0x01	; 1
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	50 e0       	ldi	r21, 0x00	; 0
     c6e:	be 01       	movw	r22, r28
     c70:	6f 5f       	subi	r22, 0xFF	; 255
     c72:	7f 4f       	sbci	r23, 0xFF	; 255
     c74:	8d e2       	ldi	r24, 0x2D	; 45
     c76:	53 df       	rcall	.-346    	; 0xb1e <SetADXL345Register>
     c78:	18 2f       	mov	r17, r24
	
	if (!Status)
     c7a:	81 11       	cpse	r24, r1
     c7c:	0c c0       	rjmp	.+24     	; 0xc96 <EnableDisableADXL345StandbyMode+0xa0>
	{
		SendTrace (ERROR_LEVEL, "Failed to place Accelerometer in standby mode. \r\n");
     c7e:	23 e2       	ldi	r18, 0x23	; 35
     c80:	35 e0       	ldi	r19, 0x05	; 5
     c82:	3f 93       	push	r19
     c84:	2f 93       	push	r18
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	8f 93       	push	r24
     c8a:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
		
		goto Exit;
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <EnableDisableADXL345StandbyMode+0xa4>
	}
	
	gIsADXL345InStandby = Enable;
     c96:	00 93 06 01 	sts	0x0106, r16
	
Exit:

	return Status;
}
     c9a:	81 2f       	mov	r24, r17
     c9c:	0f 90       	pop	r0
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	08 95       	ret

00000ca8 <ProgramADXL345PowerCtl>:

bool ProgramADXL345PowerCtl(POWER_MODE PowerMode, WAKEUP_FREQ WakeupFreq)
{
     ca8:	ff 92       	push	r15
     caa:	0f 93       	push	r16
     cac:	1f 93       	push	r17
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	00 d0       	rcall	.+0      	; 0xcb4 <ProgramADXL345PowerCtl+0xc>
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
     cb8:	08 2f       	mov	r16, r24
     cba:	f6 2e       	mov	r15, r22
	
	BW_RATE BwRate;
	
	POWER_CTL PowerCtl;
	
	if (!gIsADXL345Initialized || !gIsADXL345InStandby)
     cbc:	80 91 e2 0e 	lds	r24, 0x0EE2
     cc0:	88 23       	and	r24, r24
     cc2:	21 f0       	breq	.+8      	; 0xccc <ProgramADXL345PowerCtl+0x24>
     cc4:	80 91 06 01 	lds	r24, 0x0106
     cc8:	81 11       	cpse	r24, r1
     cca:	0d c0       	rjmp	.+26     	; 0xce6 <ProgramADXL345PowerCtl+0x3e>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized or it is not in standby mode. \r\n");
     ccc:	85 e5       	ldi	r24, 0x55	; 85
     cce:	95 e0       	ldi	r25, 0x05	; 5
     cd0:	9f 93       	push	r25
     cd2:	8f 93       	push	r24
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	8f 93       	push	r24
     cd8:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
		
		goto Exit;
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
	return Status;
}

bool ProgramADXL345PowerCtl(POWER_MODE PowerMode, WAKEUP_FREQ WakeupFreq)
{
	bool Status = FALSE;
     ce2:	10 e0       	ldi	r17, 0x00	; 0
	
	if (!gIsADXL345Initialized || !gIsADXL345InStandby)
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized or it is not in standby mode. \r\n");
		
		goto Exit;
     ce4:	90 c0       	rjmp	.+288    	; 0xe06 <ProgramADXL345PowerCtl+0x15e>
	}
	
	if (PowerMode == FULL_POWER && WakeupFreq != NO_WAKEUP)
     ce6:	02 30       	cpi	r16, 0x02	; 2
     ce8:	81 f4       	brne	.+32     	; 0xd0a <ProgramADXL345PowerCtl+0x62>
     cea:	84 e0       	ldi	r24, 0x04	; 4
     cec:	68 17       	cp	r22, r24
     cee:	69 f0       	breq	.+26     	; 0xd0a <ProgramADXL345PowerCtl+0x62>
	{
		SendTrace(ERROR_LEVEL, "Invalid Wakeup Frequency Selected.\r\n");
     cf0:	84 e9       	ldi	r24, 0x94	; 148
     cf2:	95 e0       	ldi	r25, 0x05	; 5
     cf4:	9f 93       	push	r25
     cf6:	8f 93       	push	r24
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	8f 93       	push	r24
     cfc:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
		
		goto Exit;
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
	return Status;
}

bool ProgramADXL345PowerCtl(POWER_MODE PowerMode, WAKEUP_FREQ WakeupFreq)
{
	bool Status = FALSE;
     d06:	10 e0       	ldi	r17, 0x00	; 0
	
	if (PowerMode == FULL_POWER && WakeupFreq != NO_WAKEUP)
	{
		SendTrace(ERROR_LEVEL, "Invalid Wakeup Frequency Selected.\r\n");
		
		goto Exit;
     d08:	7e c0       	rjmp	.+252    	; 0xe06 <ProgramADXL345PowerCtl+0x15e>
	
	//
	// Read BW Rate Register
	//
	
	Status = ReadADXL345Register(ADR_BW_RATE, &BwRate, sizeof(BW_RATE));
     d0a:	21 e0       	ldi	r18, 0x01	; 1
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	40 e0       	ldi	r20, 0x00	; 0
     d10:	50 e0       	ldi	r21, 0x00	; 0
     d12:	be 01       	movw	r22, r28
     d14:	6f 5f       	subi	r22, 0xFF	; 255
     d16:	7f 4f       	sbci	r23, 0xFF	; 255
     d18:	8c e2       	ldi	r24, 0x2C	; 44
     d1a:	6b dc       	rcall	.-1834   	; 0x5f2 <ReadADXL345Register>
     d1c:	18 2f       	mov	r17, r24
	
	if (!Status)
     d1e:	81 11       	cpse	r24, r1
     d20:	0c c0       	rjmp	.+24     	; 0xd3a <ProgramADXL345PowerCtl+0x92>
	{
		SendTrace(ERROR_LEVEL, "Failed to read BW RATE register. \r\n");
     d22:	29 eb       	ldi	r18, 0xB9	; 185
     d24:	35 e0       	ldi	r19, 0x05	; 5
     d26:	3f 93       	push	r19
     d28:	2f 93       	push	r18
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	8f 93       	push	r24
     d2e:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
		
		goto Exit;
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	66 c0       	rjmp	.+204    	; 0xe06 <ProgramADXL345PowerCtl+0x15e>
	
	//
	// Program Power Ctl
	//
	
	PowerCtl.AsUINT8 = 0;
     d3a:	1a 82       	std	Y+2, r1	; 0x02
	
	switch (PowerMode)
     d3c:	01 30       	cpi	r16, 0x01	; 1
     d3e:	11 f1       	breq	.+68     	; 0xd84 <ProgramADXL345PowerCtl+0xdc>
     d40:	18 f0       	brcs	.+6      	; 0xd48 <ProgramADXL345PowerCtl+0xa0>
     d42:	02 30       	cpi	r16, 0x02	; 2
     d44:	59 f1       	breq	.+86     	; 0xd9c <ProgramADXL345PowerCtl+0xf4>
     d46:	30 c0       	rjmp	.+96     	; 0xda8 <ProgramADXL345PowerCtl+0x100>
	{
		case LOW_POWER:
		{
			if (BwRate.Rate < TWELVE_POINT_FIVE_HZ || BwRate.Rate > FOUR_HUNDRED_HZ)
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	87 5f       	subi	r24, 0xF7	; 247
     d4c:	8f 70       	andi	r24, 0x0F	; 15
     d4e:	86 30       	cpi	r24, 0x06	; 6
     d50:	68 f0       	brcs	.+26     	; 0xd6c <ProgramADXL345PowerCtl+0xc4>
			{
				SendTrace(ERROR_LEVEL, "Invalid Data Rate for Low Power Mode. \r\n");
     d52:	8d ed       	ldi	r24, 0xDD	; 221
     d54:	95 e0       	ldi	r25, 0x05	; 5
     d56:	9f 93       	push	r25
     d58:	8f 93       	push	r24
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	8f 93       	push	r24
     d5e:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
				
				Status = FALSE;
				
				goto Exit;
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
		{
			if (BwRate.Rate < TWELVE_POINT_FIVE_HZ || BwRate.Rate > FOUR_HUNDRED_HZ)
			{
				SendTrace(ERROR_LEVEL, "Invalid Data Rate for Low Power Mode. \r\n");
				
				Status = FALSE;
     d68:	10 e0       	ldi	r17, 0x00	; 0
				
				goto Exit;
     d6a:	4d c0       	rjmp	.+154    	; 0xe06 <ProgramADXL345PowerCtl+0x15e>
			}
			
			BwRate.LowPwr = 1;
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	80 61       	ori	r24, 0x10	; 16
     d70:	89 83       	std	Y+1, r24	; 0x01
			
			PowerCtl.AutoSleep = 1;
     d72:	9a 81       	ldd	r25, Y+2	; 0x02
			
			PowerCtl.Link = 1;
			
			PowerCtl.Measure = 1;
     d74:	94 7c       	andi	r25, 0xC4	; 196
			
			PowerCtl.Wakeup = WakeupFreq;
     d76:	8f 2d       	mov	r24, r15
     d78:	83 70       	andi	r24, 0x03	; 3
     d7a:	98 63       	ori	r25, 0x38	; 56
     d7c:	f9 2e       	mov	r15, r25
     d7e:	f8 2a       	or	r15, r24
     d80:	fa 82       	std	Y+2, r15	; 0x02
			
			break;
     d82:	12 c0       	rjmp	.+36     	; 0xda8 <ProgramADXL345PowerCtl+0x100>
		}
		case AUTO_SLEEP:
		{
			BwRate.LowPwr = 0;
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	8f 7e       	andi	r24, 0xEF	; 239
     d88:	89 83       	std	Y+1, r24	; 0x01
			
			PowerCtl.AutoSleep = 1;
     d8a:	9a 81       	ldd	r25, Y+2	; 0x02
			
			PowerCtl.Link = 1;
			
			PowerCtl.Measure = 1;
     d8c:	94 7c       	andi	r25, 0xC4	; 196
			
			PowerCtl.Wakeup = WakeupFreq;
     d8e:	8f 2d       	mov	r24, r15
     d90:	83 70       	andi	r24, 0x03	; 3
     d92:	98 63       	ori	r25, 0x38	; 56
     d94:	f9 2e       	mov	r15, r25
     d96:	f8 2a       	or	r15, r24
     d98:	fa 82       	std	Y+2, r15	; 0x02
			
			break;
     d9a:	06 c0       	rjmp	.+12     	; 0xda8 <ProgramADXL345PowerCtl+0x100>
		}
		case FULL_POWER:
		{
			BwRate.LowPwr = 0;
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	8f 7e       	andi	r24, 0xEF	; 239
     da0:	89 83       	std	Y+1, r24	; 0x01
			
			PowerCtl.Measure = 1;
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	88 60       	ori	r24, 0x08	; 8
     da6:	8a 83       	std	Y+2, r24	; 0x02
			
			break;
		}
	};
	
	Status = SetADXL345Register(ADR_BW_RATE, &BwRate, sizeof(BW_RATE));
     da8:	21 e0       	ldi	r18, 0x01	; 1
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	40 e0       	ldi	r20, 0x00	; 0
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	be 01       	movw	r22, r28
     db2:	6f 5f       	subi	r22, 0xFF	; 255
     db4:	7f 4f       	sbci	r23, 0xFF	; 255
     db6:	8c e2       	ldi	r24, 0x2C	; 44
     db8:	b2 de       	rcall	.-668    	; 0xb1e <SetADXL345Register>
     dba:	18 2f       	mov	r17, r24
	
	if (!Status)
     dbc:	81 11       	cpse	r24, r1
     dbe:	0c c0       	rjmp	.+24     	; 0xdd8 <ProgramADXL345PowerCtl+0x130>
	{
		SendTrace (ERROR_LEVEL, "Failed to program BW RATE Register. \r\n");
     dc0:	26 e0       	ldi	r18, 0x06	; 6
     dc2:	36 e0       	ldi	r19, 0x06	; 6
     dc4:	3f 93       	push	r19
     dc6:	2f 93       	push	r18
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	8f 93       	push	r24
     dcc:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
		
		goto Exit;
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
     dd6:	17 c0       	rjmp	.+46     	; 0xe06 <ProgramADXL345PowerCtl+0x15e>
	}
	
	Status = SetADXL345Register(ADR_POWER_CTL, &PowerCtl, sizeof(POWER_CTL));
     dd8:	21 e0       	ldi	r18, 0x01	; 1
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	40 e0       	ldi	r20, 0x00	; 0
     dde:	50 e0       	ldi	r21, 0x00	; 0
     de0:	be 01       	movw	r22, r28
     de2:	6e 5f       	subi	r22, 0xFE	; 254
     de4:	7f 4f       	sbci	r23, 0xFF	; 255
     de6:	8d e2       	ldi	r24, 0x2D	; 45
     de8:	9a de       	rcall	.-716    	; 0xb1e <SetADXL345Register>
     dea:	18 2f       	mov	r17, r24
	
	if (!Status)
     dec:	81 11       	cpse	r24, r1
     dee:	0b c0       	rjmp	.+22     	; 0xe06 <ProgramADXL345PowerCtl+0x15e>
	{
		SendTrace (ERROR_LEVEL, "Failed to program Power CTL Register. \r\n");
     df0:	2d e2       	ldi	r18, 0x2D	; 45
     df2:	36 e0       	ldi	r19, 0x06	; 6
     df4:	3f 93       	push	r19
     df6:	2f 93       	push	r18
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	8f 93       	push	r24
     dfc:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
	}
	
Exit:

	return Status;
}
     e06:	81 2f       	mov	r24, r17
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	ff 90       	pop	r15
     e16:	08 95       	ret

00000e18 <ProgramADXL345Interrupts>:

bool ProgramADXL345Interrupts(PINT_ENABLE_MAP_SOURCE IntMap, PINT_ENABLE_MAP_SOURCE IntEnable)
{
     e18:	1f 93       	push	r17
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	eb 01       	movw	r28, r22
	bool Status = FALSE;
	
	if (!gIsADXL345Initialized)
     e20:	20 91 e2 0e 	lds	r18, 0x0EE2
     e24:	21 11       	cpse	r18, r1
     e26:	0d c0       	rjmp	.+26     	; 0xe42 <ProgramADXL345Interrupts+0x2a>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
     e28:	8f ed       	ldi	r24, 0xDF	; 223
     e2a:	92 e0       	ldi	r25, 0x02	; 2
     e2c:	9f 93       	push	r25
     e2e:	8f 93       	push	r24
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	8f 93       	push	r24
     e34:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
		
		goto Exit;
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
	return Status;
}

bool ProgramADXL345Interrupts(PINT_ENABLE_MAP_SOURCE IntMap, PINT_ENABLE_MAP_SOURCE IntEnable)
{
	bool Status = FALSE;
     e3e:	10 e0       	ldi	r17, 0x00	; 0
	
	if (!gIsADXL345Initialized)
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
		
		goto Exit;
     e40:	2b c0       	rjmp	.+86     	; 0xe98 <ProgramADXL345Interrupts+0x80>
	
	//
	// Program Interrupts
	//
	
	Status = SetADXL345Register(ADR_INT_MAP, IntMap, sizeof(INT_ENABLE_MAP_SOURCE));
     e42:	21 e0       	ldi	r18, 0x01	; 1
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	40 e0       	ldi	r20, 0x00	; 0
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	bc 01       	movw	r22, r24
     e4c:	8f e2       	ldi	r24, 0x2F	; 47
     e4e:	67 de       	rcall	.-818    	; 0xb1e <SetADXL345Register>
     e50:	18 2f       	mov	r17, r24
	
	if (!Status)
     e52:	81 11       	cpse	r24, r1
     e54:	0c c0       	rjmp	.+24     	; 0xe6e <ProgramADXL345Interrupts+0x56>
	{
		SendTrace (ERROR_LEVEL, "Failed to program INT MAP Register. \r\n");
     e56:	26 e5       	ldi	r18, 0x56	; 86
     e58:	36 e0       	ldi	r19, 0x06	; 6
     e5a:	3f 93       	push	r19
     e5c:	2f 93       	push	r18
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	8f 93       	push	r24
     e62:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
		
		goto Exit;
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	15 c0       	rjmp	.+42     	; 0xe98 <ProgramADXL345Interrupts+0x80>
	}
	
	Status = SetADXL345Register(ADR_INT_ENABLE, IntEnable, sizeof(INT_ENABLE_MAP_SOURCE));
     e6e:	21 e0       	ldi	r18, 0x01	; 1
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	40 e0       	ldi	r20, 0x00	; 0
     e74:	50 e0       	ldi	r21, 0x00	; 0
     e76:	be 01       	movw	r22, r28
     e78:	8e e2       	ldi	r24, 0x2E	; 46
     e7a:	51 de       	rcall	.-862    	; 0xb1e <SetADXL345Register>
     e7c:	18 2f       	mov	r17, r24
	
	if (!Status)
     e7e:	81 11       	cpse	r24, r1
     e80:	0b c0       	rjmp	.+22     	; 0xe98 <ProgramADXL345Interrupts+0x80>
	{
		SendTrace (ERROR_LEVEL, "Failed to program INT ENABLE Register. \r\n");
     e82:	2d e7       	ldi	r18, 0x7D	; 125
     e84:	36 e0       	ldi	r19, 0x06	; 6
     e86:	3f 93       	push	r19
     e88:	2f 93       	push	r18
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	8f 93       	push	r24
     e8e:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
	}
	
Exit:

	return Status;
}
     e98:	81 2f       	mov	r24, r17
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	1f 91       	pop	r17
     ea0:	08 95       	ret

00000ea2 <ProgramADXL345FifoControl>:

bool ProgramADXL345FifoControl(PFIFO_CTL FifoCtl)
{
     ea2:	cf 93       	push	r28
	bool Status = FALSE;
	
	if (!gIsADXL345Initialized)
     ea4:	20 91 e2 0e 	lds	r18, 0x0EE2
     ea8:	21 11       	cpse	r18, r1
     eaa:	0d c0       	rjmp	.+26     	; 0xec6 <ProgramADXL345FifoControl+0x24>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
     eac:	8f ed       	ldi	r24, 0xDF	; 223
     eae:	92 e0       	ldi	r25, 0x02	; 2
     eb0:	9f 93       	push	r25
     eb2:	8f 93       	push	r24
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	8f 93       	push	r24
     eb8:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
		
		goto Exit;
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
	return Status;
}

bool ProgramADXL345FifoControl(PFIFO_CTL FifoCtl)
{
	bool Status = FALSE;
     ec2:	c0 e0       	ldi	r28, 0x00	; 0
	
	if (!gIsADXL345Initialized)
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
		
		goto Exit;
     ec4:	15 c0       	rjmp	.+42     	; 0xef0 <ProgramADXL345FifoControl+0x4e>
	
	//
	// Program FIFO Control Register
	//
	
	Status = SetADXL345Register(ADR_FIFO_CTL, FifoCtl, sizeof(FIFO_CTL));
     ec6:	21 e0       	ldi	r18, 0x01	; 1
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	40 e0       	ldi	r20, 0x00	; 0
     ecc:	50 e0       	ldi	r21, 0x00	; 0
     ece:	bc 01       	movw	r22, r24
     ed0:	88 e3       	ldi	r24, 0x38	; 56
     ed2:	25 de       	rcall	.-950    	; 0xb1e <SetADXL345Register>
     ed4:	c8 2f       	mov	r28, r24
	
	if (!Status)
     ed6:	81 11       	cpse	r24, r1
     ed8:	0b c0       	rjmp	.+22     	; 0xef0 <ProgramADXL345FifoControl+0x4e>
	{
		SendTrace (ERROR_LEVEL, "Failed to program FIFO CTL Register. \r\n");
     eda:	27 ea       	ldi	r18, 0xA7	; 167
     edc:	36 e0       	ldi	r19, 0x06	; 6
     ede:	3f 93       	push	r19
     ee0:	2f 93       	push	r18
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	8f 93       	push	r24
     ee6:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
	}
	
Exit:
	
	return Status;
}
     ef0:	8c 2f       	mov	r24, r28
     ef2:	cf 91       	pop	r28
     ef4:	08 95       	ret

00000ef6 <ProgramADXL345DataFormat>:

bool ProgramADXL345DataFormat(DATA_RANGE DataRange, bool IntInvert, PDATA_OFFSET DataOffset, DATA_RATE DataRate)
{
     ef6:	ef 92       	push	r14
     ef8:	ff 92       	push	r15
     efa:	0f 93       	push	r16
     efc:	1f 93       	push	r17
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	00 d0       	rcall	.+0      	; 0xf04 <ProgramADXL345DataFormat+0xe>
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	8a 01       	movw	r16, r20
     f0a:	e2 2e       	mov	r14, r18
	
	DATA_FORMAT DataFormat;
	
	BW_RATE BwRate;
	
	if (!gIsADXL345Initialized)
     f0c:	90 91 e2 0e 	lds	r25, 0x0EE2
     f10:	91 11       	cpse	r25, r1
     f12:	0d c0       	rjmp	.+26     	; 0xf2e <ProgramADXL345DataFormat+0x38>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
     f14:	8f ed       	ldi	r24, 0xDF	; 223
     f16:	92 e0       	ldi	r25, 0x02	; 2
     f18:	9f 93       	push	r25
     f1a:	8f 93       	push	r24
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	8f 93       	push	r24
     f20:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
		
		goto Exit;
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
}

bool ProgramADXL345DataFormat(DATA_RANGE DataRange, bool IntInvert, PDATA_OFFSET DataOffset, DATA_RATE DataRate)
{
	
	bool Status = FALSE;
     f2a:	f1 2c       	mov	r15, r1
	
	if (!gIsADXL345Initialized)
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
		
		goto Exit;
     f2c:	9d c0       	rjmp	.+314    	; 0x1068 <ProgramADXL345DataFormat+0x172>
	
	//
	// Set Data Format
	//
	
	DataFormat.FullRes = 1;
     f2e:	99 81       	ldd	r25, Y+1	; 0x01
	
	DataFormat.IntInvert = IntInvert;
     f30:	98 60       	ori	r25, 0x08	; 8
     f32:	60 fb       	bst	r22, 0
     f34:	95 f9       	bld	r25, 5
	
	DataFormat.Justify = 0;
	
	DataFormat.Range = DataRange;
     f36:	83 70       	andi	r24, 0x03	; 3
	
	DataFormat.Rsvd = 0;
	
	DataFormat.SelfTest = 0;
     f38:	98 76       	andi	r25, 0x68	; 104
	
	DataFormat.SPI = 0;
     f3a:	89 2b       	or	r24, r25
     f3c:	8f 7b       	andi	r24, 0xBF	; 191
     f3e:	89 83       	std	Y+1, r24	; 0x01
	
	Status = SetADXL345Register(ADR_DATA_FORMAT, &DataFormat, sizeof(DATA_FORMAT));
     f40:	21 e0       	ldi	r18, 0x01	; 1
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	be 01       	movw	r22, r28
     f4a:	6f 5f       	subi	r22, 0xFF	; 255
     f4c:	7f 4f       	sbci	r23, 0xFF	; 255
     f4e:	81 e3       	ldi	r24, 0x31	; 49
     f50:	e6 dd       	rcall	.-1076   	; 0xb1e <SetADXL345Register>
     f52:	f8 2e       	mov	r15, r24
	
	if (!Status)
     f54:	81 11       	cpse	r24, r1
     f56:	0c c0       	rjmp	.+24     	; 0xf70 <ProgramADXL345DataFormat+0x7a>
	{
		SendTrace (ERROR_LEVEL, "Failed to program DATA FORMAT Register. \r\n");
     f58:	2f ec       	ldi	r18, 0xCF	; 207
     f5a:	36 e0       	ldi	r19, 0x06	; 6
     f5c:	3f 93       	push	r19
     f5e:	2f 93       	push	r18
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	8f 93       	push	r24
     f64:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
		
		goto Exit;
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	7c c0       	rjmp	.+248    	; 0x1068 <ProgramADXL345DataFormat+0x172>
	
	//
	// Read Data Rate Register
	//
	
	Status = ReadADXL345Register(ADR_BW_RATE, &BwRate, sizeof(BW_RATE));
     f70:	21 e0       	ldi	r18, 0x01	; 1
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	40 e0       	ldi	r20, 0x00	; 0
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	be 01       	movw	r22, r28
     f7a:	6e 5f       	subi	r22, 0xFE	; 254
     f7c:	7f 4f       	sbci	r23, 0xFF	; 255
     f7e:	8c e2       	ldi	r24, 0x2C	; 44
     f80:	38 db       	rcall	.-2448   	; 0x5f2 <ReadADXL345Register>
     f82:	f8 2e       	mov	r15, r24
	
	if (!Status)
     f84:	81 11       	cpse	r24, r1
     f86:	0c c0       	rjmp	.+24     	; 0xfa0 <ProgramADXL345DataFormat+0xaa>
	{
		SendTrace(ERROR_LEVEL, "Failed to read BW RATE register. \r\n");
     f88:	29 eb       	ldi	r18, 0xB9	; 185
     f8a:	35 e0       	ldi	r19, 0x05	; 5
     f8c:	3f 93       	push	r19
     f8e:	2f 93       	push	r18
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	8f 93       	push	r24
     f94:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
		
		goto Exit;
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	64 c0       	rjmp	.+200    	; 0x1068 <ProgramADXL345DataFormat+0x172>
	}
	
	BwRate.Rate = DataRate;
     fa0:	8e 2d       	mov	r24, r14
     fa2:	8f 70       	andi	r24, 0x0F	; 15
     fa4:	9a 81       	ldd	r25, Y+2	; 0x02
     fa6:	90 7f       	andi	r25, 0xF0	; 240
     fa8:	e9 2e       	mov	r14, r25
     faa:	e8 2a       	or	r14, r24
     fac:	ea 82       	std	Y+2, r14	; 0x02
	
	//
	// Program new data rate
	//
	
	Status = SetADXL345Register(ADR_BW_RATE, &BwRate, sizeof(BW_RATE));
     fae:	21 e0       	ldi	r18, 0x01	; 1
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	40 e0       	ldi	r20, 0x00	; 0
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	be 01       	movw	r22, r28
     fb8:	6e 5f       	subi	r22, 0xFE	; 254
     fba:	7f 4f       	sbci	r23, 0xFF	; 255
     fbc:	8c e2       	ldi	r24, 0x2C	; 44
     fbe:	af dd       	rcall	.-1186   	; 0xb1e <SetADXL345Register>
     fc0:	f8 2e       	mov	r15, r24
	
	if(!Status)
     fc2:	81 11       	cpse	r24, r1
     fc4:	0c c0       	rjmp	.+24     	; 0xfde <ProgramADXL345DataFormat+0xe8>
	{
		SendTrace(ERROR_LEVEL, "Failed to set BW RATE register. \r\n");
     fc6:	2a ef       	ldi	r18, 0xFA	; 250
     fc8:	36 e0       	ldi	r19, 0x06	; 6
     fca:	3f 93       	push	r19
     fcc:	2f 93       	push	r18
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	8f 93       	push	r24
     fd2:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
		
		goto Exit;
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	45 c0       	rjmp	.+138    	; 0x1068 <ProgramADXL345DataFormat+0x172>
	
	//
	// Set Data Offset
	//
	
	Status = SetADXL345Register(ADR_OFSX, &DataOffset->OffsetX, sizeof(signed char));
     fde:	21 e0       	ldi	r18, 0x01	; 1
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e0       	ldi	r20, 0x00	; 0
     fe4:	50 e0       	ldi	r21, 0x00	; 0
     fe6:	b8 01       	movw	r22, r16
     fe8:	8e e1       	ldi	r24, 0x1E	; 30
     fea:	99 dd       	rcall	.-1230   	; 0xb1e <SetADXL345Register>
     fec:	f8 2e       	mov	r15, r24
	
	if (!Status)
     fee:	81 11       	cpse	r24, r1
     ff0:	0c c0       	rjmp	.+24     	; 0x100a <ProgramADXL345DataFormat+0x114>
	{
		SendTrace (ERROR_LEVEL, "Failed to program DATA OFFSET X Register. \r\n");
     ff2:	2d e1       	ldi	r18, 0x1D	; 29
     ff4:	37 e0       	ldi	r19, 0x07	; 7
     ff6:	3f 93       	push	r19
     ff8:	2f 93       	push	r18
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	8f 93       	push	r24
     ffe:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
		
		goto Exit;
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	2f c0       	rjmp	.+94     	; 0x1068 <ProgramADXL345DataFormat+0x172>
	}
	
	Status = SetADXL345Register(ADR_OFSY, &DataOffset->OffsetY, sizeof(signed char));
    100a:	21 e0       	ldi	r18, 0x01	; 1
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	40 e0       	ldi	r20, 0x00	; 0
    1010:	50 e0       	ldi	r21, 0x00	; 0
    1012:	b8 01       	movw	r22, r16
    1014:	6f 5f       	subi	r22, 0xFF	; 255
    1016:	7f 4f       	sbci	r23, 0xFF	; 255
    1018:	8f e1       	ldi	r24, 0x1F	; 31
    101a:	81 dd       	rcall	.-1278   	; 0xb1e <SetADXL345Register>
    101c:	f8 2e       	mov	r15, r24
	
	if (!Status)
    101e:	81 11       	cpse	r24, r1
    1020:	0c c0       	rjmp	.+24     	; 0x103a <ProgramADXL345DataFormat+0x144>
	{
		SendTrace (ERROR_LEVEL, "Failed to program DATA OFFSET Y Register. \r\n");
    1022:	2a e4       	ldi	r18, 0x4A	; 74
    1024:	37 e0       	ldi	r19, 0x07	; 7
    1026:	3f 93       	push	r19
    1028:	2f 93       	push	r18
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	8f 93       	push	r24
    102e:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
		
		goto Exit;
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	17 c0       	rjmp	.+46     	; 0x1068 <ProgramADXL345DataFormat+0x172>
	}
	
	Status = SetADXL345Register(ADR_OFSZ, &DataOffset->OffsetZ, sizeof(signed char));
    103a:	b8 01       	movw	r22, r16
    103c:	6e 5f       	subi	r22, 0xFE	; 254
    103e:	7f 4f       	sbci	r23, 0xFF	; 255
    1040:	21 e0       	ldi	r18, 0x01	; 1
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	40 e0       	ldi	r20, 0x00	; 0
    1046:	50 e0       	ldi	r21, 0x00	; 0
    1048:	80 e2       	ldi	r24, 0x20	; 32
    104a:	69 dd       	rcall	.-1326   	; 0xb1e <SetADXL345Register>
    104c:	f8 2e       	mov	r15, r24
	
	if (!Status)
    104e:	81 11       	cpse	r24, r1
    1050:	0b c0       	rjmp	.+22     	; 0x1068 <ProgramADXL345DataFormat+0x172>
	{
		SendTrace (ERROR_LEVEL, "Failed to program DATA OFFSET Z Register. \r\n");
    1052:	27 e7       	ldi	r18, 0x77	; 119
    1054:	37 e0       	ldi	r19, 0x07	; 7
    1056:	3f 93       	push	r19
    1058:	2f 93       	push	r18
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	8f 93       	push	r24
    105e:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
	}
	
Exit:

	return Status;
}
    1068:	8f 2d       	mov	r24, r15
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	08 95       	ret

0000107c <ProgramADXL345ActivityInactivityDetection>:

bool ProgramADXL345ActivityInactivityDetection(PACT_INACT_CTL ActInactCtl, unsigned char ActThreshold, unsigned char InactThreshold, unsigned char TimeInact)
{
    107c:	1f 93       	push	r17
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
    1082:	00 d0       	rcall	.+0      	; 0x1084 <ProgramADXL345ActivityInactivityDetection+0x8>
    1084:	1f 92       	push	r1
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	69 83       	std	Y+1, r22	; 0x01
    108c:	4a 83       	std	Y+2, r20	; 0x02
    108e:	2b 83       	std	Y+3, r18	; 0x03
	
	bool Status = FALSE;
	
	if (!gIsADXL345Initialized)
    1090:	20 91 e2 0e 	lds	r18, 0x0EE2
    1094:	21 11       	cpse	r18, r1
    1096:	0d c0       	rjmp	.+26     	; 0x10b2 <ProgramADXL345ActivityInactivityDetection+0x36>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
    1098:	8f ed       	ldi	r24, 0xDF	; 223
    109a:	92 e0       	ldi	r25, 0x02	; 2
    109c:	9f 93       	push	r25
    109e:	8f 93       	push	r24
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	8f 93       	push	r24
    10a4:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
		
		goto Exit;
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
}

bool ProgramADXL345ActivityInactivityDetection(PACT_INACT_CTL ActInactCtl, unsigned char ActThreshold, unsigned char InactThreshold, unsigned char TimeInact)
{
	
	bool Status = FALSE;
    10ae:	10 e0       	ldi	r17, 0x00	; 0
	
	if (!gIsADXL345Initialized)
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
		
		goto Exit;
    10b0:	5b c0       	rjmp	.+182    	; 0x1168 <ProgramADXL345ActivityInactivityDetection+0xec>
	
	//
	// Program Act Inact Ctl Register
	//
	
	Status = SetADXL345Register(ADR_INACT_CTL, ActInactCtl, sizeof(ACT_INACT_CTL));
    10b2:	21 e0       	ldi	r18, 0x01	; 1
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e0       	ldi	r20, 0x00	; 0
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	bc 01       	movw	r22, r24
    10bc:	87 e2       	ldi	r24, 0x27	; 39
    10be:	2f dd       	rcall	.-1442   	; 0xb1e <SetADXL345Register>
    10c0:	18 2f       	mov	r17, r24
	
	if (!Status)
    10c2:	81 11       	cpse	r24, r1
    10c4:	0c c0       	rjmp	.+24     	; 0x10de <ProgramADXL345ActivityInactivityDetection+0x62>
	{
		SendTrace (ERROR_LEVEL, "Failed to program ACT INACT CTL Register. \r\n");
    10c6:	24 ea       	ldi	r18, 0xA4	; 164
    10c8:	37 e0       	ldi	r19, 0x07	; 7
    10ca:	3f 93       	push	r19
    10cc:	2f 93       	push	r18
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	8f 93       	push	r24
    10d2:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
		
		goto Exit;
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	45 c0       	rjmp	.+138    	; 0x1168 <ProgramADXL345ActivityInactivityDetection+0xec>
	
	//
	// Program Act Threshold Register
	//
	
	Status = SetADXL345Register(ADR_THRESH_ACT, &ActThreshold, sizeof(unsigned char));
    10de:	21 e0       	ldi	r18, 0x01	; 1
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	40 e0       	ldi	r20, 0x00	; 0
    10e4:	50 e0       	ldi	r21, 0x00	; 0
    10e6:	be 01       	movw	r22, r28
    10e8:	6f 5f       	subi	r22, 0xFF	; 255
    10ea:	7f 4f       	sbci	r23, 0xFF	; 255
    10ec:	84 e2       	ldi	r24, 0x24	; 36
    10ee:	17 dd       	rcall	.-1490   	; 0xb1e <SetADXL345Register>
    10f0:	18 2f       	mov	r17, r24
	
	if (!Status)
    10f2:	81 11       	cpse	r24, r1
    10f4:	0c c0       	rjmp	.+24     	; 0x110e <ProgramADXL345ActivityInactivityDetection+0x92>
	{
		SendTrace (ERROR_LEVEL, "Failed to program THRESH ACT Register. \r\n");
    10f6:	21 ed       	ldi	r18, 0xD1	; 209
    10f8:	37 e0       	ldi	r19, 0x07	; 7
    10fa:	3f 93       	push	r19
    10fc:	2f 93       	push	r18
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	8f 93       	push	r24
    1102:	0e 94 82 10 	call	0x2104	; 0x2104 <SendTrace>
		
		goto Exit;
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	2d c0       	rjmp	.+90     	; 0x1168 <ProgramADXL345ActivityInactivityDetection+0xec>
	
	//
	// Program Inact Threshould Register
	//
	
	Status = SetADXL345Register(ADR_THRESH_INACT, &InactThreshold, sizeof(unsigned char));
    110e:	21 e0       	ldi	r18, 0x01	; 1
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	40 e0       	ldi	r20, 0x00	; 0
    1114:	50 e0       	ldi	r21, 0x00	; 0
    1116:	be 01       	movw	r22, r28
    1118:	6e 5f       	subi	r22, 0xFE	; 254
    111a:	7f 4f       	sbci	r23, 0xFF	; 255
    111c:	85 e2       	ldi	r24, 0x25	; 37
    111e:	ff dc       	rcall	.-1538   	; 0xb1e <SetADXL345Register>
    1120:	18 2f       	mov	r17, r24
	
	if (!Status)
    1122:	81 11       	cpse	r24, r1
    1124:	0b c0       	rjmp	.+22     	; 0x113c <ProgramADXL345ActivityInactivityDetection+0xc0>
	{
		SendTrace(ERROR_LEVEL, "Failed to program THRESH INACT Register. \r\n");
    1126:	2b ef       	ldi	r18, 0xFB	; 251
    1128:	37 e0       	ldi	r19, 0x07	; 7
    112a:	3f 93       	push	r19
    112c:	2f 93       	push	r18
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	8f 93       	push	r24
    1132:	e8 d7       	rcall	.+4048   	; 0x2104 <SendTrace>
		
		goto Exit;
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	16 c0       	rjmp	.+44     	; 0x1168 <ProgramADXL345ActivityInactivityDetection+0xec>
	
	//
	// Program Time Inact Register
	//
	
	Status = SetADXL345Register(ADR_TIME_INACT, &TimeInact, sizeof(unsigned char));
    113c:	21 e0       	ldi	r18, 0x01	; 1
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	40 e0       	ldi	r20, 0x00	; 0
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	be 01       	movw	r22, r28
    1146:	6d 5f       	subi	r22, 0xFD	; 253
    1148:	7f 4f       	sbci	r23, 0xFF	; 255
    114a:	86 e2       	ldi	r24, 0x26	; 38
    114c:	e8 dc       	rcall	.-1584   	; 0xb1e <SetADXL345Register>
    114e:	18 2f       	mov	r17, r24
	
	if (!Status)
    1150:	81 11       	cpse	r24, r1
    1152:	0a c0       	rjmp	.+20     	; 0x1168 <ProgramADXL345ActivityInactivityDetection+0xec>
	{
		SendTrace(ERROR_LEVEL, "Failed to program TIME INACT Register. \r\n");
    1154:	27 e2       	ldi	r18, 0x27	; 39
    1156:	38 e0       	ldi	r19, 0x08	; 8
    1158:	3f 93       	push	r19
    115a:	2f 93       	push	r18
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	8f 93       	push	r24
    1160:	d1 d7       	rcall	.+4002   	; 0x2104 <SendTrace>
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
	}
	
Exit:
	
	return Status;
}
    1168:	81 2f       	mov	r24, r17
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	08 95       	ret

00001178 <CalculateCompassHeading>:
	}
	
Exit:

	return Status;
}
    1178:	2f 92       	push	r2
    117a:	3f 92       	push	r3
    117c:	4f 92       	push	r4
    117e:	5f 92       	push	r5
    1180:	6f 92       	push	r6
    1182:	7f 92       	push	r7
    1184:	8f 92       	push	r8
    1186:	9f 92       	push	r9
    1188:	af 92       	push	r10
    118a:	bf 92       	push	r11
    118c:	cf 92       	push	r12
    118e:	df 92       	push	r13
    1190:	ef 92       	push	r14
    1192:	ff 92       	push	r15
    1194:	0f 93       	push	r16
    1196:	1f 93       	push	r17
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	62 97       	sbiw	r28, 0x12	; 18
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	cd bf       	out	0x3d, r28	; 61
    11ac:	9a 8b       	std	Y+18, r25	; 0x12
    11ae:	89 8b       	std	Y+17, r24	; 0x11
    11b0:	48 01       	movw	r8, r16
    11b2:	59 01       	movw	r10, r18
    11b4:	1e 2d       	mov	r17, r14
    11b6:	16 01       	movw	r2, r12
    11b8:	89 2b       	or	r24, r25
    11ba:	09 f4       	brne	.+2      	; 0x11be <CalculateCompassHeading+0x46>
    11bc:	f4 c0       	rjmp	.+488    	; 0x13a6 <CalculateCompassHeading+0x22e>
    11be:	c1 14       	cp	r12, r1
    11c0:	d1 04       	cpc	r13, r1
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <CalculateCompassHeading+0x4e>
    11c4:	f2 c0       	rjmp	.+484    	; 0x13aa <CalculateCompassHeading+0x232>
    11c6:	2a 01       	movw	r4, r20
    11c8:	3b 01       	movw	r6, r22
    11ca:	77 fa       	bst	r7, 7
    11cc:	70 94       	com	r7
    11ce:	77 f8       	bld	r7, 7
    11d0:	70 94       	com	r7
    11d2:	c3 01       	movw	r24, r6
    11d4:	b2 01       	movw	r22, r4
    11d6:	0e 94 57 17 	call	0x2eae	; 0x2eae <cos>
    11da:	6b 01       	movw	r12, r22
    11dc:	7c 01       	movw	r14, r24
    11de:	c3 01       	movw	r24, r6
    11e0:	b2 01       	movw	r22, r4
    11e2:	0e 94 f6 19 	call	0x33ec	; 0x33ec <sin>
    11e6:	69 83       	std	Y+1, r22	; 0x01
    11e8:	7a 83       	std	Y+2, r23	; 0x02
    11ea:	8b 83       	std	Y+3, r24	; 0x03
    11ec:	9c 83       	std	Y+4, r25	; 0x04
    11ee:	c5 01       	movw	r24, r10
    11f0:	b4 01       	movw	r22, r8
    11f2:	0e 94 57 17 	call	0x2eae	; 0x2eae <cos>
    11f6:	6d 83       	std	Y+5, r22	; 0x05
    11f8:	7e 83       	std	Y+6, r23	; 0x06
    11fa:	8f 83       	std	Y+7, r24	; 0x07
    11fc:	98 87       	std	Y+8, r25	; 0x08
    11fe:	c5 01       	movw	r24, r10
    1200:	b4 01       	movw	r22, r8
    1202:	0e 94 f6 19 	call	0x33ec	; 0x33ec <sin>
    1206:	4b 01       	movw	r8, r22
    1208:	5c 01       	movw	r10, r24
    120a:	a9 89       	ldd	r26, Y+17	; 0x11
    120c:	ba 89       	ldd	r27, Y+18	; 0x12
    120e:	1a 96       	adiw	r26, 0x0a	; 10
    1210:	8d 91       	ld	r24, X+
    1212:	9d 91       	ld	r25, X+
    1214:	0d 90       	ld	r0, X+
    1216:	bc 91       	ld	r27, X
    1218:	a0 2d       	mov	r26, r0
    121a:	89 87       	std	Y+9, r24	; 0x09
    121c:	9a 87       	std	Y+10, r25	; 0x0a
    121e:	ab 87       	std	Y+11, r26	; 0x0b
    1220:	bc 87       	std	Y+12, r27	; 0x0c
    1222:	a9 89       	ldd	r26, Y+17	; 0x11
    1224:	ba 89       	ldd	r27, Y+18	; 0x12
    1226:	1e 96       	adiw	r26, 0x0e	; 14
    1228:	8d 91       	ld	r24, X+
    122a:	9d 91       	ld	r25, X+
    122c:	0d 90       	ld	r0, X+
    122e:	bc 91       	ld	r27, X
    1230:	a0 2d       	mov	r26, r0
    1232:	8d 87       	std	Y+13, r24	; 0x0d
    1234:	9e 87       	std	Y+14, r25	; 0x0e
    1236:	af 87       	std	Y+15, r26	; 0x0f
    1238:	b8 8b       	std	Y+16, r27	; 0x10
    123a:	29 85       	ldd	r18, Y+9	; 0x09
    123c:	3a 85       	ldd	r19, Y+10	; 0x0a
    123e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1240:	5c 85       	ldd	r21, Y+12	; 0x0c
    1242:	6d 81       	ldd	r22, Y+5	; 0x05
    1244:	7e 81       	ldd	r23, Y+6	; 0x06
    1246:	8f 81       	ldd	r24, Y+7	; 0x07
    1248:	98 85       	ldd	r25, Y+8	; 0x08
    124a:	0e 94 93 19 	call	0x3326	; 0x3326 <__mulsf3>
    124e:	2b 01       	movw	r4, r22
    1250:	3c 01       	movw	r6, r24
    1252:	2d 85       	ldd	r18, Y+13	; 0x0d
    1254:	3e 85       	ldd	r19, Y+14	; 0x0e
    1256:	4f 85       	ldd	r20, Y+15	; 0x0f
    1258:	58 89       	ldd	r21, Y+16	; 0x10
    125a:	c5 01       	movw	r24, r10
    125c:	b4 01       	movw	r22, r8
    125e:	0e 94 93 19 	call	0x3326	; 0x3326 <__mulsf3>
    1262:	9b 01       	movw	r18, r22
    1264:	ac 01       	movw	r20, r24
    1266:	c3 01       	movw	r24, r6
    1268:	b2 01       	movw	r22, r4
    126a:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <__subsf3>
    126e:	2b 01       	movw	r4, r22
    1270:	3c 01       	movw	r6, r24
    1272:	e9 89       	ldd	r30, Y+17	; 0x11
    1274:	fa 89       	ldd	r31, Y+18	; 0x12
    1276:	26 81       	ldd	r18, Z+6	; 0x06
    1278:	37 81       	ldd	r19, Z+7	; 0x07
    127a:	40 85       	ldd	r20, Z+8	; 0x08
    127c:	51 85       	ldd	r21, Z+9	; 0x09
    127e:	c7 01       	movw	r24, r14
    1280:	b6 01       	movw	r22, r12
    1282:	0e 94 93 19 	call	0x3326	; 0x3326 <__mulsf3>
    1286:	6b 01       	movw	r12, r22
    1288:	7c 01       	movw	r14, r24
    128a:	29 81       	ldd	r18, Y+1	; 0x01
    128c:	3a 81       	ldd	r19, Y+2	; 0x02
    128e:	4b 81       	ldd	r20, Y+3	; 0x03
    1290:	5c 81       	ldd	r21, Y+4	; 0x04
    1292:	69 85       	ldd	r22, Y+9	; 0x09
    1294:	7a 85       	ldd	r23, Y+10	; 0x0a
    1296:	8b 85       	ldd	r24, Y+11	; 0x0b
    1298:	9c 85       	ldd	r25, Y+12	; 0x0c
    129a:	0e 94 93 19 	call	0x3326	; 0x3326 <__mulsf3>
    129e:	a5 01       	movw	r20, r10
    12a0:	94 01       	movw	r18, r8
    12a2:	0e 94 93 19 	call	0x3326	; 0x3326 <__mulsf3>
    12a6:	9b 01       	movw	r18, r22
    12a8:	ac 01       	movw	r20, r24
    12aa:	c7 01       	movw	r24, r14
    12ac:	b6 01       	movw	r22, r12
    12ae:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <__addsf3>
    12b2:	6b 01       	movw	r12, r22
    12b4:	7c 01       	movw	r14, r24
    12b6:	29 81       	ldd	r18, Y+1	; 0x01
    12b8:	3a 81       	ldd	r19, Y+2	; 0x02
    12ba:	4b 81       	ldd	r20, Y+3	; 0x03
    12bc:	5c 81       	ldd	r21, Y+4	; 0x04
    12be:	6d 85       	ldd	r22, Y+13	; 0x0d
    12c0:	7e 85       	ldd	r23, Y+14	; 0x0e
    12c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    12c4:	98 89       	ldd	r25, Y+16	; 0x10
    12c6:	0e 94 93 19 	call	0x3326	; 0x3326 <__mulsf3>
    12ca:	2d 81       	ldd	r18, Y+5	; 0x05
    12cc:	3e 81       	ldd	r19, Y+6	; 0x06
    12ce:	4f 81       	ldd	r20, Y+7	; 0x07
    12d0:	58 85       	ldd	r21, Y+8	; 0x08
    12d2:	0e 94 93 19 	call	0x3326	; 0x3326 <__mulsf3>
    12d6:	9b 01       	movw	r18, r22
    12d8:	ac 01       	movw	r20, r24
    12da:	c7 01       	movw	r24, r14
    12dc:	b6 01       	movw	r22, r12
    12de:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <__addsf3>
    12e2:	a3 01       	movw	r20, r6
    12e4:	92 01       	movw	r18, r4
    12e6:	0e 94 00 17 	call	0x2e00	; 0x2e00 <atan2>
    12ea:	2b ed       	ldi	r18, 0xDB	; 219
    12ec:	3f e0       	ldi	r19, 0x0F	; 15
    12ee:	49 e4       	ldi	r20, 0x49	; 73
    12f0:	50 e4       	ldi	r21, 0x40	; 64
    12f2:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <__addsf3>
    12f6:	6b 01       	movw	r12, r22
    12f8:	7c 01       	movw	r14, r24
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	a9 01       	movw	r20, r18
    1300:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <__cmpsf2>
    1304:	88 23       	and	r24, r24
    1306:	7c f4       	brge	.+30     	; 0x1326 <CalculateCompassHeading+0x1ae>
    1308:	2b ed       	ldi	r18, 0xDB	; 219
    130a:	3f e0       	ldi	r19, 0x0F	; 15
    130c:	49 ec       	ldi	r20, 0xC9	; 201
    130e:	50 e4       	ldi	r21, 0x40	; 64
    1310:	c7 01       	movw	r24, r14
    1312:	b6 01       	movw	r22, r12
    1314:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <__addsf3>
    1318:	d1 01       	movw	r26, r2
    131a:	6d 93       	st	X+, r22
    131c:	7d 93       	st	X+, r23
    131e:	8d 93       	st	X+, r24
    1320:	9c 93       	st	X, r25
    1322:	13 97       	sbiw	r26, 0x03	; 3
    1324:	1e c0       	rjmp	.+60     	; 0x1362 <CalculateCompassHeading+0x1ea>
    1326:	2b ed       	ldi	r18, 0xDB	; 219
    1328:	3f e0       	ldi	r19, 0x0F	; 15
    132a:	49 ec       	ldi	r20, 0xC9	; 201
    132c:	50 e4       	ldi	r21, 0x40	; 64
    132e:	c7 01       	movw	r24, r14
    1330:	b6 01       	movw	r22, r12
    1332:	0e 94 88 19 	call	0x3310	; 0x3310 <__gesf2>
    1336:	18 16       	cp	r1, r24
    1338:	34 f0       	brlt	.+12     	; 0x1346 <CalculateCompassHeading+0x1ce>
    133a:	f1 01       	movw	r30, r2
    133c:	c0 82       	st	Z, r12
    133e:	d1 82       	std	Z+1, r13	; 0x01
    1340:	e2 82       	std	Z+2, r14	; 0x02
    1342:	f3 82       	std	Z+3, r15	; 0x03
    1344:	0e c0       	rjmp	.+28     	; 0x1362 <CalculateCompassHeading+0x1ea>
    1346:	2b ed       	ldi	r18, 0xDB	; 219
    1348:	3f e0       	ldi	r19, 0x0F	; 15
    134a:	49 ec       	ldi	r20, 0xC9	; 201
    134c:	50 e4       	ldi	r21, 0x40	; 64
    134e:	c7 01       	movw	r24, r14
    1350:	b6 01       	movw	r22, r12
    1352:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <__subsf3>
    1356:	d1 01       	movw	r26, r2
    1358:	6d 93       	st	X+, r22
    135a:	7d 93       	st	X+, r23
    135c:	8d 93       	st	X+, r24
    135e:	9c 93       	st	X, r25
    1360:	13 97       	sbiw	r26, 0x03	; 3
    1362:	f1 01       	movw	r30, r2
    1364:	20 81       	ld	r18, Z
    1366:	31 81       	ldd	r19, Z+1	; 0x01
    1368:	42 81       	ldd	r20, Z+2	; 0x02
    136a:	53 81       	ldd	r21, Z+3	; 0x03
    136c:	6b ed       	ldi	r22, 0xDB	; 219
    136e:	7f e0       	ldi	r23, 0x0F	; 15
    1370:	89 ec       	ldi	r24, 0xC9	; 201
    1372:	90 e4       	ldi	r25, 0x40	; 64
    1374:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <__subsf3>
    1378:	11 30       	cpi	r17, 0x01	; 1
    137a:	41 f0       	breq	.+16     	; 0x138c <CalculateCompassHeading+0x214>
    137c:	d1 01       	movw	r26, r2
    137e:	6d 93       	st	X+, r22
    1380:	7d 93       	st	X+, r23
    1382:	8d 93       	st	X+, r24
    1384:	9c 93       	st	X, r25
    1386:	13 97       	sbiw	r26, 0x03	; 3
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	10 c0       	rjmp	.+32     	; 0x13ac <CalculateCompassHeading+0x234>
    138c:	20 ee       	ldi	r18, 0xE0	; 224
    138e:	3e e2       	ldi	r19, 0x2E	; 46
    1390:	45 e6       	ldi	r20, 0x65	; 101
    1392:	52 e4       	ldi	r21, 0x42	; 66
    1394:	0e 94 93 19 	call	0x3326	; 0x3326 <__mulsf3>
    1398:	f1 01       	movw	r30, r2
    139a:	60 83       	st	Z, r22
    139c:	71 83       	std	Z+1, r23	; 0x01
    139e:	82 83       	std	Z+2, r24	; 0x02
    13a0:	93 83       	std	Z+3, r25	; 0x03
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	03 c0       	rjmp	.+6      	; 0x13ac <CalculateCompassHeading+0x234>
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	01 c0       	rjmp	.+2      	; 0x13ac <CalculateCompassHeading+0x234>
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	62 96       	adiw	r28, 0x12	; 18
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	df 91       	pop	r29
    13ba:	cf 91       	pop	r28
    13bc:	1f 91       	pop	r17
    13be:	0f 91       	pop	r16
    13c0:	ff 90       	pop	r15
    13c2:	ef 90       	pop	r14
    13c4:	df 90       	pop	r13
    13c6:	cf 90       	pop	r12
    13c8:	bf 90       	pop	r11
    13ca:	af 90       	pop	r10
    13cc:	9f 90       	pop	r9
    13ce:	8f 90       	pop	r8
    13d0:	7f 90       	pop	r7
    13d2:	6f 90       	pop	r6
    13d4:	5f 90       	pop	r5
    13d6:	4f 90       	pop	r4
    13d8:	3f 90       	pop	r3
    13da:	2f 90       	pop	r2
    13dc:	08 95       	ret

000013de <ReadHMC5883LRegister>:
    13de:	af 92       	push	r10
    13e0:	bf 92       	push	r11
    13e2:	cf 92       	push	r12
    13e4:	df 92       	push	r13
    13e6:	ef 92       	push	r14
    13e8:	ff 92       	push	r15
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	1f 92       	push	r1
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	89 83       	std	Y+1, r24	; 0x01
    13fa:	5b 01       	movw	r10, r22
    13fc:	69 01       	movw	r12, r18
    13fe:	7a 01       	movw	r14, r20
    1400:	00 e0       	ldi	r16, 0x00	; 0
    1402:	2b ee       	ldi	r18, 0xEB	; 235
    1404:	3e e0       	ldi	r19, 0x0E	; 14
    1406:	41 e0       	ldi	r20, 0x01	; 1
    1408:	50 e0       	ldi	r21, 0x00	; 0
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	ce 01       	movw	r24, r28
    1410:	01 96       	adiw	r24, 0x01	; 1
    1412:	0e 94 3b 13 	call	0x2676	; 0x2676 <TwiTransmit>
    1416:	18 2f       	mov	r17, r24
    1418:	81 11       	cpse	r24, r1
    141a:	0b c0       	rjmp	.+22     	; 0x1432 <ReadHMC5883LRegister+0x54>
    141c:	21 e9       	ldi	r18, 0x91	; 145
    141e:	32 e0       	ldi	r19, 0x02	; 2
    1420:	3f 93       	push	r19
    1422:	2f 93       	push	r18
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	8f 93       	push	r24
    1428:	6d d6       	rcall	.+3290   	; 0x2104 <SendTrace>
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	15 c0       	rjmp	.+42     	; 0x145c <ReadHMC5883LRegister+0x7e>
    1432:	01 e0       	ldi	r16, 0x01	; 1
    1434:	2b ee       	ldi	r18, 0xEB	; 235
    1436:	3e e0       	ldi	r19, 0x0E	; 14
    1438:	b7 01       	movw	r22, r14
    143a:	a6 01       	movw	r20, r12
    143c:	c5 01       	movw	r24, r10
    143e:	0e 94 96 14 	call	0x292c	; 0x292c <TwiReceive>
    1442:	18 2f       	mov	r17, r24
    1444:	81 11       	cpse	r24, r1
    1446:	0a c0       	rjmp	.+20     	; 0x145c <ReadHMC5883LRegister+0x7e>
    1448:	29 eb       	ldi	r18, 0xB9	; 185
    144a:	32 e0       	ldi	r19, 0x02	; 2
    144c:	3f 93       	push	r19
    144e:	2f 93       	push	r18
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	8f 93       	push	r24
    1454:	57 d6       	rcall	.+3246   	; 0x2104 <SendTrace>
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	81 2f       	mov	r24, r17
    145e:	0f 90       	pop	r0
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	1f 91       	pop	r17
    1466:	0f 91       	pop	r16
    1468:	ff 90       	pop	r15
    146a:	ef 90       	pop	r14
    146c:	df 90       	pop	r13
    146e:	cf 90       	pop	r12
    1470:	bf 90       	pop	r11
    1472:	af 90       	pop	r10
    1474:	08 95       	ret

00001476 <PrintHMC5883LConfigRegisters>:
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	1f 92       	push	r1
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	21 e0       	ldi	r18, 0x01	; 1
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	40 e0       	ldi	r20, 0x00	; 0
    1488:	50 e0       	ldi	r21, 0x00	; 0
    148a:	be 01       	movw	r22, r28
    148c:	6f 5f       	subi	r22, 0xFF	; 255
    148e:	7f 4f       	sbci	r23, 0xFF	; 255
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	a5 df       	rcall	.-182    	; 0x13de <ReadHMC5883LRegister>
    1494:	18 2f       	mov	r17, r24
    1496:	88 23       	and	r24, r24
    1498:	09 f4       	brne	.+2      	; 0x149c <PrintHMC5883LConfigRegisters+0x26>
    149a:	45 c0       	rjmp	.+138    	; 0x1526 <PrintHMC5883LConfigRegisters+0xb0>
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	1f 92       	push	r1
    14a0:	8f 93       	push	r24
    14a2:	8e ed       	ldi	r24, 0xDE	; 222
    14a4:	98 e0       	ldi	r25, 0x08	; 8
    14a6:	9f 93       	push	r25
    14a8:	8f 93       	push	r24
    14aa:	84 e0       	ldi	r24, 0x04	; 4
    14ac:	8f 93       	push	r24
    14ae:	2a d6       	rcall	.+3156   	; 0x2104 <SendTrace>
    14b0:	21 e0       	ldi	r18, 0x01	; 1
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	40 e0       	ldi	r20, 0x00	; 0
    14b6:	50 e0       	ldi	r21, 0x00	; 0
    14b8:	be 01       	movw	r22, r28
    14ba:	6f 5f       	subi	r22, 0xFF	; 255
    14bc:	7f 4f       	sbci	r23, 0xFF	; 255
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	8e df       	rcall	.-228    	; 0x13de <ReadHMC5883LRegister>
    14c2:	18 2f       	mov	r17, r24
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	88 23       	and	r24, r24
    14d0:	51 f1       	breq	.+84     	; 0x1526 <PrintHMC5883LConfigRegisters+0xb0>
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	1f 92       	push	r1
    14d6:	8f 93       	push	r24
    14d8:	84 ef       	ldi	r24, 0xF4	; 244
    14da:	98 e0       	ldi	r25, 0x08	; 8
    14dc:	9f 93       	push	r25
    14de:	8f 93       	push	r24
    14e0:	84 e0       	ldi	r24, 0x04	; 4
    14e2:	8f 93       	push	r24
    14e4:	0f d6       	rcall	.+3102   	; 0x2104 <SendTrace>
    14e6:	21 e0       	ldi	r18, 0x01	; 1
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	40 e0       	ldi	r20, 0x00	; 0
    14ec:	50 e0       	ldi	r21, 0x00	; 0
    14ee:	be 01       	movw	r22, r28
    14f0:	6f 5f       	subi	r22, 0xFF	; 255
    14f2:	7f 4f       	sbci	r23, 0xFF	; 255
    14f4:	82 e0       	ldi	r24, 0x02	; 2
    14f6:	73 df       	rcall	.-282    	; 0x13de <ReadHMC5883LRegister>
    14f8:	18 2f       	mov	r17, r24
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	88 23       	and	r24, r24
    1506:	79 f0       	breq	.+30     	; 0x1526 <PrintHMC5883LConfigRegisters+0xb0>
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	1f 92       	push	r1
    150c:	8f 93       	push	r24
    150e:	2a e0       	ldi	r18, 0x0A	; 10
    1510:	39 e0       	ldi	r19, 0x09	; 9
    1512:	3f 93       	push	r19
    1514:	2f 93       	push	r18
    1516:	84 e0       	ldi	r24, 0x04	; 4
    1518:	8f 93       	push	r24
    151a:	f4 d5       	rcall	.+3048   	; 0x2104 <SendTrace>
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	81 2f       	mov	r24, r17
    1528:	0f 90       	pop	r0
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	08 95       	ret

00001532 <ReadHMC5883LData>:
    1532:	ff 92       	push	r15
    1534:	0f 93       	push	r16
    1536:	1f 93       	push	r17
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
    153c:	00 d0       	rcall	.+0      	; 0x153e <ReadHMC5883LData+0xc>
    153e:	00 d0       	rcall	.+0      	; 0x1540 <ReadHMC5883LData+0xe>
    1540:	00 d0       	rcall	.+0      	; 0x1542 <ReadHMC5883LData+0x10>
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	8c 01       	movw	r16, r24
    1548:	26 e0       	ldi	r18, 0x06	; 6
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	40 e0       	ldi	r20, 0x00	; 0
    154e:	50 e0       	ldi	r21, 0x00	; 0
    1550:	be 01       	movw	r22, r28
    1552:	6f 5f       	subi	r22, 0xFF	; 255
    1554:	7f 4f       	sbci	r23, 0xFF	; 255
    1556:	83 e0       	ldi	r24, 0x03	; 3
    1558:	42 df       	rcall	.-380    	; 0x13de <ReadHMC5883LRegister>
    155a:	f8 2e       	mov	r15, r24
    155c:	81 11       	cpse	r24, r1
    155e:	0b c0       	rjmp	.+22     	; 0x1576 <ReadHMC5883LData+0x44>
    1560:	8c e1       	ldi	r24, 0x1C	; 28
    1562:	99 e0       	ldi	r25, 0x09	; 9
    1564:	9f 93       	push	r25
    1566:	8f 93       	push	r24
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	8f 93       	push	r24
    156c:	cb d5       	rcall	.+2966   	; 0x2104 <SendTrace>
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	19 c0       	rjmp	.+50     	; 0x15a8 <ReadHMC5883LData+0x76>
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	98 2f       	mov	r25, r24
    157c:	88 27       	eor	r24, r24
    157e:	2a 81       	ldd	r18, Y+2	; 0x02
    1580:	82 2b       	or	r24, r18
    1582:	f8 01       	movw	r30, r16
    1584:	91 83       	std	Z+1, r25	; 0x01
    1586:	80 83       	st	Z, r24
    1588:	2b 81       	ldd	r18, Y+3	; 0x03
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	32 2f       	mov	r19, r18
    158e:	22 27       	eor	r18, r18
    1590:	8c 81       	ldd	r24, Y+4	; 0x04
    1592:	28 2b       	or	r18, r24
    1594:	35 83       	std	Z+5, r19	; 0x05
    1596:	24 83       	std	Z+4, r18	; 0x04
    1598:	2d 81       	ldd	r18, Y+5	; 0x05
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	32 2f       	mov	r19, r18
    159e:	22 27       	eor	r18, r18
    15a0:	8e 81       	ldd	r24, Y+6	; 0x06
    15a2:	28 2b       	or	r18, r24
    15a4:	33 83       	std	Z+3, r19	; 0x03
    15a6:	22 83       	std	Z+2, r18	; 0x02
    15a8:	8f 2d       	mov	r24, r15
    15aa:	26 96       	adiw	r28, 0x06	; 6
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	1f 91       	pop	r17
    15bc:	0f 91       	pop	r16
    15be:	ff 90       	pop	r15
    15c0:	08 95       	ret

000015c2 <SetHMC5883LRegister>:
    15c2:	4f 92       	push	r4
    15c4:	5f 92       	push	r5
    15c6:	6f 92       	push	r6
    15c8:	7f 92       	push	r7
    15ca:	af 92       	push	r10
    15cc:	bf 92       	push	r11
    15ce:	cf 92       	push	r12
    15d0:	df 92       	push	r13
    15d2:	ef 92       	push	r14
    15d4:	ff 92       	push	r15
    15d6:	0f 93       	push	r16
    15d8:	1f 93       	push	r17
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	96 2f       	mov	r25, r22
    15e4:	a7 2f       	mov	r26, r23
    15e6:	29 01       	movw	r4, r18
    15e8:	3a 01       	movw	r6, r20
    15ea:	ed b6       	in	r14, 0x3d	; 61
    15ec:	fe b6       	in	r15, 0x3e	; 62
    15ee:	ba 01       	movw	r22, r20
    15f0:	a9 01       	movw	r20, r18
    15f2:	4f 5f       	subi	r20, 0xFF	; 255
    15f4:	5f 4f       	sbci	r21, 0xFF	; 255
    15f6:	6f 4f       	sbci	r22, 0xFF	; 255
    15f8:	7f 4f       	sbci	r23, 0xFF	; 255
    15fa:	2d b7       	in	r18, 0x3d	; 61
    15fc:	3e b7       	in	r19, 0x3e	; 62
    15fe:	24 1b       	sub	r18, r20
    1600:	35 0b       	sbc	r19, r21
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	3e bf       	out	0x3e, r19	; 62
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	2d bf       	out	0x3d, r18	; 61
    160c:	ed b7       	in	r30, 0x3d	; 61
    160e:	fe b7       	in	r31, 0x3e	; 62
    1610:	31 96       	adiw	r30, 0x01	; 1
    1612:	6f 01       	movw	r12, r30
    1614:	5f 01       	movw	r10, r30
    1616:	ed b7       	in	r30, 0x3d	; 61
    1618:	fe b7       	in	r31, 0x3e	; 62
    161a:	81 83       	std	Z+1, r24	; 0x01
    161c:	41 14       	cp	r4, r1
    161e:	51 04       	cpc	r5, r1
    1620:	61 04       	cpc	r6, r1
    1622:	71 04       	cpc	r7, r1
    1624:	99 f0       	breq	.+38     	; 0x164c <SetHMC5883LRegister+0x8a>
    1626:	e9 2f       	mov	r30, r25
    1628:	fa 2f       	mov	r31, r26
    162a:	00 e0       	ldi	r16, 0x00	; 0
    162c:	10 e0       	ldi	r17, 0x00	; 0
    162e:	98 01       	movw	r18, r16
    1630:	0f 5f       	subi	r16, 0xFF	; 255
    1632:	1f 4f       	sbci	r17, 0xFF	; 255
    1634:	2f 4f       	sbci	r18, 0xFF	; 255
    1636:	3f 4f       	sbci	r19, 0xFF	; 255
    1638:	81 91       	ld	r24, Z+
    163a:	d5 01       	movw	r26, r10
    163c:	a0 0f       	add	r26, r16
    163e:	b1 1f       	adc	r27, r17
    1640:	8c 93       	st	X, r24
    1642:	04 15       	cp	r16, r4
    1644:	15 05       	cpc	r17, r5
    1646:	26 05       	cpc	r18, r6
    1648:	37 05       	cpc	r19, r7
    164a:	91 f7       	brne	.-28     	; 0x1630 <SetHMC5883LRegister+0x6e>
    164c:	01 e0       	ldi	r16, 0x01	; 1
    164e:	2b ee       	ldi	r18, 0xEB	; 235
    1650:	3e e0       	ldi	r19, 0x0E	; 14
    1652:	c6 01       	movw	r24, r12
    1654:	0e 94 3b 13 	call	0x2676	; 0x2676 <TwiTransmit>
    1658:	18 2f       	mov	r17, r24
    165a:	81 11       	cpse	r24, r1
    165c:	0a c0       	rjmp	.+20     	; 0x1672 <SetHMC5883LRegister+0xb0>
    165e:	21 e9       	ldi	r18, 0x91	; 145
    1660:	32 e0       	ldi	r19, 0x02	; 2
    1662:	3f 93       	push	r19
    1664:	2f 93       	push	r18
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	8f 93       	push	r24
    166a:	4c d5       	rcall	.+2712   	; 0x2104 <SendTrace>
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	81 2f       	mov	r24, r17
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	fe be       	out	0x3e, r15	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	ed be       	out	0x3d, r14	; 61
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	ff 90       	pop	r15
    1688:	ef 90       	pop	r14
    168a:	df 90       	pop	r13
    168c:	cf 90       	pop	r12
    168e:	bf 90       	pop	r11
    1690:	af 90       	pop	r10
    1692:	7f 90       	pop	r7
    1694:	6f 90       	pop	r6
    1696:	5f 90       	pop	r5
    1698:	4f 90       	pop	r4
    169a:	08 95       	ret

0000169c <IsHMC5883LDataReady>:
    169c:	1f 93       	push	r17
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	1f 92       	push	r1
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	21 e0       	ldi	r18, 0x01	; 1
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	40 e0       	ldi	r20, 0x00	; 0
    16ae:	50 e0       	ldi	r21, 0x00	; 0
    16b0:	be 01       	movw	r22, r28
    16b2:	6f 5f       	subi	r22, 0xFF	; 255
    16b4:	7f 4f       	sbci	r23, 0xFF	; 255
    16b6:	89 e0       	ldi	r24, 0x09	; 9
    16b8:	92 de       	rcall	.-732    	; 0x13de <ReadHMC5883LRegister>
    16ba:	18 2f       	mov	r17, r24
    16bc:	81 11       	cpse	r24, r1
    16be:	0b c0       	rjmp	.+22     	; 0x16d6 <IsHMC5883LDataReady+0x3a>
    16c0:	2d e3       	ldi	r18, 0x3D	; 61
    16c2:	39 e0       	ldi	r19, 0x09	; 9
    16c4:	3f 93       	push	r19
    16c6:	2f 93       	push	r18
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	8f 93       	push	r24
    16cc:	1b d5       	rcall	.+2614   	; 0x2104 <SendTrace>
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	1d c0       	rjmp	.+58     	; 0x1710 <IsHMC5883LDataReady+0x74>
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	80 ff       	sbrs	r24, 0
    16da:	19 c0       	rjmp	.+50     	; 0x170e <IsHMC5883LDataReady+0x72>
    16dc:	82 60       	ori	r24, 0x02	; 2
    16de:	89 83       	std	Y+1, r24	; 0x01
    16e0:	21 e0       	ldi	r18, 0x01	; 1
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e0       	ldi	r20, 0x00	; 0
    16e6:	50 e0       	ldi	r21, 0x00	; 0
    16e8:	be 01       	movw	r22, r28
    16ea:	6f 5f       	subi	r22, 0xFF	; 255
    16ec:	7f 4f       	sbci	r23, 0xFF	; 255
    16ee:	89 e0       	ldi	r24, 0x09	; 9
    16f0:	68 df       	rcall	.-304    	; 0x15c2 <SetHMC5883LRegister>
    16f2:	18 2f       	mov	r17, r24
    16f4:	81 11       	cpse	r24, r1
    16f6:	0c c0       	rjmp	.+24     	; 0x1710 <IsHMC5883LDataReady+0x74>
    16f8:	2b e5       	ldi	r18, 0x5B	; 91
    16fa:	39 e0       	ldi	r19, 0x09	; 9
    16fc:	3f 93       	push	r19
    16fe:	2f 93       	push	r18
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	8f 93       	push	r24
    1704:	ff d4       	rcall	.+2558   	; 0x2104 <SendTrace>
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	01 c0       	rjmp	.+2      	; 0x1710 <IsHMC5883LDataReady+0x74>
    170e:	10 e0       	ldi	r17, 0x00	; 0
    1710:	81 2f       	mov	r24, r17
    1712:	0f 90       	pop	r0
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	1f 91       	pop	r17
    171a:	08 95       	ret

0000171c <ReadHMC5883LSingleMeasurementData>:

bool ReadHMC5883LSingleMeasurementData(PMAGNETOMETER_DATA pData)
{
    171c:	ff 92       	push	r15
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	1f 92       	push	r1
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	8c 01       	movw	r16, r24
	bool Status = FALSE;
	
	MODE_REG ModeReg;
	
	if (!gIsInitialized)
    172e:	80 91 e3 0e 	lds	r24, 0x0EE3
    1732:	81 11       	cpse	r24, r1
    1734:	0c c0       	rjmp	.+24     	; 0x174e <ReadHMC5883LSingleMeasurementData+0x32>
	{
		SendTrace(ERROR_LEVEL, "Magnetometer not Initialized. \r\n");
    1736:	89 e7       	ldi	r24, 0x79	; 121
    1738:	99 e0       	ldi	r25, 0x09	; 9
    173a:	9f 93       	push	r25
    173c:	8f 93       	push	r24
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	8f 93       	push	r24
    1742:	e0 d4       	rcall	.+2496   	; 0x2104 <SendTrace>
		
		goto Exit;
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
	return Status;
}

bool ReadHMC5883LSingleMeasurementData(PMAGNETOMETER_DATA pData)
{
	bool Status = FALSE;
    174a:	f1 2c       	mov	r15, r1
	
	if (!gIsInitialized)
	{
		SendTrace(ERROR_LEVEL, "Magnetometer not Initialized. \r\n");
		
		goto Exit;
    174c:	76 c0       	rjmp	.+236    	; 0x183a <ReadHMC5883LSingleMeasurementData+0x11e>
	}

	if (gHMC5883LOpMode != SINGLE_MEASUREMENT_MODE)
    174e:	80 91 ec 0e 	lds	r24, 0x0EEC
    1752:	81 30       	cpi	r24, 0x01	; 1
    1754:	61 f0       	breq	.+24     	; 0x176e <ReadHMC5883LSingleMeasurementData+0x52>
	{
		SendTrace(ERROR_LEVEL, "Magnetometer not in SINGLE MEASUREMENT Mode.\r\n");
    1756:	83 e0       	ldi	r24, 0x03	; 3
    1758:	9a e0       	ldi	r25, 0x0A	; 10
    175a:	9f 93       	push	r25
    175c:	8f 93       	push	r24
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	8f 93       	push	r24
    1762:	d0 d4       	rcall	.+2464   	; 0x2104 <SendTrace>
	
		goto Exit;
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
	return Status;
}

bool ReadHMC5883LSingleMeasurementData(PMAGNETOMETER_DATA pData)
{
	bool Status = FALSE;
    176a:	f1 2c       	mov	r15, r1

	if (gHMC5883LOpMode != SINGLE_MEASUREMENT_MODE)
	{
		SendTrace(ERROR_LEVEL, "Magnetometer not in SINGLE MEASUREMENT Mode.\r\n");
	
		goto Exit;
    176c:	66 c0       	rjmp	.+204    	; 0x183a <ReadHMC5883LSingleMeasurementData+0x11e>
	// Initiate Single Measurement.
	//
	
	ModeReg.AsUINT8 = 0;
	
	ModeReg.Mode = SINGLE_MEASUREMENT_MODE;
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	89 83       	std	Y+1, r24	; 0x01
	
	Status = SetHMC5883LRegister(ADR_MODE_REG, &ModeReg, sizeof(MODE_REG));
    1772:	21 e0       	ldi	r18, 0x01	; 1
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	40 e0       	ldi	r20, 0x00	; 0
    1778:	50 e0       	ldi	r21, 0x00	; 0
    177a:	be 01       	movw	r22, r28
    177c:	6f 5f       	subi	r22, 0xFF	; 255
    177e:	7f 4f       	sbci	r23, 0xFF	; 255
    1780:	82 e0       	ldi	r24, 0x02	; 2
    1782:	1f df       	rcall	.-450    	; 0x15c2 <SetHMC5883LRegister>
    1784:	f8 2e       	mov	r15, r24
	
	if (!Status)
    1786:	81 11       	cpse	r24, r1
    1788:	0b c0       	rjmp	.+22     	; 0x17a0 <ReadHMC5883LSingleMeasurementData+0x84>
	{
		SendTrace(ERROR_LEVEL, "Failed to initiate Single Measurement. \r\n");
    178a:	82 e3       	ldi	r24, 0x32	; 50
    178c:	9a e0       	ldi	r25, 0x0A	; 10
    178e:	9f 93       	push	r25
    1790:	8f 93       	push	r24
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	8f 93       	push	r24
    1796:	b6 d4       	rcall	.+2412   	; 0x2104 <SendTrace>
		
		goto Exit;
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	4d c0       	rjmp	.+154    	; 0x183a <ReadHMC5883LSingleMeasurementData+0x11e>
	
	//
	// Loop Until Data is ready.
	//

	while (!IsHMC5883LDataReady());
    17a0:	7d df       	rcall	.-262    	; 0x169c <IsHMC5883LDataReady>
    17a2:	88 23       	and	r24, r24
    17a4:	e9 f3       	breq	.-6      	; 0x17a0 <ReadHMC5883LSingleMeasurementData+0x84>
	
	//
	// Initiate Data Read
	//
	
	Status = ReadHMC5883LData(pData);
    17a6:	c8 01       	movw	r24, r16
    17a8:	c4 de       	rcall	.-632    	; 0x1532 <ReadHMC5883LData>
    17aa:	f8 2e       	mov	r15, r24
	
	if (!Status)
    17ac:	81 11       	cpse	r24, r1
    17ae:	0b c0       	rjmp	.+22     	; 0x17c6 <ReadHMC5883LSingleMeasurementData+0xaa>
	{
		SendTrace(INFO_LEVEL, "Reading HMC5883L Data Failed\r\n");
    17b0:	8d ec       	ldi	r24, 0xCD	; 205
    17b2:	99 e0       	ldi	r25, 0x09	; 9
    17b4:	9f 93       	push	r25
    17b6:	8f 93       	push	r24
    17b8:	84 e0       	ldi	r24, 0x04	; 4
    17ba:	8f 93       	push	r24
    17bc:	a3 d4       	rcall	.+2374   	; 0x2104 <SendTrace>
		
		goto Exit;
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	3a c0       	rjmp	.+116    	; 0x183a <ReadHMC5883LSingleMeasurementData+0x11e>
	}
	
	pData->GaussX = pData->RawDataX * HMC5883L_SCALE_FACTOR;
    17c6:	f8 01       	movw	r30, r16
    17c8:	60 81       	ld	r22, Z
    17ca:	71 81       	ldd	r23, Z+1	; 0x01
    17cc:	88 27       	eor	r24, r24
    17ce:	77 fd       	sbrc	r23, 7
    17d0:	80 95       	com	r24
    17d2:	98 2f       	mov	r25, r24
    17d4:	0e 94 2c 18 	call	0x3058	; 0x3058 <__floatsisf>
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	4a ef       	ldi	r20, 0xFA	; 250
    17de:	5e e3       	ldi	r21, 0x3E	; 62
    17e0:	0e 94 93 19 	call	0x3326	; 0x3326 <__mulsf3>
    17e4:	f8 01       	movw	r30, r16
    17e6:	66 83       	std	Z+6, r22	; 0x06
    17e8:	77 83       	std	Z+7, r23	; 0x07
    17ea:	80 87       	std	Z+8, r24	; 0x08
    17ec:	91 87       	std	Z+9, r25	; 0x09
	
	pData->GaussY = pData->RawDataY * HMC5883L_SCALE_FACTOR;
    17ee:	62 81       	ldd	r22, Z+2	; 0x02
    17f0:	73 81       	ldd	r23, Z+3	; 0x03
    17f2:	88 27       	eor	r24, r24
    17f4:	77 fd       	sbrc	r23, 7
    17f6:	80 95       	com	r24
    17f8:	98 2f       	mov	r25, r24
    17fa:	0e 94 2c 18 	call	0x3058	; 0x3058 <__floatsisf>
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	4a ef       	ldi	r20, 0xFA	; 250
    1804:	5e e3       	ldi	r21, 0x3E	; 62
    1806:	0e 94 93 19 	call	0x3326	; 0x3326 <__mulsf3>
    180a:	f8 01       	movw	r30, r16
    180c:	62 87       	std	Z+10, r22	; 0x0a
    180e:	73 87       	std	Z+11, r23	; 0x0b
    1810:	84 87       	std	Z+12, r24	; 0x0c
    1812:	95 87       	std	Z+13, r25	; 0x0d
	
	pData->GaussZ = pData->RawDataZ * HMC5883L_SCALE_FACTOR;
    1814:	64 81       	ldd	r22, Z+4	; 0x04
    1816:	75 81       	ldd	r23, Z+5	; 0x05
    1818:	88 27       	eor	r24, r24
    181a:	77 fd       	sbrc	r23, 7
    181c:	80 95       	com	r24
    181e:	98 2f       	mov	r25, r24
    1820:	0e 94 2c 18 	call	0x3058	; 0x3058 <__floatsisf>
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	4a ef       	ldi	r20, 0xFA	; 250
    182a:	5e e3       	ldi	r21, 0x3E	; 62
    182c:	0e 94 93 19 	call	0x3326	; 0x3326 <__mulsf3>
    1830:	f8 01       	movw	r30, r16
    1832:	66 87       	std	Z+14, r22	; 0x0e
    1834:	77 87       	std	Z+15, r23	; 0x0f
    1836:	80 8b       	std	Z+16, r24	; 0x10
    1838:	91 8b       	std	Z+17, r25	; 0x11
	
Exit:

	return Status;
}
    183a:	8f 2d       	mov	r24, r15
    183c:	0f 90       	pop	r0
    183e:	df 91       	pop	r29
    1840:	cf 91       	pop	r28
    1842:	1f 91       	pop	r17
    1844:	0f 91       	pop	r16
    1846:	ff 90       	pop	r15
    1848:	08 95       	ret

0000184a <CheckHMC5883LDeviceId>:

	return Status;
}

bool CheckHMC5883LDeviceId()
{
    184a:	1f 93       	push	r17
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	1f 92       	push	r1
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
	bool Status = FALSE;
	
	unsigned char DeviceId = 0;
    1856:	19 82       	std	Y+1, r1	; 0x01
	
	Status = ReadHMC5883LRegister(ADR_ID_REG_A, &DeviceId, sizeof(unsigned char));
    1858:	21 e0       	ldi	r18, 0x01	; 1
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	40 e0       	ldi	r20, 0x00	; 0
    185e:	50 e0       	ldi	r21, 0x00	; 0
    1860:	be 01       	movw	r22, r28
    1862:	6f 5f       	subi	r22, 0xFF	; 255
    1864:	7f 4f       	sbci	r23, 0xFF	; 255
    1866:	8a e0       	ldi	r24, 0x0A	; 10
    1868:	ba dd       	rcall	.-1164   	; 0x13de <ReadHMC5883LRegister>
    186a:	18 2f       	mov	r17, r24
	
	if (!Status)
    186c:	81 11       	cpse	r24, r1
    186e:	0b c0       	rjmp	.+22     	; 0x1886 <CheckHMC5883LDeviceId+0x3c>
	{
		SendTrace(ERROR_LEVEL, "Failed to read Magnetometer Device Id A. \r\n");
    1870:	2c e5       	ldi	r18, 0x5C	; 92
    1872:	3a e0       	ldi	r19, 0x0A	; 10
    1874:	3f 93       	push	r19
    1876:	2f 93       	push	r18
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	8f 93       	push	r24
    187c:	43 d4       	rcall	.+2182   	; 0x2104 <SendTrace>
		
		goto Exit;
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	62 c0       	rjmp	.+196    	; 0x194a <CheckHMC5883LDeviceId+0x100>
	}
	
	if (DeviceId != ID_A)
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	88 34       	cpi	r24, 0x48	; 72
    188a:	71 f0       	breq	.+28     	; 0x18a8 <CheckHMC5883LDeviceId+0x5e>
	{
		SendTrace(ERROR_LEVEL, "Magnetometer Device Id A does not match 0x%x. \r\n", DeviceId);
    188c:	1f 92       	push	r1
    188e:	8f 93       	push	r24
    1890:	88 e8       	ldi	r24, 0x88	; 136
    1892:	9a e0       	ldi	r25, 0x0A	; 10
    1894:	9f 93       	push	r25
    1896:	8f 93       	push	r24
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	8f 93       	push	r24
    189c:	33 d4       	rcall	.+2150   	; 0x2104 <SendTrace>
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
		
		Status = FALSE;
	}
	
	Status = ReadHMC5883LRegister(ADR_ID_REG_B, &DeviceId, sizeof(unsigned char));
    18a8:	21 e0       	ldi	r18, 0x01	; 1
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	40 e0       	ldi	r20, 0x00	; 0
    18ae:	50 e0       	ldi	r21, 0x00	; 0
    18b0:	be 01       	movw	r22, r28
    18b2:	6f 5f       	subi	r22, 0xFF	; 255
    18b4:	7f 4f       	sbci	r23, 0xFF	; 255
    18b6:	8b e0       	ldi	r24, 0x0B	; 11
    18b8:	92 dd       	rcall	.-1244   	; 0x13de <ReadHMC5883LRegister>
    18ba:	18 2f       	mov	r17, r24
	
	if (!Status)
    18bc:	81 11       	cpse	r24, r1
    18be:	0b c0       	rjmp	.+22     	; 0x18d6 <CheckHMC5883LDeviceId+0x8c>
	{
		SendTrace(ERROR_LEVEL, "Failed to read Magnetometer Device Id B. \r\n");
    18c0:	29 eb       	ldi	r18, 0xB9	; 185
    18c2:	3a e0       	ldi	r19, 0x0A	; 10
    18c4:	3f 93       	push	r19
    18c6:	2f 93       	push	r18
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	8f 93       	push	r24
    18cc:	1b d4       	rcall	.+2102   	; 0x2104 <SendTrace>
		
		goto Exit;
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	3a c0       	rjmp	.+116    	; 0x194a <CheckHMC5883LDeviceId+0x100>
	}
	
	if (DeviceId != ID_B)
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	84 33       	cpi	r24, 0x34	; 52
    18da:	71 f0       	breq	.+28     	; 0x18f8 <CheckHMC5883LDeviceId+0xae>
	{
		SendTrace(ERROR_LEVEL, "Magnetometer Device Id B does not match 0x%x. \r\n", DeviceId);
    18dc:	1f 92       	push	r1
    18de:	8f 93       	push	r24
    18e0:	85 ee       	ldi	r24, 0xE5	; 229
    18e2:	9a e0       	ldi	r25, 0x0A	; 10
    18e4:	9f 93       	push	r25
    18e6:	8f 93       	push	r24
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	8f 93       	push	r24
    18ec:	0b d4       	rcall	.+2070   	; 0x2104 <SendTrace>
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
		
		Status = FALSE;
	}
	
	Status = ReadHMC5883LRegister(ADR_ID_REG_C, &DeviceId, sizeof(unsigned char));
    18f8:	21 e0       	ldi	r18, 0x01	; 1
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e0       	ldi	r20, 0x00	; 0
    18fe:	50 e0       	ldi	r21, 0x00	; 0
    1900:	be 01       	movw	r22, r28
    1902:	6f 5f       	subi	r22, 0xFF	; 255
    1904:	7f 4f       	sbci	r23, 0xFF	; 255
    1906:	8c e0       	ldi	r24, 0x0C	; 12
    1908:	6a dd       	rcall	.-1324   	; 0x13de <ReadHMC5883LRegister>
    190a:	18 2f       	mov	r17, r24
	
	if (!Status)
    190c:	81 11       	cpse	r24, r1
    190e:	0b c0       	rjmp	.+22     	; 0x1926 <CheckHMC5883LDeviceId+0xdc>
	{
		SendTrace(ERROR_LEVEL, "Failed to read Magnetometer Device Id C. \r\n");
    1910:	26 e1       	ldi	r18, 0x16	; 22
    1912:	3b e0       	ldi	r19, 0x0B	; 11
    1914:	3f 93       	push	r19
    1916:	2f 93       	push	r18
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	8f 93       	push	r24
    191c:	f3 d3       	rcall	.+2022   	; 0x2104 <SendTrace>
		
		goto Exit;
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	12 c0       	rjmp	.+36     	; 0x194a <CheckHMC5883LDeviceId+0x100>
	}
	
	if (DeviceId != ID_C)
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	83 33       	cpi	r24, 0x33	; 51
    192a:	79 f0       	breq	.+30     	; 0x194a <CheckHMC5883LDeviceId+0x100>
	{
		SendTrace(ERROR_LEVEL, "Magnetometer Device Id C does not match 0x%x. \r\n", DeviceId);
    192c:	1f 92       	push	r1
    192e:	8f 93       	push	r24
    1930:	82 e4       	ldi	r24, 0x42	; 66
    1932:	9b e0       	ldi	r25, 0x0B	; 11
    1934:	9f 93       	push	r25
    1936:	8f 93       	push	r24
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	8f 93       	push	r24
    193c:	e3 d3       	rcall	.+1990   	; 0x2104 <SendTrace>
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
		
		Status = FALSE;
    1948:	10 e0       	ldi	r17, 0x00	; 0
	}
	
Exit:
	
	return Status;
    194a:	81 2f       	mov	r24, r17
    194c:	0f 90       	pop	r0
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	1f 91       	pop	r17
    1954:	08 95       	ret

00001956 <InitHMC5883LMagnetometer>:
bool InitHMC5883LMagnetometer(OP_MODE OpMode, 
							  MEASUREMENT_MODE MeasurementMode,
							  DATA_OUTPUT_RATE DataOutputRate,
							  SAMPLES_AVERAGED_PER_MEASUREMENT SamplesAveragedPerMeasurement,
							  GAIN_CONFIGURATION GainConfiguration)
{
    1956:	cf 92       	push	r12
    1958:	df 92       	push	r13
    195a:	ef 92       	push	r14
    195c:	ff 92       	push	r15
    195e:	0f 93       	push	r16
    1960:	1f 93       	push	r17
    1962:	cf 93       	push	r28
    1964:	df 93       	push	r29
    1966:	00 d0       	rcall	.+0      	; 0x1968 <InitHMC5883LMagnetometer+0x12>
    1968:	1f 92       	push	r1
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	f8 2e       	mov	r15, r24
    1970:	d6 2e       	mov	r13, r22
    1972:	c4 2e       	mov	r12, r20
    1974:	e2 2e       	mov	r14, r18
	
	CONFIG_REG_B ConfigRegB;
	
	MODE_REG ModeReg;
	
	gHMC5883LDeviceAddress.Address = DEVICE_ADDRESS;
    1976:	90 91 eb 0e 	lds	r25, 0x0EEB
    197a:	91 70       	andi	r25, 0x01	; 1
    197c:	9c 63       	ori	r25, 0x3C	; 60
    197e:	90 93 eb 0e 	sts	0x0EEB, r25
	
	if (gIsInitialized)
    1982:	90 91 e3 0e 	lds	r25, 0x0EE3
    1986:	99 23       	and	r25, r25
    1988:	89 f1       	breq	.+98     	; 0x19ec <InitHMC5883LMagnetometer+0x96>
		// Program Mode Register
		//
		
		ModeReg.AsUINT8 = 0;
		
		ModeReg.Mode = IDLE_MODE;
    198a:	82 e0       	ldi	r24, 0x02	; 2
    198c:	8b 83       	std	Y+3, r24	; 0x03
		
		Status = SetHMC5883LRegister(ADR_MODE_REG, &ModeReg, sizeof(MODE_REG));
    198e:	21 e0       	ldi	r18, 0x01	; 1
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	40 e0       	ldi	r20, 0x00	; 0
    1994:	50 e0       	ldi	r21, 0x00	; 0
    1996:	be 01       	movw	r22, r28
    1998:	6d 5f       	subi	r22, 0xFD	; 253
    199a:	7f 4f       	sbci	r23, 0xFF	; 255
    199c:	12 de       	rcall	.-988    	; 0x15c2 <SetHMC5883LRegister>
    199e:	18 2f       	mov	r17, r24
		
		if (!Status)
    19a0:	81 11       	cpse	r24, r1
    19a2:	0b c0       	rjmp	.+22     	; 0x19ba <InitHMC5883LMagnetometer+0x64>
		{
			SendTrace(ERROR_LEVEL, "Failed to program MODE REG to stop measurement. \r\n");
    19a4:	23 e7       	ldi	r18, 0x73	; 115
    19a6:	3b e0       	ldi	r19, 0x0B	; 11
    19a8:	3f 93       	push	r19
    19aa:	2f 93       	push	r18
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	8f 93       	push	r24
    19b0:	a9 d3       	rcall	.+1874   	; 0x2104 <SendTrace>
			
			goto Exit;
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	8f c0       	rjmp	.+286    	; 0x1ad8 <InitHMC5883LMagnetometer+0x182>
		// Stop measurement.
		//
		
		ConfigRegA.AsUINT8 = 0;
		
		ConfigRegA.StartStopMeasurement = 1;
    19ba:	80 e8       	ldi	r24, 0x80	; 128
    19bc:	89 83       	std	Y+1, r24	; 0x01
		
		Status = SetHMC5883LRegister(ADR_CONFIG_REG_A, &ConfigRegA, sizeof(CONFIG_REG_A));
    19be:	21 e0       	ldi	r18, 0x01	; 1
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	40 e0       	ldi	r20, 0x00	; 0
    19c4:	50 e0       	ldi	r21, 0x00	; 0
    19c6:	be 01       	movw	r22, r28
    19c8:	6f 5f       	subi	r22, 0xFF	; 255
    19ca:	7f 4f       	sbci	r23, 0xFF	; 255
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	f9 dd       	rcall	.-1038   	; 0x15c2 <SetHMC5883LRegister>
    19d0:	18 2f       	mov	r17, r24
		
		if (!Status)
    19d2:	81 11       	cpse	r24, r1
    19d4:	19 c0       	rjmp	.+50     	; 0x1a08 <InitHMC5883LMagnetometer+0xb2>
		{
			SendTrace(ERROR_LEVEL, "Failed to program Config Reg A to stop measurement. \r\n");
    19d6:	26 ea       	ldi	r18, 0xA6	; 166
    19d8:	3b e0       	ldi	r19, 0x0B	; 11
    19da:	3f 93       	push	r19
    19dc:	2f 93       	push	r18
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	8f 93       	push	r24
    19e2:	90 d3       	rcall	.+1824   	; 0x2104 <SendTrace>
			
			goto Exit;
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	76 c0       	rjmp	.+236    	; 0x1ad8 <InitHMC5883LMagnetometer+0x182>
		}
	}
	else
	{
		if (!CheckHMC5883LDeviceId())
    19ec:	2e df       	rcall	.-420    	; 0x184a <CheckHMC5883LDeviceId>
    19ee:	88 23       	and	r24, r24
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <InitHMC5883LMagnetometer+0x9e>
    19f2:	71 c0       	rjmp	.+226    	; 0x1ad6 <InitHMC5883LMagnetometer+0x180>
		{
			goto Exit;
		}
		else
		{
			SendTrace(INFO_LEVEL, "Device ID Check Passed.\r\n");
    19f4:	ed ed       	ldi	r30, 0xDD	; 221
    19f6:	fb e0       	ldi	r31, 0x0B	; 11
    19f8:	ff 93       	push	r31
    19fa:	ef 93       	push	r30
    19fc:	84 e0       	ldi	r24, 0x04	; 4
    19fe:	8f 93       	push	r24
    1a00:	81 d3       	rcall	.+1794   	; 0x2104 <SendTrace>
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
	// Program Mode Register
	//
	
	ModeReg.AsUINT8 = 0;
	
	ModeReg.Mode = OpMode;
    1a08:	8f 2d       	mov	r24, r15
    1a0a:	83 70       	andi	r24, 0x03	; 3
    1a0c:	8b 83       	std	Y+3, r24	; 0x03
	
	Status = SetHMC5883LRegister(ADR_MODE_REG, &ModeReg, sizeof(MODE_REG));
    1a0e:	21 e0       	ldi	r18, 0x01	; 1
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e0       	ldi	r20, 0x00	; 0
    1a14:	50 e0       	ldi	r21, 0x00	; 0
    1a16:	be 01       	movw	r22, r28
    1a18:	6d 5f       	subi	r22, 0xFD	; 253
    1a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1c:	82 e0       	ldi	r24, 0x02	; 2
    1a1e:	d1 dd       	rcall	.-1118   	; 0x15c2 <SetHMC5883LRegister>
    1a20:	18 2f       	mov	r17, r24
	
	if (!Status)
    1a22:	81 11       	cpse	r24, r1
    1a24:	0b c0       	rjmp	.+22     	; 0x1a3c <InitHMC5883LMagnetometer+0xe6>
	{
		SendTrace(ERROR_LEVEL, "Failed to program MODE REG. \r\n");
    1a26:	27 ef       	ldi	r18, 0xF7	; 247
    1a28:	3b e0       	ldi	r19, 0x0B	; 11
    1a2a:	3f 93       	push	r19
    1a2c:	2f 93       	push	r18
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	8f 93       	push	r24
    1a32:	68 d3       	rcall	.+1744   	; 0x2104 <SendTrace>
		
		goto Exit;
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	4e c0       	rjmp	.+156    	; 0x1ad8 <InitHMC5883LMagnetometer+0x182>
	}
	
	gHMC5883LOpMode = OpMode;
    1a3c:	f0 92 ec 0e 	sts	0x0EEC, r15
	// Program Configuration Register B
	//
	
	ConfigRegB.AsUINT8 = 0;
	
	ConfigRegB.GainConfiguration = GainConfiguration;
    1a40:	02 95       	swap	r16
    1a42:	00 0f       	add	r16, r16
    1a44:	00 7e       	andi	r16, 0xE0	; 224
    1a46:	0a 83       	std	Y+2, r16	; 0x02
	
	Status = SetHMC5883LRegister(ADR_CONFIG_REG_B, &ConfigRegB, sizeof(CONFIG_REG_B));
    1a48:	21 e0       	ldi	r18, 0x01	; 1
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e0       	ldi	r20, 0x00	; 0
    1a4e:	50 e0       	ldi	r21, 0x00	; 0
    1a50:	be 01       	movw	r22, r28
    1a52:	6e 5f       	subi	r22, 0xFE	; 254
    1a54:	7f 4f       	sbci	r23, 0xFF	; 255
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	b4 dd       	rcall	.-1176   	; 0x15c2 <SetHMC5883LRegister>
    1a5a:	18 2f       	mov	r17, r24
	
	if (!Status)
    1a5c:	81 11       	cpse	r24, r1
    1a5e:	0b c0       	rjmp	.+22     	; 0x1a76 <InitHMC5883LMagnetometer+0x120>
	{
		SendTrace(ERROR_LEVEL, "Failed to program CONFIG REG B. \r\n");
    1a60:	26 e1       	ldi	r18, 0x16	; 22
    1a62:	3c e0       	ldi	r19, 0x0C	; 12
    1a64:	3f 93       	push	r19
    1a66:	2f 93       	push	r18
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	8f 93       	push	r24
    1a6c:	4b d3       	rcall	.+1686   	; 0x2104 <SendTrace>
		
		goto Exit;
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	31 c0       	rjmp	.+98     	; 0x1ad8 <InitHMC5883LMagnetometer+0x182>
	
	//
	// Program Configuration Register A
	//
	
	ConfigRegA.DataOutputRate = DataOutputRate;
    1a76:	8c 2d       	mov	r24, r12
    1a78:	87 70       	andi	r24, 0x07	; 7
    1a7a:	c8 2e       	mov	r12, r24
    1a7c:	cc 0c       	add	r12, r12
    1a7e:	cc 0c       	add	r12, r12
    1a80:	99 81       	ldd	r25, Y+1	; 0x01
    1a82:	90 7e       	andi	r25, 0xE0	; 224
	
	ConfigRegA.MeasurementMode = MeasurementMode;
    1a84:	8d 2d       	mov	r24, r13
    1a86:	83 70       	andi	r24, 0x03	; 3
    1a88:	9c 29       	or	r25, r12
    1a8a:	98 2b       	or	r25, r24
	
	ConfigRegA.SamplesAveragedPerMeasurement = SamplesAveragedPerMeasurement;
    1a8c:	8e 2d       	mov	r24, r14
    1a8e:	83 70       	andi	r24, 0x03	; 3
    1a90:	82 95       	swap	r24
    1a92:	88 0f       	add	r24, r24
    1a94:	80 7e       	andi	r24, 0xE0	; 224
    1a96:	9f 79       	andi	r25, 0x9F	; 159
    1a98:	e9 2e       	mov	r14, r25
    1a9a:	e8 2a       	or	r14, r24
    1a9c:	e9 82       	std	Y+1, r14	; 0x01
	
	Status = SetHMC5883LRegister(ADR_CONFIG_REG_A, &ConfigRegA, sizeof(CONFIG_REG_A));
    1a9e:	21 e0       	ldi	r18, 0x01	; 1
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e0       	ldi	r20, 0x00	; 0
    1aa4:	50 e0       	ldi	r21, 0x00	; 0
    1aa6:	be 01       	movw	r22, r28
    1aa8:	6f 5f       	subi	r22, 0xFF	; 255
    1aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	89 dd       	rcall	.-1262   	; 0x15c2 <SetHMC5883LRegister>
    1ab0:	18 2f       	mov	r17, r24
	
	if (!Status)
    1ab2:	81 11       	cpse	r24, r1
    1ab4:	0b c0       	rjmp	.+22     	; 0x1acc <InitHMC5883LMagnetometer+0x176>
	{
		SendTrace(ERROR_LEVEL, "Failed to program CONFIG REG A. \r\n");
    1ab6:	29 e3       	ldi	r18, 0x39	; 57
    1ab8:	3c e0       	ldi	r19, 0x0C	; 12
    1aba:	3f 93       	push	r19
    1abc:	2f 93       	push	r18
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	8f 93       	push	r24
    1ac2:	20 d3       	rcall	.+1600   	; 0x2104 <SendTrace>
		
		goto Exit;
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	06 c0       	rjmp	.+12     	; 0x1ad8 <InitHMC5883LMagnetometer+0x182>
	}
	
	PrintHMC5883LConfigRegisters();
    1acc:	d4 dc       	rcall	.-1624   	; 0x1476 <PrintHMC5883LConfigRegisters>
	
	gIsInitialized = TRUE;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	80 93 e3 0e 	sts	0x0EE3, r24
    1ad4:	01 c0       	rjmp	.+2      	; 0x1ad8 <InitHMC5883LMagnetometer+0x182>
							  MEASUREMENT_MODE MeasurementMode,
							  DATA_OUTPUT_RATE DataOutputRate,
							  SAMPLES_AVERAGED_PER_MEASUREMENT SamplesAveragedPerMeasurement,
							  GAIN_CONFIGURATION GainConfiguration)
{
	bool Status = FALSE;
    1ad6:	10 e0       	ldi	r17, 0x00	; 0
	gIsInitialized = TRUE;
	
Exit:

	return Status;
}
    1ad8:	81 2f       	mov	r24, r17
    1ada:	0f 90       	pop	r0
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	df 91       	pop	r29
    1ae2:	cf 91       	pop	r28
    1ae4:	1f 91       	pop	r17
    1ae6:	0f 91       	pop	r16
    1ae8:	ff 90       	pop	r15
    1aea:	ef 90       	pop	r14
    1aec:	df 90       	pop	r13
    1aee:	cf 90       	pop	r12
    1af0:	08 95       	ret

00001af2 <InitTrace>:
#ifdef DEBUG

void
InitTrace(unsigned long ProcFrequency, unsigned char TraceLevel)
{
	if (!gTraceInitialized)
    1af2:	80 91 e4 0e 	lds	r24, 0x0EE4
    1af6:	81 11       	cpse	r24, r1
    1af8:	09 c0       	rjmp	.+18     	; 0x1b0c <InitTrace+0x1a>
	{

		gTraceLevel = TraceLevel;
    1afa:	40 93 ed 0e 	sts	0x0EED, r20

		InitUARTSync(UART_ZERO, BR_9600, NORMAL_MODE);	
    1afe:	40 e0       	ldi	r20, 0x00	; 0
    1b00:	63 e3       	ldi	r22, 0x33	; 51
    1b02:	70 e0       	ldi	r23, 0x00	; 0
    1b04:	60 d7       	rcall	.+3776   	; 0x29c6 <InitUARTSync>
		
		gTraceInitialized = TRUE;
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	80 93 e4 0e 	sts	0x0EE4, r24
    1b0c:	08 95       	ret

00001b0e <SendStringValue>:
SendStringValue(char *String)
{

	unsigned long Length = 0;
	
	Length = strlen(String);
    1b0e:	fc 01       	movw	r30, r24
    1b10:	01 90       	ld	r0, Z+
    1b12:	00 20       	and	r0, r0
    1b14:	e9 f7       	brne	.-6      	; 0x1b10 <SendStringValue+0x2>
    1b16:	31 97       	sbiw	r30, 0x01	; 1
    1b18:	9f 01       	movw	r18, r30
    1b1a:	28 1b       	sub	r18, r24
    1b1c:	39 0b       	sbc	r19, r25
    1b1e:	40 e0       	ldi	r20, 0x00	; 0
    1b20:	50 e0       	ldi	r21, 0x00	; 0
	
	UARTTransmitSync(UART_ZERO, (PVOID) String, Length);
    1b22:	bc 01       	movw	r22, r24
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	0c 94 b0 15 	jmp	0x2b60	; 0x2b60 <UARTTransmitSync>
    1b2a:	08 95       	ret

00001b2c <SendHexValue>:
	
}

void
SendHexValue(unsigned long long Value)
{
    1b2c:	8f 92       	push	r8
    1b2e:	9f 92       	push	r9
    1b30:	af 92       	push	r10
    1b32:	bf 92       	push	r11
    1b34:	cf 92       	push	r12
    1b36:	df 92       	push	r13
    1b38:	ef 92       	push	r14
    1b3a:	ff 92       	push	r15
    1b3c:	0f 93       	push	r16
    1b3e:	1f 93       	push	r17
    1b40:	cf 93       	push	r28
    1b42:	df 93       	push	r29
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
    1b48:	da 95       	dec	r29
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	de bf       	out	0x3e, r29	; 62
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	cd bf       	out	0x3d, r28	; 61
    1b54:	02 2f       	mov	r16, r18
    1b56:	93 2e       	mov	r9, r19
    1b58:	a4 2e       	mov	r10, r20
    1b5a:	b5 2e       	mov	r11, r21
    1b5c:	c6 2e       	mov	r12, r22
    1b5e:	d7 2e       	mov	r13, r23
    1b60:	e8 2e       	mov	r14, r24
    1b62:	f9 2e       	mov	r15, r25

	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
    1b64:	10 e0       	ldi	r17, 0x00	; 0

		if (Value < 16)
		{
			TransmitChar[Count] = Value;

			Value = 0;
    1b66:	81 2c       	mov	r8, r1


	do
	{

		if (Value < 16)
    1b68:	20 2f       	mov	r18, r16
    1b6a:	39 2d       	mov	r19, r9
    1b6c:	4a 2d       	mov	r20, r10
    1b6e:	5b 2d       	mov	r21, r11
    1b70:	6c 2d       	mov	r22, r12
    1b72:	7d 2d       	mov	r23, r13
    1b74:	8e 2d       	mov	r24, r14
    1b76:	9f 2d       	mov	r25, r15
    1b78:	af e0       	ldi	r26, 0x0F	; 15
    1b7a:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <__cmpdi2_s8>
    1b7e:	09 f0       	breq	.+2      	; 0x1b82 <SendHexValue+0x56>
    1b80:	80 f4       	brcc	.+32     	; 0x1ba2 <SendHexValue+0x76>
		{
			TransmitChar[Count] = Value;
    1b82:	e1 e0       	ldi	r30, 0x01	; 1
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	ec 0f       	add	r30, r28
    1b88:	fd 1f       	adc	r31, r29
    1b8a:	e1 0f       	add	r30, r17
    1b8c:	f1 1d       	adc	r31, r1
    1b8e:	00 83       	st	Z, r16

			Value = 0;
    1b90:	08 2d       	mov	r16, r8
    1b92:	98 2c       	mov	r9, r8
    1b94:	a8 2c       	mov	r10, r8
    1b96:	b8 2c       	mov	r11, r8
    1b98:	c8 2c       	mov	r12, r8
    1b9a:	d8 2c       	mov	r13, r8
    1b9c:	e8 2c       	mov	r14, r8
    1b9e:	f8 2c       	mov	r15, r8
    1ba0:	1c c0       	rjmp	.+56     	; 0x1bda <SendHexValue+0xae>
		}
		else
		{
			TransmitChar[Count] = Value % 16;
    1ba2:	e1 e0       	ldi	r30, 0x01	; 1
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	ec 0f       	add	r30, r28
    1ba8:	fd 1f       	adc	r31, r29
    1baa:	e1 0f       	add	r30, r17
    1bac:	f1 1d       	adc	r31, r1
    1bae:	80 2f       	mov	r24, r16
    1bb0:	8f 70       	andi	r24, 0x0F	; 15
    1bb2:	80 83       	st	Z, r24

			Value = Value / 16;
    1bb4:	20 2f       	mov	r18, r16
    1bb6:	39 2d       	mov	r19, r9
    1bb8:	4a 2d       	mov	r20, r10
    1bba:	5b 2d       	mov	r21, r11
    1bbc:	6c 2d       	mov	r22, r12
    1bbe:	7d 2d       	mov	r23, r13
    1bc0:	8e 2d       	mov	r24, r14
    1bc2:	9f 2d       	mov	r25, r15
    1bc4:	04 e0       	ldi	r16, 0x04	; 4
    1bc6:	0e 94 41 1b 	call	0x3682	; 0x3682 <__lshrdi3>
    1bca:	02 2f       	mov	r16, r18
    1bcc:	93 2e       	mov	r9, r19
    1bce:	a4 2e       	mov	r10, r20
    1bd0:	b5 2e       	mov	r11, r21
    1bd2:	c6 2e       	mov	r12, r22
    1bd4:	d7 2e       	mov	r13, r23
    1bd6:	e8 2e       	mov	r14, r24
    1bd8:	f9 2e       	mov	r15, r25

		}
		
		if (TransmitChar[Count] > 9)
    1bda:	e1 2f       	mov	r30, r17
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	a1 e0       	ldi	r26, 0x01	; 1
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	ac 0f       	add	r26, r28
    1be4:	bd 1f       	adc	r27, r29
    1be6:	ae 0f       	add	r26, r30
    1be8:	bf 1f       	adc	r27, r31
    1bea:	8c 91       	ld	r24, X
    1bec:	8a 30       	cpi	r24, 0x0A	; 10
    1bee:	20 f0       	brcs	.+8      	; 0x1bf8 <SendHexValue+0xcc>
		{
			TransmitChar[Count] = TransmitChar[Count] + ASCII_HEX_CONVERSION;
    1bf0:	fd 01       	movw	r30, r26
    1bf2:	89 5a       	subi	r24, 0xA9	; 169
    1bf4:	80 83       	st	Z, r24
    1bf6:	08 c0       	rjmp	.+16     	; 0x1c08 <SendHexValue+0xdc>
		}
		else
		{
			TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
    1bf8:	21 e0       	ldi	r18, 0x01	; 1
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	2c 0f       	add	r18, r28
    1bfe:	3d 1f       	adc	r19, r29
    1c00:	e2 0f       	add	r30, r18
    1c02:	f3 1f       	adc	r31, r19
    1c04:	80 5d       	subi	r24, 0xD0	; 208
    1c06:	80 83       	st	Z, r24
		}
		
		Count++;
    1c08:	1f 5f       	subi	r17, 0xFF	; 255

	} while (Value != 0);
    1c0a:	20 2f       	mov	r18, r16
    1c0c:	39 2d       	mov	r19, r9
    1c0e:	4a 2d       	mov	r20, r10
    1c10:	5b 2d       	mov	r21, r11
    1c12:	6c 2d       	mov	r22, r12
    1c14:	7d 2d       	mov	r23, r13
    1c16:	8e 2d       	mov	r24, r14
    1c18:	9f 2d       	mov	r25, r15
    1c1a:	a8 2d       	mov	r26, r8
    1c1c:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <__cmpdi2_s8>
    1c20:	09 f0       	breq	.+2      	; 0x1c24 <SendHexValue+0xf8>
    1c22:	a2 cf       	rjmp	.-188    	; 0x1b68 <SendHexValue+0x3c>

	while (Count != 0)
    1c24:	11 23       	and	r17, r17
    1c26:	91 f0       	breq	.+36     	; 0x1c4c <SendHexValue+0x120>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
    1c28:	61 2f       	mov	r22, r17
    1c2a:	70 e0       	ldi	r23, 0x00	; 0
    1c2c:	61 50       	subi	r22, 0x01	; 1
    1c2e:	71 09       	sbc	r23, r1
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	8c 0f       	add	r24, r28
    1c36:	9d 1f       	adc	r25, r29
    1c38:	68 0f       	add	r22, r24
    1c3a:	79 1f       	adc	r23, r25
    1c3c:	21 e0       	ldi	r18, 0x01	; 1
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	40 e0       	ldi	r20, 0x00	; 0
    1c42:	50 e0       	ldi	r21, 0x00	; 0
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	8c d7       	rcall	.+3864   	; 0x2b60 <UARTTransmitSync>
		
		Count--;
    1c48:	11 50       	subi	r17, 0x01	; 1
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
    1c4a:	71 f7       	brne	.-36     	; 0x1c28 <SendHexValue+0xfc>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}
}
    1c4c:	d3 95       	inc	r29
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	f8 94       	cli
    1c52:	de bf       	out	0x3e, r29	; 62
    1c54:	0f be       	out	0x3f, r0	; 63
    1c56:	cd bf       	out	0x3d, r28	; 61
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	1f 91       	pop	r17
    1c5e:	0f 91       	pop	r16
    1c60:	ff 90       	pop	r15
    1c62:	ef 90       	pop	r14
    1c64:	df 90       	pop	r13
    1c66:	cf 90       	pop	r12
    1c68:	bf 90       	pop	r11
    1c6a:	af 90       	pop	r10
    1c6c:	9f 90       	pop	r9
    1c6e:	8f 90       	pop	r8
    1c70:	08 95       	ret

00001c72 <SendDecimalValue>:


void
SendDecimalValue(unsigned long long Value)
{
    1c72:	2f 92       	push	r2
    1c74:	3f 92       	push	r3
    1c76:	4f 92       	push	r4
    1c78:	5f 92       	push	r5
    1c7a:	6f 92       	push	r6
    1c7c:	7f 92       	push	r7
    1c7e:	8f 92       	push	r8
    1c80:	9f 92       	push	r9
    1c82:	af 92       	push	r10
    1c84:	bf 92       	push	r11
    1c86:	cf 92       	push	r12
    1c88:	df 92       	push	r13
    1c8a:	ef 92       	push	r14
    1c8c:	ff 92       	push	r15
    1c8e:	0f 93       	push	r16
    1c90:	1f 93       	push	r17
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	c2 50       	subi	r28, 0x02	; 2
    1c9c:	d1 40       	sbci	r29, 0x01	; 1
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	cd bf       	out	0x3d, r28	; 61
    1ca8:	cf 5f       	subi	r28, 0xFF	; 255
    1caa:	de 4f       	sbci	r29, 0xFE	; 254
    1cac:	28 83       	st	Y, r18
    1cae:	c1 50       	subi	r28, 0x01	; 1
    1cb0:	d1 40       	sbci	r29, 0x01	; 1
    1cb2:	23 2e       	mov	r2, r19
    1cb4:	34 2e       	mov	r3, r20
    1cb6:	45 2e       	mov	r4, r21
    1cb8:	56 2e       	mov	r5, r22
    1cba:	67 2e       	mov	r6, r23
    1cbc:	78 2e       	mov	r7, r24
    1cbe:	89 2e       	mov	r8, r25

	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
    1cc0:	91 2c       	mov	r9, r1


	do
	{

		if (Value < 10)
    1cc2:	cf 5f       	subi	r28, 0xFF	; 255
    1cc4:	de 4f       	sbci	r29, 0xFE	; 254
    1cc6:	28 81       	ld	r18, Y
    1cc8:	c1 50       	subi	r28, 0x01	; 1
    1cca:	d1 40       	sbci	r29, 0x01	; 1
    1ccc:	32 2d       	mov	r19, r2
    1cce:	43 2d       	mov	r20, r3
    1cd0:	54 2d       	mov	r21, r4
    1cd2:	65 2d       	mov	r22, r5
    1cd4:	76 2d       	mov	r23, r6
    1cd6:	87 2d       	mov	r24, r7
    1cd8:	98 2d       	mov	r25, r8
    1cda:	a9 e0       	ldi	r26, 0x09	; 9
    1cdc:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <__cmpdi2_s8>
    1ce0:	09 f0       	breq	.+2      	; 0x1ce4 <SendDecimalValue+0x72>
    1ce2:	40 f4       	brcc	.+16     	; 0x1cf4 <SendDecimalValue+0x82>

			Value = Value / 10;

		}
		
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	e9 0d       	add	r30, r9
    1ce8:	f1 1d       	adc	r31, r1
    1cea:	82 2f       	mov	r24, r18
    1cec:	80 5d       	subi	r24, 0xD0	; 208
    1cee:	81 83       	std	Z+1, r24	; 0x01
		
		Count++;
    1cf0:	93 94       	inc	r9
    1cf2:	4b c0       	rjmp	.+150    	; 0x1d8a <SendDecimalValue+0x118>

			Value = 0;
		}
		else
		{
			TransmitChar[Count] = Value % 10;
    1cf4:	0f 2e       	mov	r0, r31
    1cf6:	fa e0       	ldi	r31, 0x0A	; 10
    1cf8:	af 2e       	mov	r10, r31
    1cfa:	f0 2d       	mov	r31, r0
    1cfc:	b1 2c       	mov	r11, r1
    1cfe:	c1 2c       	mov	r12, r1
    1d00:	d1 2c       	mov	r13, r1
    1d02:	e1 2c       	mov	r14, r1
    1d04:	f1 2c       	mov	r15, r1
    1d06:	00 e0       	ldi	r16, 0x00	; 0
    1d08:	10 e0       	ldi	r17, 0x00	; 0
    1d0a:	cf 5f       	subi	r28, 0xFF	; 255
    1d0c:	de 4f       	sbci	r29, 0xFE	; 254
    1d0e:	28 81       	ld	r18, Y
    1d10:	c1 50       	subi	r28, 0x01	; 1
    1d12:	d1 40       	sbci	r29, 0x01	; 1
    1d14:	32 2d       	mov	r19, r2
    1d16:	43 2d       	mov	r20, r3
    1d18:	54 2d       	mov	r21, r4
    1d1a:	65 2d       	mov	r22, r5
    1d1c:	76 2d       	mov	r23, r6
    1d1e:	87 2d       	mov	r24, r7
    1d20:	98 2d       	mov	r25, r8
    1d22:	0e 94 9a 1a 	call	0x3534	; 0x3534 <__umoddi3>
    1d26:	ce 5f       	subi	r28, 0xFE	; 254
    1d28:	de 4f       	sbci	r29, 0xFE	; 254
    1d2a:	28 83       	st	Y, r18
    1d2c:	c2 50       	subi	r28, 0x02	; 2
    1d2e:	d1 40       	sbci	r29, 0x01	; 1

			Value = Value / 10;
    1d30:	cf 5f       	subi	r28, 0xFF	; 255
    1d32:	de 4f       	sbci	r29, 0xFE	; 254
    1d34:	28 81       	ld	r18, Y
    1d36:	c1 50       	subi	r28, 0x01	; 1
    1d38:	d1 40       	sbci	r29, 0x01	; 1
    1d3a:	32 2d       	mov	r19, r2
    1d3c:	43 2d       	mov	r20, r3
    1d3e:	54 2d       	mov	r21, r4
    1d40:	65 2d       	mov	r22, r5
    1d42:	76 2d       	mov	r23, r6
    1d44:	87 2d       	mov	r24, r7
    1d46:	98 2d       	mov	r25, r8
    1d48:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__udivdi3>
    1d4c:	cf 5f       	subi	r28, 0xFF	; 255
    1d4e:	de 4f       	sbci	r29, 0xFE	; 254
    1d50:	28 83       	st	Y, r18
    1d52:	c1 50       	subi	r28, 0x01	; 1
    1d54:	d1 40       	sbci	r29, 0x01	; 1
    1d56:	23 2e       	mov	r2, r19
    1d58:	34 2e       	mov	r3, r20
    1d5a:	45 2e       	mov	r4, r21
    1d5c:	56 2e       	mov	r5, r22
    1d5e:	67 2e       	mov	r6, r23
    1d60:	78 2e       	mov	r7, r24
    1d62:	89 2e       	mov	r8, r25

		}
		
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
    1d64:	e1 e0       	ldi	r30, 0x01	; 1
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	ec 0f       	add	r30, r28
    1d6a:	fd 1f       	adc	r31, r29
    1d6c:	e9 0d       	add	r30, r9
    1d6e:	f1 1d       	adc	r31, r1
    1d70:	ce 5f       	subi	r28, 0xFE	; 254
    1d72:	de 4f       	sbci	r29, 0xFE	; 254
    1d74:	a8 81       	ld	r26, Y
    1d76:	c2 50       	subi	r28, 0x02	; 2
    1d78:	d1 40       	sbci	r29, 0x01	; 1
    1d7a:	a0 5d       	subi	r26, 0xD0	; 208
    1d7c:	a0 83       	st	Z, r26
		
		Count++;
    1d7e:	93 94       	inc	r9

	} while (Value != 0);
    1d80:	a0 e0       	ldi	r26, 0x00	; 0
    1d82:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <__cmpdi2_s8>
    1d86:	09 f0       	breq	.+2      	; 0x1d8a <SendDecimalValue+0x118>
    1d88:	9c cf       	rjmp	.-200    	; 0x1cc2 <SendDecimalValue+0x50>

	while (Count != 0)
    1d8a:	99 20       	and	r9, r9
    1d8c:	91 f0       	breq	.+36     	; 0x1db2 <SendDecimalValue+0x140>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
    1d8e:	69 2d       	mov	r22, r9
    1d90:	70 e0       	ldi	r23, 0x00	; 0
    1d92:	61 50       	subi	r22, 0x01	; 1
    1d94:	71 09       	sbc	r23, r1
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	8c 0f       	add	r24, r28
    1d9c:	9d 1f       	adc	r25, r29
    1d9e:	68 0f       	add	r22, r24
    1da0:	79 1f       	adc	r23, r25
    1da2:	21 e0       	ldi	r18, 0x01	; 1
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e0       	ldi	r20, 0x00	; 0
    1da8:	50 e0       	ldi	r21, 0x00	; 0
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	d9 d6       	rcall	.+3506   	; 0x2b60 <UARTTransmitSync>
		
		Count--;
    1dae:	9a 94       	dec	r9
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
    1db0:	71 f7       	brne	.-36     	; 0x1d8e <SendDecimalValue+0x11c>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}	
}
    1db2:	ce 5f       	subi	r28, 0xFE	; 254
    1db4:	de 4f       	sbci	r29, 0xFE	; 254
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	f8 94       	cli
    1dba:	de bf       	out	0x3e, r29	; 62
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	cd bf       	out	0x3d, r28	; 61
    1dc0:	df 91       	pop	r29
    1dc2:	cf 91       	pop	r28
    1dc4:	1f 91       	pop	r17
    1dc6:	0f 91       	pop	r16
    1dc8:	ff 90       	pop	r15
    1dca:	ef 90       	pop	r14
    1dcc:	df 90       	pop	r13
    1dce:	cf 90       	pop	r12
    1dd0:	bf 90       	pop	r11
    1dd2:	af 90       	pop	r10
    1dd4:	9f 90       	pop	r9
    1dd6:	8f 90       	pop	r8
    1dd8:	7f 90       	pop	r7
    1dda:	6f 90       	pop	r6
    1ddc:	5f 90       	pop	r5
    1dde:	4f 90       	pop	r4
    1de0:	3f 90       	pop	r3
    1de2:	2f 90       	pop	r2
    1de4:	08 95       	ret

00001de6 <SendDoubleValue>:

void
SendDoubleValue(double Value)
{
    1de6:	6f 92       	push	r6
    1de8:	7f 92       	push	r7
    1dea:	8f 92       	push	r8
    1dec:	9f 92       	push	r9
    1dee:	af 92       	push	r10
    1df0:	bf 92       	push	r11
    1df2:	cf 92       	push	r12
    1df4:	df 92       	push	r13
    1df6:	ef 92       	push	r14
    1df8:	ff 92       	push	r15
    1dfa:	0f 93       	push	r16
    1dfc:	1f 93       	push	r17
    1dfe:	cf 93       	push	r28
    1e00:	df 93       	push	r29
    1e02:	00 d0       	rcall	.+0      	; 0x1e04 <SendDoubleValue+0x1e>
    1e04:	1f 92       	push	r1
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	6b 01       	movw	r12, r22
    1e0c:	7c 01       	movw	r14, r24
	
	long long IntPart;
	
	unsigned char FracPart;
	
	unsigned char Dot = '.';
    1e0e:	8e e2       	ldi	r24, 0x2E	; 46
    1e10:	8a 83       	std	Y+2, r24	; 0x02
	
	unsigned char Minus = '-';
    1e12:	8d e2       	ldi	r24, 0x2D	; 45
    1e14:	8b 83       	std	Y+3, r24	; 0x03
	
	if (Value < 0)
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	a9 01       	movw	r20, r18
    1e1c:	c7 01       	movw	r24, r14
    1e1e:	b6 01       	movw	r22, r12
    1e20:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <__cmpsf2>
    1e24:	88 23       	and	r24, r24
    1e26:	6c f4       	brge	.+26     	; 0x1e42 <SendDoubleValue+0x5c>
	{
		
		UARTTransmitSync(UART_ZERO, (PVOID) &Minus, 1);
    1e28:	21 e0       	ldi	r18, 0x01	; 1
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	40 e0       	ldi	r20, 0x00	; 0
    1e2e:	50 e0       	ldi	r21, 0x00	; 0
    1e30:	be 01       	movw	r22, r28
    1e32:	6d 5f       	subi	r22, 0xFD	; 253
    1e34:	7f 4f       	sbci	r23, 0xFF	; 255
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	93 d6       	rcall	.+3366   	; 0x2b60 <UARTTransmitSync>
		
		Value = Value * -1;
    1e3a:	f7 fa       	bst	r15, 7
    1e3c:	f0 94       	com	r15
    1e3e:	f7 f8       	bld	r15, 7
    1e40:	f0 94       	com	r15
	}
	
	IntPart = (long long) Value;
    1e42:	c7 01       	movw	r24, r14
    1e44:	b6 01       	movw	r22, r12
    1e46:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <__fixsfdi>
    1e4a:	62 2e       	mov	r6, r18
    1e4c:	73 2e       	mov	r7, r19
    1e4e:	84 2e       	mov	r8, r20
    1e50:	95 2e       	mov	r9, r21
    1e52:	a6 2e       	mov	r10, r22
    1e54:	b7 2e       	mov	r11, r23
    1e56:	08 2f       	mov	r16, r24
    1e58:	19 2f       	mov	r17, r25
		
	Value = Value - IntPart;
    1e5a:	0e 94 26 18 	call	0x304c	; 0x304c <__floatdisf>
    1e5e:	9b 01       	movw	r18, r22
    1e60:	ac 01       	movw	r20, r24
    1e62:	c7 01       	movw	r24, r14
    1e64:	b6 01       	movw	r22, r12
    1e66:	58 d7       	rcall	.+3760   	; 0x2d18 <__subsf3>
    1e68:	6b 01       	movw	r12, r22
    1e6a:	7c 01       	movw	r14, r24
	
	SendDecimalValue(IntPart);
    1e6c:	26 2d       	mov	r18, r6
    1e6e:	37 2d       	mov	r19, r7
    1e70:	48 2d       	mov	r20, r8
    1e72:	59 2d       	mov	r21, r9
    1e74:	6a 2d       	mov	r22, r10
    1e76:	7b 2d       	mov	r23, r11
    1e78:	80 2f       	mov	r24, r16
    1e7a:	91 2f       	mov	r25, r17
    1e7c:	fa de       	rcall	.-524    	; 0x1c72 <SendDecimalValue>
	
	UARTTransmitSync(UART_ZERO, (PVOID) &Dot, 1);
    1e7e:	21 e0       	ldi	r18, 0x01	; 1
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	40 e0       	ldi	r20, 0x00	; 0
    1e84:	50 e0       	ldi	r21, 0x00	; 0
    1e86:	be 01       	movw	r22, r28
    1e88:	6e 5f       	subi	r22, 0xFE	; 254
    1e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	68 d6       	rcall	.+3280   	; 0x2b60 <UARTTransmitSync>
	
	while (Value != 0)
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	a9 01       	movw	r20, r18
    1e96:	c7 01       	movw	r24, r14
    1e98:	b6 01       	movw	r22, r12
    1e9a:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <__cmpsf2>
    1e9e:	88 23       	and	r24, r24
    1ea0:	61 f1       	breq	.+88     	; 0x1efa <SendDoubleValue+0x114>
	{
		FracPart = (Value * 10);
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	40 e2       	ldi	r20, 0x20	; 32
    1ea8:	51 e4       	ldi	r21, 0x41	; 65
    1eaa:	c7 01       	movw	r24, r14
    1eac:	b6 01       	movw	r22, r12
    1eae:	0e 94 93 19 	call	0x3326	; 0x3326 <__mulsf3>
    1eb2:	6b 01       	movw	r12, r22
    1eb4:	7c 01       	movw	r14, r24
    1eb6:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__fixunssfsi>
    1eba:	16 2f       	mov	r17, r22
		
		Value = (Value * 10) - FracPart;
    1ebc:	70 e0       	ldi	r23, 0x00	; 0
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	0e 94 2c 18 	call	0x3058	; 0x3058 <__floatsisf>
    1ec6:	9b 01       	movw	r18, r22
    1ec8:	ac 01       	movw	r20, r24
    1eca:	c7 01       	movw	r24, r14
    1ecc:	b6 01       	movw	r22, r12
    1ece:	24 d7       	rcall	.+3656   	; 0x2d18 <__subsf3>
    1ed0:	6b 01       	movw	r12, r22
    1ed2:	7c 01       	movw	r14, r24
		
		FracPart = FracPart + ASCII_DECIMAL_CONVERSION;
    1ed4:	10 5d       	subi	r17, 0xD0	; 208
    1ed6:	19 83       	std	Y+1, r17	; 0x01
		
		UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
    1ed8:	21 e0       	ldi	r18, 0x01	; 1
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e0       	ldi	r20, 0x00	; 0
    1ede:	50 e0       	ldi	r21, 0x00	; 0
    1ee0:	be 01       	movw	r22, r28
    1ee2:	6f 5f       	subi	r22, 0xFF	; 255
    1ee4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	3b d6       	rcall	.+3190   	; 0x2b60 <UARTTransmitSync>
	
	SendDecimalValue(IntPart);
	
	UARTTransmitSync(UART_ZERO, (PVOID) &Dot, 1);
	
	while (Value != 0)
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	a9 01       	movw	r20, r18
    1ef0:	c7 01       	movw	r24, r14
    1ef2:	b6 01       	movw	r22, r12
    1ef4:	d8 d7       	rcall	.+4016   	; 0x2ea6 <__cmpsf2>
    1ef6:	81 11       	cpse	r24, r1
    1ef8:	d4 cf       	rjmp	.-88     	; 0x1ea2 <SendDoubleValue+0xbc>
	
	//
	// Print 0
	//
	
	FracPart = ASCII_DECIMAL_CONVERSION;
    1efa:	80 e3       	ldi	r24, 0x30	; 48
    1efc:	89 83       	std	Y+1, r24	; 0x01
	
	UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
    1efe:	21 e0       	ldi	r18, 0x01	; 1
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e0       	ldi	r20, 0x00	; 0
    1f04:	50 e0       	ldi	r21, 0x00	; 0
    1f06:	be 01       	movw	r22, r28
    1f08:	6f 5f       	subi	r22, 0xFF	; 255
    1f0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	28 d6       	rcall	.+3152   	; 0x2b60 <UARTTransmitSync>
}
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	df 91       	pop	r29
    1f18:	cf 91       	pop	r28
    1f1a:	1f 91       	pop	r17
    1f1c:	0f 91       	pop	r16
    1f1e:	ff 90       	pop	r15
    1f20:	ef 90       	pop	r14
    1f22:	df 90       	pop	r13
    1f24:	cf 90       	pop	r12
    1f26:	bf 90       	pop	r11
    1f28:	af 90       	pop	r10
    1f2a:	9f 90       	pop	r9
    1f2c:	8f 90       	pop	r8
    1f2e:	7f 90       	pop	r7
    1f30:	6f 90       	pop	r6
    1f32:	08 95       	ret

00001f34 <SendSignedDecimalValue>:

void
SendSignedDecimalValue(long long Value)
{
    1f34:	2f 92       	push	r2
    1f36:	3f 92       	push	r3
    1f38:	4f 92       	push	r4
    1f3a:	5f 92       	push	r5
    1f3c:	6f 92       	push	r6
    1f3e:	7f 92       	push	r7
    1f40:	8f 92       	push	r8
    1f42:	9f 92       	push	r9
    1f44:	af 92       	push	r10
    1f46:	bf 92       	push	r11
    1f48:	cf 92       	push	r12
    1f4a:	df 92       	push	r13
    1f4c:	ef 92       	push	r14
    1f4e:	ff 92       	push	r15
    1f50:	0f 93       	push	r16
    1f52:	1f 93       	push	r17
    1f54:	cf 93       	push	r28
    1f56:	df 93       	push	r29
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	c3 50       	subi	r28, 0x03	; 3
    1f5e:	d1 40       	sbci	r29, 0x01	; 1
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	f8 94       	cli
    1f64:	de bf       	out	0x3e, r29	; 62
    1f66:	0f be       	out	0x3f, r0	; 63
    1f68:	cd bf       	out	0x3d, r28	; 61
    1f6a:	ce 5f       	subi	r28, 0xFE	; 254
    1f6c:	de 4f       	sbci	r29, 0xFE	; 254
    1f6e:	28 83       	st	Y, r18
    1f70:	c2 50       	subi	r28, 0x02	; 2
    1f72:	d1 40       	sbci	r29, 0x01	; 1
    1f74:	83 2e       	mov	r8, r19
    1f76:	74 2e       	mov	r7, r20
    1f78:	65 2e       	mov	r6, r21
    1f7a:	56 2e       	mov	r5, r22
    1f7c:	47 2e       	mov	r4, r23
    1f7e:	38 2e       	mov	r3, r24
    1f80:	29 2e       	mov	r2, r25
	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
	
	unsigned char Minus = '-';
    1f82:	8d e2       	ldi	r24, 0x2D	; 45
    1f84:	cf 5f       	subi	r28, 0xFF	; 255
    1f86:	de 4f       	sbci	r29, 0xFE	; 254
    1f88:	88 83       	st	Y, r24
    1f8a:	c1 50       	subi	r28, 0x01	; 1
    1f8c:	d1 40       	sbci	r29, 0x01	; 1

	//
	// If the value is negative, print - sign and make the value positive.
	//

	if (Value < 0)
    1f8e:	83 2d       	mov	r24, r3
    1f90:	a0 e0       	ldi	r26, 0x00	; 0
    1f92:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <__cmpdi2_s8>
    1f96:	1c f5       	brge	.+70     	; 0x1fde <SendSignedDecimalValue+0xaa>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &Minus, 1);
    1f98:	21 e0       	ldi	r18, 0x01	; 1
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e0       	ldi	r20, 0x00	; 0
    1f9e:	50 e0       	ldi	r21, 0x00	; 0
    1fa0:	be 01       	movw	r22, r28
    1fa2:	6f 5f       	subi	r22, 0xFF	; 255
    1fa4:	7e 4f       	sbci	r23, 0xFE	; 254
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	db d5       	rcall	.+2998   	; 0x2b60 <UARTTransmitSync>

		Value *= -1;
    1faa:	ce 5f       	subi	r28, 0xFE	; 254
    1fac:	de 4f       	sbci	r29, 0xFE	; 254
    1fae:	28 81       	ld	r18, Y
    1fb0:	c2 50       	subi	r28, 0x02	; 2
    1fb2:	d1 40       	sbci	r29, 0x01	; 1
    1fb4:	38 2d       	mov	r19, r8
    1fb6:	47 2d       	mov	r20, r7
    1fb8:	56 2d       	mov	r21, r6
    1fba:	65 2d       	mov	r22, r5
    1fbc:	74 2d       	mov	r23, r4
    1fbe:	83 2d       	mov	r24, r3
    1fc0:	92 2d       	mov	r25, r2
    1fc2:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <__negdi2>
    1fc6:	ce 5f       	subi	r28, 0xFE	; 254
    1fc8:	de 4f       	sbci	r29, 0xFE	; 254
    1fca:	28 83       	st	Y, r18
    1fcc:	c2 50       	subi	r28, 0x02	; 2
    1fce:	d1 40       	sbci	r29, 0x01	; 1
    1fd0:	83 2e       	mov	r8, r19
    1fd2:	74 2e       	mov	r7, r20
    1fd4:	65 2e       	mov	r6, r21
    1fd6:	56 2e       	mov	r5, r22
    1fd8:	47 2e       	mov	r4, r23
    1fda:	38 2e       	mov	r3, r24
    1fdc:	29 2e       	mov	r2, r25
	UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
}

void
SendSignedDecimalValue(long long Value)
{
    1fde:	91 2c       	mov	r9, r1
	}

	do
	{

		if (Value < 10)
    1fe0:	ce 5f       	subi	r28, 0xFE	; 254
    1fe2:	de 4f       	sbci	r29, 0xFE	; 254
    1fe4:	28 81       	ld	r18, Y
    1fe6:	c2 50       	subi	r28, 0x02	; 2
    1fe8:	d1 40       	sbci	r29, 0x01	; 1
    1fea:	38 2d       	mov	r19, r8
    1fec:	47 2d       	mov	r20, r7
    1fee:	56 2d       	mov	r21, r6
    1ff0:	65 2d       	mov	r22, r5
    1ff2:	74 2d       	mov	r23, r4
    1ff4:	83 2d       	mov	r24, r3
    1ff6:	92 2d       	mov	r25, r2
    1ff8:	a9 e0       	ldi	r26, 0x09	; 9
    1ffa:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <__cmpdi2_s8>
    1ffe:	09 f0       	breq	.+2      	; 0x2002 <SendSignedDecimalValue+0xce>
    2000:	44 f4       	brge	.+16     	; 0x2012 <SendSignedDecimalValue+0xde>

			Value = Value / 10;

		}
	
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
    2002:	fe 01       	movw	r30, r28
    2004:	e9 0d       	add	r30, r9
    2006:	f1 1d       	adc	r31, r1
    2008:	82 2f       	mov	r24, r18
    200a:	80 5d       	subi	r24, 0xD0	; 208
    200c:	81 83       	std	Z+1, r24	; 0x01
		
		Count++;
    200e:	93 94       	inc	r9
    2010:	4b c0       	rjmp	.+150    	; 0x20a8 <SendSignedDecimalValue+0x174>

			Value = 0;
		}
		else
		{
			TransmitChar[Count] = Value % 10;
    2012:	0f 2e       	mov	r0, r31
    2014:	fa e0       	ldi	r31, 0x0A	; 10
    2016:	af 2e       	mov	r10, r31
    2018:	f0 2d       	mov	r31, r0
    201a:	b1 2c       	mov	r11, r1
    201c:	c1 2c       	mov	r12, r1
    201e:	d1 2c       	mov	r13, r1
    2020:	e1 2c       	mov	r14, r1
    2022:	f1 2c       	mov	r15, r1
    2024:	00 e0       	ldi	r16, 0x00	; 0
    2026:	10 e0       	ldi	r17, 0x00	; 0
    2028:	ce 5f       	subi	r28, 0xFE	; 254
    202a:	de 4f       	sbci	r29, 0xFE	; 254
    202c:	28 81       	ld	r18, Y
    202e:	c2 50       	subi	r28, 0x02	; 2
    2030:	d1 40       	sbci	r29, 0x01	; 1
    2032:	38 2d       	mov	r19, r8
    2034:	47 2d       	mov	r20, r7
    2036:	56 2d       	mov	r21, r6
    2038:	65 2d       	mov	r22, r5
    203a:	74 2d       	mov	r23, r4
    203c:	83 2d       	mov	r24, r3
    203e:	92 2d       	mov	r25, r2
    2040:	0e 94 6f 1a 	call	0x34de	; 0x34de <__moddi3>
    2044:	cd 5f       	subi	r28, 0xFD	; 253
    2046:	de 4f       	sbci	r29, 0xFE	; 254
    2048:	28 83       	st	Y, r18
    204a:	c3 50       	subi	r28, 0x03	; 3
    204c:	d1 40       	sbci	r29, 0x01	; 1

			Value = Value / 10;
    204e:	ce 5f       	subi	r28, 0xFE	; 254
    2050:	de 4f       	sbci	r29, 0xFE	; 254
    2052:	28 81       	ld	r18, Y
    2054:	c2 50       	subi	r28, 0x02	; 2
    2056:	d1 40       	sbci	r29, 0x01	; 1
    2058:	38 2d       	mov	r19, r8
    205a:	47 2d       	mov	r20, r7
    205c:	56 2d       	mov	r21, r6
    205e:	65 2d       	mov	r22, r5
    2060:	74 2d       	mov	r23, r4
    2062:	83 2d       	mov	r24, r3
    2064:	92 2d       	mov	r25, r2
    2066:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <__divdi3>
    206a:	ce 5f       	subi	r28, 0xFE	; 254
    206c:	de 4f       	sbci	r29, 0xFE	; 254
    206e:	28 83       	st	Y, r18
    2070:	c2 50       	subi	r28, 0x02	; 2
    2072:	d1 40       	sbci	r29, 0x01	; 1
    2074:	83 2e       	mov	r8, r19
    2076:	74 2e       	mov	r7, r20
    2078:	65 2e       	mov	r6, r21
    207a:	56 2e       	mov	r5, r22
    207c:	47 2e       	mov	r4, r23
    207e:	38 2e       	mov	r3, r24
    2080:	29 2e       	mov	r2, r25

		}
	
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
    2082:	e1 e0       	ldi	r30, 0x01	; 1
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	ec 0f       	add	r30, r28
    2088:	fd 1f       	adc	r31, r29
    208a:	e9 0d       	add	r30, r9
    208c:	f1 1d       	adc	r31, r1
    208e:	cd 5f       	subi	r28, 0xFD	; 253
    2090:	de 4f       	sbci	r29, 0xFE	; 254
    2092:	a8 81       	ld	r26, Y
    2094:	c3 50       	subi	r28, 0x03	; 3
    2096:	d1 40       	sbci	r29, 0x01	; 1
    2098:	a0 5d       	subi	r26, 0xD0	; 208
    209a:	a0 83       	st	Z, r26
		
		Count++;
    209c:	93 94       	inc	r9

	} while (Value != 0);
    209e:	a0 e0       	ldi	r26, 0x00	; 0
    20a0:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <__cmpdi2_s8>
    20a4:	09 f0       	breq	.+2      	; 0x20a8 <SendSignedDecimalValue+0x174>
    20a6:	9c cf       	rjmp	.-200    	; 0x1fe0 <SendSignedDecimalValue+0xac>

	while (Count != 0)
    20a8:	99 20       	and	r9, r9
    20aa:	91 f0       	breq	.+36     	; 0x20d0 <SendSignedDecimalValue+0x19c>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
    20ac:	69 2d       	mov	r22, r9
    20ae:	70 e0       	ldi	r23, 0x00	; 0
    20b0:	61 50       	subi	r22, 0x01	; 1
    20b2:	71 09       	sbc	r23, r1
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	8c 0f       	add	r24, r28
    20ba:	9d 1f       	adc	r25, r29
    20bc:	68 0f       	add	r22, r24
    20be:	79 1f       	adc	r23, r25
    20c0:	21 e0       	ldi	r18, 0x01	; 1
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	40 e0       	ldi	r20, 0x00	; 0
    20c6:	50 e0       	ldi	r21, 0x00	; 0
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	4a d5       	rcall	.+2708   	; 0x2b60 <UARTTransmitSync>
		
		Count--;
    20cc:	9a 94       	dec	r9
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
    20ce:	71 f7       	brne	.-36     	; 0x20ac <SendSignedDecimalValue+0x178>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}
}
    20d0:	cd 5f       	subi	r28, 0xFD	; 253
    20d2:	de 4f       	sbci	r29, 0xFE	; 254
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
    20de:	df 91       	pop	r29
    20e0:	cf 91       	pop	r28
    20e2:	1f 91       	pop	r17
    20e4:	0f 91       	pop	r16
    20e6:	ff 90       	pop	r15
    20e8:	ef 90       	pop	r14
    20ea:	df 90       	pop	r13
    20ec:	cf 90       	pop	r12
    20ee:	bf 90       	pop	r11
    20f0:	af 90       	pop	r10
    20f2:	9f 90       	pop	r9
    20f4:	8f 90       	pop	r8
    20f6:	7f 90       	pop	r7
    20f8:	6f 90       	pop	r6
    20fa:	5f 90       	pop	r5
    20fc:	4f 90       	pop	r4
    20fe:	3f 90       	pop	r3
    2100:	2f 90       	pop	r2
    2102:	08 95       	ret

00002104 <SendTrace>:
	}
}

void
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{
    2104:	3f 92       	push	r3
    2106:	4f 92       	push	r4
    2108:	5f 92       	push	r5
    210a:	6f 92       	push	r6
    210c:	7f 92       	push	r7
    210e:	8f 92       	push	r8
    2110:	9f 92       	push	r9
    2112:	af 92       	push	r10
    2114:	bf 92       	push	r11
    2116:	cf 92       	push	r12
    2118:	df 92       	push	r13
    211a:	ef 92       	push	r14
    211c:	ff 92       	push	r15
    211e:	0f 93       	push	r16
    2120:	1f 93       	push	r17
    2122:	cf 93       	push	r28
    2124:	df 93       	push	r29
    2126:	1f 92       	push	r1
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
    212c:	0e 89       	ldd	r16, Y+22	; 0x16
    212e:	1f 89       	ldd	r17, Y+23	; 0x17
	
	char Character;

	va_list ArgList;

	if (!gTraceInitialized || !(TraceLevel & gTraceLevel))
    2130:	80 91 e4 0e 	lds	r24, 0x0EE4
    2134:	88 23       	and	r24, r24
    2136:	09 f4       	brne	.+2      	; 0x213a <SendTrace+0x36>
    2138:	1c c1       	rjmp	.+568    	; 0x2372 <SendTrace+0x26e>
    213a:	80 91 ed 0e 	lds	r24, 0x0EED
    213e:	9d 89       	ldd	r25, Y+21	; 0x15
    2140:	89 23       	and	r24, r25
    2142:	09 f4       	brne	.+2      	; 0x2146 <SendTrace+0x42>
    2144:	16 c1       	rjmp	.+556    	; 0x2372 <SendTrace+0x26e>
	{
		return;
	}

	va_start(ArgList, String);
    2146:	7e 01       	movw	r14, r28
    2148:	28 e1       	ldi	r18, 0x18	; 24
    214a:	e2 0e       	add	r14, r18
    214c:	f1 1c       	adc	r15, r1

	while (*String != '\0')
    214e:	f8 01       	movw	r30, r16
    2150:	20 81       	ld	r18, Z
    2152:	22 23       	and	r18, r18
    2154:	09 f4       	brne	.+2      	; 0x2158 <SendTrace+0x54>
    2156:	0d c1       	rjmp	.+538    	; 0x2372 <SendTrace+0x26e>
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{

	bool IsLong = FALSE;
	
	bool IsLongLong = FALSE;
    2158:	41 2c       	mov	r4, r1

void
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{

	bool IsLong = FALSE;
    215a:	d1 2c       	mov	r13, r1
						IsLong = FALSE;
					}
					
					SendDoubleValue(va_arg(ArgList, double));
					
					break;
    215c:	51 2c       	mov	r5, r1
						
						IsLong = FALSE;
					}
					else
					{
						IsLong = TRUE;
    215e:	33 24       	eor	r3, r3
    2160:	33 94       	inc	r3
	va_start(ArgList, String);

	while (*String != '\0')
	{

		if (*String == '%' || IsLong || IsLongLong)
    2162:	25 32       	cpi	r18, 0x25	; 37
    2164:	29 f0       	breq	.+10     	; 0x2170 <SendTrace+0x6c>
    2166:	d1 10       	cpse	r13, r1
    2168:	05 c0       	rjmp	.+10     	; 0x2174 <SendTrace+0x70>
    216a:	41 10       	cpse	r4, r1
    216c:	03 c0       	rjmp	.+6      	; 0x2174 <SendTrace+0x70>
    216e:	f0 c0       	rjmp	.+480    	; 0x2350 <SendTrace+0x24c>
		{

			if (*String == '%')
			{
				String++;
    2170:	0f 5f       	subi	r16, 0xFF	; 255
    2172:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			switch (*String)
    2174:	f8 01       	movw	r30, r16
    2176:	80 81       	ld	r24, Z
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	fc 01       	movw	r30, r24
    217c:	e3 56       	subi	r30, 0x63	; 99
    217e:	f1 09       	sbc	r31, r1
    2180:	e6 31       	cpi	r30, 0x16	; 22
    2182:	f1 05       	cpc	r31, r1
    2184:	08 f0       	brcs	.+2      	; 0x2188 <SendTrace+0x84>
    2186:	ed c0       	rjmp	.+474    	; 0x2362 <SendTrace+0x25e>
    2188:	ea 5b       	subi	r30, 0xBA	; 186
    218a:	ff 4f       	sbci	r31, 0xFF	; 255
    218c:	0c 94 69 1a 	jmp	0x34d2	; 0x34d2 <__tablejump2__>
			{
				case 'c':
				{

					Character = va_arg(ArgList, int);
    2190:	57 01       	movw	r10, r14
    2192:	f2 e0       	ldi	r31, 0x02	; 2
    2194:	af 0e       	add	r10, r31
    2196:	b1 1c       	adc	r11, r1
    2198:	f7 01       	movw	r30, r14
    219a:	80 81       	ld	r24, Z
    219c:	89 83       	std	Y+1, r24	; 0x01
					
					UARTTransmitSync(UART_ZERO, (PVOID) &Character, 1);
    219e:	21 e0       	ldi	r18, 0x01	; 1
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	40 e0       	ldi	r20, 0x00	; 0
    21a4:	50 e0       	ldi	r21, 0x00	; 0
    21a6:	be 01       	movw	r22, r28
    21a8:	6f 5f       	subi	r22, 0xFF	; 255
    21aa:	7f 4f       	sbci	r23, 0xFF	; 255
    21ac:	85 2d       	mov	r24, r5
    21ae:	d8 d4       	rcall	.+2480   	; 0x2b60 <UARTTransmitSync>
			switch (*String)
			{
				case 'c':
				{

					Character = va_arg(ArgList, int);
    21b0:	75 01       	movw	r14, r10
					
					UARTTransmitSync(UART_ZERO, (PVOID) &Character, 1);

					break;
    21b2:	d7 c0       	rjmp	.+430    	; 0x2362 <SendTrace+0x25e>

				}
				case 'd':
				{

					if (IsLong)
    21b4:	dd 20       	and	r13, r13
    21b6:	d9 f0       	breq	.+54     	; 0x21ee <SendTrace+0xea>
					{

						SendSignedDecimalValue(va_arg(ArgList, long));
    21b8:	67 01       	movw	r12, r14
    21ba:	f4 e0       	ldi	r31, 0x04	; 4
    21bc:	cf 0e       	add	r12, r31
    21be:	d1 1c       	adc	r13, r1
    21c0:	f7 01       	movw	r30, r14
    21c2:	80 81       	ld	r24, Z
    21c4:	91 81       	ldd	r25, Z+1	; 0x01
    21c6:	a2 81       	ldd	r26, Z+2	; 0x02
    21c8:	b3 81       	ldd	r27, Z+3	; 0x03
    21ca:	4c 01       	movw	r8, r24
    21cc:	5d 01       	movw	r10, r26
    21ce:	bb 0c       	add	r11, r11
    21d0:	88 08       	sbc	r8, r8
    21d2:	98 2c       	mov	r9, r8
    21d4:	54 01       	movw	r10, r8
    21d6:	28 2f       	mov	r18, r24
    21d8:	39 2f       	mov	r19, r25
    21da:	4a 2f       	mov	r20, r26
    21dc:	5b 2f       	mov	r21, r27
    21de:	68 2d       	mov	r22, r8
    21e0:	78 2d       	mov	r23, r8
    21e2:	88 2d       	mov	r24, r8
    21e4:	98 2d       	mov	r25, r8
    21e6:	a6 de       	rcall	.-692    	; 0x1f34 <SendSignedDecimalValue>
    21e8:	76 01       	movw	r14, r12

						IsLong = FALSE;
    21ea:	d5 2c       	mov	r13, r5
    21ec:	ba c0       	rjmp	.+372    	; 0x2362 <SendTrace+0x25e>

					}
					else if (IsLongLong)
    21ee:	44 20       	and	r4, r4
    21f0:	89 f0       	breq	.+34     	; 0x2214 <SendTrace+0x110>
					{
						SendSignedDecimalValue(va_arg(ArgList, long long));
    21f2:	57 01       	movw	r10, r14
    21f4:	f8 e0       	ldi	r31, 0x08	; 8
    21f6:	af 0e       	add	r10, r31
    21f8:	b1 1c       	adc	r11, r1
    21fa:	f7 01       	movw	r30, r14
    21fc:	20 81       	ld	r18, Z
    21fe:	31 81       	ldd	r19, Z+1	; 0x01
    2200:	42 81       	ldd	r20, Z+2	; 0x02
    2202:	53 81       	ldd	r21, Z+3	; 0x03
    2204:	64 81       	ldd	r22, Z+4	; 0x04
    2206:	75 81       	ldd	r23, Z+5	; 0x05
    2208:	86 81       	ldd	r24, Z+6	; 0x06
    220a:	97 81       	ldd	r25, Z+7	; 0x07
    220c:	93 de       	rcall	.-730    	; 0x1f34 <SendSignedDecimalValue>
    220e:	75 01       	movw	r14, r10

						IsLongLong = FALSE;
    2210:	45 2c       	mov	r4, r5
    2212:	a7 c0       	rjmp	.+334    	; 0x2362 <SendTrace+0x25e>
					}
					else
					{

						SendSignedDecimalValue(va_arg(ArgList, int));
    2214:	57 01       	movw	r10, r14
    2216:	f2 e0       	ldi	r31, 0x02	; 2
    2218:	af 0e       	add	r10, r31
    221a:	b1 1c       	adc	r11, r1
    221c:	f7 01       	movw	r30, r14
    221e:	31 81       	ldd	r19, Z+1	; 0x01
    2220:	20 81       	ld	r18, Z
    2222:	93 2f       	mov	r25, r19
    2224:	99 0f       	add	r25, r25
    2226:	99 0b       	sbc	r25, r25
    2228:	49 2f       	mov	r20, r25
    222a:	59 2f       	mov	r21, r25
    222c:	69 2f       	mov	r22, r25
    222e:	79 2f       	mov	r23, r25
    2230:	89 2f       	mov	r24, r25
    2232:	80 de       	rcall	.-768    	; 0x1f34 <SendSignedDecimalValue>
    2234:	75 01       	movw	r14, r10
    2236:	95 c0       	rjmp	.+298    	; 0x2362 <SendTrace+0x25e>
					break;
				}
				case 'u':
				{

					if(IsLong)
    2238:	dd 20       	and	r13, r13
    223a:	b9 f0       	breq	.+46     	; 0x226a <SendTrace+0x166>
					{

						SendDecimalValue(va_arg(ArgList, unsigned long));
    223c:	37 01       	movw	r6, r14
    223e:	f4 e0       	ldi	r31, 0x04	; 4
    2240:	6f 0e       	add	r6, r31
    2242:	71 1c       	adc	r7, r1
    2244:	f7 01       	movw	r30, r14
    2246:	80 81       	ld	r24, Z
    2248:	91 81       	ldd	r25, Z+1	; 0x01
    224a:	a2 81       	ldd	r26, Z+2	; 0x02
    224c:	b3 81       	ldd	r27, Z+3	; 0x03
    224e:	4c 01       	movw	r8, r24
    2250:	5d 01       	movw	r10, r26
    2252:	28 2f       	mov	r18, r24
    2254:	39 2d       	mov	r19, r9
    2256:	4a 2d       	mov	r20, r10
    2258:	5b 2d       	mov	r21, r11
    225a:	65 2d       	mov	r22, r5
    225c:	75 2d       	mov	r23, r5
    225e:	85 2d       	mov	r24, r5
    2260:	95 2d       	mov	r25, r5
    2262:	07 dd       	rcall	.-1522   	; 0x1c72 <SendDecimalValue>
    2264:	73 01       	movw	r14, r6
						
						IsLong = FALSE;
    2266:	d5 2c       	mov	r13, r5
    2268:	7c c0       	rjmp	.+248    	; 0x2362 <SendTrace+0x25e>
					
					}
					else if(IsLongLong)
    226a:	44 20       	and	r4, r4
    226c:	89 f0       	breq	.+34     	; 0x2290 <SendTrace+0x18c>
					{
						SendDecimalValue(va_arg(ArgList, unsigned long long));
    226e:	57 01       	movw	r10, r14
    2270:	f8 e0       	ldi	r31, 0x08	; 8
    2272:	af 0e       	add	r10, r31
    2274:	b1 1c       	adc	r11, r1
    2276:	f7 01       	movw	r30, r14
    2278:	20 81       	ld	r18, Z
    227a:	31 81       	ldd	r19, Z+1	; 0x01
    227c:	42 81       	ldd	r20, Z+2	; 0x02
    227e:	53 81       	ldd	r21, Z+3	; 0x03
    2280:	64 81       	ldd	r22, Z+4	; 0x04
    2282:	75 81       	ldd	r23, Z+5	; 0x05
    2284:	86 81       	ldd	r24, Z+6	; 0x06
    2286:	97 81       	ldd	r25, Z+7	; 0x07
    2288:	f4 dc       	rcall	.-1560   	; 0x1c72 <SendDecimalValue>
    228a:	75 01       	movw	r14, r10
						
						IsLongLong = FALSE;
    228c:	45 2c       	mov	r4, r5
    228e:	69 c0       	rjmp	.+210    	; 0x2362 <SendTrace+0x25e>
					}
					else
					{

						SendDecimalValue(va_arg(ArgList, unsigned int));
    2290:	f7 01       	movw	r30, r14
    2292:	40 81       	ld	r20, Z
    2294:	51 81       	ldd	r21, Z+1	; 0x01
    2296:	f2 e0       	ldi	r31, 0x02	; 2
    2298:	ef 0e       	add	r14, r31
    229a:	f1 1c       	adc	r15, r1
    229c:	24 2f       	mov	r18, r20
    229e:	35 2f       	mov	r19, r21
    22a0:	45 2d       	mov	r20, r5
    22a2:	55 2d       	mov	r21, r5
    22a4:	65 2d       	mov	r22, r5
    22a6:	75 2d       	mov	r23, r5
    22a8:	85 2d       	mov	r24, r5
    22aa:	95 2d       	mov	r25, r5
    22ac:	e2 dc       	rcall	.-1596   	; 0x1c72 <SendDecimalValue>
    22ae:	59 c0       	rjmp	.+178    	; 0x2362 <SendTrace+0x25e>
					break;
				}
				case 'x':
				{

					if (IsLong)
    22b0:	dd 20       	and	r13, r13
    22b2:	a9 f0       	breq	.+42     	; 0x22de <SendTrace+0x1da>
					{

						SendHexValue(va_arg(ArgList, unsigned long));
    22b4:	f7 01       	movw	r30, r14
    22b6:	80 81       	ld	r24, Z
    22b8:	91 81       	ldd	r25, Z+1	; 0x01
    22ba:	a2 81       	ldd	r26, Z+2	; 0x02
    22bc:	b3 81       	ldd	r27, Z+3	; 0x03
    22be:	24 e0       	ldi	r18, 0x04	; 4
    22c0:	e2 0e       	add	r14, r18
    22c2:	f1 1c       	adc	r15, r1
    22c4:	3c 01       	movw	r6, r24
    22c6:	4d 01       	movw	r8, r26
    22c8:	28 2f       	mov	r18, r24
    22ca:	37 2d       	mov	r19, r7
    22cc:	48 2d       	mov	r20, r8
    22ce:	59 2d       	mov	r21, r9
    22d0:	65 2d       	mov	r22, r5
    22d2:	75 2d       	mov	r23, r5
    22d4:	85 2d       	mov	r24, r5
    22d6:	95 2d       	mov	r25, r5
    22d8:	29 dc       	rcall	.-1966   	; 0x1b2c <SendHexValue>

						IsLong = FALSE;
    22da:	d5 2c       	mov	r13, r5
    22dc:	42 c0       	rjmp	.+132    	; 0x2362 <SendTrace+0x25e>

					}
					else if (IsLongLong)
    22de:	44 20       	and	r4, r4
    22e0:	79 f0       	breq	.+30     	; 0x2300 <SendTrace+0x1fc>
					{
						SendHexValue(va_arg(ArgList, unsigned long long));
    22e2:	f7 01       	movw	r30, r14
    22e4:	20 81       	ld	r18, Z
    22e6:	88 e0       	ldi	r24, 0x08	; 8
    22e8:	e8 0e       	add	r14, r24
    22ea:	f1 1c       	adc	r15, r1
    22ec:	31 81       	ldd	r19, Z+1	; 0x01
    22ee:	42 81       	ldd	r20, Z+2	; 0x02
    22f0:	53 81       	ldd	r21, Z+3	; 0x03
    22f2:	64 81       	ldd	r22, Z+4	; 0x04
    22f4:	75 81       	ldd	r23, Z+5	; 0x05
    22f6:	86 81       	ldd	r24, Z+6	; 0x06
    22f8:	97 81       	ldd	r25, Z+7	; 0x07
    22fa:	18 dc       	rcall	.-2000   	; 0x1b2c <SendHexValue>
						
						IsLongLong = FALSE;
    22fc:	45 2c       	mov	r4, r5
    22fe:	31 c0       	rjmp	.+98     	; 0x2362 <SendTrace+0x25e>
					}
					else
					{

						SendHexValue(va_arg(ArgList, unsigned int));
    2300:	f7 01       	movw	r30, r14
    2302:	40 81       	ld	r20, Z
    2304:	51 81       	ldd	r21, Z+1	; 0x01
    2306:	e2 e0       	ldi	r30, 0x02	; 2
    2308:	ee 0e       	add	r14, r30
    230a:	f1 1c       	adc	r15, r1
    230c:	24 2f       	mov	r18, r20
    230e:	35 2f       	mov	r19, r21
    2310:	45 2d       	mov	r20, r5
    2312:	55 2d       	mov	r21, r5
    2314:	65 2d       	mov	r22, r5
    2316:	75 2d       	mov	r23, r5
    2318:	85 2d       	mov	r24, r5
    231a:	95 2d       	mov	r25, r5
    231c:	07 dc       	rcall	.-2034   	; 0x1b2c <SendHexValue>
    231e:	21 c0       	rjmp	.+66     	; 0x2362 <SendTrace+0x25e>
					break;
				}
				case 'l':
				{

					if (IsLong)
    2320:	dd 20       	and	r13, r13
    2322:	f1 f0       	breq	.+60     	; 0x2360 <SendTrace+0x25c>
					{
						IsLongLong = TRUE;
    2324:	43 2c       	mov	r4, r3
						
						IsLong = FALSE;
    2326:	d5 2c       	mov	r13, r5
    2328:	1c c0       	rjmp	.+56     	; 0x2362 <SendTrace+0x25e>
					break;
				}
				case 's':
				{
					
					SendStringValue(va_arg(ArgList, char *)); 
    232a:	f7 01       	movw	r30, r14
    232c:	80 81       	ld	r24, Z
    232e:	91 81       	ldd	r25, Z+1	; 0x01
    2330:	f2 e0       	ldi	r31, 0x02	; 2
    2332:	ef 0e       	add	r14, r31
    2334:	f1 1c       	adc	r15, r1
    2336:	eb db       	rcall	.-2090   	; 0x1b0e <SendStringValue>

					break;
    2338:	14 c0       	rjmp	.+40     	; 0x2362 <SendTrace+0x25e>
					if(IsLong)
					{
						IsLong = FALSE;
					}
					
					SendDoubleValue(va_arg(ArgList, double));
    233a:	f7 01       	movw	r30, r14
    233c:	60 81       	ld	r22, Z
    233e:	71 81       	ldd	r23, Z+1	; 0x01
    2340:	82 81       	ldd	r24, Z+2	; 0x02
    2342:	93 81       	ldd	r25, Z+3	; 0x03
    2344:	24 e0       	ldi	r18, 0x04	; 4
    2346:	e2 0e       	add	r14, r18
    2348:	f1 1c       	adc	r15, r1
    234a:	4d dd       	rcall	.-1382   	; 0x1de6 <SendDoubleValue>
					
					break;
    234c:	d5 2c       	mov	r13, r5
    234e:	09 c0       	rjmp	.+18     	; 0x2362 <SendTrace+0x25e>

		}
		else
		{

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
    2350:	21 e0       	ldi	r18, 0x01	; 1
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e0       	ldi	r20, 0x00	; 0
    2356:	50 e0       	ldi	r21, 0x00	; 0
    2358:	b8 01       	movw	r22, r16
    235a:	85 2d       	mov	r24, r5
    235c:	01 d4       	rcall	.+2050   	; 0x2b60 <UARTTransmitSync>
    235e:	01 c0       	rjmp	.+2      	; 0x2362 <SendTrace+0x25e>
						
						IsLong = FALSE;
					}
					else
					{
						IsLong = TRUE;
    2360:	d3 2c       	mov	r13, r3

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
				
		}

		String++;
    2362:	c8 01       	movw	r24, r16
    2364:	01 96       	adiw	r24, 0x01	; 1
		return;
	}

	va_start(ArgList, String);

	while (*String != '\0')
    2366:	f8 01       	movw	r30, r16
    2368:	21 81       	ldd	r18, Z+1	; 0x01
    236a:	22 23       	and	r18, r18
    236c:	11 f0       	breq	.+4      	; 0x2372 <SendTrace+0x26e>

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
				
		}

		String++;
    236e:	8c 01       	movw	r16, r24
    2370:	f8 ce       	rjmp	.-528    	; 0x2162 <SendTrace+0x5e>
		
	}
	
	va_end(ArgList);
	
}
    2372:	0f 90       	pop	r0
    2374:	df 91       	pop	r29
    2376:	cf 91       	pop	r28
    2378:	1f 91       	pop	r17
    237a:	0f 91       	pop	r16
    237c:	ff 90       	pop	r15
    237e:	ef 90       	pop	r14
    2380:	df 90       	pop	r13
    2382:	cf 90       	pop	r12
    2384:	bf 90       	pop	r11
    2386:	af 90       	pop	r10
    2388:	9f 90       	pop	r9
    238a:	8f 90       	pop	r8
    238c:	7f 90       	pop	r7
    238e:	6f 90       	pop	r6
    2390:	5f 90       	pop	r5
    2392:	4f 90       	pop	r4
    2394:	3f 90       	pop	r3
    2396:	08 95       	ret

00002398 <InitTWI>:
bool
InitTWI(TWI_MODE Mode, PTWI_ADDRESS Address, PTWI_ADDRESS_MASK AddressMask)
{	
	bool Status = TRUE;
	
	if (Mode == TWI_SLAVE)
    2398:	81 11       	cpse	r24, r1
    239a:	20 c0       	rjmp	.+64     	; 0x23dc <InitTWI+0x44>
	{
		if (Address != NULL && AddressMask != NULL)
    239c:	61 15       	cp	r22, r1
    239e:	71 05       	cpc	r23, r1
    23a0:	89 f0       	breq	.+34     	; 0x23c4 <InitTWI+0x2c>
    23a2:	41 15       	cp	r20, r1
    23a4:	51 05       	cpc	r21, r1
    23a6:	71 f0       	breq	.+28     	; 0x23c4 <InitTWI+0x2c>
		{
			//
			// Set Slave Address and Mask
			//
				
			TWAR = Address->AsUINT8;
    23a8:	fb 01       	movw	r30, r22
    23aa:	80 81       	ld	r24, Z
    23ac:	80 93 ba 00 	sts	0x00BA, r24
				
			TWAMR = AddressMask->AsUINT8;
    23b0:	fa 01       	movw	r30, r20
    23b2:	80 81       	ld	r24, Z
    23b4:	80 93 bd 00 	sts	0x00BD, r24
			
			//
			// Set Data and Clock to IN
			//
			
			DDRC &= ~((0x1 << PORTC0) | (0x1 << PORTC1));
    23b8:	87 b1       	in	r24, 0x07	; 7
    23ba:	8c 7f       	andi	r24, 0xFC	; 252
    23bc:	87 b9       	out	0x07, r24	; 7
			
			gMode = TWI_SLAVE;
    23be:	10 92 ee 0e 	sts	0x0EEE, r1
    23c2:	12 c0       	rjmp	.+36     	; 0x23e8 <InitTWI+0x50>
		}
		else
		{
			SendTrace(ERROR_LEVEL, "InitTWI - Invalid Parameters\r\n");
    23c4:	8c e5       	ldi	r24, 0x5C	; 92
    23c6:	9c e0       	ldi	r25, 0x0C	; 12
    23c8:	9f 93       	push	r25
    23ca:	8f 93       	push	r24
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	8f 93       	push	r24
    23d0:	99 de       	rcall	.-718    	; 0x2104 <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
    23d2:	0f 90       	pop	r0
    23d4:	0f 90       	pop	r0
    23d6:	0f 90       	pop	r0
		}
		else
		{
			SendTrace(ERROR_LEVEL, "InitTWI - Invalid Parameters\r\n");
			
			Status = FALSE;
    23d8:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
    23da:	08 95       	ret
		}
	}
	else
	{
		gMode = TWI_MASTER;
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	80 93 ee 0e 	sts	0x0EEE, r24
		
		//
		// Set Data and Clock to Out
		//
		
		DDRC |= ((0x1 << PORTC0) | (0x1 << PORTC1));
    23e2:	87 b1       	in	r24, 0x07	; 7
    23e4:	83 60       	ori	r24, 0x03	; 3
    23e6:	87 b9       	out	0x07, r24	; 7
	//
	// Set TWI Bit Rate Register to 8 so that
	// SCL is set to 100 KHz.
	//

	TWBR = BIT_RATE_VALUE;
    23e8:	80 e2       	ldi	r24, 0x20	; 32
    23ea:	80 93 b8 00 	sts	0x00B8, r24
	
	//
	// Set Pre-scalar value to 1
	//

	TWSR = 0;
    23ee:	10 92 b9 00 	sts	0x00B9, r1
	
	//
	// Set TWI Control Register
	//
	
	TWCR = (0x1 << TWEN) | (0x1 << TWEA);
    23f2:	84 e4       	ldi	r24, 0x44	; 68
    23f4:	80 93 bc 00 	sts	0x00BC, r24
    23f8:	ff ef       	ldi	r31, 0xFF	; 255
    23fa:	20 e7       	ldi	r18, 0x70	; 112
    23fc:	82 e0       	ldi	r24, 0x02	; 2
    23fe:	f1 50       	subi	r31, 0x01	; 1
    2400:	20 40       	sbci	r18, 0x00	; 0
    2402:	80 40       	sbci	r24, 0x00	; 0
    2404:	e1 f7       	brne	.-8      	; 0x23fe <InitTWI+0x66>
    2406:	00 c0       	rjmp	.+0      	; 0x2408 <InitTWI+0x70>
    2408:	00 00       	nop
	// Wait for 100 ms for bus to settle down
	//
	
	_delay_ms(100);
	
	gIsRepeatedStart = FALSE;
    240a:	10 92 e5 0e 	sts	0x0EE5, r1
	
	gIsTWIInitialized = TRUE;
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	80 93 e6 0e 	sts	0x0EE6, r24

Exit:

	return Status;
}
    2414:	08 95       	ret

00002416 <SendStartCondition>:
	
	//
	// Send Start Condition
	//
	
	ENABLE_START();
    2416:	ec eb       	ldi	r30, 0xBC	; 188
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	8f 75       	andi	r24, 0x5F	; 95
    241e:	80 62       	ori	r24, 0x20	; 32
    2420:	80 83       	st	Z, r24
	
	WAIT_FOR_OP_COMPLETION();
    2422:	80 81       	ld	r24, Z
    2424:	80 68       	ori	r24, 0x80	; 128
    2426:	80 83       	st	Z, r24
    2428:	80 81       	ld	r24, Z
    242a:	88 23       	and	r24, r24
    242c:	ec f7       	brge	.-6      	; 0x2428 <SendStartCondition+0x12>
	
	DISABLE_START();
    242e:	ec eb       	ldi	r30, 0xBC	; 188
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	8f 75       	andi	r24, 0x5F	; 95
    2436:	80 83       	st	Z, r24
	
	if (gIsRepeatedStart)
    2438:	80 91 e5 0e 	lds	r24, 0x0EE5
    243c:	88 23       	and	r24, r24
    243e:	41 f0       	breq	.+16     	; 0x2450 <SendStartCondition+0x3a>
	{
		Status = ProcessTwiStatus(REPEATED_START_TRANSMITTED);
    2440:	90 91 b9 00 	lds	r25, 0x00B9
    2444:	98 7f       	andi	r25, 0xF8	; 248
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	90 31       	cpi	r25, 0x10	; 16
    244a:	49 f0       	breq	.+18     	; 0x245e <SendStartCondition+0x48>
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	08 95       	ret
	}
	else
	{
		Status = ProcessTwiStatus(START_TRANSMITTED);
    2450:	90 91 b9 00 	lds	r25, 0x00B9
    2454:	98 7f       	andi	r25, 0xF8	; 248
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	98 30       	cpi	r25, 0x08	; 8
    245a:	09 f0       	breq	.+2      	; 0x245e <SendStartCondition+0x48>
    245c:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return Status;
}
    245e:	08 95       	ret

00002460 <SendStopCondition>:

void
SendStopCondition()
{	
	ENABLE_STOP();
    2460:	ec eb       	ldi	r30, 0xBC	; 188
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	8f 76       	andi	r24, 0x6F	; 111
    2468:	80 61       	ori	r24, 0x10	; 16
    246a:	80 83       	st	Z, r24
	
	//
	// Send the Stop condition by clearing the TWINT flag
	//
	
	TWCR |= (1 << TWINT);
    246c:	80 81       	ld	r24, Z
    246e:	80 68       	ori	r24, 0x80	; 128
    2470:	80 83       	st	Z, r24
	//
	// TWINT is not set after stop condition.
	// Instead TWSTO bit in TWCR is cleared.
	//
	
	while (!(TWCR & (0x1 << TWSTO)));
    2472:	80 81       	ld	r24, Z
    2474:	84 ff       	sbrs	r24, 4
    2476:	fd cf       	rjmp	.-6      	; 0x2472 <SendStopCondition+0x12>
}
    2478:	08 95       	ret

0000247a <Transmit>:

bool
Transmit(PVOID Buffer, unsigned long Length)
{
    247a:	8f 92       	push	r8
    247c:	9f 92       	push	r9
    247e:	af 92       	push	r10
    2480:	bf 92       	push	r11
    2482:	df 92       	push	r13
    2484:	ef 92       	push	r14
    2486:	ff 92       	push	r15
    2488:	0f 93       	push	r16
    248a:	1f 93       	push	r17
    248c:	cf 93       	push	r28
    248e:	df 93       	push	r29
	
	unsigned char *BytePtr;
	
	TWI_STATUS TransmitStatus;
	
	if (gMode == TWI_MASTER)
    2490:	20 91 ee 0e 	lds	r18, 0x0EEE
    2494:	21 30       	cpi	r18, 0x01	; 1
    2496:	29 f4       	brne	.+10     	; 0x24a2 <Transmit+0x28>
	{
		TransmitStatus = DATA_TRANSMITTED_ACK;
    2498:	0f 2e       	mov	r0, r31
    249a:	f8 e2       	ldi	r31, 0x28	; 40
    249c:	df 2e       	mov	r13, r31
    249e:	f0 2d       	mov	r31, r0
    24a0:	04 c0       	rjmp	.+8      	; 0x24aa <Transmit+0x30>
	}
	else
	{
		TransmitStatus = SLA_R_DATA_TRANSMITTED_ACK;
    24a2:	0f 2e       	mov	r0, r31
    24a4:	f8 eb       	ldi	r31, 0xB8	; 184
    24a6:	df 2e       	mov	r13, r31
    24a8:	f0 2d       	mov	r31, r0
	// Now transmit the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
    24aa:	4a 01       	movw	r8, r20
    24ac:	5b 01       	movw	r10, r22
    24ae:	21 e0       	ldi	r18, 0x01	; 1
    24b0:	82 1a       	sub	r8, r18
    24b2:	91 08       	sbc	r9, r1
    24b4:	a1 08       	sbc	r10, r1
    24b6:	b1 08       	sbc	r11, r1
    24b8:	81 14       	cp	r8, r1
    24ba:	91 04       	cpc	r9, r1
    24bc:	a1 04       	cpc	r10, r1
    24be:	b1 04       	cpc	r11, r1
    24c0:	e1 f1       	breq	.+120    	; 0x253a <Transmit+0xc0>
    24c2:	dc 01       	movw	r26, r24
    24c4:	00 e0       	ldi	r16, 0x00	; 0
    24c6:	10 e0       	ldi	r17, 0x00	; 0
    24c8:	98 01       	movw	r18, r16
	{
		TWDR = *BytePtr;
    24ca:	4b eb       	ldi	r20, 0xBB	; 187
    24cc:	50 e0       	ldi	r21, 0x00	; 0
		
		WAIT_FOR_OP_COMPLETION();
    24ce:	ec eb       	ldi	r30, 0xBC	; 188
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
		
		if (!ProcessTwiStatus(TransmitStatus))
    24d2:	0f 2e       	mov	r0, r31
    24d4:	f9 eb       	ldi	r31, 0xB9	; 185
    24d6:	ef 2e       	mov	r14, r31
    24d8:	f1 2c       	mov	r15, r1
    24da:	f0 2d       	mov	r31, r0
    24dc:	6d 2d       	mov	r22, r13
    24de:	70 e0       	ldi	r23, 0x00	; 0
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
	{
		TWDR = *BytePtr;
    24e0:	8d 91       	ld	r24, X+
    24e2:	ea 01       	movw	r28, r20
    24e4:	88 83       	st	Y, r24
		
		WAIT_FOR_OP_COMPLETION();
    24e6:	80 81       	ld	r24, Z
    24e8:	80 68       	ori	r24, 0x80	; 128
    24ea:	80 83       	st	Z, r24
    24ec:	80 81       	ld	r24, Z
    24ee:	88 23       	and	r24, r24
    24f0:	ec f7       	brge	.-6      	; 0x24ec <Transmit+0x72>
		
		if (!ProcessTwiStatus(TransmitStatus))
    24f2:	e7 01       	movw	r28, r14
    24f4:	88 81       	ld	r24, Y
    24f6:	88 7f       	andi	r24, 0xF8	; 248
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	86 17       	cp	r24, r22
    24fc:	97 07       	cpc	r25, r23
    24fe:	99 f0       	breq	.+38     	; 0x2526 <Transmit+0xac>
		{
			SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
    2500:	80 91 b9 00 	lds	r24, 0x00B9
    2504:	88 7f       	andi	r24, 0xF8	; 248
    2506:	1f 92       	push	r1
    2508:	8f 93       	push	r24
    250a:	8b e7       	ldi	r24, 0x7B	; 123
    250c:	9c e0       	ldi	r25, 0x0C	; 12
    250e:	9f 93       	push	r25
    2510:	8f 93       	push	r24
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	8f 93       	push	r24
    2516:	f6 dd       	rcall	.-1044   	; 0x2104 <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
    2518:	0f 90       	pop	r0
    251a:	0f 90       	pop	r0
    251c:	0f 90       	pop	r0
    251e:	0f 90       	pop	r0
    2520:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(TransmitStatus))
		{
			SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
			
			Status = FALSE;
    2522:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
    2524:	3b c0       	rjmp	.+118    	; 0x259c <Transmit+0x122>
		}
		
		BytePtr++;
    2526:	cd 01       	movw	r24, r26
	// Now transmit the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
    2528:	0f 5f       	subi	r16, 0xFF	; 255
    252a:	1f 4f       	sbci	r17, 0xFF	; 255
    252c:	2f 4f       	sbci	r18, 0xFF	; 255
    252e:	3f 4f       	sbci	r19, 0xFF	; 255
    2530:	08 15       	cp	r16, r8
    2532:	19 05       	cpc	r17, r9
    2534:	2a 05       	cpc	r18, r10
    2536:	3b 05       	cpc	r19, r11
    2538:	98 f2       	brcs	.-90     	; 0x24e0 <Transmit+0x66>
	
	//
	// In slave mode after transmitting the last byte we will get a NACK from the Master
	//
	
	if (gMode == TWI_SLAVE)
    253a:	20 91 ee 0e 	lds	r18, 0x0EEE
    253e:	21 11       	cpse	r18, r1
    2540:	04 c0       	rjmp	.+8      	; 0x254a <Transmit+0xd0>
	{
		TransmitStatus = SLA_R_DATA_TRANSMITTED_NACK;
    2542:	0f 2e       	mov	r0, r31
    2544:	f0 ec       	ldi	r31, 0xC0	; 192
    2546:	df 2e       	mov	r13, r31
    2548:	f0 2d       	mov	r31, r0
	}
	
	TWDR = *BytePtr;
    254a:	fc 01       	movw	r30, r24
    254c:	80 81       	ld	r24, Z
    254e:	80 93 bb 00 	sts	0x00BB, r24
	
	WAIT_FOR_OP_COMPLETION();
    2552:	ec eb       	ldi	r30, 0xBC	; 188
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	80 68       	ori	r24, 0x80	; 128
    255a:	80 83       	st	Z, r24
    255c:	80 81       	ld	r24, Z
    255e:	88 23       	and	r24, r24
    2560:	ec f7       	brge	.-6      	; 0x255c <Transmit+0xe2>
	
	if (!ProcessTwiStatus(TransmitStatus))
    2562:	20 91 b9 00 	lds	r18, 0x00B9
    2566:	28 7f       	andi	r18, 0xF8	; 248
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	8d 2d       	mov	r24, r13
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	28 17       	cp	r18, r24
    2570:	39 07       	cpc	r19, r25
    2572:	99 f0       	breq	.+38     	; 0x259a <Transmit+0x120>
	{
		SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
    2574:	80 91 b9 00 	lds	r24, 0x00B9
    2578:	88 7f       	andi	r24, 0xF8	; 248
    257a:	1f 92       	push	r1
    257c:	8f 93       	push	r24
    257e:	8b e7       	ldi	r24, 0x7B	; 123
    2580:	9c e0       	ldi	r25, 0x0C	; 12
    2582:	9f 93       	push	r25
    2584:	8f 93       	push	r24
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	8f 93       	push	r24
    258a:	bc dd       	rcall	.-1160   	; 0x2104 <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
    258c:	0f 90       	pop	r0
    258e:	0f 90       	pop	r0
    2590:	0f 90       	pop	r0
    2592:	0f 90       	pop	r0
    2594:	0f 90       	pop	r0
	
	if (!ProcessTwiStatus(TransmitStatus))
	{
		SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
    2596:	80 e0       	ldi	r24, 0x00	; 0
		
		goto Exit;
    2598:	01 c0       	rjmp	.+2      	; 0x259c <Transmit+0x122>
}

bool
Transmit(PVOID Buffer, unsigned long Length)
{
	bool Status = TRUE;
    259a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
Exit:

	return Status;	
}
    259c:	df 91       	pop	r29
    259e:	cf 91       	pop	r28
    25a0:	1f 91       	pop	r17
    25a2:	0f 91       	pop	r16
    25a4:	ff 90       	pop	r15
    25a6:	ef 90       	pop	r14
    25a8:	df 90       	pop	r13
    25aa:	bf 90       	pop	r11
    25ac:	af 90       	pop	r10
    25ae:	9f 90       	pop	r9
    25b0:	8f 90       	pop	r8
    25b2:	08 95       	ret

000025b4 <TwiMasterTransmit>:
bool
TwiMasterTransmit(PVOID Buffer, 
				  unsigned long Length, 
				  PTWI_ADDRESS Address,
				  bool SendStop)
{
    25b4:	af 92       	push	r10
    25b6:	bf 92       	push	r11
    25b8:	cf 92       	push	r12
    25ba:	df 92       	push	r13
    25bc:	ef 92       	push	r14
    25be:	ff 92       	push	r15
    25c0:	0f 93       	push	r16
    25c2:	cf 93       	push	r28
    25c4:	df 93       	push	r29
    25c6:	5c 01       	movw	r10, r24
    25c8:	6a 01       	movw	r12, r20
    25ca:	7b 01       	movw	r14, r22
    25cc:	e9 01       	movw	r28, r18
	bool Status = TRUE;
	
	if (!SendStartCondition())
    25ce:	23 df       	rcall	.-442    	; 0x2416 <SendStartCondition>
    25d0:	81 11       	cpse	r24, r1
    25d2:	13 c0       	rjmp	.+38     	; 0x25fa <TwiMasterTransmit+0x46>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
    25d4:	80 91 b9 00 	lds	r24, 0x00B9
    25d8:	88 7f       	andi	r24, 0xF8	; 248
    25da:	1f 92       	push	r1
    25dc:	8f 93       	push	r24
    25de:	81 eb       	ldi	r24, 0xB1	; 177
    25e0:	9c e0       	ldi	r25, 0x0C	; 12
    25e2:	9f 93       	push	r25
    25e4:	8f 93       	push	r24
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	8f 93       	push	r24
    25ea:	8c dd       	rcall	.-1256   	; 0x2104 <SendTrace>
		
		Status = FALSE;
			
		goto Exit;
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
    25f2:	0f 90       	pop	r0
    25f4:	0f 90       	pop	r0
	
	if (!SendStartCondition())
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
    25f6:	c0 e0       	ldi	r28, 0x00	; 0
			
		goto Exit;
    25f8:	33 c0       	rjmp	.+102    	; 0x2660 <TwiMasterTransmit+0xac>
	}
	
	gIsRepeatedStart = FALSE;
    25fa:	10 92 e5 0e 	sts	0x0EE5, r1
	//
	// Set Address->ReadWrite = 0 indicating a write operation.
	// Then transmit SLA+W
	//
	
	Address->RW_EnGenCall = 0;
    25fe:	88 81       	ld	r24, Y
    2600:	8e 7f       	andi	r24, 0xFE	; 254
    2602:	88 83       	st	Y, r24
	
	TWDR = Address->AsUINT8;
    2604:	80 93 bb 00 	sts	0x00BB, r24
		
	WAIT_FOR_OP_COMPLETION();
    2608:	ec eb       	ldi	r30, 0xBC	; 188
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	80 81       	ld	r24, Z
    260e:	80 68       	ori	r24, 0x80	; 128
    2610:	80 83       	st	Z, r24
    2612:	80 81       	ld	r24, Z
    2614:	88 23       	and	r24, r24
    2616:	ec f7       	brge	.-6      	; 0x2612 <TwiMasterTransmit+0x5e>
		
	if (!ProcessTwiStatus(SLA_W_TRANSMITTED_ACK))
    2618:	80 91 b9 00 	lds	r24, 0x00B9
    261c:	88 7f       	andi	r24, 0xF8	; 248
    261e:	88 31       	cpi	r24, 0x18	; 24
    2620:	99 f0       	breq	.+38     	; 0x2648 <TwiMasterTransmit+0x94>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Slave Address and Write Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
    2622:	80 91 b9 00 	lds	r24, 0x00B9
    2626:	88 7f       	andi	r24, 0xF8	; 248
    2628:	1f 92       	push	r1
    262a:	8f 93       	push	r24
    262c:	8b ef       	ldi	r24, 0xFB	; 251
    262e:	9c e0       	ldi	r25, 0x0C	; 12
    2630:	9f 93       	push	r25
    2632:	8f 93       	push	r24
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	8f 93       	push	r24
    2638:	65 dd       	rcall	.-1334   	; 0x2104 <SendTrace>
		
		Status = FALSE;
			
		goto Exit;
    263a:	0f 90       	pop	r0
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
		
	if (!ProcessTwiStatus(SLA_W_TRANSMITTED_ACK))
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Slave Address and Write Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
    2644:	c0 e0       	ldi	r28, 0x00	; 0
			
		goto Exit;
    2646:	0c c0       	rjmp	.+24     	; 0x2660 <TwiMasterTransmit+0xac>
	}
	
	Status = Transmit(Buffer, Length);
    2648:	b7 01       	movw	r22, r14
    264a:	a6 01       	movw	r20, r12
    264c:	c5 01       	movw	r24, r10
    264e:	15 df       	rcall	.-470    	; 0x247a <Transmit>
    2650:	c8 2f       	mov	r28, r24
	
	//
	// Send stop condition
	//
	
	if (SendStop)
    2652:	00 23       	and	r16, r16
    2654:	11 f0       	breq	.+4      	; 0x265a <TwiMasterTransmit+0xa6>
	{
		SendStopCondition();
    2656:	04 df       	rcall	.-504    	; 0x2460 <SendStopCondition>
    2658:	03 c0       	rjmp	.+6      	; 0x2660 <TwiMasterTransmit+0xac>
	}
	else
	{
		gIsRepeatedStart = TRUE;
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	80 93 e5 0e 	sts	0x0EE5, r24
	}
	
Exit:

	return Status;
}
    2660:	8c 2f       	mov	r24, r28
    2662:	df 91       	pop	r29
    2664:	cf 91       	pop	r28
    2666:	0f 91       	pop	r16
    2668:	ff 90       	pop	r15
    266a:	ef 90       	pop	r14
    266c:	df 90       	pop	r13
    266e:	cf 90       	pop	r12
    2670:	bf 90       	pop	r11
    2672:	af 90       	pop	r10
    2674:	08 95       	ret

00002676 <TwiTransmit>:
bool 
TwiTransmit(PVOID Buffer, 
			unsigned long Length,
			PTWI_ADDRESS Address,
			bool SendStop)
{
    2676:	0f 93       	push	r16
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
    2678:	e0 91 e6 0e 	lds	r30, 0x0EE6
    267c:	ee 23       	and	r30, r30
    267e:	09 f4       	brne	.+2      	; 0x2682 <TwiTransmit+0xc>
    2680:	48 c0       	rjmp	.+144    	; 0x2712 <TwiTransmit+0x9c>
    2682:	00 97       	sbiw	r24, 0x00	; 0
    2684:	09 f4       	brne	.+2      	; 0x2688 <TwiTransmit+0x12>
    2686:	47 c0       	rjmp	.+142    	; 0x2716 <TwiTransmit+0xa0>
		Status = FALSE;
		
		goto Exit;
	}
	
	if (gMode == TWI_MASTER)
    2688:	e0 91 ee 0e 	lds	r30, 0x0EEE
    268c:	e1 30       	cpi	r30, 0x01	; 1
    268e:	89 f4       	brne	.+34     	; 0x26b2 <TwiTransmit+0x3c>
	{
		if (Address == NULL)
    2690:	21 15       	cp	r18, r1
    2692:	31 05       	cpc	r19, r1
    2694:	61 f4       	brne	.+24     	; 0x26ae <TwiTransmit+0x38>
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Invalid Parameters\r\n");
    2696:	82 e5       	ldi	r24, 0x52	; 82
    2698:	9d e0       	ldi	r25, 0x0D	; 13
    269a:	9f 93       	push	r25
    269c:	8f 93       	push	r24
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	8f 93       	push	r24
    26a2:	30 dd       	rcall	.-1440   	; 0x2104 <SendTrace>
			
			Status = FALSE;
		
			goto Exit;
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
	{
		if (Address == NULL)
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Invalid Parameters\r\n");
			
			Status = FALSE;
    26aa:	80 e0       	ldi	r24, 0x00	; 0
		
			goto Exit;
    26ac:	35 c0       	rjmp	.+106    	; 0x2718 <TwiTransmit+0xa2>
		}
		else
		{
			Status = TwiMasterTransmit(Buffer, Length, Address, SendStop);	
    26ae:	82 df       	rcall	.-252    	; 0x25b4 <TwiMasterTransmit>
    26b0:	33 c0       	rjmp	.+102    	; 0x2718 <TwiTransmit+0xa2>
		}
	}
	else
	{
		WAIT_FOR_OP_COMPLETION();
    26b2:	ec eb       	ldi	r30, 0xBC	; 188
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	20 81       	ld	r18, Z
    26b8:	20 68       	ori	r18, 0x80	; 128
    26ba:	20 83       	st	Z, r18
    26bc:	20 81       	ld	r18, Z
    26be:	22 23       	and	r18, r18
    26c0:	ec f7       	brge	.-6      	; 0x26bc <TwiTransmit+0x46>
		
		if (ProcessTwiStatus(STOP_REPEATED_START_RECEIVED))
    26c2:	20 91 b9 00 	lds	r18, 0x00B9
    26c6:	28 7f       	andi	r18, 0xF8	; 248
    26c8:	20 3a       	cpi	r18, 0xA0	; 160
    26ca:	41 f4       	brne	.+16     	; 0x26dc <TwiTransmit+0x66>
		{
			WAIT_FOR_OP_COMPLETION();	
    26cc:	ec eb       	ldi	r30, 0xBC	; 188
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	20 81       	ld	r18, Z
    26d2:	20 68       	ori	r18, 0x80	; 128
    26d4:	20 83       	st	Z, r18
    26d6:	20 81       	ld	r18, Z
    26d8:	22 23       	and	r18, r18
    26da:	ec f7       	brge	.-6      	; 0x26d6 <TwiTransmit+0x60>
		}
		
		if (!ProcessTwiStatus(SLA_R_RECEIVED_ACK))
    26dc:	20 91 b9 00 	lds	r18, 0x00B9
    26e0:	28 7f       	andi	r18, 0xF8	; 248
    26e2:	28 3a       	cpi	r18, 0xA8	; 168
    26e4:	91 f0       	breq	.+36     	; 0x270a <TwiTransmit+0x94>
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Slave Read Not Requested by Master - 0x%x\r\n", TWSR);
    26e6:	80 91 b9 00 	lds	r24, 0x00B9
    26ea:	1f 92       	push	r1
    26ec:	8f 93       	push	r24
    26ee:	85 e7       	ldi	r24, 0x75	; 117
    26f0:	9d e0       	ldi	r25, 0x0D	; 13
    26f2:	9f 93       	push	r25
    26f4:	8f 93       	push	r24
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	8f 93       	push	r24
    26fa:	04 dd       	rcall	.-1528   	; 0x2104 <SendTrace>
			
			Status = FALSE;
		
			goto Exit;
    26fc:	0f 90       	pop	r0
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(SLA_R_RECEIVED_ACK))
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Slave Read Not Requested by Master - 0x%x\r\n", TWSR);
			
			Status = FALSE;
    2706:	80 e0       	ldi	r24, 0x00	; 0
		
			goto Exit;
    2708:	07 c0       	rjmp	.+14     	; 0x2718 <TwiTransmit+0xa2>
		}
		else
		{	
			DATA_OUT();
    270a:	39 9a       	sbi	0x07, 1	; 7
		
			Status = Transmit(Buffer, Length);
    270c:	b6 de       	rcall	.-660    	; 0x247a <Transmit>
		
			DATA_IN();
    270e:	39 98       	cbi	0x07, 1	; 7
    2710:	03 c0       	rjmp	.+6      	; 0x2718 <TwiTransmit+0xa2>
{
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
	{
		Status = FALSE;
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	01 c0       	rjmp	.+2      	; 0x2718 <TwiTransmit+0xa2>
    2716:	80 e0       	ldi	r24, 0x00	; 0
	}
	
Exit:

	return Status;
}
    2718:	0f 91       	pop	r16
    271a:	08 95       	ret

0000271c <Receive>:
	return Status;	
}

bool
Receive(PVOID Buffer, unsigned long Length)
{
    271c:	8f 92       	push	r8
    271e:	9f 92       	push	r9
    2720:	af 92       	push	r10
    2722:	bf 92       	push	r11
    2724:	df 92       	push	r13
    2726:	ef 92       	push	r14
    2728:	ff 92       	push	r15
    272a:	0f 93       	push	r16
    272c:	1f 93       	push	r17
    272e:	cf 93       	push	r28
    2730:	df 93       	push	r29
	
	unsigned char *BytePtr;
	
	TWI_STATUS ReceiveStatus;
	
	if (gMode == TWI_MASTER)
    2732:	20 91 ee 0e 	lds	r18, 0x0EEE
    2736:	21 30       	cpi	r18, 0x01	; 1
    2738:	29 f4       	brne	.+10     	; 0x2744 <Receive+0x28>
	{
		ReceiveStatus = DATA_RECEIVED_ACK;
    273a:	0f 2e       	mov	r0, r31
    273c:	f0 e5       	ldi	r31, 0x50	; 80
    273e:	df 2e       	mov	r13, r31
    2740:	f0 2d       	mov	r31, r0
    2742:	03 c0       	rjmp	.+6      	; 0x274a <Receive+0x2e>
	}
	else
	{
		ReceiveStatus = SLA_W_DATA_RECEIVED_ACK;
    2744:	68 94       	set
    2746:	dd 24       	eor	r13, r13
    2748:	d7 f8       	bld	r13, 7
	// Now receive the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
    274a:	4a 01       	movw	r8, r20
    274c:	5b 01       	movw	r10, r22
    274e:	21 e0       	ldi	r18, 0x01	; 1
    2750:	82 1a       	sub	r8, r18
    2752:	91 08       	sbc	r9, r1
    2754:	a1 08       	sbc	r10, r1
    2756:	b1 08       	sbc	r11, r1
    2758:	81 14       	cp	r8, r1
    275a:	91 04       	cpc	r9, r1
    275c:	a1 04       	cpc	r10, r1
    275e:	b1 04       	cpc	r11, r1
    2760:	e1 f1       	breq	.+120    	; 0x27da <Receive+0xbe>
    2762:	dc 01       	movw	r26, r24
    2764:	00 e0       	ldi	r16, 0x00	; 0
    2766:	10 e0       	ldi	r17, 0x00	; 0
    2768:	98 01       	movw	r18, r16
	{
			
		WAIT_FOR_OP_COMPLETION();
    276a:	ec eb       	ldi	r30, 0xBC	; 188
    276c:	f0 e0       	ldi	r31, 0x00	; 0
		
		if (!ProcessTwiStatus(ReceiveStatus))
    276e:	0f 2e       	mov	r0, r31
    2770:	f9 eb       	ldi	r31, 0xB9	; 185
    2772:	ef 2e       	mov	r14, r31
    2774:	f1 2c       	mov	r15, r1
    2776:	f0 2d       	mov	r31, r0
    2778:	6d 2d       	mov	r22, r13
    277a:	70 e0       	ldi	r23, 0x00	; 0
			Status = FALSE;
			
			goto Exit;
		}
		
		*BytePtr = TWDR;
    277c:	4b eb       	ldi	r20, 0xBB	; 187
    277e:	50 e0       	ldi	r21, 0x00	; 0
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
	{
			
		WAIT_FOR_OP_COMPLETION();
    2780:	80 81       	ld	r24, Z
    2782:	80 68       	ori	r24, 0x80	; 128
    2784:	80 83       	st	Z, r24
    2786:	80 81       	ld	r24, Z
    2788:	88 23       	and	r24, r24
    278a:	ec f7       	brge	.-6      	; 0x2786 <Receive+0x6a>
		
		if (!ProcessTwiStatus(ReceiveStatus))
    278c:	e7 01       	movw	r28, r14
    278e:	88 81       	ld	r24, Y
    2790:	88 7f       	andi	r24, 0xF8	; 248
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	86 17       	cp	r24, r22
    2796:	97 07       	cpc	r25, r23
    2798:	99 f0       	breq	.+38     	; 0x27c0 <Receive+0xa4>
		{
			SendTrace(ERROR_LEVEL, "Receive - Data Reception Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
    279a:	80 91 b9 00 	lds	r24, 0x00B9
    279e:	88 7f       	andi	r24, 0xF8	; 248
    27a0:	1f 92       	push	r1
    27a2:	8f 93       	push	r24
    27a4:	8f ea       	ldi	r24, 0xAF	; 175
    27a6:	9d e0       	ldi	r25, 0x0D	; 13
    27a8:	9f 93       	push	r25
    27aa:	8f 93       	push	r24
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	8f 93       	push	r24
    27b0:	a9 dc       	rcall	.-1710   	; 0x2104 <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(ReceiveStatus))
		{
			SendTrace(ERROR_LEVEL, "Receive - Data Reception Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
			
			Status = FALSE;
    27bc:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
    27be:	43 c0       	rjmp	.+134    	; 0x2846 <Receive+0x12a>
		}
		
		*BytePtr = TWDR;
    27c0:	ea 01       	movw	r28, r20
    27c2:	88 81       	ld	r24, Y
    27c4:	8d 93       	st	X+, r24
		
		BytePtr++;
    27c6:	cd 01       	movw	r24, r26
	// Now receive the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
    27c8:	0f 5f       	subi	r16, 0xFF	; 255
    27ca:	1f 4f       	sbci	r17, 0xFF	; 255
    27cc:	2f 4f       	sbci	r18, 0xFF	; 255
    27ce:	3f 4f       	sbci	r19, 0xFF	; 255
    27d0:	08 15       	cp	r16, r8
    27d2:	19 05       	cpc	r17, r9
    27d4:	2a 05       	cpc	r18, r10
    27d6:	3b 05       	cpc	r19, r11
    27d8:	98 f2       	brcs	.-90     	; 0x2780 <Receive+0x64>
	//
	// When receiving the last byte if the receiver is a master then we need to transmit a NACK.
	// If the receiver is a slave we need to transmit a ACK.
	//
	
	if (gMode == TWI_MASTER)
    27da:	20 91 ee 0e 	lds	r18, 0x0EEE
    27de:	21 30       	cpi	r18, 0x01	; 1
    27e0:	49 f4       	brne	.+18     	; 0x27f4 <Receive+0xd8>
	{
		ENABLE_NACK();
    27e2:	ec eb       	ldi	r30, 0xBC	; 188
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	20 81       	ld	r18, Z
    27e8:	2f 73       	andi	r18, 0x3F	; 63
    27ea:	20 83       	st	Z, r18
		
		ReceiveStatus = DATA_RECEIVED_NACK;
    27ec:	0f 2e       	mov	r0, r31
    27ee:	f8 e5       	ldi	r31, 0x58	; 88
    27f0:	df 2e       	mov	r13, r31
    27f2:	f0 2d       	mov	r31, r0
	}
	
	WAIT_FOR_OP_COMPLETION();
    27f4:	ec eb       	ldi	r30, 0xBC	; 188
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	20 81       	ld	r18, Z
    27fa:	20 68       	ori	r18, 0x80	; 128
    27fc:	20 83       	st	Z, r18
    27fe:	20 81       	ld	r18, Z
    2800:	22 23       	and	r18, r18
    2802:	ec f7       	brge	.-6      	; 0x27fe <Receive+0xe2>
	
	if (!ProcessTwiStatus(ReceiveStatus))
    2804:	40 91 b9 00 	lds	r20, 0x00B9
    2808:	48 7f       	andi	r20, 0xF8	; 248
    280a:	50 e0       	ldi	r21, 0x00	; 0
    280c:	2d 2d       	mov	r18, r13
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	42 17       	cp	r20, r18
    2812:	53 07       	cpc	r21, r19
    2814:	99 f0       	breq	.+38     	; 0x283c <Receive+0x120>
	{
		SendTrace(ERROR_LEVEL, "Receive - Data Reception Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
    2816:	80 91 b9 00 	lds	r24, 0x00B9
    281a:	88 7f       	andi	r24, 0xF8	; 248
    281c:	1f 92       	push	r1
    281e:	8f 93       	push	r24
    2820:	8f ea       	ldi	r24, 0xAF	; 175
    2822:	9d e0       	ldi	r25, 0x0D	; 13
    2824:	9f 93       	push	r25
    2826:	8f 93       	push	r24
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	8f 93       	push	r24
    282c:	6b dc       	rcall	.-1834   	; 0x2104 <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
    282e:	0f 90       	pop	r0
    2830:	0f 90       	pop	r0
    2832:	0f 90       	pop	r0
    2834:	0f 90       	pop	r0
    2836:	0f 90       	pop	r0
	
	if (!ProcessTwiStatus(ReceiveStatus))
	{
		SendTrace(ERROR_LEVEL, "Receive - Data Reception Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
    2838:	80 e0       	ldi	r24, 0x00	; 0
		
		goto Exit;
    283a:	05 c0       	rjmp	.+10     	; 0x2846 <Receive+0x12a>
	}
	
	*BytePtr = TWDR;
    283c:	20 91 bb 00 	lds	r18, 0x00BB
    2840:	fc 01       	movw	r30, r24
    2842:	20 83       	st	Z, r18
}

bool
Receive(PVOID Buffer, unsigned long Length)
{
	bool Status = TRUE;
    2844:	81 e0       	ldi	r24, 0x01	; 1
	
	*BytePtr = TWDR;
	
Exit:

	ENABLE_ACK();
    2846:	ec eb       	ldi	r30, 0xBC	; 188
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	90 81       	ld	r25, Z
    284c:	9f 73       	andi	r25, 0x3F	; 63
    284e:	90 64       	ori	r25, 0x40	; 64
    2850:	90 83       	st	Z, r25

	return Status;
}
    2852:	df 91       	pop	r29
    2854:	cf 91       	pop	r28
    2856:	1f 91       	pop	r17
    2858:	0f 91       	pop	r16
    285a:	ff 90       	pop	r15
    285c:	ef 90       	pop	r14
    285e:	df 90       	pop	r13
    2860:	bf 90       	pop	r11
    2862:	af 90       	pop	r10
    2864:	9f 90       	pop	r9
    2866:	8f 90       	pop	r8
    2868:	08 95       	ret

0000286a <TwiMasterReceive>:
bool
TwiMasterReceive(PVOID Buffer, 
				 unsigned long Length, 
				 PTWI_ADDRESS Address,
				 bool SendStop)
{
    286a:	af 92       	push	r10
    286c:	bf 92       	push	r11
    286e:	cf 92       	push	r12
    2870:	df 92       	push	r13
    2872:	ef 92       	push	r14
    2874:	ff 92       	push	r15
    2876:	0f 93       	push	r16
    2878:	cf 93       	push	r28
    287a:	df 93       	push	r29
    287c:	5c 01       	movw	r10, r24
    287e:	6a 01       	movw	r12, r20
    2880:	7b 01       	movw	r14, r22
    2882:	e9 01       	movw	r28, r18
	bool Status = TRUE;
	
	if (!SendStartCondition())
    2884:	c8 dd       	rcall	.-1136   	; 0x2416 <SendStartCondition>
    2886:	81 11       	cpse	r24, r1
    2888:	13 c0       	rjmp	.+38     	; 0x28b0 <TwiMasterReceive+0x46>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterReceive - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
    288a:	80 91 b9 00 	lds	r24, 0x00B9
    288e:	88 7f       	andi	r24, 0xF8	; 248
    2890:	1f 92       	push	r1
    2892:	8f 93       	push	r24
    2894:	81 ee       	ldi	r24, 0xE1	; 225
    2896:	9d e0       	ldi	r25, 0x0D	; 13
    2898:	9f 93       	push	r25
    289a:	8f 93       	push	r24
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	8f 93       	push	r24
    28a0:	31 dc       	rcall	.-1950   	; 0x2104 <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
    28a2:	0f 90       	pop	r0
    28a4:	0f 90       	pop	r0
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
	
	if (!SendStartCondition())
	{
		SendTrace(ERROR_LEVEL, "TwiMasterReceive - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
    28ac:	c0 e0       	ldi	r28, 0x00	; 0
		
		goto Exit;
    28ae:	33 c0       	rjmp	.+102    	; 0x2916 <TwiMasterReceive+0xac>
	}
	
	gIsRepeatedStart = FALSE;
    28b0:	10 92 e5 0e 	sts	0x0EE5, r1
	//
	// Set Address->ReadWrite = 1 indicating a read operation.
	// Then transmit SLA+R
	//
	
	Address->RW_EnGenCall = 1;
    28b4:	88 81       	ld	r24, Y
    28b6:	81 60       	ori	r24, 0x01	; 1
    28b8:	88 83       	st	Y, r24
	
	TWDR = Address->AsUINT8;
    28ba:	80 93 bb 00 	sts	0x00BB, r24
	
	WAIT_FOR_OP_COMPLETION();
    28be:	ec eb       	ldi	r30, 0xBC	; 188
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	80 81       	ld	r24, Z
    28c4:	80 68       	ori	r24, 0x80	; 128
    28c6:	80 83       	st	Z, r24
    28c8:	80 81       	ld	r24, Z
    28ca:	88 23       	and	r24, r24
    28cc:	ec f7       	brge	.-6      	; 0x28c8 <TwiMasterReceive+0x5e>
	
	if (!ProcessTwiStatus(SLA_R_TRANSMITTED_ACK))
    28ce:	80 91 b9 00 	lds	r24, 0x00B9
    28d2:	88 7f       	andi	r24, 0xF8	; 248
    28d4:	80 34       	cpi	r24, 0x40	; 64
    28d6:	99 f0       	breq	.+38     	; 0x28fe <TwiMasterReceive+0x94>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterReceive - Slave Address and Read Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
    28d8:	80 91 b9 00 	lds	r24, 0x00B9
    28dc:	88 7f       	andi	r24, 0xF8	; 248
    28de:	1f 92       	push	r1
    28e0:	8f 93       	push	r24
    28e2:	8a e2       	ldi	r24, 0x2A	; 42
    28e4:	9e e0       	ldi	r25, 0x0E	; 14
    28e6:	9f 93       	push	r25
    28e8:	8f 93       	push	r24
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	8f 93       	push	r24
    28ee:	0a dc       	rcall	.-2028   	; 0x2104 <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
    28f0:	0f 90       	pop	r0
    28f2:	0f 90       	pop	r0
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
    28f8:	0f 90       	pop	r0
	
	if (!ProcessTwiStatus(SLA_R_TRANSMITTED_ACK))
	{
		SendTrace(ERROR_LEVEL, "TwiMasterReceive - Slave Address and Read Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
    28fa:	c0 e0       	ldi	r28, 0x00	; 0
		
		goto Exit;
    28fc:	0c c0       	rjmp	.+24     	; 0x2916 <TwiMasterReceive+0xac>
	}
	
	Status = Receive(Buffer, Length);
    28fe:	b7 01       	movw	r22, r14
    2900:	a6 01       	movw	r20, r12
    2902:	c5 01       	movw	r24, r10
    2904:	0b df       	rcall	.-490    	; 0x271c <Receive>
    2906:	c8 2f       	mov	r28, r24
	
	//
	// Send stop condition
	//
	
	if (SendStop)
    2908:	00 23       	and	r16, r16
    290a:	11 f0       	breq	.+4      	; 0x2910 <TwiMasterReceive+0xa6>
	{
		SendStopCondition();
    290c:	a9 dd       	rcall	.-1198   	; 0x2460 <SendStopCondition>
    290e:	03 c0       	rjmp	.+6      	; 0x2916 <TwiMasterReceive+0xac>
	}
	else
	{
		gIsRepeatedStart = TRUE;
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	80 93 e5 0e 	sts	0x0EE5, r24
	}
	
Exit:

	return Status;
}
    2916:	8c 2f       	mov	r24, r28
    2918:	df 91       	pop	r29
    291a:	cf 91       	pop	r28
    291c:	0f 91       	pop	r16
    291e:	ff 90       	pop	r15
    2920:	ef 90       	pop	r14
    2922:	df 90       	pop	r13
    2924:	cf 90       	pop	r12
    2926:	bf 90       	pop	r11
    2928:	af 90       	pop	r10
    292a:	08 95       	ret

0000292c <TwiReceive>:
bool
TwiReceive(PVOID Buffer,
		   unsigned long Length,
		   PTWI_ADDRESS Address,
		   bool SendStop)
{
    292c:	0f 93       	push	r16
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
    292e:	e0 91 e6 0e 	lds	r30, 0x0EE6
    2932:	ee 23       	and	r30, r30
    2934:	d1 f1       	breq	.+116    	; 0x29aa <TwiReceive+0x7e>
    2936:	00 97       	sbiw	r24, 0x00	; 0
    2938:	d1 f1       	breq	.+116    	; 0x29ae <TwiReceive+0x82>
		Status = FALSE;
		
		goto Exit;
	}
	
	if (gMode == TWI_MASTER)
    293a:	e0 91 ee 0e 	lds	r30, 0x0EEE
    293e:	e1 30       	cpi	r30, 0x01	; 1
    2940:	99 f4       	brne	.+38     	; 0x2968 <TwiReceive+0x3c>
	{
		if (Address == NULL)
    2942:	21 15       	cp	r18, r1
    2944:	31 05       	cpc	r19, r1
    2946:	61 f4       	brne	.+24     	; 0x2960 <TwiReceive+0x34>
		{
			SendTrace(ERROR_LEVEL, "TwiReceive - Invalid Parameters\r\n");
    2948:	8f e7       	ldi	r24, 0x7F	; 127
    294a:	9e e0       	ldi	r25, 0x0E	; 14
    294c:	9f 93       	push	r25
    294e:	8f 93       	push	r24
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	8f 93       	push	r24
    2954:	d7 db       	rcall	.-2130   	; 0x2104 <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
    2956:	0f 90       	pop	r0
    2958:	0f 90       	pop	r0
    295a:	0f 90       	pop	r0
	{
		if (Address == NULL)
		{
			SendTrace(ERROR_LEVEL, "TwiReceive - Invalid Parameters\r\n");
			
			Status = FALSE;
    295c:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
    295e:	28 c0       	rjmp	.+80     	; 0x29b0 <TwiReceive+0x84>
		}
		else
		{
			DATA_IN();
    2960:	39 98       	cbi	0x07, 1	; 7
			
			Status = TwiMasterReceive(Buffer, Length, Address, SendStop);
    2962:	83 df       	rcall	.-250    	; 0x286a <TwiMasterReceive>
			
			DATA_OUT();
    2964:	39 9a       	sbi	0x07, 1	; 7
    2966:	24 c0       	rjmp	.+72     	; 0x29b0 <TwiReceive+0x84>
		}
	}
	else
	{
		WAIT_FOR_OP_COMPLETION();
    2968:	ec eb       	ldi	r30, 0xBC	; 188
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	20 81       	ld	r18, Z
    296e:	20 68       	ori	r18, 0x80	; 128
    2970:	20 83       	st	Z, r18
    2972:	20 81       	ld	r18, Z
    2974:	22 23       	and	r18, r18
    2976:	ec f7       	brge	.-6      	; 0x2972 <TwiReceive+0x46>
		
		if (!ProcessTwiStatus(SLA_W_RECEIVED_ACK))
    2978:	20 91 b9 00 	lds	r18, 0x00B9
    297c:	28 7f       	andi	r18, 0xF8	; 248
    297e:	20 36       	cpi	r18, 0x60	; 96
    2980:	91 f0       	breq	.+36     	; 0x29a6 <TwiReceive+0x7a>
		{
			SendTrace(ERROR_LEVEL, "TwiReceive - Slave Write Not Requested by Master - Status 0x%x\r\n", TWSR);
    2982:	80 91 b9 00 	lds	r24, 0x00B9
    2986:	1f 92       	push	r1
    2988:	8f 93       	push	r24
    298a:	81 ea       	ldi	r24, 0xA1	; 161
    298c:	9e e0       	ldi	r25, 0x0E	; 14
    298e:	9f 93       	push	r25
    2990:	8f 93       	push	r24
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	8f 93       	push	r24
    2996:	b6 db       	rcall	.-2196   	; 0x2104 <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(SLA_W_RECEIVED_ACK))
		{
			SendTrace(ERROR_LEVEL, "TwiReceive - Slave Write Not Requested by Master - Status 0x%x\r\n", TWSR);
			
			Status = FALSE;
    29a2:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
    29a4:	05 c0       	rjmp	.+10     	; 0x29b0 <TwiReceive+0x84>
		}
		else
		{	
			Status = Receive(Buffer, Length);
    29a6:	ba de       	rcall	.-652    	; 0x271c <Receive>
    29a8:	03 c0       	rjmp	.+6      	; 0x29b0 <TwiReceive+0x84>
{
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
	{
		Status = FALSE;
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	01 c0       	rjmp	.+2      	; 0x29b0 <TwiReceive+0x84>
    29ae:	80 e0       	ldi	r24, 0x00	; 0
	}
	
Exit:

	return Status;		   
}
    29b0:	0f 91       	pop	r16
    29b2:	08 95       	ret

000029b4 <InitializeUARTTimer>:

unsigned long
UARTReceiveSync(UART_NUMBER UARTNumber, PVOID ReceiveValue, unsigned long Length)
{
	return UARTReceive(UARTNumber, ReceiveValue, Length, 0);
}
    29b4:	82 e0       	ldi	r24, 0x02	; 2
    29b6:	84 bd       	out	0x24, r24	; 36
    29b8:	15 bc       	out	0x25, r1	; 37
    29ba:	16 bc       	out	0x26, r1	; 38
    29bc:	17 bc       	out	0x27, r1	; 39
    29be:	18 bc       	out	0x28, r1	; 40
    29c0:	80 93 6e 00 	sts	0x006E, r24
    29c4:	08 95       	ret

000029c6 <InitUARTSync>:
    29c6:	cf 93       	push	r28
    29c8:	40 93 fd 0e 	sts	0x0EFD, r20
    29cc:	88 23       	and	r24, r24
    29ce:	19 f0       	breq	.+6      	; 0x29d6 <InitUARTSync+0x10>
    29d0:	81 30       	cpi	r24, 0x01	; 1
    29d2:	c9 f0       	breq	.+50     	; 0x2a06 <InitUARTSync+0x40>
    29d4:	30 c0       	rjmp	.+96     	; 0x2a36 <InitUARTSync+0x70>
    29d6:	70 93 c5 00 	sts	0x00C5, r23
    29da:	60 93 c4 00 	sts	0x00C4, r22
    29de:	88 e9       	ldi	r24, 0x98	; 152
    29e0:	80 93 c1 00 	sts	0x00C1, r24
    29e4:	41 30       	cpi	r20, 0x01	; 1
    29e6:	39 f4       	brne	.+14     	; 0x29f6 <InitUARTSync+0x30>
    29e8:	86 e0       	ldi	r24, 0x06	; 6
    29ea:	80 93 c2 00 	sts	0x00C2, r24
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	80 93 c0 00 	sts	0x00C0, r24
    29f4:	03 c0       	rjmp	.+6      	; 0x29fc <InitUARTSync+0x36>
    29f6:	86 e0       	ldi	r24, 0x06	; 6
    29f8:	80 93 c2 00 	sts	0x00C2, r24
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	80 93 e7 0e 	sts	0x0EE7, r24
    2a02:	c1 e0       	ldi	r28, 0x01	; 1
    2a04:	19 c0       	rjmp	.+50     	; 0x2a38 <InitUARTSync+0x72>
    2a06:	70 93 cd 00 	sts	0x00CD, r23
    2a0a:	60 93 cc 00 	sts	0x00CC, r22
    2a0e:	88 e9       	ldi	r24, 0x98	; 152
    2a10:	80 93 c9 00 	sts	0x00C9, r24
    2a14:	41 30       	cpi	r20, 0x01	; 1
    2a16:	39 f4       	brne	.+14     	; 0x2a26 <InitUARTSync+0x60>
    2a18:	86 e0       	ldi	r24, 0x06	; 6
    2a1a:	80 93 ca 00 	sts	0x00CA, r24
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	80 93 c8 00 	sts	0x00C8, r24
    2a24:	03 c0       	rjmp	.+6      	; 0x2a2c <InitUARTSync+0x66>
    2a26:	86 e0       	ldi	r24, 0x06	; 6
    2a28:	80 93 ca 00 	sts	0x00CA, r24
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	80 93 e8 0e 	sts	0x0EE8, r24
    2a32:	c1 e0       	ldi	r28, 0x01	; 1
    2a34:	01 c0       	rjmp	.+2      	; 0x2a38 <InitUARTSync+0x72>
    2a36:	c0 e0       	ldi	r28, 0x00	; 0
    2a38:	bd df       	rcall	.-134    	; 0x29b4 <InitializeUARTTimer>
    2a3a:	8c 2f       	mov	r24, r28
    2a3c:	cf 91       	pop	r28
    2a3e:	08 95       	ret

00002a40 <UARTTransmit>:
    2a40:	cf 92       	push	r12
    2a42:	df 92       	push	r13
    2a44:	ef 92       	push	r14
    2a46:	ff 92       	push	r15
    2a48:	0f 93       	push	r16
    2a4a:	1f 93       	push	r17
    2a4c:	cf 93       	push	r28
    2a4e:	df 93       	push	r29
    2a50:	6b 01       	movw	r12, r22
    2a52:	88 23       	and	r24, r24
    2a54:	19 f0       	breq	.+6      	; 0x2a5c <UARTTransmit+0x1c>
    2a56:	81 30       	cpi	r24, 0x01	; 1
    2a58:	c1 f1       	breq	.+112    	; 0x2aca <UARTTransmit+0x8a>
    2a5a:	6c c0       	rjmp	.+216    	; 0x2b34 <UARTTransmit+0xf4>
    2a5c:	80 91 e7 0e 	lds	r24, 0x0EE7
    2a60:	88 23       	and	r24, r24
    2a62:	09 f4       	brne	.+2      	; 0x2a66 <UARTTransmit+0x26>
    2a64:	6b c0       	rjmp	.+214    	; 0x2b3c <UARTTransmit+0xfc>
    2a66:	21 15       	cp	r18, r1
    2a68:	31 05       	cpc	r19, r1
    2a6a:	41 05       	cpc	r20, r1
    2a6c:	51 05       	cpc	r21, r1
    2a6e:	09 f4       	brne	.+2      	; 0x2a72 <UARTTransmit+0x32>
    2a70:	6c c0       	rjmp	.+216    	; 0x2b4a <UARTTransmit+0x10a>
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	dc 01       	movw	r26, r24
    2a78:	c0 ec       	ldi	r28, 0xC0	; 192
    2a7a:	d0 e0       	ldi	r29, 0x00	; 0
    2a7c:	0f 2e       	mov	r0, r31
    2a7e:	f1 ec       	ldi	r31, 0xC1	; 193
    2a80:	ef 2e       	mov	r14, r31
    2a82:	f1 2c       	mov	r15, r1
    2a84:	f0 2d       	mov	r31, r0
    2a86:	66 ec       	ldi	r22, 0xC6	; 198
    2a88:	70 e0       	ldi	r23, 0x00	; 0
    2a8a:	18 81       	ld	r17, Y
    2a8c:	15 ff       	sbrs	r17, 5
    2a8e:	fd cf       	rjmp	.-6      	; 0x2a8a <UARTTransmit+0x4a>
    2a90:	10 91 fd 0e 	lds	r17, 0x0EFD
    2a94:	11 23       	and	r17, r17
    2a96:	59 f0       	breq	.+22     	; 0x2aae <UARTTransmit+0x6e>
    2a98:	00 23       	and	r16, r16
    2a9a:	29 f0       	breq	.+10     	; 0x2aa6 <UARTTransmit+0x66>
    2a9c:	f7 01       	movw	r30, r14
    2a9e:	10 81       	ld	r17, Z
    2aa0:	11 60       	ori	r17, 0x01	; 1
    2aa2:	10 83       	st	Z, r17
    2aa4:	04 c0       	rjmp	.+8      	; 0x2aae <UARTTransmit+0x6e>
    2aa6:	f7 01       	movw	r30, r14
    2aa8:	10 81       	ld	r17, Z
    2aaa:	1e 7f       	andi	r17, 0xFE	; 254
    2aac:	10 83       	st	Z, r17
    2aae:	f6 01       	movw	r30, r12
    2ab0:	11 91       	ld	r17, Z+
    2ab2:	6f 01       	movw	r12, r30
    2ab4:	fb 01       	movw	r30, r22
    2ab6:	10 83       	st	Z, r17
    2ab8:	01 96       	adiw	r24, 0x01	; 1
    2aba:	a1 1d       	adc	r26, r1
    2abc:	b1 1d       	adc	r27, r1
    2abe:	82 17       	cp	r24, r18
    2ac0:	93 07       	cpc	r25, r19
    2ac2:	a4 07       	cpc	r26, r20
    2ac4:	b5 07       	cpc	r27, r21
    2ac6:	09 f7       	brne	.-62     	; 0x2a8a <UARTTransmit+0x4a>
    2ac8:	40 c0       	rjmp	.+128    	; 0x2b4a <UARTTransmit+0x10a>
    2aca:	80 91 e8 0e 	lds	r24, 0x0EE8
    2ace:	88 23       	and	r24, r24
    2ad0:	c9 f1       	breq	.+114    	; 0x2b44 <UARTTransmit+0x104>
    2ad2:	21 15       	cp	r18, r1
    2ad4:	31 05       	cpc	r19, r1
    2ad6:	41 05       	cpc	r20, r1
    2ad8:	51 05       	cpc	r21, r1
    2ada:	b9 f1       	breq	.+110    	; 0x2b4a <UARTTransmit+0x10a>
    2adc:	80 e0       	ldi	r24, 0x00	; 0
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	c8 ec       	ldi	r28, 0xC8	; 200
    2ae4:	d0 e0       	ldi	r29, 0x00	; 0
    2ae6:	0f 2e       	mov	r0, r31
    2ae8:	f9 ec       	ldi	r31, 0xC9	; 201
    2aea:	ef 2e       	mov	r14, r31
    2aec:	f1 2c       	mov	r15, r1
    2aee:	f0 2d       	mov	r31, r0
    2af0:	6e ec       	ldi	r22, 0xCE	; 206
    2af2:	70 e0       	ldi	r23, 0x00	; 0
    2af4:	18 81       	ld	r17, Y
    2af6:	15 ff       	sbrs	r17, 5
    2af8:	fd cf       	rjmp	.-6      	; 0x2af4 <UARTTransmit+0xb4>
    2afa:	10 91 fd 0e 	lds	r17, 0x0EFD
    2afe:	11 23       	and	r17, r17
    2b00:	59 f0       	breq	.+22     	; 0x2b18 <UARTTransmit+0xd8>
    2b02:	00 23       	and	r16, r16
    2b04:	29 f0       	breq	.+10     	; 0x2b10 <UARTTransmit+0xd0>
    2b06:	f7 01       	movw	r30, r14
    2b08:	10 81       	ld	r17, Z
    2b0a:	11 60       	ori	r17, 0x01	; 1
    2b0c:	10 83       	st	Z, r17
    2b0e:	04 c0       	rjmp	.+8      	; 0x2b18 <UARTTransmit+0xd8>
    2b10:	f7 01       	movw	r30, r14
    2b12:	10 81       	ld	r17, Z
    2b14:	1e 7f       	andi	r17, 0xFE	; 254
    2b16:	10 83       	st	Z, r17
    2b18:	f6 01       	movw	r30, r12
    2b1a:	11 91       	ld	r17, Z+
    2b1c:	6f 01       	movw	r12, r30
    2b1e:	fb 01       	movw	r30, r22
    2b20:	10 83       	st	Z, r17
    2b22:	01 96       	adiw	r24, 0x01	; 1
    2b24:	a1 1d       	adc	r26, r1
    2b26:	b1 1d       	adc	r27, r1
    2b28:	82 17       	cp	r24, r18
    2b2a:	93 07       	cpc	r25, r19
    2b2c:	a4 07       	cpc	r26, r20
    2b2e:	b5 07       	cpc	r27, r21
    2b30:	09 f7       	brne	.-62     	; 0x2af4 <UARTTransmit+0xb4>
    2b32:	0b c0       	rjmp	.+22     	; 0x2b4a <UARTTransmit+0x10a>
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	a9 01       	movw	r20, r18
    2b3a:	07 c0       	rjmp	.+14     	; 0x2b4a <UARTTransmit+0x10a>
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	a9 01       	movw	r20, r18
    2b42:	03 c0       	rjmp	.+6      	; 0x2b4a <UARTTransmit+0x10a>
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	a9 01       	movw	r20, r18
    2b4a:	ca 01       	movw	r24, r20
    2b4c:	b9 01       	movw	r22, r18
    2b4e:	df 91       	pop	r29
    2b50:	cf 91       	pop	r28
    2b52:	1f 91       	pop	r17
    2b54:	0f 91       	pop	r16
    2b56:	ff 90       	pop	r15
    2b58:	ef 90       	pop	r14
    2b5a:	df 90       	pop	r13
    2b5c:	cf 90       	pop	r12
    2b5e:	08 95       	ret

00002b60 <UARTTransmitSync>:
    2b60:	0f 93       	push	r16
    2b62:	00 e0       	ldi	r16, 0x00	; 0
    2b64:	6d df       	rcall	.-294    	; 0x2a40 <UARTTransmit>
    2b66:	0f 91       	pop	r16
    2b68:	08 95       	ret

00002b6a <__vector_16>:
	return IndexI;

}

ISR(TIMER0_COMPA_vect)
{
    2b6a:	1f 92       	push	r1
    2b6c:	0f 92       	push	r0
    2b6e:	0f b6       	in	r0, 0x3f	; 63
    2b70:	0f 92       	push	r0
    2b72:	11 24       	eor	r1, r1
    2b74:	8f 93       	push	r24
	gUARTTimerTriggered = TRUE;
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	80 93 00 0f 	sts	0x0F00, r24
}
    2b7c:	8f 91       	pop	r24
    2b7e:	0f 90       	pop	r0
    2b80:	0f be       	out	0x3f, r0	; 63
    2b82:	0f 90       	pop	r0
    2b84:	1f 90       	pop	r1
    2b86:	18 95       	reti

00002b88 <__vector_20>:

ISR(USART0_RX_vect)
{
    2b88:	1f 92       	push	r1
    2b8a:	0f 92       	push	r0
    2b8c:	0f b6       	in	r0, 0x3f	; 63
    2b8e:	0f 92       	push	r0
    2b90:	11 24       	eor	r1, r1
    2b92:	0b b6       	in	r0, 0x3b	; 59
    2b94:	0f 92       	push	r0
    2b96:	2f 93       	push	r18
    2b98:	3f 93       	push	r19
    2b9a:	4f 93       	push	r20
    2b9c:	5f 93       	push	r21
    2b9e:	6f 93       	push	r22
    2ba0:	7f 93       	push	r23
    2ba2:	8f 93       	push	r24
    2ba4:	9f 93       	push	r25
    2ba6:	af 93       	push	r26
    2ba8:	bf 93       	push	r27
    2baa:	ef 93       	push	r30
    2bac:	ff 93       	push	r31
	if(gRCICallback0 != NULL)
    2bae:	e0 91 ef 0e 	lds	r30, 0x0EEF
    2bb2:	f0 91 f0 0e 	lds	r31, 0x0EF0
    2bb6:	30 97       	sbiw	r30, 0x00	; 0
    2bb8:	31 f0       	breq	.+12     	; 0x2bc6 <__vector_20+0x3e>
	{
		gRCICallback0(UART_ZERO, gRCICallbackContext0);
    2bba:	60 91 fb 0e 	lds	r22, 0x0EFB
    2bbe:	70 91 fc 0e 	lds	r23, 0x0EFC
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	09 95       	icall
	}
}
    2bc6:	ff 91       	pop	r31
    2bc8:	ef 91       	pop	r30
    2bca:	bf 91       	pop	r27
    2bcc:	af 91       	pop	r26
    2bce:	9f 91       	pop	r25
    2bd0:	8f 91       	pop	r24
    2bd2:	7f 91       	pop	r23
    2bd4:	6f 91       	pop	r22
    2bd6:	5f 91       	pop	r21
    2bd8:	4f 91       	pop	r20
    2bda:	3f 91       	pop	r19
    2bdc:	2f 91       	pop	r18
    2bde:	0f 90       	pop	r0
    2be0:	0b be       	out	0x3b, r0	; 59
    2be2:	0f 90       	pop	r0
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	0f 90       	pop	r0
    2be8:	1f 90       	pop	r1
    2bea:	18 95       	reti

00002bec <__vector_28>:

ISR(USART1_RX_vect)
{
    2bec:	1f 92       	push	r1
    2bee:	0f 92       	push	r0
    2bf0:	0f b6       	in	r0, 0x3f	; 63
    2bf2:	0f 92       	push	r0
    2bf4:	11 24       	eor	r1, r1
    2bf6:	0b b6       	in	r0, 0x3b	; 59
    2bf8:	0f 92       	push	r0
    2bfa:	2f 93       	push	r18
    2bfc:	3f 93       	push	r19
    2bfe:	4f 93       	push	r20
    2c00:	5f 93       	push	r21
    2c02:	6f 93       	push	r22
    2c04:	7f 93       	push	r23
    2c06:	8f 93       	push	r24
    2c08:	9f 93       	push	r25
    2c0a:	af 93       	push	r26
    2c0c:	bf 93       	push	r27
    2c0e:	ef 93       	push	r30
    2c10:	ff 93       	push	r31
	if(gRCICallback1 != NULL)
    2c12:	e0 91 f5 0e 	lds	r30, 0x0EF5
    2c16:	f0 91 f6 0e 	lds	r31, 0x0EF6
    2c1a:	30 97       	sbiw	r30, 0x00	; 0
    2c1c:	31 f0       	breq	.+12     	; 0x2c2a <__vector_28+0x3e>
	{
		gRCICallback1(UART_ONE, gRCICallbackContext1);
    2c1e:	60 91 f3 0e 	lds	r22, 0x0EF3
    2c22:	70 91 f4 0e 	lds	r23, 0x0EF4
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	09 95       	icall
	}
}
    2c2a:	ff 91       	pop	r31
    2c2c:	ef 91       	pop	r30
    2c2e:	bf 91       	pop	r27
    2c30:	af 91       	pop	r26
    2c32:	9f 91       	pop	r25
    2c34:	8f 91       	pop	r24
    2c36:	7f 91       	pop	r23
    2c38:	6f 91       	pop	r22
    2c3a:	5f 91       	pop	r21
    2c3c:	4f 91       	pop	r20
    2c3e:	3f 91       	pop	r19
    2c40:	2f 91       	pop	r18
    2c42:	0f 90       	pop	r0
    2c44:	0b be       	out	0x3b, r0	; 59
    2c46:	0f 90       	pop	r0
    2c48:	0f be       	out	0x3f, r0	; 63
    2c4a:	0f 90       	pop	r0
    2c4c:	1f 90       	pop	r1
    2c4e:	18 95       	reti

00002c50 <__vector_22>:

ISR(USART0_TX_vect)
{
    2c50:	1f 92       	push	r1
    2c52:	0f 92       	push	r0
    2c54:	0f b6       	in	r0, 0x3f	; 63
    2c56:	0f 92       	push	r0
    2c58:	11 24       	eor	r1, r1
    2c5a:	0b b6       	in	r0, 0x3b	; 59
    2c5c:	0f 92       	push	r0
    2c5e:	2f 93       	push	r18
    2c60:	3f 93       	push	r19
    2c62:	4f 93       	push	r20
    2c64:	5f 93       	push	r21
    2c66:	6f 93       	push	r22
    2c68:	7f 93       	push	r23
    2c6a:	8f 93       	push	r24
    2c6c:	9f 93       	push	r25
    2c6e:	af 93       	push	r26
    2c70:	bf 93       	push	r27
    2c72:	ef 93       	push	r30
    2c74:	ff 93       	push	r31
	if(gTCICallback0 != NULL)
    2c76:	e0 91 f1 0e 	lds	r30, 0x0EF1
    2c7a:	f0 91 f2 0e 	lds	r31, 0x0EF2
    2c7e:	30 97       	sbiw	r30, 0x00	; 0
    2c80:	31 f0       	breq	.+12     	; 0x2c8e <__vector_22+0x3e>
	{
		gTCICallback0(UART_ZERO, gTCICallbackContext0);
    2c82:	60 91 f9 0e 	lds	r22, 0x0EF9
    2c86:	70 91 fa 0e 	lds	r23, 0x0EFA
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	09 95       	icall
	}
}
    2c8e:	ff 91       	pop	r31
    2c90:	ef 91       	pop	r30
    2c92:	bf 91       	pop	r27
    2c94:	af 91       	pop	r26
    2c96:	9f 91       	pop	r25
    2c98:	8f 91       	pop	r24
    2c9a:	7f 91       	pop	r23
    2c9c:	6f 91       	pop	r22
    2c9e:	5f 91       	pop	r21
    2ca0:	4f 91       	pop	r20
    2ca2:	3f 91       	pop	r19
    2ca4:	2f 91       	pop	r18
    2ca6:	0f 90       	pop	r0
    2ca8:	0b be       	out	0x3b, r0	; 59
    2caa:	0f 90       	pop	r0
    2cac:	0f be       	out	0x3f, r0	; 63
    2cae:	0f 90       	pop	r0
    2cb0:	1f 90       	pop	r1
    2cb2:	18 95       	reti

00002cb4 <__vector_30>:

ISR(USART1_TX_vect)
{
    2cb4:	1f 92       	push	r1
    2cb6:	0f 92       	push	r0
    2cb8:	0f b6       	in	r0, 0x3f	; 63
    2cba:	0f 92       	push	r0
    2cbc:	11 24       	eor	r1, r1
    2cbe:	0b b6       	in	r0, 0x3b	; 59
    2cc0:	0f 92       	push	r0
    2cc2:	2f 93       	push	r18
    2cc4:	3f 93       	push	r19
    2cc6:	4f 93       	push	r20
    2cc8:	5f 93       	push	r21
    2cca:	6f 93       	push	r22
    2ccc:	7f 93       	push	r23
    2cce:	8f 93       	push	r24
    2cd0:	9f 93       	push	r25
    2cd2:	af 93       	push	r26
    2cd4:	bf 93       	push	r27
    2cd6:	ef 93       	push	r30
    2cd8:	ff 93       	push	r31
	if(gTCICallback1 != NULL)
    2cda:	e0 91 f7 0e 	lds	r30, 0x0EF7
    2cde:	f0 91 f8 0e 	lds	r31, 0x0EF8
    2ce2:	30 97       	sbiw	r30, 0x00	; 0
    2ce4:	31 f0       	breq	.+12     	; 0x2cf2 <__vector_30+0x3e>
	{
		gTCICallback1(UART_ONE, gTCICallbackContext1);
    2ce6:	60 91 fe 0e 	lds	r22, 0x0EFE
    2cea:	70 91 ff 0e 	lds	r23, 0x0EFF
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	09 95       	icall
	}
    2cf2:	ff 91       	pop	r31
    2cf4:	ef 91       	pop	r30
    2cf6:	bf 91       	pop	r27
    2cf8:	af 91       	pop	r26
    2cfa:	9f 91       	pop	r25
    2cfc:	8f 91       	pop	r24
    2cfe:	7f 91       	pop	r23
    2d00:	6f 91       	pop	r22
    2d02:	5f 91       	pop	r21
    2d04:	4f 91       	pop	r20
    2d06:	3f 91       	pop	r19
    2d08:	2f 91       	pop	r18
    2d0a:	0f 90       	pop	r0
    2d0c:	0b be       	out	0x3b, r0	; 59
    2d0e:	0f 90       	pop	r0
    2d10:	0f be       	out	0x3f, r0	; 63
    2d12:	0f 90       	pop	r0
    2d14:	1f 90       	pop	r1
    2d16:	18 95       	reti

00002d18 <__subsf3>:
    2d18:	50 58       	subi	r21, 0x80	; 128

00002d1a <__addsf3>:
    2d1a:	bb 27       	eor	r27, r27
    2d1c:	aa 27       	eor	r26, r26
    2d1e:	0e d0       	rcall	.+28     	; 0x2d3c <__addsf3x>
    2d20:	ac c2       	rjmp	.+1368   	; 0x327a <__fp_round>
    2d22:	75 d2       	rcall	.+1258   	; 0x320e <__fp_pscA>
    2d24:	30 f0       	brcs	.+12     	; 0x2d32 <__addsf3+0x18>
    2d26:	7a d2       	rcall	.+1268   	; 0x321c <__fp_pscB>
    2d28:	20 f0       	brcs	.+8      	; 0x2d32 <__addsf3+0x18>
    2d2a:	31 f4       	brne	.+12     	; 0x2d38 <__addsf3+0x1e>
    2d2c:	9f 3f       	cpi	r25, 0xFF	; 255
    2d2e:	11 f4       	brne	.+4      	; 0x2d34 <__addsf3+0x1a>
    2d30:	1e f4       	brtc	.+6      	; 0x2d38 <__addsf3+0x1e>
    2d32:	35 c2       	rjmp	.+1130   	; 0x319e <__fp_nan>
    2d34:	0e f4       	brtc	.+2      	; 0x2d38 <__addsf3+0x1e>
    2d36:	e0 95       	com	r30
    2d38:	e7 fb       	bst	r30, 7
    2d3a:	2b c2       	rjmp	.+1110   	; 0x3192 <__fp_inf>

00002d3c <__addsf3x>:
    2d3c:	e9 2f       	mov	r30, r25
    2d3e:	bf d2       	rcall	.+1406   	; 0x32be <__fp_split3>
    2d40:	80 f3       	brcs	.-32     	; 0x2d22 <__addsf3+0x8>
    2d42:	ba 17       	cp	r27, r26
    2d44:	62 07       	cpc	r22, r18
    2d46:	73 07       	cpc	r23, r19
    2d48:	84 07       	cpc	r24, r20
    2d4a:	95 07       	cpc	r25, r21
    2d4c:	18 f0       	brcs	.+6      	; 0x2d54 <__addsf3x+0x18>
    2d4e:	71 f4       	brne	.+28     	; 0x2d6c <__addsf3x+0x30>
    2d50:	9e f5       	brtc	.+102    	; 0x2db8 <__addsf3x+0x7c>
    2d52:	d7 c2       	rjmp	.+1454   	; 0x3302 <__fp_zero>
    2d54:	0e f4       	brtc	.+2      	; 0x2d58 <__addsf3x+0x1c>
    2d56:	e0 95       	com	r30
    2d58:	0b 2e       	mov	r0, r27
    2d5a:	ba 2f       	mov	r27, r26
    2d5c:	a0 2d       	mov	r26, r0
    2d5e:	0b 01       	movw	r0, r22
    2d60:	b9 01       	movw	r22, r18
    2d62:	90 01       	movw	r18, r0
    2d64:	0c 01       	movw	r0, r24
    2d66:	ca 01       	movw	r24, r20
    2d68:	a0 01       	movw	r20, r0
    2d6a:	11 24       	eor	r1, r1
    2d6c:	ff 27       	eor	r31, r31
    2d6e:	59 1b       	sub	r21, r25
    2d70:	99 f0       	breq	.+38     	; 0x2d98 <__addsf3x+0x5c>
    2d72:	59 3f       	cpi	r21, 0xF9	; 249
    2d74:	50 f4       	brcc	.+20     	; 0x2d8a <__addsf3x+0x4e>
    2d76:	50 3e       	cpi	r21, 0xE0	; 224
    2d78:	68 f1       	brcs	.+90     	; 0x2dd4 <__addsf3x+0x98>
    2d7a:	1a 16       	cp	r1, r26
    2d7c:	f0 40       	sbci	r31, 0x00	; 0
    2d7e:	a2 2f       	mov	r26, r18
    2d80:	23 2f       	mov	r18, r19
    2d82:	34 2f       	mov	r19, r20
    2d84:	44 27       	eor	r20, r20
    2d86:	58 5f       	subi	r21, 0xF8	; 248
    2d88:	f3 cf       	rjmp	.-26     	; 0x2d70 <__addsf3x+0x34>
    2d8a:	46 95       	lsr	r20
    2d8c:	37 95       	ror	r19
    2d8e:	27 95       	ror	r18
    2d90:	a7 95       	ror	r26
    2d92:	f0 40       	sbci	r31, 0x00	; 0
    2d94:	53 95       	inc	r21
    2d96:	c9 f7       	brne	.-14     	; 0x2d8a <__addsf3x+0x4e>
    2d98:	7e f4       	brtc	.+30     	; 0x2db8 <__addsf3x+0x7c>
    2d9a:	1f 16       	cp	r1, r31
    2d9c:	ba 0b       	sbc	r27, r26
    2d9e:	62 0b       	sbc	r22, r18
    2da0:	73 0b       	sbc	r23, r19
    2da2:	84 0b       	sbc	r24, r20
    2da4:	ba f0       	brmi	.+46     	; 0x2dd4 <__addsf3x+0x98>
    2da6:	91 50       	subi	r25, 0x01	; 1
    2da8:	a1 f0       	breq	.+40     	; 0x2dd2 <__addsf3x+0x96>
    2daa:	ff 0f       	add	r31, r31
    2dac:	bb 1f       	adc	r27, r27
    2dae:	66 1f       	adc	r22, r22
    2db0:	77 1f       	adc	r23, r23
    2db2:	88 1f       	adc	r24, r24
    2db4:	c2 f7       	brpl	.-16     	; 0x2da6 <__addsf3x+0x6a>
    2db6:	0e c0       	rjmp	.+28     	; 0x2dd4 <__addsf3x+0x98>
    2db8:	ba 0f       	add	r27, r26
    2dba:	62 1f       	adc	r22, r18
    2dbc:	73 1f       	adc	r23, r19
    2dbe:	84 1f       	adc	r24, r20
    2dc0:	48 f4       	brcc	.+18     	; 0x2dd4 <__addsf3x+0x98>
    2dc2:	87 95       	ror	r24
    2dc4:	77 95       	ror	r23
    2dc6:	67 95       	ror	r22
    2dc8:	b7 95       	ror	r27
    2dca:	f7 95       	ror	r31
    2dcc:	9e 3f       	cpi	r25, 0xFE	; 254
    2dce:	08 f0       	brcs	.+2      	; 0x2dd2 <__addsf3x+0x96>
    2dd0:	b3 cf       	rjmp	.-154    	; 0x2d38 <__addsf3+0x1e>
    2dd2:	93 95       	inc	r25
    2dd4:	88 0f       	add	r24, r24
    2dd6:	08 f0       	brcs	.+2      	; 0x2dda <__addsf3x+0x9e>
    2dd8:	99 27       	eor	r25, r25
    2dda:	ee 0f       	add	r30, r30
    2ddc:	97 95       	ror	r25
    2dde:	87 95       	ror	r24
    2de0:	08 95       	ret
    2de2:	15 d2       	rcall	.+1066   	; 0x320e <__fp_pscA>
    2de4:	58 f0       	brcs	.+22     	; 0x2dfc <__addsf3x+0xc0>
    2de6:	80 e8       	ldi	r24, 0x80	; 128
    2de8:	91 e0       	ldi	r25, 0x01	; 1
    2dea:	09 f4       	brne	.+2      	; 0x2dee <__addsf3x+0xb2>
    2dec:	9e ef       	ldi	r25, 0xFE	; 254
    2dee:	16 d2       	rcall	.+1068   	; 0x321c <__fp_pscB>
    2df0:	28 f0       	brcs	.+10     	; 0x2dfc <__addsf3x+0xc0>
    2df2:	40 e8       	ldi	r20, 0x80	; 128
    2df4:	51 e0       	ldi	r21, 0x01	; 1
    2df6:	59 f4       	brne	.+22     	; 0x2e0e <atan2+0xe>
    2df8:	5e ef       	ldi	r21, 0xFE	; 254
    2dfa:	09 c0       	rjmp	.+18     	; 0x2e0e <atan2+0xe>
    2dfc:	d0 c1       	rjmp	.+928    	; 0x319e <__fp_nan>
    2dfe:	81 c2       	rjmp	.+1282   	; 0x3302 <__fp_zero>

00002e00 <atan2>:
    2e00:	e9 2f       	mov	r30, r25
    2e02:	e0 78       	andi	r30, 0x80	; 128
    2e04:	5c d2       	rcall	.+1208   	; 0x32be <__fp_split3>
    2e06:	68 f3       	brcs	.-38     	; 0x2de2 <__addsf3x+0xa6>
    2e08:	09 2e       	mov	r0, r25
    2e0a:	05 2a       	or	r0, r21
    2e0c:	c1 f3       	breq	.-16     	; 0x2dfe <__addsf3x+0xc2>
    2e0e:	26 17       	cp	r18, r22
    2e10:	37 07       	cpc	r19, r23
    2e12:	48 07       	cpc	r20, r24
    2e14:	59 07       	cpc	r21, r25
    2e16:	38 f0       	brcs	.+14     	; 0x2e26 <atan2+0x26>
    2e18:	0e 2e       	mov	r0, r30
    2e1a:	07 f8       	bld	r0, 7
    2e1c:	e0 25       	eor	r30, r0
    2e1e:	69 f0       	breq	.+26     	; 0x2e3a <atan2+0x3a>
    2e20:	e0 25       	eor	r30, r0
    2e22:	e0 64       	ori	r30, 0x40	; 64
    2e24:	0a c0       	rjmp	.+20     	; 0x2e3a <atan2+0x3a>
    2e26:	ef 63       	ori	r30, 0x3F	; 63
    2e28:	07 f8       	bld	r0, 7
    2e2a:	00 94       	com	r0
    2e2c:	07 fa       	bst	r0, 7
    2e2e:	db 01       	movw	r26, r22
    2e30:	b9 01       	movw	r22, r18
    2e32:	9d 01       	movw	r18, r26
    2e34:	dc 01       	movw	r26, r24
    2e36:	ca 01       	movw	r24, r20
    2e38:	ad 01       	movw	r20, r26
    2e3a:	ef 93       	push	r30
    2e3c:	48 d0       	rcall	.+144    	; 0x2ece <__divsf3_pse>
    2e3e:	1d d2       	rcall	.+1082   	; 0x327a <__fp_round>
    2e40:	0a d0       	rcall	.+20     	; 0x2e56 <atan>
    2e42:	5f 91       	pop	r21
    2e44:	55 23       	and	r21, r21
    2e46:	31 f0       	breq	.+12     	; 0x2e54 <atan2+0x54>
    2e48:	2b ed       	ldi	r18, 0xDB	; 219
    2e4a:	3f e0       	ldi	r19, 0x0F	; 15
    2e4c:	49 e4       	ldi	r20, 0x49	; 73
    2e4e:	50 fd       	sbrc	r21, 0
    2e50:	49 ec       	ldi	r20, 0xC9	; 201
    2e52:	63 cf       	rjmp	.-314    	; 0x2d1a <__addsf3>
    2e54:	08 95       	ret

00002e56 <atan>:
    2e56:	df 93       	push	r29
    2e58:	dd 27       	eor	r29, r29
    2e5a:	b9 2f       	mov	r27, r25
    2e5c:	bf 77       	andi	r27, 0x7F	; 127
    2e5e:	40 e8       	ldi	r20, 0x80	; 128
    2e60:	5f e3       	ldi	r21, 0x3F	; 63
    2e62:	16 16       	cp	r1, r22
    2e64:	17 06       	cpc	r1, r23
    2e66:	48 07       	cpc	r20, r24
    2e68:	5b 07       	cpc	r21, r27
    2e6a:	10 f4       	brcc	.+4      	; 0x2e70 <atan+0x1a>
    2e6c:	d9 2f       	mov	r29, r25
    2e6e:	54 d2       	rcall	.+1192   	; 0x3318 <inverse>
    2e70:	9f 93       	push	r25
    2e72:	8f 93       	push	r24
    2e74:	7f 93       	push	r23
    2e76:	6f 93       	push	r22
    2e78:	01 d3       	rcall	.+1538   	; 0x347c <square>
    2e7a:	e8 eb       	ldi	r30, 0xB8	; 184
    2e7c:	f0 e0       	ldi	r31, 0x00	; 0
    2e7e:	a2 d1       	rcall	.+836    	; 0x31c4 <__fp_powser>
    2e80:	fc d1       	rcall	.+1016   	; 0x327a <__fp_round>
    2e82:	2f 91       	pop	r18
    2e84:	3f 91       	pop	r19
    2e86:	4f 91       	pop	r20
    2e88:	5f 91       	pop	r21
    2e8a:	59 d2       	rcall	.+1202   	; 0x333e <__mulsf3x>
    2e8c:	dd 23       	and	r29, r29
    2e8e:	49 f0       	breq	.+18     	; 0x2ea2 <atan+0x4c>
    2e90:	90 58       	subi	r25, 0x80	; 128
    2e92:	a2 ea       	ldi	r26, 0xA2	; 162
    2e94:	2a ed       	ldi	r18, 0xDA	; 218
    2e96:	3f e0       	ldi	r19, 0x0F	; 15
    2e98:	49 ec       	ldi	r20, 0xC9	; 201
    2e9a:	5f e3       	ldi	r21, 0x3F	; 63
    2e9c:	d0 78       	andi	r29, 0x80	; 128
    2e9e:	5d 27       	eor	r21, r29
    2ea0:	4d df       	rcall	.-358    	; 0x2d3c <__addsf3x>
    2ea2:	df 91       	pop	r29
    2ea4:	ea c1       	rjmp	.+980    	; 0x327a <__fp_round>

00002ea6 <__cmpsf2>:
    2ea6:	51 d1       	rcall	.+674    	; 0x314a <__fp_cmp>
    2ea8:	08 f4       	brcc	.+2      	; 0x2eac <__cmpsf2+0x6>
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	08 95       	ret

00002eae <cos>:
    2eae:	be d1       	rcall	.+892    	; 0x322c <__fp_rempio2>
    2eb0:	e3 95       	inc	r30
    2eb2:	f4 c1       	rjmp	.+1000   	; 0x329c <__fp_sinus>
    2eb4:	b3 d1       	rcall	.+870    	; 0x321c <__fp_pscB>
    2eb6:	40 f0       	brcs	.+16     	; 0x2ec8 <cos+0x1a>
    2eb8:	aa d1       	rcall	.+852    	; 0x320e <__fp_pscA>
    2eba:	30 f0       	brcs	.+12     	; 0x2ec8 <cos+0x1a>
    2ebc:	21 f4       	brne	.+8      	; 0x2ec6 <cos+0x18>
    2ebe:	5f 3f       	cpi	r21, 0xFF	; 255
    2ec0:	19 f0       	breq	.+6      	; 0x2ec8 <cos+0x1a>
    2ec2:	67 c1       	rjmp	.+718    	; 0x3192 <__fp_inf>
    2ec4:	51 11       	cpse	r21, r1
    2ec6:	1e c2       	rjmp	.+1084   	; 0x3304 <__fp_szero>
    2ec8:	6a c1       	rjmp	.+724    	; 0x319e <__fp_nan>

00002eca <__divsf3x>:
    2eca:	f9 d1       	rcall	.+1010   	; 0x32be <__fp_split3>
    2ecc:	98 f3       	brcs	.-26     	; 0x2eb4 <cos+0x6>

00002ece <__divsf3_pse>:
    2ece:	99 23       	and	r25, r25
    2ed0:	c9 f3       	breq	.-14     	; 0x2ec4 <cos+0x16>
    2ed2:	55 23       	and	r21, r21
    2ed4:	b1 f3       	breq	.-20     	; 0x2ec2 <cos+0x14>
    2ed6:	95 1b       	sub	r25, r21
    2ed8:	55 0b       	sbc	r21, r21
    2eda:	bb 27       	eor	r27, r27
    2edc:	aa 27       	eor	r26, r26
    2ede:	62 17       	cp	r22, r18
    2ee0:	73 07       	cpc	r23, r19
    2ee2:	84 07       	cpc	r24, r20
    2ee4:	38 f0       	brcs	.+14     	; 0x2ef4 <__divsf3_pse+0x26>
    2ee6:	9f 5f       	subi	r25, 0xFF	; 255
    2ee8:	5f 4f       	sbci	r21, 0xFF	; 255
    2eea:	22 0f       	add	r18, r18
    2eec:	33 1f       	adc	r19, r19
    2eee:	44 1f       	adc	r20, r20
    2ef0:	aa 1f       	adc	r26, r26
    2ef2:	a9 f3       	breq	.-22     	; 0x2ede <__divsf3_pse+0x10>
    2ef4:	33 d0       	rcall	.+102    	; 0x2f5c <__divsf3_pse+0x8e>
    2ef6:	0e 2e       	mov	r0, r30
    2ef8:	3a f0       	brmi	.+14     	; 0x2f08 <__divsf3_pse+0x3a>
    2efa:	e0 e8       	ldi	r30, 0x80	; 128
    2efc:	30 d0       	rcall	.+96     	; 0x2f5e <__divsf3_pse+0x90>
    2efe:	91 50       	subi	r25, 0x01	; 1
    2f00:	50 40       	sbci	r21, 0x00	; 0
    2f02:	e6 95       	lsr	r30
    2f04:	00 1c       	adc	r0, r0
    2f06:	ca f7       	brpl	.-14     	; 0x2efa <__divsf3_pse+0x2c>
    2f08:	29 d0       	rcall	.+82     	; 0x2f5c <__divsf3_pse+0x8e>
    2f0a:	fe 2f       	mov	r31, r30
    2f0c:	27 d0       	rcall	.+78     	; 0x2f5c <__divsf3_pse+0x8e>
    2f0e:	66 0f       	add	r22, r22
    2f10:	77 1f       	adc	r23, r23
    2f12:	88 1f       	adc	r24, r24
    2f14:	bb 1f       	adc	r27, r27
    2f16:	26 17       	cp	r18, r22
    2f18:	37 07       	cpc	r19, r23
    2f1a:	48 07       	cpc	r20, r24
    2f1c:	ab 07       	cpc	r26, r27
    2f1e:	b0 e8       	ldi	r27, 0x80	; 128
    2f20:	09 f0       	breq	.+2      	; 0x2f24 <__divsf3_pse+0x56>
    2f22:	bb 0b       	sbc	r27, r27
    2f24:	80 2d       	mov	r24, r0
    2f26:	bf 01       	movw	r22, r30
    2f28:	ff 27       	eor	r31, r31
    2f2a:	93 58       	subi	r25, 0x83	; 131
    2f2c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f2e:	2a f0       	brmi	.+10     	; 0x2f3a <__divsf3_pse+0x6c>
    2f30:	9e 3f       	cpi	r25, 0xFE	; 254
    2f32:	51 05       	cpc	r21, r1
    2f34:	68 f0       	brcs	.+26     	; 0x2f50 <__divsf3_pse+0x82>
    2f36:	2d c1       	rjmp	.+602    	; 0x3192 <__fp_inf>
    2f38:	e5 c1       	rjmp	.+970    	; 0x3304 <__fp_szero>
    2f3a:	5f 3f       	cpi	r21, 0xFF	; 255
    2f3c:	ec f3       	brlt	.-6      	; 0x2f38 <__divsf3_pse+0x6a>
    2f3e:	98 3e       	cpi	r25, 0xE8	; 232
    2f40:	dc f3       	brlt	.-10     	; 0x2f38 <__divsf3_pse+0x6a>
    2f42:	86 95       	lsr	r24
    2f44:	77 95       	ror	r23
    2f46:	67 95       	ror	r22
    2f48:	b7 95       	ror	r27
    2f4a:	f7 95       	ror	r31
    2f4c:	9f 5f       	subi	r25, 0xFF	; 255
    2f4e:	c9 f7       	brne	.-14     	; 0x2f42 <__divsf3_pse+0x74>
    2f50:	88 0f       	add	r24, r24
    2f52:	91 1d       	adc	r25, r1
    2f54:	96 95       	lsr	r25
    2f56:	87 95       	ror	r24
    2f58:	97 f9       	bld	r25, 7
    2f5a:	08 95       	ret
    2f5c:	e1 e0       	ldi	r30, 0x01	; 1
    2f5e:	66 0f       	add	r22, r22
    2f60:	77 1f       	adc	r23, r23
    2f62:	88 1f       	adc	r24, r24
    2f64:	bb 1f       	adc	r27, r27
    2f66:	62 17       	cp	r22, r18
    2f68:	73 07       	cpc	r23, r19
    2f6a:	84 07       	cpc	r24, r20
    2f6c:	ba 07       	cpc	r27, r26
    2f6e:	20 f0       	brcs	.+8      	; 0x2f78 <__divsf3_pse+0xaa>
    2f70:	62 1b       	sub	r22, r18
    2f72:	73 0b       	sbc	r23, r19
    2f74:	84 0b       	sbc	r24, r20
    2f76:	ba 0b       	sbc	r27, r26
    2f78:	ee 1f       	adc	r30, r30
    2f7a:	88 f7       	brcc	.-30     	; 0x2f5e <__divsf3_pse+0x90>
    2f7c:	e0 95       	com	r30
    2f7e:	08 95       	ret

00002f80 <__fixsfdi>:
    2f80:	be e3       	ldi	r27, 0x3E	; 62
    2f82:	04 d0       	rcall	.+8      	; 0x2f8c <__fixunssfdi+0x2>
    2f84:	08 f4       	brcc	.+2      	; 0x2f88 <__fixsfdi+0x8>
    2f86:	90 e8       	ldi	r25, 0x80	; 128
    2f88:	08 95       	ret

00002f8a <__fixunssfdi>:
    2f8a:	bf e3       	ldi	r27, 0x3F	; 63
    2f8c:	22 27       	eor	r18, r18
    2f8e:	33 27       	eor	r19, r19
    2f90:	a9 01       	movw	r20, r18
    2f92:	9d d1       	rcall	.+826    	; 0x32ce <__fp_splitA>
    2f94:	58 f1       	brcs	.+86     	; 0x2fec <__fixunssfdi+0x62>
    2f96:	9f 57       	subi	r25, 0x7F	; 127
    2f98:	40 f1       	brcs	.+80     	; 0x2fea <__fixunssfdi+0x60>
    2f9a:	b9 17       	cp	r27, r25
    2f9c:	38 f1       	brcs	.+78     	; 0x2fec <__fixunssfdi+0x62>
    2f9e:	bf e3       	ldi	r27, 0x3F	; 63
    2fa0:	b9 1b       	sub	r27, r25
    2fa2:	99 27       	eor	r25, r25
    2fa4:	b8 50       	subi	r27, 0x08	; 8
    2fa6:	3a f4       	brpl	.+14     	; 0x2fb6 <__fixunssfdi+0x2c>
    2fa8:	66 0f       	add	r22, r22
    2faa:	77 1f       	adc	r23, r23
    2fac:	88 1f       	adc	r24, r24
    2fae:	99 1f       	adc	r25, r25
    2fb0:	b3 95       	inc	r27
    2fb2:	d2 f3       	brmi	.-12     	; 0x2fa8 <__fixunssfdi+0x1e>
    2fb4:	16 c0       	rjmp	.+44     	; 0x2fe2 <__fixunssfdi+0x58>
    2fb6:	b8 50       	subi	r27, 0x08	; 8
    2fb8:	4a f0       	brmi	.+18     	; 0x2fcc <__fixunssfdi+0x42>
    2fba:	23 2f       	mov	r18, r19
    2fbc:	34 2f       	mov	r19, r20
    2fbe:	45 2f       	mov	r20, r21
    2fc0:	56 2f       	mov	r21, r22
    2fc2:	67 2f       	mov	r22, r23
    2fc4:	78 2f       	mov	r23, r24
    2fc6:	88 27       	eor	r24, r24
    2fc8:	b8 50       	subi	r27, 0x08	; 8
    2fca:	ba f7       	brpl	.-18     	; 0x2fba <__fixunssfdi+0x30>
    2fcc:	b8 5f       	subi	r27, 0xF8	; 248
    2fce:	49 f0       	breq	.+18     	; 0x2fe2 <__fixunssfdi+0x58>
    2fd0:	86 95       	lsr	r24
    2fd2:	77 95       	ror	r23
    2fd4:	67 95       	ror	r22
    2fd6:	57 95       	ror	r21
    2fd8:	47 95       	ror	r20
    2fda:	37 95       	ror	r19
    2fdc:	27 95       	ror	r18
    2fde:	ba 95       	dec	r27
    2fe0:	b9 f7       	brne	.-18     	; 0x2fd0 <__fixunssfdi+0x46>
    2fe2:	0e f4       	brtc	.+2      	; 0x2fe6 <__fixunssfdi+0x5c>
    2fe4:	df d0       	rcall	.+446    	; 0x31a4 <__fp_negdi>
    2fe6:	88 94       	clc
    2fe8:	08 95       	ret
    2fea:	88 94       	clc
    2fec:	60 e0       	ldi	r22, 0x00	; 0
    2fee:	70 e0       	ldi	r23, 0x00	; 0
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	08 95       	ret

00002ff4 <__fixunssfsi>:
    2ff4:	6c d1       	rcall	.+728    	; 0x32ce <__fp_splitA>
    2ff6:	88 f0       	brcs	.+34     	; 0x301a <__fixunssfsi+0x26>
    2ff8:	9f 57       	subi	r25, 0x7F	; 127
    2ffa:	90 f0       	brcs	.+36     	; 0x3020 <__fixunssfsi+0x2c>
    2ffc:	b9 2f       	mov	r27, r25
    2ffe:	99 27       	eor	r25, r25
    3000:	b7 51       	subi	r27, 0x17	; 23
    3002:	a0 f0       	brcs	.+40     	; 0x302c <__fixunssfsi+0x38>
    3004:	d1 f0       	breq	.+52     	; 0x303a <__fixunssfsi+0x46>
    3006:	66 0f       	add	r22, r22
    3008:	77 1f       	adc	r23, r23
    300a:	88 1f       	adc	r24, r24
    300c:	99 1f       	adc	r25, r25
    300e:	1a f0       	brmi	.+6      	; 0x3016 <__fixunssfsi+0x22>
    3010:	ba 95       	dec	r27
    3012:	c9 f7       	brne	.-14     	; 0x3006 <__fixunssfsi+0x12>
    3014:	12 c0       	rjmp	.+36     	; 0x303a <__fixunssfsi+0x46>
    3016:	b1 30       	cpi	r27, 0x01	; 1
    3018:	81 f0       	breq	.+32     	; 0x303a <__fixunssfsi+0x46>
    301a:	73 d1       	rcall	.+742    	; 0x3302 <__fp_zero>
    301c:	b1 e0       	ldi	r27, 0x01	; 1
    301e:	08 95       	ret
    3020:	70 c1       	rjmp	.+736    	; 0x3302 <__fp_zero>
    3022:	67 2f       	mov	r22, r23
    3024:	78 2f       	mov	r23, r24
    3026:	88 27       	eor	r24, r24
    3028:	b8 5f       	subi	r27, 0xF8	; 248
    302a:	39 f0       	breq	.+14     	; 0x303a <__fixunssfsi+0x46>
    302c:	b9 3f       	cpi	r27, 0xF9	; 249
    302e:	cc f3       	brlt	.-14     	; 0x3022 <__fixunssfsi+0x2e>
    3030:	86 95       	lsr	r24
    3032:	77 95       	ror	r23
    3034:	67 95       	ror	r22
    3036:	b3 95       	inc	r27
    3038:	d9 f7       	brne	.-10     	; 0x3030 <__fixunssfsi+0x3c>
    303a:	3e f4       	brtc	.+14     	; 0x304a <__fixunssfsi+0x56>
    303c:	90 95       	com	r25
    303e:	80 95       	com	r24
    3040:	70 95       	com	r23
    3042:	61 95       	neg	r22
    3044:	7f 4f       	sbci	r23, 0xFF	; 255
    3046:	8f 4f       	sbci	r24, 0xFF	; 255
    3048:	9f 4f       	sbci	r25, 0xFF	; 255
    304a:	08 95       	ret

0000304c <__floatdisf>:
    304c:	97 fb       	bst	r25, 7
    304e:	0e f4       	brtc	.+2      	; 0x3052 <__floatdisf+0x6>
    3050:	a9 d0       	rcall	.+338    	; 0x31a4 <__fp_negdi>
    3052:	3e c0       	rjmp	.+124    	; 0x30d0 <__fp_di2sf>

00003054 <__floatunsisf>:
    3054:	e8 94       	clt
    3056:	09 c0       	rjmp	.+18     	; 0x306a <__floatsisf+0x12>

00003058 <__floatsisf>:
    3058:	97 fb       	bst	r25, 7
    305a:	3e f4       	brtc	.+14     	; 0x306a <__floatsisf+0x12>
    305c:	90 95       	com	r25
    305e:	80 95       	com	r24
    3060:	70 95       	com	r23
    3062:	61 95       	neg	r22
    3064:	7f 4f       	sbci	r23, 0xFF	; 255
    3066:	8f 4f       	sbci	r24, 0xFF	; 255
    3068:	9f 4f       	sbci	r25, 0xFF	; 255
    306a:	99 23       	and	r25, r25
    306c:	a9 f0       	breq	.+42     	; 0x3098 <__floatsisf+0x40>
    306e:	f9 2f       	mov	r31, r25
    3070:	96 e9       	ldi	r25, 0x96	; 150
    3072:	bb 27       	eor	r27, r27
    3074:	93 95       	inc	r25
    3076:	f6 95       	lsr	r31
    3078:	87 95       	ror	r24
    307a:	77 95       	ror	r23
    307c:	67 95       	ror	r22
    307e:	b7 95       	ror	r27
    3080:	f1 11       	cpse	r31, r1
    3082:	f8 cf       	rjmp	.-16     	; 0x3074 <__floatsisf+0x1c>
    3084:	fa f4       	brpl	.+62     	; 0x30c4 <__floatsisf+0x6c>
    3086:	bb 0f       	add	r27, r27
    3088:	11 f4       	brne	.+4      	; 0x308e <__floatsisf+0x36>
    308a:	60 ff       	sbrs	r22, 0
    308c:	1b c0       	rjmp	.+54     	; 0x30c4 <__floatsisf+0x6c>
    308e:	6f 5f       	subi	r22, 0xFF	; 255
    3090:	7f 4f       	sbci	r23, 0xFF	; 255
    3092:	8f 4f       	sbci	r24, 0xFF	; 255
    3094:	9f 4f       	sbci	r25, 0xFF	; 255
    3096:	16 c0       	rjmp	.+44     	; 0x30c4 <__floatsisf+0x6c>
    3098:	88 23       	and	r24, r24
    309a:	11 f0       	breq	.+4      	; 0x30a0 <__floatsisf+0x48>
    309c:	96 e9       	ldi	r25, 0x96	; 150
    309e:	11 c0       	rjmp	.+34     	; 0x30c2 <__floatsisf+0x6a>
    30a0:	77 23       	and	r23, r23
    30a2:	21 f0       	breq	.+8      	; 0x30ac <__floatsisf+0x54>
    30a4:	9e e8       	ldi	r25, 0x8E	; 142
    30a6:	87 2f       	mov	r24, r23
    30a8:	76 2f       	mov	r23, r22
    30aa:	05 c0       	rjmp	.+10     	; 0x30b6 <__floatsisf+0x5e>
    30ac:	66 23       	and	r22, r22
    30ae:	71 f0       	breq	.+28     	; 0x30cc <__floatsisf+0x74>
    30b0:	96 e8       	ldi	r25, 0x86	; 134
    30b2:	86 2f       	mov	r24, r22
    30b4:	70 e0       	ldi	r23, 0x00	; 0
    30b6:	60 e0       	ldi	r22, 0x00	; 0
    30b8:	2a f0       	brmi	.+10     	; 0x30c4 <__floatsisf+0x6c>
    30ba:	9a 95       	dec	r25
    30bc:	66 0f       	add	r22, r22
    30be:	77 1f       	adc	r23, r23
    30c0:	88 1f       	adc	r24, r24
    30c2:	da f7       	brpl	.-10     	; 0x30ba <__floatsisf+0x62>
    30c4:	88 0f       	add	r24, r24
    30c6:	96 95       	lsr	r25
    30c8:	87 95       	ror	r24
    30ca:	97 f9       	bld	r25, 7
    30cc:	08 95       	ret

000030ce <__floatundisf>:
    30ce:	e8 94       	clt

000030d0 <__fp_di2sf>:
    30d0:	f9 2f       	mov	r31, r25
    30d2:	96 eb       	ldi	r25, 0xB6	; 182
    30d4:	ff 23       	and	r31, r31
    30d6:	81 f0       	breq	.+32     	; 0x30f8 <__fp_di2sf+0x28>
    30d8:	12 16       	cp	r1, r18
    30da:	13 06       	cpc	r1, r19
    30dc:	14 06       	cpc	r1, r20
    30de:	44 0b       	sbc	r20, r20
    30e0:	93 95       	inc	r25
    30e2:	f6 95       	lsr	r31
    30e4:	87 95       	ror	r24
    30e6:	77 95       	ror	r23
    30e8:	67 95       	ror	r22
    30ea:	57 95       	ror	r21
    30ec:	40 40       	sbci	r20, 0x00	; 0
    30ee:	ff 23       	and	r31, r31
    30f0:	b9 f7       	brne	.-18     	; 0x30e0 <__fp_di2sf+0x10>
    30f2:	1b c0       	rjmp	.+54     	; 0x312a <__fp_di2sf+0x5a>
    30f4:	99 27       	eor	r25, r25
    30f6:	08 95       	ret
    30f8:	88 23       	and	r24, r24
    30fa:	51 f4       	brne	.+20     	; 0x3110 <__fp_di2sf+0x40>
    30fc:	98 50       	subi	r25, 0x08	; 8
    30fe:	d2 f7       	brpl	.-12     	; 0x30f4 <__fp_di2sf+0x24>
    3100:	87 2b       	or	r24, r23
    3102:	76 2f       	mov	r23, r22
    3104:	65 2f       	mov	r22, r21
    3106:	54 2f       	mov	r21, r20
    3108:	43 2f       	mov	r20, r19
    310a:	32 2f       	mov	r19, r18
    310c:	20 e0       	ldi	r18, 0x00	; 0
    310e:	b1 f3       	breq	.-20     	; 0x30fc <__fp_di2sf+0x2c>
    3110:	12 16       	cp	r1, r18
    3112:	13 06       	cpc	r1, r19
    3114:	14 06       	cpc	r1, r20
    3116:	44 0b       	sbc	r20, r20
    3118:	88 23       	and	r24, r24
    311a:	3a f0       	brmi	.+14     	; 0x312a <__fp_di2sf+0x5a>
    311c:	9a 95       	dec	r25
    311e:	44 0f       	add	r20, r20
    3120:	55 1f       	adc	r21, r21
    3122:	66 1f       	adc	r22, r22
    3124:	77 1f       	adc	r23, r23
    3126:	88 1f       	adc	r24, r24
    3128:	ca f7       	brpl	.-14     	; 0x311c <__fp_di2sf+0x4c>
    312a:	55 23       	and	r21, r21
    312c:	4a f4       	brpl	.+18     	; 0x3140 <__fp_di2sf+0x70>
    312e:	44 0f       	add	r20, r20
    3130:	55 1f       	adc	r21, r21
    3132:	11 f4       	brne	.+4      	; 0x3138 <__fp_di2sf+0x68>
    3134:	60 ff       	sbrs	r22, 0
    3136:	04 c0       	rjmp	.+8      	; 0x3140 <__fp_di2sf+0x70>
    3138:	6f 5f       	subi	r22, 0xFF	; 255
    313a:	7f 4f       	sbci	r23, 0xFF	; 255
    313c:	8f 4f       	sbci	r24, 0xFF	; 255
    313e:	9f 4f       	sbci	r25, 0xFF	; 255
    3140:	88 0f       	add	r24, r24
    3142:	96 95       	lsr	r25
    3144:	87 95       	ror	r24
    3146:	97 f9       	bld	r25, 7
    3148:	08 95       	ret

0000314a <__fp_cmp>:
    314a:	99 0f       	add	r25, r25
    314c:	00 08       	sbc	r0, r0
    314e:	55 0f       	add	r21, r21
    3150:	aa 0b       	sbc	r26, r26
    3152:	e0 e8       	ldi	r30, 0x80	; 128
    3154:	fe ef       	ldi	r31, 0xFE	; 254
    3156:	16 16       	cp	r1, r22
    3158:	17 06       	cpc	r1, r23
    315a:	e8 07       	cpc	r30, r24
    315c:	f9 07       	cpc	r31, r25
    315e:	c0 f0       	brcs	.+48     	; 0x3190 <__fp_cmp+0x46>
    3160:	12 16       	cp	r1, r18
    3162:	13 06       	cpc	r1, r19
    3164:	e4 07       	cpc	r30, r20
    3166:	f5 07       	cpc	r31, r21
    3168:	98 f0       	brcs	.+38     	; 0x3190 <__fp_cmp+0x46>
    316a:	62 1b       	sub	r22, r18
    316c:	73 0b       	sbc	r23, r19
    316e:	84 0b       	sbc	r24, r20
    3170:	95 0b       	sbc	r25, r21
    3172:	39 f4       	brne	.+14     	; 0x3182 <__fp_cmp+0x38>
    3174:	0a 26       	eor	r0, r26
    3176:	61 f0       	breq	.+24     	; 0x3190 <__fp_cmp+0x46>
    3178:	23 2b       	or	r18, r19
    317a:	24 2b       	or	r18, r20
    317c:	25 2b       	or	r18, r21
    317e:	21 f4       	brne	.+8      	; 0x3188 <__fp_cmp+0x3e>
    3180:	08 95       	ret
    3182:	0a 26       	eor	r0, r26
    3184:	09 f4       	brne	.+2      	; 0x3188 <__fp_cmp+0x3e>
    3186:	a1 40       	sbci	r26, 0x01	; 1
    3188:	a6 95       	lsr	r26
    318a:	8f ef       	ldi	r24, 0xFF	; 255
    318c:	81 1d       	adc	r24, r1
    318e:	81 1d       	adc	r24, r1
    3190:	08 95       	ret

00003192 <__fp_inf>:
    3192:	97 f9       	bld	r25, 7
    3194:	9f 67       	ori	r25, 0x7F	; 127
    3196:	80 e8       	ldi	r24, 0x80	; 128
    3198:	70 e0       	ldi	r23, 0x00	; 0
    319a:	60 e0       	ldi	r22, 0x00	; 0
    319c:	08 95       	ret

0000319e <__fp_nan>:
    319e:	9f ef       	ldi	r25, 0xFF	; 255
    31a0:	80 ec       	ldi	r24, 0xC0	; 192
    31a2:	08 95       	ret

000031a4 <__fp_negdi>:
    31a4:	90 95       	com	r25
    31a6:	80 95       	com	r24
    31a8:	70 95       	com	r23
    31aa:	60 95       	com	r22
    31ac:	50 95       	com	r21
    31ae:	40 95       	com	r20
    31b0:	30 95       	com	r19
    31b2:	21 95       	neg	r18
    31b4:	3f 4f       	sbci	r19, 0xFF	; 255
    31b6:	4f 4f       	sbci	r20, 0xFF	; 255
    31b8:	5f 4f       	sbci	r21, 0xFF	; 255
    31ba:	6f 4f       	sbci	r22, 0xFF	; 255
    31bc:	7f 4f       	sbci	r23, 0xFF	; 255
    31be:	8f 4f       	sbci	r24, 0xFF	; 255
    31c0:	9f 4f       	sbci	r25, 0xFF	; 255
    31c2:	08 95       	ret

000031c4 <__fp_powser>:
    31c4:	df 93       	push	r29
    31c6:	cf 93       	push	r28
    31c8:	1f 93       	push	r17
    31ca:	0f 93       	push	r16
    31cc:	ff 92       	push	r15
    31ce:	ef 92       	push	r14
    31d0:	df 92       	push	r13
    31d2:	7b 01       	movw	r14, r22
    31d4:	8c 01       	movw	r16, r24
    31d6:	68 94       	set
    31d8:	05 c0       	rjmp	.+10     	; 0x31e4 <__fp_powser+0x20>
    31da:	da 2e       	mov	r13, r26
    31dc:	ef 01       	movw	r28, r30
    31de:	af d0       	rcall	.+350    	; 0x333e <__mulsf3x>
    31e0:	fe 01       	movw	r30, r28
    31e2:	e8 94       	clt
    31e4:	a5 91       	lpm	r26, Z+
    31e6:	25 91       	lpm	r18, Z+
    31e8:	35 91       	lpm	r19, Z+
    31ea:	45 91       	lpm	r20, Z+
    31ec:	55 91       	lpm	r21, Z+
    31ee:	ae f3       	brts	.-22     	; 0x31da <__fp_powser+0x16>
    31f0:	ef 01       	movw	r28, r30
    31f2:	a4 dd       	rcall	.-1208   	; 0x2d3c <__addsf3x>
    31f4:	fe 01       	movw	r30, r28
    31f6:	97 01       	movw	r18, r14
    31f8:	a8 01       	movw	r20, r16
    31fa:	da 94       	dec	r13
    31fc:	79 f7       	brne	.-34     	; 0x31dc <__fp_powser+0x18>
    31fe:	df 90       	pop	r13
    3200:	ef 90       	pop	r14
    3202:	ff 90       	pop	r15
    3204:	0f 91       	pop	r16
    3206:	1f 91       	pop	r17
    3208:	cf 91       	pop	r28
    320a:	df 91       	pop	r29
    320c:	08 95       	ret

0000320e <__fp_pscA>:
    320e:	00 24       	eor	r0, r0
    3210:	0a 94       	dec	r0
    3212:	16 16       	cp	r1, r22
    3214:	17 06       	cpc	r1, r23
    3216:	18 06       	cpc	r1, r24
    3218:	09 06       	cpc	r0, r25
    321a:	08 95       	ret

0000321c <__fp_pscB>:
    321c:	00 24       	eor	r0, r0
    321e:	0a 94       	dec	r0
    3220:	12 16       	cp	r1, r18
    3222:	13 06       	cpc	r1, r19
    3224:	14 06       	cpc	r1, r20
    3226:	05 06       	cpc	r0, r21
    3228:	08 95       	ret
    322a:	b9 cf       	rjmp	.-142    	; 0x319e <__fp_nan>

0000322c <__fp_rempio2>:
    322c:	50 d0       	rcall	.+160    	; 0x32ce <__fp_splitA>
    322e:	e8 f3       	brcs	.-6      	; 0x322a <__fp_pscB+0xe>
    3230:	e8 94       	clt
    3232:	e0 e0       	ldi	r30, 0x00	; 0
    3234:	bb 27       	eor	r27, r27
    3236:	9f 57       	subi	r25, 0x7F	; 127
    3238:	f0 f0       	brcs	.+60     	; 0x3276 <__fp_rempio2+0x4a>
    323a:	2a ed       	ldi	r18, 0xDA	; 218
    323c:	3f e0       	ldi	r19, 0x0F	; 15
    323e:	49 ec       	ldi	r20, 0xC9	; 201
    3240:	06 c0       	rjmp	.+12     	; 0x324e <__fp_rempio2+0x22>
    3242:	ee 0f       	add	r30, r30
    3244:	bb 0f       	add	r27, r27
    3246:	66 1f       	adc	r22, r22
    3248:	77 1f       	adc	r23, r23
    324a:	88 1f       	adc	r24, r24
    324c:	28 f0       	brcs	.+10     	; 0x3258 <__fp_rempio2+0x2c>
    324e:	b2 3a       	cpi	r27, 0xA2	; 162
    3250:	62 07       	cpc	r22, r18
    3252:	73 07       	cpc	r23, r19
    3254:	84 07       	cpc	r24, r20
    3256:	28 f0       	brcs	.+10     	; 0x3262 <__fp_rempio2+0x36>
    3258:	b2 5a       	subi	r27, 0xA2	; 162
    325a:	62 0b       	sbc	r22, r18
    325c:	73 0b       	sbc	r23, r19
    325e:	84 0b       	sbc	r24, r20
    3260:	e3 95       	inc	r30
    3262:	9a 95       	dec	r25
    3264:	72 f7       	brpl	.-36     	; 0x3242 <__fp_rempio2+0x16>
    3266:	80 38       	cpi	r24, 0x80	; 128
    3268:	30 f4       	brcc	.+12     	; 0x3276 <__fp_rempio2+0x4a>
    326a:	9a 95       	dec	r25
    326c:	bb 0f       	add	r27, r27
    326e:	66 1f       	adc	r22, r22
    3270:	77 1f       	adc	r23, r23
    3272:	88 1f       	adc	r24, r24
    3274:	d2 f7       	brpl	.-12     	; 0x326a <__fp_rempio2+0x3e>
    3276:	90 48       	sbci	r25, 0x80	; 128
    3278:	08 c1       	rjmp	.+528    	; 0x348a <__fp_mpack_finite>

0000327a <__fp_round>:
    327a:	09 2e       	mov	r0, r25
    327c:	03 94       	inc	r0
    327e:	00 0c       	add	r0, r0
    3280:	11 f4       	brne	.+4      	; 0x3286 <__fp_round+0xc>
    3282:	88 23       	and	r24, r24
    3284:	52 f0       	brmi	.+20     	; 0x329a <__fp_round+0x20>
    3286:	bb 0f       	add	r27, r27
    3288:	40 f4       	brcc	.+16     	; 0x329a <__fp_round+0x20>
    328a:	bf 2b       	or	r27, r31
    328c:	11 f4       	brne	.+4      	; 0x3292 <__fp_round+0x18>
    328e:	60 ff       	sbrs	r22, 0
    3290:	04 c0       	rjmp	.+8      	; 0x329a <__fp_round+0x20>
    3292:	6f 5f       	subi	r22, 0xFF	; 255
    3294:	7f 4f       	sbci	r23, 0xFF	; 255
    3296:	8f 4f       	sbci	r24, 0xFF	; 255
    3298:	9f 4f       	sbci	r25, 0xFF	; 255
    329a:	08 95       	ret

0000329c <__fp_sinus>:
    329c:	ef 93       	push	r30
    329e:	e0 ff       	sbrs	r30, 0
    32a0:	06 c0       	rjmp	.+12     	; 0x32ae <__fp_sinus+0x12>
    32a2:	a2 ea       	ldi	r26, 0xA2	; 162
    32a4:	2a ed       	ldi	r18, 0xDA	; 218
    32a6:	3f e0       	ldi	r19, 0x0F	; 15
    32a8:	49 ec       	ldi	r20, 0xC9	; 201
    32aa:	5f eb       	ldi	r21, 0xBF	; 191
    32ac:	47 dd       	rcall	.-1394   	; 0x2d3c <__addsf3x>
    32ae:	e5 df       	rcall	.-54     	; 0x327a <__fp_round>
    32b0:	0f 90       	pop	r0
    32b2:	03 94       	inc	r0
    32b4:	01 fc       	sbrc	r0, 1
    32b6:	90 58       	subi	r25, 0x80	; 128
    32b8:	e5 ee       	ldi	r30, 0xE5	; 229
    32ba:	f0 e0       	ldi	r31, 0x00	; 0
    32bc:	f9 c0       	rjmp	.+498    	; 0x34b0 <__fp_powsodd>

000032be <__fp_split3>:
    32be:	57 fd       	sbrc	r21, 7
    32c0:	90 58       	subi	r25, 0x80	; 128
    32c2:	44 0f       	add	r20, r20
    32c4:	55 1f       	adc	r21, r21
    32c6:	59 f0       	breq	.+22     	; 0x32de <__fp_splitA+0x10>
    32c8:	5f 3f       	cpi	r21, 0xFF	; 255
    32ca:	71 f0       	breq	.+28     	; 0x32e8 <__fp_splitA+0x1a>
    32cc:	47 95       	ror	r20

000032ce <__fp_splitA>:
    32ce:	88 0f       	add	r24, r24
    32d0:	97 fb       	bst	r25, 7
    32d2:	99 1f       	adc	r25, r25
    32d4:	61 f0       	breq	.+24     	; 0x32ee <__fp_splitA+0x20>
    32d6:	9f 3f       	cpi	r25, 0xFF	; 255
    32d8:	79 f0       	breq	.+30     	; 0x32f8 <__fp_splitA+0x2a>
    32da:	87 95       	ror	r24
    32dc:	08 95       	ret
    32de:	12 16       	cp	r1, r18
    32e0:	13 06       	cpc	r1, r19
    32e2:	14 06       	cpc	r1, r20
    32e4:	55 1f       	adc	r21, r21
    32e6:	f2 cf       	rjmp	.-28     	; 0x32cc <__fp_split3+0xe>
    32e8:	46 95       	lsr	r20
    32ea:	f1 df       	rcall	.-30     	; 0x32ce <__fp_splitA>
    32ec:	08 c0       	rjmp	.+16     	; 0x32fe <__fp_splitA+0x30>
    32ee:	16 16       	cp	r1, r22
    32f0:	17 06       	cpc	r1, r23
    32f2:	18 06       	cpc	r1, r24
    32f4:	99 1f       	adc	r25, r25
    32f6:	f1 cf       	rjmp	.-30     	; 0x32da <__fp_splitA+0xc>
    32f8:	86 95       	lsr	r24
    32fa:	71 05       	cpc	r23, r1
    32fc:	61 05       	cpc	r22, r1
    32fe:	08 94       	sec
    3300:	08 95       	ret

00003302 <__fp_zero>:
    3302:	e8 94       	clt

00003304 <__fp_szero>:
    3304:	bb 27       	eor	r27, r27
    3306:	66 27       	eor	r22, r22
    3308:	77 27       	eor	r23, r23
    330a:	cb 01       	movw	r24, r22
    330c:	97 f9       	bld	r25, 7
    330e:	08 95       	ret

00003310 <__gesf2>:
    3310:	1c df       	rcall	.-456    	; 0x314a <__fp_cmp>
    3312:	08 f4       	brcc	.+2      	; 0x3316 <__gesf2+0x6>
    3314:	8f ef       	ldi	r24, 0xFF	; 255
    3316:	08 95       	ret

00003318 <inverse>:
    3318:	9b 01       	movw	r18, r22
    331a:	ac 01       	movw	r20, r24
    331c:	60 e0       	ldi	r22, 0x00	; 0
    331e:	70 e0       	ldi	r23, 0x00	; 0
    3320:	80 e8       	ldi	r24, 0x80	; 128
    3322:	9f e3       	ldi	r25, 0x3F	; 63
    3324:	ae c0       	rjmp	.+348    	; 0x3482 <__divsf3>

00003326 <__mulsf3>:
    3326:	0b d0       	rcall	.+22     	; 0x333e <__mulsf3x>
    3328:	a8 cf       	rjmp	.-176    	; 0x327a <__fp_round>
    332a:	71 df       	rcall	.-286    	; 0x320e <__fp_pscA>
    332c:	28 f0       	brcs	.+10     	; 0x3338 <__mulsf3+0x12>
    332e:	76 df       	rcall	.-276    	; 0x321c <__fp_pscB>
    3330:	18 f0       	brcs	.+6      	; 0x3338 <__mulsf3+0x12>
    3332:	95 23       	and	r25, r21
    3334:	09 f0       	breq	.+2      	; 0x3338 <__mulsf3+0x12>
    3336:	2d cf       	rjmp	.-422    	; 0x3192 <__fp_inf>
    3338:	32 cf       	rjmp	.-412    	; 0x319e <__fp_nan>
    333a:	11 24       	eor	r1, r1
    333c:	e3 cf       	rjmp	.-58     	; 0x3304 <__fp_szero>

0000333e <__mulsf3x>:
    333e:	bf df       	rcall	.-130    	; 0x32be <__fp_split3>
    3340:	a0 f3       	brcs	.-24     	; 0x332a <__mulsf3+0x4>

00003342 <__mulsf3_pse>:
    3342:	95 9f       	mul	r25, r21
    3344:	d1 f3       	breq	.-12     	; 0x333a <__mulsf3+0x14>
    3346:	95 0f       	add	r25, r21
    3348:	50 e0       	ldi	r21, 0x00	; 0
    334a:	55 1f       	adc	r21, r21
    334c:	62 9f       	mul	r22, r18
    334e:	f0 01       	movw	r30, r0
    3350:	72 9f       	mul	r23, r18
    3352:	bb 27       	eor	r27, r27
    3354:	f0 0d       	add	r31, r0
    3356:	b1 1d       	adc	r27, r1
    3358:	63 9f       	mul	r22, r19
    335a:	aa 27       	eor	r26, r26
    335c:	f0 0d       	add	r31, r0
    335e:	b1 1d       	adc	r27, r1
    3360:	aa 1f       	adc	r26, r26
    3362:	64 9f       	mul	r22, r20
    3364:	66 27       	eor	r22, r22
    3366:	b0 0d       	add	r27, r0
    3368:	a1 1d       	adc	r26, r1
    336a:	66 1f       	adc	r22, r22
    336c:	82 9f       	mul	r24, r18
    336e:	22 27       	eor	r18, r18
    3370:	b0 0d       	add	r27, r0
    3372:	a1 1d       	adc	r26, r1
    3374:	62 1f       	adc	r22, r18
    3376:	73 9f       	mul	r23, r19
    3378:	b0 0d       	add	r27, r0
    337a:	a1 1d       	adc	r26, r1
    337c:	62 1f       	adc	r22, r18
    337e:	83 9f       	mul	r24, r19
    3380:	a0 0d       	add	r26, r0
    3382:	61 1d       	adc	r22, r1
    3384:	22 1f       	adc	r18, r18
    3386:	74 9f       	mul	r23, r20
    3388:	33 27       	eor	r19, r19
    338a:	a0 0d       	add	r26, r0
    338c:	61 1d       	adc	r22, r1
    338e:	23 1f       	adc	r18, r19
    3390:	84 9f       	mul	r24, r20
    3392:	60 0d       	add	r22, r0
    3394:	21 1d       	adc	r18, r1
    3396:	82 2f       	mov	r24, r18
    3398:	76 2f       	mov	r23, r22
    339a:	6a 2f       	mov	r22, r26
    339c:	11 24       	eor	r1, r1
    339e:	9f 57       	subi	r25, 0x7F	; 127
    33a0:	50 40       	sbci	r21, 0x00	; 0
    33a2:	8a f0       	brmi	.+34     	; 0x33c6 <__mulsf3_pse+0x84>
    33a4:	e1 f0       	breq	.+56     	; 0x33de <__mulsf3_pse+0x9c>
    33a6:	88 23       	and	r24, r24
    33a8:	4a f0       	brmi	.+18     	; 0x33bc <__mulsf3_pse+0x7a>
    33aa:	ee 0f       	add	r30, r30
    33ac:	ff 1f       	adc	r31, r31
    33ae:	bb 1f       	adc	r27, r27
    33b0:	66 1f       	adc	r22, r22
    33b2:	77 1f       	adc	r23, r23
    33b4:	88 1f       	adc	r24, r24
    33b6:	91 50       	subi	r25, 0x01	; 1
    33b8:	50 40       	sbci	r21, 0x00	; 0
    33ba:	a9 f7       	brne	.-22     	; 0x33a6 <__mulsf3_pse+0x64>
    33bc:	9e 3f       	cpi	r25, 0xFE	; 254
    33be:	51 05       	cpc	r21, r1
    33c0:	70 f0       	brcs	.+28     	; 0x33de <__mulsf3_pse+0x9c>
    33c2:	e7 ce       	rjmp	.-562    	; 0x3192 <__fp_inf>
    33c4:	9f cf       	rjmp	.-194    	; 0x3304 <__fp_szero>
    33c6:	5f 3f       	cpi	r21, 0xFF	; 255
    33c8:	ec f3       	brlt	.-6      	; 0x33c4 <__mulsf3_pse+0x82>
    33ca:	98 3e       	cpi	r25, 0xE8	; 232
    33cc:	dc f3       	brlt	.-10     	; 0x33c4 <__mulsf3_pse+0x82>
    33ce:	86 95       	lsr	r24
    33d0:	77 95       	ror	r23
    33d2:	67 95       	ror	r22
    33d4:	b7 95       	ror	r27
    33d6:	f7 95       	ror	r31
    33d8:	e7 95       	ror	r30
    33da:	9f 5f       	subi	r25, 0xFF	; 255
    33dc:	c1 f7       	brne	.-16     	; 0x33ce <__mulsf3_pse+0x8c>
    33de:	fe 2b       	or	r31, r30
    33e0:	88 0f       	add	r24, r24
    33e2:	91 1d       	adc	r25, r1
    33e4:	96 95       	lsr	r25
    33e6:	87 95       	ror	r24
    33e8:	97 f9       	bld	r25, 7
    33ea:	08 95       	ret

000033ec <sin>:
    33ec:	9f 93       	push	r25
    33ee:	1e df       	rcall	.-452    	; 0x322c <__fp_rempio2>
    33f0:	0f 90       	pop	r0
    33f2:	07 fc       	sbrc	r0, 7
    33f4:	ee 5f       	subi	r30, 0xFE	; 254
    33f6:	52 cf       	rjmp	.-348    	; 0x329c <__fp_sinus>
    33f8:	11 f4       	brne	.+4      	; 0x33fe <sin+0x12>
    33fa:	0e f4       	brtc	.+2      	; 0x33fe <sin+0x12>
    33fc:	d0 ce       	rjmp	.-608    	; 0x319e <__fp_nan>
    33fe:	43 c0       	rjmp	.+134    	; 0x3486 <__fp_mpack>

00003400 <sqrt>:
    3400:	66 df       	rcall	.-308    	; 0x32ce <__fp_splitA>
    3402:	d0 f3       	brcs	.-12     	; 0x33f8 <sin+0xc>
    3404:	99 23       	and	r25, r25
    3406:	d9 f3       	breq	.-10     	; 0x33fe <sin+0x12>
    3408:	ce f3       	brts	.-14     	; 0x33fc <sin+0x10>
    340a:	9f 57       	subi	r25, 0x7F	; 127
    340c:	55 0b       	sbc	r21, r21
    340e:	87 ff       	sbrs	r24, 7
    3410:	48 d0       	rcall	.+144    	; 0x34a2 <__fp_norm2>
    3412:	00 24       	eor	r0, r0
    3414:	a0 e6       	ldi	r26, 0x60	; 96
    3416:	40 ea       	ldi	r20, 0xA0	; 160
    3418:	90 01       	movw	r18, r0
    341a:	80 58       	subi	r24, 0x80	; 128
    341c:	56 95       	lsr	r21
    341e:	97 95       	ror	r25
    3420:	28 f4       	brcc	.+10     	; 0x342c <sqrt+0x2c>
    3422:	80 5c       	subi	r24, 0xC0	; 192
    3424:	66 0f       	add	r22, r22
    3426:	77 1f       	adc	r23, r23
    3428:	88 1f       	adc	r24, r24
    342a:	20 f0       	brcs	.+8      	; 0x3434 <sqrt+0x34>
    342c:	26 17       	cp	r18, r22
    342e:	37 07       	cpc	r19, r23
    3430:	48 07       	cpc	r20, r24
    3432:	30 f4       	brcc	.+12     	; 0x3440 <sqrt+0x40>
    3434:	62 1b       	sub	r22, r18
    3436:	73 0b       	sbc	r23, r19
    3438:	84 0b       	sbc	r24, r20
    343a:	20 29       	or	r18, r0
    343c:	31 29       	or	r19, r1
    343e:	4a 2b       	or	r20, r26
    3440:	a6 95       	lsr	r26
    3442:	17 94       	ror	r1
    3444:	07 94       	ror	r0
    3446:	20 25       	eor	r18, r0
    3448:	31 25       	eor	r19, r1
    344a:	4a 27       	eor	r20, r26
    344c:	58 f7       	brcc	.-42     	; 0x3424 <sqrt+0x24>
    344e:	66 0f       	add	r22, r22
    3450:	77 1f       	adc	r23, r23
    3452:	88 1f       	adc	r24, r24
    3454:	20 f0       	brcs	.+8      	; 0x345e <sqrt+0x5e>
    3456:	26 17       	cp	r18, r22
    3458:	37 07       	cpc	r19, r23
    345a:	48 07       	cpc	r20, r24
    345c:	30 f4       	brcc	.+12     	; 0x346a <sqrt+0x6a>
    345e:	62 0b       	sbc	r22, r18
    3460:	73 0b       	sbc	r23, r19
    3462:	84 0b       	sbc	r24, r20
    3464:	20 0d       	add	r18, r0
    3466:	31 1d       	adc	r19, r1
    3468:	41 1d       	adc	r20, r1
    346a:	a0 95       	com	r26
    346c:	81 f7       	brne	.-32     	; 0x344e <sqrt+0x4e>
    346e:	b9 01       	movw	r22, r18
    3470:	84 2f       	mov	r24, r20
    3472:	91 58       	subi	r25, 0x81	; 129
    3474:	88 0f       	add	r24, r24
    3476:	96 95       	lsr	r25
    3478:	87 95       	ror	r24
    347a:	08 95       	ret

0000347c <square>:
    347c:	9b 01       	movw	r18, r22
    347e:	ac 01       	movw	r20, r24
    3480:	52 cf       	rjmp	.-348    	; 0x3326 <__mulsf3>

00003482 <__divsf3>:
    3482:	23 dd       	rcall	.-1466   	; 0x2eca <__divsf3x>
    3484:	fa ce       	rjmp	.-524    	; 0x327a <__fp_round>

00003486 <__fp_mpack>:
    3486:	9f 3f       	cpi	r25, 0xFF	; 255
    3488:	31 f0       	breq	.+12     	; 0x3496 <__fp_mpack_finite+0xc>

0000348a <__fp_mpack_finite>:
    348a:	91 50       	subi	r25, 0x01	; 1
    348c:	20 f4       	brcc	.+8      	; 0x3496 <__fp_mpack_finite+0xc>
    348e:	87 95       	ror	r24
    3490:	77 95       	ror	r23
    3492:	67 95       	ror	r22
    3494:	b7 95       	ror	r27
    3496:	88 0f       	add	r24, r24
    3498:	91 1d       	adc	r25, r1
    349a:	96 95       	lsr	r25
    349c:	87 95       	ror	r24
    349e:	97 f9       	bld	r25, 7
    34a0:	08 95       	ret

000034a2 <__fp_norm2>:
    34a2:	91 50       	subi	r25, 0x01	; 1
    34a4:	50 40       	sbci	r21, 0x00	; 0
    34a6:	66 0f       	add	r22, r22
    34a8:	77 1f       	adc	r23, r23
    34aa:	88 1f       	adc	r24, r24
    34ac:	d2 f7       	brpl	.-12     	; 0x34a2 <__fp_norm2>
    34ae:	08 95       	ret

000034b0 <__fp_powsodd>:
    34b0:	9f 93       	push	r25
    34b2:	8f 93       	push	r24
    34b4:	7f 93       	push	r23
    34b6:	6f 93       	push	r22
    34b8:	ff 93       	push	r31
    34ba:	ef 93       	push	r30
    34bc:	9b 01       	movw	r18, r22
    34be:	ac 01       	movw	r20, r24
    34c0:	32 df       	rcall	.-412    	; 0x3326 <__mulsf3>
    34c2:	ef 91       	pop	r30
    34c4:	ff 91       	pop	r31
    34c6:	7e de       	rcall	.-772    	; 0x31c4 <__fp_powser>
    34c8:	2f 91       	pop	r18
    34ca:	3f 91       	pop	r19
    34cc:	4f 91       	pop	r20
    34ce:	5f 91       	pop	r21
    34d0:	2a cf       	rjmp	.-428    	; 0x3326 <__mulsf3>

000034d2 <__tablejump2__>:
    34d2:	ee 0f       	add	r30, r30
    34d4:	ff 1f       	adc	r31, r31

000034d6 <__tablejump__>:
    34d6:	05 90       	lpm	r0, Z+
    34d8:	f4 91       	lpm	r31, Z
    34da:	e0 2d       	mov	r30, r0
    34dc:	09 94       	ijmp

000034de <__moddi3>:
    34de:	68 94       	set
    34e0:	01 c0       	rjmp	.+2      	; 0x34e4 <__divdi3_moddi3>

000034e2 <__divdi3>:
    34e2:	e8 94       	clt

000034e4 <__divdi3_moddi3>:
    34e4:	f9 2f       	mov	r31, r25
    34e6:	f1 2b       	or	r31, r17
    34e8:	0a f0       	brmi	.+2      	; 0x34ec <__divdi3_moddi3+0x8>
    34ea:	27 c0       	rjmp	.+78     	; 0x353a <__udivdi3_umoddi3>
    34ec:	a0 e0       	ldi	r26, 0x00	; 0
    34ee:	b0 e0       	ldi	r27, 0x00	; 0
    34f0:	eb e7       	ldi	r30, 0x7B	; 123
    34f2:	fa e1       	ldi	r31, 0x1A	; 26
    34f4:	93 c0       	rjmp	.+294    	; 0x361c <__prologue_saves__+0xc>
    34f6:	09 2e       	mov	r0, r25
    34f8:	05 94       	asr	r0
    34fa:	1a f4       	brpl	.+6      	; 0x3502 <__divdi3_moddi3+0x1e>
    34fc:	79 d0       	rcall	.+242    	; 0x35f0 <__negdi2>
    34fe:	11 23       	and	r17, r17
    3500:	92 f4       	brpl	.+36     	; 0x3526 <__divdi3_moddi3+0x42>
    3502:	f0 e8       	ldi	r31, 0x80	; 128
    3504:	0f 26       	eor	r0, r31
    3506:	ff ef       	ldi	r31, 0xFF	; 255
    3508:	e0 94       	com	r14
    350a:	f0 94       	com	r15
    350c:	00 95       	com	r16
    350e:	10 95       	com	r17
    3510:	b0 94       	com	r11
    3512:	c0 94       	com	r12
    3514:	d0 94       	com	r13
    3516:	a1 94       	neg	r10
    3518:	bf 0a       	sbc	r11, r31
    351a:	cf 0a       	sbc	r12, r31
    351c:	df 0a       	sbc	r13, r31
    351e:	ef 0a       	sbc	r14, r31
    3520:	ff 0a       	sbc	r15, r31
    3522:	0f 0b       	sbc	r16, r31
    3524:	1f 0b       	sbc	r17, r31
    3526:	13 d0       	rcall	.+38     	; 0x354e <__udivmod64>
    3528:	07 fc       	sbrc	r0, 7
    352a:	62 d0       	rcall	.+196    	; 0x35f0 <__negdi2>
    352c:	cd b7       	in	r28, 0x3d	; 61
    352e:	de b7       	in	r29, 0x3e	; 62
    3530:	ec e0       	ldi	r30, 0x0C	; 12
    3532:	90 c0       	rjmp	.+288    	; 0x3654 <__epilogue_restores__+0xc>

00003534 <__umoddi3>:
    3534:	68 94       	set
    3536:	01 c0       	rjmp	.+2      	; 0x353a <__udivdi3_umoddi3>

00003538 <__udivdi3>:
    3538:	e8 94       	clt

0000353a <__udivdi3_umoddi3>:
    353a:	8f 92       	push	r8
    353c:	9f 92       	push	r9
    353e:	cf 93       	push	r28
    3540:	df 93       	push	r29
    3542:	05 d0       	rcall	.+10     	; 0x354e <__udivmod64>
    3544:	df 91       	pop	r29
    3546:	cf 91       	pop	r28
    3548:	9f 90       	pop	r9
    354a:	8f 90       	pop	r8
    354c:	08 95       	ret

0000354e <__udivmod64>:
    354e:	88 24       	eor	r8, r8
    3550:	99 24       	eor	r9, r9
    3552:	f4 01       	movw	r30, r8
    3554:	e4 01       	movw	r28, r8
    3556:	b0 e4       	ldi	r27, 0x40	; 64
    3558:	9f 93       	push	r25
    355a:	aa 27       	eor	r26, r26
    355c:	9a 15       	cp	r25, r10
    355e:	8b 04       	cpc	r8, r11
    3560:	9c 04       	cpc	r9, r12
    3562:	ed 05       	cpc	r30, r13
    3564:	fe 05       	cpc	r31, r14
    3566:	cf 05       	cpc	r28, r15
    3568:	d0 07       	cpc	r29, r16
    356a:	a1 07       	cpc	r26, r17
    356c:	98 f4       	brcc	.+38     	; 0x3594 <__udivmod64+0x46>
    356e:	ad 2f       	mov	r26, r29
    3570:	dc 2f       	mov	r29, r28
    3572:	cf 2f       	mov	r28, r31
    3574:	fe 2f       	mov	r31, r30
    3576:	e9 2d       	mov	r30, r9
    3578:	98 2c       	mov	r9, r8
    357a:	89 2e       	mov	r8, r25
    357c:	98 2f       	mov	r25, r24
    357e:	87 2f       	mov	r24, r23
    3580:	76 2f       	mov	r23, r22
    3582:	65 2f       	mov	r22, r21
    3584:	54 2f       	mov	r21, r20
    3586:	43 2f       	mov	r20, r19
    3588:	32 2f       	mov	r19, r18
    358a:	22 27       	eor	r18, r18
    358c:	b8 50       	subi	r27, 0x08	; 8
    358e:	31 f7       	brne	.-52     	; 0x355c <__udivmod64+0xe>
    3590:	bf 91       	pop	r27
    3592:	27 c0       	rjmp	.+78     	; 0x35e2 <__udivmod64+0x94>
    3594:	1b 2e       	mov	r1, r27
    3596:	bf 91       	pop	r27
    3598:	bb 27       	eor	r27, r27
    359a:	22 0f       	add	r18, r18
    359c:	33 1f       	adc	r19, r19
    359e:	44 1f       	adc	r20, r20
    35a0:	55 1f       	adc	r21, r21
    35a2:	66 1f       	adc	r22, r22
    35a4:	77 1f       	adc	r23, r23
    35a6:	88 1f       	adc	r24, r24
    35a8:	99 1f       	adc	r25, r25
    35aa:	88 1c       	adc	r8, r8
    35ac:	99 1c       	adc	r9, r9
    35ae:	ee 1f       	adc	r30, r30
    35b0:	ff 1f       	adc	r31, r31
    35b2:	cc 1f       	adc	r28, r28
    35b4:	dd 1f       	adc	r29, r29
    35b6:	aa 1f       	adc	r26, r26
    35b8:	bb 1f       	adc	r27, r27
    35ba:	8a 14       	cp	r8, r10
    35bc:	9b 04       	cpc	r9, r11
    35be:	ec 05       	cpc	r30, r12
    35c0:	fd 05       	cpc	r31, r13
    35c2:	ce 05       	cpc	r28, r14
    35c4:	df 05       	cpc	r29, r15
    35c6:	a0 07       	cpc	r26, r16
    35c8:	b1 07       	cpc	r27, r17
    35ca:	48 f0       	brcs	.+18     	; 0x35de <__udivmod64+0x90>
    35cc:	8a 18       	sub	r8, r10
    35ce:	9b 08       	sbc	r9, r11
    35d0:	ec 09       	sbc	r30, r12
    35d2:	fd 09       	sbc	r31, r13
    35d4:	ce 09       	sbc	r28, r14
    35d6:	df 09       	sbc	r29, r15
    35d8:	a0 0b       	sbc	r26, r16
    35da:	b1 0b       	sbc	r27, r17
    35dc:	21 60       	ori	r18, 0x01	; 1
    35de:	1a 94       	dec	r1
    35e0:	e1 f6       	brne	.-72     	; 0x359a <__udivmod64+0x4c>
    35e2:	2e f4       	brtc	.+10     	; 0x35ee <__udivmod64+0xa0>
    35e4:	94 01       	movw	r18, r8
    35e6:	af 01       	movw	r20, r30
    35e8:	be 01       	movw	r22, r28
    35ea:	cd 01       	movw	r24, r26
    35ec:	00 0c       	add	r0, r0
    35ee:	08 95       	ret

000035f0 <__negdi2>:
    35f0:	60 95       	com	r22
    35f2:	70 95       	com	r23
    35f4:	80 95       	com	r24
    35f6:	90 95       	com	r25
    35f8:	30 95       	com	r19
    35fa:	40 95       	com	r20
    35fc:	50 95       	com	r21
    35fe:	21 95       	neg	r18
    3600:	3f 4f       	sbci	r19, 0xFF	; 255
    3602:	4f 4f       	sbci	r20, 0xFF	; 255
    3604:	5f 4f       	sbci	r21, 0xFF	; 255
    3606:	6f 4f       	sbci	r22, 0xFF	; 255
    3608:	7f 4f       	sbci	r23, 0xFF	; 255
    360a:	8f 4f       	sbci	r24, 0xFF	; 255
    360c:	9f 4f       	sbci	r25, 0xFF	; 255
    360e:	08 95       	ret

00003610 <__prologue_saves__>:
    3610:	2f 92       	push	r2
    3612:	3f 92       	push	r3
    3614:	4f 92       	push	r4
    3616:	5f 92       	push	r5
    3618:	6f 92       	push	r6
    361a:	7f 92       	push	r7
    361c:	8f 92       	push	r8
    361e:	9f 92       	push	r9
    3620:	af 92       	push	r10
    3622:	bf 92       	push	r11
    3624:	cf 92       	push	r12
    3626:	df 92       	push	r13
    3628:	ef 92       	push	r14
    362a:	ff 92       	push	r15
    362c:	0f 93       	push	r16
    362e:	1f 93       	push	r17
    3630:	cf 93       	push	r28
    3632:	df 93       	push	r29
    3634:	cd b7       	in	r28, 0x3d	; 61
    3636:	de b7       	in	r29, 0x3e	; 62
    3638:	ca 1b       	sub	r28, r26
    363a:	db 0b       	sbc	r29, r27
    363c:	0f b6       	in	r0, 0x3f	; 63
    363e:	f8 94       	cli
    3640:	de bf       	out	0x3e, r29	; 62
    3642:	0f be       	out	0x3f, r0	; 63
    3644:	cd bf       	out	0x3d, r28	; 61
    3646:	09 94       	ijmp

00003648 <__epilogue_restores__>:
    3648:	2a 88       	ldd	r2, Y+18	; 0x12
    364a:	39 88       	ldd	r3, Y+17	; 0x11
    364c:	48 88       	ldd	r4, Y+16	; 0x10
    364e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3650:	6e 84       	ldd	r6, Y+14	; 0x0e
    3652:	7d 84       	ldd	r7, Y+13	; 0x0d
    3654:	8c 84       	ldd	r8, Y+12	; 0x0c
    3656:	9b 84       	ldd	r9, Y+11	; 0x0b
    3658:	aa 84       	ldd	r10, Y+10	; 0x0a
    365a:	b9 84       	ldd	r11, Y+9	; 0x09
    365c:	c8 84       	ldd	r12, Y+8	; 0x08
    365e:	df 80       	ldd	r13, Y+7	; 0x07
    3660:	ee 80       	ldd	r14, Y+6	; 0x06
    3662:	fd 80       	ldd	r15, Y+5	; 0x05
    3664:	0c 81       	ldd	r16, Y+4	; 0x04
    3666:	1b 81       	ldd	r17, Y+3	; 0x03
    3668:	aa 81       	ldd	r26, Y+2	; 0x02
    366a:	b9 81       	ldd	r27, Y+1	; 0x01
    366c:	ce 0f       	add	r28, r30
    366e:	d1 1d       	adc	r29, r1
    3670:	0f b6       	in	r0, 0x3f	; 63
    3672:	f8 94       	cli
    3674:	de bf       	out	0x3e, r29	; 62
    3676:	0f be       	out	0x3f, r0	; 63
    3678:	cd bf       	out	0x3d, r28	; 61
    367a:	ed 01       	movw	r28, r26
    367c:	08 95       	ret

0000367e <__ashrdi3>:
    367e:	97 fb       	bst	r25, 7
    3680:	10 f8       	bld	r1, 0

00003682 <__lshrdi3>:
    3682:	16 94       	lsr	r1
    3684:	00 08       	sbc	r0, r0
    3686:	0f 93       	push	r16
    3688:	08 30       	cpi	r16, 0x08	; 8
    368a:	98 f0       	brcs	.+38     	; 0x36b2 <__lshrdi3+0x30>
    368c:	08 50       	subi	r16, 0x08	; 8
    368e:	23 2f       	mov	r18, r19
    3690:	34 2f       	mov	r19, r20
    3692:	45 2f       	mov	r20, r21
    3694:	56 2f       	mov	r21, r22
    3696:	67 2f       	mov	r22, r23
    3698:	78 2f       	mov	r23, r24
    369a:	89 2f       	mov	r24, r25
    369c:	90 2d       	mov	r25, r0
    369e:	f4 cf       	rjmp	.-24     	; 0x3688 <__lshrdi3+0x6>
    36a0:	05 94       	asr	r0
    36a2:	97 95       	ror	r25
    36a4:	87 95       	ror	r24
    36a6:	77 95       	ror	r23
    36a8:	67 95       	ror	r22
    36aa:	57 95       	ror	r21
    36ac:	47 95       	ror	r20
    36ae:	37 95       	ror	r19
    36b0:	27 95       	ror	r18
    36b2:	0a 95       	dec	r16
    36b4:	aa f7       	brpl	.-22     	; 0x36a0 <__lshrdi3+0x1e>
    36b6:	0f 91       	pop	r16
    36b8:	08 95       	ret

000036ba <__cmpdi2_s8>:
    36ba:	00 24       	eor	r0, r0
    36bc:	a7 fd       	sbrc	r26, 7
    36be:	00 94       	com	r0
    36c0:	2a 17       	cp	r18, r26
    36c2:	30 05       	cpc	r19, r0
    36c4:	40 05       	cpc	r20, r0
    36c6:	50 05       	cpc	r21, r0
    36c8:	60 05       	cpc	r22, r0
    36ca:	70 05       	cpc	r23, r0
    36cc:	80 05       	cpc	r24, r0
    36ce:	90 05       	cpc	r25, r0
    36d0:	08 95       	ret

000036d2 <malloc>:
    36d2:	cf 93       	push	r28
    36d4:	df 93       	push	r29
    36d6:	82 30       	cpi	r24, 0x02	; 2
    36d8:	91 05       	cpc	r25, r1
    36da:	10 f4       	brcc	.+4      	; 0x36e0 <malloc+0xe>
    36dc:	82 e0       	ldi	r24, 0x02	; 2
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	e0 91 03 0f 	lds	r30, 0x0F03
    36e4:	f0 91 04 0f 	lds	r31, 0x0F04
    36e8:	20 e0       	ldi	r18, 0x00	; 0
    36ea:	30 e0       	ldi	r19, 0x00	; 0
    36ec:	a0 e0       	ldi	r26, 0x00	; 0
    36ee:	b0 e0       	ldi	r27, 0x00	; 0
    36f0:	30 97       	sbiw	r30, 0x00	; 0
    36f2:	39 f1       	breq	.+78     	; 0x3742 <malloc+0x70>
    36f4:	40 81       	ld	r20, Z
    36f6:	51 81       	ldd	r21, Z+1	; 0x01
    36f8:	48 17       	cp	r20, r24
    36fa:	59 07       	cpc	r21, r25
    36fc:	b8 f0       	brcs	.+46     	; 0x372c <malloc+0x5a>
    36fe:	48 17       	cp	r20, r24
    3700:	59 07       	cpc	r21, r25
    3702:	71 f4       	brne	.+28     	; 0x3720 <malloc+0x4e>
    3704:	82 81       	ldd	r24, Z+2	; 0x02
    3706:	93 81       	ldd	r25, Z+3	; 0x03
    3708:	10 97       	sbiw	r26, 0x00	; 0
    370a:	29 f0       	breq	.+10     	; 0x3716 <malloc+0x44>
    370c:	13 96       	adiw	r26, 0x03	; 3
    370e:	9c 93       	st	X, r25
    3710:	8e 93       	st	-X, r24
    3712:	12 97       	sbiw	r26, 0x02	; 2
    3714:	2c c0       	rjmp	.+88     	; 0x376e <malloc+0x9c>
    3716:	90 93 04 0f 	sts	0x0F04, r25
    371a:	80 93 03 0f 	sts	0x0F03, r24
    371e:	27 c0       	rjmp	.+78     	; 0x376e <malloc+0x9c>
    3720:	21 15       	cp	r18, r1
    3722:	31 05       	cpc	r19, r1
    3724:	31 f0       	breq	.+12     	; 0x3732 <malloc+0x60>
    3726:	42 17       	cp	r20, r18
    3728:	53 07       	cpc	r21, r19
    372a:	18 f0       	brcs	.+6      	; 0x3732 <malloc+0x60>
    372c:	a9 01       	movw	r20, r18
    372e:	db 01       	movw	r26, r22
    3730:	01 c0       	rjmp	.+2      	; 0x3734 <malloc+0x62>
    3732:	ef 01       	movw	r28, r30
    3734:	9a 01       	movw	r18, r20
    3736:	bd 01       	movw	r22, r26
    3738:	df 01       	movw	r26, r30
    373a:	02 80       	ldd	r0, Z+2	; 0x02
    373c:	f3 81       	ldd	r31, Z+3	; 0x03
    373e:	e0 2d       	mov	r30, r0
    3740:	d7 cf       	rjmp	.-82     	; 0x36f0 <malloc+0x1e>
    3742:	21 15       	cp	r18, r1
    3744:	31 05       	cpc	r19, r1
    3746:	f9 f0       	breq	.+62     	; 0x3786 <malloc+0xb4>
    3748:	28 1b       	sub	r18, r24
    374a:	39 0b       	sbc	r19, r25
    374c:	24 30       	cpi	r18, 0x04	; 4
    374e:	31 05       	cpc	r19, r1
    3750:	80 f4       	brcc	.+32     	; 0x3772 <malloc+0xa0>
    3752:	8a 81       	ldd	r24, Y+2	; 0x02
    3754:	9b 81       	ldd	r25, Y+3	; 0x03
    3756:	61 15       	cp	r22, r1
    3758:	71 05       	cpc	r23, r1
    375a:	21 f0       	breq	.+8      	; 0x3764 <malloc+0x92>
    375c:	fb 01       	movw	r30, r22
    375e:	93 83       	std	Z+3, r25	; 0x03
    3760:	82 83       	std	Z+2, r24	; 0x02
    3762:	04 c0       	rjmp	.+8      	; 0x376c <malloc+0x9a>
    3764:	90 93 04 0f 	sts	0x0F04, r25
    3768:	80 93 03 0f 	sts	0x0F03, r24
    376c:	fe 01       	movw	r30, r28
    376e:	32 96       	adiw	r30, 0x02	; 2
    3770:	44 c0       	rjmp	.+136    	; 0x37fa <malloc+0x128>
    3772:	fe 01       	movw	r30, r28
    3774:	e2 0f       	add	r30, r18
    3776:	f3 1f       	adc	r31, r19
    3778:	81 93       	st	Z+, r24
    377a:	91 93       	st	Z+, r25
    377c:	22 50       	subi	r18, 0x02	; 2
    377e:	31 09       	sbc	r19, r1
    3780:	39 83       	std	Y+1, r19	; 0x01
    3782:	28 83       	st	Y, r18
    3784:	3a c0       	rjmp	.+116    	; 0x37fa <malloc+0x128>
    3786:	20 91 01 0f 	lds	r18, 0x0F01
    378a:	30 91 02 0f 	lds	r19, 0x0F02
    378e:	23 2b       	or	r18, r19
    3790:	41 f4       	brne	.+16     	; 0x37a2 <malloc+0xd0>
    3792:	20 91 02 01 	lds	r18, 0x0102
    3796:	30 91 03 01 	lds	r19, 0x0103
    379a:	30 93 02 0f 	sts	0x0F02, r19
    379e:	20 93 01 0f 	sts	0x0F01, r18
    37a2:	20 91 00 01 	lds	r18, 0x0100
    37a6:	30 91 01 01 	lds	r19, 0x0101
    37aa:	21 15       	cp	r18, r1
    37ac:	31 05       	cpc	r19, r1
    37ae:	41 f4       	brne	.+16     	; 0x37c0 <malloc+0xee>
    37b0:	2d b7       	in	r18, 0x3d	; 61
    37b2:	3e b7       	in	r19, 0x3e	; 62
    37b4:	40 91 04 01 	lds	r20, 0x0104
    37b8:	50 91 05 01 	lds	r21, 0x0105
    37bc:	24 1b       	sub	r18, r20
    37be:	35 0b       	sbc	r19, r21
    37c0:	e0 91 01 0f 	lds	r30, 0x0F01
    37c4:	f0 91 02 0f 	lds	r31, 0x0F02
    37c8:	e2 17       	cp	r30, r18
    37ca:	f3 07       	cpc	r31, r19
    37cc:	a0 f4       	brcc	.+40     	; 0x37f6 <malloc+0x124>
    37ce:	2e 1b       	sub	r18, r30
    37d0:	3f 0b       	sbc	r19, r31
    37d2:	28 17       	cp	r18, r24
    37d4:	39 07       	cpc	r19, r25
    37d6:	78 f0       	brcs	.+30     	; 0x37f6 <malloc+0x124>
    37d8:	ac 01       	movw	r20, r24
    37da:	4e 5f       	subi	r20, 0xFE	; 254
    37dc:	5f 4f       	sbci	r21, 0xFF	; 255
    37de:	24 17       	cp	r18, r20
    37e0:	35 07       	cpc	r19, r21
    37e2:	48 f0       	brcs	.+18     	; 0x37f6 <malloc+0x124>
    37e4:	4e 0f       	add	r20, r30
    37e6:	5f 1f       	adc	r21, r31
    37e8:	50 93 02 0f 	sts	0x0F02, r21
    37ec:	40 93 01 0f 	sts	0x0F01, r20
    37f0:	81 93       	st	Z+, r24
    37f2:	91 93       	st	Z+, r25
    37f4:	02 c0       	rjmp	.+4      	; 0x37fa <malloc+0x128>
    37f6:	e0 e0       	ldi	r30, 0x00	; 0
    37f8:	f0 e0       	ldi	r31, 0x00	; 0
    37fa:	cf 01       	movw	r24, r30
    37fc:	df 91       	pop	r29
    37fe:	cf 91       	pop	r28
    3800:	08 95       	ret

00003802 <free>:
    3802:	cf 93       	push	r28
    3804:	df 93       	push	r29
    3806:	00 97       	sbiw	r24, 0x00	; 0
    3808:	09 f4       	brne	.+2      	; 0x380c <free+0xa>
    380a:	87 c0       	rjmp	.+270    	; 0x391a <free+0x118>
    380c:	fc 01       	movw	r30, r24
    380e:	32 97       	sbiw	r30, 0x02	; 2
    3810:	13 82       	std	Z+3, r1	; 0x03
    3812:	12 82       	std	Z+2, r1	; 0x02
    3814:	c0 91 03 0f 	lds	r28, 0x0F03
    3818:	d0 91 04 0f 	lds	r29, 0x0F04
    381c:	20 97       	sbiw	r28, 0x00	; 0
    381e:	81 f4       	brne	.+32     	; 0x3840 <free+0x3e>
    3820:	20 81       	ld	r18, Z
    3822:	31 81       	ldd	r19, Z+1	; 0x01
    3824:	28 0f       	add	r18, r24
    3826:	39 1f       	adc	r19, r25
    3828:	80 91 01 0f 	lds	r24, 0x0F01
    382c:	90 91 02 0f 	lds	r25, 0x0F02
    3830:	82 17       	cp	r24, r18
    3832:	93 07       	cpc	r25, r19
    3834:	79 f5       	brne	.+94     	; 0x3894 <free+0x92>
    3836:	f0 93 02 0f 	sts	0x0F02, r31
    383a:	e0 93 01 0f 	sts	0x0F01, r30
    383e:	6d c0       	rjmp	.+218    	; 0x391a <free+0x118>
    3840:	de 01       	movw	r26, r28
    3842:	20 e0       	ldi	r18, 0x00	; 0
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	ae 17       	cp	r26, r30
    3848:	bf 07       	cpc	r27, r31
    384a:	50 f4       	brcc	.+20     	; 0x3860 <free+0x5e>
    384c:	12 96       	adiw	r26, 0x02	; 2
    384e:	4d 91       	ld	r20, X+
    3850:	5c 91       	ld	r21, X
    3852:	13 97       	sbiw	r26, 0x03	; 3
    3854:	9d 01       	movw	r18, r26
    3856:	41 15       	cp	r20, r1
    3858:	51 05       	cpc	r21, r1
    385a:	09 f1       	breq	.+66     	; 0x389e <free+0x9c>
    385c:	da 01       	movw	r26, r20
    385e:	f3 cf       	rjmp	.-26     	; 0x3846 <free+0x44>
    3860:	b3 83       	std	Z+3, r27	; 0x03
    3862:	a2 83       	std	Z+2, r26	; 0x02
    3864:	40 81       	ld	r20, Z
    3866:	51 81       	ldd	r21, Z+1	; 0x01
    3868:	84 0f       	add	r24, r20
    386a:	95 1f       	adc	r25, r21
    386c:	8a 17       	cp	r24, r26
    386e:	9b 07       	cpc	r25, r27
    3870:	71 f4       	brne	.+28     	; 0x388e <free+0x8c>
    3872:	8d 91       	ld	r24, X+
    3874:	9c 91       	ld	r25, X
    3876:	11 97       	sbiw	r26, 0x01	; 1
    3878:	84 0f       	add	r24, r20
    387a:	95 1f       	adc	r25, r21
    387c:	02 96       	adiw	r24, 0x02	; 2
    387e:	91 83       	std	Z+1, r25	; 0x01
    3880:	80 83       	st	Z, r24
    3882:	12 96       	adiw	r26, 0x02	; 2
    3884:	8d 91       	ld	r24, X+
    3886:	9c 91       	ld	r25, X
    3888:	13 97       	sbiw	r26, 0x03	; 3
    388a:	93 83       	std	Z+3, r25	; 0x03
    388c:	82 83       	std	Z+2, r24	; 0x02
    388e:	21 15       	cp	r18, r1
    3890:	31 05       	cpc	r19, r1
    3892:	29 f4       	brne	.+10     	; 0x389e <free+0x9c>
    3894:	f0 93 04 0f 	sts	0x0F04, r31
    3898:	e0 93 03 0f 	sts	0x0F03, r30
    389c:	3e c0       	rjmp	.+124    	; 0x391a <free+0x118>
    389e:	d9 01       	movw	r26, r18
    38a0:	13 96       	adiw	r26, 0x03	; 3
    38a2:	fc 93       	st	X, r31
    38a4:	ee 93       	st	-X, r30
    38a6:	12 97       	sbiw	r26, 0x02	; 2
    38a8:	4d 91       	ld	r20, X+
    38aa:	5d 91       	ld	r21, X+
    38ac:	a4 0f       	add	r26, r20
    38ae:	b5 1f       	adc	r27, r21
    38b0:	ea 17       	cp	r30, r26
    38b2:	fb 07       	cpc	r31, r27
    38b4:	79 f4       	brne	.+30     	; 0x38d4 <free+0xd2>
    38b6:	80 81       	ld	r24, Z
    38b8:	91 81       	ldd	r25, Z+1	; 0x01
    38ba:	84 0f       	add	r24, r20
    38bc:	95 1f       	adc	r25, r21
    38be:	02 96       	adiw	r24, 0x02	; 2
    38c0:	d9 01       	movw	r26, r18
    38c2:	11 96       	adiw	r26, 0x01	; 1
    38c4:	9c 93       	st	X, r25
    38c6:	8e 93       	st	-X, r24
    38c8:	82 81       	ldd	r24, Z+2	; 0x02
    38ca:	93 81       	ldd	r25, Z+3	; 0x03
    38cc:	13 96       	adiw	r26, 0x03	; 3
    38ce:	9c 93       	st	X, r25
    38d0:	8e 93       	st	-X, r24
    38d2:	12 97       	sbiw	r26, 0x02	; 2
    38d4:	e0 e0       	ldi	r30, 0x00	; 0
    38d6:	f0 e0       	ldi	r31, 0x00	; 0
    38d8:	8a 81       	ldd	r24, Y+2	; 0x02
    38da:	9b 81       	ldd	r25, Y+3	; 0x03
    38dc:	00 97       	sbiw	r24, 0x00	; 0
    38de:	19 f0       	breq	.+6      	; 0x38e6 <free+0xe4>
    38e0:	fe 01       	movw	r30, r28
    38e2:	ec 01       	movw	r28, r24
    38e4:	f9 cf       	rjmp	.-14     	; 0x38d8 <free+0xd6>
    38e6:	ce 01       	movw	r24, r28
    38e8:	02 96       	adiw	r24, 0x02	; 2
    38ea:	28 81       	ld	r18, Y
    38ec:	39 81       	ldd	r19, Y+1	; 0x01
    38ee:	82 0f       	add	r24, r18
    38f0:	93 1f       	adc	r25, r19
    38f2:	20 91 01 0f 	lds	r18, 0x0F01
    38f6:	30 91 02 0f 	lds	r19, 0x0F02
    38fa:	28 17       	cp	r18, r24
    38fc:	39 07       	cpc	r19, r25
    38fe:	69 f4       	brne	.+26     	; 0x391a <free+0x118>
    3900:	30 97       	sbiw	r30, 0x00	; 0
    3902:	29 f4       	brne	.+10     	; 0x390e <free+0x10c>
    3904:	10 92 04 0f 	sts	0x0F04, r1
    3908:	10 92 03 0f 	sts	0x0F03, r1
    390c:	02 c0       	rjmp	.+4      	; 0x3912 <free+0x110>
    390e:	13 82       	std	Z+3, r1	; 0x03
    3910:	12 82       	std	Z+2, r1	; 0x02
    3912:	d0 93 02 0f 	sts	0x0F02, r29
    3916:	c0 93 01 0f 	sts	0x0F01, r28
    391a:	df 91       	pop	r29
    391c:	cf 91       	pop	r28
    391e:	08 95       	ret

00003920 <memcpy>:
    3920:	fb 01       	movw	r30, r22
    3922:	dc 01       	movw	r26, r24
    3924:	02 c0       	rjmp	.+4      	; 0x392a <memcpy+0xa>
    3926:	01 90       	ld	r0, Z+
    3928:	0d 92       	st	X+, r0
    392a:	41 50       	subi	r20, 0x01	; 1
    392c:	50 40       	sbci	r21, 0x00	; 0
    392e:	d8 f7       	brcc	.-10     	; 0x3926 <memcpy+0x6>
    3930:	08 95       	ret

00003932 <_exit>:
    3932:	f8 94       	cli

00003934 <__stop_program>:
    3934:	ff cf       	rjmp	.-2      	; 0x3934 <__stop_program>
