
RemoteController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000a8a  00800100  00002e62  00002ef6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  00800b8a  00800b8a  00003980  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003980  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002d0  00000000  00000000  000039b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000bf  00000000  00000000  00003c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000384d  00000000  00000000  00003d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001055  00000000  00000000  0000758c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000025ca  00000000  00000000  000085e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d7c  00000000  00000000  0000abac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013a5  00000000  00000000  0000b928  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000493b  00000000  00000000  0000cccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  00011608  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5b c0       	rjmp	.+182    	; 0xb8 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 10 0c 	jmp	0x1820	; 0x1820 <__vector_1>
       8:	0c 94 43 0c 	jmp	0x1886	; 0x1886 <__vector_2>
       c:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <__vector_3>
      10:	71 c0       	rjmp	.+226    	; 0xf4 <__bad_interrupt>
      12:	00 00       	nop
      14:	6f c0       	rjmp	.+222    	; 0xf4 <__bad_interrupt>
      16:	00 00       	nop
      18:	6d c0       	rjmp	.+218    	; 0xf4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6b c0       	rjmp	.+214    	; 0xf4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	69 c0       	rjmp	.+210    	; 0xf4 <__bad_interrupt>
      22:	00 00       	nop
      24:	67 c0       	rjmp	.+206    	; 0xf4 <__bad_interrupt>
      26:	00 00       	nop
      28:	65 c0       	rjmp	.+202    	; 0xf4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	63 c0       	rjmp	.+198    	; 0xf4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	61 c0       	rjmp	.+194    	; 0xf4 <__bad_interrupt>
      32:	00 00       	nop
      34:	5f c0       	rjmp	.+190    	; 0xf4 <__bad_interrupt>
      36:	00 00       	nop
      38:	5d c0       	rjmp	.+186    	; 0xf4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5b c0       	rjmp	.+182    	; 0xf4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 2c 15 	jmp	0x2a58	; 0x2a58 <__vector_16>
      44:	57 c0       	rjmp	.+174    	; 0xf4 <__bad_interrupt>
      46:	00 00       	nop
      48:	55 c0       	rjmp	.+170    	; 0xf4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	53 c0       	rjmp	.+166    	; 0xf4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__vector_20>
      54:	4f c0       	rjmp	.+158    	; 0xf4 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <__vector_22>
      5c:	4b c0       	rjmp	.+150    	; 0xf4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	49 c0       	rjmp	.+146    	; 0xf4 <__bad_interrupt>
      62:	00 00       	nop
      64:	47 c0       	rjmp	.+142    	; 0xf4 <__bad_interrupt>
      66:	00 00       	nop
      68:	45 c0       	rjmp	.+138    	; 0xf4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	43 c0       	rjmp	.+134    	; 0xf4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 6d 15 	jmp	0x2ada	; 0x2ada <__vector_28>
      74:	3f c0       	rjmp	.+126    	; 0xf4 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 d1 15 	jmp	0x2ba2	; 0x2ba2 <__vector_30>
      7c:	3b c0       	rjmp	.+118    	; 0xf4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	39 c0       	rjmp	.+114    	; 0xf4 <__bad_interrupt>
      82:	00 00       	nop
      84:	37 c0       	rjmp	.+110    	; 0xf4 <__bad_interrupt>
      86:	00 00       	nop
      88:	35 c0       	rjmp	.+106    	; 0xf4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3c 08       	sbc	r3, r12
      8e:	4f 08       	sbc	r4, r15
      90:	27 09       	sbc	r18, r7
      92:	12 09       	sbc	r17, r2
      94:	27 09       	sbc	r18, r7
      96:	27 09       	sbc	r18, r7
      98:	27 09       	sbc	r18, r7
      9a:	27 09       	sbc	r18, r7
      9c:	27 09       	sbc	r18, r7
      9e:	05 09       	sbc	r16, r5
      a0:	27 09       	sbc	r18, r7
      a2:	27 09       	sbc	r18, r7
      a4:	27 09       	sbc	r18, r7
      a6:	27 09       	sbc	r18, r7
      a8:	27 09       	sbc	r18, r7
      aa:	27 09       	sbc	r18, r7
      ac:	0a 09       	sbc	r16, r10
      ae:	27 09       	sbc	r18, r7
      b0:	91 08       	sbc	r9, r1
      b2:	27 09       	sbc	r18, r7
      b4:	27 09       	sbc	r18, r7
      b6:	cd 08       	sbc	r12, r13

000000b8 <__ctors_end>:
      b8:	11 24       	eor	r1, r1
      ba:	1f be       	out	0x3f, r1	; 63
      bc:	cf ef       	ldi	r28, 0xFF	; 255
      be:	d0 e4       	ldi	r29, 0x40	; 64
      c0:	de bf       	out	0x3e, r29	; 62
      c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
      c4:	1b e0       	ldi	r17, 0x0B	; 11
      c6:	a0 e0       	ldi	r26, 0x00	; 0
      c8:	b1 e0       	ldi	r27, 0x01	; 1
      ca:	e2 e6       	ldi	r30, 0x62	; 98
      cc:	fe e2       	ldi	r31, 0x2E	; 46
      ce:	00 e0       	ldi	r16, 0x00	; 0
      d0:	0b bf       	out	0x3b, r16	; 59
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x14>
      d4:	07 90       	elpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	aa 38       	cpi	r26, 0x8A	; 138
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0x10>

000000de <__do_clear_bss>:
      de:	2b e0       	ldi	r18, 0x0B	; 11
      e0:	aa e8       	ldi	r26, 0x8A	; 138
      e2:	bb e0       	ldi	r27, 0x0B	; 11
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	a3 3c       	cpi	r26, 0xC3	; 195
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>
      ee:	b8 d1       	rcall	.+880    	; 0x460 <main>
      f0:	0c 94 2f 17 	jmp	0x2e5e	; 0x2e5e <_exit>

000000f4 <__bad_interrupt>:
      f4:	85 cf       	rjmp	.-246    	; 0x0 <__vectors>

000000f6 <RCADCIntCallback>:
}

void
RCADCIntCallback(PVOID CallbackContext)
{
	gIsEnterPressed = TRUE;
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	80 93 8a 0b 	sts	0x0B8A, r24
      fc:	08 95       	ret

000000fe <InitDisplay>:
	return Status;
}

bool
InitDisplay()
{
      fe:	cf 93       	push	r28
     100:	df 93       	push	r29
     102:	00 d0       	rcall	.+0      	; 0x104 <InitDisplay+0x6>
     104:	00 d0       	rcall	.+0      	; 0x106 <InitDisplay+0x8>
     106:	1f 92       	push	r1
     108:	cd b7       	in	r28, 0x3d	; 61
     10a:	de b7       	in	r29, 0x3e	; 62
	
	//
	// Initialize Init Params Structure
	//
	
	InitParams.Flags.AsUINT16 = 0;
     10c:	1a 82       	std	Y+2, r1	; 0x02
     10e:	19 82       	std	Y+1, r1	; 0x01
	
	InitParams.Flags.IsDisplayShift = 1;
	
	InitParams.Flags.IsIncrementPos = 0;
	
	InitParams.Flags.IsAutoScroll = 0;
     110:	85 e4       	ldi	r24, 0x45	; 69
     112:	8f 77       	andi	r24, 0x7F	; 127
     114:	89 83       	std	Y+1, r24	; 0x01
	// Set LCD Address
	//
	
	InitParams.SlaveAddress.AsUINT8 = 0;
	
	InitParams.SlaveAddress.Address = LCD_ADDRESS;
     116:	8e e7       	ldi	r24, 0x7E	; 126
     118:	8d 83       	std	Y+5, r24	; 0x05
	
	//
	// Set Max Characters per line and number of lines
	//
	
	InitParams.MaxCharacters = MAX_CHARACTERS;
     11a:	80 e1       	ldi	r24, 0x10	; 16
     11c:	8c 83       	std	Y+4, r24	; 0x04
	
	InitParams.MaxLines = MAX_LINES;
     11e:	82 e0       	ldi	r24, 0x02	; 2
     120:	8b 83       	std	Y+3, r24	; 0x03
	
	//
	// Initialize LCD
	//

	return InitLCD(&InitParams);
     122:	ce 01       	movw	r24, r28
     124:	01 96       	adiw	r24, 0x01	; 1
     126:	0e 94 15 0b 	call	0x162a	; 0x162a <InitLCD>
}
     12a:	0f 90       	pop	r0
     12c:	0f 90       	pop	r0
     12e:	0f 90       	pop	r0
     130:	0f 90       	pop	r0
     132:	0f 90       	pop	r0
     134:	df 91       	pop	r29
     136:	cf 91       	pop	r28
     138:	08 95       	ret

0000013a <InitInputControl>:

bool
InitInputControl()
{
     13a:	0f 93       	push	r16
     13c:	1f 93       	push	r17
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	00 d0       	rcall	.+0      	; 0x144 <InitInputControl+0xa>
     144:	00 d0       	rcall	.+0      	; 0x146 <InitInputControl+0xc>
     146:	cd b7       	in	r28, 0x3d	; 61
     148:	de b7       	in	r29, 0x3e	; 62
	
	//
	// Register INT2 Interrupt
	//
	
	Status = RegisterExtInterrupt(EXTINT_INT2, FALLING_EDGE_TRIGGERED, &RCADCIntCallback, NULL, TRUE);
     14a:	01 e0       	ldi	r16, 0x01	; 1
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	4b e7       	ldi	r20, 0x7B	; 123
     152:	50 e0       	ldi	r21, 0x00	; 0
     154:	62 e0       	ldi	r22, 0x02	; 2
     156:	82 e0       	ldi	r24, 0x02	; 2
     158:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <RegisterExtInterrupt>
     15c:	18 2f       	mov	r17, r24
	
	if (!Status)
     15e:	81 11       	cpse	r24, r1
     160:	0b c0       	rjmp	.+22     	; 0x178 <InitInputControl+0x3e>
	{
		SendTrace(ERROR_LEVEL, "Failed to register external interrupts\r\n");
     162:	24 e6       	ldi	r18, 0x64	; 100
     164:	34 e0       	ldi	r19, 0x04	; 4
     166:	3f 93       	push	r19
     168:	2f 93       	push	r18
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	8f 93       	push	r24
     16e:	3e d7       	rcall	.+3708   	; 0xfec <SendTrace>
		
		goto Exit;
     170:	0f 90       	pop	r0
     172:	0f 90       	pop	r0
     174:	0f 90       	pop	r0
     176:	18 c0       	rjmp	.+48     	; 0x1a8 <InitInputControl+0x6e>
	
	//
	// Initialize ADC Params
	//
	
	AdcParams.Flags.IsLeftAdjustResult = 0;
     178:	89 81       	ldd	r24, Y+1	; 0x01
     17a:	8e 7f       	andi	r24, 0xFE	; 254
     17c:	89 83       	std	Y+1, r24	; 0x01
	
	AdcParams.RefVoltSelect = AREF_VOLT;
     17e:	1a 82       	std	Y+2, r1	; 0x02
	
	AdcParams.Prescalar = DIV_FACTOR_0;
     180:	1b 82       	std	Y+3, r1	; 0x03
	
	AdcParams.EnabledChannelsBitVector = (0x1 << ADC_CHANNEL_0) | (0x1 << ADC_CHANNEL_1);
     182:	83 e0       	ldi	r24, 0x03	; 3
     184:	8c 83       	std	Y+4, r24	; 0x04
	
	Status = InitADC(&AdcParams);
     186:	ce 01       	movw	r24, r28
     188:	01 96       	adiw	r24, 0x01	; 1
     18a:	0e 94 42 09 	call	0x1284	; 0x1284 <InitADC>
     18e:	18 2f       	mov	r17, r24
	
	if (!Status)
     190:	81 11       	cpse	r24, r1
     192:	0a c0       	rjmp	.+20     	; 0x1a8 <InitInputControl+0x6e>
	{
		SendTrace(ERROR_LEVEL, "Failed to Init ADC\r\n");
     194:	2d e8       	ldi	r18, 0x8D	; 141
     196:	34 e0       	ldi	r19, 0x04	; 4
     198:	3f 93       	push	r19
     19a:	2f 93       	push	r18
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	8f 93       	push	r24
     1a0:	25 d7       	rcall	.+3658   	; 0xfec <SendTrace>
     1a2:	0f 90       	pop	r0
     1a4:	0f 90       	pop	r0
     1a6:	0f 90       	pop	r0
	}
	
Exit:

	return Status;
}
     1a8:	81 2f       	mov	r24, r17
     1aa:	0f 90       	pop	r0
     1ac:	0f 90       	pop	r0
     1ae:	0f 90       	pop	r0
     1b0:	0f 90       	pop	r0
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	1f 91       	pop	r17
     1b8:	0f 91       	pop	r16
     1ba:	08 95       	ret

000001bc <VerifyAckData>:
	return Status;
}

bool
VerifyAckData()
{
     1bc:	1f 93       	push	r17
     1be:	cf 93       	push	r28
     1c0:	df 93       	push	r29
     1c2:	00 d0       	rcall	.+0      	; 0x1c4 <VerifyAckData+0x8>
     1c4:	00 d0       	rcall	.+0      	; 0x1c6 <VerifyAckData+0xa>
     1c6:	00 d0       	rcall	.+0      	; 0x1c8 <VerifyAckData+0xc>
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
	bool Status;
	
	unsigned short RxValue = 0;
     1cc:	1a 82       	std	Y+2, r1	; 0x02
     1ce:	19 82       	std	Y+1, r1	; 0x01
	
	unsigned long Length = sizeof(unsigned short);
     1d0:	82 e0       	ldi	r24, 0x02	; 2
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	a0 e0       	ldi	r26, 0x00	; 0
     1d6:	b0 e0       	ldi	r27, 0x00	; 0
     1d8:	8b 83       	std	Y+3, r24	; 0x03
     1da:	9c 83       	std	Y+4, r25	; 0x04
     1dc:	ad 83       	std	Y+5, r26	; 0x05
     1de:	be 83       	std	Y+6, r27	; 0x06
	
	SendTrace(INFO_LEVEL, "Verify Ack Data\r\n");
     1e0:	82 ea       	ldi	r24, 0xA2	; 162
     1e2:	94 e0       	ldi	r25, 0x04	; 4
     1e4:	9f 93       	push	r25
     1e6:	8f 93       	push	r24
     1e8:	84 e0       	ldi	r24, 0x04	; 4
     1ea:	8f 93       	push	r24
     1ec:	ff d6       	rcall	.+3582   	; 0xfec <SendTrace>
	
	//
	// Now receive the data
	//
	
	Status = Xymk5vXyfstReceive(&RxValue, &Length, GENERAL_MESSAGE);
     1ee:	41 e0       	ldi	r20, 0x01	; 1
     1f0:	be 01       	movw	r22, r28
     1f2:	6d 5f       	subi	r22, 0xFD	; 253
     1f4:	7f 4f       	sbci	r23, 0xFF	; 255
     1f6:	ce 01       	movw	r24, r28
     1f8:	01 96       	adiw	r24, 0x01	; 1
     1fa:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <Xymk5vXyfstReceive>
     1fe:	18 2f       	mov	r17, r24
	
	if (!Status)
     200:	0f 90       	pop	r0
     202:	0f 90       	pop	r0
     204:	0f 90       	pop	r0
     206:	81 11       	cpse	r24, r1
     208:	0b c0       	rjmp	.+22     	; 0x220 <VerifyAckData+0x64>
	{
		SendTrace(ERROR_LEVEL, "VerifyAckData - Receive Data Failed\r\n");
     20a:	24 eb       	ldi	r18, 0xB4	; 180
     20c:	34 e0       	ldi	r19, 0x04	; 4
     20e:	3f 93       	push	r19
     210:	2f 93       	push	r18
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	8f 93       	push	r24
     216:	ea d6       	rcall	.+3540   	; 0xfec <SendTrace>
		
		goto Exit;
     218:	0f 90       	pop	r0
     21a:	0f 90       	pop	r0
     21c:	0f 90       	pop	r0
     21e:	3c c0       	rjmp	.+120    	; 0x298 <VerifyAckData+0xdc>
	}
	
	if (Length != sizeof(unsigned short))
     220:	4b 81       	ldd	r20, Y+3	; 0x03
     222:	5c 81       	ldd	r21, Y+4	; 0x04
     224:	6d 81       	ldd	r22, Y+5	; 0x05
     226:	7e 81       	ldd	r23, Y+6	; 0x06
     228:	42 30       	cpi	r20, 0x02	; 2
     22a:	51 05       	cpc	r21, r1
     22c:	61 05       	cpc	r22, r1
     22e:	71 05       	cpc	r23, r1
     230:	89 f0       	breq	.+34     	; 0x254 <VerifyAckData+0x98>
	{
		SendTrace(ERROR_LEVEL, "VerifyAckData - Receive Data Failed - Received Length = %d\r\n", Length);
     232:	7f 93       	push	r23
     234:	6f 93       	push	r22
     236:	5f 93       	push	r21
     238:	4f 93       	push	r20
     23a:	2a ed       	ldi	r18, 0xDA	; 218
     23c:	34 e0       	ldi	r19, 0x04	; 4
     23e:	3f 93       	push	r19
     240:	2f 93       	push	r18
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	8f 93       	push	r24
     246:	d2 d6       	rcall	.+3492   	; 0xfec <SendTrace>
		
		goto Exit;	
     248:	0f b6       	in	r0, 0x3f	; 63
     24a:	f8 94       	cli
     24c:	de bf       	out	0x3e, r29	; 62
     24e:	0f be       	out	0x3f, r0	; 63
     250:	cd bf       	out	0x3d, r28	; 61
     252:	22 c0       	rjmp	.+68     	; 0x298 <VerifyAckData+0xdc>
	}
	
	if (RxValue != ADC_MAX_VALUE + 1)
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	9a 81       	ldd	r25, Y+2	; 0x02
     258:	8d 3f       	cpi	r24, 0xFD	; 253
     25a:	93 40       	sbci	r25, 0x03	; 3
     25c:	61 f0       	breq	.+24     	; 0x276 <VerifyAckData+0xba>
	{
		SendTrace(ERROR_LEVEL, "VerifyActData - Invalid Acknowledgment\r\n");
     25e:	87 e1       	ldi	r24, 0x17	; 23
     260:	95 e0       	ldi	r25, 0x05	; 5
     262:	9f 93       	push	r25
     264:	8f 93       	push	r24
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	8f 93       	push	r24
     26a:	c0 d6       	rcall	.+3456   	; 0xfec <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
     26c:	0f 90       	pop	r0
     26e:	0f 90       	pop	r0
     270:	0f 90       	pop	r0
	
	if (RxValue != ADC_MAX_VALUE + 1)
	{
		SendTrace(ERROR_LEVEL, "VerifyActData - Invalid Acknowledgment\r\n");
		
		Status = FALSE;
     272:	10 e0       	ldi	r17, 0x00	; 0
		
		goto Exit;
     274:	11 c0       	rjmp	.+34     	; 0x298 <VerifyAckData+0xdc>
	}
	
	SendTrace(INFO_LEVEL, "VerifyActData - Ack Value = %d\r\n", RxValue);
     276:	83 e0       	ldi	r24, 0x03	; 3
     278:	8f 93       	push	r24
     27a:	8d ef       	ldi	r24, 0xFD	; 253
     27c:	8f 93       	push	r24
     27e:	80 e4       	ldi	r24, 0x40	; 64
     280:	95 e0       	ldi	r25, 0x05	; 5
     282:	9f 93       	push	r25
     284:	8f 93       	push	r24
     286:	84 e0       	ldi	r24, 0x04	; 4
     288:	8f 93       	push	r24
     28a:	b0 d6       	rcall	.+3424   	; 0xfec <SendTrace>
     28c:	0f 90       	pop	r0
     28e:	0f 90       	pop	r0
     290:	0f 90       	pop	r0
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
	
	Status = TRUE;
     296:	11 e0       	ldi	r17, 0x01	; 1
	
Exit:

	return Status;
}
     298:	81 2f       	mov	r24, r17
     29a:	26 96       	adiw	r28, 0x06	; 6
     29c:	0f b6       	in	r0, 0x3f	; 63
     29e:	f8 94       	cli
     2a0:	de bf       	out	0x3e, r29	; 62
     2a2:	0f be       	out	0x3f, r0	; 63
     2a4:	cd bf       	out	0x3d, r28	; 61
     2a6:	df 91       	pop	r29
     2a8:	cf 91       	pop	r28
     2aa:	1f 91       	pop	r17
     2ac:	08 95       	ret

000002ae <ConnectToRCCar>:
	return Status;
}

bool
ConnectToRCCar()
{
     2ae:	1f 93       	push	r17
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	00 d0       	rcall	.+0      	; 0x2b6 <ConnectToRCCar+0x8>
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
	bool Status;
	
	unsigned short Value = ADC_MAX_VALUE;
     2ba:	8c ef       	ldi	r24, 0xFC	; 252
     2bc:	93 e0       	ldi	r25, 0x03	; 3
     2be:	9a 83       	std	Y+2, r25	; 0x02
     2c0:	89 83       	std	Y+1, r24	; 0x01
		
	//
	// Transmit Data
	//
	
	SendTrace(INFO_LEVEL, "ConnectToRCCar - Transmit Data\r\n");
     2c2:	81 e6       	ldi	r24, 0x61	; 97
     2c4:	95 e0       	ldi	r25, 0x05	; 5
     2c6:	9f 93       	push	r25
     2c8:	8f 93       	push	r24
     2ca:	84 e0       	ldi	r24, 0x04	; 4
     2cc:	8f 93       	push	r24
     2ce:	8e d6       	rcall	.+3356   	; 0xfec <SendTrace>
	
	Status = Xymk5vXyfstTransmit((PVOID)&Value, sizeof(unsigned short), GENERAL_MESSAGE);
     2d0:	21 e0       	ldi	r18, 0x01	; 1
     2d2:	42 e0       	ldi	r20, 0x02	; 2
     2d4:	50 e0       	ldi	r21, 0x00	; 0
     2d6:	60 e0       	ldi	r22, 0x00	; 0
     2d8:	70 e0       	ldi	r23, 0x00	; 0
     2da:	ce 01       	movw	r24, r28
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	0e 94 a9 0c 	call	0x1952	; 0x1952 <Xymk5vXyfstTransmit>
     2e2:	18 2f       	mov	r17, r24
		
	if (!Status)
     2e4:	0f 90       	pop	r0
     2e6:	0f 90       	pop	r0
     2e8:	0f 90       	pop	r0
     2ea:	81 11       	cpse	r24, r1
     2ec:	0b c0       	rjmp	.+22     	; 0x304 <ConnectToRCCar+0x56>
	{
		SendTrace(ERROR_LEVEL, "ConnectToRCCar - Transmit Data Failed\r\n");
     2ee:	22 e8       	ldi	r18, 0x82	; 130
     2f0:	35 e0       	ldi	r19, 0x05	; 5
     2f2:	3f 93       	push	r19
     2f4:	2f 93       	push	r18
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	8f 93       	push	r24
     2fa:	78 d6       	rcall	.+3312   	; 0xfec <SendTrace>
			
		goto Exit;
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
     302:	0c c0       	rjmp	.+24     	; 0x31c <ConnectToRCCar+0x6e>
		
	//
	// Wait until acknowledgment data arrives
	//
	
	SendTrace(ERROR_LEVEL, "ConnectToRCCar - Wait For Data\r\n");
     304:	8a ea       	ldi	r24, 0xAA	; 170
     306:	95 e0       	ldi	r25, 0x05	; 5
     308:	9f 93       	push	r25
     30a:	8f 93       	push	r24
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	8f 93       	push	r24
     310:	6d d6       	rcall	.+3290   	; 0xfec <SendTrace>
	
	Status = VerifyAckData();
     312:	54 df       	rcall	.-344    	; 0x1bc <VerifyAckData>
     314:	18 2f       	mov	r17, r24
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	0f 90       	pop	r0
	
Exit:
	
	return Status;
}
     31c:	81 2f       	mov	r24, r17
     31e:	0f 90       	pop	r0
     320:	0f 90       	pop	r0
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	1f 91       	pop	r17
     328:	08 95       	ret

0000032a <UpdateLCD>:
	}
}

void
UpdateLCD(unsigned int Voltage)
{	
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
     32e:	c8 2f       	mov	r28, r24
     330:	d9 2f       	mov	r29, r25
	LCDClearDisplay();
     332:	0e 94 1a 0a 	call	0x1434	; 0x1434 <LCDClearDisplay>
	
	LCDSetCursorPosition(0, 0);
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	0e 94 33 0a 	call	0x1466	; 0x1466 <LCDSetCursorPosition>
	
	SendTrace(INFO_LEVEL, "Voltage = %f.\r\n", Voltage);
     33e:	df 93       	push	r29
     340:	cf 93       	push	r28
     342:	8b ec       	ldi	r24, 0xCB	; 203
     344:	95 e0       	ldi	r25, 0x05	; 5
     346:	9f 93       	push	r25
     348:	8f 93       	push	r24
     34a:	84 e0       	ldi	r24, 0x04	; 4
     34c:	8f 93       	push	r24
     34e:	4e d6       	rcall	.+3228   	; 0xfec <SendTrace>
	
	LCDPrint("Charging...");
     350:	8b ed       	ldi	r24, 0xDB	; 219
     352:	95 e0       	ldi	r25, 0x05	; 5
     354:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <LCDPrint>
	
	LCDSetCursorPosition(1, 0);
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	0e 94 33 0a 	call	0x1466	; 0x1466 <LCDSetCursorPosition>
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
     368:	0f 90       	pop	r0
	
	//LCDPrint(&Direction[0]);
}
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	08 95       	ret

00000370 <DriveRCCar>:
	return Status;
}

void
DriveRCCar()
{
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
     378:	2a 97       	sbiw	r28, 0x0a	; 10
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	f8 94       	cli
     37e:	de bf       	out	0x3e, r29	; 62
     380:	0f be       	out	0x3f, r0	; 63
     382:	cd bf       	out	0x3d, r28	; 61
			
		//
		// Now receive the data
		//
			
		Length = sizeof(unsigned int);
     384:	81 2c       	mov	r8, r1
     386:	91 2c       	mov	r9, r1
     388:	54 01       	movw	r10, r8
     38a:	68 94       	set
     38c:	81 f8       	bld	r8, 1
			continue;	
		}
			
		if (!Status)
		{
			SendTrace(ERROR_LEVEL, "DriveRCCar - Receive Data Failed\r\n");
     38e:	0f 2e       	mov	r0, r31
     390:	f6 e3       	ldi	r31, 0x36	; 54
     392:	cf 2e       	mov	r12, r31
     394:	f6 e0       	ldi	r31, 0x06	; 6
     396:	df 2e       	mov	r13, r31
     398:	f0 2d       	mov	r31, r0
			
		Status = Xymk5vXyfstReceive(&Voltage, &Length, GENERAL_MESSAGE);
		
		if (Length != sizeof(unsigned int))
		{	
			SendTrace(ERROR_LEVEL, "DriveRCCar - Received Length Invalid - Length = %d\r\n", Length);
     39a:	0f 2e       	mov	r0, r31
     39c:	f1 e0       	ldi	r31, 0x01	; 1
     39e:	ef 2e       	mov	r14, r31
     3a0:	f6 e0       	ldi	r31, 0x06	; 6
     3a2:	ff 2e       	mov	r15, r31
     3a4:	f0 2d       	mov	r31, r0
		
		Status = Xymk5vXyfstTransmit((PVOID) &InputValue[0], NUM_INPUT_VALUES * sizeof(unsigned int), GENERAL_MESSAGE); 
		
		if (!Status)
		{
			SendTrace(ERROR_LEVEL, "Failed to Transmit Data\r\n");
     3a6:	07 ee       	ldi	r16, 0xE7	; 231
     3a8:	15 e0       	ldi	r17, 0x05	; 5
	
		//
		// Read X-axis Value
		//
			
		ADCRead(ADC_CHANNEL_0, &InputValue[0]);
     3aa:	be 01       	movw	r22, r28
     3ac:	6b 5f       	subi	r22, 0xFB	; 251
     3ae:	7f 4f       	sbci	r23, 0xFF	; 255
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	85 d7       	rcall	.+3850   	; 0x12be <ADCRead>
			
		ADCRead(ADC_CHANNEL_0, &InputValue[0]);
     3b4:	be 01       	movw	r22, r28
     3b6:	6b 5f       	subi	r22, 0xFB	; 251
     3b8:	7f 4f       	sbci	r23, 0xFF	; 255
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	80 d7       	rcall	.+3840   	; 0x12be <ADCRead>
			
		//
		// Read Y-axis Value
		//
			
		ADCRead(ADC_CHANNEL_1, &InputValue[1]);
     3be:	be 01       	movw	r22, r28
     3c0:	69 5f       	subi	r22, 0xF9	; 249
     3c2:	7f 4f       	sbci	r23, 0xFF	; 255
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	7b d7       	rcall	.+3830   	; 0x12be <ADCRead>
			
		ADCRead(ADC_CHANNEL_1, &InputValue[1]);
     3c8:	be 01       	movw	r22, r28
     3ca:	69 5f       	subi	r22, 0xF9	; 249
     3cc:	7f 4f       	sbci	r23, 0xFF	; 255
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	76 d7       	rcall	.+3820   	; 0x12be <ADCRead>
		
		//
		// Transmit Data
		//
		
		Status = Xymk5vXyfstTransmit((PVOID) &InputValue[0], NUM_INPUT_VALUES * sizeof(unsigned int), GENERAL_MESSAGE); 
     3d2:	21 e0       	ldi	r18, 0x01	; 1
     3d4:	44 e0       	ldi	r20, 0x04	; 4
     3d6:	50 e0       	ldi	r21, 0x00	; 0
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	ce 01       	movw	r24, r28
     3de:	05 96       	adiw	r24, 0x05	; 5
     3e0:	0e 94 a9 0c 	call	0x1952	; 0x1952 <Xymk5vXyfstTransmit>
		
		if (!Status)
     3e4:	81 11       	cpse	r24, r1
     3e6:	09 c0       	rjmp	.+18     	; 0x3fa <DriveRCCar+0x8a>
		{
			SendTrace(ERROR_LEVEL, "Failed to Transmit Data\r\n");
     3e8:	1f 93       	push	r17
     3ea:	0f 93       	push	r16
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	8f 93       	push	r24
     3f0:	fd d5       	rcall	.+3066   	; 0xfec <SendTrace>
			
			continue;
     3f2:	0f 90       	pop	r0
     3f4:	0f 90       	pop	r0
     3f6:	0f 90       	pop	r0
     3f8:	d8 cf       	rjmp	.-80     	; 0x3aa <DriveRCCar+0x3a>
			
		//
		// Now receive the data
		//
			
		Length = sizeof(unsigned int);
     3fa:	89 82       	std	Y+1, r8	; 0x01
     3fc:	9a 82       	std	Y+2, r9	; 0x02
     3fe:	ab 82       	std	Y+3, r10	; 0x03
     400:	bc 82       	std	Y+4, r11	; 0x04
			
		Status = Xymk5vXyfstReceive(&Voltage, &Length, GENERAL_MESSAGE);
     402:	41 e0       	ldi	r20, 0x01	; 1
     404:	be 01       	movw	r22, r28
     406:	6f 5f       	subi	r22, 0xFF	; 255
     408:	7f 4f       	sbci	r23, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	09 96       	adiw	r24, 0x09	; 9
     40e:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <Xymk5vXyfstReceive>
		
		if (Length != sizeof(unsigned int))
     412:	49 81       	ldd	r20, Y+1	; 0x01
     414:	5a 81       	ldd	r21, Y+2	; 0x02
     416:	6b 81       	ldd	r22, Y+3	; 0x03
     418:	7c 81       	ldd	r23, Y+4	; 0x04
     41a:	42 30       	cpi	r20, 0x02	; 2
     41c:	51 05       	cpc	r21, r1
     41e:	61 05       	cpc	r22, r1
     420:	71 05       	cpc	r23, r1
     422:	79 f0       	breq	.+30     	; 0x442 <DriveRCCar+0xd2>
		{	
			SendTrace(ERROR_LEVEL, "DriveRCCar - Received Length Invalid - Length = %d\r\n", Length);
     424:	7f 93       	push	r23
     426:	6f 93       	push	r22
     428:	5f 93       	push	r21
     42a:	4f 93       	push	r20
     42c:	ff 92       	push	r15
     42e:	ef 92       	push	r14
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	8f 93       	push	r24
     434:	db d5       	rcall	.+2998   	; 0xfec <SendTrace>
			
			continue;	
     436:	0f b6       	in	r0, 0x3f	; 63
     438:	f8 94       	cli
     43a:	de bf       	out	0x3e, r29	; 62
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	cd bf       	out	0x3d, r28	; 61
     440:	b4 cf       	rjmp	.-152    	; 0x3aa <DriveRCCar+0x3a>
		}
			
		if (!Status)
     442:	81 11       	cpse	r24, r1
     444:	09 c0       	rjmp	.+18     	; 0x458 <DriveRCCar+0xe8>
		{
			SendTrace(ERROR_LEVEL, "DriveRCCar - Receive Data Failed\r\n");
     446:	df 92       	push	r13
     448:	cf 92       	push	r12
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	8f 93       	push	r24
     44e:	ce d5       	rcall	.+2972   	; 0xfec <SendTrace>
				
			continue;
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	a9 cf       	rjmp	.-174    	; 0x3aa <DriveRCCar+0x3a>
		}
			
		UpdateLCD(Voltage);
     458:	89 85       	ldd	r24, Y+9	; 0x09
     45a:	9a 85       	ldd	r25, Y+10	; 0x0a
     45c:	66 df       	rcall	.-308    	; 0x32a <UpdateLCD>
     45e:	a5 cf       	rjmp	.-182    	; 0x3aa <DriveRCCar+0x3a>

00000460 <main>:
#include "ExtInt.h"

bool gIsEnterPressed = FALSE;

int main(void)
{
     460:	cf 93       	push	r28
	
	//
	// First Initialize Tracing
	//
	
	InitTrace(F_CPU, ERROR_LEVEL | INFO_LEVEL);
     462:	45 e0       	ldi	r20, 0x05	; 5
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	72 e1       	ldi	r23, 0x12	; 18
     468:	8a e7       	ldi	r24, 0x7A	; 122
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	aa d2       	rcall	.+1364   	; 0x9c2 <InitTrace>
	
	SendTrace(INFO_LEVEL, "RC Car Remote Controller\r\n");
     46e:	89 e5       	ldi	r24, 0x59	; 89
     470:	96 e0       	ldi	r25, 0x06	; 6
     472:	9f 93       	push	r25
     474:	8f 93       	push	r24
     476:	c4 e0       	ldi	r28, 0x04	; 4
     478:	cf 93       	push	r28
     47a:	b8 d5       	rcall	.+2928   	; 0xfec <SendTrace>
	
	SendTrace(INFO_LEVEL, "-----------------\r\n");
     47c:	84 e7       	ldi	r24, 0x74	; 116
     47e:	96 e0       	ldi	r25, 0x06	; 6
     480:	9f 93       	push	r25
     482:	8f 93       	push	r24
     484:	cf 93       	push	r28
     486:	b2 d5       	rcall	.+2916   	; 0xfec <SendTrace>
	
	//
	// Initialize Interrupts
	//
	
	InitExtInt();
     488:	0e 94 57 0b 	call	0x16ae	; 0x16ae <InitExtInt>
	
	//
	// Initialize TWI
	//
	
	Status = InitTWI(TWI_MASTER, NULL, NULL);
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	70 e0       	ldi	r23, 0x00	; 0
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	d3 d0       	rcall	.+422    	; 0x63e <InitTWI>
	
	if (!Status)
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
     4a2:	0f 90       	pop	r0
     4a4:	81 11       	cpse	r24, r1
     4a6:	0b c0       	rjmp	.+22     	; 0x4be <main+0x5e>
	{
		SendTrace(ERROR_LEVEL,"main - TWI Initialization Failed\r\n");
     4a8:	88 e8       	ldi	r24, 0x88	; 136
     4aa:	96 e0       	ldi	r25, 0x06	; 6
     4ac:	9f 93       	push	r25
     4ae:	8f 93       	push	r24
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	8f 93       	push	r24
     4b4:	9b d5       	rcall	.+2870   	; 0xfec <SendTrace>
		
		goto Exit;
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	bc c0       	rjmp	.+376    	; 0x636 <main+0x1d6>
	}
	
	SendTrace(INFO_LEVEL, "Init TWI Completed\r\n");
     4be:	8b ea       	ldi	r24, 0xAB	; 171
     4c0:	96 e0       	ldi	r25, 0x06	; 6
     4c2:	9f 93       	push	r25
     4c4:	8f 93       	push	r24
     4c6:	84 e0       	ldi	r24, 0x04	; 4
     4c8:	8f 93       	push	r24
     4ca:	90 d5       	rcall	.+2848   	; 0xfec <SendTrace>
	
	//
	// Initialize Display
	//
	
	Status = InitDisplay();
     4cc:	18 de       	rcall	.-976    	; 0xfe <InitDisplay>
	
	if (!Status)
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	81 11       	cpse	r24, r1
     4d6:	0b c0       	rjmp	.+22     	; 0x4ee <main+0x8e>
	{
		SendTrace(ERROR_LEVEL,"main - Display Initialization Failed\r\n");
     4d8:	80 ec       	ldi	r24, 0xC0	; 192
     4da:	96 e0       	ldi	r25, 0x06	; 6
     4dc:	9f 93       	push	r25
     4de:	8f 93       	push	r24
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	8f 93       	push	r24
     4e4:	83 d5       	rcall	.+2822   	; 0xfec <SendTrace>
		
		goto Exit;
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0
     4ea:	0f 90       	pop	r0
     4ec:	a4 c0       	rjmp	.+328    	; 0x636 <main+0x1d6>
	}
	
	LCDClearDisplay();
     4ee:	a2 d7       	rcall	.+3908   	; 0x1434 <LCDClearDisplay>
	
	LCDSetCursorPosition(0, 0);
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	b8 d7       	rcall	.+3952   	; 0x1466 <LCDSetCursorPosition>
	
	LCDPrint("Welcome!!");
     4f6:	87 ee       	ldi	r24, 0xE7	; 231
     4f8:	96 e0       	ldi	r25, 0x06	; 6
     4fa:	fb d7       	rcall	.+4086   	; 0x14f2 <LCDPrint>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4fc:	2f ef       	ldi	r18, 0xFF	; 255
     4fe:	89 e6       	ldi	r24, 0x69	; 105
     500:	98 e1       	ldi	r25, 0x18	; 24
     502:	21 50       	subi	r18, 0x01	; 1
     504:	80 40       	sbci	r24, 0x00	; 0
     506:	90 40       	sbci	r25, 0x00	; 0
     508:	e1 f7       	brne	.-8      	; 0x502 <main+0xa2>
     50a:	00 c0       	rjmp	.+0      	; 0x50c <main+0xac>
     50c:	00 00       	nop
	
	_delay_ms(1000);
	
	LCDClearDisplay();
     50e:	92 d7       	rcall	.+3876   	; 0x1434 <LCDClearDisplay>
	
	LCDSetCursorPosition(0, 0);
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	a8 d7       	rcall	.+3920   	; 0x1466 <LCDSetCursorPosition>
	
	LCDPrint("Initializing...");
     516:	81 ef       	ldi	r24, 0xF1	; 241
     518:	96 e0       	ldi	r25, 0x06	; 6
     51a:	eb d7       	rcall	.+4054   	; 0x14f2 <LCDPrint>
	
	SendTrace(INFO_LEVEL, "Init Display Completed\r\n");
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	97 e0       	ldi	r25, 0x07	; 7
     520:	9f 93       	push	r25
     522:	8f 93       	push	r24
     524:	84 e0       	ldi	r24, 0x04	; 4
     526:	8f 93       	push	r24
     528:	61 d5       	rcall	.+2754   	; 0xfec <SendTrace>
	
	//
	// Initialize Input Control
	//
	
	Status = InitInputControl();
     52a:	07 de       	rcall	.-1010   	; 0x13a <InitInputControl>
	
	if (!Status)
     52c:	0f 90       	pop	r0
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	81 11       	cpse	r24, r1
     534:	12 c0       	rjmp	.+36     	; 0x55a <main+0xfa>
	{
		SendTrace(ERROR_LEVEL, "main - Input Controller Initialization Failed\r\n");
     536:	8a e1       	ldi	r24, 0x1A	; 26
     538:	97 e0       	ldi	r25, 0x07	; 7
     53a:	9f 93       	push	r25
     53c:	8f 93       	push	r24
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	8f 93       	push	r24
     542:	54 d5       	rcall	.+2728   	; 0xfec <SendTrace>
		
		LCDClearDisplay();
     544:	77 d7       	rcall	.+3822   	; 0x1434 <LCDClearDisplay>
		
		LCDSetCursorPosition(0, 0);
     546:	60 e0       	ldi	r22, 0x00	; 0
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	8d d7       	rcall	.+3866   	; 0x1466 <LCDSetCursorPosition>
		
		LCDPrint("Operation Failed");
     54c:	8a e4       	ldi	r24, 0x4A	; 74
     54e:	97 e0       	ldi	r25, 0x07	; 7
     550:	d0 d7       	rcall	.+4000   	; 0x14f2 <LCDPrint>
		
		goto Exit;
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	6e c0       	rjmp	.+220    	; 0x636 <main+0x1d6>
	}
	
	SendTrace(INFO_LEVEL, "Init Input Control Completed\r\n");
     55a:	8b e5       	ldi	r24, 0x5B	; 91
     55c:	97 e0       	ldi	r25, 0x07	; 7
     55e:	9f 93       	push	r25
     560:	8f 93       	push	r24
     562:	c4 e0       	ldi	r28, 0x04	; 4
     564:	cf 93       	push	r28
     566:	42 d5       	rcall	.+2692   	; 0xfec <SendTrace>
	
	//
	// Init Transceiver
	//
	
	InitXymk5vXyfst(MY_ADDRESS, DEST_ADDRESS, TRUE);
     568:	41 e0       	ldi	r20, 0x01	; 1
     56a:	61 e0       	ldi	r22, 0x01	; 1
     56c:	8f e0       	ldi	r24, 0x0F	; 15
     56e:	0e 94 53 10 	call	0x20a6	; 0x20a6 <InitXymk5vXyfst>
		LCDPrint("Operation Failed");
		
		goto Exit;
	}
	
	SendTrace(INFO_LEVEL,"Initialization Completed\r\n");
     572:	8a e7       	ldi	r24, 0x7A	; 122
     574:	97 e0       	ldi	r25, 0x07	; 7
     576:	9f 93       	push	r25
     578:	8f 93       	push	r24
     57a:	cf 93       	push	r28
     57c:	37 d5       	rcall	.+2670   	; 0xfec <SendTrace>
	
	//
	// Now wait for Enter to be pressed to connect with the RCCar
	//
	
	LCDClearDisplay();
     57e:	5a d7       	rcall	.+3764   	; 0x1434 <LCDClearDisplay>
	
	LCDSetCursorPosition(0, 0);
     580:	60 e0       	ldi	r22, 0x00	; 0
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	70 d7       	rcall	.+3808   	; 0x1466 <LCDSetCursorPosition>
	
	LCDPrint("Press Enter To");
     586:	85 e9       	ldi	r24, 0x95	; 149
     588:	97 e0       	ldi	r25, 0x07	; 7
     58a:	b3 d7       	rcall	.+3942   	; 0x14f2 <LCDPrint>
	
	LCDSetCursorPosition(1, 0);
     58c:	60 e0       	ldi	r22, 0x00	; 0
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	6a d7       	rcall	.+3796   	; 0x1466 <LCDSetCursorPosition>
	
	LCDPrint("Connect");
     592:	84 ea       	ldi	r24, 0xA4	; 164
     594:	97 e0       	ldi	r25, 0x07	; 7
     596:	ad d7       	rcall	.+3930   	; 0x14f2 <LCDPrint>
	
	SendTrace(INFO_LEVEL, "Flag = %d\r\n", gIsEnterPressed);
     598:	80 91 8a 0b 	lds	r24, 0x0B8A
     59c:	1f 92       	push	r1
     59e:	8f 93       	push	r24
     5a0:	8c ea       	ldi	r24, 0xAC	; 172
     5a2:	97 e0       	ldi	r25, 0x07	; 7
     5a4:	9f 93       	push	r25
     5a6:	8f 93       	push	r24
     5a8:	cf 93       	push	r28
     5aa:	20 d5       	rcall	.+2624   	; 0xfec <SendTrace>
	
	WaitForEvent(gIsEnterPressed);
     5ac:	8d b7       	in	r24, 0x3d	; 61
     5ae:	9e b7       	in	r25, 0x3e	; 62
     5b0:	0b 96       	adiw	r24, 0x0b	; 11
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	9e bf       	out	0x3e, r25	; 62
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	8d bf       	out	0x3d, r24	; 61
     5bc:	80 91 8a 0b 	lds	r24, 0x0B8A
     5c0:	81 11       	cpse	r24, r1
     5c2:	0a c0       	rjmp	.+20     	; 0x5d8 <main+0x178>
     5c4:	8f e1       	ldi	r24, 0x1F	; 31
     5c6:	9e e4       	ldi	r25, 0x4E	; 78
     5c8:	01 97       	sbiw	r24, 0x01	; 1
     5ca:	f1 f7       	brne	.-4      	; 0x5c8 <main+0x168>
     5cc:	00 c0       	rjmp	.+0      	; 0x5ce <main+0x16e>
     5ce:	00 00       	nop
     5d0:	80 91 8a 0b 	lds	r24, 0x0B8A
     5d4:	88 23       	and	r24, r24
     5d6:	b1 f3       	breq	.-20     	; 0x5c4 <main+0x164>
     5d8:	10 92 8a 0b 	sts	0x0B8A, r1
	
	//
	// Now connect to RC Car
	//
	
	LCDClearDisplay();
     5dc:	2b d7       	rcall	.+3670   	; 0x1434 <LCDClearDisplay>
	
	LCDSetCursorPosition(0, 0);
     5de:	60 e0       	ldi	r22, 0x00	; 0
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	41 d7       	rcall	.+3714   	; 0x1466 <LCDSetCursorPosition>
	
	LCDPrint("Connecting...");
     5e4:	88 eb       	ldi	r24, 0xB8	; 184
     5e6:	97 e0       	ldi	r25, 0x07	; 7
     5e8:	84 d7       	rcall	.+3848   	; 0x14f2 <LCDPrint>
	
	Status = ConnectToRCCar();
     5ea:	61 de       	rcall	.-830    	; 0x2ae <ConnectToRCCar>
	
	if (!Status)
     5ec:	81 11       	cpse	r24, r1
     5ee:	12 c0       	rjmp	.+36     	; 0x614 <main+0x1b4>
	{
		SendTrace(ERROR_LEVEL, "main - Failed to Connect\r\n");
     5f0:	86 ec       	ldi	r24, 0xC6	; 198
     5f2:	97 e0       	ldi	r25, 0x07	; 7
     5f4:	9f 93       	push	r25
     5f6:	8f 93       	push	r24
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	8f 93       	push	r24
     5fc:	f7 d4       	rcall	.+2542   	; 0xfec <SendTrace>
		
		LCDClearDisplay();
     5fe:	1a d7       	rcall	.+3636   	; 0x1434 <LCDClearDisplay>
		
		LCDSetCursorPosition(0, 0);
     600:	60 e0       	ldi	r22, 0x00	; 0
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	30 d7       	rcall	.+3680   	; 0x1466 <LCDSetCursorPosition>
		
		LCDPrint("Operation Failed");
     606:	8a e4       	ldi	r24, 0x4A	; 74
     608:	97 e0       	ldi	r25, 0x07	; 7
     60a:	73 d7       	rcall	.+3814   	; 0x14f2 <LCDPrint>
		
		goto Exit;
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	11 c0       	rjmp	.+34     	; 0x636 <main+0x1d6>
     614:	9f ef       	ldi	r25, 0xFF	; 255
     616:	29 e6       	ldi	r18, 0x69	; 105
     618:	88 e1       	ldi	r24, 0x18	; 24
     61a:	91 50       	subi	r25, 0x01	; 1
     61c:	20 40       	sbci	r18, 0x00	; 0
     61e:	80 40       	sbci	r24, 0x00	; 0
     620:	e1 f7       	brne	.-8      	; 0x61a <main+0x1ba>
     622:	00 c0       	rjmp	.+0      	; 0x624 <main+0x1c4>
     624:	00 00       	nop
	// Now drive RCCar
	//
    
	_delay_ms(1000);
	
	LCDClearDisplay();
     626:	06 d7       	rcall	.+3596   	; 0x1434 <LCDClearDisplay>
	
	LCDSetCursorPosition(0, 0);
     628:	60 e0       	ldi	r22, 0x00	; 0
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	1c d7       	rcall	.+3640   	; 0x1466 <LCDSetCursorPosition>
	
	LCDPrint("Connected");
     62e:	81 ee       	ldi	r24, 0xE1	; 225
     630:	97 e0       	ldi	r25, 0x07	; 7
     632:	5f d7       	rcall	.+3774   	; 0x14f2 <LCDPrint>
	
	DriveRCCar();     
     634:	9d de       	rcall	.-710    	; 0x370 <DriveRCCar>
	Status = TRUE;
	
Exit:

	return Status;
}
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	cf 91       	pop	r28
     63c:	08 95       	ret

0000063e <InitTWI>:
bool
InitTWI(TWI_MODE Mode, PTWI_ADDRESS Address, PTWI_ADDRESS_MASK AddressMask)
{	
	bool Status = TRUE;
	
	if (Mode == TWI_SLAVE)
     63e:	81 11       	cpse	r24, r1
     640:	20 c0       	rjmp	.+64     	; 0x682 <InitTWI+0x44>
	{
		if (Address != NULL && AddressMask != NULL)
     642:	61 15       	cp	r22, r1
     644:	71 05       	cpc	r23, r1
     646:	89 f0       	breq	.+34     	; 0x66a <InitTWI+0x2c>
     648:	41 15       	cp	r20, r1
     64a:	51 05       	cpc	r21, r1
     64c:	71 f0       	breq	.+28     	; 0x66a <InitTWI+0x2c>
		{
			//
			// Set Slave Address and Mask
			//
				
			TWAR = Address->AsUINT8;
     64e:	fb 01       	movw	r30, r22
     650:	80 81       	ld	r24, Z
     652:	80 93 ba 00 	sts	0x00BA, r24
				
			TWAMR = AddressMask->AsUINT8;
     656:	fa 01       	movw	r30, r20
     658:	80 81       	ld	r24, Z
     65a:	80 93 bd 00 	sts	0x00BD, r24
			
			//
			// Set Data and Clock to IN
			//
			
			DDRC &= ~((0x1 << PORTC0) | (0x1 << PORTC1));
     65e:	87 b1       	in	r24, 0x07	; 7
     660:	8c 7f       	andi	r24, 0xFC	; 252
     662:	87 b9       	out	0x07, r24	; 7
			
			gMode = TWI_SLAVE;
     664:	10 92 a8 0b 	sts	0x0BA8, r1
     668:	12 c0       	rjmp	.+36     	; 0x68e <InitTWI+0x50>
		}
		else
		{
			SendTrace(ERROR_LEVEL, "InitTWI - Invalid Parameters\r\n");
     66a:	8b ee       	ldi	r24, 0xEB	; 235
     66c:	97 e0       	ldi	r25, 0x07	; 7
     66e:	9f 93       	push	r25
     670:	8f 93       	push	r24
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	8f 93       	push	r24
     676:	ba d4       	rcall	.+2420   	; 0xfec <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
		}
		else
		{
			SendTrace(ERROR_LEVEL, "InitTWI - Invalid Parameters\r\n");
			
			Status = FALSE;
     67e:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
     680:	08 95       	ret
		}
	}
	else
	{
		gMode = TWI_MASTER;
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	80 93 a8 0b 	sts	0x0BA8, r24
		
		//
		// Set Data and Clock to Out
		//
		
		DDRC |= ((0x1 << PORTC0) | (0x1 << PORTC1));
     688:	87 b1       	in	r24, 0x07	; 7
     68a:	83 60       	ori	r24, 0x03	; 3
     68c:	87 b9       	out	0x07, r24	; 7
	//
	// Set TWI Bit Rate Register to 8 so that
	// SCL is set to 100 KHz.
	//

	TWBR = BIT_RATE_VALUE;
     68e:	80 e2       	ldi	r24, 0x20	; 32
     690:	80 93 b8 00 	sts	0x00B8, r24
	
	//
	// Set Pre-scalar value to 1
	//

	TWSR = 0;
     694:	10 92 b9 00 	sts	0x00B9, r1
	
	//
	// Set TWI Control Register
	//
	
	TWCR = (0x1 << TWEN) | (0x1 << TWEA);
     698:	84 e4       	ldi	r24, 0x44	; 68
     69a:	80 93 bc 00 	sts	0x00BC, r24
     69e:	ff ef       	ldi	r31, 0xFF	; 255
     6a0:	20 e7       	ldi	r18, 0x70	; 112
     6a2:	82 e0       	ldi	r24, 0x02	; 2
     6a4:	f1 50       	subi	r31, 0x01	; 1
     6a6:	20 40       	sbci	r18, 0x00	; 0
     6a8:	80 40       	sbci	r24, 0x00	; 0
     6aa:	e1 f7       	brne	.-8      	; 0x6a4 <InitTWI+0x66>
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <InitTWI+0x70>
     6ae:	00 00       	nop
	// Wait for 100 ms for bus to settle down
	//
	
	_delay_ms(100);
	
	gIsRepeatedStart = FALSE;
     6b0:	10 92 8b 0b 	sts	0x0B8B, r1
	
	gIsTWIInitialized = TRUE;
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	80 93 8c 0b 	sts	0x0B8C, r24

Exit:

	return Status;
}
     6ba:	08 95       	ret

000006bc <SendStartCondition>:
	
	//
	// Send Start Condition
	//
	
	ENABLE_START();
     6bc:	ec eb       	ldi	r30, 0xBC	; 188
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	80 81       	ld	r24, Z
     6c2:	8f 75       	andi	r24, 0x5F	; 95
     6c4:	80 62       	ori	r24, 0x20	; 32
     6c6:	80 83       	st	Z, r24
	
	WAIT_FOR_OP_COMPLETION();
     6c8:	80 81       	ld	r24, Z
     6ca:	80 68       	ori	r24, 0x80	; 128
     6cc:	80 83       	st	Z, r24
     6ce:	80 81       	ld	r24, Z
     6d0:	88 23       	and	r24, r24
     6d2:	ec f7       	brge	.-6      	; 0x6ce <SendStartCondition+0x12>
	
	DISABLE_START();
     6d4:	ec eb       	ldi	r30, 0xBC	; 188
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	80 81       	ld	r24, Z
     6da:	8f 75       	andi	r24, 0x5F	; 95
     6dc:	80 83       	st	Z, r24
	
	if (gIsRepeatedStart)
     6de:	80 91 8b 0b 	lds	r24, 0x0B8B
     6e2:	88 23       	and	r24, r24
     6e4:	41 f0       	breq	.+16     	; 0x6f6 <SendStartCondition+0x3a>
	{
		Status = ProcessTwiStatus(REPEATED_START_TRANSMITTED);
     6e6:	90 91 b9 00 	lds	r25, 0x00B9
     6ea:	98 7f       	andi	r25, 0xF8	; 248
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	90 31       	cpi	r25, 0x10	; 16
     6f0:	49 f0       	breq	.+18     	; 0x704 <SendStartCondition+0x48>
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	08 95       	ret
	}
	else
	{
		Status = ProcessTwiStatus(START_TRANSMITTED);
     6f6:	90 91 b9 00 	lds	r25, 0x00B9
     6fa:	98 7f       	andi	r25, 0xF8	; 248
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	98 30       	cpi	r25, 0x08	; 8
     700:	09 f0       	breq	.+2      	; 0x704 <SendStartCondition+0x48>
     702:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return Status;
}
     704:	08 95       	ret

00000706 <SendStopCondition>:

void
SendStopCondition()
{	
	ENABLE_STOP();
     706:	ec eb       	ldi	r30, 0xBC	; 188
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	80 81       	ld	r24, Z
     70c:	8f 76       	andi	r24, 0x6F	; 111
     70e:	80 61       	ori	r24, 0x10	; 16
     710:	80 83       	st	Z, r24
	
	//
	// Send the Stop condition by clearing the TWINT flag
	//
	
	TWCR |= (1 << TWINT);
     712:	80 81       	ld	r24, Z
     714:	80 68       	ori	r24, 0x80	; 128
     716:	80 83       	st	Z, r24
	//
	// TWINT is not set after stop condition.
	// Instead TWSTO bit in TWCR is cleared.
	//
	
	while (!(TWCR & (0x1 << TWSTO)));
     718:	80 81       	ld	r24, Z
     71a:	84 ff       	sbrs	r24, 4
     71c:	fd cf       	rjmp	.-6      	; 0x718 <SendStopCondition+0x12>
}
     71e:	08 95       	ret

00000720 <Transmit>:

bool
Transmit(PVOID Buffer, unsigned long Length)
{
     720:	8f 92       	push	r8
     722:	9f 92       	push	r9
     724:	af 92       	push	r10
     726:	bf 92       	push	r11
     728:	df 92       	push	r13
     72a:	ef 92       	push	r14
     72c:	ff 92       	push	r15
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
	
	unsigned char *BytePtr;
	
	TWI_STATUS TransmitStatus;
	
	if (gMode == TWI_MASTER)
     736:	20 91 a8 0b 	lds	r18, 0x0BA8
     73a:	21 30       	cpi	r18, 0x01	; 1
     73c:	29 f4       	brne	.+10     	; 0x748 <Transmit+0x28>
	{
		TransmitStatus = DATA_TRANSMITTED_ACK;
     73e:	0f 2e       	mov	r0, r31
     740:	f8 e2       	ldi	r31, 0x28	; 40
     742:	df 2e       	mov	r13, r31
     744:	f0 2d       	mov	r31, r0
     746:	04 c0       	rjmp	.+8      	; 0x750 <Transmit+0x30>
	}
	else
	{
		TransmitStatus = SLA_R_DATA_TRANSMITTED_ACK;
     748:	0f 2e       	mov	r0, r31
     74a:	f8 eb       	ldi	r31, 0xB8	; 184
     74c:	df 2e       	mov	r13, r31
     74e:	f0 2d       	mov	r31, r0
	// Now transmit the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
     750:	4a 01       	movw	r8, r20
     752:	5b 01       	movw	r10, r22
     754:	21 e0       	ldi	r18, 0x01	; 1
     756:	82 1a       	sub	r8, r18
     758:	91 08       	sbc	r9, r1
     75a:	a1 08       	sbc	r10, r1
     75c:	b1 08       	sbc	r11, r1
     75e:	81 14       	cp	r8, r1
     760:	91 04       	cpc	r9, r1
     762:	a1 04       	cpc	r10, r1
     764:	b1 04       	cpc	r11, r1
     766:	e1 f1       	breq	.+120    	; 0x7e0 <Transmit+0xc0>
     768:	dc 01       	movw	r26, r24
     76a:	00 e0       	ldi	r16, 0x00	; 0
     76c:	10 e0       	ldi	r17, 0x00	; 0
     76e:	98 01       	movw	r18, r16
	{
		TWDR = *BytePtr;
     770:	4b eb       	ldi	r20, 0xBB	; 187
     772:	50 e0       	ldi	r21, 0x00	; 0
		
		WAIT_FOR_OP_COMPLETION();
     774:	ec eb       	ldi	r30, 0xBC	; 188
     776:	f0 e0       	ldi	r31, 0x00	; 0
		
		if (!ProcessTwiStatus(TransmitStatus))
     778:	0f 2e       	mov	r0, r31
     77a:	f9 eb       	ldi	r31, 0xB9	; 185
     77c:	ef 2e       	mov	r14, r31
     77e:	f1 2c       	mov	r15, r1
     780:	f0 2d       	mov	r31, r0
     782:	6d 2d       	mov	r22, r13
     784:	70 e0       	ldi	r23, 0x00	; 0
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
	{
		TWDR = *BytePtr;
     786:	8d 91       	ld	r24, X+
     788:	ea 01       	movw	r28, r20
     78a:	88 83       	st	Y, r24
		
		WAIT_FOR_OP_COMPLETION();
     78c:	80 81       	ld	r24, Z
     78e:	80 68       	ori	r24, 0x80	; 128
     790:	80 83       	st	Z, r24
     792:	80 81       	ld	r24, Z
     794:	88 23       	and	r24, r24
     796:	ec f7       	brge	.-6      	; 0x792 <Transmit+0x72>
		
		if (!ProcessTwiStatus(TransmitStatus))
     798:	e7 01       	movw	r28, r14
     79a:	88 81       	ld	r24, Y
     79c:	88 7f       	andi	r24, 0xF8	; 248
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	86 17       	cp	r24, r22
     7a2:	97 07       	cpc	r25, r23
     7a4:	99 f0       	breq	.+38     	; 0x7cc <Transmit+0xac>
		{
			SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     7a6:	80 91 b9 00 	lds	r24, 0x00B9
     7aa:	88 7f       	andi	r24, 0xF8	; 248
     7ac:	1f 92       	push	r1
     7ae:	8f 93       	push	r24
     7b0:	8a e0       	ldi	r24, 0x0A	; 10
     7b2:	98 e0       	ldi	r25, 0x08	; 8
     7b4:	9f 93       	push	r25
     7b6:	8f 93       	push	r24
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	8f 93       	push	r24
     7bc:	17 d4       	rcall	.+2094   	; 0xfec <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(TransmitStatus))
		{
			SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
			
			Status = FALSE;
     7c8:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
     7ca:	3b c0       	rjmp	.+118    	; 0x842 <Transmit+0x122>
		}
		
		BytePtr++;
     7cc:	cd 01       	movw	r24, r26
	// Now transmit the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
     7ce:	0f 5f       	subi	r16, 0xFF	; 255
     7d0:	1f 4f       	sbci	r17, 0xFF	; 255
     7d2:	2f 4f       	sbci	r18, 0xFF	; 255
     7d4:	3f 4f       	sbci	r19, 0xFF	; 255
     7d6:	08 15       	cp	r16, r8
     7d8:	19 05       	cpc	r17, r9
     7da:	2a 05       	cpc	r18, r10
     7dc:	3b 05       	cpc	r19, r11
     7de:	98 f2       	brcs	.-90     	; 0x786 <Transmit+0x66>
	
	//
	// In slave mode after transmitting the last byte we will get a NACK from the Master
	//
	
	if (gMode == TWI_SLAVE)
     7e0:	20 91 a8 0b 	lds	r18, 0x0BA8
     7e4:	21 11       	cpse	r18, r1
     7e6:	04 c0       	rjmp	.+8      	; 0x7f0 <Transmit+0xd0>
	{
		TransmitStatus = SLA_R_DATA_TRANSMITTED_NACK;
     7e8:	0f 2e       	mov	r0, r31
     7ea:	f0 ec       	ldi	r31, 0xC0	; 192
     7ec:	df 2e       	mov	r13, r31
     7ee:	f0 2d       	mov	r31, r0
	}
	
	TWDR = *BytePtr;
     7f0:	fc 01       	movw	r30, r24
     7f2:	80 81       	ld	r24, Z
     7f4:	80 93 bb 00 	sts	0x00BB, r24
	
	WAIT_FOR_OP_COMPLETION();
     7f8:	ec eb       	ldi	r30, 0xBC	; 188
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	80 81       	ld	r24, Z
     7fe:	80 68       	ori	r24, 0x80	; 128
     800:	80 83       	st	Z, r24
     802:	80 81       	ld	r24, Z
     804:	88 23       	and	r24, r24
     806:	ec f7       	brge	.-6      	; 0x802 <Transmit+0xe2>
	
	if (!ProcessTwiStatus(TransmitStatus))
     808:	20 91 b9 00 	lds	r18, 0x00B9
     80c:	28 7f       	andi	r18, 0xF8	; 248
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	8d 2d       	mov	r24, r13
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	28 17       	cp	r18, r24
     816:	39 07       	cpc	r19, r25
     818:	99 f0       	breq	.+38     	; 0x840 <Transmit+0x120>
	{
		SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     81a:	80 91 b9 00 	lds	r24, 0x00B9
     81e:	88 7f       	andi	r24, 0xF8	; 248
     820:	1f 92       	push	r1
     822:	8f 93       	push	r24
     824:	8a e0       	ldi	r24, 0x0A	; 10
     826:	98 e0       	ldi	r25, 0x08	; 8
     828:	9f 93       	push	r25
     82a:	8f 93       	push	r24
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	8f 93       	push	r24
     830:	dd d3       	rcall	.+1978   	; 0xfec <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
	
	if (!ProcessTwiStatus(TransmitStatus))
	{
		SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     83c:	80 e0       	ldi	r24, 0x00	; 0
		
		goto Exit;
     83e:	01 c0       	rjmp	.+2      	; 0x842 <Transmit+0x122>
}

bool
Transmit(PVOID Buffer, unsigned long Length)
{
	bool Status = TRUE;
     840:	81 e0       	ldi	r24, 0x01	; 1
	}
	
Exit:

	return Status;	
}
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	ff 90       	pop	r15
     84c:	ef 90       	pop	r14
     84e:	df 90       	pop	r13
     850:	bf 90       	pop	r11
     852:	af 90       	pop	r10
     854:	9f 90       	pop	r9
     856:	8f 90       	pop	r8
     858:	08 95       	ret

0000085a <TwiMasterTransmit>:
bool
TwiMasterTransmit(PVOID Buffer, 
				  unsigned long Length, 
				  PTWI_ADDRESS Address,
				  bool SendStop)
{
     85a:	af 92       	push	r10
     85c:	bf 92       	push	r11
     85e:	cf 92       	push	r12
     860:	df 92       	push	r13
     862:	ef 92       	push	r14
     864:	ff 92       	push	r15
     866:	0f 93       	push	r16
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	5c 01       	movw	r10, r24
     86e:	6a 01       	movw	r12, r20
     870:	7b 01       	movw	r14, r22
     872:	e9 01       	movw	r28, r18
	bool Status = TRUE;
	
	if (!SendStartCondition())
     874:	23 df       	rcall	.-442    	; 0x6bc <SendStartCondition>
     876:	81 11       	cpse	r24, r1
     878:	13 c0       	rjmp	.+38     	; 0x8a0 <TwiMasterTransmit+0x46>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     87a:	80 91 b9 00 	lds	r24, 0x00B9
     87e:	88 7f       	andi	r24, 0xF8	; 248
     880:	1f 92       	push	r1
     882:	8f 93       	push	r24
     884:	80 e4       	ldi	r24, 0x40	; 64
     886:	98 e0       	ldi	r25, 0x08	; 8
     888:	9f 93       	push	r25
     88a:	8f 93       	push	r24
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	8f 93       	push	r24
     890:	ad d3       	rcall	.+1882   	; 0xfec <SendTrace>
		
		Status = FALSE;
			
		goto Exit;
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	0f 90       	pop	r0
     89a:	0f 90       	pop	r0
	
	if (!SendStartCondition())
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     89c:	c0 e0       	ldi	r28, 0x00	; 0
			
		goto Exit;
     89e:	33 c0       	rjmp	.+102    	; 0x906 <TwiMasterTransmit+0xac>
	}
	
	gIsRepeatedStart = FALSE;
     8a0:	10 92 8b 0b 	sts	0x0B8B, r1
	//
	// Set Address->ReadWrite = 0 indicating a write operation.
	// Then transmit SLA+W
	//
	
	Address->RW_EnGenCall = 0;
     8a4:	88 81       	ld	r24, Y
     8a6:	8e 7f       	andi	r24, 0xFE	; 254
     8a8:	88 83       	st	Y, r24
	
	TWDR = Address->AsUINT8;
     8aa:	80 93 bb 00 	sts	0x00BB, r24
		
	WAIT_FOR_OP_COMPLETION();
     8ae:	ec eb       	ldi	r30, 0xBC	; 188
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	80 81       	ld	r24, Z
     8b4:	80 68       	ori	r24, 0x80	; 128
     8b6:	80 83       	st	Z, r24
     8b8:	80 81       	ld	r24, Z
     8ba:	88 23       	and	r24, r24
     8bc:	ec f7       	brge	.-6      	; 0x8b8 <TwiMasterTransmit+0x5e>
		
	if (!ProcessTwiStatus(SLA_W_TRANSMITTED_ACK))
     8be:	80 91 b9 00 	lds	r24, 0x00B9
     8c2:	88 7f       	andi	r24, 0xF8	; 248
     8c4:	88 31       	cpi	r24, 0x18	; 24
     8c6:	99 f0       	breq	.+38     	; 0x8ee <TwiMasterTransmit+0x94>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Slave Address and Write Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     8c8:	80 91 b9 00 	lds	r24, 0x00B9
     8cc:	88 7f       	andi	r24, 0xF8	; 248
     8ce:	1f 92       	push	r1
     8d0:	8f 93       	push	r24
     8d2:	8a e8       	ldi	r24, 0x8A	; 138
     8d4:	98 e0       	ldi	r25, 0x08	; 8
     8d6:	9f 93       	push	r25
     8d8:	8f 93       	push	r24
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	8f 93       	push	r24
     8de:	86 d3       	rcall	.+1804   	; 0xfec <SendTrace>
		
		Status = FALSE;
			
		goto Exit;
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
		
	if (!ProcessTwiStatus(SLA_W_TRANSMITTED_ACK))
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Slave Address and Write Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     8ea:	c0 e0       	ldi	r28, 0x00	; 0
			
		goto Exit;
     8ec:	0c c0       	rjmp	.+24     	; 0x906 <TwiMasterTransmit+0xac>
	}
	
	Status = Transmit(Buffer, Length);
     8ee:	b7 01       	movw	r22, r14
     8f0:	a6 01       	movw	r20, r12
     8f2:	c5 01       	movw	r24, r10
     8f4:	15 df       	rcall	.-470    	; 0x720 <Transmit>
     8f6:	c8 2f       	mov	r28, r24
	
	//
	// Send stop condition
	//
	
	if (SendStop)
     8f8:	00 23       	and	r16, r16
     8fa:	11 f0       	breq	.+4      	; 0x900 <TwiMasterTransmit+0xa6>
	{
		SendStopCondition();
     8fc:	04 df       	rcall	.-504    	; 0x706 <SendStopCondition>
     8fe:	03 c0       	rjmp	.+6      	; 0x906 <TwiMasterTransmit+0xac>
	}
	else
	{
		gIsRepeatedStart = TRUE;
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	80 93 8b 0b 	sts	0x0B8B, r24
	}
	
Exit:

	return Status;
}
     906:	8c 2f       	mov	r24, r28
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	0f 91       	pop	r16
     90e:	ff 90       	pop	r15
     910:	ef 90       	pop	r14
     912:	df 90       	pop	r13
     914:	cf 90       	pop	r12
     916:	bf 90       	pop	r11
     918:	af 90       	pop	r10
     91a:	08 95       	ret

0000091c <TwiTransmit>:
bool 
TwiTransmit(PVOID Buffer, 
			unsigned long Length,
			PTWI_ADDRESS Address,
			bool SendStop)
{
     91c:	0f 93       	push	r16
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
     91e:	e0 91 8c 0b 	lds	r30, 0x0B8C
     922:	ee 23       	and	r30, r30
     924:	09 f4       	brne	.+2      	; 0x928 <TwiTransmit+0xc>
     926:	48 c0       	rjmp	.+144    	; 0x9b8 <TwiTransmit+0x9c>
     928:	00 97       	sbiw	r24, 0x00	; 0
     92a:	09 f4       	brne	.+2      	; 0x92e <TwiTransmit+0x12>
     92c:	47 c0       	rjmp	.+142    	; 0x9bc <TwiTransmit+0xa0>
		Status = FALSE;
		
		goto Exit;
	}
	
	if (gMode == TWI_MASTER)
     92e:	e0 91 a8 0b 	lds	r30, 0x0BA8
     932:	e1 30       	cpi	r30, 0x01	; 1
     934:	89 f4       	brne	.+34     	; 0x958 <TwiTransmit+0x3c>
	{
		if (Address == NULL)
     936:	21 15       	cp	r18, r1
     938:	31 05       	cpc	r19, r1
     93a:	61 f4       	brne	.+24     	; 0x954 <TwiTransmit+0x38>
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Invalid Parameters\r\n");
     93c:	81 ee       	ldi	r24, 0xE1	; 225
     93e:	98 e0       	ldi	r25, 0x08	; 8
     940:	9f 93       	push	r25
     942:	8f 93       	push	r24
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	8f 93       	push	r24
     948:	51 d3       	rcall	.+1698   	; 0xfec <SendTrace>
			
			Status = FALSE;
		
			goto Exit;
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
	{
		if (Address == NULL)
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Invalid Parameters\r\n");
			
			Status = FALSE;
     950:	80 e0       	ldi	r24, 0x00	; 0
		
			goto Exit;
     952:	35 c0       	rjmp	.+106    	; 0x9be <TwiTransmit+0xa2>
		}
		else
		{
			Status = TwiMasterTransmit(Buffer, Length, Address, SendStop);	
     954:	82 df       	rcall	.-252    	; 0x85a <TwiMasterTransmit>
     956:	33 c0       	rjmp	.+102    	; 0x9be <TwiTransmit+0xa2>
		}
	}
	else
	{
		WAIT_FOR_OP_COMPLETION();
     958:	ec eb       	ldi	r30, 0xBC	; 188
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	20 81       	ld	r18, Z
     95e:	20 68       	ori	r18, 0x80	; 128
     960:	20 83       	st	Z, r18
     962:	20 81       	ld	r18, Z
     964:	22 23       	and	r18, r18
     966:	ec f7       	brge	.-6      	; 0x962 <TwiTransmit+0x46>
		
		if (ProcessTwiStatus(STOP_REPEATED_START_RECEIVED))
     968:	20 91 b9 00 	lds	r18, 0x00B9
     96c:	28 7f       	andi	r18, 0xF8	; 248
     96e:	20 3a       	cpi	r18, 0xA0	; 160
     970:	41 f4       	brne	.+16     	; 0x982 <TwiTransmit+0x66>
		{
			WAIT_FOR_OP_COMPLETION();	
     972:	ec eb       	ldi	r30, 0xBC	; 188
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	20 81       	ld	r18, Z
     978:	20 68       	ori	r18, 0x80	; 128
     97a:	20 83       	st	Z, r18
     97c:	20 81       	ld	r18, Z
     97e:	22 23       	and	r18, r18
     980:	ec f7       	brge	.-6      	; 0x97c <TwiTransmit+0x60>
		}
		
		if (!ProcessTwiStatus(SLA_R_RECEIVED_ACK))
     982:	20 91 b9 00 	lds	r18, 0x00B9
     986:	28 7f       	andi	r18, 0xF8	; 248
     988:	28 3a       	cpi	r18, 0xA8	; 168
     98a:	91 f0       	breq	.+36     	; 0x9b0 <TwiTransmit+0x94>
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Slave Read Not Requested by Master - 0x%x\r\n", TWSR);
     98c:	80 91 b9 00 	lds	r24, 0x00B9
     990:	1f 92       	push	r1
     992:	8f 93       	push	r24
     994:	84 e0       	ldi	r24, 0x04	; 4
     996:	99 e0       	ldi	r25, 0x09	; 9
     998:	9f 93       	push	r25
     99a:	8f 93       	push	r24
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	8f 93       	push	r24
     9a0:	25 d3       	rcall	.+1610   	; 0xfec <SendTrace>
			
			Status = FALSE;
		
			goto Exit;
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(SLA_R_RECEIVED_ACK))
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Slave Read Not Requested by Master - 0x%x\r\n", TWSR);
			
			Status = FALSE;
     9ac:	80 e0       	ldi	r24, 0x00	; 0
		
			goto Exit;
     9ae:	07 c0       	rjmp	.+14     	; 0x9be <TwiTransmit+0xa2>
		}
		else
		{	
			DATA_OUT();
     9b0:	39 9a       	sbi	0x07, 1	; 7
		
			Status = Transmit(Buffer, Length);
     9b2:	b6 de       	rcall	.-660    	; 0x720 <Transmit>
		
			DATA_IN();
     9b4:	39 98       	cbi	0x07, 1	; 7
     9b6:	03 c0       	rjmp	.+6      	; 0x9be <TwiTransmit+0xa2>
{
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
	{
		Status = FALSE;
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	01 c0       	rjmp	.+2      	; 0x9be <TwiTransmit+0xa2>
     9bc:	80 e0       	ldi	r24, 0x00	; 0
	}
	
Exit:

	return Status;
}
     9be:	0f 91       	pop	r16
     9c0:	08 95       	ret

000009c2 <InitTrace>:
#ifdef DEBUG

void
InitTrace(unsigned long ProcFrequency, unsigned char TraceLevel)
{
	if (!gTraceInitialized)
     9c2:	80 91 8d 0b 	lds	r24, 0x0B8D
     9c6:	81 11       	cpse	r24, r1
     9c8:	0a c0       	rjmp	.+20     	; 0x9de <InitTrace+0x1c>
	{

		gTraceLevel = TraceLevel;
     9ca:	40 93 a9 0b 	sts	0x0BA9, r20

		InitUARTSync(UART_ZERO, BR_9600, NORMAL_MODE);	
     9ce:	40 e0       	ldi	r20, 0x00	; 0
     9d0:	63 e3       	ldi	r22, 0x33	; 51
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	0e 94 3f 13 	call	0x267e	; 0x267e <InitUARTSync>
		
		gTraceInitialized = TRUE;
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	80 93 8d 0b 	sts	0x0B8D, r24
     9de:	08 95       	ret

000009e0 <SendStringValue>:
SendStringValue(char *String)
{

	unsigned long Length = 0;
	
	Length = strlen(String);
     9e0:	fc 01       	movw	r30, r24
     9e2:	01 90       	ld	r0, Z+
     9e4:	00 20       	and	r0, r0
     9e6:	e9 f7       	brne	.-6      	; 0x9e2 <SendStringValue+0x2>
     9e8:	31 97       	sbiw	r30, 0x01	; 1
     9ea:	9f 01       	movw	r18, r30
     9ec:	28 1b       	sub	r18, r24
     9ee:	39 0b       	sbc	r19, r25
     9f0:	40 e0       	ldi	r20, 0x00	; 0
     9f2:	50 e0       	ldi	r21, 0x00	; 0
	
	UARTTransmitSync(UART_ZERO, (PVOID) String, Length);
     9f4:	bc 01       	movw	r22, r24
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	0c 94 3a 14 	jmp	0x2874	; 0x2874 <UARTTransmitSync>
     9fc:	08 95       	ret

000009fe <SendHexValue>:
	
}

void
SendHexValue(unsigned long long Value)
{
     9fe:	8f 92       	push	r8
     a00:	9f 92       	push	r9
     a02:	af 92       	push	r10
     a04:	bf 92       	push	r11
     a06:	cf 92       	push	r12
     a08:	df 92       	push	r13
     a0a:	ef 92       	push	r14
     a0c:	ff 92       	push	r15
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
     a1a:	da 95       	dec	r29
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	f8 94       	cli
     a20:	de bf       	out	0x3e, r29	; 62
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	cd bf       	out	0x3d, r28	; 61
     a26:	02 2f       	mov	r16, r18
     a28:	93 2e       	mov	r9, r19
     a2a:	a4 2e       	mov	r10, r20
     a2c:	b5 2e       	mov	r11, r21
     a2e:	c6 2e       	mov	r12, r22
     a30:	d7 2e       	mov	r13, r23
     a32:	e8 2e       	mov	r14, r24
     a34:	f9 2e       	mov	r15, r25

	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
     a36:	10 e0       	ldi	r17, 0x00	; 0

		if (Value < 16)
		{
			TransmitChar[Count] = Value;

			Value = 0;
     a38:	81 2c       	mov	r8, r1


	do
	{

		if (Value < 16)
     a3a:	20 2f       	mov	r18, r16
     a3c:	39 2d       	mov	r19, r9
     a3e:	4a 2d       	mov	r20, r10
     a40:	5b 2d       	mov	r21, r11
     a42:	6c 2d       	mov	r22, r12
     a44:	7d 2d       	mov	r23, r13
     a46:	8e 2d       	mov	r24, r14
     a48:	9f 2d       	mov	r25, r15
     a4a:	af e0       	ldi	r26, 0x0F	; 15
     a4c:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__cmpdi2_s8>
     a50:	09 f0       	breq	.+2      	; 0xa54 <SendHexValue+0x56>
     a52:	80 f4       	brcc	.+32     	; 0xa74 <SendHexValue+0x76>
		{
			TransmitChar[Count] = Value;
     a54:	e1 e0       	ldi	r30, 0x01	; 1
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	ec 0f       	add	r30, r28
     a5a:	fd 1f       	adc	r31, r29
     a5c:	e1 0f       	add	r30, r17
     a5e:	f1 1d       	adc	r31, r1
     a60:	00 83       	st	Z, r16

			Value = 0;
     a62:	08 2d       	mov	r16, r8
     a64:	98 2c       	mov	r9, r8
     a66:	a8 2c       	mov	r10, r8
     a68:	b8 2c       	mov	r11, r8
     a6a:	c8 2c       	mov	r12, r8
     a6c:	d8 2c       	mov	r13, r8
     a6e:	e8 2c       	mov	r14, r8
     a70:	f8 2c       	mov	r15, r8
     a72:	1c c0       	rjmp	.+56     	; 0xaac <SendHexValue+0xae>
		}
		else
		{
			TransmitChar[Count] = Value % 16;
     a74:	e1 e0       	ldi	r30, 0x01	; 1
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	ec 0f       	add	r30, r28
     a7a:	fd 1f       	adc	r31, r29
     a7c:	e1 0f       	add	r30, r17
     a7e:	f1 1d       	adc	r31, r1
     a80:	80 2f       	mov	r24, r16
     a82:	8f 70       	andi	r24, 0x0F	; 15
     a84:	80 83       	st	Z, r24

			Value = Value / 16;
     a86:	20 2f       	mov	r18, r16
     a88:	39 2d       	mov	r19, r9
     a8a:	4a 2d       	mov	r20, r10
     a8c:	5b 2d       	mov	r21, r11
     a8e:	6c 2d       	mov	r22, r12
     a90:	7d 2d       	mov	r23, r13
     a92:	8e 2d       	mov	r24, r14
     a94:	9f 2d       	mov	r25, r15
     a96:	04 e0       	ldi	r16, 0x04	; 4
     a98:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <__lshrdi3>
     a9c:	02 2f       	mov	r16, r18
     a9e:	93 2e       	mov	r9, r19
     aa0:	a4 2e       	mov	r10, r20
     aa2:	b5 2e       	mov	r11, r21
     aa4:	c6 2e       	mov	r12, r22
     aa6:	d7 2e       	mov	r13, r23
     aa8:	e8 2e       	mov	r14, r24
     aaa:	f9 2e       	mov	r15, r25

		}
		
		if (TransmitChar[Count] > 9)
     aac:	e1 2f       	mov	r30, r17
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	a1 e0       	ldi	r26, 0x01	; 1
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	ac 0f       	add	r26, r28
     ab6:	bd 1f       	adc	r27, r29
     ab8:	ae 0f       	add	r26, r30
     aba:	bf 1f       	adc	r27, r31
     abc:	8c 91       	ld	r24, X
     abe:	8a 30       	cpi	r24, 0x0A	; 10
     ac0:	20 f0       	brcs	.+8      	; 0xaca <SendHexValue+0xcc>
		{
			TransmitChar[Count] = TransmitChar[Count] + ASCII_HEX_CONVERSION;
     ac2:	fd 01       	movw	r30, r26
     ac4:	89 5a       	subi	r24, 0xA9	; 169
     ac6:	80 83       	st	Z, r24
     ac8:	08 c0       	rjmp	.+16     	; 0xada <SendHexValue+0xdc>
		}
		else
		{
			TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     aca:	21 e0       	ldi	r18, 0x01	; 1
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	2c 0f       	add	r18, r28
     ad0:	3d 1f       	adc	r19, r29
     ad2:	e2 0f       	add	r30, r18
     ad4:	f3 1f       	adc	r31, r19
     ad6:	80 5d       	subi	r24, 0xD0	; 208
     ad8:	80 83       	st	Z, r24
		}
		
		Count++;
     ada:	1f 5f       	subi	r17, 0xFF	; 255

	} while (Value != 0);
     adc:	20 2f       	mov	r18, r16
     ade:	39 2d       	mov	r19, r9
     ae0:	4a 2d       	mov	r20, r10
     ae2:	5b 2d       	mov	r21, r11
     ae4:	6c 2d       	mov	r22, r12
     ae6:	7d 2d       	mov	r23, r13
     ae8:	8e 2d       	mov	r24, r14
     aea:	9f 2d       	mov	r25, r15
     aec:	a8 2d       	mov	r26, r8
     aee:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__cmpdi2_s8>
     af2:	09 f0       	breq	.+2      	; 0xaf6 <SendHexValue+0xf8>
     af4:	a2 cf       	rjmp	.-188    	; 0xa3a <SendHexValue+0x3c>

	while (Count != 0)
     af6:	11 23       	and	r17, r17
     af8:	99 f0       	breq	.+38     	; 0xb20 <SendHexValue+0x122>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     afa:	61 2f       	mov	r22, r17
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	61 50       	subi	r22, 0x01	; 1
     b00:	71 09       	sbc	r23, r1
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	8c 0f       	add	r24, r28
     b08:	9d 1f       	adc	r25, r29
     b0a:	68 0f       	add	r22, r24
     b0c:	79 1f       	adc	r23, r25
     b0e:	21 e0       	ldi	r18, 0x01	; 1
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	40 e0       	ldi	r20, 0x00	; 0
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	0e 94 3a 14 	call	0x2874	; 0x2874 <UARTTransmitSync>
		
		Count--;
     b1c:	11 50       	subi	r17, 0x01	; 1
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
     b1e:	69 f7       	brne	.-38     	; 0xafa <SendHexValue+0xfc>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}
}
     b20:	d3 95       	inc	r29
     b22:	0f b6       	in	r0, 0x3f	; 63
     b24:	f8 94       	cli
     b26:	de bf       	out	0x3e, r29	; 62
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	cd bf       	out	0x3d, r28	; 61
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	1f 91       	pop	r17
     b32:	0f 91       	pop	r16
     b34:	ff 90       	pop	r15
     b36:	ef 90       	pop	r14
     b38:	df 90       	pop	r13
     b3a:	cf 90       	pop	r12
     b3c:	bf 90       	pop	r11
     b3e:	af 90       	pop	r10
     b40:	9f 90       	pop	r9
     b42:	8f 90       	pop	r8
     b44:	08 95       	ret

00000b46 <SendDecimalValue>:


void
SendDecimalValue(unsigned long long Value)
{
     b46:	2f 92       	push	r2
     b48:	3f 92       	push	r3
     b4a:	4f 92       	push	r4
     b4c:	5f 92       	push	r5
     b4e:	6f 92       	push	r6
     b50:	7f 92       	push	r7
     b52:	8f 92       	push	r8
     b54:	9f 92       	push	r9
     b56:	af 92       	push	r10
     b58:	bf 92       	push	r11
     b5a:	cf 92       	push	r12
     b5c:	df 92       	push	r13
     b5e:	ef 92       	push	r14
     b60:	ff 92       	push	r15
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	c2 50       	subi	r28, 0x02	; 2
     b70:	d1 40       	sbci	r29, 0x01	; 1
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	f8 94       	cli
     b76:	de bf       	out	0x3e, r29	; 62
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	cd bf       	out	0x3d, r28	; 61
     b7c:	cf 5f       	subi	r28, 0xFF	; 255
     b7e:	de 4f       	sbci	r29, 0xFE	; 254
     b80:	28 83       	st	Y, r18
     b82:	c1 50       	subi	r28, 0x01	; 1
     b84:	d1 40       	sbci	r29, 0x01	; 1
     b86:	23 2e       	mov	r2, r19
     b88:	34 2e       	mov	r3, r20
     b8a:	45 2e       	mov	r4, r21
     b8c:	56 2e       	mov	r5, r22
     b8e:	67 2e       	mov	r6, r23
     b90:	78 2e       	mov	r7, r24
     b92:	89 2e       	mov	r8, r25

	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
     b94:	91 2c       	mov	r9, r1


	do
	{

		if (Value < 10)
     b96:	cf 5f       	subi	r28, 0xFF	; 255
     b98:	de 4f       	sbci	r29, 0xFE	; 254
     b9a:	28 81       	ld	r18, Y
     b9c:	c1 50       	subi	r28, 0x01	; 1
     b9e:	d1 40       	sbci	r29, 0x01	; 1
     ba0:	32 2d       	mov	r19, r2
     ba2:	43 2d       	mov	r20, r3
     ba4:	54 2d       	mov	r21, r4
     ba6:	65 2d       	mov	r22, r5
     ba8:	76 2d       	mov	r23, r6
     baa:	87 2d       	mov	r24, r7
     bac:	98 2d       	mov	r25, r8
     bae:	a9 e0       	ldi	r26, 0x09	; 9
     bb0:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__cmpdi2_s8>
     bb4:	09 f0       	breq	.+2      	; 0xbb8 <SendDecimalValue+0x72>
     bb6:	40 f4       	brcc	.+16     	; 0xbc8 <SendDecimalValue+0x82>

			Value = Value / 10;

		}
		
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     bb8:	fe 01       	movw	r30, r28
     bba:	e9 0d       	add	r30, r9
     bbc:	f1 1d       	adc	r31, r1
     bbe:	82 2f       	mov	r24, r18
     bc0:	80 5d       	subi	r24, 0xD0	; 208
     bc2:	81 83       	std	Z+1, r24	; 0x01
		
		Count++;
     bc4:	93 94       	inc	r9
     bc6:	4b c0       	rjmp	.+150    	; 0xc5e <SendDecimalValue+0x118>

			Value = 0;
		}
		else
		{
			TransmitChar[Count] = Value % 10;
     bc8:	0f 2e       	mov	r0, r31
     bca:	fa e0       	ldi	r31, 0x0A	; 10
     bcc:	af 2e       	mov	r10, r31
     bce:	f0 2d       	mov	r31, r0
     bd0:	b1 2c       	mov	r11, r1
     bd2:	c1 2c       	mov	r12, r1
     bd4:	d1 2c       	mov	r13, r1
     bd6:	e1 2c       	mov	r14, r1
     bd8:	f1 2c       	mov	r15, r1
     bda:	00 e0       	ldi	r16, 0x00	; 0
     bdc:	10 e0       	ldi	r17, 0x00	; 0
     bde:	cf 5f       	subi	r28, 0xFF	; 255
     be0:	de 4f       	sbci	r29, 0xFE	; 254
     be2:	28 81       	ld	r18, Y
     be4:	c1 50       	subi	r28, 0x01	; 1
     be6:	d1 40       	sbci	r29, 0x01	; 1
     be8:	32 2d       	mov	r19, r2
     bea:	43 2d       	mov	r20, r3
     bec:	54 2d       	mov	r21, r4
     bee:	65 2d       	mov	r22, r5
     bf0:	76 2d       	mov	r23, r6
     bf2:	87 2d       	mov	r24, r7
     bf4:	98 2d       	mov	r25, r8
     bf6:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__umoddi3>
     bfa:	ce 5f       	subi	r28, 0xFE	; 254
     bfc:	de 4f       	sbci	r29, 0xFE	; 254
     bfe:	28 83       	st	Y, r18
     c00:	c2 50       	subi	r28, 0x02	; 2
     c02:	d1 40       	sbci	r29, 0x01	; 1

			Value = Value / 10;
     c04:	cf 5f       	subi	r28, 0xFF	; 255
     c06:	de 4f       	sbci	r29, 0xFE	; 254
     c08:	28 81       	ld	r18, Y
     c0a:	c1 50       	subi	r28, 0x01	; 1
     c0c:	d1 40       	sbci	r29, 0x01	; 1
     c0e:	32 2d       	mov	r19, r2
     c10:	43 2d       	mov	r20, r3
     c12:	54 2d       	mov	r21, r4
     c14:	65 2d       	mov	r22, r5
     c16:	76 2d       	mov	r23, r6
     c18:	87 2d       	mov	r24, r7
     c1a:	98 2d       	mov	r25, r8
     c1c:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <__udivdi3>
     c20:	cf 5f       	subi	r28, 0xFF	; 255
     c22:	de 4f       	sbci	r29, 0xFE	; 254
     c24:	28 83       	st	Y, r18
     c26:	c1 50       	subi	r28, 0x01	; 1
     c28:	d1 40       	sbci	r29, 0x01	; 1
     c2a:	23 2e       	mov	r2, r19
     c2c:	34 2e       	mov	r3, r20
     c2e:	45 2e       	mov	r4, r21
     c30:	56 2e       	mov	r5, r22
     c32:	67 2e       	mov	r6, r23
     c34:	78 2e       	mov	r7, r24
     c36:	89 2e       	mov	r8, r25

		}
		
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     c38:	e1 e0       	ldi	r30, 0x01	; 1
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	ec 0f       	add	r30, r28
     c3e:	fd 1f       	adc	r31, r29
     c40:	e9 0d       	add	r30, r9
     c42:	f1 1d       	adc	r31, r1
     c44:	ce 5f       	subi	r28, 0xFE	; 254
     c46:	de 4f       	sbci	r29, 0xFE	; 254
     c48:	a8 81       	ld	r26, Y
     c4a:	c2 50       	subi	r28, 0x02	; 2
     c4c:	d1 40       	sbci	r29, 0x01	; 1
     c4e:	a0 5d       	subi	r26, 0xD0	; 208
     c50:	a0 83       	st	Z, r26
		
		Count++;
     c52:	93 94       	inc	r9

	} while (Value != 0);
     c54:	a0 e0       	ldi	r26, 0x00	; 0
     c56:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__cmpdi2_s8>
     c5a:	09 f0       	breq	.+2      	; 0xc5e <SendDecimalValue+0x118>
     c5c:	9c cf       	rjmp	.-200    	; 0xb96 <SendDecimalValue+0x50>

	while (Count != 0)
     c5e:	99 20       	and	r9, r9
     c60:	99 f0       	breq	.+38     	; 0xc88 <SendDecimalValue+0x142>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     c62:	69 2d       	mov	r22, r9
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	61 50       	subi	r22, 0x01	; 1
     c68:	71 09       	sbc	r23, r1
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	8c 0f       	add	r24, r28
     c70:	9d 1f       	adc	r25, r29
     c72:	68 0f       	add	r22, r24
     c74:	79 1f       	adc	r23, r25
     c76:	21 e0       	ldi	r18, 0x01	; 1
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	40 e0       	ldi	r20, 0x00	; 0
     c7c:	50 e0       	ldi	r21, 0x00	; 0
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	0e 94 3a 14 	call	0x2874	; 0x2874 <UARTTransmitSync>
		
		Count--;
     c84:	9a 94       	dec	r9
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
     c86:	69 f7       	brne	.-38     	; 0xc62 <SendDecimalValue+0x11c>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}	
}
     c88:	ce 5f       	subi	r28, 0xFE	; 254
     c8a:	de 4f       	sbci	r29, 0xFE	; 254
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
     c9e:	ff 90       	pop	r15
     ca0:	ef 90       	pop	r14
     ca2:	df 90       	pop	r13
     ca4:	cf 90       	pop	r12
     ca6:	bf 90       	pop	r11
     ca8:	af 90       	pop	r10
     caa:	9f 90       	pop	r9
     cac:	8f 90       	pop	r8
     cae:	7f 90       	pop	r7
     cb0:	6f 90       	pop	r6
     cb2:	5f 90       	pop	r5
     cb4:	4f 90       	pop	r4
     cb6:	3f 90       	pop	r3
     cb8:	2f 90       	pop	r2
     cba:	08 95       	ret

00000cbc <SendDoubleValue>:

void
SendDoubleValue(double Value)
{
     cbc:	6f 92       	push	r6
     cbe:	7f 92       	push	r7
     cc0:	8f 92       	push	r8
     cc2:	9f 92       	push	r9
     cc4:	af 92       	push	r10
     cc6:	bf 92       	push	r11
     cc8:	cf 92       	push	r12
     cca:	df 92       	push	r13
     ccc:	ef 92       	push	r14
     cce:	ff 92       	push	r15
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	00 d0       	rcall	.+0      	; 0xcda <SendDoubleValue+0x1e>
     cda:	1f 92       	push	r1
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	6b 01       	movw	r12, r22
     ce2:	7c 01       	movw	r14, r24
	
	long long IntPart;
	
	unsigned char FracPart;
	
	unsigned char Dot = '.';
     ce4:	8e e2       	ldi	r24, 0x2E	; 46
     ce6:	8a 83       	std	Y+2, r24	; 0x02
	
	unsigned char Minus = '-';
     ce8:	8d e2       	ldi	r24, 0x2D	; 45
     cea:	8b 83       	std	Y+3, r24	; 0x03
	
	if (Value < 0)
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	a9 01       	movw	r20, r18
     cf2:	c7 01       	movw	r24, r14
     cf4:	b6 01       	movw	r22, r12
     cf6:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__cmpsf2>
     cfa:	88 23       	and	r24, r24
     cfc:	74 f4       	brge	.+28     	; 0xd1a <SendDoubleValue+0x5e>
	{
		
		UARTTransmitSync(UART_ZERO, (PVOID) &Minus, 1);
     cfe:	21 e0       	ldi	r18, 0x01	; 1
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e0       	ldi	r20, 0x00	; 0
     d04:	50 e0       	ldi	r21, 0x00	; 0
     d06:	be 01       	movw	r22, r28
     d08:	6d 5f       	subi	r22, 0xFD	; 253
     d0a:	7f 4f       	sbci	r23, 0xFF	; 255
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	0e 94 3a 14 	call	0x2874	; 0x2874 <UARTTransmitSync>
		
		Value = Value * -1;
     d12:	f7 fa       	bst	r15, 7
     d14:	f0 94       	com	r15
     d16:	f7 f8       	bld	r15, 7
     d18:	f0 94       	com	r15
	}
	
	IntPart = (long long) Value;
     d1a:	c7 01       	movw	r24, r14
     d1c:	b6 01       	movw	r22, r12
     d1e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__fixsfdi>
     d22:	62 2e       	mov	r6, r18
     d24:	73 2e       	mov	r7, r19
     d26:	84 2e       	mov	r8, r20
     d28:	95 2e       	mov	r9, r21
     d2a:	a6 2e       	mov	r10, r22
     d2c:	b7 2e       	mov	r11, r23
     d2e:	08 2f       	mov	r16, r24
     d30:	19 2f       	mov	r17, r25
		
	Value = Value - IntPart;
     d32:	0e 94 4c 11 	call	0x2298	; 0x2298 <__floatdisf>
     d36:	9b 01       	movw	r18, r22
     d38:	ac 01       	movw	r20, r24
     d3a:	c7 01       	movw	r24, r14
     d3c:	b6 01       	movw	r22, r12
     d3e:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__subsf3>
     d42:	6b 01       	movw	r12, r22
     d44:	7c 01       	movw	r14, r24
	
	SendDecimalValue(IntPart);
     d46:	26 2d       	mov	r18, r6
     d48:	37 2d       	mov	r19, r7
     d4a:	48 2d       	mov	r20, r8
     d4c:	59 2d       	mov	r21, r9
     d4e:	6a 2d       	mov	r22, r10
     d50:	7b 2d       	mov	r23, r11
     d52:	80 2f       	mov	r24, r16
     d54:	91 2f       	mov	r25, r17
     d56:	f7 de       	rcall	.-530    	; 0xb46 <SendDecimalValue>
	
	UARTTransmitSync(UART_ZERO, (PVOID) &Dot, 1);
     d58:	21 e0       	ldi	r18, 0x01	; 1
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	40 e0       	ldi	r20, 0x00	; 0
     d5e:	50 e0       	ldi	r21, 0x00	; 0
     d60:	be 01       	movw	r22, r28
     d62:	6e 5f       	subi	r22, 0xFE	; 254
     d64:	7f 4f       	sbci	r23, 0xFF	; 255
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	0e 94 3a 14 	call	0x2874	; 0x2874 <UARTTransmitSync>
	
	while (Value != 0)
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	a9 01       	movw	r20, r18
     d72:	c7 01       	movw	r24, r14
     d74:	b6 01       	movw	r22, r12
     d76:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__cmpsf2>
     d7a:	88 23       	and	r24, r24
     d7c:	79 f1       	breq	.+94     	; 0xddc <SendDoubleValue+0x120>
	{
		FracPart = (Value * 10);
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	40 e2       	ldi	r20, 0x20	; 32
     d84:	51 e4       	ldi	r21, 0x41	; 65
     d86:	c7 01       	movw	r24, r14
     d88:	b6 01       	movw	r22, r12
     d8a:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__mulsf3>
     d8e:	6b 01       	movw	r12, r22
     d90:	7c 01       	movw	r14, r24
     d92:	0e 94 20 11 	call	0x2240	; 0x2240 <__fixunssfsi>
     d96:	16 2f       	mov	r17, r22
		
		Value = (Value * 10) - FracPart;
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__floatsisf>
     da2:	9b 01       	movw	r18, r22
     da4:	ac 01       	movw	r20, r24
     da6:	c7 01       	movw	r24, r14
     da8:	b6 01       	movw	r22, r12
     daa:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__subsf3>
     dae:	6b 01       	movw	r12, r22
     db0:	7c 01       	movw	r14, r24
		
		FracPart = FracPart + ASCII_DECIMAL_CONVERSION;
     db2:	10 5d       	subi	r17, 0xD0	; 208
     db4:	19 83       	std	Y+1, r17	; 0x01
		
		UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
     db6:	21 e0       	ldi	r18, 0x01	; 1
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	40 e0       	ldi	r20, 0x00	; 0
     dbc:	50 e0       	ldi	r21, 0x00	; 0
     dbe:	be 01       	movw	r22, r28
     dc0:	6f 5f       	subi	r22, 0xFF	; 255
     dc2:	7f 4f       	sbci	r23, 0xFF	; 255
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	0e 94 3a 14 	call	0x2874	; 0x2874 <UARTTransmitSync>
	
	SendDecimalValue(IntPart);
	
	UARTTransmitSync(UART_ZERO, (PVOID) &Dot, 1);
	
	while (Value != 0)
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	a9 01       	movw	r20, r18
     dd0:	c7 01       	movw	r24, r14
     dd2:	b6 01       	movw	r22, r12
     dd4:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__cmpsf2>
     dd8:	81 11       	cpse	r24, r1
     dda:	d1 cf       	rjmp	.-94     	; 0xd7e <SendDoubleValue+0xc2>
	
	//
	// Print 0
	//
	
	FracPart = ASCII_DECIMAL_CONVERSION;
     ddc:	80 e3       	ldi	r24, 0x30	; 48
     dde:	89 83       	std	Y+1, r24	; 0x01
	
	UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
     de0:	21 e0       	ldi	r18, 0x01	; 1
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	40 e0       	ldi	r20, 0x00	; 0
     de6:	50 e0       	ldi	r21, 0x00	; 0
     de8:	be 01       	movw	r22, r28
     dea:	6f 5f       	subi	r22, 0xFF	; 255
     dec:	7f 4f       	sbci	r23, 0xFF	; 255
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	0e 94 3a 14 	call	0x2874	; 0x2874 <UARTTransmitSync>
}
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	ff 90       	pop	r15
     e04:	ef 90       	pop	r14
     e06:	df 90       	pop	r13
     e08:	cf 90       	pop	r12
     e0a:	bf 90       	pop	r11
     e0c:	af 90       	pop	r10
     e0e:	9f 90       	pop	r9
     e10:	8f 90       	pop	r8
     e12:	7f 90       	pop	r7
     e14:	6f 90       	pop	r6
     e16:	08 95       	ret

00000e18 <SendSignedDecimalValue>:

void
SendSignedDecimalValue(long long Value)
{
     e18:	2f 92       	push	r2
     e1a:	3f 92       	push	r3
     e1c:	4f 92       	push	r4
     e1e:	5f 92       	push	r5
     e20:	6f 92       	push	r6
     e22:	7f 92       	push	r7
     e24:	8f 92       	push	r8
     e26:	9f 92       	push	r9
     e28:	af 92       	push	r10
     e2a:	bf 92       	push	r11
     e2c:	cf 92       	push	r12
     e2e:	df 92       	push	r13
     e30:	ef 92       	push	r14
     e32:	ff 92       	push	r15
     e34:	0f 93       	push	r16
     e36:	1f 93       	push	r17
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	c3 50       	subi	r28, 0x03	; 3
     e42:	d1 40       	sbci	r29, 0x01	; 1
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
     e4e:	ce 5f       	subi	r28, 0xFE	; 254
     e50:	de 4f       	sbci	r29, 0xFE	; 254
     e52:	28 83       	st	Y, r18
     e54:	c2 50       	subi	r28, 0x02	; 2
     e56:	d1 40       	sbci	r29, 0x01	; 1
     e58:	83 2e       	mov	r8, r19
     e5a:	74 2e       	mov	r7, r20
     e5c:	65 2e       	mov	r6, r21
     e5e:	56 2e       	mov	r5, r22
     e60:	47 2e       	mov	r4, r23
     e62:	38 2e       	mov	r3, r24
     e64:	29 2e       	mov	r2, r25
	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
	
	unsigned char Minus = '-';
     e66:	8d e2       	ldi	r24, 0x2D	; 45
     e68:	cf 5f       	subi	r28, 0xFF	; 255
     e6a:	de 4f       	sbci	r29, 0xFE	; 254
     e6c:	88 83       	st	Y, r24
     e6e:	c1 50       	subi	r28, 0x01	; 1
     e70:	d1 40       	sbci	r29, 0x01	; 1

	//
	// If the value is negative, print - sign and make the value positive.
	//

	if (Value < 0)
     e72:	83 2d       	mov	r24, r3
     e74:	a0 e0       	ldi	r26, 0x00	; 0
     e76:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__cmpdi2_s8>
     e7a:	24 f5       	brge	.+72     	; 0xec4 <SendSignedDecimalValue+0xac>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &Minus, 1);
     e7c:	21 e0       	ldi	r18, 0x01	; 1
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	40 e0       	ldi	r20, 0x00	; 0
     e82:	50 e0       	ldi	r21, 0x00	; 0
     e84:	be 01       	movw	r22, r28
     e86:	6f 5f       	subi	r22, 0xFF	; 255
     e88:	7e 4f       	sbci	r23, 0xFE	; 254
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	0e 94 3a 14 	call	0x2874	; 0x2874 <UARTTransmitSync>

		Value *= -1;
     e90:	ce 5f       	subi	r28, 0xFE	; 254
     e92:	de 4f       	sbci	r29, 0xFE	; 254
     e94:	28 81       	ld	r18, Y
     e96:	c2 50       	subi	r28, 0x02	; 2
     e98:	d1 40       	sbci	r29, 0x01	; 1
     e9a:	38 2d       	mov	r19, r8
     e9c:	47 2d       	mov	r20, r7
     e9e:	56 2d       	mov	r21, r6
     ea0:	65 2d       	mov	r22, r5
     ea2:	74 2d       	mov	r23, r4
     ea4:	83 2d       	mov	r24, r3
     ea6:	92 2d       	mov	r25, r2
     ea8:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <__negdi2>
     eac:	ce 5f       	subi	r28, 0xFE	; 254
     eae:	de 4f       	sbci	r29, 0xFE	; 254
     eb0:	28 83       	st	Y, r18
     eb2:	c2 50       	subi	r28, 0x02	; 2
     eb4:	d1 40       	sbci	r29, 0x01	; 1
     eb6:	83 2e       	mov	r8, r19
     eb8:	74 2e       	mov	r7, r20
     eba:	65 2e       	mov	r6, r21
     ebc:	56 2e       	mov	r5, r22
     ebe:	47 2e       	mov	r4, r23
     ec0:	38 2e       	mov	r3, r24
     ec2:	29 2e       	mov	r2, r25
	UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
}

void
SendSignedDecimalValue(long long Value)
{
     ec4:	91 2c       	mov	r9, r1
	}

	do
	{

		if (Value < 10)
     ec6:	ce 5f       	subi	r28, 0xFE	; 254
     ec8:	de 4f       	sbci	r29, 0xFE	; 254
     eca:	28 81       	ld	r18, Y
     ecc:	c2 50       	subi	r28, 0x02	; 2
     ece:	d1 40       	sbci	r29, 0x01	; 1
     ed0:	38 2d       	mov	r19, r8
     ed2:	47 2d       	mov	r20, r7
     ed4:	56 2d       	mov	r21, r6
     ed6:	65 2d       	mov	r22, r5
     ed8:	74 2d       	mov	r23, r4
     eda:	83 2d       	mov	r24, r3
     edc:	92 2d       	mov	r25, r2
     ede:	a9 e0       	ldi	r26, 0x09	; 9
     ee0:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__cmpdi2_s8>
     ee4:	09 f0       	breq	.+2      	; 0xee8 <SendSignedDecimalValue+0xd0>
     ee6:	44 f4       	brge	.+16     	; 0xef8 <SendSignedDecimalValue+0xe0>

			Value = Value / 10;

		}
	
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     ee8:	fe 01       	movw	r30, r28
     eea:	e9 0d       	add	r30, r9
     eec:	f1 1d       	adc	r31, r1
     eee:	82 2f       	mov	r24, r18
     ef0:	80 5d       	subi	r24, 0xD0	; 208
     ef2:	81 83       	std	Z+1, r24	; 0x01
		
		Count++;
     ef4:	93 94       	inc	r9
     ef6:	4b c0       	rjmp	.+150    	; 0xf8e <SendSignedDecimalValue+0x176>

			Value = 0;
		}
		else
		{
			TransmitChar[Count] = Value % 10;
     ef8:	0f 2e       	mov	r0, r31
     efa:	fa e0       	ldi	r31, 0x0A	; 10
     efc:	af 2e       	mov	r10, r31
     efe:	f0 2d       	mov	r31, r0
     f00:	b1 2c       	mov	r11, r1
     f02:	c1 2c       	mov	r12, r1
     f04:	d1 2c       	mov	r13, r1
     f06:	e1 2c       	mov	r14, r1
     f08:	f1 2c       	mov	r15, r1
     f0a:	00 e0       	ldi	r16, 0x00	; 0
     f0c:	10 e0       	ldi	r17, 0x00	; 0
     f0e:	ce 5f       	subi	r28, 0xFE	; 254
     f10:	de 4f       	sbci	r29, 0xFE	; 254
     f12:	28 81       	ld	r18, Y
     f14:	c2 50       	subi	r28, 0x02	; 2
     f16:	d1 40       	sbci	r29, 0x01	; 1
     f18:	38 2d       	mov	r19, r8
     f1a:	47 2d       	mov	r20, r7
     f1c:	56 2d       	mov	r21, r6
     f1e:	65 2d       	mov	r22, r5
     f20:	74 2d       	mov	r23, r4
     f22:	83 2d       	mov	r24, r3
     f24:	92 2d       	mov	r25, r2
     f26:	0e 94 21 16 	call	0x2c42	; 0x2c42 <__moddi3>
     f2a:	cd 5f       	subi	r28, 0xFD	; 253
     f2c:	de 4f       	sbci	r29, 0xFE	; 254
     f2e:	28 83       	st	Y, r18
     f30:	c3 50       	subi	r28, 0x03	; 3
     f32:	d1 40       	sbci	r29, 0x01	; 1

			Value = Value / 10;
     f34:	ce 5f       	subi	r28, 0xFE	; 254
     f36:	de 4f       	sbci	r29, 0xFE	; 254
     f38:	28 81       	ld	r18, Y
     f3a:	c2 50       	subi	r28, 0x02	; 2
     f3c:	d1 40       	sbci	r29, 0x01	; 1
     f3e:	38 2d       	mov	r19, r8
     f40:	47 2d       	mov	r20, r7
     f42:	56 2d       	mov	r21, r6
     f44:	65 2d       	mov	r22, r5
     f46:	74 2d       	mov	r23, r4
     f48:	83 2d       	mov	r24, r3
     f4a:	92 2d       	mov	r25, r2
     f4c:	0e 94 23 16 	call	0x2c46	; 0x2c46 <__divdi3>
     f50:	ce 5f       	subi	r28, 0xFE	; 254
     f52:	de 4f       	sbci	r29, 0xFE	; 254
     f54:	28 83       	st	Y, r18
     f56:	c2 50       	subi	r28, 0x02	; 2
     f58:	d1 40       	sbci	r29, 0x01	; 1
     f5a:	83 2e       	mov	r8, r19
     f5c:	74 2e       	mov	r7, r20
     f5e:	65 2e       	mov	r6, r21
     f60:	56 2e       	mov	r5, r22
     f62:	47 2e       	mov	r4, r23
     f64:	38 2e       	mov	r3, r24
     f66:	29 2e       	mov	r2, r25

		}
	
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     f68:	e1 e0       	ldi	r30, 0x01	; 1
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	ec 0f       	add	r30, r28
     f6e:	fd 1f       	adc	r31, r29
     f70:	e9 0d       	add	r30, r9
     f72:	f1 1d       	adc	r31, r1
     f74:	cd 5f       	subi	r28, 0xFD	; 253
     f76:	de 4f       	sbci	r29, 0xFE	; 254
     f78:	a8 81       	ld	r26, Y
     f7a:	c3 50       	subi	r28, 0x03	; 3
     f7c:	d1 40       	sbci	r29, 0x01	; 1
     f7e:	a0 5d       	subi	r26, 0xD0	; 208
     f80:	a0 83       	st	Z, r26
		
		Count++;
     f82:	93 94       	inc	r9

	} while (Value != 0);
     f84:	a0 e0       	ldi	r26, 0x00	; 0
     f86:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__cmpdi2_s8>
     f8a:	09 f0       	breq	.+2      	; 0xf8e <SendSignedDecimalValue+0x176>
     f8c:	9c cf       	rjmp	.-200    	; 0xec6 <SendSignedDecimalValue+0xae>

	while (Count != 0)
     f8e:	99 20       	and	r9, r9
     f90:	99 f0       	breq	.+38     	; 0xfb8 <SendSignedDecimalValue+0x1a0>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     f92:	69 2d       	mov	r22, r9
     f94:	70 e0       	ldi	r23, 0x00	; 0
     f96:	61 50       	subi	r22, 0x01	; 1
     f98:	71 09       	sbc	r23, r1
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	8c 0f       	add	r24, r28
     fa0:	9d 1f       	adc	r25, r29
     fa2:	68 0f       	add	r22, r24
     fa4:	79 1f       	adc	r23, r25
     fa6:	21 e0       	ldi	r18, 0x01	; 1
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	0e 94 3a 14 	call	0x2874	; 0x2874 <UARTTransmitSync>
		
		Count--;
     fb4:	9a 94       	dec	r9
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
     fb6:	69 f7       	brne	.-38     	; 0xf92 <SendSignedDecimalValue+0x17a>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}
}
     fb8:	cd 5f       	subi	r28, 0xFD	; 253
     fba:	de 4f       	sbci	r29, 0xFE	; 254
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	de bf       	out	0x3e, r29	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	cd bf       	out	0x3d, r28	; 61
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	ff 90       	pop	r15
     fd0:	ef 90       	pop	r14
     fd2:	df 90       	pop	r13
     fd4:	cf 90       	pop	r12
     fd6:	bf 90       	pop	r11
     fd8:	af 90       	pop	r10
     fda:	9f 90       	pop	r9
     fdc:	8f 90       	pop	r8
     fde:	7f 90       	pop	r7
     fe0:	6f 90       	pop	r6
     fe2:	5f 90       	pop	r5
     fe4:	4f 90       	pop	r4
     fe6:	3f 90       	pop	r3
     fe8:	2f 90       	pop	r2
     fea:	08 95       	ret

00000fec <SendTrace>:
	}
}

void
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{
     fec:	3f 92       	push	r3
     fee:	4f 92       	push	r4
     ff0:	5f 92       	push	r5
     ff2:	6f 92       	push	r6
     ff4:	7f 92       	push	r7
     ff6:	8f 92       	push	r8
     ff8:	9f 92       	push	r9
     ffa:	af 92       	push	r10
     ffc:	bf 92       	push	r11
     ffe:	cf 92       	push	r12
    1000:	df 92       	push	r13
    1002:	ef 92       	push	r14
    1004:	ff 92       	push	r15
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	1f 92       	push	r1
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	0e 89       	ldd	r16, Y+22	; 0x16
    1016:	1f 89       	ldd	r17, Y+23	; 0x17
	
	char Character;

	va_list ArgList;

	if (!gTraceInitialized || !(TraceLevel & gTraceLevel))
    1018:	80 91 8d 0b 	lds	r24, 0x0B8D
    101c:	88 23       	and	r24, r24
    101e:	09 f4       	brne	.+2      	; 0x1022 <SendTrace+0x36>
    1020:	1e c1       	rjmp	.+572    	; 0x125e <SendTrace+0x272>
    1022:	80 91 a9 0b 	lds	r24, 0x0BA9
    1026:	9d 89       	ldd	r25, Y+21	; 0x15
    1028:	89 23       	and	r24, r25
    102a:	09 f4       	brne	.+2      	; 0x102e <SendTrace+0x42>
    102c:	18 c1       	rjmp	.+560    	; 0x125e <SendTrace+0x272>
	{
		return;
	}

	va_start(ArgList, String);
    102e:	7e 01       	movw	r14, r28
    1030:	28 e1       	ldi	r18, 0x18	; 24
    1032:	e2 0e       	add	r14, r18
    1034:	f1 1c       	adc	r15, r1

	while (*String != '\0')
    1036:	f8 01       	movw	r30, r16
    1038:	20 81       	ld	r18, Z
    103a:	22 23       	and	r18, r18
    103c:	09 f4       	brne	.+2      	; 0x1040 <SendTrace+0x54>
    103e:	0f c1       	rjmp	.+542    	; 0x125e <SendTrace+0x272>
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{

	bool IsLong = FALSE;
	
	bool IsLongLong = FALSE;
    1040:	41 2c       	mov	r4, r1

void
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{

	bool IsLong = FALSE;
    1042:	d1 2c       	mov	r13, r1
						IsLong = FALSE;
					}
					
					SendDoubleValue(va_arg(ArgList, double));
					
					break;
    1044:	51 2c       	mov	r5, r1
						
						IsLong = FALSE;
					}
					else
					{
						IsLong = TRUE;
    1046:	33 24       	eor	r3, r3
    1048:	33 94       	inc	r3
	va_start(ArgList, String);

	while (*String != '\0')
	{

		if (*String == '%' || IsLong || IsLongLong)
    104a:	25 32       	cpi	r18, 0x25	; 37
    104c:	29 f0       	breq	.+10     	; 0x1058 <SendTrace+0x6c>
    104e:	d1 10       	cpse	r13, r1
    1050:	05 c0       	rjmp	.+10     	; 0x105c <SendTrace+0x70>
    1052:	41 10       	cpse	r4, r1
    1054:	03 c0       	rjmp	.+6      	; 0x105c <SendTrace+0x70>
    1056:	f1 c0       	rjmp	.+482    	; 0x123a <SendTrace+0x24e>
		{

			if (*String == '%')
			{
				String++;
    1058:	0f 5f       	subi	r16, 0xFF	; 255
    105a:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			switch (*String)
    105c:	f8 01       	movw	r30, r16
    105e:	80 81       	ld	r24, Z
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	fc 01       	movw	r30, r24
    1064:	e3 56       	subi	r30, 0x63	; 99
    1066:	f1 09       	sbc	r31, r1
    1068:	e6 31       	cpi	r30, 0x16	; 22
    106a:	f1 05       	cpc	r31, r1
    106c:	08 f0       	brcs	.+2      	; 0x1070 <SendTrace+0x84>
    106e:	ef c0       	rjmp	.+478    	; 0x124e <SendTrace+0x262>
    1070:	ea 5b       	subi	r30, 0xBA	; 186
    1072:	ff 4f       	sbci	r31, 0xFF	; 255
    1074:	0c 94 1b 16 	jmp	0x2c36	; 0x2c36 <__tablejump2__>
			{
				case 'c':
				{

					Character = va_arg(ArgList, int);
    1078:	57 01       	movw	r10, r14
    107a:	f2 e0       	ldi	r31, 0x02	; 2
    107c:	af 0e       	add	r10, r31
    107e:	b1 1c       	adc	r11, r1
    1080:	f7 01       	movw	r30, r14
    1082:	80 81       	ld	r24, Z
    1084:	89 83       	std	Y+1, r24	; 0x01
					
					UARTTransmitSync(UART_ZERO, (PVOID) &Character, 1);
    1086:	21 e0       	ldi	r18, 0x01	; 1
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	40 e0       	ldi	r20, 0x00	; 0
    108c:	50 e0       	ldi	r21, 0x00	; 0
    108e:	be 01       	movw	r22, r28
    1090:	6f 5f       	subi	r22, 0xFF	; 255
    1092:	7f 4f       	sbci	r23, 0xFF	; 255
    1094:	85 2d       	mov	r24, r5
    1096:	0e 94 3a 14 	call	0x2874	; 0x2874 <UARTTransmitSync>
			switch (*String)
			{
				case 'c':
				{

					Character = va_arg(ArgList, int);
    109a:	75 01       	movw	r14, r10
					
					UARTTransmitSync(UART_ZERO, (PVOID) &Character, 1);

					break;
    109c:	d8 c0       	rjmp	.+432    	; 0x124e <SendTrace+0x262>

				}
				case 'd':
				{

					if (IsLong)
    109e:	dd 20       	and	r13, r13
    10a0:	d9 f0       	breq	.+54     	; 0x10d8 <SendTrace+0xec>
					{

						SendSignedDecimalValue(va_arg(ArgList, long));
    10a2:	67 01       	movw	r12, r14
    10a4:	f4 e0       	ldi	r31, 0x04	; 4
    10a6:	cf 0e       	add	r12, r31
    10a8:	d1 1c       	adc	r13, r1
    10aa:	f7 01       	movw	r30, r14
    10ac:	80 81       	ld	r24, Z
    10ae:	91 81       	ldd	r25, Z+1	; 0x01
    10b0:	a2 81       	ldd	r26, Z+2	; 0x02
    10b2:	b3 81       	ldd	r27, Z+3	; 0x03
    10b4:	4c 01       	movw	r8, r24
    10b6:	5d 01       	movw	r10, r26
    10b8:	bb 0c       	add	r11, r11
    10ba:	88 08       	sbc	r8, r8
    10bc:	98 2c       	mov	r9, r8
    10be:	54 01       	movw	r10, r8
    10c0:	28 2f       	mov	r18, r24
    10c2:	39 2f       	mov	r19, r25
    10c4:	4a 2f       	mov	r20, r26
    10c6:	5b 2f       	mov	r21, r27
    10c8:	68 2d       	mov	r22, r8
    10ca:	78 2d       	mov	r23, r8
    10cc:	88 2d       	mov	r24, r8
    10ce:	98 2d       	mov	r25, r8
    10d0:	a3 de       	rcall	.-698    	; 0xe18 <SendSignedDecimalValue>
    10d2:	76 01       	movw	r14, r12

						IsLong = FALSE;
    10d4:	d5 2c       	mov	r13, r5
    10d6:	bb c0       	rjmp	.+374    	; 0x124e <SendTrace+0x262>

					}
					else if (IsLongLong)
    10d8:	44 20       	and	r4, r4
    10da:	89 f0       	breq	.+34     	; 0x10fe <SendTrace+0x112>
					{
						SendSignedDecimalValue(va_arg(ArgList, long long));
    10dc:	57 01       	movw	r10, r14
    10de:	f8 e0       	ldi	r31, 0x08	; 8
    10e0:	af 0e       	add	r10, r31
    10e2:	b1 1c       	adc	r11, r1
    10e4:	f7 01       	movw	r30, r14
    10e6:	20 81       	ld	r18, Z
    10e8:	31 81       	ldd	r19, Z+1	; 0x01
    10ea:	42 81       	ldd	r20, Z+2	; 0x02
    10ec:	53 81       	ldd	r21, Z+3	; 0x03
    10ee:	64 81       	ldd	r22, Z+4	; 0x04
    10f0:	75 81       	ldd	r23, Z+5	; 0x05
    10f2:	86 81       	ldd	r24, Z+6	; 0x06
    10f4:	97 81       	ldd	r25, Z+7	; 0x07
    10f6:	90 de       	rcall	.-736    	; 0xe18 <SendSignedDecimalValue>
    10f8:	75 01       	movw	r14, r10

						IsLongLong = FALSE;
    10fa:	45 2c       	mov	r4, r5
    10fc:	a8 c0       	rjmp	.+336    	; 0x124e <SendTrace+0x262>
					}
					else
					{

						SendSignedDecimalValue(va_arg(ArgList, int));
    10fe:	57 01       	movw	r10, r14
    1100:	f2 e0       	ldi	r31, 0x02	; 2
    1102:	af 0e       	add	r10, r31
    1104:	b1 1c       	adc	r11, r1
    1106:	f7 01       	movw	r30, r14
    1108:	31 81       	ldd	r19, Z+1	; 0x01
    110a:	20 81       	ld	r18, Z
    110c:	93 2f       	mov	r25, r19
    110e:	99 0f       	add	r25, r25
    1110:	99 0b       	sbc	r25, r25
    1112:	49 2f       	mov	r20, r25
    1114:	59 2f       	mov	r21, r25
    1116:	69 2f       	mov	r22, r25
    1118:	79 2f       	mov	r23, r25
    111a:	89 2f       	mov	r24, r25
    111c:	7d de       	rcall	.-774    	; 0xe18 <SendSignedDecimalValue>
    111e:	75 01       	movw	r14, r10
    1120:	96 c0       	rjmp	.+300    	; 0x124e <SendTrace+0x262>
					break;
				}
				case 'u':
				{

					if(IsLong)
    1122:	dd 20       	and	r13, r13
    1124:	b9 f0       	breq	.+46     	; 0x1154 <SendTrace+0x168>
					{

						SendDecimalValue(va_arg(ArgList, unsigned long));
    1126:	37 01       	movw	r6, r14
    1128:	f4 e0       	ldi	r31, 0x04	; 4
    112a:	6f 0e       	add	r6, r31
    112c:	71 1c       	adc	r7, r1
    112e:	f7 01       	movw	r30, r14
    1130:	80 81       	ld	r24, Z
    1132:	91 81       	ldd	r25, Z+1	; 0x01
    1134:	a2 81       	ldd	r26, Z+2	; 0x02
    1136:	b3 81       	ldd	r27, Z+3	; 0x03
    1138:	4c 01       	movw	r8, r24
    113a:	5d 01       	movw	r10, r26
    113c:	28 2f       	mov	r18, r24
    113e:	39 2d       	mov	r19, r9
    1140:	4a 2d       	mov	r20, r10
    1142:	5b 2d       	mov	r21, r11
    1144:	65 2d       	mov	r22, r5
    1146:	75 2d       	mov	r23, r5
    1148:	85 2d       	mov	r24, r5
    114a:	95 2d       	mov	r25, r5
    114c:	fc dc       	rcall	.-1544   	; 0xb46 <SendDecimalValue>
    114e:	73 01       	movw	r14, r6
						
						IsLong = FALSE;
    1150:	d5 2c       	mov	r13, r5
    1152:	7d c0       	rjmp	.+250    	; 0x124e <SendTrace+0x262>
					
					}
					else if(IsLongLong)
    1154:	44 20       	and	r4, r4
    1156:	89 f0       	breq	.+34     	; 0x117a <SendTrace+0x18e>
					{
						SendDecimalValue(va_arg(ArgList, unsigned long long));
    1158:	57 01       	movw	r10, r14
    115a:	f8 e0       	ldi	r31, 0x08	; 8
    115c:	af 0e       	add	r10, r31
    115e:	b1 1c       	adc	r11, r1
    1160:	f7 01       	movw	r30, r14
    1162:	20 81       	ld	r18, Z
    1164:	31 81       	ldd	r19, Z+1	; 0x01
    1166:	42 81       	ldd	r20, Z+2	; 0x02
    1168:	53 81       	ldd	r21, Z+3	; 0x03
    116a:	64 81       	ldd	r22, Z+4	; 0x04
    116c:	75 81       	ldd	r23, Z+5	; 0x05
    116e:	86 81       	ldd	r24, Z+6	; 0x06
    1170:	97 81       	ldd	r25, Z+7	; 0x07
    1172:	e9 dc       	rcall	.-1582   	; 0xb46 <SendDecimalValue>
    1174:	75 01       	movw	r14, r10
						
						IsLongLong = FALSE;
    1176:	45 2c       	mov	r4, r5
    1178:	6a c0       	rjmp	.+212    	; 0x124e <SendTrace+0x262>
					}
					else
					{

						SendDecimalValue(va_arg(ArgList, unsigned int));
    117a:	f7 01       	movw	r30, r14
    117c:	40 81       	ld	r20, Z
    117e:	51 81       	ldd	r21, Z+1	; 0x01
    1180:	f2 e0       	ldi	r31, 0x02	; 2
    1182:	ef 0e       	add	r14, r31
    1184:	f1 1c       	adc	r15, r1
    1186:	24 2f       	mov	r18, r20
    1188:	35 2f       	mov	r19, r21
    118a:	45 2d       	mov	r20, r5
    118c:	55 2d       	mov	r21, r5
    118e:	65 2d       	mov	r22, r5
    1190:	75 2d       	mov	r23, r5
    1192:	85 2d       	mov	r24, r5
    1194:	95 2d       	mov	r25, r5
    1196:	d7 dc       	rcall	.-1618   	; 0xb46 <SendDecimalValue>
    1198:	5a c0       	rjmp	.+180    	; 0x124e <SendTrace+0x262>
					break;
				}
				case 'x':
				{

					if (IsLong)
    119a:	dd 20       	and	r13, r13
    119c:	a9 f0       	breq	.+42     	; 0x11c8 <SendTrace+0x1dc>
					{

						SendHexValue(va_arg(ArgList, unsigned long));
    119e:	f7 01       	movw	r30, r14
    11a0:	80 81       	ld	r24, Z
    11a2:	91 81       	ldd	r25, Z+1	; 0x01
    11a4:	a2 81       	ldd	r26, Z+2	; 0x02
    11a6:	b3 81       	ldd	r27, Z+3	; 0x03
    11a8:	24 e0       	ldi	r18, 0x04	; 4
    11aa:	e2 0e       	add	r14, r18
    11ac:	f1 1c       	adc	r15, r1
    11ae:	3c 01       	movw	r6, r24
    11b0:	4d 01       	movw	r8, r26
    11b2:	28 2f       	mov	r18, r24
    11b4:	37 2d       	mov	r19, r7
    11b6:	48 2d       	mov	r20, r8
    11b8:	59 2d       	mov	r21, r9
    11ba:	65 2d       	mov	r22, r5
    11bc:	75 2d       	mov	r23, r5
    11be:	85 2d       	mov	r24, r5
    11c0:	95 2d       	mov	r25, r5
    11c2:	1d dc       	rcall	.-1990   	; 0x9fe <SendHexValue>

						IsLong = FALSE;
    11c4:	d5 2c       	mov	r13, r5
    11c6:	43 c0       	rjmp	.+134    	; 0x124e <SendTrace+0x262>

					}
					else if (IsLongLong)
    11c8:	44 20       	and	r4, r4
    11ca:	79 f0       	breq	.+30     	; 0x11ea <SendTrace+0x1fe>
					{
						SendHexValue(va_arg(ArgList, unsigned long long));
    11cc:	f7 01       	movw	r30, r14
    11ce:	20 81       	ld	r18, Z
    11d0:	88 e0       	ldi	r24, 0x08	; 8
    11d2:	e8 0e       	add	r14, r24
    11d4:	f1 1c       	adc	r15, r1
    11d6:	31 81       	ldd	r19, Z+1	; 0x01
    11d8:	42 81       	ldd	r20, Z+2	; 0x02
    11da:	53 81       	ldd	r21, Z+3	; 0x03
    11dc:	64 81       	ldd	r22, Z+4	; 0x04
    11de:	75 81       	ldd	r23, Z+5	; 0x05
    11e0:	86 81       	ldd	r24, Z+6	; 0x06
    11e2:	97 81       	ldd	r25, Z+7	; 0x07
    11e4:	0c dc       	rcall	.-2024   	; 0x9fe <SendHexValue>
						
						IsLongLong = FALSE;
    11e6:	45 2c       	mov	r4, r5
    11e8:	32 c0       	rjmp	.+100    	; 0x124e <SendTrace+0x262>
					}
					else
					{

						SendHexValue(va_arg(ArgList, unsigned int));
    11ea:	f7 01       	movw	r30, r14
    11ec:	40 81       	ld	r20, Z
    11ee:	51 81       	ldd	r21, Z+1	; 0x01
    11f0:	e2 e0       	ldi	r30, 0x02	; 2
    11f2:	ee 0e       	add	r14, r30
    11f4:	f1 1c       	adc	r15, r1
    11f6:	24 2f       	mov	r18, r20
    11f8:	35 2f       	mov	r19, r21
    11fa:	45 2d       	mov	r20, r5
    11fc:	55 2d       	mov	r21, r5
    11fe:	65 2d       	mov	r22, r5
    1200:	75 2d       	mov	r23, r5
    1202:	85 2d       	mov	r24, r5
    1204:	95 2d       	mov	r25, r5
    1206:	fb db       	rcall	.-2058   	; 0x9fe <SendHexValue>
    1208:	22 c0       	rjmp	.+68     	; 0x124e <SendTrace+0x262>
					break;
				}
				case 'l':
				{

					if (IsLong)
    120a:	dd 20       	and	r13, r13
    120c:	f9 f0       	breq	.+62     	; 0x124c <SendTrace+0x260>
					{
						IsLongLong = TRUE;
    120e:	43 2c       	mov	r4, r3
						
						IsLong = FALSE;
    1210:	d5 2c       	mov	r13, r5
    1212:	1d c0       	rjmp	.+58     	; 0x124e <SendTrace+0x262>
					break;
				}
				case 's':
				{
					
					SendStringValue(va_arg(ArgList, char *)); 
    1214:	f7 01       	movw	r30, r14
    1216:	80 81       	ld	r24, Z
    1218:	91 81       	ldd	r25, Z+1	; 0x01
    121a:	f2 e0       	ldi	r31, 0x02	; 2
    121c:	ef 0e       	add	r14, r31
    121e:	f1 1c       	adc	r15, r1
    1220:	df db       	rcall	.-2114   	; 0x9e0 <SendStringValue>

					break;
    1222:	15 c0       	rjmp	.+42     	; 0x124e <SendTrace+0x262>
					if(IsLong)
					{
						IsLong = FALSE;
					}
					
					SendDoubleValue(va_arg(ArgList, double));
    1224:	f7 01       	movw	r30, r14
    1226:	60 81       	ld	r22, Z
    1228:	71 81       	ldd	r23, Z+1	; 0x01
    122a:	82 81       	ldd	r24, Z+2	; 0x02
    122c:	93 81       	ldd	r25, Z+3	; 0x03
    122e:	24 e0       	ldi	r18, 0x04	; 4
    1230:	e2 0e       	add	r14, r18
    1232:	f1 1c       	adc	r15, r1
    1234:	43 dd       	rcall	.-1402   	; 0xcbc <SendDoubleValue>
					
					break;
    1236:	d5 2c       	mov	r13, r5
    1238:	0a c0       	rjmp	.+20     	; 0x124e <SendTrace+0x262>

		}
		else
		{

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
    123a:	21 e0       	ldi	r18, 0x01	; 1
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	40 e0       	ldi	r20, 0x00	; 0
    1240:	50 e0       	ldi	r21, 0x00	; 0
    1242:	b8 01       	movw	r22, r16
    1244:	85 2d       	mov	r24, r5
    1246:	0e 94 3a 14 	call	0x2874	; 0x2874 <UARTTransmitSync>
    124a:	01 c0       	rjmp	.+2      	; 0x124e <SendTrace+0x262>
						
						IsLong = FALSE;
					}
					else
					{
						IsLong = TRUE;
    124c:	d3 2c       	mov	r13, r3

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
				
		}

		String++;
    124e:	c8 01       	movw	r24, r16
    1250:	01 96       	adiw	r24, 0x01	; 1
		return;
	}

	va_start(ArgList, String);

	while (*String != '\0')
    1252:	f8 01       	movw	r30, r16
    1254:	21 81       	ldd	r18, Z+1	; 0x01
    1256:	22 23       	and	r18, r18
    1258:	11 f0       	breq	.+4      	; 0x125e <SendTrace+0x272>

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
				
		}

		String++;
    125a:	8c 01       	movw	r16, r24
    125c:	f6 ce       	rjmp	.-532    	; 0x104a <SendTrace+0x5e>
		
	}
	
	va_end(ArgList);
	
}
    125e:	0f 90       	pop	r0
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
    1268:	ff 90       	pop	r15
    126a:	ef 90       	pop	r14
    126c:	df 90       	pop	r13
    126e:	cf 90       	pop	r12
    1270:	bf 90       	pop	r11
    1272:	af 90       	pop	r10
    1274:	9f 90       	pop	r9
    1276:	8f 90       	pop	r8
    1278:	7f 90       	pop	r7
    127a:	6f 90       	pop	r6
    127c:	5f 90       	pop	r5
    127e:	4f 90       	pop	r4
    1280:	3f 90       	pop	r3
    1282:	08 95       	ret

00001284 <InitADC>:

bool gADCInitialized = FALSE;

bool
InitADC(PADC_INIT_PARAMS InitParams)
{
    1284:	fc 01       	movw	r30, r24
	
	//
	// Check to see if the init params is set to NULL
	//
	
	if (InitParams == NULL)
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	b9 f0       	breq	.+46     	; 0x12b8 <InitADC+0x34>
	// Initialize ADC Mux register
	//
	
	AdcMux.AsUINT8 = 0;
	
	AdcMux.RefVoltSelect = InitParams->RefVoltSelect;
    128a:	81 81       	ldd	r24, Z+1	; 0x01
    128c:	82 95       	swap	r24
    128e:	88 0f       	add	r24, r24
    1290:	88 0f       	add	r24, r24
    1292:	80 7c       	andi	r24, 0xC0	; 192
	
	AdcMux.Adlar = InitParams->Flags.IsLeftAdjustResult;
    1294:	90 81       	ld	r25, Z
    1296:	90 fb       	bst	r25, 0
    1298:	85 f9       	bld	r24, 5
	
	ADMUX = AdcMux.AsUINT8;
    129a:	80 93 7c 00 	sts	0x007C, r24
	// Initialize Control and Status A Register
	//
	
	AdcCtrlStatusA.AsUINT8 = 0;
	
	AdcCtrlStatusA.Prescalar = InitParams->Prescalar;
    129e:	82 81       	ldd	r24, Z+2	; 0x02
    12a0:	87 70       	andi	r24, 0x07	; 7
	
	AdcCtrlStatusA.ADCEnable = 1;
    12a2:	80 68       	ori	r24, 0x80	; 128
	
	ADCSRA = AdcCtrlStatusA.AsUINT8;
    12a4:	80 93 7a 00 	sts	0x007A, r24
	
	//
	// Initialize Control and Status Register B
	//
	
	ADCSRB = 0;
    12a8:	10 92 7b 00 	sts	0x007B, r1
	
	//
	// Initialize Digital Input Disable Register 0
	//
	
	DIDR0 = InitParams->EnabledChannelsBitVector;
    12ac:	83 81       	ldd	r24, Z+3	; 0x03
    12ae:	80 93 7e 00 	sts	0x007E, r24
	
	
	gADCInitialized = TRUE;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	80 93 8e 0b 	sts	0x0B8E, r24
	
	Exit:

	return gADCInitialized;
}
    12b8:	80 91 8e 0b 	lds	r24, 0x0B8E
    12bc:	08 95       	ret

000012be <ADCRead>:
	
	//
	// Read DIDR0 register to check enabled channels
	//
	
	if (!(DIDR0 & (0x1 << AdcChannel)))
    12be:	20 91 7e 00 	lds	r18, 0x007E
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	08 2e       	mov	r0, r24
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <ADCRead+0xe>
    12c8:	35 95       	asr	r19
    12ca:	27 95       	ror	r18
    12cc:	0a 94       	dec	r0
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <ADCRead+0xa>
    12d0:	20 fd       	sbrc	r18, 0
    12d2:	0c c0       	rjmp	.+24     	; 0x12ec <ADCRead+0x2e>
	{
		Status = FALSE;
		
		SendTrace(ERROR_LEVEL, "ADC Channel Not Enabled\r\n");
    12d4:	81 e7       	ldi	r24, 0x71	; 113
    12d6:	9a e0       	ldi	r25, 0x0A	; 10
    12d8:	9f 93       	push	r25
    12da:	8f 93       	push	r24
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	8f 93       	push	r24
    12e0:	85 de       	rcall	.-758    	; 0xfec <SendTrace>
		
		goto Exit;
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
	// Read DIDR0 register to check enabled channels
	//
	
	if (!(DIDR0 & (0x1 << AdcChannel)))
	{
		Status = FALSE;
    12e8:	80 e0       	ldi	r24, 0x00	; 0
		
		SendTrace(ERROR_LEVEL, "ADC Channel Not Enabled\r\n");
		
		goto Exit;
    12ea:	08 95       	ret
	
	//
	// Write the ADC Channel in ADCMUX
	//
	
	AdcMux.AsUINT8 = ADMUX;
    12ec:	ec e7       	ldi	r30, 0x7C	; 124
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	90 81       	ld	r25, Z
	
	AdcMux.Mux = AdcChannel;
    12f2:	8f 71       	andi	r24, 0x1F	; 31
    12f4:	90 7e       	andi	r25, 0xE0	; 224
    12f6:	89 2b       	or	r24, r25
	
	ADMUX = AdcMux.AsUINT8; 
    12f8:	80 83       	st	Z, r24
	
	//
	// Start Conversion
	//
	
	START_CONVERSION();
    12fa:	ea e7       	ldi	r30, 0x7A	; 122
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	80 64       	ori	r24, 0x40	; 64
    1302:	80 83       	st	Z, r24
	
	//
	// Wait for Conversion to complete
	//
	
	WAIT_FOR_CONVERSION();
    1304:	80 81       	ld	r24, Z
    1306:	84 ff       	sbrs	r24, 4
    1308:	fd cf       	rjmp	.-6      	; 0x1304 <ADCRead+0x46>
	
	//
	// Read the data
	//
	
	*Value = ADCL;
    130a:	80 91 78 00 	lds	r24, 0x0078
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	fb 01       	movw	r30, r22
    1312:	91 83       	std	Z+1, r25	; 0x01
    1314:	80 83       	st	Z, r24
	
	*Value |= (ADCH << 8);
    1316:	20 91 79 00 	lds	r18, 0x0079
    131a:	92 2b       	or	r25, r18
	
	if (*Value >= ADC_MAX_VALUE)
    131c:	8c 3f       	cpi	r24, 0xFC	; 252
    131e:	f3 e0       	ldi	r31, 0x03	; 3
    1320:	9f 07       	cpc	r25, r31
    1322:	28 f4       	brcc	.+10     	; 0x132e <ADCRead+0x70>
	// Read the data
	//
	
	*Value = ADCL;
	
	*Value |= (ADCH << 8);
    1324:	fb 01       	movw	r30, r22
    1326:	91 83       	std	Z+1, r25	; 0x01
    1328:	80 83       	st	Z, r24
}

bool
ADCRead(ADC_CHANNEL AdcChannel, unsigned int *Value)
{
	bool Status = TRUE;
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	08 95       	ret
	
	*Value |= (ADCH << 8);
	
	if (*Value >= ADC_MAX_VALUE)
	{
		*Value = ADC_MAX_VALUE - 1;
    132e:	8b ef       	ldi	r24, 0xFB	; 251
    1330:	93 e0       	ldi	r25, 0x03	; 3
    1332:	fb 01       	movw	r30, r22
    1334:	91 83       	std	Z+1, r25	; 0x01
    1336:	80 83       	st	Z, r24
}

bool
ADCRead(ADC_CHANNEL AdcChannel, unsigned int *Value)
{
	bool Status = TRUE;
    1338:	81 e0       	ldi	r24, 0x01	; 1
	}
	
Exit:

	return Status;
    133a:	08 95       	ret

0000133c <LCDWrite>:
	return Status;
}

bool
LCDWrite(PLCD_TWI_DATA TwiData, bool IsEndOfTransfer)
{
    133c:	ff 92       	push	r15
    133e:	0f 93       	push	r16
    1340:	1f 93       	push	r17
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    1346:	ec 01       	movw	r28, r24
    1348:	f6 2e       	mov	r15, r22
	bool Status = FALSE;
	
	gSlaveAddress.RW_EnGenCall = 0;
    134a:	80 91 aa 0b 	lds	r24, 0x0BAA
    134e:	8e 7f       	andi	r24, 0xFE	; 254
    1350:	80 93 aa 0b 	sts	0x0BAA, r24
	
	//
	// Send the value using TWI Transmit.
	//
	
	TwiData->Enable = 1;
    1354:	88 81       	ld	r24, Y
    1356:	84 60       	ori	r24, 0x04	; 4
    1358:	88 83       	st	Y, r24
	
	Status = TwiTransmit(&TwiData->AsUINT8, 1, &gSlaveAddress, FALSE);
    135a:	00 e0       	ldi	r16, 0x00	; 0
    135c:	2a ea       	ldi	r18, 0xAA	; 170
    135e:	3b e0       	ldi	r19, 0x0B	; 11
    1360:	41 e0       	ldi	r20, 0x01	; 1
    1362:	50 e0       	ldi	r21, 0x00	; 0
    1364:	60 e0       	ldi	r22, 0x00	; 0
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	ce 01       	movw	r24, r28
    136a:	d8 da       	rcall	.-2640   	; 0x91c <TwiTransmit>
    136c:	18 2f       	mov	r17, r24
	
	if (!Status)
    136e:	81 11       	cpse	r24, r1
    1370:	0b c0       	rjmp	.+22     	; 0x1388 <LCDWrite+0x4c>
	{
		SendTrace(ERROR_LEVEL, "Transmit - Twi Transmit Failed\r\n");
    1372:	2b e8       	ldi	r18, 0x8B	; 139
    1374:	3a e0       	ldi	r19, 0x0A	; 10
    1376:	3f 93       	push	r19
    1378:	2f 93       	push	r18
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	8f 93       	push	r24
    137e:	36 de       	rcall	.-916    	; 0xfec <SendTrace>
		
		goto Exit;
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	19 c0       	rjmp	.+50     	; 0x13ba <LCDWrite+0x7e>
	
	//
	// Now pulse the enable bit.
	//
	
	TwiData->Enable = 0;
    1388:	88 81       	ld	r24, Y
    138a:	8b 7f       	andi	r24, 0xFB	; 251
    138c:	88 83       	st	Y, r24

	Status = TwiTransmit(&TwiData->AsUINT8, 1, &gSlaveAddress, IsEndOfTransfer);
    138e:	0f 2d       	mov	r16, r15
    1390:	2a ea       	ldi	r18, 0xAA	; 170
    1392:	3b e0       	ldi	r19, 0x0B	; 11
    1394:	41 e0       	ldi	r20, 0x01	; 1
    1396:	50 e0       	ldi	r21, 0x00	; 0
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	70 e0       	ldi	r23, 0x00	; 0
    139c:	ce 01       	movw	r24, r28
    139e:	be da       	rcall	.-2692   	; 0x91c <TwiTransmit>
    13a0:	18 2f       	mov	r17, r24
	
	if (!Status)
    13a2:	81 11       	cpse	r24, r1
    13a4:	0a c0       	rjmp	.+20     	; 0x13ba <LCDWrite+0x7e>
	{
		SendTrace(ERROR_LEVEL, "Transmit - Twi Transmit Failed\r\n");
    13a6:	2b e8       	ldi	r18, 0x8B	; 139
    13a8:	3a e0       	ldi	r19, 0x0A	; 10
    13aa:	3f 93       	push	r19
    13ac:	2f 93       	push	r18
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	8f 93       	push	r24
    13b2:	1c de       	rcall	.-968    	; 0xfec <SendTrace>
		
		goto Exit;
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
	
	
Exit:

	return Status;
    13ba:	81 2f       	mov	r24, r17
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	1f 91       	pop	r17
    13c2:	0f 91       	pop	r16
    13c4:	ff 90       	pop	r15
    13c6:	08 95       	ret

000013c8 <LCDTransmit>:
	return Status;
}

bool
LCDTransmit(unsigned char Value, LCD_REG_SELECT RegSelect, bool IsEndOfTransfer)
{
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	1f 92       	push	r1
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	18 2f       	mov	r17, r24
    13d8:	04 2f       	mov	r16, r20
	bool Status;
	
	LCD_TWI_DATA TwiData;
	
	
	TwiData.RegSelect = RegSelect;
    13da:	99 81       	ldd	r25, Y+1	; 0x01
    13dc:	60 fb       	bst	r22, 0
    13de:	90 f9       	bld	r25, 0
	
	TwiData.BackLight = gBackLight;
    13e0:	80 91 94 0b 	lds	r24, 0x0B94
    13e4:	80 fb       	bst	r24, 0
    13e6:	93 f9       	bld	r25, 3
	//
	// We send upper nibble first and then the lower nibble of the Value
	// First four bits E, RS, BL, RW stays the same in both the transfers.
	//
	
	TwiData.Data = Value >> UPPER_NIBBLE_SHIFT;
    13e8:	81 2f       	mov	r24, r17
    13ea:	80 7f       	andi	r24, 0xF0	; 240
    13ec:	9d 70       	andi	r25, 0x0D	; 13
    13ee:	98 2b       	or	r25, r24
    13f0:	99 83       	std	Y+1, r25	; 0x01
	
	Status = LCDWrite(&TwiData, FALSE);
    13f2:	60 e0       	ldi	r22, 0x00	; 0
    13f4:	ce 01       	movw	r24, r28
    13f6:	01 96       	adiw	r24, 0x01	; 1
    13f8:	a1 df       	rcall	.-190    	; 0x133c <LCDWrite>
	
	if (!Status)
    13fa:	88 23       	and	r24, r24
    13fc:	51 f0       	breq	.+20     	; 0x1412 <LCDTransmit+0x4a>
	
	//
	// Send the Lower Nibble
	//
	
	TwiData.Data = Value & LOWER_NIBBLE_MASK;
    13fe:	12 95       	swap	r17
    1400:	10 7f       	andi	r17, 0xF0	; 240
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	8f 70       	andi	r24, 0x0F	; 15
    1406:	18 2b       	or	r17, r24
    1408:	19 83       	std	Y+1, r17	; 0x01
	
	Status = LCDWrite(&TwiData, IsEndOfTransfer);
    140a:	60 2f       	mov	r22, r16
    140c:	ce 01       	movw	r24, r28
    140e:	01 96       	adiw	r24, 0x01	; 1
    1410:	95 df       	rcall	.-214    	; 0x133c <LCDWrite>
	}
	
Exit:
	
	return Status;
}
    1412:	0f 90       	pop	r0
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	1f 91       	pop	r17
    141a:	0f 91       	pop	r16
    141c:	08 95       	ret

0000141e <LCDSetCursorToHomePos>:
bool
LCDSetCursorToHomePos()
{
	bool Status;
	
	Status = LCDTransmit(RETURN_HOME_CTRL, LCD_IR_REG, TRUE);
    141e:	41 e0       	ldi	r20, 0x01	; 1
    1420:	60 e0       	ldi	r22, 0x00	; 0
    1422:	82 e0       	ldi	r24, 0x02	; 2
    1424:	d1 df       	rcall	.-94     	; 0x13c8 <LCDTransmit>
    1426:	ef e9       	ldi	r30, 0x9F	; 159
    1428:	ff e0       	ldi	r31, 0x0F	; 15
    142a:	31 97       	sbiw	r30, 0x01	; 1
    142c:	f1 f7       	brne	.-4      	; 0x142a <LCDSetCursorToHomePos+0xc>
    142e:	00 c0       	rjmp	.+0      	; 0x1430 <LCDSetCursorToHomePos+0x12>
    1430:	00 00       	nop
	
	_delay_ms(2);

	return Status;
}
    1432:	08 95       	ret

00001434 <LCDClearDisplay>:

}

bool
LCDClearDisplay()
{	
    1434:	cf 93       	push	r28
	bool Status;
	
	Status = LCDTransmit(CLEAR_DISPLAY_CTRL, LCD_IR_REG, TRUE);
    1436:	41 e0       	ldi	r20, 0x01	; 1
    1438:	60 e0       	ldi	r22, 0x00	; 0
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	c5 df       	rcall	.-118    	; 0x13c8 <LCDTransmit>
    143e:	c8 2f       	mov	r28, r24
	
	LCDSetCursorToHomePos();
    1440:	ee df       	rcall	.-36     	; 0x141e <LCDSetCursorToHomePos>

	return Status;
}
    1442:	8c 2f       	mov	r24, r28
    1444:	cf 91       	pop	r28
    1446:	08 95       	ret

00001448 <LCDSetDisplayControl>:
	
	//
	// Set Display On Flag
	//
	
	if (IsDisplayOn)
    1448:	81 11       	cpse	r24, r1
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <LCDSetDisplayControl+0x8>
bool
LCDSetDisplayControl(bool IsDisplayOn, bool IsCursorOn, bool IsCursorBlinkOn, bool IsBackLightOn)
{
	bool Status = FALSE;
	
	unsigned char Value = DISPLAY_CTRL;
    144c:	88 e0       	ldi	r24, 0x08	; 8
    144e:	01 c0       	rjmp	.+2      	; 0x1452 <LCDSetDisplayControl+0xa>
	// Set Display On Flag
	//
	
	if (IsDisplayOn)
	{
		Value |= DISPLAY_ON;
    1450:	8c e0       	ldi	r24, 0x0C	; 12
	
	//
	// Set Cursor On Flag
	//
	
	if (IsCursorOn)
    1452:	61 11       	cpse	r22, r1
	{
		Value |= CURSOR_ON;
    1454:	82 60       	ori	r24, 0x02	; 2
	
	//
	// Set Cursor Blink On Flag
	//
	
	if (IsCursorBlinkOn)
    1456:	41 11       	cpse	r20, r1
	{
		Value |= BLINK_ON;
    1458:	81 60       	ori	r24, 0x01	; 1
	
	//
	// Set Back Light On
	//
	
	gBackLight = IsBackLightOn;
    145a:	20 93 94 0b 	sts	0x0B94, r18
	
	Status = LCDTransmit(Value, LCD_IR_REG, TRUE);
    145e:	41 e0       	ldi	r20, 0x01	; 1
    1460:	60 e0       	ldi	r22, 0x00	; 0
    1462:	b2 cf       	rjmp	.-156    	; 0x13c8 <LCDTransmit>

	return Status;
}
    1464:	08 95       	ret

00001466 <LCDSetCursorPosition>:

bool
LCDSetCursorPosition(unsigned char LineNumber, unsigned char Position)
{
    1466:	cf 93       	push	r28
    1468:	df 93       	push	r29
    146a:	c8 2f       	mov	r28, r24
    146c:	d6 2f       	mov	r29, r22
	bool Status = FALSE;
	
	unsigned char Value = DDRAM_CTRL;
	
	if (!gLCDInitialized)
    146e:	80 91 95 0b 	lds	r24, 0x0B95
    1472:	81 11       	cpse	r24, r1
    1474:	0c c0       	rjmp	.+24     	; 0x148e <LCDSetCursorPosition+0x28>
	{
		SendTrace(ERROR_LEVEL, "LCDSetCursorPosition - LCD Not Initialized\r\n");
    1476:	8c ea       	ldi	r24, 0xAC	; 172
    1478:	9a e0       	ldi	r25, 0x0A	; 10
    147a:	9f 93       	push	r25
    147c:	8f 93       	push	r24
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	8f 93       	push	r24
    1482:	b4 dd       	rcall	.-1176   	; 0xfec <SendTrace>
		
		goto Exit;
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
}

bool
LCDSetCursorPosition(unsigned char LineNumber, unsigned char Position)
{
	bool Status = FALSE;
    148a:	80 e0       	ldi	r24, 0x00	; 0
	
	if (!gLCDInitialized)
	{
		SendTrace(ERROR_LEVEL, "LCDSetCursorPosition - LCD Not Initialized\r\n");
		
		goto Exit;
    148c:	19 c0       	rjmp	.+50     	; 0x14c0 <LCDSetCursorPosition+0x5a>
	}
	
	if (LineNumber >= gMaxLines)
    148e:	80 91 8f 0b 	lds	r24, 0x0B8F
    1492:	c8 17       	cp	r28, r24
    1494:	90 f4       	brcc	.+36     	; 0x14ba <LCDSetCursorPosition+0x54>
	{
		goto Exit;
	}
	
	if (Position >= MAX_BUFFER_SIZE)
    1496:	60 34       	cpi	r22, 0x40	; 64
    1498:	90 f4       	brcc	.+36     	; 0x14be <LCDSetCursorPosition+0x58>
	// Set DDRAM Address
	//
	
	Value |= (LineNumber * DDRAM_ADDRESS_INTERLEAVING) + Position;
	
	Status = LCDTransmit(Value, LCD_IR_REG, TRUE);
    149a:	41 e0       	ldi	r20, 0x01	; 1
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	8d 2f       	mov	r24, r29
    14a0:	90 e4       	ldi	r25, 0x40	; 64
    14a2:	c9 9f       	mul	r28, r25
    14a4:	80 0d       	add	r24, r0
    14a6:	11 24       	eor	r1, r1
    14a8:	80 68       	ori	r24, 0x80	; 128
    14aa:	8e df       	rcall	.-228    	; 0x13c8 <LCDTransmit>
	
	if (Status)
    14ac:	88 23       	and	r24, r24
    14ae:	41 f0       	breq	.+16     	; 0x14c0 <LCDSetCursorPosition+0x5a>
	{
		gLineNumber = LineNumber;
    14b0:	c0 93 91 0b 	sts	0x0B91, r28
		
		gCursorPosition = Position;
    14b4:	d0 93 92 0b 	sts	0x0B92, r29
    14b8:	03 c0       	rjmp	.+6      	; 0x14c0 <LCDSetCursorPosition+0x5a>
}

bool
LCDSetCursorPosition(unsigned char LineNumber, unsigned char Position)
{
	bool Status = FALSE;
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	01 c0       	rjmp	.+2      	; 0x14c0 <LCDSetCursorPosition+0x5a>
    14be:	80 e0       	ldi	r24, 0x00	; 0
	}
	
Exit:

	return Status;
}
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	08 95       	ret

000014c6 <LCDSetEntryMode>:
	
	//
	// Set Display Shift Flag
	//
	
	if (IsDisplayShift)
    14c6:	81 11       	cpse	r24, r1
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <LCDSetEntryMode+0x8>
bool
LCDSetEntryMode(bool IsDisplayShift, bool IsIncrement)
{
	bool Status; 
	
	unsigned char Value = ENTRY_MODE_CTRL;
    14ca:	84 e0       	ldi	r24, 0x04	; 4
    14cc:	01 c0       	rjmp	.+2      	; 0x14d0 <LCDSetEntryMode+0xa>
	// Set Display Shift Flag
	//
	
	if (IsDisplayShift)
	{
		Value |= EM_DISPLAY_SHIFT;
    14ce:	85 e0       	ldi	r24, 0x05	; 5
	
	//
	// Set Increment Position Flag
	//
	
	if (IsIncrement)
    14d0:	61 11       	cpse	r22, r1
	{
		Value |= INCREMENT_POS;
    14d2:	82 60       	ori	r24, 0x02	; 2
	}
	
	Status = LCDTransmit(Value, LCD_IR_REG, TRUE);
    14d4:	41 e0       	ldi	r20, 0x01	; 1
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	77 cf       	rjmp	.-274    	; 0x13c8 <LCDTransmit>

	return Status;

}
    14da:	08 95       	ret

000014dc <LCDShiftCursorOrDisplay>:
	
	//
	// Set Display Shift Flag
	//
	
	if (IsDisplayShift)
    14dc:	81 11       	cpse	r24, r1
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <LCDShiftCursorOrDisplay+0x8>
bool
LCDShiftCursorOrDisplay(bool IsDisplayShift, bool IsIncrement)
{
	bool Status;
	
	unsigned char Value = CURSOR_DISPLAY_SHIFT_CTRL;
    14e0:	80 e1       	ldi	r24, 0x10	; 16
    14e2:	01 c0       	rjmp	.+2      	; 0x14e6 <LCDShiftCursorOrDisplay+0xa>
	// Set Display Shift Flag
	//
	
	if (IsDisplayShift)
	{
		Value |= CD_DISPLAY_SHIFT;
    14e4:	88 e1       	ldi	r24, 0x18	; 24
	
	//
	// Set Increment Flag
	//
	
	if (IsIncrement)
    14e6:	61 11       	cpse	r22, r1
	{
		Value |= MOVE_RIGHT;
    14e8:	84 60       	ori	r24, 0x04	; 4
	}
	
	Status = LCDTransmit(Value, LCD_IR_REG, TRUE);
    14ea:	41 e0       	ldi	r20, 0x01	; 1
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	6c cf       	rjmp	.-296    	; 0x13c8 <LCDTransmit>

	return Status;
}
    14f0:	08 95       	ret

000014f2 <LCDPrint>:
	return Status;
}

bool
LCDPrint(char *String)
{
    14f2:	7f 92       	push	r7
    14f4:	8f 92       	push	r8
    14f6:	9f 92       	push	r9
    14f8:	af 92       	push	r10
    14fa:	bf 92       	push	r11
    14fc:	cf 92       	push	r12
    14fe:	df 92       	push	r13
    1500:	ef 92       	push	r14
    1502:	ff 92       	push	r15
    1504:	0f 93       	push	r16
    1506:	1f 93       	push	r17
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
	
	unsigned long Len;
	
	unsigned long IndexI;
	
	if (!gLCDInitialized)
    150c:	20 91 95 0b 	lds	r18, 0x0B95
    1510:	21 11       	cpse	r18, r1
    1512:	0c c0       	rjmp	.+24     	; 0x152c <LCDPrint+0x3a>
	{
		SendTrace(ERROR_LEVEL, "LCDPrint - LCD Not Initialized\r\n");
    1514:	89 ed       	ldi	r24, 0xD9	; 217
    1516:	9a e0       	ldi	r25, 0x0A	; 10
    1518:	9f 93       	push	r25
    151a:	8f 93       	push	r24
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	8f 93       	push	r24
    1520:	65 dd       	rcall	.-1334   	; 0xfec <SendTrace>
		
		goto Exit;
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
}

bool
LCDPrint(char *String)
{
	bool Status = FALSE;
    1528:	80 e0       	ldi	r24, 0x00	; 0
	
	if (!gLCDInitialized)
	{
		SendTrace(ERROR_LEVEL, "LCDPrint - LCD Not Initialized\r\n");
		
		goto Exit;
    152a:	66 c0       	rjmp	.+204    	; 0x15f8 <LCDPrint+0x106>
	}
	
	Len = strlen(String);
    152c:	fc 01       	movw	r30, r24
    152e:	01 90       	ld	r0, Z+
    1530:	00 20       	and	r0, r0
    1532:	e9 f7       	brne	.-6      	; 0x152e <LCDPrint+0x3c>
    1534:	31 97       	sbiw	r30, 0x01	; 1
    1536:	4f 01       	movw	r8, r30
    1538:	88 1a       	sub	r8, r24
    153a:	99 0a       	sbc	r9, r25
    153c:	a1 2c       	mov	r10, r1
    153e:	b1 2c       	mov	r11, r1
	
	//
	// Loop through each character and send it to Data Register
	//
	
	for(IndexI = 0; IndexI < Len; IndexI++)
    1540:	81 14       	cp	r8, r1
    1542:	91 04       	cpc	r9, r1
    1544:	a1 04       	cpc	r10, r1
    1546:	b1 04       	cpc	r11, r1
    1548:	09 f4       	brne	.+2      	; 0x154c <LCDPrint+0x5a>
    154a:	55 c0       	rjmp	.+170    	; 0x15f6 <LCDPrint+0x104>
    154c:	ec 01       	movw	r28, r24
    154e:	c1 2c       	mov	r12, r1
    1550:	d1 2c       	mov	r13, r1
    1552:	76 01       	movw	r14, r12
			
				gLineNumber = (gLineNumber + 1) % gMaxLines;
			
				gCursorPosition = 0;
				
				SendTrace(INFO_LEVEL, "Exceeded Max Chars - %d, %d\r\n", gLineNumber, gCursorPosition);
    1554:	0a ef       	ldi	r16, 0xFA	; 250
    1556:	1a e0       	ldi	r17, 0x0A	; 10
    1558:	68 94       	set
    155a:	77 24       	eor	r7, r7
    155c:	72 f8       	bld	r7, 2
	// Loop through each character and send it to Data Register
	//
	
	for(IndexI = 0; IndexI < Len; IndexI++)
	{
		if (gCursorPosition >= gMaxCharacters)
    155e:	90 91 92 0b 	lds	r25, 0x0B92
    1562:	80 91 90 0b 	lds	r24, 0x0B90
    1566:	98 17       	cp	r25, r24
    1568:	58 f1       	brcs	.+86     	; 0x15c0 <LCDPrint+0xce>
		{

			if (gIsAutoScroll)
    156a:	80 91 93 0b 	lds	r24, 0x0B93
    156e:	88 23       	and	r24, r24
    1570:	21 f0       	breq	.+8      	; 0x157a <LCDPrint+0x88>
			{
				//
				// If Auto scroll is enabled shit the display
				//
			
				LCDShiftCursorOrDisplay(TRUE, FALSE);
    1572:	60 e0       	ldi	r22, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	b2 df       	rcall	.-156    	; 0x14dc <LCDShiftCursorOrDisplay>
    1578:	23 c0       	rjmp	.+70     	; 0x15c0 <LCDPrint+0xce>
			{
				//
				// Do word wrap
				//
			
				gLineNumber = (gLineNumber + 1) % gMaxLines;
    157a:	80 91 91 0b 	lds	r24, 0x0B91
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	01 96       	adiw	r24, 0x01	; 1
    1582:	60 91 8f 0b 	lds	r22, 0x0B8F
    1586:	70 e0       	ldi	r23, 0x00	; 0
    1588:	0e 94 08 16 	call	0x2c10	; 0x2c10 <__divmodhi4>
    158c:	80 93 91 0b 	sts	0x0B91, r24
			
				gCursorPosition = 0;
    1590:	10 92 92 0b 	sts	0x0B92, r1
				
				SendTrace(INFO_LEVEL, "Exceeded Max Chars - %d, %d\r\n", gLineNumber, gCursorPosition);
    1594:	1f 92       	push	r1
    1596:	1f 92       	push	r1
    1598:	99 27       	eor	r25, r25
    159a:	9f 93       	push	r25
    159c:	8f 93       	push	r24
    159e:	1f 93       	push	r17
    15a0:	0f 93       	push	r16
    15a2:	7f 92       	push	r7
    15a4:	23 dd       	rcall	.-1466   	; 0xfec <SendTrace>
			
				LCDSetCursorPosition(gLineNumber, gCursorPosition);
    15a6:	60 91 92 0b 	lds	r22, 0x0B92
    15aa:	80 91 91 0b 	lds	r24, 0x0B91
    15ae:	5b df       	rcall	.-330    	; 0x1466 <LCDSetCursorPosition>
    15b0:	8d b7       	in	r24, 0x3d	; 61
    15b2:	9e b7       	in	r25, 0x3e	; 62
    15b4:	07 96       	adiw	r24, 0x07	; 7
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	f8 94       	cli
    15ba:	9e bf       	out	0x3e, r25	; 62
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	8d bf       	out	0x3d, r24	; 61
			}
		}
		
		Status = LCDTransmit(*String, LCD_DR_REG, TRUE);
    15c0:	41 e0       	ldi	r20, 0x01	; 1
    15c2:	61 e0       	ldi	r22, 0x01	; 1
    15c4:	89 91       	ld	r24, Y+
    15c6:	00 df       	rcall	.-512    	; 0x13c8 <LCDTransmit>
		
		if (!Status)
    15c8:	88 23       	and	r24, r24
    15ca:	b1 f0       	breq	.+44     	; 0x15f8 <LCDPrint+0x106>
		{
			goto Exit;
		}
		
		gCursorPosition = (gCursorPosition + 1) % MAX_BUFFER_SIZE;
    15cc:	20 91 92 0b 	lds	r18, 0x0B92
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	2f 5f       	subi	r18, 0xFF	; 255
    15d4:	3f 4f       	sbci	r19, 0xFF	; 255
    15d6:	2f 73       	andi	r18, 0x3F	; 63
    15d8:	30 78       	andi	r19, 0x80	; 128
    15da:	20 93 92 0b 	sts	0x0B92, r18
	
	//
	// Loop through each character and send it to Data Register
	//
	
	for(IndexI = 0; IndexI < Len; IndexI++)
    15de:	9f ef       	ldi	r25, 0xFF	; 255
    15e0:	c9 1a       	sub	r12, r25
    15e2:	d9 0a       	sbc	r13, r25
    15e4:	e9 0a       	sbc	r14, r25
    15e6:	f9 0a       	sbc	r15, r25
    15e8:	c8 14       	cp	r12, r8
    15ea:	d9 04       	cpc	r13, r9
    15ec:	ea 04       	cpc	r14, r10
    15ee:	fb 04       	cpc	r15, r11
    15f0:	08 f4       	brcc	.+2      	; 0x15f4 <LCDPrint+0x102>
    15f2:	b5 cf       	rjmp	.-150    	; 0x155e <LCDPrint+0x6c>
    15f4:	01 c0       	rjmp	.+2      	; 0x15f8 <LCDPrint+0x106>
}

bool
LCDPrint(char *String)
{
	bool Status = FALSE;
    15f6:	80 e0       	ldi	r24, 0x00	; 0
	}
	
Exit:

	return Status;
}
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	1f 91       	pop	r17
    15fe:	0f 91       	pop	r16
    1600:	ff 90       	pop	r15
    1602:	ef 90       	pop	r14
    1604:	df 90       	pop	r13
    1606:	cf 90       	pop	r12
    1608:	bf 90       	pop	r11
    160a:	af 90       	pop	r10
    160c:	9f 90       	pop	r9
    160e:	8f 90       	pop	r8
    1610:	7f 90       	pop	r7
    1612:	08 95       	ret

00001614 <LCDSetFunctionControl>:
	
	//
	// Set Two Line Display Flag
	//
	
	if(IsTwoLineDisplay)
    1614:	81 11       	cpse	r24, r1
    1616:	02 c0       	rjmp	.+4      	; 0x161c <LCDSetFunctionControl+0x8>
bool
LCDSetFunctionControl(bool IsTwoLineDisplay, bool Is5X10Font)
{
	bool Status;
	
	unsigned char Value = FUNC_SET_CTRL;
    1618:	80 e2       	ldi	r24, 0x20	; 32
    161a:	01 c0       	rjmp	.+2      	; 0x161e <LCDSetFunctionControl+0xa>
	// Set Two Line Display Flag
	//
	
	if(IsTwoLineDisplay)
	{	
		Value |= TWO_LINES;
    161c:	88 e2       	ldi	r24, 0x28	; 40
	
	//
	// Set 5X10 Font Flag
	//
	
	if(Is5X10Font)
    161e:	61 11       	cpse	r22, r1
	{
		Value |= FONT_5X10;
    1620:	84 60       	ori	r24, 0x04	; 4
	}
	
	Status = LCDTransmit(Value, LCD_IR_REG, TRUE);
    1622:	41 e0       	ldi	r20, 0x01	; 1
    1624:	60 e0       	ldi	r22, 0x00	; 0
    1626:	d0 ce       	rjmp	.-608    	; 0x13c8 <LCDTransmit>

	return Status;
}
    1628:	08 95       	ret

0000162a <InitLCD>:
// Public Functions
//

bool
InitLCD(PLCD_INIT_PARAMS InitParams)
{
    162a:	cf 93       	push	r28
    162c:	df 93       	push	r29
    162e:	ec 01       	movw	r28, r24
	bool IsTwoLineDisplay = FALSE;
		
	if (InitParams->MaxCharacters == 0 || InitParams->MaxLines == 0)
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	88 23       	and	r24, r24
    1634:	b9 f1       	breq	.+110    	; 0x16a4 <InitLCD+0x7a>
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	88 23       	and	r24, r24
    163a:	a1 f1       	breq	.+104    	; 0x16a4 <InitLCD+0x7a>
	
	//
	// Set Slave Address
	//
	
	gSlaveAddress.AsUINT8 = InitParams->SlaveAddress.AsUINT8;
    163c:	8c 81       	ldd	r24, Y+4	; 0x04
    163e:	80 93 aa 0b 	sts	0x0BAA, r24
	
	//
	// Clear Display
	//
		
	LCDClearDisplay();
    1642:	f8 de       	rcall	.-528    	; 0x1434 <LCDClearDisplay>
	
	//
	// Set Function Set Control
	//
	
	gMaxLines = InitParams->MaxLines;
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	80 93 8f 0b 	sts	0x0B8F, r24
	
	gMaxCharacters = InitParams->MaxCharacters;
    164a:	9b 81       	ldd	r25, Y+3	; 0x03
    164c:	90 93 90 0b 	sts	0x0B90, r25
	
	if (gMaxLines > 1)
    1650:	82 30       	cpi	r24, 0x02	; 2
    1652:	28 f0       	brcs	.+10     	; 0x165e <InitLCD+0x34>
	{
		InitParams->Flags.Is5X10Font = 0;
    1654:	88 81       	ld	r24, Y
    1656:	8f 7d       	andi	r24, 0xDF	; 223
    1658:	88 83       	st	Y, r24
		
		IsTwoLineDisplay = TRUE;
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	01 c0       	rjmp	.+2      	; 0x1660 <InitLCD+0x36>
//

bool
InitLCD(PLCD_INIT_PARAMS InitParams)
{
	bool IsTwoLineDisplay = FALSE;
    165e:	80 e0       	ldi	r24, 0x00	; 0
		InitParams->Flags.Is5X10Font = 0;
		
		IsTwoLineDisplay = TRUE;
	}
	
	LCDSetFunctionControl(IsTwoLineDisplay, InitParams->Flags.Is5X10Font);
    1660:	68 81       	ld	r22, Y
    1662:	65 fb       	bst	r22, 5
    1664:	66 27       	eor	r22, r22
    1666:	60 f9       	bld	r22, 0
    1668:	d5 df       	rcall	.-86     	; 0x1614 <LCDSetFunctionControl>
	//
	
	LCDSetDisplayControl(InitParams->Flags.IsDisplayOn, 
						 InitParams->Flags.IsCursorOn, 
						 InitParams->Flags.IsCursorBlinkOn,
						 InitParams->Flags.IsBackLightOn);
    166a:	88 81       	ld	r24, Y
    166c:	86 fb       	bst	r24, 6
    166e:	22 27       	eor	r18, r18
    1670:	20 f9       	bld	r18, 0
	// Set Display ON/OFF Control
	//
	
	LCDSetDisplayControl(InitParams->Flags.IsDisplayOn, 
						 InitParams->Flags.IsCursorOn, 
						 InitParams->Flags.IsCursorBlinkOn,
    1672:	84 fb       	bst	r24, 4
    1674:	44 27       	eor	r20, r20
    1676:	40 f9       	bld	r20, 0
	//
	// Set Display ON/OFF Control
	//
	
	LCDSetDisplayControl(InitParams->Flags.IsDisplayOn, 
						 InitParams->Flags.IsCursorOn, 
    1678:	83 fb       	bst	r24, 3
    167a:	66 27       	eor	r22, r22
    167c:	60 f9       	bld	r22, 0
	
	//
	// Set Display ON/OFF Control
	//
	
	LCDSetDisplayControl(InitParams->Flags.IsDisplayOn, 
    167e:	82 fb       	bst	r24, 2
    1680:	88 27       	eor	r24, r24
    1682:	80 f9       	bld	r24, 0
    1684:	e1 de       	rcall	.-574    	; 0x1448 <LCDSetDisplayControl>
	
	//
	// Set Entry Mode
	//
	
	LCDSetEntryMode(InitParams->Flags.IsIncrementPos, InitParams->Flags.IsDisplayShift);
    1686:	88 81       	ld	r24, Y
    1688:	68 2f       	mov	r22, r24
    168a:	61 70       	andi	r22, 0x01	; 1
    168c:	86 95       	lsr	r24
    168e:	81 70       	andi	r24, 0x01	; 1
    1690:	1a df       	rcall	.-460    	; 0x14c6 <LCDSetEntryMode>
	
	//
	// Set Auto Scroll Flag
	//
	
	gIsAutoScroll = InitParams->Flags.IsAutoScroll;
    1692:	88 81       	ld	r24, Y
    1694:	87 fb       	bst	r24, 7
    1696:	88 27       	eor	r24, r24
    1698:	80 f9       	bld	r24, 0
    169a:	80 93 93 0b 	sts	0x0B93, r24
	
	gLCDInitialized = TRUE;
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	80 93 95 0b 	sts	0x0B95, r24
	
Exit:

	return gLCDInitialized;

}
    16a4:	80 91 95 0b 	lds	r24, 0x0B95
    16a8:	df 91       	pop	r29
    16aa:	cf 91       	pop	r28
    16ac:	08 95       	ret

000016ae <InitExtInt>:
	
	Exit:

	return Status;

}
    16ae:	f8 94       	cli
    16b0:	10 92 69 00 	sts	0x0069, r1
    16b4:	1d ba       	out	0x1d, r1	; 29
    16b6:	87 e0       	ldi	r24, 0x07	; 7
    16b8:	8c bb       	out	0x1c, r24	; 28
    16ba:	10 92 68 00 	sts	0x0068, r1
    16be:	8f e0       	ldi	r24, 0x0F	; 15
    16c0:	8b bb       	out	0x1b, r24	; 27
    16c2:	10 92 6b 00 	sts	0x006B, r1
    16c6:	10 92 6c 00 	sts	0x006C, r1
    16ca:	10 92 6d 00 	sts	0x006D, r1
    16ce:	10 92 73 00 	sts	0x0073, r1
    16d2:	78 94       	sei
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	80 93 a2 0b 	sts	0x0BA2, r24
    16da:	08 95       	ret

000016dc <RegisterExtInterrupt>:
    16dc:	bf 92       	push	r11
    16de:	cf 92       	push	r12
    16e0:	df 92       	push	r13
    16e2:	ef 92       	push	r14
    16e4:	ff 92       	push	r15
    16e6:	0f 93       	push	r16
    16e8:	1f 93       	push	r17
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	18 2f       	mov	r17, r24
    16f0:	b6 2e       	mov	r11, r22
    16f2:	ea 01       	movw	r28, r20
    16f4:	69 01       	movw	r12, r18
    16f6:	80 91 a2 0b 	lds	r24, 0x0BA2
    16fa:	81 11       	cpse	r24, r1
    16fc:	0c c0       	rjmp	.+24     	; 0x1716 <RegisterExtInterrupt+0x3a>
    16fe:	88 e1       	ldi	r24, 0x18	; 24
    1700:	9b e0       	ldi	r25, 0x0B	; 11
    1702:	9f 93       	push	r25
    1704:	8f 93       	push	r24
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	8f 93       	push	r24
    170a:	70 dc       	rcall	.-1824   	; 0xfec <SendTrace>
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	7b c0       	rjmp	.+246    	; 0x180c <RegisterExtInterrupt+0x130>
    1716:	20 97       	sbiw	r28, 0x00	; 0
    1718:	61 f4       	brne	.+24     	; 0x1732 <RegisterExtInterrupt+0x56>
    171a:	8d e3       	ldi	r24, 0x3D	; 61
    171c:	9b e0       	ldi	r25, 0x0B	; 11
    171e:	9f 93       	push	r25
    1720:	8f 93       	push	r24
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	8f 93       	push	r24
    1726:	62 dc       	rcall	.-1852   	; 0xfec <SendTrace>
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	6d c0       	rjmp	.+218    	; 0x180c <RegisterExtInterrupt+0x130>
    1732:	e1 2e       	mov	r14, r17
    1734:	f1 2c       	mov	r15, r1
    1736:	f7 01       	movw	r30, r14
    1738:	ee 0f       	add	r30, r30
    173a:	ff 1f       	adc	r31, r31
    173c:	e4 56       	subi	r30, 0x64	; 100
    173e:	f4 4f       	sbci	r31, 0xF4	; 244
    1740:	40 81       	ld	r20, Z
    1742:	51 81       	ldd	r21, Z+1	; 0x01
    1744:	45 2b       	or	r20, r21
    1746:	61 f0       	breq	.+24     	; 0x1760 <RegisterExtInterrupt+0x84>
    1748:	88 e5       	ldi	r24, 0x58	; 88
    174a:	9b e0       	ldi	r25, 0x0B	; 11
    174c:	9f 93       	push	r25
    174e:	8f 93       	push	r24
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	8f 93       	push	r24
    1754:	4b dc       	rcall	.-1898   	; 0xfec <SendTrace>
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	56 c0       	rjmp	.+172    	; 0x180c <RegisterExtInterrupt+0x130>
    1760:	1f 92       	push	r1
    1762:	1f 93       	push	r17
    1764:	87 e7       	ldi	r24, 0x77	; 119
    1766:	9b e0       	ldi	r25, 0x0B	; 11
    1768:	9f 93       	push	r25
    176a:	8f 93       	push	r24
    176c:	84 e0       	ldi	r24, 0x04	; 4
    176e:	8f 93       	push	r24
    1770:	3d dc       	rcall	.-1926   	; 0xfec <SendTrace>
    1772:	97 01       	movw	r18, r14
    1774:	22 0f       	add	r18, r18
    1776:	33 1f       	adc	r19, r19
    1778:	f9 01       	movw	r30, r18
    177a:	e4 56       	subi	r30, 0x64	; 100
    177c:	f4 4f       	sbci	r31, 0xF4	; 244
    177e:	d1 83       	std	Z+1, r29	; 0x01
    1780:	c0 83       	st	Z, r28
    1782:	f9 01       	movw	r30, r18
    1784:	ea 56       	subi	r30, 0x6A	; 106
    1786:	f4 4f       	sbci	r31, 0xF4	; 244
    1788:	d1 82       	std	Z+1, r13	; 0x01
    178a:	c0 82       	st	Z, r12
    178c:	e9 e6       	ldi	r30, 0x69	; 105
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	e0 80       	ld	r14, Z
    1792:	8b 2d       	mov	r24, r11
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	ac 01       	movw	r20, r24
    1798:	02 c0       	rjmp	.+4      	; 0x179e <RegisterExtInterrupt+0xc2>
    179a:	44 0f       	add	r20, r20
    179c:	55 1f       	adc	r21, r21
    179e:	2a 95       	dec	r18
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <RegisterExtInterrupt+0xbe>
    17a2:	9a 01       	movw	r18, r20
    17a4:	2e 29       	or	r18, r14
    17a6:	20 83       	st	Z, r18
    17a8:	8d b3       	in	r24, 0x1d	; 29
    17aa:	21 e0       	ldi	r18, 0x01	; 1
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	01 2e       	mov	r0, r17
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <RegisterExtInterrupt+0xda>
    17b2:	22 0f       	add	r18, r18
    17b4:	33 1f       	adc	r19, r19
    17b6:	0a 94       	dec	r0
    17b8:	e2 f7       	brpl	.-8      	; 0x17b2 <RegisterExtInterrupt+0xd6>
    17ba:	82 2b       	or	r24, r18
    17bc:	8d bb       	out	0x1d, r24	; 29
    17be:	8c b3       	in	r24, 0x1c	; 28
    17c0:	28 2b       	or	r18, r24
    17c2:	2c bb       	out	0x1c, r18	; 28
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	11 30       	cpi	r17, 0x01	; 1
    17d0:	51 f0       	breq	.+20     	; 0x17e6 <RegisterExtInterrupt+0x10a>
    17d2:	18 f0       	brcs	.+6      	; 0x17da <RegisterExtInterrupt+0xfe>
    17d4:	12 30       	cpi	r17, 0x02	; 2
    17d6:	69 f0       	breq	.+26     	; 0x17f2 <RegisterExtInterrupt+0x116>
    17d8:	12 c0       	rjmp	.+36     	; 0x17fe <RegisterExtInterrupt+0x122>
    17da:	52 98       	cbi	0x0a, 2	; 10
    17dc:	00 23       	and	r16, r16
    17de:	89 f0       	breq	.+34     	; 0x1802 <RegisterExtInterrupt+0x126>
    17e0:	5a 9a       	sbi	0x0b, 2	; 11
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	13 c0       	rjmp	.+38     	; 0x180c <RegisterExtInterrupt+0x130>
    17e6:	53 98       	cbi	0x0a, 3	; 10
    17e8:	00 23       	and	r16, r16
    17ea:	69 f0       	breq	.+26     	; 0x1806 <RegisterExtInterrupt+0x12a>
    17ec:	5b 9a       	sbi	0x0b, 3	; 11
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	0d c0       	rjmp	.+26     	; 0x180c <RegisterExtInterrupt+0x130>
    17f2:	52 98       	cbi	0x0a, 2	; 10
    17f4:	00 23       	and	r16, r16
    17f6:	49 f0       	breq	.+18     	; 0x180a <RegisterExtInterrupt+0x12e>
    17f8:	2a 9a       	sbi	0x05, 2	; 5
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	07 c0       	rjmp	.+14     	; 0x180c <RegisterExtInterrupt+0x130>
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	05 c0       	rjmp	.+10     	; 0x180c <RegisterExtInterrupt+0x130>
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	03 c0       	rjmp	.+6      	; 0x180c <RegisterExtInterrupt+0x130>
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	01 c0       	rjmp	.+2      	; 0x180c <RegisterExtInterrupt+0x130>
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	1f 91       	pop	r17
    1812:	0f 91       	pop	r16
    1814:	ff 90       	pop	r15
    1816:	ef 90       	pop	r14
    1818:	df 90       	pop	r13
    181a:	cf 90       	pop	r12
    181c:	bf 90       	pop	r11
    181e:	08 95       	ret

00001820 <__vector_1>:

ISR(INT0_vect)
{
    1820:	1f 92       	push	r1
    1822:	0f 92       	push	r0
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	0f 92       	push	r0
    1828:	11 24       	eor	r1, r1
    182a:	0b b6       	in	r0, 0x3b	; 59
    182c:	0f 92       	push	r0
    182e:	2f 93       	push	r18
    1830:	3f 93       	push	r19
    1832:	4f 93       	push	r20
    1834:	5f 93       	push	r21
    1836:	6f 93       	push	r22
    1838:	7f 93       	push	r23
    183a:	8f 93       	push	r24
    183c:	9f 93       	push	r25
    183e:	af 93       	push	r26
    1840:	bf 93       	push	r27
    1842:	ef 93       	push	r30
    1844:	ff 93       	push	r31
	//
	// Disable Interrupt while we process this.
	//
	
	cli();
    1846:	f8 94       	cli
	
	if (gExtIntCallback[0] != NULL)
    1848:	e0 91 9c 0b 	lds	r30, 0x0B9C
    184c:	f0 91 9d 0b 	lds	r31, 0x0B9D
    1850:	30 97       	sbiw	r30, 0x00	; 0
    1852:	29 f0       	breq	.+10     	; 0x185e <__vector_1+0x3e>
	{
		(*gExtIntCallback[0])(gExtIntCallbackContext[0]);
    1854:	80 91 96 0b 	lds	r24, 0x0B96
    1858:	90 91 97 0b 	lds	r25, 0x0B97
    185c:	09 95       	icall
	
	//
	// Enable Interrupt
	//
	
	sei();
    185e:	78 94       	sei
}
    1860:	ff 91       	pop	r31
    1862:	ef 91       	pop	r30
    1864:	bf 91       	pop	r27
    1866:	af 91       	pop	r26
    1868:	9f 91       	pop	r25
    186a:	8f 91       	pop	r24
    186c:	7f 91       	pop	r23
    186e:	6f 91       	pop	r22
    1870:	5f 91       	pop	r21
    1872:	4f 91       	pop	r20
    1874:	3f 91       	pop	r19
    1876:	2f 91       	pop	r18
    1878:	0f 90       	pop	r0
    187a:	0b be       	out	0x3b, r0	; 59
    187c:	0f 90       	pop	r0
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	0f 90       	pop	r0
    1882:	1f 90       	pop	r1
    1884:	18 95       	reti

00001886 <__vector_2>:

ISR(INT1_vect)
{
    1886:	1f 92       	push	r1
    1888:	0f 92       	push	r0
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	0f 92       	push	r0
    188e:	11 24       	eor	r1, r1
    1890:	0b b6       	in	r0, 0x3b	; 59
    1892:	0f 92       	push	r0
    1894:	2f 93       	push	r18
    1896:	3f 93       	push	r19
    1898:	4f 93       	push	r20
    189a:	5f 93       	push	r21
    189c:	6f 93       	push	r22
    189e:	7f 93       	push	r23
    18a0:	8f 93       	push	r24
    18a2:	9f 93       	push	r25
    18a4:	af 93       	push	r26
    18a6:	bf 93       	push	r27
    18a8:	ef 93       	push	r30
    18aa:	ff 93       	push	r31
	//
	// Disable Interrupt while we process this.
	//
	
	cli();
    18ac:	f8 94       	cli
	
	if (gExtIntCallback[1] != NULL)
    18ae:	e0 91 9e 0b 	lds	r30, 0x0B9E
    18b2:	f0 91 9f 0b 	lds	r31, 0x0B9F
    18b6:	30 97       	sbiw	r30, 0x00	; 0
    18b8:	29 f0       	breq	.+10     	; 0x18c4 <__vector_2+0x3e>
	{
		(*gExtIntCallback[1])(gExtIntCallbackContext[1]);
    18ba:	80 91 98 0b 	lds	r24, 0x0B98
    18be:	90 91 99 0b 	lds	r25, 0x0B99
    18c2:	09 95       	icall
	
	//
	// Enable Interrupt
	//
	
	sei();
    18c4:	78 94       	sei
}
    18c6:	ff 91       	pop	r31
    18c8:	ef 91       	pop	r30
    18ca:	bf 91       	pop	r27
    18cc:	af 91       	pop	r26
    18ce:	9f 91       	pop	r25
    18d0:	8f 91       	pop	r24
    18d2:	7f 91       	pop	r23
    18d4:	6f 91       	pop	r22
    18d6:	5f 91       	pop	r21
    18d8:	4f 91       	pop	r20
    18da:	3f 91       	pop	r19
    18dc:	2f 91       	pop	r18
    18de:	0f 90       	pop	r0
    18e0:	0b be       	out	0x3b, r0	; 59
    18e2:	0f 90       	pop	r0
    18e4:	0f be       	out	0x3f, r0	; 63
    18e6:	0f 90       	pop	r0
    18e8:	1f 90       	pop	r1
    18ea:	18 95       	reti

000018ec <__vector_3>:

ISR(INT2_vect)
{
    18ec:	1f 92       	push	r1
    18ee:	0f 92       	push	r0
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	0f 92       	push	r0
    18f4:	11 24       	eor	r1, r1
    18f6:	0b b6       	in	r0, 0x3b	; 59
    18f8:	0f 92       	push	r0
    18fa:	2f 93       	push	r18
    18fc:	3f 93       	push	r19
    18fe:	4f 93       	push	r20
    1900:	5f 93       	push	r21
    1902:	6f 93       	push	r22
    1904:	7f 93       	push	r23
    1906:	8f 93       	push	r24
    1908:	9f 93       	push	r25
    190a:	af 93       	push	r26
    190c:	bf 93       	push	r27
    190e:	ef 93       	push	r30
    1910:	ff 93       	push	r31
	//
	// Disable Interrupt while we process this.
	//
	
	cli();
    1912:	f8 94       	cli
	
	if (gExtIntCallback[2] != NULL)
    1914:	e0 91 a0 0b 	lds	r30, 0x0BA0
    1918:	f0 91 a1 0b 	lds	r31, 0x0BA1
    191c:	30 97       	sbiw	r30, 0x00	; 0
    191e:	29 f0       	breq	.+10     	; 0x192a <__vector_3+0x3e>
	{
		(*gExtIntCallback[2])(gExtIntCallbackContext[2]);
    1920:	80 91 9a 0b 	lds	r24, 0x0B9A
    1924:	90 91 9b 0b 	lds	r25, 0x0B9B
    1928:	09 95       	icall
	
	//
	// Enable Interrupt
	//
	
	sei();
    192a:	78 94       	sei
    192c:	ff 91       	pop	r31
    192e:	ef 91       	pop	r30
    1930:	bf 91       	pop	r27
    1932:	af 91       	pop	r26
    1934:	9f 91       	pop	r25
    1936:	8f 91       	pop	r24
    1938:	7f 91       	pop	r23
    193a:	6f 91       	pop	r22
    193c:	5f 91       	pop	r21
    193e:	4f 91       	pop	r20
    1940:	3f 91       	pop	r19
    1942:	2f 91       	pop	r18
    1944:	0f 90       	pop	r0
    1946:	0b be       	out	0x3b, r0	; 59
    1948:	0f 90       	pop	r0
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	0f 90       	pop	r0
    194e:	1f 90       	pop	r1
    1950:	18 95       	reti

00001952 <Xymk5vXyfstTransmit>:
    return Status;
}

bool
Xymk5vXyfstTransmit(PVOID Buffer, unsigned long Length, MESSAGE_TYPE MessageType)
{
    1952:	2f 92       	push	r2
    1954:	3f 92       	push	r3
    1956:	4f 92       	push	r4
    1958:	5f 92       	push	r5
    195a:	6f 92       	push	r6
    195c:	7f 92       	push	r7
    195e:	8f 92       	push	r8
    1960:	9f 92       	push	r9
    1962:	af 92       	push	r10
    1964:	bf 92       	push	r11
    1966:	cf 92       	push	r12
    1968:	df 92       	push	r13
    196a:	ef 92       	push	r14
    196c:	ff 92       	push	r15
    196e:	0f 93       	push	r16
    1970:	1f 93       	push	r17
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	2c 97       	sbiw	r28, 0x0c	; 12
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	f8 94       	cli
    1980:	de bf       	out	0x3e, r29	; 62
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	cd bf       	out	0x3d, r28	; 61
    1986:	7c 01       	movw	r14, r24
    1988:	49 87       	std	Y+9, r20	; 0x09
    198a:	5a 87       	std	Y+10, r21	; 0x0a
    198c:	6b 87       	std	Y+11, r22	; 0x0b
    198e:	7c 87       	std	Y+12, r23	; 0x0c
    1990:	02 2f       	mov	r16, r18
	bool Status = FALSE;
	
	unsigned long AckMessage = 0;
    1992:	19 82       	std	Y+1, r1	; 0x01
    1994:	1a 82       	std	Y+2, r1	; 0x02
    1996:	1b 82       	std	Y+3, r1	; 0x03
    1998:	1c 82       	std	Y+4, r1	; 0x04
	
	//
	// Check if Xymk5vXyfst is initialized.
	//
	
	if (!gXymk5vXyfstInitialized)
    199a:	80 91 a3 0b 	lds	r24, 0x0BA3
    199e:	88 23       	and	r24, r24
    19a0:	89 f4       	brne	.+34     	; 0x19c4 <Xymk5vXyfstTransmit+0x72>
	{
		SendTrace(ERROR_LEVEL, "Xymk5vXyfst not Initialized\r\n");
    19a2:	00 d0       	rcall	.+0      	; 0x19a4 <Xymk5vXyfstTransmit+0x52>
    19a4:	0f 92       	push	r0
    19a6:	ed b7       	in	r30, 0x3d	; 61
    19a8:	fe b7       	in	r31, 0x3e	; 62
    19aa:	31 96       	adiw	r30, 0x01	; 1
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	80 83       	st	Z, r24
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	91 e0       	ldi	r25, 0x01	; 1
    19b4:	92 83       	std	Z+2, r25	; 0x02
    19b6:	81 83       	std	Z+1, r24	; 0x01
    19b8:	19 db       	rcall	.-2510   	; 0xfec <SendTrace>
    19ba:	10 e0       	ldi	r17, 0x00	; 0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	41 c1       	rjmp	.+642    	; 0x1c46 <Xymk5vXyfstTransmit+0x2f4>
	
	//
	// Now disable our receiver UART
	//
	
	Status = UARTEnableDisableReceiver(UART_ONE, DISABLE);
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	60 e0       	ldi	r22, 0x00	; 0
    19c8:	ce d5       	rcall	.+2972   	; 0x2566 <UARTEnableDisableReceiver>
    19ca:	18 2f       	mov	r17, r24
	
	if (!Status)
    19cc:	88 23       	and	r24, r24
    19ce:	81 f4       	brne	.+32     	; 0x19f0 <Xymk5vXyfstTransmit+0x9e>
	{
		SendTrace(ERROR_LEVEL, "Unable to disable receiver\r\n");
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <Xymk5vXyfstTransmit+0x80>
    19d2:	0f 92       	push	r0
    19d4:	ed b7       	in	r30, 0x3d	; 61
    19d6:	fe b7       	in	r31, 0x3e	; 62
    19d8:	31 96       	adiw	r30, 0x01	; 1
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	80 83       	st	Z, r24
    19de:	8e e1       	ldi	r24, 0x1E	; 30
    19e0:	91 e0       	ldi	r25, 0x01	; 1
    19e2:	92 83       	std	Z+2, r25	; 0x02
    19e4:	81 83       	std	Z+1, r24	; 0x01
    19e6:	02 db       	rcall	.-2556   	; 0xfec <SendTrace>
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	2b c1       	rjmp	.+598    	; 0x1c46 <Xymk5vXyfstTransmit+0x2f4>
		
		goto Exit;
	}
	
	if (MessageType == ACK_MESSAGE)
    19f0:	00 23       	and	r16, r16
    19f2:	09 f0       	breq	.+2      	; 0x19f6 <Xymk5vXyfstTransmit+0xa4>
    19f4:	45 c0       	rjmp	.+138    	; 0x1a80 <Xymk5vXyfstTransmit+0x12e>
	{
		SendTrace(INFO_LEVEL, "Transmitting Ack Message\r\n");
    19f6:	00 d0       	rcall	.+0      	; 0x19f8 <Xymk5vXyfstTransmit+0xa6>
    19f8:	0f 92       	push	r0
    19fa:	ed b7       	in	r30, 0x3d	; 61
    19fc:	fe b7       	in	r31, 0x3e	; 62
    19fe:	31 96       	adiw	r30, 0x01	; 1
    1a00:	84 e0       	ldi	r24, 0x04	; 4
    1a02:	80 83       	st	Z, r24
    1a04:	8b e3       	ldi	r24, 0x3B	; 59
    1a06:	91 e0       	ldi	r25, 0x01	; 1
    1a08:	92 83       	std	Z+2, r25	; 0x02
    1a0a:	81 83       	std	Z+1, r24	; 0x01
    1a0c:	ef da       	rcall	.-2594   	; 0xfec <SendTrace>
		
		//
		// First transmit the destination address
		//
		
		Status = UARTTransmitAddress(UART_ONE, gDestAddress);
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	60 91 b1 0b 	lds	r22, 0x0BB1
    1a1a:	0c d7       	rcall	.+3608   	; 0x2834 <UARTTransmitAddress>
    1a1c:	16 2f       	mov	r17, r22
		
		if (!Status)
    1a1e:	66 23       	and	r22, r22
    1a20:	81 f4       	brne	.+32     	; 0x1a42 <Xymk5vXyfstTransmit+0xf0>
		{
			SendTrace(ERROR_LEVEL, "Failed to transmit Dest Address\r\n");
    1a22:	00 d0       	rcall	.+0      	; 0x1a24 <Xymk5vXyfstTransmit+0xd2>
    1a24:	0f 92       	push	r0
    1a26:	ed b7       	in	r30, 0x3d	; 61
    1a28:	fe b7       	in	r31, 0x3e	; 62
    1a2a:	31 96       	adiw	r30, 0x01	; 1
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	80 83       	st	Z, r24
    1a30:	86 e5       	ldi	r24, 0x56	; 86
    1a32:	91 e0       	ldi	r25, 0x01	; 1
    1a34:	92 83       	std	Z+2, r25	; 0x02
    1a36:	81 83       	std	Z+1, r24	; 0x01
    1a38:	d9 da       	rcall	.-2638   	; 0xfec <SendTrace>
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	02 c1       	rjmp	.+516    	; 0x1c46 <Xymk5vXyfstTransmit+0x2f4>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a42:	80 ed       	ldi	r24, 0xD0	; 208
    1a44:	97 e0       	ldi	r25, 0x07	; 7
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	f1 f7       	brne	.-4      	; 0x1a46 <Xymk5vXyfstTransmit+0xf4>
		
		//
		// Now transmit the buffer
		//
		
		Status = UARTTransmitSync(UART_ONE, Buffer, Length);
    1a4a:	29 85       	ldd	r18, Y+9	; 0x09
    1a4c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a4e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a50:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	b7 01       	movw	r22, r14
    1a56:	0e d7       	rcall	.+3612   	; 0x2874 <UARTTransmitSync>
    1a58:	16 2f       	mov	r17, r22
		
		if (!Status)
    1a5a:	66 23       	and	r22, r22
    1a5c:	09 f0       	breq	.+2      	; 0x1a60 <Xymk5vXyfstTransmit+0x10e>
    1a5e:	f3 c0       	rjmp	.+486    	; 0x1c46 <Xymk5vXyfstTransmit+0x2f4>
		{
			SendTrace(ERROR_LEVEL, "Failed to transmit Buffer\r\n");
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <Xymk5vXyfstTransmit+0x110>
    1a62:	0f 92       	push	r0
    1a64:	ed b7       	in	r30, 0x3d	; 61
    1a66:	fe b7       	in	r31, 0x3e	; 62
    1a68:	31 96       	adiw	r30, 0x01	; 1
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	80 83       	st	Z, r24
    1a6e:	88 e7       	ldi	r24, 0x78	; 120
    1a70:	91 e0       	ldi	r25, 0x01	; 1
    1a72:	92 83       	std	Z+2, r25	; 0x02
    1a74:	81 83       	std	Z+1, r24	; 0x01
    1a76:	ba da       	rcall	.-2700   	; 0xfec <SendTrace>
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	e3 c0       	rjmp	.+454    	; 0x1c46 <Xymk5vXyfstTransmit+0x2f4>
	else
	{
	
		do
		{
			SendTrace(INFO_LEVEL, "Transmitting General Message\r\n");
    1a80:	04 e0       	ldi	r16, 0x04	; 4
    1a82:	0f 2e       	mov	r0, r31
    1a84:	f4 e9       	ldi	r31, 0x94	; 148
    1a86:	6f 2e       	mov	r6, r31
    1a88:	f1 e0       	ldi	r31, 0x01	; 1
    1a8a:	7f 2e       	mov	r7, r31
    1a8c:	f0 2d       	mov	r31, r0
    1a8e:	0f 2e       	mov	r0, r31
    1a90:	f0 ed       	ldi	r31, 0xD0	; 208
    1a92:	4f 2e       	mov	r4, r31
    1a94:	f7 e0       	ldi	r31, 0x07	; 7
    1a96:	5f 2e       	mov	r5, r31
    1a98:	f0 2d       	mov	r31, r0
	
			//
			// Now transmit the Message ID
			//
	
			Status = UARTTransmitSync(UART_ONE, &gMessageId, sizeof(unsigned long));
    1a9a:	0f 2e       	mov	r0, r31
    1a9c:	fc ea       	ldi	r31, 0xAC	; 172
    1a9e:	cf 2e       	mov	r12, r31
    1aa0:	fb e0       	ldi	r31, 0x0B	; 11
    1aa2:	df 2e       	mov	r13, r31
    1aa4:	f0 2d       	mov	r31, r0

			//
			// Now transmit the length of the message
			//
	
			Status = UARTTransmitSync(UART_ONE, &Length, sizeof(unsigned long));
    1aa6:	0f 2e       	mov	r0, r31
    1aa8:	f9 e0       	ldi	r31, 0x09	; 9
    1aaa:	af 2e       	mov	r10, r31
    1aac:	bb 24       	eor	r11, r11
    1aae:	f0 2d       	mov	r31, r0
    1ab0:	ac 0e       	add	r10, r28
    1ab2:	bd 1e       	adc	r11, r29
			// Now receive the acknowledgment
			//
		
			AckMessageLength = sizeof(unsigned long);
		
			Status = Xymk5vXyfstReceive(&AckMessage, &AckMessageLength, ACK_MESSAGE);
    1ab4:	0f 2e       	mov	r0, r31
    1ab6:	f5 e0       	ldi	r31, 0x05	; 5
    1ab8:	2f 2e       	mov	r2, r31
    1aba:	33 24       	eor	r3, r3
    1abc:	f0 2d       	mov	r31, r0
    1abe:	2c 0e       	add	r2, r28
    1ac0:	3d 1e       	adc	r3, r29
    1ac2:	4e 01       	movw	r8, r28
    1ac4:	08 94       	sec
    1ac6:	81 1c       	adc	r8, r1
    1ac8:	91 1c       	adc	r9, r1
	else
	{
	
		do
		{
			SendTrace(INFO_LEVEL, "Transmitting General Message\r\n");
    1aca:	00 d0       	rcall	.+0      	; 0x1acc <Xymk5vXyfstTransmit+0x17a>
    1acc:	0f 92       	push	r0
    1ace:	ed b7       	in	r30, 0x3d	; 61
    1ad0:	fe b7       	in	r31, 0x3e	; 62
    1ad2:	31 96       	adiw	r30, 0x01	; 1
    1ad4:	00 83       	st	Z, r16
    1ad6:	72 82       	std	Z+2, r7	; 0x02
    1ad8:	61 82       	std	Z+1, r6	; 0x01
    1ada:	88 da       	rcall	.-2800   	; 0xfec <SendTrace>
			
			//
			// First transmit the destination address
			//
	
			Status = UARTTransmitAddress(UART_ONE, gDestAddress);
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	60 91 b1 0b 	lds	r22, 0x0BB1
    1ae8:	a5 d6       	rcall	.+3402   	; 0x2834 <UARTTransmitAddress>
    1aea:	16 2f       	mov	r17, r22
	
			if (!Status)
    1aec:	66 23       	and	r22, r22
    1aee:	81 f4       	brne	.+32     	; 0x1b10 <Xymk5vXyfstTransmit+0x1be>
			{
				SendTrace(ERROR_LEVEL, "Failed to transmit Dest Address\r\n");
    1af0:	00 d0       	rcall	.+0      	; 0x1af2 <Xymk5vXyfstTransmit+0x1a0>
    1af2:	0f 92       	push	r0
    1af4:	ed b7       	in	r30, 0x3d	; 61
    1af6:	fe b7       	in	r31, 0x3e	; 62
    1af8:	31 96       	adiw	r30, 0x01	; 1
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	80 83       	st	Z, r24
    1afe:	86 e5       	ldi	r24, 0x56	; 86
    1b00:	91 e0       	ldi	r25, 0x01	; 1
    1b02:	92 83       	std	Z+2, r25	; 0x02
    1b04:	81 83       	std	Z+1, r24	; 0x01
    1b06:	72 da       	rcall	.-2844   	; 0xfec <SendTrace>
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	9b c0       	rjmp	.+310    	; 0x1c46 <Xymk5vXyfstTransmit+0x2f4>
    1b10:	c2 01       	movw	r24, r4
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <Xymk5vXyfstTransmit+0x1c0>
	
			//
			// Now transmit the Message ID
			//
	
			Status = UARTTransmitSync(UART_ONE, &gMessageId, sizeof(unsigned long));
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	b6 01       	movw	r22, r12
    1b1a:	24 e0       	ldi	r18, 0x04	; 4
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e0       	ldi	r20, 0x00	; 0
    1b20:	50 e0       	ldi	r21, 0x00	; 0
    1b22:	a8 d6       	rcall	.+3408   	; 0x2874 <UARTTransmitSync>
    1b24:	16 2f       	mov	r17, r22
	
			if (!Status)
    1b26:	66 23       	and	r22, r22
    1b28:	81 f4       	brne	.+32     	; 0x1b4a <Xymk5vXyfstTransmit+0x1f8>
			{
				SendTrace(ERROR_LEVEL, "Failed to transmit Message ID\r\n");
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <Xymk5vXyfstTransmit+0x1da>
    1b2c:	0f 92       	push	r0
    1b2e:	ed b7       	in	r30, 0x3d	; 61
    1b30:	fe b7       	in	r31, 0x3e	; 62
    1b32:	31 96       	adiw	r30, 0x01	; 1
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	80 83       	st	Z, r24
    1b38:	83 eb       	ldi	r24, 0xB3	; 179
    1b3a:	91 e0       	ldi	r25, 0x01	; 1
    1b3c:	92 83       	std	Z+2, r25	; 0x02
    1b3e:	81 83       	std	Z+1, r24	; 0x01
    1b40:	55 da       	rcall	.-2902   	; 0xfec <SendTrace>
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	7e c0       	rjmp	.+252    	; 0x1c46 <Xymk5vXyfstTransmit+0x2f4>

			//
			// Now transmit the length of the message
			//
	
			Status = UARTTransmitSync(UART_ONE, &Length, sizeof(unsigned long));
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	b5 01       	movw	r22, r10
    1b4e:	24 e0       	ldi	r18, 0x04	; 4
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	40 e0       	ldi	r20, 0x00	; 0
    1b54:	50 e0       	ldi	r21, 0x00	; 0
    1b56:	8e d6       	rcall	.+3356   	; 0x2874 <UARTTransmitSync>
    1b58:	16 2f       	mov	r17, r22
	
			if (!Status)
    1b5a:	66 23       	and	r22, r22
    1b5c:	81 f4       	brne	.+32     	; 0x1b7e <Xymk5vXyfstTransmit+0x22c>
			{
				SendTrace(ERROR_LEVEL, "Failed to transmit Length\r\n");
    1b5e:	00 d0       	rcall	.+0      	; 0x1b60 <Xymk5vXyfstTransmit+0x20e>
    1b60:	0f 92       	push	r0
    1b62:	ed b7       	in	r30, 0x3d	; 61
    1b64:	fe b7       	in	r31, 0x3e	; 62
    1b66:	31 96       	adiw	r30, 0x01	; 1
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	80 83       	st	Z, r24
    1b6c:	83 ed       	ldi	r24, 0xD3	; 211
    1b6e:	91 e0       	ldi	r25, 0x01	; 1
    1b70:	92 83       	std	Z+2, r25	; 0x02
    1b72:	81 83       	std	Z+1, r24	; 0x01
    1b74:	3b da       	rcall	.-2954   	; 0xfec <SendTrace>
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	64 c0       	rjmp	.+200    	; 0x1c46 <Xymk5vXyfstTransmit+0x2f4>
	
			//
			// Now transmit the buffer
			//
	
			Status = UARTTransmitSync(UART_ONE, Buffer, Length);
    1b7e:	29 85       	ldd	r18, Y+9	; 0x09
    1b80:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b82:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b84:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	b7 01       	movw	r22, r14
    1b8a:	74 d6       	rcall	.+3304   	; 0x2874 <UARTTransmitSync>
    1b8c:	16 2f       	mov	r17, r22
	
			if (!Status)
    1b8e:	66 23       	and	r22, r22
    1b90:	81 f4       	brne	.+32     	; 0x1bb2 <Xymk5vXyfstTransmit+0x260>
			{
				SendTrace(ERROR_LEVEL, "Failed to transmit Buffer\r\n");
    1b92:	00 d0       	rcall	.+0      	; 0x1b94 <Xymk5vXyfstTransmit+0x242>
    1b94:	0f 92       	push	r0
    1b96:	ed b7       	in	r30, 0x3d	; 61
    1b98:	fe b7       	in	r31, 0x3e	; 62
    1b9a:	31 96       	adiw	r30, 0x01	; 1
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	80 83       	st	Z, r24
    1ba0:	88 e7       	ldi	r24, 0x78	; 120
    1ba2:	91 e0       	ldi	r25, 0x01	; 1
    1ba4:	92 83       	std	Z+2, r25	; 0x02
    1ba6:	81 83       	std	Z+1, r24	; 0x01
    1ba8:	21 da       	rcall	.-3006   	; 0xfec <SendTrace>
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	4a c0       	rjmp	.+148    	; 0x1c46 <Xymk5vXyfstTransmit+0x2f4>
		
			//
			// Now receive the acknowledgment
			//
		
			AckMessageLength = sizeof(unsigned long);
    1bb2:	84 e0       	ldi	r24, 0x04	; 4
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	a0 e0       	ldi	r26, 0x00	; 0
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	8d 83       	std	Y+5, r24	; 0x05
    1bbc:	9e 83       	std	Y+6, r25	; 0x06
    1bbe:	af 83       	std	Y+7, r26	; 0x07
    1bc0:	b8 87       	std	Y+8, r27	; 0x08
		
			Status = Xymk5vXyfstReceive(&AckMessage, &AckMessageLength, ACK_MESSAGE);
    1bc2:	c4 01       	movw	r24, r8
    1bc4:	b1 01       	movw	r22, r2
    1bc6:	40 e0       	ldi	r20, 0x00	; 0
    1bc8:	5b d0       	rcall	.+182    	; 0x1c80 <Xymk5vXyfstReceive>
    1bca:	18 2f       	mov	r17, r24
		
			if (!Status)
    1bcc:	88 23       	and	r24, r24
    1bce:	79 f4       	brne	.+30     	; 0x1bee <Xymk5vXyfstTransmit+0x29c>
			{
				SendTrace (INFO_LEVEL, "Failed to receive Ack Message\r\n");
    1bd0:	00 d0       	rcall	.+0      	; 0x1bd2 <Xymk5vXyfstTransmit+0x280>
    1bd2:	0f 92       	push	r0
    1bd4:	ed b7       	in	r30, 0x3d	; 61
    1bd6:	fe b7       	in	r31, 0x3e	; 62
    1bd8:	31 96       	adiw	r30, 0x01	; 1
    1bda:	00 83       	st	Z, r16
    1bdc:	8f ee       	ldi	r24, 0xEF	; 239
    1bde:	91 e0       	ldi	r25, 0x01	; 1
    1be0:	92 83       	std	Z+2, r25	; 0x02
    1be2:	81 83       	std	Z+1, r24	; 0x01
    1be4:	03 da       	rcall	.-3066   	; 0xfec <SendTrace>
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	6e cf       	rjmp	.-292    	; 0x1aca <Xymk5vXyfstTransmit+0x178>
			}
			else if ((AckMessage == (gMessageId + 1)) || !gXymk5vXyfstAutoRetransmit)
    1bee:	80 91 ac 0b 	lds	r24, 0x0BAC
    1bf2:	90 91 ad 0b 	lds	r25, 0x0BAD
    1bf6:	a0 91 ae 0b 	lds	r26, 0x0BAE
    1bfa:	b0 91 af 0b 	lds	r27, 0x0BAF
    1bfe:	01 96       	adiw	r24, 0x01	; 1
    1c00:	a1 1d       	adc	r26, r1
    1c02:	b1 1d       	adc	r27, r1
    1c04:	29 81       	ldd	r18, Y+1	; 0x01
    1c06:	3a 81       	ldd	r19, Y+2	; 0x02
    1c08:	4b 81       	ldd	r20, Y+3	; 0x03
    1c0a:	5c 81       	ldd	r21, Y+4	; 0x04
    1c0c:	82 17       	cp	r24, r18
    1c0e:	93 07       	cpc	r25, r19
    1c10:	a4 07       	cpc	r26, r20
    1c12:	b5 07       	cpc	r27, r21
    1c14:	29 f0       	breq	.+10     	; 0x1c20 <Xymk5vXyfstTransmit+0x2ce>
    1c16:	80 91 ab 0b 	lds	r24, 0x0BAB
    1c1a:	88 23       	and	r24, r24
    1c1c:	09 f0       	breq	.+2      	; 0x1c20 <Xymk5vXyfstTransmit+0x2ce>
    1c1e:	55 cf       	rjmp	.-342    	; 0x1aca <Xymk5vXyfstTransmit+0x178>
				IsAckReceived = 1;
			}
		
		} while(IsAckReceived == 0);
		
		gMessageId++;
    1c20:	80 91 ac 0b 	lds	r24, 0x0BAC
    1c24:	90 91 ad 0b 	lds	r25, 0x0BAD
    1c28:	a0 91 ae 0b 	lds	r26, 0x0BAE
    1c2c:	b0 91 af 0b 	lds	r27, 0x0BAF
    1c30:	01 96       	adiw	r24, 0x01	; 1
    1c32:	a1 1d       	adc	r26, r1
    1c34:	b1 1d       	adc	r27, r1
    1c36:	80 93 ac 0b 	sts	0x0BAC, r24
    1c3a:	90 93 ad 0b 	sts	0x0BAD, r25
    1c3e:	a0 93 ae 0b 	sts	0x0BAE, r26
    1c42:	b0 93 af 0b 	sts	0x0BAF, r27

	//
	// Now enable our receiver after transmit is over
	//
	
	UARTEnableDisableReceiver(UART_ONE, ENABLE);
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	61 e0       	ldi	r22, 0x01	; 1
    1c4a:	8d d4       	rcall	.+2330   	; 0x2566 <UARTEnableDisableReceiver>

	return Status;	
}
    1c4c:	81 2f       	mov	r24, r17
    1c4e:	2c 96       	adiw	r28, 0x0c	; 12
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	1f 91       	pop	r17
    1c60:	0f 91       	pop	r16
    1c62:	ff 90       	pop	r15
    1c64:	ef 90       	pop	r14
    1c66:	df 90       	pop	r13
    1c68:	cf 90       	pop	r12
    1c6a:	bf 90       	pop	r11
    1c6c:	af 90       	pop	r10
    1c6e:	9f 90       	pop	r9
    1c70:	8f 90       	pop	r8
    1c72:	7f 90       	pop	r7
    1c74:	6f 90       	pop	r6
    1c76:	5f 90       	pop	r5
    1c78:	4f 90       	pop	r4
    1c7a:	3f 90       	pop	r3
    1c7c:	2f 90       	pop	r2
    1c7e:	08 95       	ret

00001c80 <Xymk5vXyfstReceive>:

bool
Xymk5vXyfstReceive(PVOID Buffer, unsigned long *Length, MESSAGE_TYPE MessageType)
{
    1c80:	6f 92       	push	r6
    1c82:	7f 92       	push	r7
    1c84:	8f 92       	push	r8
    1c86:	9f 92       	push	r9
    1c88:	af 92       	push	r10
    1c8a:	bf 92       	push	r11
    1c8c:	cf 92       	push	r12
    1c8e:	df 92       	push	r13
    1c90:	ef 92       	push	r14
    1c92:	ff 92       	push	r15
    1c94:	0f 93       	push	r16
    1c96:	1f 93       	push	r17
    1c98:	df 93       	push	r29
    1c9a:	cf 93       	push	r28
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	29 97       	sbiw	r28, 0x09	; 9
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	f8 94       	cli
    1ca6:	de bf       	out	0x3e, r29	; 62
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	cd bf       	out	0x3d, r28	; 61
    1cac:	3c 01       	movw	r6, r24
    1cae:	6b 01       	movw	r12, r22
    1cb0:	04 2f       	mov	r16, r20
	
	//
	// Enable Receiver UART
	//
	
	Status = UARTEnableDisableReceiver(UART_ONE, ENABLE);
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	61 e0       	ldi	r22, 0x01	; 1
    1cb6:	57 d4       	rcall	.+2222   	; 0x2566 <UARTEnableDisableReceiver>
    1cb8:	18 2f       	mov	r17, r24
	
	if (!Status)
    1cba:	88 23       	and	r24, r24
    1cbc:	81 f4       	brne	.+32     	; 0x1cde <Xymk5vXyfstReceive+0x5e>
	{
		SendTrace(ERROR_LEVEL, "Unable to enable receiver\r\n");
    1cbe:	00 d0       	rcall	.+0      	; 0x1cc0 <Xymk5vXyfstReceive+0x40>
    1cc0:	0f 92       	push	r0
    1cc2:	ed b7       	in	r30, 0x3d	; 61
    1cc4:	fe b7       	in	r31, 0x3e	; 62
    1cc6:	31 96       	adiw	r30, 0x01	; 1
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	80 83       	st	Z, r24
    1ccc:	8f e0       	ldi	r24, 0x0F	; 15
    1cce:	92 e0       	ldi	r25, 0x02	; 2
    1cd0:	92 83       	std	Z+2, r25	; 0x02
    1cd2:	81 83       	std	Z+1, r24	; 0x01
    1cd4:	8b d9       	rcall	.-3306   	; 0xfec <SendTrace>
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	cb c1       	rjmp	.+918    	; 0x2074 <Xymk5vXyfstReceive+0x3f4>
		
		goto Exit;
	}
		
	if (MessageType == GENERAL_MESSAGE)
    1cde:	01 30       	cpi	r16, 0x01	; 1
    1ce0:	09 f0       	breq	.+2      	; 0x1ce4 <Xymk5vXyfstReceive+0x64>
    1ce2:	2c c1       	rjmp	.+600    	; 0x1f3c <Xymk5vXyfstReceive+0x2bc>
	{	
		SendTrace(INFO_LEVEL, "General Message - Waiting for Address\r\n");
    1ce4:	00 d0       	rcall	.+0      	; 0x1ce6 <Xymk5vXyfstReceive+0x66>
    1ce6:	0f 92       	push	r0
    1ce8:	ed b7       	in	r30, 0x3d	; 61
    1cea:	fe b7       	in	r31, 0x3e	; 62
    1cec:	31 96       	adiw	r30, 0x01	; 1
    1cee:	84 e0       	ldi	r24, 0x04	; 4
    1cf0:	80 83       	st	Z, r24
    1cf2:	8b e2       	ldi	r24, 0x2B	; 43
    1cf4:	92 e0       	ldi	r25, 0x02	; 2
    1cf6:	92 83       	std	Z+2, r25	; 0x02
    1cf8:	81 83       	std	Z+1, r24	; 0x01
    1cfa:	78 d9       	rcall	.-3344   	; 0xfec <SendTrace>
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
			//
			// First receive the destination address and match it with
			// My address
			//
			
			Len = UARTReceiveSync(UART_ONE, &DestAddress, sizeof(unsigned char));
    1d02:	7e 01       	movw	r14, r28
    1d04:	08 94       	sec
    1d06:	e1 1c       	adc	r14, r1
    1d08:	f1 1c       	adc	r15, r1
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	b7 01       	movw	r22, r14
    1d0e:	21 e0       	ldi	r18, 0x01	; 1
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e0       	ldi	r20, 0x00	; 0
    1d14:	50 e0       	ldi	r21, 0x00	; 0
    1d16:	9b d6       	rcall	.+3382   	; 0x2a4e <UARTReceiveSync>
			
			if (Len != sizeof(unsigned char))
    1d18:	61 30       	cpi	r22, 0x01	; 1
    1d1a:	71 05       	cpc	r23, r1
    1d1c:	81 05       	cpc	r24, r1
    1d1e:	91 05       	cpc	r25, r1
    1d20:	89 f0       	breq	.+34     	; 0x1d44 <Xymk5vXyfstReceive+0xc4>
			{
				SendTrace(ERROR_LEVEL, "Invalid Destination Address.\r\n");
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <Xymk5vXyfstReceive+0xa4>
    1d24:	0f 92       	push	r0
    1d26:	ed b7       	in	r30, 0x3d	; 61
    1d28:	fe b7       	in	r31, 0x3e	; 62
    1d2a:	31 96       	adiw	r30, 0x01	; 1
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	80 83       	st	Z, r24
    1d30:	83 e5       	ldi	r24, 0x53	; 83
    1d32:	92 e0       	ldi	r25, 0x02	; 2
    1d34:	92 83       	std	Z+2, r25	; 0x02
    1d36:	81 83       	std	Z+1, r24	; 0x01
    1d38:	59 d9       	rcall	.-3406   	; 0xfec <SendTrace>
    1d3a:	10 e0       	ldi	r17, 0x00	; 0
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	98 c1       	rjmp	.+816    	; 0x2074 <Xymk5vXyfstReceive+0x3f4>
				Status = FALSE;
				
				goto Exit;
			}
			
		} while(DestAddress != gMyAddress);
    1d44:	99 81       	ldd	r25, Y+1	; 0x01
    1d46:	80 91 b0 0b 	lds	r24, 0x0BB0
    1d4a:	98 17       	cp	r25, r24
    1d4c:	f1 f6       	brne	.-68     	; 0x1d0a <Xymk5vXyfstReceive+0x8a>
		
		SendTrace(INFO_LEVEL, "General Message - Receiving New Message\r\n");
    1d4e:	00 d0       	rcall	.+0      	; 0x1d50 <Xymk5vXyfstReceive+0xd0>
    1d50:	0f 92       	push	r0
    1d52:	ed b7       	in	r30, 0x3d	; 61
    1d54:	fe b7       	in	r31, 0x3e	; 62
    1d56:	31 96       	adiw	r30, 0x01	; 1
    1d58:	84 e0       	ldi	r24, 0x04	; 4
    1d5a:	80 83       	st	Z, r24
    1d5c:	82 e7       	ldi	r24, 0x72	; 114
    1d5e:	92 e0       	ldi	r25, 0x02	; 2
    1d60:	92 83       	std	Z+2, r25	; 0x02
    1d62:	81 83       	std	Z+1, r24	; 0x01
    1d64:	43 d9       	rcall	.-3450   	; 0xfec <SendTrace>
		
		//
		// Disable MPCM Mode
		//
		
		UARTEnableDisableMPCM(UART_ONE, DISABLE);	
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	60 e0       	ldi	r22, 0x00	; 0
    1d70:	37 d4       	rcall	.+2158   	; 0x25e0 <UARTEnableDisableMPCM>
		//
		// Get Message ID
		//
	
		Len = UARTReceiveASync(UART_ONE, &MessageId, sizeof(unsigned long), RECEIVE_TIMEOUT);
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	be 01       	movw	r22, r28
    1d76:	6e 5f       	subi	r22, 0xFE	; 254
    1d78:	7f 4f       	sbci	r23, 0xFF	; 255
    1d7a:	24 e0       	ldi	r18, 0x04	; 4
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e0       	ldi	r20, 0x00	; 0
    1d80:	50 e0       	ldi	r21, 0x00	; 0
    1d82:	0a e0       	ldi	r16, 0x0A	; 10
    1d84:	60 d6       	rcall	.+3264   	; 0x2a46 <UARTReceiveASync>
	
		if (Len != sizeof(unsigned long))
    1d86:	64 30       	cpi	r22, 0x04	; 4
    1d88:	71 05       	cpc	r23, r1
    1d8a:	81 05       	cpc	r24, r1
    1d8c:	91 05       	cpc	r25, r1
    1d8e:	89 f0       	breq	.+34     	; 0x1db2 <Xymk5vXyfstReceive+0x132>
		{
			SendTrace(ERROR_LEVEL, "Failed to receive Message Id.\r\n");
    1d90:	00 d0       	rcall	.+0      	; 0x1d92 <Xymk5vXyfstReceive+0x112>
    1d92:	0f 92       	push	r0
    1d94:	ed b7       	in	r30, 0x3d	; 61
    1d96:	fe b7       	in	r31, 0x3e	; 62
    1d98:	31 96       	adiw	r30, 0x01	; 1
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	80 83       	st	Z, r24
    1d9e:	8c e9       	ldi	r24, 0x9C	; 156
    1da0:	92 e0       	ldi	r25, 0x02	; 2
    1da2:	92 83       	std	Z+2, r25	; 0x02
    1da4:	81 83       	std	Z+1, r24	; 0x01
    1da6:	22 d9       	rcall	.-3516   	; 0xfec <SendTrace>
    1da8:	10 e0       	ldi	r17, 0x00	; 0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	61 c1       	rjmp	.+706    	; 0x2074 <Xymk5vXyfstReceive+0x3f4>
			Status = FALSE;
		
			goto Exit;
		}
		
		SendTrace(INFO_LEVEL, "Message Id = %d\r\n", MessageId);
    1db2:	8d b7       	in	r24, 0x3d	; 61
    1db4:	9e b7       	in	r25, 0x3e	; 62
    1db6:	07 97       	sbiw	r24, 0x07	; 7
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	9e bf       	out	0x3e, r25	; 62
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	8d bf       	out	0x3d, r24	; 61
    1dc2:	ed b7       	in	r30, 0x3d	; 61
    1dc4:	fe b7       	in	r31, 0x3e	; 62
    1dc6:	31 96       	adiw	r30, 0x01	; 1
    1dc8:	84 e0       	ldi	r24, 0x04	; 4
    1dca:	80 83       	st	Z, r24
    1dcc:	8c eb       	ldi	r24, 0xBC	; 188
    1dce:	92 e0       	ldi	r25, 0x02	; 2
    1dd0:	92 83       	std	Z+2, r25	; 0x02
    1dd2:	81 83       	std	Z+1, r24	; 0x01
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd8:	ac 81       	ldd	r26, Y+4	; 0x04
    1dda:	bd 81       	ldd	r27, Y+5	; 0x05
    1ddc:	83 83       	std	Z+3, r24	; 0x03
    1dde:	94 83       	std	Z+4, r25	; 0x04
    1de0:	a5 83       	std	Z+5, r26	; 0x05
    1de2:	b6 83       	std	Z+6, r27	; 0x06
    1de4:	03 d9       	rcall	.-3578   	; 0xfec <SendTrace>
		
		//
		// Get Message Length
		//
		
		Len = UARTReceiveASync(UART_ONE, &MessageLength, sizeof(unsigned long), RECEIVE_TIMEOUT);
    1de6:	ed b7       	in	r30, 0x3d	; 61
    1de8:	fe b7       	in	r31, 0x3e	; 62
    1dea:	37 96       	adiw	r30, 0x07	; 7
    1dec:	0f b6       	in	r0, 0x3f	; 63
    1dee:	f8 94       	cli
    1df0:	fe bf       	out	0x3e, r31	; 62
    1df2:	0f be       	out	0x3f, r0	; 63
    1df4:	ed bf       	out	0x3d, r30	; 61
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	be 01       	movw	r22, r28
    1dfa:	6a 5f       	subi	r22, 0xFA	; 250
    1dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfe:	24 e0       	ldi	r18, 0x04	; 4
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e0       	ldi	r20, 0x00	; 0
    1e04:	50 e0       	ldi	r21, 0x00	; 0
    1e06:	0a e0       	ldi	r16, 0x0A	; 10
    1e08:	1e d6       	rcall	.+3132   	; 0x2a46 <UARTReceiveASync>
		
		if (Len != sizeof(unsigned long))
    1e0a:	64 30       	cpi	r22, 0x04	; 4
    1e0c:	71 05       	cpc	r23, r1
    1e0e:	81 05       	cpc	r24, r1
    1e10:	91 05       	cpc	r25, r1
    1e12:	89 f0       	breq	.+34     	; 0x1e36 <Xymk5vXyfstReceive+0x1b6>
		{
			SendTrace(ERROR_LEVEL, "Failed to receive Message Length.\r\n");
    1e14:	00 d0       	rcall	.+0      	; 0x1e16 <Xymk5vXyfstReceive+0x196>
    1e16:	0f 92       	push	r0
    1e18:	ed b7       	in	r30, 0x3d	; 61
    1e1a:	fe b7       	in	r31, 0x3e	; 62
    1e1c:	31 96       	adiw	r30, 0x01	; 1
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	80 83       	st	Z, r24
    1e22:	8e ec       	ldi	r24, 0xCE	; 206
    1e24:	92 e0       	ldi	r25, 0x02	; 2
    1e26:	92 83       	std	Z+2, r25	; 0x02
    1e28:	81 83       	std	Z+1, r24	; 0x01
    1e2a:	e0 d8       	rcall	.-3648   	; 0xfec <SendTrace>
    1e2c:	10 e0       	ldi	r17, 0x00	; 0
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	1f c1       	rjmp	.+574    	; 0x2074 <Xymk5vXyfstReceive+0x3f4>
		
		//
		// Verify we have enough buffer to store the received message.
		//
			
		if (*Length < MessageLength)
    1e36:	f6 01       	movw	r30, r12
    1e38:	80 80       	ld	r8, Z
    1e3a:	91 80       	ldd	r9, Z+1	; 0x01
    1e3c:	a2 80       	ldd	r10, Z+2	; 0x02
    1e3e:	b3 80       	ldd	r11, Z+3	; 0x03
    1e40:	2e 81       	ldd	r18, Y+6	; 0x06
    1e42:	3f 81       	ldd	r19, Y+7	; 0x07
    1e44:	48 85       	ldd	r20, Y+8	; 0x08
    1e46:	59 85       	ldd	r21, Y+9	; 0x09
    1e48:	82 16       	cp	r8, r18
    1e4a:	93 06       	cpc	r9, r19
    1e4c:	a4 06       	cpc	r10, r20
    1e4e:	b5 06       	cpc	r11, r21
    1e50:	48 f5       	brcc	.+82     	; 0x1ea4 <Xymk5vXyfstReceive+0x224>
		{
			SendTrace(ERROR_LEVEL, "Insufficient Receive Buffer - Buffer Length = %d, Message Length = %d\r\n", *Length, MessageLength);
    1e52:	8d b7       	in	r24, 0x3d	; 61
    1e54:	9e b7       	in	r25, 0x3e	; 62
    1e56:	0b 97       	sbiw	r24, 0x0b	; 11
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	9e bf       	out	0x3e, r25	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	8d bf       	out	0x3d, r24	; 61
    1e62:	ed b7       	in	r30, 0x3d	; 61
    1e64:	fe b7       	in	r31, 0x3e	; 62
    1e66:	31 96       	adiw	r30, 0x01	; 1
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	80 83       	st	Z, r24
    1e6c:	82 ef       	ldi	r24, 0xF2	; 242
    1e6e:	92 e0       	ldi	r25, 0x02	; 2
    1e70:	92 83       	std	Z+2, r25	; 0x02
    1e72:	81 83       	std	Z+1, r24	; 0x01
    1e74:	83 82       	std	Z+3, r8	; 0x03
    1e76:	94 82       	std	Z+4, r9	; 0x04
    1e78:	a5 82       	std	Z+5, r10	; 0x05
    1e7a:	b6 82       	std	Z+6, r11	; 0x06
    1e7c:	27 83       	std	Z+7, r18	; 0x07
    1e7e:	30 87       	std	Z+8, r19	; 0x08
    1e80:	41 87       	std	Z+9, r20	; 0x09
    1e82:	52 87       	std	Z+10, r21	; 0x0a
    1e84:	b3 d8       	rcall	.-3738   	; 0xfec <SendTrace>
				
			*Length = 0;
    1e86:	f6 01       	movw	r30, r12
    1e88:	10 82       	st	Z, r1
    1e8a:	11 82       	std	Z+1, r1	; 0x01
    1e8c:	12 82       	std	Z+2, r1	; 0x02
    1e8e:	13 82       	std	Z+3, r1	; 0x03
    1e90:	10 e0       	ldi	r17, 0x00	; 0
    1e92:	8d b7       	in	r24, 0x3d	; 61
    1e94:	9e b7       	in	r25, 0x3e	; 62
    1e96:	0b 96       	adiw	r24, 0x0b	; 11
    1e98:	0f b6       	in	r0, 0x3f	; 63
    1e9a:	f8 94       	cli
    1e9c:	9e bf       	out	0x3e, r25	; 62
    1e9e:	0f be       	out	0x3f, r0	; 63
    1ea0:	8d bf       	out	0x3d, r24	; 61
    1ea2:	e8 c0       	rjmp	.+464    	; 0x2074 <Xymk5vXyfstReceive+0x3f4>
			
		//
		// Receive the message
		//
			
		*Length = UARTReceiveASync(UART_ONE, Buffer, MessageLength, RECEIVE_TIMEOUT);
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	b3 01       	movw	r22, r6
    1ea8:	0a e0       	ldi	r16, 0x0A	; 10
    1eaa:	cd d5       	rcall	.+2970   	; 0x2a46 <UARTReceiveASync>
    1eac:	9b 01       	movw	r18, r22
    1eae:	ac 01       	movw	r20, r24
    1eb0:	f6 01       	movw	r30, r12
    1eb2:	60 83       	st	Z, r22
    1eb4:	71 83       	std	Z+1, r23	; 0x01
    1eb6:	82 83       	std	Z+2, r24	; 0x02
    1eb8:	93 83       	std	Z+3, r25	; 0x03
			
		if (*Length != MessageLength)
    1eba:	ce 80       	ldd	r12, Y+6	; 0x06
    1ebc:	df 80       	ldd	r13, Y+7	; 0x07
    1ebe:	e8 84       	ldd	r14, Y+8	; 0x08
    1ec0:	f9 84       	ldd	r15, Y+9	; 0x09
    1ec2:	6c 15       	cp	r22, r12
    1ec4:	7d 05       	cpc	r23, r13
    1ec6:	8e 05       	cpc	r24, r14
    1ec8:	9f 05       	cpc	r25, r15
    1eca:	21 f1       	breq	.+72     	; 0x1f14 <Xymk5vXyfstReceive+0x294>
		{
			SendTrace(ERROR_LEVEL, "Failed to receive entire message, Expected Message Length = %d, Received Message Length = %d.\r\n", MessageLength, *Length);
    1ecc:	8d b7       	in	r24, 0x3d	; 61
    1ece:	9e b7       	in	r25, 0x3e	; 62
    1ed0:	0b 97       	sbiw	r24, 0x0b	; 11
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	9e bf       	out	0x3e, r25	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	8d bf       	out	0x3d, r24	; 61
    1edc:	ed b7       	in	r30, 0x3d	; 61
    1ede:	fe b7       	in	r31, 0x3e	; 62
    1ee0:	31 96       	adiw	r30, 0x01	; 1
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	80 83       	st	Z, r24
    1ee6:	8a e3       	ldi	r24, 0x3A	; 58
    1ee8:	93 e0       	ldi	r25, 0x03	; 3
    1eea:	92 83       	std	Z+2, r25	; 0x02
    1eec:	81 83       	std	Z+1, r24	; 0x01
    1eee:	c3 82       	std	Z+3, r12	; 0x03
    1ef0:	d4 82       	std	Z+4, r13	; 0x04
    1ef2:	e5 82       	std	Z+5, r14	; 0x05
    1ef4:	f6 82       	std	Z+6, r15	; 0x06
    1ef6:	27 83       	std	Z+7, r18	; 0x07
    1ef8:	30 87       	std	Z+8, r19	; 0x08
    1efa:	41 87       	std	Z+9, r20	; 0x09
    1efc:	52 87       	std	Z+10, r21	; 0x0a
    1efe:	76 d8       	rcall	.-3860   	; 0xfec <SendTrace>
    1f00:	10 e0       	ldi	r17, 0x00	; 0
    1f02:	ed b7       	in	r30, 0x3d	; 61
    1f04:	fe b7       	in	r31, 0x3e	; 62
    1f06:	3b 96       	adiw	r30, 0x0b	; 11
    1f08:	0f b6       	in	r0, 0x3f	; 63
    1f0a:	f8 94       	cli
    1f0c:	fe bf       	out	0x3e, r31	; 62
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	ed bf       	out	0x3d, r30	; 61
    1f12:	b0 c0       	rjmp	.+352    	; 0x2074 <Xymk5vXyfstReceive+0x3f4>
			
		//
		// We have received the entire message without error, so send a Ack Message
		//
			
		MessageId++;
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	9b 81       	ldd	r25, Y+3	; 0x03
    1f18:	ac 81       	ldd	r26, Y+4	; 0x04
    1f1a:	bd 81       	ldd	r27, Y+5	; 0x05
    1f1c:	01 96       	adiw	r24, 0x01	; 1
    1f1e:	a1 1d       	adc	r26, r1
    1f20:	b1 1d       	adc	r27, r1
    1f22:	8a 83       	std	Y+2, r24	; 0x02
    1f24:	9b 83       	std	Y+3, r25	; 0x03
    1f26:	ac 83       	std	Y+4, r26	; 0x04
    1f28:	bd 83       	std	Y+5, r27	; 0x05
				
		Xymk5vXyfstTransmit(&MessageId, sizeof(unsigned long), ACK_MESSAGE);
    1f2a:	ce 01       	movw	r24, r28
    1f2c:	02 96       	adiw	r24, 0x02	; 2
    1f2e:	44 e0       	ldi	r20, 0x04	; 4
    1f30:	50 e0       	ldi	r21, 0x00	; 0
    1f32:	60 e0       	ldi	r22, 0x00	; 0
    1f34:	70 e0       	ldi	r23, 0x00	; 0
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	0c dd       	rcall	.-1512   	; 0x1952 <Xymk5vXyfstTransmit>
    1f3a:	9c c0       	rjmp	.+312    	; 0x2074 <Xymk5vXyfstReceive+0x3f4>
				
	}
	else
	{
		SendTrace(INFO_LEVEL, "Ack Message - Waiting for Address\r\n");
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <Xymk5vXyfstReceive+0x2be>
    1f3e:	0f 92       	push	r0
    1f40:	ed b7       	in	r30, 0x3d	; 61
    1f42:	fe b7       	in	r31, 0x3e	; 62
    1f44:	31 96       	adiw	r30, 0x01	; 1
    1f46:	84 e0       	ldi	r24, 0x04	; 4
    1f48:	80 83       	st	Z, r24
    1f4a:	8a e9       	ldi	r24, 0x9A	; 154
    1f4c:	93 e0       	ldi	r25, 0x03	; 3
    1f4e:	92 83       	std	Z+2, r25	; 0x02
    1f50:	81 83       	std	Z+1, r24	; 0x01
    1f52:	4c d8       	rcall	.-3944   	; 0xfec <SendTrace>
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
			//
			// First receive the destination address and match it with
			// My address
			//
			
			Len = UARTReceiveASync(UART_ONE, &DestAddress, sizeof(unsigned char), RECEIVE_TIMEOUT);
    1f5a:	7e 01       	movw	r14, r28
    1f5c:	08 94       	sec
    1f5e:	e1 1c       	adc	r14, r1
    1f60:	f1 1c       	adc	r15, r1
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	b7 01       	movw	r22, r14
    1f66:	21 e0       	ldi	r18, 0x01	; 1
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e0       	ldi	r20, 0x00	; 0
    1f6c:	50 e0       	ldi	r21, 0x00	; 0
    1f6e:	0a e0       	ldi	r16, 0x0A	; 10
    1f70:	6a d5       	rcall	.+2772   	; 0x2a46 <UARTReceiveASync>
			
			if (Len != sizeof(unsigned char))
    1f72:	61 30       	cpi	r22, 0x01	; 1
    1f74:	71 05       	cpc	r23, r1
    1f76:	81 05       	cpc	r24, r1
    1f78:	91 05       	cpc	r25, r1
    1f7a:	89 f0       	breq	.+34     	; 0x1f9e <Xymk5vXyfstReceive+0x31e>
			{
				SendTrace(ERROR_LEVEL, "Invalid Destination Address.\r\n");
    1f7c:	00 d0       	rcall	.+0      	; 0x1f7e <Xymk5vXyfstReceive+0x2fe>
    1f7e:	0f 92       	push	r0
    1f80:	ed b7       	in	r30, 0x3d	; 61
    1f82:	fe b7       	in	r31, 0x3e	; 62
    1f84:	31 96       	adiw	r30, 0x01	; 1
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	80 83       	st	Z, r24
    1f8a:	83 e5       	ldi	r24, 0x53	; 83
    1f8c:	92 e0       	ldi	r25, 0x02	; 2
    1f8e:	92 83       	std	Z+2, r25	; 0x02
    1f90:	81 83       	std	Z+1, r24	; 0x01
    1f92:	2c d8       	rcall	.-4008   	; 0xfec <SendTrace>
    1f94:	10 e0       	ldi	r17, 0x00	; 0
    1f96:	0f 90       	pop	r0
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	6b c0       	rjmp	.+214    	; 0x2074 <Xymk5vXyfstReceive+0x3f4>
				Status = FALSE;
				
				goto Exit;
			}
			
		} while(DestAddress != gMyAddress);
    1f9e:	99 81       	ldd	r25, Y+1	; 0x01
    1fa0:	80 91 b0 0b 	lds	r24, 0x0BB0
    1fa4:	98 17       	cp	r25, r24
    1fa6:	e9 f6       	brne	.-70     	; 0x1f62 <Xymk5vXyfstReceive+0x2e2>
		
		SendTrace(INFO_LEVEL, "Ack Message - Receiving New Message\r\n");
    1fa8:	00 d0       	rcall	.+0      	; 0x1faa <Xymk5vXyfstReceive+0x32a>
    1faa:	0f 92       	push	r0
    1fac:	ed b7       	in	r30, 0x3d	; 61
    1fae:	fe b7       	in	r31, 0x3e	; 62
    1fb0:	31 96       	adiw	r30, 0x01	; 1
    1fb2:	84 e0       	ldi	r24, 0x04	; 4
    1fb4:	80 83       	st	Z, r24
    1fb6:	8e eb       	ldi	r24, 0xBE	; 190
    1fb8:	93 e0       	ldi	r25, 0x03	; 3
    1fba:	92 83       	std	Z+2, r25	; 0x02
    1fbc:	81 83       	std	Z+1, r24	; 0x01
    1fbe:	16 d8       	rcall	.-4052   	; 0xfec <SendTrace>
		
		//
		// Disable MPCM Mode
		//
		
		UARTEnableDisableMPCM(UART_ONE, DISABLE);
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	60 e0       	ldi	r22, 0x00	; 0
    1fca:	0a d3       	rcall	.+1556   	; 0x25e0 <UARTEnableDisableMPCM>
		
		//
		// Verify we have enough buffer to store the received message.
		//
			
		if (*Length < sizeof(unsigned long))
    1fcc:	f6 01       	movw	r30, r12
    1fce:	80 81       	ld	r24, Z
    1fd0:	91 81       	ldd	r25, Z+1	; 0x01
    1fd2:	a2 81       	ldd	r26, Z+2	; 0x02
    1fd4:	b3 81       	ldd	r27, Z+3	; 0x03
    1fd6:	04 97       	sbiw	r24, 0x04	; 4
    1fd8:	a1 05       	cpc	r26, r1
    1fda:	b1 05       	cpc	r27, r1
    1fdc:	b8 f4       	brcc	.+46     	; 0x200c <Xymk5vXyfstReceive+0x38c>
		{
			SendTrace(ERROR_LEVEL, "Insufficient Receive Buffer \r\n");
    1fde:	00 d0       	rcall	.+0      	; 0x1fe0 <Xymk5vXyfstReceive+0x360>
    1fe0:	0f 92       	push	r0
    1fe2:	ed b7       	in	r30, 0x3d	; 61
    1fe4:	fe b7       	in	r31, 0x3e	; 62
    1fe6:	31 96       	adiw	r30, 0x01	; 1
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	80 83       	st	Z, r24
    1fec:	84 ee       	ldi	r24, 0xE4	; 228
    1fee:	93 e0       	ldi	r25, 0x03	; 3
    1ff0:	92 83       	std	Z+2, r25	; 0x02
    1ff2:	81 83       	std	Z+1, r24	; 0x01
    1ff4:	0e 94 f6 07 	call	0xfec	; 0xfec <SendTrace>
				
			*Length = 0;
    1ff8:	f6 01       	movw	r30, r12
    1ffa:	10 82       	st	Z, r1
    1ffc:	11 82       	std	Z+1, r1	; 0x01
    1ffe:	12 82       	std	Z+2, r1	; 0x02
    2000:	13 82       	std	Z+3, r1	; 0x03
    2002:	10 e0       	ldi	r17, 0x00	; 0
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	34 c0       	rjmp	.+104    	; 0x2074 <Xymk5vXyfstReceive+0x3f4>
			
		//
		// Receive the message
		//
			
		*Length = UARTReceiveASync(UART_ONE, Buffer, sizeof(unsigned long), RECEIVE_TIMEOUT);
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	b3 01       	movw	r22, r6
    2010:	24 e0       	ldi	r18, 0x04	; 4
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	40 e0       	ldi	r20, 0x00	; 0
    2016:	50 e0       	ldi	r21, 0x00	; 0
    2018:	0a e0       	ldi	r16, 0x0A	; 10
    201a:	15 d5       	rcall	.+2602   	; 0x2a46 <UARTReceiveASync>
    201c:	9b 01       	movw	r18, r22
    201e:	ac 01       	movw	r20, r24
    2020:	f6 01       	movw	r30, r12
    2022:	60 83       	st	Z, r22
    2024:	71 83       	std	Z+1, r23	; 0x01
    2026:	82 83       	std	Z+2, r24	; 0x02
    2028:	93 83       	std	Z+3, r25	; 0x03
			
		if (*Length != sizeof(unsigned long))
    202a:	64 30       	cpi	r22, 0x04	; 4
    202c:	71 05       	cpc	r23, r1
    202e:	81 05       	cpc	r24, r1
    2030:	91 05       	cpc	r25, r1
    2032:	01 f1       	breq	.+64     	; 0x2074 <Xymk5vXyfstReceive+0x3f4>
		{
			SendTrace(ERROR_LEVEL, "Failed to receive entire message, Received Message Length = %d.\r\n", *Length);
    2034:	8d b7       	in	r24, 0x3d	; 61
    2036:	9e b7       	in	r25, 0x3e	; 62
    2038:	07 97       	sbiw	r24, 0x07	; 7
    203a:	0f b6       	in	r0, 0x3f	; 63
    203c:	f8 94       	cli
    203e:	9e bf       	out	0x3e, r25	; 62
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	8d bf       	out	0x3d, r24	; 61
    2044:	ed b7       	in	r30, 0x3d	; 61
    2046:	fe b7       	in	r31, 0x3e	; 62
    2048:	31 96       	adiw	r30, 0x01	; 1
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	80 83       	st	Z, r24
    204e:	83 e0       	ldi	r24, 0x03	; 3
    2050:	94 e0       	ldi	r25, 0x04	; 4
    2052:	92 83       	std	Z+2, r25	; 0x02
    2054:	81 83       	std	Z+1, r24	; 0x01
    2056:	23 83       	std	Z+3, r18	; 0x03
    2058:	34 83       	std	Z+4, r19	; 0x04
    205a:	45 83       	std	Z+5, r20	; 0x05
    205c:	56 83       	std	Z+6, r21	; 0x06
    205e:	0e 94 f6 07 	call	0xfec	; 0xfec <SendTrace>
    2062:	10 e0       	ldi	r17, 0x00	; 0
    2064:	ed b7       	in	r30, 0x3d	; 61
    2066:	fe b7       	in	r31, 0x3e	; 62
    2068:	37 96       	adiw	r30, 0x07	; 7
    206a:	0f b6       	in	r0, 0x3f	; 63
    206c:	f8 94       	cli
    206e:	fe bf       	out	0x3e, r31	; 62
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	ed bf       	out	0x3d, r30	; 61
		}
	}

Exit:

	UARTEnableDisableMPCM(UART_ONE, ENABLE);
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	61 e0       	ldi	r22, 0x01	; 1
    2078:	b3 d2       	rcall	.+1382   	; 0x25e0 <UARTEnableDisableMPCM>
	
	return Status;
}
    207a:	81 2f       	mov	r24, r17
    207c:	29 96       	adiw	r28, 0x09	; 9
    207e:	0f b6       	in	r0, 0x3f	; 63
    2080:	f8 94       	cli
    2082:	de bf       	out	0x3e, r29	; 62
    2084:	0f be       	out	0x3f, r0	; 63
    2086:	cd bf       	out	0x3d, r28	; 61
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	1f 91       	pop	r17
    208e:	0f 91       	pop	r16
    2090:	ff 90       	pop	r15
    2092:	ef 90       	pop	r14
    2094:	df 90       	pop	r13
    2096:	cf 90       	pop	r12
    2098:	bf 90       	pop	r11
    209a:	af 90       	pop	r10
    209c:	9f 90       	pop	r9
    209e:	8f 90       	pop	r8
    20a0:	7f 90       	pop	r7
    20a2:	6f 90       	pop	r6
    20a4:	08 95       	ret

000020a6 <InitXymk5vXyfst>:



bool 
InitXymk5vXyfst(unsigned char MyAddress, unsigned char DestAddress, bool EnableAutoReTransmit)
{
    20a6:	ff 92       	push	r15
    20a8:	0f 93       	push	r16
    20aa:	1f 93       	push	r17
    20ac:	08 2f       	mov	r16, r24
    20ae:	f4 2e       	mov	r15, r20
    bool Status;
	
	Status = InitUARTSync(UART_ONE, BR_2400, MULTI_PROCESSOR_COMMUNICATION_MODE);
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	6f ec       	ldi	r22, 0xCF	; 207
    20b4:	70 e0       	ldi	r23, 0x00	; 0
    20b6:	41 e0       	ldi	r20, 0x01	; 1
    20b8:	e2 d2       	rcall	.+1476   	; 0x267e <InitUARTSync>
    20ba:	18 2f       	mov	r17, r24
	
	if (!Status)
    20bc:	88 23       	and	r24, r24
    20be:	89 f4       	brne	.+34     	; 0x20e2 <InitXymk5vXyfst+0x3c>
	{
		SendTrace(ERROR_LEVEL, "Failed to initialized UART 1\r\n");
    20c0:	00 d0       	rcall	.+0      	; 0x20c2 <InitXymk5vXyfst+0x1c>
    20c2:	0f 92       	push	r0
    20c4:	ed b7       	in	r30, 0x3d	; 61
    20c6:	fe b7       	in	r31, 0x3e	; 62
    20c8:	31 96       	adiw	r30, 0x01	; 1
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	80 83       	st	Z, r24
    20ce:	85 e4       	ldi	r24, 0x45	; 69
    20d0:	94 e0       	ldi	r25, 0x04	; 4
    20d2:	92 83       	std	Z+2, r25	; 0x02
    20d4:	81 83       	std	Z+1, r24	; 0x01
    20d6:	0e 94 f6 07 	call	0xfec	; 0xfec <SendTrace>
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	07 c0       	rjmp	.+14     	; 0x20f0 <InitXymk5vXyfst+0x4a>
		
		goto Exit;
	}

	gMyAddress = MyAddress;
    20e2:	00 93 b0 0b 	sts	0x0BB0, r16
	
	gDestAddress = gDestAddress;

	gXymk5vXyfstAutoRetransmit = EnableAutoReTransmit;
    20e6:	f0 92 ab 0b 	sts	0x0BAB, r15
	
	gXymk5vXyfstInitialized = TRUE;
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	80 93 a3 0b 	sts	0x0BA3, r24

Exit:

    return Status;
}
    20f0:	81 2f       	mov	r24, r17
    20f2:	1f 91       	pop	r17
    20f4:	0f 91       	pop	r16
    20f6:	ff 90       	pop	r15
    20f8:	08 95       	ret

000020fa <__subsf3>:
    20fa:	50 58       	subi	r21, 0x80	; 128

000020fc <__addsf3>:
    20fc:	bb 27       	eor	r27, r27
    20fe:	aa 27       	eor	r26, r26
    2100:	0e d0       	rcall	.+28     	; 0x211e <__addsf3x>
    2102:	94 c1       	rjmp	.+808    	; 0x242c <__fp_round>
    2104:	85 d1       	rcall	.+778    	; 0x2410 <__fp_pscA>
    2106:	30 f0       	brcs	.+12     	; 0x2114 <__addsf3+0x18>
    2108:	8a d1       	rcall	.+788    	; 0x241e <__fp_pscB>
    210a:	20 f0       	brcs	.+8      	; 0x2114 <__addsf3+0x18>
    210c:	31 f4       	brne	.+12     	; 0x211a <__addsf3+0x1e>
    210e:	9f 3f       	cpi	r25, 0xFF	; 255
    2110:	11 f4       	brne	.+4      	; 0x2116 <__addsf3+0x1a>
    2112:	1e f4       	brtc	.+6      	; 0x211a <__addsf3+0x1e>
    2114:	6a c1       	rjmp	.+724    	; 0x23ea <__fp_nan>
    2116:	0e f4       	brtc	.+2      	; 0x211a <__addsf3+0x1e>
    2118:	e0 95       	com	r30
    211a:	e7 fb       	bst	r30, 7
    211c:	60 c1       	rjmp	.+704    	; 0x23de <__fp_inf>

0000211e <__addsf3x>:
    211e:	e9 2f       	mov	r30, r25
    2120:	96 d1       	rcall	.+812    	; 0x244e <__fp_split3>
    2122:	80 f3       	brcs	.-32     	; 0x2104 <__addsf3+0x8>
    2124:	ba 17       	cp	r27, r26
    2126:	62 07       	cpc	r22, r18
    2128:	73 07       	cpc	r23, r19
    212a:	84 07       	cpc	r24, r20
    212c:	95 07       	cpc	r25, r21
    212e:	18 f0       	brcs	.+6      	; 0x2136 <__addsf3x+0x18>
    2130:	71 f4       	brne	.+28     	; 0x214e <__addsf3x+0x30>
    2132:	9e f5       	brtc	.+102    	; 0x219a <__addsf3x+0x7c>
    2134:	ae c1       	rjmp	.+860    	; 0x2492 <__fp_zero>
    2136:	0e f4       	brtc	.+2      	; 0x213a <__addsf3x+0x1c>
    2138:	e0 95       	com	r30
    213a:	0b 2e       	mov	r0, r27
    213c:	ba 2f       	mov	r27, r26
    213e:	a0 2d       	mov	r26, r0
    2140:	0b 01       	movw	r0, r22
    2142:	b9 01       	movw	r22, r18
    2144:	90 01       	movw	r18, r0
    2146:	0c 01       	movw	r0, r24
    2148:	ca 01       	movw	r24, r20
    214a:	a0 01       	movw	r20, r0
    214c:	11 24       	eor	r1, r1
    214e:	ff 27       	eor	r31, r31
    2150:	59 1b       	sub	r21, r25
    2152:	99 f0       	breq	.+38     	; 0x217a <__addsf3x+0x5c>
    2154:	59 3f       	cpi	r21, 0xF9	; 249
    2156:	50 f4       	brcc	.+20     	; 0x216c <__addsf3x+0x4e>
    2158:	50 3e       	cpi	r21, 0xE0	; 224
    215a:	68 f1       	brcs	.+90     	; 0x21b6 <__addsf3x+0x98>
    215c:	1a 16       	cp	r1, r26
    215e:	f0 40       	sbci	r31, 0x00	; 0
    2160:	a2 2f       	mov	r26, r18
    2162:	23 2f       	mov	r18, r19
    2164:	34 2f       	mov	r19, r20
    2166:	44 27       	eor	r20, r20
    2168:	58 5f       	subi	r21, 0xF8	; 248
    216a:	f3 cf       	rjmp	.-26     	; 0x2152 <__addsf3x+0x34>
    216c:	46 95       	lsr	r20
    216e:	37 95       	ror	r19
    2170:	27 95       	ror	r18
    2172:	a7 95       	ror	r26
    2174:	f0 40       	sbci	r31, 0x00	; 0
    2176:	53 95       	inc	r21
    2178:	c9 f7       	brne	.-14     	; 0x216c <__addsf3x+0x4e>
    217a:	7e f4       	brtc	.+30     	; 0x219a <__addsf3x+0x7c>
    217c:	1f 16       	cp	r1, r31
    217e:	ba 0b       	sbc	r27, r26
    2180:	62 0b       	sbc	r22, r18
    2182:	73 0b       	sbc	r23, r19
    2184:	84 0b       	sbc	r24, r20
    2186:	ba f0       	brmi	.+46     	; 0x21b6 <__addsf3x+0x98>
    2188:	91 50       	subi	r25, 0x01	; 1
    218a:	a1 f0       	breq	.+40     	; 0x21b4 <__addsf3x+0x96>
    218c:	ff 0f       	add	r31, r31
    218e:	bb 1f       	adc	r27, r27
    2190:	66 1f       	adc	r22, r22
    2192:	77 1f       	adc	r23, r23
    2194:	88 1f       	adc	r24, r24
    2196:	c2 f7       	brpl	.-16     	; 0x2188 <__addsf3x+0x6a>
    2198:	0e c0       	rjmp	.+28     	; 0x21b6 <__addsf3x+0x98>
    219a:	ba 0f       	add	r27, r26
    219c:	62 1f       	adc	r22, r18
    219e:	73 1f       	adc	r23, r19
    21a0:	84 1f       	adc	r24, r20
    21a2:	48 f4       	brcc	.+18     	; 0x21b6 <__addsf3x+0x98>
    21a4:	87 95       	ror	r24
    21a6:	77 95       	ror	r23
    21a8:	67 95       	ror	r22
    21aa:	b7 95       	ror	r27
    21ac:	f7 95       	ror	r31
    21ae:	9e 3f       	cpi	r25, 0xFE	; 254
    21b0:	08 f0       	brcs	.+2      	; 0x21b4 <__addsf3x+0x96>
    21b2:	b3 cf       	rjmp	.-154    	; 0x211a <__addsf3+0x1e>
    21b4:	93 95       	inc	r25
    21b6:	88 0f       	add	r24, r24
    21b8:	08 f0       	brcs	.+2      	; 0x21bc <__addsf3x+0x9e>
    21ba:	99 27       	eor	r25, r25
    21bc:	ee 0f       	add	r30, r30
    21be:	97 95       	ror	r25
    21c0:	87 95       	ror	r24
    21c2:	08 95       	ret

000021c4 <__cmpsf2>:
    21c4:	e8 d0       	rcall	.+464    	; 0x2396 <__fp_cmp>
    21c6:	08 f4       	brcc	.+2      	; 0x21ca <__cmpsf2+0x6>
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	08 95       	ret

000021cc <__fixsfdi>:
    21cc:	be e3       	ldi	r27, 0x3E	; 62
    21ce:	04 d0       	rcall	.+8      	; 0x21d8 <__fixunssfdi+0x2>
    21d0:	08 f4       	brcc	.+2      	; 0x21d4 <__fixsfdi+0x8>
    21d2:	90 e8       	ldi	r25, 0x80	; 128
    21d4:	08 95       	ret

000021d6 <__fixunssfdi>:
    21d6:	bf e3       	ldi	r27, 0x3F	; 63
    21d8:	22 27       	eor	r18, r18
    21da:	33 27       	eor	r19, r19
    21dc:	a9 01       	movw	r20, r18
    21de:	3f d1       	rcall	.+638    	; 0x245e <__fp_splitA>
    21e0:	58 f1       	brcs	.+86     	; 0x2238 <__fixunssfdi+0x62>
    21e2:	9f 57       	subi	r25, 0x7F	; 127
    21e4:	40 f1       	brcs	.+80     	; 0x2236 <__fixunssfdi+0x60>
    21e6:	b9 17       	cp	r27, r25
    21e8:	38 f1       	brcs	.+78     	; 0x2238 <__fixunssfdi+0x62>
    21ea:	bf e3       	ldi	r27, 0x3F	; 63
    21ec:	b9 1b       	sub	r27, r25
    21ee:	99 27       	eor	r25, r25
    21f0:	b8 50       	subi	r27, 0x08	; 8
    21f2:	3a f4       	brpl	.+14     	; 0x2202 <__fixunssfdi+0x2c>
    21f4:	66 0f       	add	r22, r22
    21f6:	77 1f       	adc	r23, r23
    21f8:	88 1f       	adc	r24, r24
    21fa:	99 1f       	adc	r25, r25
    21fc:	b3 95       	inc	r27
    21fe:	d2 f3       	brmi	.-12     	; 0x21f4 <__fixunssfdi+0x1e>
    2200:	16 c0       	rjmp	.+44     	; 0x222e <__fixunssfdi+0x58>
    2202:	b8 50       	subi	r27, 0x08	; 8
    2204:	4a f0       	brmi	.+18     	; 0x2218 <__fixunssfdi+0x42>
    2206:	23 2f       	mov	r18, r19
    2208:	34 2f       	mov	r19, r20
    220a:	45 2f       	mov	r20, r21
    220c:	56 2f       	mov	r21, r22
    220e:	67 2f       	mov	r22, r23
    2210:	78 2f       	mov	r23, r24
    2212:	88 27       	eor	r24, r24
    2214:	b8 50       	subi	r27, 0x08	; 8
    2216:	ba f7       	brpl	.-18     	; 0x2206 <__fixunssfdi+0x30>
    2218:	b8 5f       	subi	r27, 0xF8	; 248
    221a:	49 f0       	breq	.+18     	; 0x222e <__fixunssfdi+0x58>
    221c:	86 95       	lsr	r24
    221e:	77 95       	ror	r23
    2220:	67 95       	ror	r22
    2222:	57 95       	ror	r21
    2224:	47 95       	ror	r20
    2226:	37 95       	ror	r19
    2228:	27 95       	ror	r18
    222a:	ba 95       	dec	r27
    222c:	b9 f7       	brne	.-18     	; 0x221c <__fixunssfdi+0x46>
    222e:	0e f4       	brtc	.+2      	; 0x2232 <__fixunssfdi+0x5c>
    2230:	df d0       	rcall	.+446    	; 0x23f0 <__fp_negdi>
    2232:	88 94       	clc
    2234:	08 95       	ret
    2236:	88 94       	clc
    2238:	60 e0       	ldi	r22, 0x00	; 0
    223a:	70 e0       	ldi	r23, 0x00	; 0
    223c:	cb 01       	movw	r24, r22
    223e:	08 95       	ret

00002240 <__fixunssfsi>:
    2240:	0e d1       	rcall	.+540    	; 0x245e <__fp_splitA>
    2242:	88 f0       	brcs	.+34     	; 0x2266 <__fixunssfsi+0x26>
    2244:	9f 57       	subi	r25, 0x7F	; 127
    2246:	90 f0       	brcs	.+36     	; 0x226c <__fixunssfsi+0x2c>
    2248:	b9 2f       	mov	r27, r25
    224a:	99 27       	eor	r25, r25
    224c:	b7 51       	subi	r27, 0x17	; 23
    224e:	a0 f0       	brcs	.+40     	; 0x2278 <__fixunssfsi+0x38>
    2250:	d1 f0       	breq	.+52     	; 0x2286 <__fixunssfsi+0x46>
    2252:	66 0f       	add	r22, r22
    2254:	77 1f       	adc	r23, r23
    2256:	88 1f       	adc	r24, r24
    2258:	99 1f       	adc	r25, r25
    225a:	1a f0       	brmi	.+6      	; 0x2262 <__fixunssfsi+0x22>
    225c:	ba 95       	dec	r27
    225e:	c9 f7       	brne	.-14     	; 0x2252 <__fixunssfsi+0x12>
    2260:	12 c0       	rjmp	.+36     	; 0x2286 <__fixunssfsi+0x46>
    2262:	b1 30       	cpi	r27, 0x01	; 1
    2264:	81 f0       	breq	.+32     	; 0x2286 <__fixunssfsi+0x46>
    2266:	15 d1       	rcall	.+554    	; 0x2492 <__fp_zero>
    2268:	b1 e0       	ldi	r27, 0x01	; 1
    226a:	08 95       	ret
    226c:	12 c1       	rjmp	.+548    	; 0x2492 <__fp_zero>
    226e:	67 2f       	mov	r22, r23
    2270:	78 2f       	mov	r23, r24
    2272:	88 27       	eor	r24, r24
    2274:	b8 5f       	subi	r27, 0xF8	; 248
    2276:	39 f0       	breq	.+14     	; 0x2286 <__fixunssfsi+0x46>
    2278:	b9 3f       	cpi	r27, 0xF9	; 249
    227a:	cc f3       	brlt	.-14     	; 0x226e <__fixunssfsi+0x2e>
    227c:	86 95       	lsr	r24
    227e:	77 95       	ror	r23
    2280:	67 95       	ror	r22
    2282:	b3 95       	inc	r27
    2284:	d9 f7       	brne	.-10     	; 0x227c <__fixunssfsi+0x3c>
    2286:	3e f4       	brtc	.+14     	; 0x2296 <__fixunssfsi+0x56>
    2288:	90 95       	com	r25
    228a:	80 95       	com	r24
    228c:	70 95       	com	r23
    228e:	61 95       	neg	r22
    2290:	7f 4f       	sbci	r23, 0xFF	; 255
    2292:	8f 4f       	sbci	r24, 0xFF	; 255
    2294:	9f 4f       	sbci	r25, 0xFF	; 255
    2296:	08 95       	ret

00002298 <__floatdisf>:
    2298:	97 fb       	bst	r25, 7
    229a:	0e f4       	brtc	.+2      	; 0x229e <__floatdisf+0x6>
    229c:	a9 d0       	rcall	.+338    	; 0x23f0 <__fp_negdi>
    229e:	3e c0       	rjmp	.+124    	; 0x231c <__fp_di2sf>

000022a0 <__floatunsisf>:
    22a0:	e8 94       	clt
    22a2:	09 c0       	rjmp	.+18     	; 0x22b6 <__floatsisf+0x12>

000022a4 <__floatsisf>:
    22a4:	97 fb       	bst	r25, 7
    22a6:	3e f4       	brtc	.+14     	; 0x22b6 <__floatsisf+0x12>
    22a8:	90 95       	com	r25
    22aa:	80 95       	com	r24
    22ac:	70 95       	com	r23
    22ae:	61 95       	neg	r22
    22b0:	7f 4f       	sbci	r23, 0xFF	; 255
    22b2:	8f 4f       	sbci	r24, 0xFF	; 255
    22b4:	9f 4f       	sbci	r25, 0xFF	; 255
    22b6:	99 23       	and	r25, r25
    22b8:	a9 f0       	breq	.+42     	; 0x22e4 <__floatsisf+0x40>
    22ba:	f9 2f       	mov	r31, r25
    22bc:	96 e9       	ldi	r25, 0x96	; 150
    22be:	bb 27       	eor	r27, r27
    22c0:	93 95       	inc	r25
    22c2:	f6 95       	lsr	r31
    22c4:	87 95       	ror	r24
    22c6:	77 95       	ror	r23
    22c8:	67 95       	ror	r22
    22ca:	b7 95       	ror	r27
    22cc:	f1 11       	cpse	r31, r1
    22ce:	f8 cf       	rjmp	.-16     	; 0x22c0 <__floatsisf+0x1c>
    22d0:	fa f4       	brpl	.+62     	; 0x2310 <__floatsisf+0x6c>
    22d2:	bb 0f       	add	r27, r27
    22d4:	11 f4       	brne	.+4      	; 0x22da <__floatsisf+0x36>
    22d6:	60 ff       	sbrs	r22, 0
    22d8:	1b c0       	rjmp	.+54     	; 0x2310 <__floatsisf+0x6c>
    22da:	6f 5f       	subi	r22, 0xFF	; 255
    22dc:	7f 4f       	sbci	r23, 0xFF	; 255
    22de:	8f 4f       	sbci	r24, 0xFF	; 255
    22e0:	9f 4f       	sbci	r25, 0xFF	; 255
    22e2:	16 c0       	rjmp	.+44     	; 0x2310 <__floatsisf+0x6c>
    22e4:	88 23       	and	r24, r24
    22e6:	11 f0       	breq	.+4      	; 0x22ec <__floatsisf+0x48>
    22e8:	96 e9       	ldi	r25, 0x96	; 150
    22ea:	11 c0       	rjmp	.+34     	; 0x230e <__floatsisf+0x6a>
    22ec:	77 23       	and	r23, r23
    22ee:	21 f0       	breq	.+8      	; 0x22f8 <__floatsisf+0x54>
    22f0:	9e e8       	ldi	r25, 0x8E	; 142
    22f2:	87 2f       	mov	r24, r23
    22f4:	76 2f       	mov	r23, r22
    22f6:	05 c0       	rjmp	.+10     	; 0x2302 <__floatsisf+0x5e>
    22f8:	66 23       	and	r22, r22
    22fa:	71 f0       	breq	.+28     	; 0x2318 <__floatsisf+0x74>
    22fc:	96 e8       	ldi	r25, 0x86	; 134
    22fe:	86 2f       	mov	r24, r22
    2300:	70 e0       	ldi	r23, 0x00	; 0
    2302:	60 e0       	ldi	r22, 0x00	; 0
    2304:	2a f0       	brmi	.+10     	; 0x2310 <__floatsisf+0x6c>
    2306:	9a 95       	dec	r25
    2308:	66 0f       	add	r22, r22
    230a:	77 1f       	adc	r23, r23
    230c:	88 1f       	adc	r24, r24
    230e:	da f7       	brpl	.-10     	; 0x2306 <__floatsisf+0x62>
    2310:	88 0f       	add	r24, r24
    2312:	96 95       	lsr	r25
    2314:	87 95       	ror	r24
    2316:	97 f9       	bld	r25, 7
    2318:	08 95       	ret

0000231a <__floatundisf>:
    231a:	e8 94       	clt

0000231c <__fp_di2sf>:
    231c:	f9 2f       	mov	r31, r25
    231e:	96 eb       	ldi	r25, 0xB6	; 182
    2320:	ff 23       	and	r31, r31
    2322:	81 f0       	breq	.+32     	; 0x2344 <__fp_di2sf+0x28>
    2324:	12 16       	cp	r1, r18
    2326:	13 06       	cpc	r1, r19
    2328:	14 06       	cpc	r1, r20
    232a:	44 0b       	sbc	r20, r20
    232c:	93 95       	inc	r25
    232e:	f6 95       	lsr	r31
    2330:	87 95       	ror	r24
    2332:	77 95       	ror	r23
    2334:	67 95       	ror	r22
    2336:	57 95       	ror	r21
    2338:	40 40       	sbci	r20, 0x00	; 0
    233a:	ff 23       	and	r31, r31
    233c:	b9 f7       	brne	.-18     	; 0x232c <__fp_di2sf+0x10>
    233e:	1b c0       	rjmp	.+54     	; 0x2376 <__fp_di2sf+0x5a>
    2340:	99 27       	eor	r25, r25
    2342:	08 95       	ret
    2344:	88 23       	and	r24, r24
    2346:	51 f4       	brne	.+20     	; 0x235c <__fp_di2sf+0x40>
    2348:	98 50       	subi	r25, 0x08	; 8
    234a:	d2 f7       	brpl	.-12     	; 0x2340 <__fp_di2sf+0x24>
    234c:	87 2b       	or	r24, r23
    234e:	76 2f       	mov	r23, r22
    2350:	65 2f       	mov	r22, r21
    2352:	54 2f       	mov	r21, r20
    2354:	43 2f       	mov	r20, r19
    2356:	32 2f       	mov	r19, r18
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	b1 f3       	breq	.-20     	; 0x2348 <__fp_di2sf+0x2c>
    235c:	12 16       	cp	r1, r18
    235e:	13 06       	cpc	r1, r19
    2360:	14 06       	cpc	r1, r20
    2362:	44 0b       	sbc	r20, r20
    2364:	88 23       	and	r24, r24
    2366:	3a f0       	brmi	.+14     	; 0x2376 <__fp_di2sf+0x5a>
    2368:	9a 95       	dec	r25
    236a:	44 0f       	add	r20, r20
    236c:	55 1f       	adc	r21, r21
    236e:	66 1f       	adc	r22, r22
    2370:	77 1f       	adc	r23, r23
    2372:	88 1f       	adc	r24, r24
    2374:	ca f7       	brpl	.-14     	; 0x2368 <__fp_di2sf+0x4c>
    2376:	55 23       	and	r21, r21
    2378:	4a f4       	brpl	.+18     	; 0x238c <__fp_di2sf+0x70>
    237a:	44 0f       	add	r20, r20
    237c:	55 1f       	adc	r21, r21
    237e:	11 f4       	brne	.+4      	; 0x2384 <__fp_di2sf+0x68>
    2380:	60 ff       	sbrs	r22, 0
    2382:	04 c0       	rjmp	.+8      	; 0x238c <__fp_di2sf+0x70>
    2384:	6f 5f       	subi	r22, 0xFF	; 255
    2386:	7f 4f       	sbci	r23, 0xFF	; 255
    2388:	8f 4f       	sbci	r24, 0xFF	; 255
    238a:	9f 4f       	sbci	r25, 0xFF	; 255
    238c:	88 0f       	add	r24, r24
    238e:	96 95       	lsr	r25
    2390:	87 95       	ror	r24
    2392:	97 f9       	bld	r25, 7
    2394:	08 95       	ret

00002396 <__fp_cmp>:
    2396:	99 0f       	add	r25, r25
    2398:	00 08       	sbc	r0, r0
    239a:	55 0f       	add	r21, r21
    239c:	aa 0b       	sbc	r26, r26
    239e:	e0 e8       	ldi	r30, 0x80	; 128
    23a0:	fe ef       	ldi	r31, 0xFE	; 254
    23a2:	16 16       	cp	r1, r22
    23a4:	17 06       	cpc	r1, r23
    23a6:	e8 07       	cpc	r30, r24
    23a8:	f9 07       	cpc	r31, r25
    23aa:	c0 f0       	brcs	.+48     	; 0x23dc <__fp_cmp+0x46>
    23ac:	12 16       	cp	r1, r18
    23ae:	13 06       	cpc	r1, r19
    23b0:	e4 07       	cpc	r30, r20
    23b2:	f5 07       	cpc	r31, r21
    23b4:	98 f0       	brcs	.+38     	; 0x23dc <__fp_cmp+0x46>
    23b6:	62 1b       	sub	r22, r18
    23b8:	73 0b       	sbc	r23, r19
    23ba:	84 0b       	sbc	r24, r20
    23bc:	95 0b       	sbc	r25, r21
    23be:	39 f4       	brne	.+14     	; 0x23ce <__fp_cmp+0x38>
    23c0:	0a 26       	eor	r0, r26
    23c2:	61 f0       	breq	.+24     	; 0x23dc <__fp_cmp+0x46>
    23c4:	23 2b       	or	r18, r19
    23c6:	24 2b       	or	r18, r20
    23c8:	25 2b       	or	r18, r21
    23ca:	21 f4       	brne	.+8      	; 0x23d4 <__fp_cmp+0x3e>
    23cc:	08 95       	ret
    23ce:	0a 26       	eor	r0, r26
    23d0:	09 f4       	brne	.+2      	; 0x23d4 <__fp_cmp+0x3e>
    23d2:	a1 40       	sbci	r26, 0x01	; 1
    23d4:	a6 95       	lsr	r26
    23d6:	8f ef       	ldi	r24, 0xFF	; 255
    23d8:	81 1d       	adc	r24, r1
    23da:	81 1d       	adc	r24, r1
    23dc:	08 95       	ret

000023de <__fp_inf>:
    23de:	97 f9       	bld	r25, 7
    23e0:	9f 67       	ori	r25, 0x7F	; 127
    23e2:	80 e8       	ldi	r24, 0x80	; 128
    23e4:	70 e0       	ldi	r23, 0x00	; 0
    23e6:	60 e0       	ldi	r22, 0x00	; 0
    23e8:	08 95       	ret

000023ea <__fp_nan>:
    23ea:	9f ef       	ldi	r25, 0xFF	; 255
    23ec:	80 ec       	ldi	r24, 0xC0	; 192
    23ee:	08 95       	ret

000023f0 <__fp_negdi>:
    23f0:	90 95       	com	r25
    23f2:	80 95       	com	r24
    23f4:	70 95       	com	r23
    23f6:	60 95       	com	r22
    23f8:	50 95       	com	r21
    23fa:	40 95       	com	r20
    23fc:	30 95       	com	r19
    23fe:	21 95       	neg	r18
    2400:	3f 4f       	sbci	r19, 0xFF	; 255
    2402:	4f 4f       	sbci	r20, 0xFF	; 255
    2404:	5f 4f       	sbci	r21, 0xFF	; 255
    2406:	6f 4f       	sbci	r22, 0xFF	; 255
    2408:	7f 4f       	sbci	r23, 0xFF	; 255
    240a:	8f 4f       	sbci	r24, 0xFF	; 255
    240c:	9f 4f       	sbci	r25, 0xFF	; 255
    240e:	08 95       	ret

00002410 <__fp_pscA>:
    2410:	00 24       	eor	r0, r0
    2412:	0a 94       	dec	r0
    2414:	16 16       	cp	r1, r22
    2416:	17 06       	cpc	r1, r23
    2418:	18 06       	cpc	r1, r24
    241a:	09 06       	cpc	r0, r25
    241c:	08 95       	ret

0000241e <__fp_pscB>:
    241e:	00 24       	eor	r0, r0
    2420:	0a 94       	dec	r0
    2422:	12 16       	cp	r1, r18
    2424:	13 06       	cpc	r1, r19
    2426:	14 06       	cpc	r1, r20
    2428:	05 06       	cpc	r0, r21
    242a:	08 95       	ret

0000242c <__fp_round>:
    242c:	09 2e       	mov	r0, r25
    242e:	03 94       	inc	r0
    2430:	00 0c       	add	r0, r0
    2432:	11 f4       	brne	.+4      	; 0x2438 <__fp_round+0xc>
    2434:	88 23       	and	r24, r24
    2436:	52 f0       	brmi	.+20     	; 0x244c <__fp_round+0x20>
    2438:	bb 0f       	add	r27, r27
    243a:	40 f4       	brcc	.+16     	; 0x244c <__fp_round+0x20>
    243c:	bf 2b       	or	r27, r31
    243e:	11 f4       	brne	.+4      	; 0x2444 <__fp_round+0x18>
    2440:	60 ff       	sbrs	r22, 0
    2442:	04 c0       	rjmp	.+8      	; 0x244c <__fp_round+0x20>
    2444:	6f 5f       	subi	r22, 0xFF	; 255
    2446:	7f 4f       	sbci	r23, 0xFF	; 255
    2448:	8f 4f       	sbci	r24, 0xFF	; 255
    244a:	9f 4f       	sbci	r25, 0xFF	; 255
    244c:	08 95       	ret

0000244e <__fp_split3>:
    244e:	57 fd       	sbrc	r21, 7
    2450:	90 58       	subi	r25, 0x80	; 128
    2452:	44 0f       	add	r20, r20
    2454:	55 1f       	adc	r21, r21
    2456:	59 f0       	breq	.+22     	; 0x246e <__fp_splitA+0x10>
    2458:	5f 3f       	cpi	r21, 0xFF	; 255
    245a:	71 f0       	breq	.+28     	; 0x2478 <__fp_splitA+0x1a>
    245c:	47 95       	ror	r20

0000245e <__fp_splitA>:
    245e:	88 0f       	add	r24, r24
    2460:	97 fb       	bst	r25, 7
    2462:	99 1f       	adc	r25, r25
    2464:	61 f0       	breq	.+24     	; 0x247e <__fp_splitA+0x20>
    2466:	9f 3f       	cpi	r25, 0xFF	; 255
    2468:	79 f0       	breq	.+30     	; 0x2488 <__fp_splitA+0x2a>
    246a:	87 95       	ror	r24
    246c:	08 95       	ret
    246e:	12 16       	cp	r1, r18
    2470:	13 06       	cpc	r1, r19
    2472:	14 06       	cpc	r1, r20
    2474:	55 1f       	adc	r21, r21
    2476:	f2 cf       	rjmp	.-28     	; 0x245c <__fp_split3+0xe>
    2478:	46 95       	lsr	r20
    247a:	f1 df       	rcall	.-30     	; 0x245e <__fp_splitA>
    247c:	08 c0       	rjmp	.+16     	; 0x248e <__fp_splitA+0x30>
    247e:	16 16       	cp	r1, r22
    2480:	17 06       	cpc	r1, r23
    2482:	18 06       	cpc	r1, r24
    2484:	99 1f       	adc	r25, r25
    2486:	f1 cf       	rjmp	.-30     	; 0x246a <__fp_splitA+0xc>
    2488:	86 95       	lsr	r24
    248a:	71 05       	cpc	r23, r1
    248c:	61 05       	cpc	r22, r1
    248e:	08 94       	sec
    2490:	08 95       	ret

00002492 <__fp_zero>:
    2492:	e8 94       	clt

00002494 <__fp_szero>:
    2494:	bb 27       	eor	r27, r27
    2496:	66 27       	eor	r22, r22
    2498:	77 27       	eor	r23, r23
    249a:	cb 01       	movw	r24, r22
    249c:	97 f9       	bld	r25, 7
    249e:	08 95       	ret

000024a0 <__mulsf3>:
    24a0:	0b d0       	rcall	.+22     	; 0x24b8 <__mulsf3x>
    24a2:	c4 cf       	rjmp	.-120    	; 0x242c <__fp_round>
    24a4:	b5 df       	rcall	.-150    	; 0x2410 <__fp_pscA>
    24a6:	28 f0       	brcs	.+10     	; 0x24b2 <__mulsf3+0x12>
    24a8:	ba df       	rcall	.-140    	; 0x241e <__fp_pscB>
    24aa:	18 f0       	brcs	.+6      	; 0x24b2 <__mulsf3+0x12>
    24ac:	95 23       	and	r25, r21
    24ae:	09 f0       	breq	.+2      	; 0x24b2 <__mulsf3+0x12>
    24b0:	96 cf       	rjmp	.-212    	; 0x23de <__fp_inf>
    24b2:	9b cf       	rjmp	.-202    	; 0x23ea <__fp_nan>
    24b4:	11 24       	eor	r1, r1
    24b6:	ee cf       	rjmp	.-36     	; 0x2494 <__fp_szero>

000024b8 <__mulsf3x>:
    24b8:	ca df       	rcall	.-108    	; 0x244e <__fp_split3>
    24ba:	a0 f3       	brcs	.-24     	; 0x24a4 <__mulsf3+0x4>

000024bc <__mulsf3_pse>:
    24bc:	95 9f       	mul	r25, r21
    24be:	d1 f3       	breq	.-12     	; 0x24b4 <__mulsf3+0x14>
    24c0:	95 0f       	add	r25, r21
    24c2:	50 e0       	ldi	r21, 0x00	; 0
    24c4:	55 1f       	adc	r21, r21
    24c6:	62 9f       	mul	r22, r18
    24c8:	f0 01       	movw	r30, r0
    24ca:	72 9f       	mul	r23, r18
    24cc:	bb 27       	eor	r27, r27
    24ce:	f0 0d       	add	r31, r0
    24d0:	b1 1d       	adc	r27, r1
    24d2:	63 9f       	mul	r22, r19
    24d4:	aa 27       	eor	r26, r26
    24d6:	f0 0d       	add	r31, r0
    24d8:	b1 1d       	adc	r27, r1
    24da:	aa 1f       	adc	r26, r26
    24dc:	64 9f       	mul	r22, r20
    24de:	66 27       	eor	r22, r22
    24e0:	b0 0d       	add	r27, r0
    24e2:	a1 1d       	adc	r26, r1
    24e4:	66 1f       	adc	r22, r22
    24e6:	82 9f       	mul	r24, r18
    24e8:	22 27       	eor	r18, r18
    24ea:	b0 0d       	add	r27, r0
    24ec:	a1 1d       	adc	r26, r1
    24ee:	62 1f       	adc	r22, r18
    24f0:	73 9f       	mul	r23, r19
    24f2:	b0 0d       	add	r27, r0
    24f4:	a1 1d       	adc	r26, r1
    24f6:	62 1f       	adc	r22, r18
    24f8:	83 9f       	mul	r24, r19
    24fa:	a0 0d       	add	r26, r0
    24fc:	61 1d       	adc	r22, r1
    24fe:	22 1f       	adc	r18, r18
    2500:	74 9f       	mul	r23, r20
    2502:	33 27       	eor	r19, r19
    2504:	a0 0d       	add	r26, r0
    2506:	61 1d       	adc	r22, r1
    2508:	23 1f       	adc	r18, r19
    250a:	84 9f       	mul	r24, r20
    250c:	60 0d       	add	r22, r0
    250e:	21 1d       	adc	r18, r1
    2510:	82 2f       	mov	r24, r18
    2512:	76 2f       	mov	r23, r22
    2514:	6a 2f       	mov	r22, r26
    2516:	11 24       	eor	r1, r1
    2518:	9f 57       	subi	r25, 0x7F	; 127
    251a:	50 40       	sbci	r21, 0x00	; 0
    251c:	8a f0       	brmi	.+34     	; 0x2540 <__mulsf3_pse+0x84>
    251e:	e1 f0       	breq	.+56     	; 0x2558 <__mulsf3_pse+0x9c>
    2520:	88 23       	and	r24, r24
    2522:	4a f0       	brmi	.+18     	; 0x2536 <__mulsf3_pse+0x7a>
    2524:	ee 0f       	add	r30, r30
    2526:	ff 1f       	adc	r31, r31
    2528:	bb 1f       	adc	r27, r27
    252a:	66 1f       	adc	r22, r22
    252c:	77 1f       	adc	r23, r23
    252e:	88 1f       	adc	r24, r24
    2530:	91 50       	subi	r25, 0x01	; 1
    2532:	50 40       	sbci	r21, 0x00	; 0
    2534:	a9 f7       	brne	.-22     	; 0x2520 <__mulsf3_pse+0x64>
    2536:	9e 3f       	cpi	r25, 0xFE	; 254
    2538:	51 05       	cpc	r21, r1
    253a:	70 f0       	brcs	.+28     	; 0x2558 <__mulsf3_pse+0x9c>
    253c:	50 cf       	rjmp	.-352    	; 0x23de <__fp_inf>
    253e:	aa cf       	rjmp	.-172    	; 0x2494 <__fp_szero>
    2540:	5f 3f       	cpi	r21, 0xFF	; 255
    2542:	ec f3       	brlt	.-6      	; 0x253e <__mulsf3_pse+0x82>
    2544:	98 3e       	cpi	r25, 0xE8	; 232
    2546:	dc f3       	brlt	.-10     	; 0x253e <__mulsf3_pse+0x82>
    2548:	86 95       	lsr	r24
    254a:	77 95       	ror	r23
    254c:	67 95       	ror	r22
    254e:	b7 95       	ror	r27
    2550:	f7 95       	ror	r31
    2552:	e7 95       	ror	r30
    2554:	9f 5f       	subi	r25, 0xFF	; 255
    2556:	c1 f7       	brne	.-16     	; 0x2548 <__mulsf3_pse+0x8c>
    2558:	fe 2b       	or	r31, r30
    255a:	88 0f       	add	r24, r24
    255c:	91 1d       	adc	r25, r1
    255e:	96 95       	lsr	r25
    2560:	87 95       	ror	r24
    2562:	97 f9       	bld	r25, 7
    2564:	08 95       	ret

00002566 <UARTEnableDisableReceiver>:
	Status = TRUE;

Exit:

	return Status;
}
    2566:	88 23       	and	r24, r24
    2568:	19 f0       	breq	.+6      	; 0x2570 <UARTEnableDisableReceiver+0xa>
    256a:	81 30       	cpi	r24, 0x01	; 1
    256c:	d9 f0       	breq	.+54     	; 0x25a4 <UARTEnableDisableReceiver+0x3e>
    256e:	2e c0       	rjmp	.+92     	; 0x25cc <UARTEnableDisableReceiver+0x66>
    2570:	80 91 a6 0b 	lds	r24, 0x0BA6
    2574:	88 23       	and	r24, r24
    2576:	61 f1       	breq	.+88     	; 0x25d0 <UARTEnableDisableReceiver+0x6a>
    2578:	66 23       	and	r22, r22
    257a:	51 f0       	breq	.+20     	; 0x2590 <UARTEnableDisableReceiver+0x2a>
    257c:	e1 ec       	ldi	r30, 0xC1	; 193
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	80 81       	ld	r24, Z
    2582:	80 61       	ori	r24, 0x10	; 16
    2584:	80 83       	st	Z, r24
    2586:	80 91 a7 0b 	lds	r24, 0x0BA7
    258a:	81 11       	cpse	r24, r1
    258c:	11 c0       	rjmp	.+34     	; 0x25b0 <UARTEnableDisableReceiver+0x4a>
    258e:	22 c0       	rjmp	.+68     	; 0x25d4 <UARTEnableDisableReceiver+0x6e>
    2590:	e1 ec       	ldi	r30, 0xC1	; 193
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	8f 7e       	andi	r24, 0xEF	; 239
    2598:	80 83       	st	Z, r24
    259a:	80 91 a7 0b 	lds	r24, 0x0BA7
    259e:	81 11       	cpse	r24, r1
    25a0:	0e c0       	rjmp	.+28     	; 0x25be <UARTEnableDisableReceiver+0x58>
    25a2:	1a c0       	rjmp	.+52     	; 0x25d8 <UARTEnableDisableReceiver+0x72>
    25a4:	80 91 a7 0b 	lds	r24, 0x0BA7
    25a8:	88 23       	and	r24, r24
    25aa:	c1 f0       	breq	.+48     	; 0x25dc <UARTEnableDisableReceiver+0x76>
    25ac:	66 23       	and	r22, r22
    25ae:	39 f0       	breq	.+14     	; 0x25be <UARTEnableDisableReceiver+0x58>
    25b0:	e9 ec       	ldi	r30, 0xC9	; 201
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	80 81       	ld	r24, Z
    25b6:	80 61       	ori	r24, 0x10	; 16
    25b8:	80 83       	st	Z, r24
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	08 95       	ret
    25be:	e9 ec       	ldi	r30, 0xC9	; 201
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	8f 7e       	andi	r24, 0xEF	; 239
    25c6:	80 83       	st	Z, r24
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	08 95       	ret
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	08 95       	ret
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	08 95       	ret
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	08 95       	ret
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	08 95       	ret
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	08 95       	ret

000025e0 <UARTEnableDisableMPCM>:
    25e0:	e8 2f       	mov	r30, r24
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	ec 55       	subi	r30, 0x5C	; 92
    25e6:	f4 4f       	sbci	r31, 0xF4	; 244
    25e8:	90 81       	ld	r25, Z
    25ea:	99 23       	and	r25, r25
    25ec:	99 f1       	breq	.+102    	; 0x2654 <UARTEnableDisableMPCM+0x74>
    25ee:	88 23       	and	r24, r24
    25f0:	19 f0       	breq	.+6      	; 0x25f8 <UARTEnableDisableMPCM+0x18>
    25f2:	81 30       	cpi	r24, 0x01	; 1
    25f4:	d9 f0       	breq	.+54     	; 0x262c <UARTEnableDisableMPCM+0x4c>
    25f6:	30 c0       	rjmp	.+96     	; 0x2658 <UARTEnableDisableMPCM+0x78>
    25f8:	80 91 a6 0b 	lds	r24, 0x0BA6
    25fc:	88 23       	and	r24, r24
    25fe:	71 f1       	breq	.+92     	; 0x265c <UARTEnableDisableMPCM+0x7c>
    2600:	66 23       	and	r22, r22
    2602:	51 f0       	breq	.+20     	; 0x2618 <UARTEnableDisableMPCM+0x38>
    2604:	e0 ec       	ldi	r30, 0xC0	; 192
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	80 81       	ld	r24, Z
    260a:	81 60       	ori	r24, 0x01	; 1
    260c:	80 83       	st	Z, r24
    260e:	80 91 a7 0b 	lds	r24, 0x0BA7
    2612:	81 11       	cpse	r24, r1
    2614:	11 c0       	rjmp	.+34     	; 0x2638 <UARTEnableDisableMPCM+0x58>
    2616:	24 c0       	rjmp	.+72     	; 0x2660 <UARTEnableDisableMPCM+0x80>
    2618:	e0 ec       	ldi	r30, 0xC0	; 192
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	8e 7f       	andi	r24, 0xFE	; 254
    2620:	80 83       	st	Z, r24
    2622:	80 91 a7 0b 	lds	r24, 0x0BA7
    2626:	81 11       	cpse	r24, r1
    2628:	0e c0       	rjmp	.+28     	; 0x2646 <UARTEnableDisableMPCM+0x66>
    262a:	1c c0       	rjmp	.+56     	; 0x2664 <UARTEnableDisableMPCM+0x84>
    262c:	80 91 a7 0b 	lds	r24, 0x0BA7
    2630:	88 23       	and	r24, r24
    2632:	d1 f0       	breq	.+52     	; 0x2668 <UARTEnableDisableMPCM+0x88>
    2634:	66 23       	and	r22, r22
    2636:	39 f0       	breq	.+14     	; 0x2646 <UARTEnableDisableMPCM+0x66>
    2638:	e8 ec       	ldi	r30, 0xC8	; 200
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	80 81       	ld	r24, Z
    263e:	81 60       	ori	r24, 0x01	; 1
    2640:	80 83       	st	Z, r24
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	08 95       	ret
    2646:	e8 ec       	ldi	r30, 0xC8	; 200
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	80 81       	ld	r24, Z
    264c:	8e 7f       	andi	r24, 0xFE	; 254
    264e:	80 83       	st	Z, r24
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	08 95       	ret
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	08 95       	ret
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	08 95       	ret
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	08 95       	ret
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	08 95       	ret
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	08 95       	ret
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	08 95       	ret

0000266c <InitializeUARTTimer>:
	
	//
	// Set Timer/Counter Control Register A to normal mode of operation.
	//
	
	TCCR0A = (0x1 << WGM01);
    266c:	82 e0       	ldi	r24, 0x02	; 2
    266e:	84 bd       	out	0x24, r24	; 36
	//
	// Set Timer/Counter Control Register B to have a clock with pre-scalar = 1024.
	// The timer will expire every 32.64 ms.
	//
	
	TCCR0B = 0;
    2670:	15 bc       	out	0x25, r1	; 37
	
	//
	// Set Timer/Counter Register to 0xFF
	//
	
	TCNT0 = 0x0;
    2672:	16 bc       	out	0x26, r1	; 38
	
	//
	// Set OCR0A and OCR0B to zero
	//
	
	OCR0A = 0;
    2674:	17 bc       	out	0x27, r1	; 39
	
	OCR0B = 0;
    2676:	18 bc       	out	0x28, r1	; 40
	
	//
	// Enable Timer/Counter0 compare Interrupt
	//
	
	TIMSK0 = (0x1 << OCIE0A);
    2678:	80 93 6e 00 	sts	0x006E, r24
    267c:	08 95       	ret

0000267e <InitUARTSync>:
	TCCR0B = 0x0;								\
}

bool
InitUARTSync(UART_NUMBER UARTNumber, BAUD_RATE BaudRate, UART_MODE UARTMode)
{
    267e:	cf 93       	push	r28

	bool Status = TRUE;
	
	gIsMPCMEnabled[UARTNumber] = UARTMode;
    2680:	e8 2f       	mov	r30, r24
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	ec 55       	subi	r30, 0x5C	; 92
    2686:	f4 4f       	sbci	r31, 0xF4	; 244
    2688:	40 83       	st	Z, r20
	
	switch (UARTNumber)
    268a:	88 23       	and	r24, r24
    268c:	19 f0       	breq	.+6      	; 0x2694 <InitUARTSync+0x16>
    268e:	81 30       	cpi	r24, 0x01	; 1
    2690:	c9 f0       	breq	.+50     	; 0x26c4 <InitUARTSync+0x46>
    2692:	30 c0       	rjmp	.+96     	; 0x26f4 <InitUARTSync+0x76>
	{

		case 0:
		{
			UBRR0H = (unsigned char) (BaudRate >> 8);
    2694:	70 93 c5 00 	sts	0x00C5, r23
	
			UBRR0L = (unsigned char) BaudRate;
    2698:	60 93 c4 00 	sts	0x00C4, r22
	
			//
			// Enable Receiver and Transmitter.
			//
	
			UCSR0B = ((0x1 << TXEN0) | (0x1 << RXEN0) | (0x1 << RXCIE0));
    269c:	88 e9       	ldi	r24, 0x98	; 152
    269e:	80 93 c1 00 	sts	0x00C1, r24
			//
			// USART Control and Status Register A
			// Set MPCM mode
			//

			if (UARTMode == MULTI_PROCESSOR_COMMUNICATION_MODE)
    26a2:	41 30       	cpi	r20, 0x01	; 1
    26a4:	39 f4       	brne	.+14     	; 0x26b4 <InitUARTSync+0x36>
			{
				//
				// Asynchronous USART, Parity Disabled, Stop Bits - 1, Character Size - 9 bits.
				//
				
				UCSR0C = ((0x1 << UCSZ00) | (0x1 << UCSZ01) | (0x1 << UCSZ02));
    26a6:	86 e0       	ldi	r24, 0x06	; 6
    26a8:	80 93 c2 00 	sts	0x00C2, r24
				
				UCSR0A = (0x1 << MPCM0);
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	80 93 c0 00 	sts	0x00C0, r24
    26b2:	03 c0       	rjmp	.+6      	; 0x26ba <InitUARTSync+0x3c>
				//
				// Normal Mode
				// Asynchronous USART, Parity Disabled, Stop Bits - 1, Character Size - 8 bits.
				//
				
				UCSR0C = ((0x1 << UCSZ00) | (0x1 << UCSZ01));
    26b4:	86 e0       	ldi	r24, 0x06	; 6
    26b6:	80 93 c2 00 	sts	0x00C2, r24
			}

			gUARTInitialized[0] = TRUE;
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	80 93 a6 0b 	sts	0x0BA6, r24

bool
InitUARTSync(UART_NUMBER UARTNumber, BAUD_RATE BaudRate, UART_MODE UARTMode)
{

	bool Status = TRUE;
    26c0:	c1 e0       	ldi	r28, 0x01	; 1
				UCSR0C = ((0x1 << UCSZ00) | (0x1 << UCSZ01));
			}

			gUARTInitialized[0] = TRUE;

			break;
    26c2:	19 c0       	rjmp	.+50     	; 0x26f6 <InitUARTSync+0x78>
	
		}
		case 1:
		{

			UBRR1H = (unsigned char) (BaudRate >> 8);
    26c4:	70 93 cd 00 	sts	0x00CD, r23
	
			UBRR1L = (unsigned char) BaudRate;
    26c8:	60 93 cc 00 	sts	0x00CC, r22
	
			//
			// Enable Receiver and Transmitter.
			//
	
			UCSR1B = ((0x1 << TXEN1) | (0x1 << RXEN1) | (0x1 << RXCIE1));
    26cc:	88 e9       	ldi	r24, 0x98	; 152
    26ce:	80 93 c9 00 	sts	0x00C9, r24
			//
			// USART Control and Status Register A.
			// Set MPCM Mode
			//

			if (UARTMode == MULTI_PROCESSOR_COMMUNICATION_MODE)
    26d2:	41 30       	cpi	r20, 0x01	; 1
    26d4:	39 f4       	brne	.+14     	; 0x26e4 <InitUARTSync+0x66>
			{
				// Asynchronous USART, Parity Disabled, Stop Bits - 1, Character Size - 9 bits.
				//
				
				UCSR1C = ((0x1 << UCSZ10) | (0x1 << UCSZ11) | (0x1 << UCSZ12));
    26d6:	86 e0       	ldi	r24, 0x06	; 6
    26d8:	80 93 ca 00 	sts	0x00CA, r24
				
				UCSR1A = (0x1 << MPCM1);
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	80 93 c8 00 	sts	0x00C8, r24
    26e2:	03 c0       	rjmp	.+6      	; 0x26ea <InitUARTSync+0x6c>
				// 
				// Normal Mode
				// Asynchronous USART, Parity Disabled, Stop Bits - 1, Character Size - 8 bits.
				//
				
				UCSR1C = ((0x1 << UCSZ10) | (0x1 << UCSZ11));
    26e4:	86 e0       	ldi	r24, 0x06	; 6
    26e6:	80 93 ca 00 	sts	0x00CA, r24
			}

			gUARTInitialized[1] = TRUE;
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	80 93 a7 0b 	sts	0x0BA7, r24

bool
InitUARTSync(UART_NUMBER UARTNumber, BAUD_RATE BaudRate, UART_MODE UARTMode)
{

	bool Status = TRUE;
    26f0:	c1 e0       	ldi	r28, 0x01	; 1
				UCSR1C = ((0x1 << UCSZ10) | (0x1 << UCSZ11));
			}

			gUARTInitialized[1] = TRUE;

			break;
    26f2:	01 c0       	rjmp	.+2      	; 0x26f6 <InitUARTSync+0x78>

		}
		default:
		{
			Status = FALSE;
    26f4:	c0 e0       	ldi	r28, 0x00	; 0

			break;
		}
	}
	
	InitializeUARTTimer();
    26f6:	ba df       	rcall	.-140    	; 0x266c <InitializeUARTTimer>

	return Status;

}
    26f8:	8c 2f       	mov	r24, r28
    26fa:	cf 91       	pop	r28
    26fc:	08 95       	ret

000026fe <UARTTransmit>:
	TIMSK0 = (0x1 << OCIE0A);
}

unsigned long
UARTTransmit(UART_NUMBER UARTNumber, PVOID TransmitValue, unsigned long Length, bool IsAddress)
{
    26fe:	af 92       	push	r10
    2700:	bf 92       	push	r11
    2702:	cf 92       	push	r12
    2704:	df 92       	push	r13
    2706:	ef 92       	push	r14
    2708:	ff 92       	push	r15
    270a:	0f 93       	push	r16
    270c:	1f 93       	push	r17
    270e:	cf 93       	push	r28
    2710:	df 93       	push	r29
    2712:	5b 01       	movw	r10, r22
	unsigned char *Value = (unsigned char *) TransmitValue;
	
	unsigned long IndexI = 0;
	
	switch (UARTNumber)
    2714:	88 23       	and	r24, r24
    2716:	19 f0       	breq	.+6      	; 0x271e <UARTTransmit+0x20>
    2718:	81 30       	cpi	r24, 0x01	; 1
    271a:	c1 f1       	breq	.+112    	; 0x278c <UARTTransmit+0x8e>
    271c:	73 c0       	rjmp	.+230    	; 0x2804 <UARTTransmit+0x106>
	{
		case 0:
		{
			if (!gUARTInitialized[0])
    271e:	80 91 a6 0b 	lds	r24, 0x0BA6
    2722:	88 23       	and	r24, r24
    2724:	09 f4       	brne	.+2      	; 0x2728 <UARTTransmit+0x2a>
    2726:	72 c0       	rjmp	.+228    	; 0x280c <UARTTransmit+0x10e>
			{
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
    2728:	21 15       	cp	r18, r1
    272a:	31 05       	cpc	r19, r1
    272c:	41 05       	cpc	r20, r1
    272e:	51 05       	cpc	r21, r1
    2730:	09 f4       	brne	.+2      	; 0x2734 <UARTTransmit+0x36>
    2732:	73 c0       	rjmp	.+230    	; 0x281a <UARTTransmit+0x11c>
    2734:	c1 2c       	mov	r12, r1
    2736:	d1 2c       	mov	r13, r1
    2738:	76 01       	movw	r14, r12
			{
				while (!(UCSR0A & (1 << UDRE0)));
    273a:	e0 ec       	ldi	r30, 0xC0	; 192
    273c:	f0 e0       	ldi	r31, 0x00	; 0

				//
				// Check if bit 9 is enabled.
				//

				if (gIsMPCMEnabled[0]) 
    273e:	84 ea       	ldi	r24, 0xA4	; 164
    2740:	9b e0       	ldi	r25, 0x0B	; 11
					{
						UCSR0B |= (0x1 << TXB80);
					}
					else
					{
						UCSR0B &= ~(0x1 << TXB80);
    2742:	61 ec       	ldi	r22, 0xC1	; 193
    2744:	70 e0       	ldi	r23, 0x00	; 0

				//
				// Transmit the value
				//

				UDR0 = *Value;
    2746:	c6 ec       	ldi	r28, 0xC6	; 198
    2748:	d0 e0       	ldi	r29, 0x00	; 0
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
			{
				while (!(UCSR0A & (1 << UDRE0)));
    274a:	10 81       	ld	r17, Z
    274c:	15 ff       	sbrs	r17, 5
    274e:	fd cf       	rjmp	.-6      	; 0x274a <UARTTransmit+0x4c>

				//
				// Check if bit 9 is enabled.
				//

				if (gIsMPCMEnabled[0]) 
    2750:	dc 01       	movw	r26, r24
    2752:	1c 91       	ld	r17, X
    2754:	11 23       	and	r17, r17
    2756:	59 f0       	breq	.+22     	; 0x276e <UARTTransmit+0x70>
				{
					if (IsAddress)
    2758:	00 23       	and	r16, r16
    275a:	29 f0       	breq	.+10     	; 0x2766 <UARTTransmit+0x68>
					{
						UCSR0B |= (0x1 << TXB80);
    275c:	db 01       	movw	r26, r22
    275e:	1c 91       	ld	r17, X
    2760:	11 60       	ori	r17, 0x01	; 1
    2762:	1c 93       	st	X, r17
    2764:	04 c0       	rjmp	.+8      	; 0x276e <UARTTransmit+0x70>
					}
					else
					{
						UCSR0B &= ~(0x1 << TXB80);
    2766:	db 01       	movw	r26, r22
    2768:	1c 91       	ld	r17, X
    276a:	1e 7f       	andi	r17, 0xFE	; 254
    276c:	1c 93       	st	X, r17

				//
				// Transmit the value
				//

				UDR0 = *Value;
    276e:	d5 01       	movw	r26, r10
    2770:	1d 91       	ld	r17, X+
    2772:	5d 01       	movw	r10, r26
    2774:	18 83       	st	Y, r17
			if (!gUARTInitialized[0])
			{
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
    2776:	bf ef       	ldi	r27, 0xFF	; 255
    2778:	cb 1a       	sub	r12, r27
    277a:	db 0a       	sbc	r13, r27
    277c:	eb 0a       	sbc	r14, r27
    277e:	fb 0a       	sbc	r15, r27
    2780:	c2 16       	cp	r12, r18
    2782:	d3 06       	cpc	r13, r19
    2784:	e4 06       	cpc	r14, r20
    2786:	f5 06       	cpc	r15, r21
    2788:	01 f7       	brne	.-64     	; 0x274a <UARTTransmit+0x4c>
    278a:	47 c0       	rjmp	.+142    	; 0x281a <UARTTransmit+0x11c>
			break;

		}
		case 1:
		{
			if (!gUARTInitialized[1])
    278c:	80 91 a7 0b 	lds	r24, 0x0BA7
    2790:	88 23       	and	r24, r24
    2792:	09 f4       	brne	.+2      	; 0x2796 <UARTTransmit+0x98>
    2794:	3f c0       	rjmp	.+126    	; 0x2814 <UARTTransmit+0x116>
			{
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
    2796:	21 15       	cp	r18, r1
    2798:	31 05       	cpc	r19, r1
    279a:	41 05       	cpc	r20, r1
    279c:	51 05       	cpc	r21, r1
    279e:	e9 f1       	breq	.+122    	; 0x281a <UARTTransmit+0x11c>
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	dc 01       	movw	r26, r24
			{

				while (!(UCSR1A & (1 << UDRE1)));
    27a6:	e8 ec       	ldi	r30, 0xC8	; 200
    27a8:	f0 e0       	ldi	r31, 0x00	; 0

				//
				// Check if bit 9 is enabled.
				//

				if (gIsMPCMEnabled[1])
    27aa:	0f 2e       	mov	r0, r31
    27ac:	f5 ea       	ldi	r31, 0xA5	; 165
    27ae:	ef 2e       	mov	r14, r31
    27b0:	fb e0       	ldi	r31, 0x0B	; 11
    27b2:	ff 2e       	mov	r15, r31
    27b4:	f0 2d       	mov	r31, r0
					{
						UCSR1B |= (0x1 << TXB81);
					}
					else
					{
						UCSR1B &= ~(0x1 << TXB81);
    27b6:	0f 2e       	mov	r0, r31
    27b8:	f9 ec       	ldi	r31, 0xC9	; 201
    27ba:	cf 2e       	mov	r12, r31
    27bc:	d1 2c       	mov	r13, r1
    27be:	f0 2d       	mov	r31, r0

				//
				// Transmit the value
				//

				UDR1 = *Value;
    27c0:	6e ec       	ldi	r22, 0xCE	; 206
    27c2:	70 e0       	ldi	r23, 0x00	; 0
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
			{

				while (!(UCSR1A & (1 << UDRE1)));
    27c4:	10 81       	ld	r17, Z
    27c6:	15 ff       	sbrs	r17, 5
    27c8:	fd cf       	rjmp	.-6      	; 0x27c4 <UARTTransmit+0xc6>

				//
				// Check if bit 9 is enabled.
				//

				if (gIsMPCMEnabled[1])
    27ca:	e7 01       	movw	r28, r14
    27cc:	18 81       	ld	r17, Y
    27ce:	11 23       	and	r17, r17
    27d0:	59 f0       	breq	.+22     	; 0x27e8 <UARTTransmit+0xea>
				{
					if (IsAddress)
    27d2:	00 23       	and	r16, r16
    27d4:	29 f0       	breq	.+10     	; 0x27e0 <UARTTransmit+0xe2>
					{
						UCSR1B |= (0x1 << TXB81);
    27d6:	e6 01       	movw	r28, r12
    27d8:	18 81       	ld	r17, Y
    27da:	11 60       	ori	r17, 0x01	; 1
    27dc:	18 83       	st	Y, r17
    27de:	04 c0       	rjmp	.+8      	; 0x27e8 <UARTTransmit+0xea>
					}
					else
					{
						UCSR1B &= ~(0x1 << TXB81);
    27e0:	e6 01       	movw	r28, r12
    27e2:	18 81       	ld	r17, Y
    27e4:	1e 7f       	andi	r17, 0xFE	; 254
    27e6:	18 83       	st	Y, r17

				//
				// Transmit the value
				//

				UDR1 = *Value;
    27e8:	e5 01       	movw	r28, r10
    27ea:	19 91       	ld	r17, Y+
    27ec:	5e 01       	movw	r10, r28
    27ee:	eb 01       	movw	r28, r22
    27f0:	18 83       	st	Y, r17
			if (!gUARTInitialized[1])
			{
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
    27f2:	01 96       	adiw	r24, 0x01	; 1
    27f4:	a1 1d       	adc	r26, r1
    27f6:	b1 1d       	adc	r27, r1
    27f8:	82 17       	cp	r24, r18
    27fa:	93 07       	cpc	r25, r19
    27fc:	a4 07       	cpc	r26, r20
    27fe:	b5 07       	cpc	r27, r21
    2800:	09 f7       	brne	.-62     	; 0x27c4 <UARTTransmit+0xc6>
    2802:	0b c0       	rjmp	.+22     	; 0x281a <UARTTransmit+0x11c>
unsigned long
UARTTransmit(UART_NUMBER UARTNumber, PVOID TransmitValue, unsigned long Length, bool IsAddress)
{
	unsigned char *Value = (unsigned char *) TransmitValue;
	
	unsigned long IndexI = 0;
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	a9 01       	movw	r20, r18
    280a:	07 c0       	rjmp	.+14     	; 0x281a <UARTTransmit+0x11c>
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	a9 01       	movw	r20, r18
    2812:	03 c0       	rjmp	.+6      	; 0x281a <UARTTransmit+0x11c>
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	a9 01       	movw	r20, r18

Exit:

	return IndexI;

}
    281a:	ca 01       	movw	r24, r20
    281c:	b9 01       	movw	r22, r18
    281e:	df 91       	pop	r29
    2820:	cf 91       	pop	r28
    2822:	1f 91       	pop	r17
    2824:	0f 91       	pop	r16
    2826:	ff 90       	pop	r15
    2828:	ef 90       	pop	r14
    282a:	df 90       	pop	r13
    282c:	cf 90       	pop	r12
    282e:	bf 90       	pop	r11
    2830:	af 90       	pop	r10
    2832:	08 95       	ret

00002834 <UARTTransmitAddress>:

}

unsigned long
UARTTransmitAddress(UART_NUMBER UARTNumber, unsigned char Address)
{
    2834:	0f 93       	push	r16
    2836:	cf 93       	push	r28
    2838:	df 93       	push	r29
    283a:	1f 92       	push	r1
    283c:	cd b7       	in	r28, 0x3d	; 61
    283e:	de b7       	in	r29, 0x3e	; 62
    2840:	69 83       	std	Y+1, r22	; 0x01
	//
	// Check if bit 9 is enabled
	//
	
	if (!gIsMPCMEnabled[UARTNumber])
    2842:	e8 2f       	mov	r30, r24
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	ec 55       	subi	r30, 0x5C	; 92
    2848:	f4 4f       	sbci	r31, 0xF4	; 244
    284a:	90 81       	ld	r25, Z
    284c:	99 23       	and	r25, r25
    284e:	51 f0       	breq	.+20     	; 0x2864 <UARTTransmitAddress+0x30>
	{
		return 0;
	}
	
	return UARTTransmit(UARTNumber, &Address, sizeof(unsigned char), TRUE);
    2850:	01 e0       	ldi	r16, 0x01	; 1
    2852:	21 e0       	ldi	r18, 0x01	; 1
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e0       	ldi	r20, 0x00	; 0
    2858:	50 e0       	ldi	r21, 0x00	; 0
    285a:	be 01       	movw	r22, r28
    285c:	6f 5f       	subi	r22, 0xFF	; 255
    285e:	7f 4f       	sbci	r23, 0xFF	; 255
    2860:	4e df       	rcall	.-356    	; 0x26fe <UARTTransmit>
    2862:	03 c0       	rjmp	.+6      	; 0x286a <UARTTransmitAddress+0x36>
	// Check if bit 9 is enabled
	//
	
	if (!gIsMPCMEnabled[UARTNumber])
	{
		return 0;
    2864:	60 e0       	ldi	r22, 0x00	; 0
    2866:	70 e0       	ldi	r23, 0x00	; 0
    2868:	cb 01       	movw	r24, r22
	}
	
	return UARTTransmit(UARTNumber, &Address, sizeof(unsigned char), TRUE);
}
    286a:	0f 90       	pop	r0
    286c:	df 91       	pop	r29
    286e:	cf 91       	pop	r28
    2870:	0f 91       	pop	r16
    2872:	08 95       	ret

00002874 <UARTTransmitSync>:

unsigned long
UARTTransmitSync(UART_NUMBER UARTNumber, PVOID TransmitValue, unsigned long Length)
{
    2874:	0f 93       	push	r16
	return UARTTransmit(UARTNumber, TransmitValue, Length, FALSE);
    2876:	00 e0       	ldi	r16, 0x00	; 0
    2878:	42 df       	rcall	.-380    	; 0x26fe <UARTTransmit>
}
    287a:	0f 91       	pop	r16
    287c:	08 95       	ret

0000287e <UARTReceive>:

}

unsigned long
UARTReceive(UART_NUMBER UARTNumber, PVOID ReceiveValue, unsigned long Length, unsigned char WaitTimeInMs)
{
    287e:	2f 92       	push	r2
    2880:	3f 92       	push	r3
    2882:	4f 92       	push	r4
    2884:	5f 92       	push	r5
    2886:	6f 92       	push	r6
    2888:	7f 92       	push	r7
    288a:	8f 92       	push	r8
    288c:	9f 92       	push	r9
    288e:	af 92       	push	r10
    2890:	bf 92       	push	r11
    2892:	cf 92       	push	r12
    2894:	df 92       	push	r13
    2896:	ef 92       	push	r14
    2898:	ff 92       	push	r15
    289a:	0f 93       	push	r16
    289c:	1f 93       	push	r17
    289e:	cf 93       	push	r28
    28a0:	df 93       	push	r29
    28a2:	1b 01       	movw	r2, r22
    28a4:	49 01       	movw	r8, r18
    28a6:	5a 01       	movw	r10, r20

	unsigned char BitNine;

	unsigned long IndexI = 0;
	
	if (WaitTimeInMs > MAX_WAIT_TIME)
    28a8:	01 32       	cpi	r16, 0x21	; 33
    28aa:	08 f0       	brcs	.+2      	; 0x28ae <UARTReceive+0x30>
    28ac:	a0 c0       	rjmp	.+320    	; 0x29ee <UARTReceive+0x170>
	{
		goto Exit;
	}

	switch (UARTNumber)
    28ae:	88 23       	and	r24, r24
    28b0:	21 f0       	breq	.+8      	; 0x28ba <UARTReceive+0x3c>
    28b2:	81 30       	cpi	r24, 0x01	; 1
    28b4:	09 f4       	brne	.+2      	; 0x28b8 <UARTReceive+0x3a>
    28b6:	4e c0       	rjmp	.+156    	; 0x2954 <UARTReceive+0xd6>
    28b8:	9e c0       	rjmp	.+316    	; 0x29f6 <UARTReceive+0x178>
	{
		case 0:
		{

			if (!gUARTInitialized[0])
    28ba:	80 91 a6 0b 	lds	r24, 0x0BA6
    28be:	88 23       	and	r24, r24
    28c0:	09 f4       	brne	.+2      	; 0x28c4 <UARTReceive+0x46>
    28c2:	9d c0       	rjmp	.+314    	; 0x29fe <UARTReceive+0x180>
			{
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
    28c4:	21 15       	cp	r18, r1
    28c6:	31 05       	cpc	r19, r1
    28c8:	41 05       	cpc	r20, r1
    28ca:	51 05       	cpc	r21, r1
    28cc:	09 f4       	brne	.+2      	; 0x28d0 <UARTReceive+0x52>
    28ce:	9b c0       	rjmp	.+310    	; 0x2a06 <UARTReceive+0x188>
    28d0:	c1 2c       	mov	r12, r1
    28d2:	d1 2c       	mov	r13, r1
    28d4:	76 01       	movw	r14, r12
				
					StopUARTTimer();
				}
				else
				{
					while (!(UCSR0A & (1 << RXC0)));
    28d6:	c0 ec       	ldi	r28, 0xC0	; 192
    28d8:	d0 e0       	ldi	r29, 0x00	; 0
			{

				if(WaitTimeInMs > 0)
				{
					
					StartUARTTimer(WaitTimeInMs);
    28da:	15 e0       	ldi	r17, 0x05	; 5
    28dc:	40 2e       	mov	r4, r16
    28de:	51 2c       	mov	r5, r1
    28e0:	61 2c       	mov	r6, r1
    28e2:	71 2c       	mov	r7, r1
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
			{

				if(WaitTimeInMs > 0)
    28e4:	00 23       	and	r16, r16
    28e6:	d1 f0       	breq	.+52     	; 0x291c <UARTReceive+0x9e>
				{
					
					StartUARTTimer(WaitTimeInMs);
    28e8:	10 92 c2 0b 	sts	0x0BC2, r1
    28ec:	15 bd       	out	0x25, r17	; 37
    28ee:	c3 01       	movw	r24, r6
    28f0:	b2 01       	movw	r22, r4
    28f2:	d8 dc       	rcall	.-1616   	; 0x22a4 <__floatsisf>
    28f4:	2a e9       	ldi	r18, 0x9A	; 154
    28f6:	39 e9       	ldi	r19, 0x99	; 153
    28f8:	49 ef       	ldi	r20, 0xF9	; 249
    28fa:	50 e4       	ldi	r21, 0x40	; 64
    28fc:	d1 dd       	rcall	.-1118   	; 0x24a0 <__mulsf3>
    28fe:	83 d1       	rcall	.+774    	; 0x2c06 <__fixsfsi>
    2900:	67 bd       	out	0x27, r22	; 39
    2902:	16 bc       	out	0x26, r1	; 38

					while (!(UCSR0A & (1 << RXC0)))
					{
						if (gUARTTimerTriggered)
    2904:	90 91 c2 0b 	lds	r25, 0x0BC2
				if(WaitTimeInMs > 0)
				{
					
					StartUARTTimer(WaitTimeInMs);

					while (!(UCSR0A & (1 << RXC0)))
    2908:	04 c0       	rjmp	.+8      	; 0x2912 <UARTReceive+0x94>
					{
						if (gUARTTimerTriggered)
    290a:	99 23       	and	r25, r25
    290c:	11 f0       	breq	.+4      	; 0x2912 <UARTReceive+0x94>
						{
							StopUARTTimer();
    290e:	15 bc       	out	0x25, r1	; 37
						
							goto Exit;
    2910:	85 c0       	rjmp	.+266    	; 0x2a1c <UARTReceive+0x19e>
				if(WaitTimeInMs > 0)
				{
					
					StartUARTTimer(WaitTimeInMs);

					while (!(UCSR0A & (1 << RXC0)))
    2912:	88 81       	ld	r24, Y
    2914:	88 23       	and	r24, r24
    2916:	cc f7       	brge	.-14     	; 0x290a <UARTReceive+0x8c>
						
							goto Exit;
						}
					}
				
					StopUARTTimer();
    2918:	15 bc       	out	0x25, r1	; 37
    291a:	03 c0       	rjmp	.+6      	; 0x2922 <UARTReceive+0xa4>
				}
				else
				{
					while (!(UCSR0A & (1 << RXC0)));
    291c:	88 81       	ld	r24, Y
    291e:	88 23       	and	r24, r24
    2920:	ec f7       	brge	.-6      	; 0x291c <UARTReceive+0x9e>

				//
				// Receive the value
				//

				if (gIsMPCMEnabled[0])
    2922:	e4 ea       	ldi	r30, 0xA4	; 164
    2924:	fb e0       	ldi	r31, 0x0B	; 11
    2926:	80 81       	ld	r24, Z
    2928:	88 23       	and	r24, r24
    292a:	19 f0       	breq	.+6      	; 0x2932 <UARTReceive+0xb4>
				{
					BitNine = UCSR0B & (0x1 << RXB80);
    292c:	e1 ec       	ldi	r30, 0xC1	; 193
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
						
					BitNine = BitNine >> RXB80;
				}

				*Value = UDR0;
    2932:	e6 ec       	ldi	r30, 0xC6	; 198
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	80 81       	ld	r24, Z
    2938:	f1 01       	movw	r30, r2
    293a:	81 93       	st	Z+, r24
    293c:	1f 01       	movw	r2, r30
			if (!gUARTInitialized[0])
			{
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
    293e:	ff ef       	ldi	r31, 0xFF	; 255
    2940:	cf 1a       	sub	r12, r31
    2942:	df 0a       	sbc	r13, r31
    2944:	ef 0a       	sbc	r14, r31
    2946:	ff 0a       	sbc	r15, r31
    2948:	c8 14       	cp	r12, r8
    294a:	d9 04       	cpc	r13, r9
    294c:	ea 04       	cpc	r14, r10
    294e:	fb 04       	cpc	r15, r11
    2950:	49 f6       	brne	.-110    	; 0x28e4 <UARTReceive+0x66>
    2952:	64 c0       	rjmp	.+200    	; 0x2a1c <UARTReceive+0x19e>
			break;
		}
		case 1:
		{

			if (!gUARTInitialized[1])
    2954:	80 91 a7 0b 	lds	r24, 0x0BA7
    2958:	88 23       	and	r24, r24
    295a:	09 f4       	brne	.+2      	; 0x295e <UARTReceive+0xe0>
    295c:	58 c0       	rjmp	.+176    	; 0x2a0e <UARTReceive+0x190>
			{
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
    295e:	21 15       	cp	r18, r1
    2960:	31 05       	cpc	r19, r1
    2962:	41 05       	cpc	r20, r1
    2964:	51 05       	cpc	r21, r1
    2966:	09 f4       	brne	.+2      	; 0x296a <UARTReceive+0xec>
    2968:	56 c0       	rjmp	.+172    	; 0x2a16 <UARTReceive+0x198>
    296a:	c1 2c       	mov	r12, r1
    296c:	d1 2c       	mov	r13, r1
    296e:	76 01       	movw	r14, r12

					StopUARTTimer();
				}
				else
				{
					while (!(UCSR1A & (1 << RXC1)));
    2970:	c8 ec       	ldi	r28, 0xC8	; 200
    2972:	d0 e0       	ldi	r29, 0x00	; 0
			{
				
				if (WaitTimeInMs > 0)
				{
					
					StartUARTTimer(WaitTimeInMs);
    2974:	15 e0       	ldi	r17, 0x05	; 5
    2976:	40 2e       	mov	r4, r16
    2978:	51 2c       	mov	r5, r1
    297a:	61 2c       	mov	r6, r1
    297c:	71 2c       	mov	r7, r1
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
			{
				
				if (WaitTimeInMs > 0)
    297e:	00 23       	and	r16, r16
    2980:	d1 f0       	breq	.+52     	; 0x29b6 <UARTReceive+0x138>
				{
					
					StartUARTTimer(WaitTimeInMs);
    2982:	10 92 c2 0b 	sts	0x0BC2, r1
    2986:	15 bd       	out	0x25, r17	; 37
    2988:	c3 01       	movw	r24, r6
    298a:	b2 01       	movw	r22, r4
    298c:	8b dc       	rcall	.-1770   	; 0x22a4 <__floatsisf>
    298e:	2a e9       	ldi	r18, 0x9A	; 154
    2990:	39 e9       	ldi	r19, 0x99	; 153
    2992:	49 ef       	ldi	r20, 0xF9	; 249
    2994:	50 e4       	ldi	r21, 0x40	; 64
    2996:	84 dd       	rcall	.-1272   	; 0x24a0 <__mulsf3>
    2998:	36 d1       	rcall	.+620    	; 0x2c06 <__fixsfsi>
    299a:	67 bd       	out	0x27, r22	; 39
    299c:	16 bc       	out	0x26, r1	; 38

					while (!(UCSR1A & (1 << RXC1)))
					{
						if (gUARTTimerTriggered)
    299e:	90 91 c2 0b 	lds	r25, 0x0BC2
				if (WaitTimeInMs > 0)
				{
					
					StartUARTTimer(WaitTimeInMs);

					while (!(UCSR1A & (1 << RXC1)))
    29a2:	04 c0       	rjmp	.+8      	; 0x29ac <UARTReceive+0x12e>
					{
						if (gUARTTimerTriggered)
    29a4:	99 23       	and	r25, r25
    29a6:	11 f0       	breq	.+4      	; 0x29ac <UARTReceive+0x12e>
						{
							StopUARTTimer();
    29a8:	15 bc       	out	0x25, r1	; 37
						
							goto Exit;
    29aa:	38 c0       	rjmp	.+112    	; 0x2a1c <UARTReceive+0x19e>
				if (WaitTimeInMs > 0)
				{
					
					StartUARTTimer(WaitTimeInMs);

					while (!(UCSR1A & (1 << RXC1)))
    29ac:	88 81       	ld	r24, Y
    29ae:	88 23       	and	r24, r24
    29b0:	cc f7       	brge	.-14     	; 0x29a4 <UARTReceive+0x126>
						
							goto Exit;
						}
					}

					StopUARTTimer();
    29b2:	15 bc       	out	0x25, r1	; 37
    29b4:	03 c0       	rjmp	.+6      	; 0x29bc <UARTReceive+0x13e>
				}
				else
				{
					while (!(UCSR1A & (1 << RXC1)));
    29b6:	88 81       	ld	r24, Y
    29b8:	88 23       	and	r24, r24
    29ba:	ec f7       	brge	.-6      	; 0x29b6 <UARTReceive+0x138>

				//
				// Receive the value
				//

				if (gIsMPCMEnabled[1])
    29bc:	e5 ea       	ldi	r30, 0xA5	; 165
    29be:	fb e0       	ldi	r31, 0x0B	; 11
    29c0:	80 81       	ld	r24, Z
    29c2:	88 23       	and	r24, r24
    29c4:	19 f0       	breq	.+6      	; 0x29cc <UARTReceive+0x14e>
				{
					BitNine = UCSR1B & (0x1 << RXB81);
    29c6:	e9 ec       	ldi	r30, 0xC9	; 201
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	80 81       	ld	r24, Z
						
					BitNine = BitNine >> RXB81;
				}

				*Value = UDR1;
    29cc:	ee ec       	ldi	r30, 0xCE	; 206
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	80 81       	ld	r24, Z
    29d2:	f1 01       	movw	r30, r2
    29d4:	81 93       	st	Z+, r24
    29d6:	1f 01       	movw	r2, r30
			if (!gUARTInitialized[1])
			{
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
    29d8:	ff ef       	ldi	r31, 0xFF	; 255
    29da:	cf 1a       	sub	r12, r31
    29dc:	df 0a       	sbc	r13, r31
    29de:	ef 0a       	sbc	r14, r31
    29e0:	ff 0a       	sbc	r15, r31
    29e2:	c8 14       	cp	r12, r8
    29e4:	d9 04       	cpc	r13, r9
    29e6:	ea 04       	cpc	r14, r10
    29e8:	fb 04       	cpc	r15, r11
    29ea:	49 f6       	brne	.-110    	; 0x297e <UARTReceive+0x100>
    29ec:	17 c0       	rjmp	.+46     	; 0x2a1c <UARTReceive+0x19e>
	
	unsigned char *Value = (unsigned char *) ReceiveValue;

	unsigned char BitNine;

	unsigned long IndexI = 0;
    29ee:	c1 2c       	mov	r12, r1
    29f0:	d1 2c       	mov	r13, r1
    29f2:	76 01       	movw	r14, r12
    29f4:	13 c0       	rjmp	.+38     	; 0x2a1c <UARTReceive+0x19e>
    29f6:	c1 2c       	mov	r12, r1
    29f8:	d1 2c       	mov	r13, r1
    29fa:	76 01       	movw	r14, r12
    29fc:	0f c0       	rjmp	.+30     	; 0x2a1c <UARTReceive+0x19e>
    29fe:	c1 2c       	mov	r12, r1
    2a00:	d1 2c       	mov	r13, r1
    2a02:	76 01       	movw	r14, r12
    2a04:	0b c0       	rjmp	.+22     	; 0x2a1c <UARTReceive+0x19e>
			if (!gUARTInitialized[0])
			{
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
    2a06:	c1 2c       	mov	r12, r1
    2a08:	d1 2c       	mov	r13, r1
    2a0a:	76 01       	movw	r14, r12
    2a0c:	07 c0       	rjmp	.+14     	; 0x2a1c <UARTReceive+0x19e>
	
	unsigned char *Value = (unsigned char *) ReceiveValue;

	unsigned char BitNine;

	unsigned long IndexI = 0;
    2a0e:	c1 2c       	mov	r12, r1
    2a10:	d1 2c       	mov	r13, r1
    2a12:	76 01       	movw	r14, r12
    2a14:	03 c0       	rjmp	.+6      	; 0x2a1c <UARTReceive+0x19e>
			if (!gUARTInitialized[1])
			{
				goto Exit;
			}

			for (IndexI = 0; IndexI < Length; IndexI++)
    2a16:	c1 2c       	mov	r12, r1
    2a18:	d1 2c       	mov	r13, r1
    2a1a:	76 01       	movw	r14, r12

Exit:

	return IndexI;

}
    2a1c:	c7 01       	movw	r24, r14
    2a1e:	b6 01       	movw	r22, r12
    2a20:	df 91       	pop	r29
    2a22:	cf 91       	pop	r28
    2a24:	1f 91       	pop	r17
    2a26:	0f 91       	pop	r16
    2a28:	ff 90       	pop	r15
    2a2a:	ef 90       	pop	r14
    2a2c:	df 90       	pop	r13
    2a2e:	cf 90       	pop	r12
    2a30:	bf 90       	pop	r11
    2a32:	af 90       	pop	r10
    2a34:	9f 90       	pop	r9
    2a36:	8f 90       	pop	r8
    2a38:	7f 90       	pop	r7
    2a3a:	6f 90       	pop	r6
    2a3c:	5f 90       	pop	r5
    2a3e:	4f 90       	pop	r4
    2a40:	3f 90       	pop	r3
    2a42:	2f 90       	pop	r2
    2a44:	08 95       	ret

00002a46 <UARTReceiveASync>:
	return UARTTransmit(UARTNumber, TransmitValue, Length, FALSE);
}

unsigned long
UARTReceiveASync(UART_NUMBER UARTNumber, PVOID ReceiveValue, unsigned long Length, unsigned char WaitTimeInMs)
{
    2a46:	0f 93       	push	r16
	return UARTReceive(UARTNumber, ReceiveValue, Length, WaitTimeInMs);
    2a48:	1a df       	rcall	.-460    	; 0x287e <UARTReceive>
}
    2a4a:	0f 91       	pop	r16
    2a4c:	08 95       	ret

00002a4e <UARTReceiveSync>:

unsigned long
UARTReceiveSync(UART_NUMBER UARTNumber, PVOID ReceiveValue, unsigned long Length)
{
    2a4e:	0f 93       	push	r16
	return UARTReceive(UARTNumber, ReceiveValue, Length, 0);
    2a50:	00 e0       	ldi	r16, 0x00	; 0
    2a52:	15 df       	rcall	.-470    	; 0x287e <UARTReceive>
}
    2a54:	0f 91       	pop	r16
    2a56:	08 95       	ret

00002a58 <__vector_16>:
	return IndexI;

}

ISR(TIMER0_COMPA_vect)
{
    2a58:	1f 92       	push	r1
    2a5a:	0f 92       	push	r0
    2a5c:	0f b6       	in	r0, 0x3f	; 63
    2a5e:	0f 92       	push	r0
    2a60:	11 24       	eor	r1, r1
    2a62:	8f 93       	push	r24
	gUARTTimerTriggered = TRUE;
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	80 93 c2 0b 	sts	0x0BC2, r24
}
    2a6a:	8f 91       	pop	r24
    2a6c:	0f 90       	pop	r0
    2a6e:	0f be       	out	0x3f, r0	; 63
    2a70:	0f 90       	pop	r0
    2a72:	1f 90       	pop	r1
    2a74:	18 95       	reti

00002a76 <__vector_20>:

ISR(USART0_RX_vect)
{
    2a76:	1f 92       	push	r1
    2a78:	0f 92       	push	r0
    2a7a:	0f b6       	in	r0, 0x3f	; 63
    2a7c:	0f 92       	push	r0
    2a7e:	11 24       	eor	r1, r1
    2a80:	0b b6       	in	r0, 0x3b	; 59
    2a82:	0f 92       	push	r0
    2a84:	2f 93       	push	r18
    2a86:	3f 93       	push	r19
    2a88:	4f 93       	push	r20
    2a8a:	5f 93       	push	r21
    2a8c:	6f 93       	push	r22
    2a8e:	7f 93       	push	r23
    2a90:	8f 93       	push	r24
    2a92:	9f 93       	push	r25
    2a94:	af 93       	push	r26
    2a96:	bf 93       	push	r27
    2a98:	ef 93       	push	r30
    2a9a:	ff 93       	push	r31
	if(gRCICallback0 != NULL)
    2a9c:	e0 91 b2 0b 	lds	r30, 0x0BB2
    2aa0:	f0 91 b3 0b 	lds	r31, 0x0BB3
    2aa4:	30 97       	sbiw	r30, 0x00	; 0
    2aa6:	31 f0       	breq	.+12     	; 0x2ab4 <__vector_20+0x3e>
	{
		gRCICallback0(UART_ZERO, gRCICallbackContext0);
    2aa8:	60 91 be 0b 	lds	r22, 0x0BBE
    2aac:	70 91 bf 0b 	lds	r23, 0x0BBF
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	09 95       	icall
	}
}
    2ab4:	ff 91       	pop	r31
    2ab6:	ef 91       	pop	r30
    2ab8:	bf 91       	pop	r27
    2aba:	af 91       	pop	r26
    2abc:	9f 91       	pop	r25
    2abe:	8f 91       	pop	r24
    2ac0:	7f 91       	pop	r23
    2ac2:	6f 91       	pop	r22
    2ac4:	5f 91       	pop	r21
    2ac6:	4f 91       	pop	r20
    2ac8:	3f 91       	pop	r19
    2aca:	2f 91       	pop	r18
    2acc:	0f 90       	pop	r0
    2ace:	0b be       	out	0x3b, r0	; 59
    2ad0:	0f 90       	pop	r0
    2ad2:	0f be       	out	0x3f, r0	; 63
    2ad4:	0f 90       	pop	r0
    2ad6:	1f 90       	pop	r1
    2ad8:	18 95       	reti

00002ada <__vector_28>:

ISR(USART1_RX_vect)
{
    2ada:	1f 92       	push	r1
    2adc:	0f 92       	push	r0
    2ade:	0f b6       	in	r0, 0x3f	; 63
    2ae0:	0f 92       	push	r0
    2ae2:	11 24       	eor	r1, r1
    2ae4:	0b b6       	in	r0, 0x3b	; 59
    2ae6:	0f 92       	push	r0
    2ae8:	2f 93       	push	r18
    2aea:	3f 93       	push	r19
    2aec:	4f 93       	push	r20
    2aee:	5f 93       	push	r21
    2af0:	6f 93       	push	r22
    2af2:	7f 93       	push	r23
    2af4:	8f 93       	push	r24
    2af6:	9f 93       	push	r25
    2af8:	af 93       	push	r26
    2afa:	bf 93       	push	r27
    2afc:	ef 93       	push	r30
    2afe:	ff 93       	push	r31
	if(gRCICallback1 != NULL)
    2b00:	e0 91 b8 0b 	lds	r30, 0x0BB8
    2b04:	f0 91 b9 0b 	lds	r31, 0x0BB9
    2b08:	30 97       	sbiw	r30, 0x00	; 0
    2b0a:	31 f0       	breq	.+12     	; 0x2b18 <__vector_28+0x3e>
	{
		gRCICallback1(UART_ONE, gRCICallbackContext1);
    2b0c:	60 91 b6 0b 	lds	r22, 0x0BB6
    2b10:	70 91 b7 0b 	lds	r23, 0x0BB7
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	09 95       	icall
	}
}
    2b18:	ff 91       	pop	r31
    2b1a:	ef 91       	pop	r30
    2b1c:	bf 91       	pop	r27
    2b1e:	af 91       	pop	r26
    2b20:	9f 91       	pop	r25
    2b22:	8f 91       	pop	r24
    2b24:	7f 91       	pop	r23
    2b26:	6f 91       	pop	r22
    2b28:	5f 91       	pop	r21
    2b2a:	4f 91       	pop	r20
    2b2c:	3f 91       	pop	r19
    2b2e:	2f 91       	pop	r18
    2b30:	0f 90       	pop	r0
    2b32:	0b be       	out	0x3b, r0	; 59
    2b34:	0f 90       	pop	r0
    2b36:	0f be       	out	0x3f, r0	; 63
    2b38:	0f 90       	pop	r0
    2b3a:	1f 90       	pop	r1
    2b3c:	18 95       	reti

00002b3e <__vector_22>:

ISR(USART0_TX_vect)
{
    2b3e:	1f 92       	push	r1
    2b40:	0f 92       	push	r0
    2b42:	0f b6       	in	r0, 0x3f	; 63
    2b44:	0f 92       	push	r0
    2b46:	11 24       	eor	r1, r1
    2b48:	0b b6       	in	r0, 0x3b	; 59
    2b4a:	0f 92       	push	r0
    2b4c:	2f 93       	push	r18
    2b4e:	3f 93       	push	r19
    2b50:	4f 93       	push	r20
    2b52:	5f 93       	push	r21
    2b54:	6f 93       	push	r22
    2b56:	7f 93       	push	r23
    2b58:	8f 93       	push	r24
    2b5a:	9f 93       	push	r25
    2b5c:	af 93       	push	r26
    2b5e:	bf 93       	push	r27
    2b60:	ef 93       	push	r30
    2b62:	ff 93       	push	r31
	if(gTCICallback0 != NULL)
    2b64:	e0 91 b4 0b 	lds	r30, 0x0BB4
    2b68:	f0 91 b5 0b 	lds	r31, 0x0BB5
    2b6c:	30 97       	sbiw	r30, 0x00	; 0
    2b6e:	31 f0       	breq	.+12     	; 0x2b7c <__vector_22+0x3e>
	{
		gTCICallback0(UART_ZERO, gTCICallbackContext0);
    2b70:	60 91 bc 0b 	lds	r22, 0x0BBC
    2b74:	70 91 bd 0b 	lds	r23, 0x0BBD
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	09 95       	icall
	}
}
    2b7c:	ff 91       	pop	r31
    2b7e:	ef 91       	pop	r30
    2b80:	bf 91       	pop	r27
    2b82:	af 91       	pop	r26
    2b84:	9f 91       	pop	r25
    2b86:	8f 91       	pop	r24
    2b88:	7f 91       	pop	r23
    2b8a:	6f 91       	pop	r22
    2b8c:	5f 91       	pop	r21
    2b8e:	4f 91       	pop	r20
    2b90:	3f 91       	pop	r19
    2b92:	2f 91       	pop	r18
    2b94:	0f 90       	pop	r0
    2b96:	0b be       	out	0x3b, r0	; 59
    2b98:	0f 90       	pop	r0
    2b9a:	0f be       	out	0x3f, r0	; 63
    2b9c:	0f 90       	pop	r0
    2b9e:	1f 90       	pop	r1
    2ba0:	18 95       	reti

00002ba2 <__vector_30>:

ISR(USART1_TX_vect)
{
    2ba2:	1f 92       	push	r1
    2ba4:	0f 92       	push	r0
    2ba6:	0f b6       	in	r0, 0x3f	; 63
    2ba8:	0f 92       	push	r0
    2baa:	11 24       	eor	r1, r1
    2bac:	0b b6       	in	r0, 0x3b	; 59
    2bae:	0f 92       	push	r0
    2bb0:	2f 93       	push	r18
    2bb2:	3f 93       	push	r19
    2bb4:	4f 93       	push	r20
    2bb6:	5f 93       	push	r21
    2bb8:	6f 93       	push	r22
    2bba:	7f 93       	push	r23
    2bbc:	8f 93       	push	r24
    2bbe:	9f 93       	push	r25
    2bc0:	af 93       	push	r26
    2bc2:	bf 93       	push	r27
    2bc4:	ef 93       	push	r30
    2bc6:	ff 93       	push	r31
	if(gTCICallback1 != NULL)
    2bc8:	e0 91 ba 0b 	lds	r30, 0x0BBA
    2bcc:	f0 91 bb 0b 	lds	r31, 0x0BBB
    2bd0:	30 97       	sbiw	r30, 0x00	; 0
    2bd2:	31 f0       	breq	.+12     	; 0x2be0 <__vector_30+0x3e>
	{
		gTCICallback1(UART_ONE, gTCICallbackContext1);
    2bd4:	60 91 c0 0b 	lds	r22, 0x0BC0
    2bd8:	70 91 c1 0b 	lds	r23, 0x0BC1
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	09 95       	icall
	}
    2be0:	ff 91       	pop	r31
    2be2:	ef 91       	pop	r30
    2be4:	bf 91       	pop	r27
    2be6:	af 91       	pop	r26
    2be8:	9f 91       	pop	r25
    2bea:	8f 91       	pop	r24
    2bec:	7f 91       	pop	r23
    2bee:	6f 91       	pop	r22
    2bf0:	5f 91       	pop	r21
    2bf2:	4f 91       	pop	r20
    2bf4:	3f 91       	pop	r19
    2bf6:	2f 91       	pop	r18
    2bf8:	0f 90       	pop	r0
    2bfa:	0b be       	out	0x3b, r0	; 59
    2bfc:	0f 90       	pop	r0
    2bfe:	0f be       	out	0x3f, r0	; 63
    2c00:	0f 90       	pop	r0
    2c02:	1f 90       	pop	r1
    2c04:	18 95       	reti

00002c06 <__fixsfsi>:
    2c06:	1c db       	rcall	.-2504   	; 0x2240 <__fixunssfsi>
    2c08:	68 94       	set
    2c0a:	b1 11       	cpse	r27, r1
    2c0c:	43 cc       	rjmp	.-1914   	; 0x2494 <__fp_szero>
    2c0e:	08 95       	ret

00002c10 <__divmodhi4>:
    2c10:	97 fb       	bst	r25, 7
    2c12:	07 2e       	mov	r0, r23
    2c14:	16 f4       	brtc	.+4      	; 0x2c1a <__divmodhi4+0xa>
    2c16:	00 94       	com	r0
    2c18:	06 d0       	rcall	.+12     	; 0x2c26 <__divmodhi4_neg1>
    2c1a:	77 fd       	sbrc	r23, 7
    2c1c:	08 d0       	rcall	.+16     	; 0x2c2e <__divmodhi4_neg2>
    2c1e:	0b d1       	rcall	.+534    	; 0x2e36 <__udivmodhi4>
    2c20:	07 fc       	sbrc	r0, 7
    2c22:	05 d0       	rcall	.+10     	; 0x2c2e <__divmodhi4_neg2>
    2c24:	3e f4       	brtc	.+14     	; 0x2c34 <__divmodhi4_exit>

00002c26 <__divmodhi4_neg1>:
    2c26:	90 95       	com	r25
    2c28:	81 95       	neg	r24
    2c2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c2c:	08 95       	ret

00002c2e <__divmodhi4_neg2>:
    2c2e:	70 95       	com	r23
    2c30:	61 95       	neg	r22
    2c32:	7f 4f       	sbci	r23, 0xFF	; 255

00002c34 <__divmodhi4_exit>:
    2c34:	08 95       	ret

00002c36 <__tablejump2__>:
    2c36:	ee 0f       	add	r30, r30
    2c38:	ff 1f       	adc	r31, r31

00002c3a <__tablejump__>:
    2c3a:	05 90       	lpm	r0, Z+
    2c3c:	f4 91       	lpm	r31, Z
    2c3e:	e0 2d       	mov	r30, r0
    2c40:	09 94       	ijmp

00002c42 <__moddi3>:
    2c42:	68 94       	set
    2c44:	01 c0       	rjmp	.+2      	; 0x2c48 <__divdi3_moddi3>

00002c46 <__divdi3>:
    2c46:	e8 94       	clt

00002c48 <__divdi3_moddi3>:
    2c48:	f9 2f       	mov	r31, r25
    2c4a:	f1 2b       	or	r31, r17
    2c4c:	0a f0       	brmi	.+2      	; 0x2c50 <__divdi3_moddi3+0x8>
    2c4e:	27 c0       	rjmp	.+78     	; 0x2c9e <__udivdi3_umoddi3>
    2c50:	a0 e0       	ldi	r26, 0x00	; 0
    2c52:	b0 e0       	ldi	r27, 0x00	; 0
    2c54:	ed e2       	ldi	r30, 0x2D	; 45
    2c56:	f6 e1       	ldi	r31, 0x16	; 22
    2c58:	93 c0       	rjmp	.+294    	; 0x2d80 <__prologue_saves__+0xc>
    2c5a:	09 2e       	mov	r0, r25
    2c5c:	05 94       	asr	r0
    2c5e:	1a f4       	brpl	.+6      	; 0x2c66 <__divdi3_moddi3+0x1e>
    2c60:	79 d0       	rcall	.+242    	; 0x2d54 <__negdi2>
    2c62:	11 23       	and	r17, r17
    2c64:	92 f4       	brpl	.+36     	; 0x2c8a <__divdi3_moddi3+0x42>
    2c66:	f0 e8       	ldi	r31, 0x80	; 128
    2c68:	0f 26       	eor	r0, r31
    2c6a:	ff ef       	ldi	r31, 0xFF	; 255
    2c6c:	e0 94       	com	r14
    2c6e:	f0 94       	com	r15
    2c70:	00 95       	com	r16
    2c72:	10 95       	com	r17
    2c74:	b0 94       	com	r11
    2c76:	c0 94       	com	r12
    2c78:	d0 94       	com	r13
    2c7a:	a1 94       	neg	r10
    2c7c:	bf 0a       	sbc	r11, r31
    2c7e:	cf 0a       	sbc	r12, r31
    2c80:	df 0a       	sbc	r13, r31
    2c82:	ef 0a       	sbc	r14, r31
    2c84:	ff 0a       	sbc	r15, r31
    2c86:	0f 0b       	sbc	r16, r31
    2c88:	1f 0b       	sbc	r17, r31
    2c8a:	13 d0       	rcall	.+38     	; 0x2cb2 <__udivmod64>
    2c8c:	07 fc       	sbrc	r0, 7
    2c8e:	62 d0       	rcall	.+196    	; 0x2d54 <__negdi2>
    2c90:	cd b7       	in	r28, 0x3d	; 61
    2c92:	de b7       	in	r29, 0x3e	; 62
    2c94:	ec e0       	ldi	r30, 0x0C	; 12
    2c96:	90 c0       	rjmp	.+288    	; 0x2db8 <__epilogue_restores__+0xc>

00002c98 <__umoddi3>:
    2c98:	68 94       	set
    2c9a:	01 c0       	rjmp	.+2      	; 0x2c9e <__udivdi3_umoddi3>

00002c9c <__udivdi3>:
    2c9c:	e8 94       	clt

00002c9e <__udivdi3_umoddi3>:
    2c9e:	8f 92       	push	r8
    2ca0:	9f 92       	push	r9
    2ca2:	cf 93       	push	r28
    2ca4:	df 93       	push	r29
    2ca6:	05 d0       	rcall	.+10     	; 0x2cb2 <__udivmod64>
    2ca8:	df 91       	pop	r29
    2caa:	cf 91       	pop	r28
    2cac:	9f 90       	pop	r9
    2cae:	8f 90       	pop	r8
    2cb0:	08 95       	ret

00002cb2 <__udivmod64>:
    2cb2:	88 24       	eor	r8, r8
    2cb4:	99 24       	eor	r9, r9
    2cb6:	f4 01       	movw	r30, r8
    2cb8:	e4 01       	movw	r28, r8
    2cba:	b0 e4       	ldi	r27, 0x40	; 64
    2cbc:	9f 93       	push	r25
    2cbe:	aa 27       	eor	r26, r26
    2cc0:	9a 15       	cp	r25, r10
    2cc2:	8b 04       	cpc	r8, r11
    2cc4:	9c 04       	cpc	r9, r12
    2cc6:	ed 05       	cpc	r30, r13
    2cc8:	fe 05       	cpc	r31, r14
    2cca:	cf 05       	cpc	r28, r15
    2ccc:	d0 07       	cpc	r29, r16
    2cce:	a1 07       	cpc	r26, r17
    2cd0:	98 f4       	brcc	.+38     	; 0x2cf8 <__udivmod64+0x46>
    2cd2:	ad 2f       	mov	r26, r29
    2cd4:	dc 2f       	mov	r29, r28
    2cd6:	cf 2f       	mov	r28, r31
    2cd8:	fe 2f       	mov	r31, r30
    2cda:	e9 2d       	mov	r30, r9
    2cdc:	98 2c       	mov	r9, r8
    2cde:	89 2e       	mov	r8, r25
    2ce0:	98 2f       	mov	r25, r24
    2ce2:	87 2f       	mov	r24, r23
    2ce4:	76 2f       	mov	r23, r22
    2ce6:	65 2f       	mov	r22, r21
    2ce8:	54 2f       	mov	r21, r20
    2cea:	43 2f       	mov	r20, r19
    2cec:	32 2f       	mov	r19, r18
    2cee:	22 27       	eor	r18, r18
    2cf0:	b8 50       	subi	r27, 0x08	; 8
    2cf2:	31 f7       	brne	.-52     	; 0x2cc0 <__udivmod64+0xe>
    2cf4:	bf 91       	pop	r27
    2cf6:	27 c0       	rjmp	.+78     	; 0x2d46 <__udivmod64+0x94>
    2cf8:	1b 2e       	mov	r1, r27
    2cfa:	bf 91       	pop	r27
    2cfc:	bb 27       	eor	r27, r27
    2cfe:	22 0f       	add	r18, r18
    2d00:	33 1f       	adc	r19, r19
    2d02:	44 1f       	adc	r20, r20
    2d04:	55 1f       	adc	r21, r21
    2d06:	66 1f       	adc	r22, r22
    2d08:	77 1f       	adc	r23, r23
    2d0a:	88 1f       	adc	r24, r24
    2d0c:	99 1f       	adc	r25, r25
    2d0e:	88 1c       	adc	r8, r8
    2d10:	99 1c       	adc	r9, r9
    2d12:	ee 1f       	adc	r30, r30
    2d14:	ff 1f       	adc	r31, r31
    2d16:	cc 1f       	adc	r28, r28
    2d18:	dd 1f       	adc	r29, r29
    2d1a:	aa 1f       	adc	r26, r26
    2d1c:	bb 1f       	adc	r27, r27
    2d1e:	8a 14       	cp	r8, r10
    2d20:	9b 04       	cpc	r9, r11
    2d22:	ec 05       	cpc	r30, r12
    2d24:	fd 05       	cpc	r31, r13
    2d26:	ce 05       	cpc	r28, r14
    2d28:	df 05       	cpc	r29, r15
    2d2a:	a0 07       	cpc	r26, r16
    2d2c:	b1 07       	cpc	r27, r17
    2d2e:	48 f0       	brcs	.+18     	; 0x2d42 <__udivmod64+0x90>
    2d30:	8a 18       	sub	r8, r10
    2d32:	9b 08       	sbc	r9, r11
    2d34:	ec 09       	sbc	r30, r12
    2d36:	fd 09       	sbc	r31, r13
    2d38:	ce 09       	sbc	r28, r14
    2d3a:	df 09       	sbc	r29, r15
    2d3c:	a0 0b       	sbc	r26, r16
    2d3e:	b1 0b       	sbc	r27, r17
    2d40:	21 60       	ori	r18, 0x01	; 1
    2d42:	1a 94       	dec	r1
    2d44:	e1 f6       	brne	.-72     	; 0x2cfe <__udivmod64+0x4c>
    2d46:	2e f4       	brtc	.+10     	; 0x2d52 <__udivmod64+0xa0>
    2d48:	94 01       	movw	r18, r8
    2d4a:	af 01       	movw	r20, r30
    2d4c:	be 01       	movw	r22, r28
    2d4e:	cd 01       	movw	r24, r26
    2d50:	00 0c       	add	r0, r0
    2d52:	08 95       	ret

00002d54 <__negdi2>:
    2d54:	60 95       	com	r22
    2d56:	70 95       	com	r23
    2d58:	80 95       	com	r24
    2d5a:	90 95       	com	r25
    2d5c:	30 95       	com	r19
    2d5e:	40 95       	com	r20
    2d60:	50 95       	com	r21
    2d62:	21 95       	neg	r18
    2d64:	3f 4f       	sbci	r19, 0xFF	; 255
    2d66:	4f 4f       	sbci	r20, 0xFF	; 255
    2d68:	5f 4f       	sbci	r21, 0xFF	; 255
    2d6a:	6f 4f       	sbci	r22, 0xFF	; 255
    2d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d6e:	8f 4f       	sbci	r24, 0xFF	; 255
    2d70:	9f 4f       	sbci	r25, 0xFF	; 255
    2d72:	08 95       	ret

00002d74 <__prologue_saves__>:
    2d74:	2f 92       	push	r2
    2d76:	3f 92       	push	r3
    2d78:	4f 92       	push	r4
    2d7a:	5f 92       	push	r5
    2d7c:	6f 92       	push	r6
    2d7e:	7f 92       	push	r7
    2d80:	8f 92       	push	r8
    2d82:	9f 92       	push	r9
    2d84:	af 92       	push	r10
    2d86:	bf 92       	push	r11
    2d88:	cf 92       	push	r12
    2d8a:	df 92       	push	r13
    2d8c:	ef 92       	push	r14
    2d8e:	ff 92       	push	r15
    2d90:	0f 93       	push	r16
    2d92:	1f 93       	push	r17
    2d94:	cf 93       	push	r28
    2d96:	df 93       	push	r29
    2d98:	cd b7       	in	r28, 0x3d	; 61
    2d9a:	de b7       	in	r29, 0x3e	; 62
    2d9c:	ca 1b       	sub	r28, r26
    2d9e:	db 0b       	sbc	r29, r27
    2da0:	0f b6       	in	r0, 0x3f	; 63
    2da2:	f8 94       	cli
    2da4:	de bf       	out	0x3e, r29	; 62
    2da6:	0f be       	out	0x3f, r0	; 63
    2da8:	cd bf       	out	0x3d, r28	; 61
    2daa:	09 94       	ijmp

00002dac <__epilogue_restores__>:
    2dac:	2a 88       	ldd	r2, Y+18	; 0x12
    2dae:	39 88       	ldd	r3, Y+17	; 0x11
    2db0:	48 88       	ldd	r4, Y+16	; 0x10
    2db2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2db4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2db6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2db8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2dba:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dbc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dbe:	b9 84       	ldd	r11, Y+9	; 0x09
    2dc0:	c8 84       	ldd	r12, Y+8	; 0x08
    2dc2:	df 80       	ldd	r13, Y+7	; 0x07
    2dc4:	ee 80       	ldd	r14, Y+6	; 0x06
    2dc6:	fd 80       	ldd	r15, Y+5	; 0x05
    2dc8:	0c 81       	ldd	r16, Y+4	; 0x04
    2dca:	1b 81       	ldd	r17, Y+3	; 0x03
    2dcc:	aa 81       	ldd	r26, Y+2	; 0x02
    2dce:	b9 81       	ldd	r27, Y+1	; 0x01
    2dd0:	ce 0f       	add	r28, r30
    2dd2:	d1 1d       	adc	r29, r1
    2dd4:	0f b6       	in	r0, 0x3f	; 63
    2dd6:	f8 94       	cli
    2dd8:	de bf       	out	0x3e, r29	; 62
    2dda:	0f be       	out	0x3f, r0	; 63
    2ddc:	cd bf       	out	0x3d, r28	; 61
    2dde:	ed 01       	movw	r28, r26
    2de0:	08 95       	ret

00002de2 <__ashrdi3>:
    2de2:	97 fb       	bst	r25, 7
    2de4:	10 f8       	bld	r1, 0

00002de6 <__lshrdi3>:
    2de6:	16 94       	lsr	r1
    2de8:	00 08       	sbc	r0, r0
    2dea:	0f 93       	push	r16
    2dec:	08 30       	cpi	r16, 0x08	; 8
    2dee:	98 f0       	brcs	.+38     	; 0x2e16 <__lshrdi3+0x30>
    2df0:	08 50       	subi	r16, 0x08	; 8
    2df2:	23 2f       	mov	r18, r19
    2df4:	34 2f       	mov	r19, r20
    2df6:	45 2f       	mov	r20, r21
    2df8:	56 2f       	mov	r21, r22
    2dfa:	67 2f       	mov	r22, r23
    2dfc:	78 2f       	mov	r23, r24
    2dfe:	89 2f       	mov	r24, r25
    2e00:	90 2d       	mov	r25, r0
    2e02:	f4 cf       	rjmp	.-24     	; 0x2dec <__lshrdi3+0x6>
    2e04:	05 94       	asr	r0
    2e06:	97 95       	ror	r25
    2e08:	87 95       	ror	r24
    2e0a:	77 95       	ror	r23
    2e0c:	67 95       	ror	r22
    2e0e:	57 95       	ror	r21
    2e10:	47 95       	ror	r20
    2e12:	37 95       	ror	r19
    2e14:	27 95       	ror	r18
    2e16:	0a 95       	dec	r16
    2e18:	aa f7       	brpl	.-22     	; 0x2e04 <__lshrdi3+0x1e>
    2e1a:	0f 91       	pop	r16
    2e1c:	08 95       	ret

00002e1e <__cmpdi2_s8>:
    2e1e:	00 24       	eor	r0, r0
    2e20:	a7 fd       	sbrc	r26, 7
    2e22:	00 94       	com	r0
    2e24:	2a 17       	cp	r18, r26
    2e26:	30 05       	cpc	r19, r0
    2e28:	40 05       	cpc	r20, r0
    2e2a:	50 05       	cpc	r21, r0
    2e2c:	60 05       	cpc	r22, r0
    2e2e:	70 05       	cpc	r23, r0
    2e30:	80 05       	cpc	r24, r0
    2e32:	90 05       	cpc	r25, r0
    2e34:	08 95       	ret

00002e36 <__udivmodhi4>:
    2e36:	aa 1b       	sub	r26, r26
    2e38:	bb 1b       	sub	r27, r27
    2e3a:	51 e1       	ldi	r21, 0x11	; 17
    2e3c:	07 c0       	rjmp	.+14     	; 0x2e4c <__udivmodhi4_ep>

00002e3e <__udivmodhi4_loop>:
    2e3e:	aa 1f       	adc	r26, r26
    2e40:	bb 1f       	adc	r27, r27
    2e42:	a6 17       	cp	r26, r22
    2e44:	b7 07       	cpc	r27, r23
    2e46:	10 f0       	brcs	.+4      	; 0x2e4c <__udivmodhi4_ep>
    2e48:	a6 1b       	sub	r26, r22
    2e4a:	b7 0b       	sbc	r27, r23

00002e4c <__udivmodhi4_ep>:
    2e4c:	88 1f       	adc	r24, r24
    2e4e:	99 1f       	adc	r25, r25
    2e50:	5a 95       	dec	r21
    2e52:	a9 f7       	brne	.-22     	; 0x2e3e <__udivmodhi4_loop>
    2e54:	80 95       	com	r24
    2e56:	90 95       	com	r25
    2e58:	bc 01       	movw	r22, r24
    2e5a:	cd 01       	movw	r24, r26
    2e5c:	08 95       	ret

00002e5e <_exit>:
    2e5e:	f8 94       	cli

00002e60 <__stop_program>:
    2e60:	ff cf       	rjmp	.-2      	; 0x2e60 <__stop_program>
