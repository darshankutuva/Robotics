
Quadcopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000014d8  00800100  00004d02  00004d96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004d02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000082  008015d8  008015d8  0000626e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000626e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000004a8  00000000  00000000  0000629e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000020  00000000  00000000  00006746  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007d98  00000000  00000000  00006766  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a75  00000000  00000000  0000e4fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000039ed  00000000  00000000  0000ff73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000016c4  00000000  00000000  00013960  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002505  00000000  00000000  00015024  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007629  00000000  00000000  00017529  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d0  00000000  00000000  0001eb52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	81 c0       	rjmp	.+258    	; 0x104 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 20 10 	jmp	0x2040	; 0x2040 <__vector_1>
       8:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <__vector_2>
       c:	0c 94 86 10 	jmp	0x210c	; 0x210c <__vector_3>
      10:	97 c0       	rjmp	.+302    	; 0x140 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c0       	rjmp	.+298    	; 0x140 <__bad_interrupt>
      16:	00 00       	nop
      18:	93 c0       	rjmp	.+294    	; 0x140 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	91 c0       	rjmp	.+290    	; 0x140 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c0       	rjmp	.+286    	; 0x140 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c0       	rjmp	.+282    	; 0x140 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c0       	rjmp	.+278    	; 0x140 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__vector_11>
      30:	87 c0       	rjmp	.+270    	; 0x140 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c0       	rjmp	.+266    	; 0x140 <__bad_interrupt>
      36:	00 00       	nop
      38:	83 c0       	rjmp	.+262    	; 0x140 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <__vector_15>
      40:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__vector_16>
      44:	7d c0       	rjmp	.+250    	; 0x140 <__bad_interrupt>
      46:	00 00       	nop
      48:	2b c4       	rjmp	.+2134   	; 0x8a0 <__vector_18>
      4a:	00 00       	nop
      4c:	79 c0       	rjmp	.+242    	; 0x140 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 a7 09 	jmp	0x134e	; 0x134e <__vector_20>
      54:	75 c0       	rjmp	.+234    	; 0x140 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__vector_22>
      5c:	71 c0       	rjmp	.+226    	; 0x140 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c0       	rjmp	.+222    	; 0x140 <__bad_interrupt>
      62:	00 00       	nop
      64:	6d c0       	rjmp	.+218    	; 0x140 <__bad_interrupt>
      66:	00 00       	nop
      68:	6b c0       	rjmp	.+214    	; 0x140 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	69 c0       	rjmp	.+210    	; 0x140 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <__vector_28>
      74:	65 c0       	rjmp	.+202    	; 0x140 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__vector_30>
      7c:	61 c0       	rjmp	.+194    	; 0x140 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5f c0       	rjmp	.+190    	; 0x140 <__bad_interrupt>
      82:	00 00       	nop
      84:	5d c0       	rjmp	.+186    	; 0x140 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c0       	rjmp	.+182    	; 0x140 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b9 07       	cpc	r27, r25
      8e:	cb 07       	cpc	r28, r27
      90:	a2 08       	sbc	r10, r2
      92:	8e 08       	sbc	r8, r14
      94:	a2 08       	sbc	r10, r2
      96:	a2 08       	sbc	r10, r2
      98:	a2 08       	sbc	r10, r2
      9a:	a2 08       	sbc	r10, r2
      9c:	a2 08       	sbc	r10, r2
      9e:	81 08       	sbc	r8, r1
      a0:	a2 08       	sbc	r10, r2
      a2:	a2 08       	sbc	r10, r2
      a4:	a2 08       	sbc	r10, r2
      a6:	a2 08       	sbc	r10, r2
      a8:	a2 08       	sbc	r10, r2
      aa:	a2 08       	sbc	r10, r2
      ac:	86 08       	sbc	r8, r6
      ae:	a2 08       	sbc	r10, r2
      b0:	0d 08       	sbc	r0, r13
      b2:	a2 08       	sbc	r10, r2
      b4:	a2 08       	sbc	r10, r2
      b6:	49 08       	sbc	r4, r9
      b8:	08 4a       	sbci	r16, 0xA8	; 168
      ba:	d7 3b       	cpi	r29, 0xB7	; 183
      bc:	3b ce       	rjmp	.-906    	; 0xfffffd34 <__eeprom_end+0xff7efd34>
      be:	01 6e       	ori	r16, 0xE1	; 225
      c0:	84 bc       	out	0x24, r8	; 36
      c2:	bf fd       	.word	0xfdbf	; ????
      c4:	c1 2f       	mov	r28, r17
      c6:	3d 6c       	ori	r19, 0xCD	; 205
      c8:	74 31       	cpi	r23, 0x14	; 20
      ca:	9a bd       	out	0x2a, r25	; 42
      cc:	56 83       	std	Z+6, r21	; 0x06
      ce:	3d da       	rcall	.-2950   	; 0xfffff54a <__eeprom_end+0xff7ef54a>
      d0:	3d 00       	.word	0x003d	; ????
      d2:	c7 7f       	andi	r28, 0xF7	; 247
      d4:	11 be       	out	0x31, r1	; 49
      d6:	d9 e4       	ldi	r29, 0x49	; 73
      d8:	bb 4c       	sbci	r27, 0xCB	; 203
      da:	3e 91       	ld	r19, -X
      dc:	6b aa       	std	Y+51, r6	; 0x33
      de:	aa be       	out	0x3a, r10	; 58
      e0:	00 00       	nop
      e2:	00 80       	ld	r0, Z
      e4:	3f 05       	cpc	r19, r15
      e6:	a8 4c       	sbci	r26, 0xC8	; 200
      e8:	cd b2       	in	r12, 0x1d	; 29
      ea:	d4 4e       	sbci	r29, 0xE4	; 228
      ec:	b9 38       	cpi	r27, 0x89	; 137
      ee:	36 a9       	ldd	r19, Z+54	; 0x36
      f0:	02 0c       	add	r0, r2
      f2:	50 b9       	out	0x00, r21	; 0
      f4:	91 86       	std	Z+9, r9	; 0x09
      f6:	88 08       	sbc	r8, r8
      f8:	3c a6       	std	Y+44, r3	; 0x2c
      fa:	aa aa       	std	Y+50, r10	; 0x32
      fc:	2a be       	out	0x3a, r2	; 58
      fe:	00 00       	nop
     100:	00 80       	ld	r0, Z
     102:	3f 00       	.word	0x003f	; ????

00000104 <__ctors_end>:
     104:	11 24       	eor	r1, r1
     106:	1f be       	out	0x3f, r1	; 63
     108:	cf ef       	ldi	r28, 0xFF	; 255
     10a:	d0 e4       	ldi	r29, 0x40	; 64
     10c:	de bf       	out	0x3e, r29	; 62
     10e:	cd bf       	out	0x3d, r28	; 61

00000110 <__do_copy_data>:
     110:	15 e1       	ldi	r17, 0x15	; 21
     112:	a0 e0       	ldi	r26, 0x00	; 0
     114:	b1 e0       	ldi	r27, 0x01	; 1
     116:	e2 e0       	ldi	r30, 0x02	; 2
     118:	fd e4       	ldi	r31, 0x4D	; 77
     11a:	00 e0       	ldi	r16, 0x00	; 0
     11c:	0b bf       	out	0x3b, r16	; 59
     11e:	02 c0       	rjmp	.+4      	; 0x124 <__do_copy_data+0x14>
     120:	07 90       	elpm	r0, Z+
     122:	0d 92       	st	X+, r0
     124:	a8 3d       	cpi	r26, 0xD8	; 216
     126:	b1 07       	cpc	r27, r17
     128:	d9 f7       	brne	.-10     	; 0x120 <__do_copy_data+0x10>

0000012a <__do_clear_bss>:
     12a:	26 e1       	ldi	r18, 0x16	; 22
     12c:	a8 ed       	ldi	r26, 0xD8	; 216
     12e:	b5 e1       	ldi	r27, 0x15	; 21
     130:	01 c0       	rjmp	.+2      	; 0x134 <.do_clear_bss_start>

00000132 <.do_clear_bss_loop>:
     132:	1d 92       	st	X+, r1

00000134 <.do_clear_bss_start>:
     134:	aa 35       	cpi	r26, 0x5A	; 90
     136:	b2 07       	cpc	r27, r18
     138:	e1 f7       	brne	.-8      	; 0x132 <.do_clear_bss_loop>
     13a:	3f d3       	rcall	.+1662   	; 0x7ba <main>
     13c:	0c 94 92 21 	jmp	0x4324	; 0x4324 <exit>

00000140 <__bad_interrupt>:
     140:	5f cf       	rjmp	.-322    	; 0x0 <__vectors>

00000142 <InitializeAccelerometer>:
#include "Accelerometer.h"

#include "Trace.h"

bool InitializeAccelerometer()
{
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	cd b7       	in	r28, 0x3d	; 61
     148:	de b7       	in	r29, 0x3e	; 62
     14a:	27 97       	sbiw	r28, 0x07	; 7
     14c:	0f b6       	in	r0, 0x3f	; 63
     14e:	f8 94       	cli
     150:	de bf       	out	0x3e, r29	; 62
     152:	0f be       	out	0x3f, r0	; 63
     154:	cd bf       	out	0x3d, r28	; 61
	
	//
	// Initialize Accelerometer
	//
	
	if(!InitADXL345DevAddress(TRUE))
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <InitADXL345DevAddress>
     15c:	88 23       	and	r24, r24
     15e:	09 f4       	brne	.+2      	; 0x162 <InitializeAccelerometer+0x20>
     160:	59 c0       	rjmp	.+178    	; 0x214 <InitializeAccelerometer+0xd2>
	
	//
	// Place Accelerometer in accelerometer in standby mode
	//
	
	if(!EnableDisableADXL345StandbyMode(TRUE))
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <EnableDisableADXL345StandbyMode>
     168:	88 23       	and	r24, r24
     16a:	09 f4       	brne	.+2      	; 0x16e <InitializeAccelerometer+0x2c>
     16c:	55 c0       	rjmp	.+170    	; 0x218 <InitializeAccelerometer+0xd6>
	
	FifoCtl.AsUINT8 = 0;
	
	FifoCtl.FIFOMode = BYPASS;
	
	FifoCtl.Samples = 0;
     16e:	1e 82       	std	Y+6, r1	; 0x06
	
	if (!ProgramADXL345FifoControl(&FifoCtl))
     170:	ce 01       	movw	r24, r28
     172:	06 96       	adiw	r24, 0x06	; 6
     174:	0e 94 29 18 	call	0x3052	; 0x3052 <ProgramADXL345FifoControl>
     178:	88 23       	and	r24, r24
     17a:	09 f4       	brne	.+2      	; 0x17e <InitializeAccelerometer+0x3c>
     17c:	4f c0       	rjmp	.+158    	; 0x21c <InitializeAccelerometer+0xda>
	
	ActInactCtl.ActXEnable = 1;
	
	ActInactCtl.ActYEnable = 1;
	
	ActInactCtl.ActZEnable = 1;
     17e:	80 e7       	ldi	r24, 0x70	; 112
     180:	8f 83       	std	Y+7, r24	; 0x07
	
	if (!ProgramADXL345ActivityInactivityDetection(&ActInactCtl, 0x8, 0x8, 0xf))
     182:	2f e0       	ldi	r18, 0x0F	; 15
     184:	48 e0       	ldi	r20, 0x08	; 8
     186:	68 e0       	ldi	r22, 0x08	; 8
     188:	ce 01       	movw	r24, r28
     18a:	07 96       	adiw	r24, 0x07	; 7
     18c:	0e 94 16 19 	call	0x322c	; 0x322c <ProgramADXL345ActivityInactivityDetection>
     190:	88 23       	and	r24, r24
     192:	09 f4       	brne	.+2      	; 0x196 <InitializeAccelerometer+0x54>
     194:	45 c0       	rjmp	.+138    	; 0x220 <InitializeAccelerometer+0xde>
	
	//
	// Program Data Offset
	//
	
	DataOffset.OffsetX = -1;
     196:	8f ef       	ldi	r24, 0xFF	; 255
     198:	8b 83       	std	Y+3, r24	; 0x03
	
	DataOffset.OffsetY = -4;
     19a:	8c ef       	ldi	r24, 0xFC	; 252
     19c:	8c 83       	std	Y+4, r24	; 0x04
	
	DataOffset.OffsetZ = 6;
     19e:	86 e0       	ldi	r24, 0x06	; 6
     1a0:	8d 83       	std	Y+5, r24	; 0x05
	
	if(!ProgramADXL345DataFormat(TWO_G, TRUE, &DataOffset, HUNDRED_HZ))
     1a2:	2a e0       	ldi	r18, 0x0A	; 10
     1a4:	ae 01       	movw	r20, r28
     1a6:	4d 5f       	subi	r20, 0xFD	; 253
     1a8:	5f 4f       	sbci	r21, 0xFF	; 255
     1aa:	61 e0       	ldi	r22, 0x01	; 1
     1ac:	80 e0       	ldi	r24, 0x00	; 0
     1ae:	0e 94 53 18 	call	0x30a6	; 0x30a6 <ProgramADXL345DataFormat>
     1b2:	88 23       	and	r24, r24
     1b4:	b9 f1       	breq	.+110    	; 0x224 <InitializeAccelerometer+0xe2>
	// Program Interrupts
	//
	
	IntEnable.AsUINT8 = 0;
	
	IntEnable.DataReady = 1;
     1b6:	80 e8       	ldi	r24, 0x80	; 128
     1b8:	89 83       	std	Y+1, r24	; 0x01
	
	IntMap.AsUINT8 = 0;
	
	IntMap.DataReady = 1;
     1ba:	8a 83       	std	Y+2, r24	; 0x02
	
	if(!ProgramADXL345Interrupts(&IntEnable, &IntMap))
     1bc:	be 01       	movw	r22, r28
     1be:	6e 5f       	subi	r22, 0xFE	; 254
     1c0:	7f 4f       	sbci	r23, 0xFF	; 255
     1c2:	ce 01       	movw	r24, r28
     1c4:	01 96       	adiw	r24, 0x01	; 1
     1c6:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <ProgramADXL345Interrupts>
     1ca:	88 23       	and	r24, r24
     1cc:	69 f1       	breq	.+90     	; 0x228 <InitializeAccelerometer+0xe6>
	
	//
	// Set PORT C - Pin 5 as input
	//
	
	DDRC &= ~(1 << DDC5);
     1ce:	3d 98       	cbi	0x07, 5	; 7
	
	//
	// Turn on the pull up resistor for PORT C - Pin 5
	//
	
	PORTC |= (1 << PORTC5);
     1d0:	45 9a       	sbi	0x08, 5	; 8
	
	PCMSK2 = PCMSK2 | (0x1 << PCINT21);
     1d2:	ed e6       	ldi	r30, 0x6D	; 109
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	80 62       	ori	r24, 0x20	; 32
     1da:	80 83       	st	Z, r24
	
	PCICR = PCICR | (0x1 << PCIE2);
     1dc:	e8 e6       	ldi	r30, 0x68	; 104
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	80 81       	ld	r24, Z
     1e2:	84 60       	ori	r24, 0x04	; 4
     1e4:	80 83       	st	Z, r24
	
	sei();
     1e6:	78 94       	sei
	
	//
	// Flush FIFO
	//
	
	if(!FlushADXL345Fifo())
     1e8:	0e 94 9e 14 	call	0x293c	; 0x293c <FlushADXL345Fifo>
     1ec:	88 23       	and	r24, r24
     1ee:	f1 f0       	breq	.+60     	; 0x22c <InitializeAccelerometer+0xea>
	
	//
	// Program Accelerometer Power Mode
	//
	
	if(!ProgramADXL345PowerCtl(FULL_POWER, NO_WAKEUP))
     1f0:	64 e0       	ldi	r22, 0x04	; 4
     1f2:	82 e0       	ldi	r24, 0x02	; 2
     1f4:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <ProgramADXL345PowerCtl>
     1f8:	88 23       	and	r24, r24
     1fa:	d1 f0       	breq	.+52     	; 0x230 <InitializeAccelerometer+0xee>
	{
		goto Exit;
	}
	
	SendTrace(INFO_LEVEL, "Accelerometer Setup Complete\r\n");
     1fc:	87 e0       	ldi	r24, 0x07	; 7
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	9f 93       	push	r25
     202:	8f 93       	push	r24
     204:	84 e0       	ldi	r24, 0x04	; 4
     206:	8f 93       	push	r24
     208:	6e d6       	rcall	.+3292   	; 0xee6 <SendTrace>
     20a:	0f 90       	pop	r0
     20c:	0f 90       	pop	r0
     20e:	0f 90       	pop	r0
	
	Status = TRUE;
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	0f c0       	rjmp	.+30     	; 0x232 <InitializeAccelerometer+0xf0>
	
	FIFO_CTL FifoCtl;
	
	ACT_INACT_CTL ActInactCtl;
	
	bool Status = FALSE;
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	0d c0       	rjmp	.+26     	; 0x232 <InitializeAccelerometer+0xf0>
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	0b c0       	rjmp	.+22     	; 0x232 <InitializeAccelerometer+0xf0>
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	09 c0       	rjmp	.+18     	; 0x232 <InitializeAccelerometer+0xf0>
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	07 c0       	rjmp	.+14     	; 0x232 <InitializeAccelerometer+0xf0>
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	05 c0       	rjmp	.+10     	; 0x232 <InitializeAccelerometer+0xf0>
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	03 c0       	rjmp	.+6      	; 0x232 <InitializeAccelerometer+0xf0>
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	01 c0       	rjmp	.+2      	; 0x232 <InitializeAccelerometer+0xf0>
     230:	80 e0       	ldi	r24, 0x00	; 0
	Status = TRUE;
	
Exit:

	return Status;
}
     232:	27 96       	adiw	r28, 0x07	; 7
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	f8 94       	cli
     238:	de bf       	out	0x3e, r29	; 62
     23a:	0f be       	out	0x3f, r0	; 63
     23c:	cd bf       	out	0x3d, r28	; 61
     23e:	df 91       	pop	r29
     240:	cf 91       	pop	r28
     242:	08 95       	ret

00000244 <ReadAccelerometerData>:

bool ReadAccelerometerData(PACC_TILT_DATA_XYZ AccTiltData)
{
     244:	ff 92       	push	r15
     246:	0f 93       	push	r16
     248:	1f 93       	push	r17
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	1f 92       	push	r1
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
     254:	8c 01       	movw	r16, r24
	bool Status = FALSE;
	
	INT_ENABLE_MAP_SOURCE IntSource;
	
	if (!ReadADXL345InterruptSource(&IntSource))
     256:	ce 01       	movw	r24, r28
     258:	01 96       	adiw	r24, 0x01	; 1
     25a:	0e 94 20 14 	call	0x2840	; 0x2840 <ReadADXL345InterruptSource>
     25e:	88 23       	and	r24, r24
     260:	09 f4       	brne	.+2      	; 0x264 <ReadAccelerometerData+0x20>
     262:	83 c0       	rjmp	.+262    	; 0x36a <ReadAccelerometerData+0x126>
	{
		goto Exit;
	}
		
	SendTrace(INFO_LEVEL, "Interrupt Source = 0x%x\r\n", IntSource.AsUINT8);
     264:	89 81       	ldd	r24, Y+1	; 0x01
     266:	1f 92       	push	r1
     268:	8f 93       	push	r24
     26a:	86 e2       	ldi	r24, 0x26	; 38
     26c:	91 e0       	ldi	r25, 0x01	; 1
     26e:	9f 93       	push	r25
     270:	8f 93       	push	r24
     272:	84 e0       	ldi	r24, 0x04	; 4
     274:	8f 93       	push	r24
     276:	37 d6       	rcall	.+3182   	; 0xee6 <SendTrace>
		
	if (IntSource.DataReady)
     278:	89 81       	ldd	r24, Y+1	; 0x01
     27a:	0f 90       	pop	r0
     27c:	0f 90       	pop	r0
     27e:	0f 90       	pop	r0
     280:	0f 90       	pop	r0
     282:	0f 90       	pop	r0
     284:	88 23       	and	r24, r24
     286:	0c f0       	brlt	.+2      	; 0x28a <ReadAccelerometerData+0x46>
     288:	72 c0       	rjmp	.+228    	; 0x36e <ReadAccelerometerData+0x12a>
	{
		if(!ReadADXL345AccAndTiltData(DEGREES, AccTiltData))
     28a:	b8 01       	movw	r22, r16
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <ReadADXL345AccAndTiltData>
     292:	88 23       	and	r24, r24
     294:	09 f4       	brne	.+2      	; 0x298 <ReadAccelerometerData+0x54>
     296:	6d c0       	rjmp	.+218    	; 0x372 <ReadAccelerometerData+0x12e>
		{
			goto Exit;
		}
					
		SendTrace(INFO_LEVEL, "X Axis Acc = %fg\t", AccTiltData->AccX);
     298:	f8 01       	movw	r30, r16
     29a:	83 81       	ldd	r24, Z+3	; 0x03
     29c:	8f 93       	push	r24
     29e:	82 81       	ldd	r24, Z+2	; 0x02
     2a0:	8f 93       	push	r24
     2a2:	81 81       	ldd	r24, Z+1	; 0x01
     2a4:	8f 93       	push	r24
     2a6:	80 81       	ld	r24, Z
     2a8:	8f 93       	push	r24
     2aa:	80 e4       	ldi	r24, 0x40	; 64
     2ac:	91 e0       	ldi	r25, 0x01	; 1
     2ae:	9f 93       	push	r25
     2b0:	8f 93       	push	r24
     2b2:	68 94       	set
     2b4:	ff 24       	eor	r15, r15
     2b6:	f2 f8       	bld	r15, 2
     2b8:	ff 92       	push	r15
     2ba:	15 d6       	rcall	.+3114   	; 0xee6 <SendTrace>
					
		SendTrace(INFO_LEVEL, "Y Axis Acc = %fg\t", AccTiltData->AccY);
     2bc:	f8 01       	movw	r30, r16
     2be:	87 81       	ldd	r24, Z+7	; 0x07
     2c0:	8f 93       	push	r24
     2c2:	86 81       	ldd	r24, Z+6	; 0x06
     2c4:	8f 93       	push	r24
     2c6:	85 81       	ldd	r24, Z+5	; 0x05
     2c8:	8f 93       	push	r24
     2ca:	84 81       	ldd	r24, Z+4	; 0x04
     2cc:	8f 93       	push	r24
     2ce:	82 e5       	ldi	r24, 0x52	; 82
     2d0:	91 e0       	ldi	r25, 0x01	; 1
     2d2:	9f 93       	push	r25
     2d4:	8f 93       	push	r24
     2d6:	ff 92       	push	r15
     2d8:	06 d6       	rcall	.+3084   	; 0xee6 <SendTrace>
					
		SendTrace(INFO_LEVEL, "Z Axis Acc = %fg\r\n", AccTiltData->AccZ);
     2da:	f8 01       	movw	r30, r16
     2dc:	83 85       	ldd	r24, Z+11	; 0x0b
     2de:	8f 93       	push	r24
     2e0:	82 85       	ldd	r24, Z+10	; 0x0a
     2e2:	8f 93       	push	r24
     2e4:	81 85       	ldd	r24, Z+9	; 0x09
     2e6:	8f 93       	push	r24
     2e8:	80 85       	ldd	r24, Z+8	; 0x08
     2ea:	8f 93       	push	r24
     2ec:	84 e6       	ldi	r24, 0x64	; 100
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	9f 93       	push	r25
     2f2:	8f 93       	push	r24
     2f4:	ff 92       	push	r15
     2f6:	f7 d5       	rcall	.+3054   	; 0xee6 <SendTrace>
				
		SendTrace(INFO_LEVEL, "X Axis Tilt = %f degrees\t", AccTiltData->TiltX);
     2f8:	f8 01       	movw	r30, r16
     2fa:	87 85       	ldd	r24, Z+15	; 0x0f
     2fc:	8f 93       	push	r24
     2fe:	86 85       	ldd	r24, Z+14	; 0x0e
     300:	8f 93       	push	r24
     302:	85 85       	ldd	r24, Z+13	; 0x0d
     304:	8f 93       	push	r24
     306:	84 85       	ldd	r24, Z+12	; 0x0c
     308:	8f 93       	push	r24
     30a:	87 e7       	ldi	r24, 0x77	; 119
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	9f 93       	push	r25
     310:	8f 93       	push	r24
     312:	ff 92       	push	r15
     314:	e8 d5       	rcall	.+3024   	; 0xee6 <SendTrace>
				
		SendTrace(INFO_LEVEL, "Y Axis Tilt = %f degrees\t", AccTiltData->TiltY);
     316:	f8 01       	movw	r30, r16
     318:	83 89       	ldd	r24, Z+19	; 0x13
     31a:	8f 93       	push	r24
     31c:	82 89       	ldd	r24, Z+18	; 0x12
     31e:	8f 93       	push	r24
     320:	81 89       	ldd	r24, Z+17	; 0x11
     322:	8f 93       	push	r24
     324:	80 89       	ldd	r24, Z+16	; 0x10
     326:	8f 93       	push	r24
     328:	81 e9       	ldi	r24, 0x91	; 145
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	9f 93       	push	r25
     32e:	8f 93       	push	r24
     330:	ff 92       	push	r15
     332:	d9 d5       	rcall	.+2994   	; 0xee6 <SendTrace>
				
		SendTrace(INFO_LEVEL, "Z Axis Tilt = %f degrees\r\n\r\n", AccTiltData->TiltZ);	
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	f8 94       	cli
     338:	de bf       	out	0x3e, r29	; 62
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	cd bf       	out	0x3d, r28	; 61
     33e:	f8 01       	movw	r30, r16
     340:	87 89       	ldd	r24, Z+23	; 0x17
     342:	8f 93       	push	r24
     344:	86 89       	ldd	r24, Z+22	; 0x16
     346:	8f 93       	push	r24
     348:	85 89       	ldd	r24, Z+21	; 0x15
     34a:	8f 93       	push	r24
     34c:	84 89       	ldd	r24, Z+20	; 0x14
     34e:	8f 93       	push	r24
     350:	8b ea       	ldi	r24, 0xAB	; 171
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	9f 93       	push	r25
     356:	8f 93       	push	r24
     358:	ff 92       	push	r15
     35a:	c5 d5       	rcall	.+2954   	; 0xee6 <SendTrace>
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	de bf       	out	0x3e, r29	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	cd bf       	out	0x3d, r28	; 61
	
		Status = TRUE;
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	05 c0       	rjmp	.+10     	; 0x374 <ReadAccelerometerData+0x130>
	return Status;
}

bool ReadAccelerometerData(PACC_TILT_DATA_XYZ AccTiltData)
{
	bool Status = FALSE;
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	03 c0       	rjmp	.+6      	; 0x374 <ReadAccelerometerData+0x130>
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	01 c0       	rjmp	.+2      	; 0x374 <ReadAccelerometerData+0x130>
     372:	80 e0       	ldi	r24, 0x00	; 0
	}
	
Exit:

	return Status;
}
     374:	0f 90       	pop	r0
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	1f 91       	pop	r17
     37c:	0f 91       	pop	r16
     37e:	ff 90       	pop	r15
     380:	08 95       	ret

00000382 <InitTransmitter>:

bool
InitializeGPS()
{
	return TRUE;
}
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	cd b7       	in	r28, 0x3d	; 61
     388:	de b7       	in	r29, 0x3e	; 62
     38a:	a1 97       	sbiw	r28, 0x21	; 33
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	f8 94       	cli
     390:	de bf       	out	0x3e, r29	; 62
     392:	0f be       	out	0x3f, r0	; 63
     394:	cd bf       	out	0x3d, r28	; 61
     396:	19 82       	std	Y+1, r1	; 0x01
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	89 a3       	std	Y+33, r24	; 0x21
     39c:	1f 82       	std	Y+7, r1	; 0x07
     39e:	18 86       	std	Y+8, r1	; 0x08
     3a0:	19 86       	std	Y+9, r1	; 0x09
     3a2:	88 e7       	ldi	r24, 0x78	; 120
     3a4:	8a 83       	std	Y+2, r24	; 0x02
     3a6:	8b 83       	std	Y+3, r24	; 0x03
     3a8:	8c 83       	std	Y+4, r24	; 0x04
     3aa:	8d 83       	std	Y+5, r24	; 0x05
     3ac:	8e 83       	std	Y+6, r24	; 0x06
     3ae:	1f 86       	std	Y+15, r1	; 0x0f
     3b0:	18 8a       	std	Y+16, r1	; 0x10
     3b2:	19 8a       	std	Y+17, r1	; 0x11
     3b4:	80 ee       	ldi	r24, 0xE0	; 224
     3b6:	8a 87       	std	Y+10, r24	; 0x0a
     3b8:	80 ed       	ldi	r24, 0xD0	; 208
     3ba:	8b 87       	std	Y+11, r24	; 0x0b
     3bc:	80 ec       	ldi	r24, 0xC0	; 192
     3be:	8c 87       	std	Y+12, r24	; 0x0c
     3c0:	80 eb       	ldi	r24, 0xB0	; 176
     3c2:	8d 87       	std	Y+13, r24	; 0x0d
     3c4:	80 ea       	ldi	r24, 0xA0	; 160
     3c6:	8e 87       	std	Y+14, r24	; 0x0e
     3c8:	8f e0       	ldi	r24, 0x0F	; 15
     3ca:	8a 8b       	std	Y+18, r24	; 0x12
     3cc:	8b 8b       	std	Y+19, r24	; 0x13
     3ce:	8e e6       	ldi	r24, 0x6E	; 110
     3d0:	8c 8b       	std	Y+20, r24	; 0x14
     3d2:	1e 8a       	std	Y+22, r1	; 0x16
     3d4:	1d 8a       	std	Y+21, r1	; 0x15
     3d6:	1a 8e       	std	Y+26, r1	; 0x1a
     3d8:	19 8e       	std	Y+25, r1	; 0x19
     3da:	1e 8e       	std	Y+30, r1	; 0x1e
     3dc:	1d 8e       	std	Y+29, r1	; 0x1d
     3de:	18 8e       	std	Y+24, r1	; 0x18
     3e0:	1f 8a       	std	Y+23, r1	; 0x17
     3e2:	1c 8e       	std	Y+28, r1	; 0x1c
     3e4:	1b 8e       	std	Y+27, r1	; 0x1b
     3e6:	18 a2       	std	Y+32, r1	; 0x20
     3e8:	1f 8e       	std	Y+31, r1	; 0x1f
     3ea:	ce 01       	movw	r24, r28
     3ec:	01 96       	adiw	r24, 0x01	; 1
     3ee:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <InitTransceiver>
     3f2:	a1 96       	adiw	r28, 0x21	; 33
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	f8 94       	cli
     3f8:	de bf       	out	0x3e, r29	; 62
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	cd bf       	out	0x3d, r28	; 61
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	08 95       	ret

00000404 <PerformHandshake>:
     404:	1f 93       	push	r17
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	00 d0       	rcall	.+0      	; 0x40c <PerformHandshake+0x8>
     40c:	1f 92       	push	r1
     40e:	cd b7       	in	r28, 0x3d	; 61
     410:	de b7       	in	r29, 0x3e	; 62
     412:	82 e0       	ldi	r24, 0x02	; 2
     414:	89 83       	std	Y+1, r24	; 0x01
     416:	8d ef       	ldi	r24, 0xFD	; 253
     418:	93 e0       	ldi	r25, 0x03	; 3
     41a:	9b 83       	std	Y+3, r25	; 0x03
     41c:	8a 83       	std	Y+2, r24	; 0x02
     41e:	be 01       	movw	r22, r28
     420:	6f 5f       	subi	r22, 0xFF	; 255
     422:	7f 4f       	sbci	r23, 0xFF	; 255
     424:	ce 01       	movw	r24, r28
     426:	02 96       	adiw	r24, 0x02	; 2
     428:	0e 94 ab 0b 	call	0x1756	; 0x1756 <TCTransmitAckPayload>
     42c:	85 e0       	ldi	r24, 0x05	; 5
     42e:	85 bd       	out	0x25, r24	; 37
     430:	16 bc       	out	0x26, r1	; 38
     432:	10 92 d8 15 	sts	0x15D8, r1
     436:	10 92 d9 15 	sts	0x15D9, r1
     43a:	12 c0       	rjmp	.+36     	; 0x460 <PerformHandshake+0x5c>
     43c:	80 91 d8 15 	lds	r24, 0x15D8
     440:	88 23       	and	r24, r24
     442:	71 f0       	breq	.+28     	; 0x460 <PerformHandshake+0x5c>
     444:	88 ec       	ldi	r24, 0xC8	; 200
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	9f 93       	push	r25
     44a:	8f 93       	push	r24
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	8f 93       	push	r24
     450:	4a d5       	rcall	.+2708   	; 0xee6 <SendTrace>
     452:	0e 94 08 20 	call	0x4010	; 0x4010 <PerformEmergencyLanding>
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	10 e0       	ldi	r17, 0x00	; 0
     45e:	57 c0       	rjmp	.+174    	; 0x50e <PerformHandshake+0x10a>
     460:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <TCIsReceivePayloadAvailable>
     464:	88 23       	and	r24, r24
     466:	51 f3       	breq	.-44     	; 0x43c <PerformHandshake+0x38>
     468:	15 bc       	out	0x25, r1	; 37
     46a:	ce 01       	movw	r24, r28
     46c:	01 96       	adiw	r24, 0x01	; 1
     46e:	0e 94 17 0c 	call	0x182e	; 0x182e <TCGetReceivedPayloadLength>
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	8f 73       	andi	r24, 0x3F	; 63
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	91 f0       	breq	.+36     	; 0x49e <PerformHandshake+0x9a>
     47a:	89 81       	ldd	r24, Y+1	; 0x01
     47c:	8f 73       	andi	r24, 0x3F	; 63
     47e:	1f 92       	push	r1
     480:	8f 93       	push	r24
     482:	87 ed       	ldi	r24, 0xD7	; 215
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	9f 93       	push	r25
     488:	8f 93       	push	r24
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	8f 93       	push	r24
     48e:	2b d5       	rcall	.+2646   	; 0xee6 <SendTrace>
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	10 e0       	ldi	r17, 0x00	; 0
     49c:	38 c0       	rjmp	.+112    	; 0x50e <PerformHandshake+0x10a>
     49e:	1b 82       	std	Y+3, r1	; 0x03
     4a0:	1a 82       	std	Y+2, r1	; 0x02
     4a2:	be 01       	movw	r22, r28
     4a4:	6f 5f       	subi	r22, 0xFF	; 255
     4a6:	7f 4f       	sbci	r23, 0xFF	; 255
     4a8:	ce 01       	movw	r24, r28
     4aa:	02 96       	adiw	r24, 0x02	; 2
     4ac:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <TCReceivePayload>
     4b0:	18 2f       	mov	r17, r24
     4b2:	81 11       	cpse	r24, r1
     4b4:	0b c0       	rjmp	.+22     	; 0x4cc <PerformHandshake+0xc8>
     4b6:	2d e0       	ldi	r18, 0x0D	; 13
     4b8:	32 e0       	ldi	r19, 0x02	; 2
     4ba:	3f 93       	push	r19
     4bc:	2f 93       	push	r18
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	8f 93       	push	r24
     4c2:	11 d5       	rcall	.+2594   	; 0xee6 <SendTrace>
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	21 c0       	rjmp	.+66     	; 0x50e <PerformHandshake+0x10a>
     4cc:	8a 81       	ldd	r24, Y+2	; 0x02
     4ce:	9b 81       	ldd	r25, Y+3	; 0x03
     4d0:	8c 3f       	cpi	r24, 0xFC	; 252
     4d2:	23 e0       	ldi	r18, 0x03	; 3
     4d4:	92 07       	cpc	r25, r18
     4d6:	81 f0       	breq	.+32     	; 0x4f8 <PerformHandshake+0xf4>
     4d8:	9f 93       	push	r25
     4da:	8f 93       	push	r24
     4dc:	86 e3       	ldi	r24, 0x36	; 54
     4de:	92 e0       	ldi	r25, 0x02	; 2
     4e0:	9f 93       	push	r25
     4e2:	8f 93       	push	r24
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	8f 93       	push	r24
     4e8:	fe d4       	rcall	.+2556   	; 0xee6 <SendTrace>
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	10 e0       	ldi	r17, 0x00	; 0
     4f6:	0b c0       	rjmp	.+22     	; 0x50e <PerformHandshake+0x10a>
     4f8:	81 e8       	ldi	r24, 0x81	; 129
     4fa:	92 e0       	ldi	r25, 0x02	; 2
     4fc:	9f 93       	push	r25
     4fe:	8f 93       	push	r24
     500:	84 e0       	ldi	r24, 0x04	; 4
     502:	8f 93       	push	r24
     504:	f0 d4       	rcall	.+2528   	; 0xee6 <SendTrace>
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	11 e0       	ldi	r17, 0x01	; 1
     50e:	81 2f       	mov	r24, r17
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	1f 91       	pop	r17
     51c:	08 95       	ret

0000051e <InitializeWatchDogTimer>:
	
	//
	// Set Timer/Counter Control Register A to normal mode of operation.
	//
	
	TCCR0A = 0x0;
     51e:	14 bc       	out	0x24, r1	; 36
	//
	// Set Timer/Counter Control Register B to have a clock with pre-scalar = 1024.
	// The timer will expire every 32.64 ms.
	//
	
	TCCR0B = 0;
     520:	15 bc       	out	0x25, r1	; 37
	
	//
	// Set Timer/Counter Register to 0xFF
	//
	
	TCNT0 = 0x0;
     522:	16 bc       	out	0x26, r1	; 38
	
	//
	// Set OCR0A and OCR0B to zero
	//
	
	OCR0A = 0;
     524:	17 bc       	out	0x27, r1	; 39
	
	OCR0B = 0;
     526:	18 bc       	out	0x28, r1	; 40
	
	//
	// Enable Timer/Counter0 Overflow Interrupt
	//
	
	TIMSK0 = 0x1;
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	80 93 6e 00 	sts	0x006E, r24
     52e:	08 95       	ret

00000530 <SendCompassHeading>:
	return;
}

bool
SendCompassHeading()
{
     530:	cf 92       	push	r12
     532:	df 92       	push	r13
     534:	ef 92       	push	r14
     536:	0f 93       	push	r16
     538:	1f 93       	push	r17
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	cd b7       	in	r28, 0x3d	; 61
     540:	de b7       	in	r29, 0x3e	; 62
     542:	e3 97       	sbiw	r28, 0x33	; 51
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	f8 94       	cli
     548:	de bf       	out	0x3e, r29	; 62
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	cd bf       	out	0x3d, r28	; 61
	// So we need to match the payload size of the input payload.
	// Compass Heading has 4 bytes. Input Payload has 8 bytes. So
	// pad Compass Heading payload with 4 bytes of 0's.
	//
	
	CompassHeading[1] = 0;
     54e:	18 aa       	std	Y+48, r1	; 0x30
     550:	19 aa       	std	Y+49, r1	; 0x31
     552:	1a aa       	std	Y+50, r1	; 0x32
     554:	1b aa       	std	Y+51, r1	; 0x33
	
	Status = ReadAccelerometerData(&AccTiltData);
     556:	ce 01       	movw	r24, r28
     558:	01 96       	adiw	r24, 0x01	; 1
     55a:	74 de       	rcall	.-792    	; 0x244 <ReadAccelerometerData>
     55c:	18 2f       	mov	r17, r24
	
	if (!Status)
     55e:	81 11       	cpse	r24, r1
     560:	0b c0       	rjmp	.+22     	; 0x578 <SendCompassHeading+0x48>
	{
		SendTrace(ERROR_LEVEL,"Failed to read Accelerometer Data.\r\n");
     562:	27 e9       	ldi	r18, 0x97	; 151
     564:	32 e0       	ldi	r19, 0x02	; 2
     566:	3f 93       	push	r19
     568:	2f 93       	push	r18
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	8f 93       	push	r24
     56e:	bb d4       	rcall	.+2422   	; 0xee6 <SendTrace>
		
		goto Exit;
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	57 c0       	rjmp	.+174    	; 0x626 <SendCompassHeading+0xf6>
	}
	
	Status = ReadHMC5883LContinuousMeasurementData(&MagData);
     578:	ce 01       	movw	r24, r28
     57a:	49 96       	adiw	r24, 0x19	; 25
     57c:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <ReadHMC5883LContinuousMeasurementData>
     580:	18 2f       	mov	r17, r24
	
	if (!Status)
     582:	81 11       	cpse	r24, r1
     584:	0b c0       	rjmp	.+22     	; 0x59c <SendCompassHeading+0x6c>
	{
		SendTrace(ERROR_LEVEL,"Failed to read Magnetometer Data.\r\n");
     586:	2c eb       	ldi	r18, 0xBC	; 188
     588:	32 e0       	ldi	r19, 0x02	; 2
     58a:	3f 93       	push	r19
     58c:	2f 93       	push	r18
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	8f 93       	push	r24
     592:	a9 d4       	rcall	.+2386   	; 0xee6 <SendTrace>
		
		goto Exit;
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	45 c0       	rjmp	.+138    	; 0x626 <SendCompassHeading+0xf6>
	}
	
	SendTrace(INFO_LEVEL, "Mag Data Read.\r\n");
     59c:	80 ee       	ldi	r24, 0xE0	; 224
     59e:	92 e0       	ldi	r25, 0x02	; 2
     5a0:	9f 93       	push	r25
     5a2:	8f 93       	push	r24
     5a4:	84 e0       	ldi	r24, 0x04	; 4
     5a6:	8f 93       	push	r24
     5a8:	9e d4       	rcall	.+2364   	; 0xee6 <SendTrace>
	
	Status = CalculateCompassHeading(&MagData, AccTiltData.TiltX, AccTiltData.TiltY, DEGREES, &CompassHeading[0]);
     5aa:	09 89       	ldd	r16, Y+17	; 0x11
     5ac:	1a 89       	ldd	r17, Y+18	; 0x12
     5ae:	2b 89       	ldd	r18, Y+19	; 0x13
     5b0:	3c 89       	ldd	r19, Y+20	; 0x14
     5b2:	4d 85       	ldd	r20, Y+13	; 0x0d
     5b4:	5e 85       	ldd	r21, Y+14	; 0x0e
     5b6:	6f 85       	ldd	r22, Y+15	; 0x0f
     5b8:	78 89       	ldd	r23, Y+16	; 0x10
     5ba:	ce 01       	movw	r24, r28
     5bc:	8c 96       	adiw	r24, 0x2c	; 44
     5be:	6c 01       	movw	r12, r24
     5c0:	ee 24       	eor	r14, r14
     5c2:	e3 94       	inc	r14
     5c4:	43 97       	sbiw	r24, 0x13	; 19
     5c6:	0e 94 96 19 	call	0x332c	; 0x332c <CalculateCompassHeading>
     5ca:	18 2f       	mov	r17, r24
	
	if (!Status)
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	81 11       	cpse	r24, r1
     5d4:	0b c0       	rjmp	.+22     	; 0x5ec <SendCompassHeading+0xbc>
	{
		SendTrace(ERROR_LEVEL,"Failed to calculate compass heading.\r\n");
     5d6:	21 ef       	ldi	r18, 0xF1	; 241
     5d8:	32 e0       	ldi	r19, 0x02	; 2
     5da:	3f 93       	push	r19
     5dc:	2f 93       	push	r18
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	8f 93       	push	r24
     5e2:	81 d4       	rcall	.+2306   	; 0xee6 <SendTrace>
		
		goto Exit;
     5e4:	0f 90       	pop	r0
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	1d c0       	rjmp	.+58     	; 0x626 <SendCompassHeading+0xf6>
	}
	
	SendTrace(INFO_LEVEL, "Compass Heading Calculated.\r\n");
     5ec:	88 e1       	ldi	r24, 0x18	; 24
     5ee:	93 e0       	ldi	r25, 0x03	; 3
     5f0:	9f 93       	push	r25
     5f2:	8f 93       	push	r24
     5f4:	04 e0       	ldi	r16, 0x04	; 4
     5f6:	0f 93       	push	r16
     5f8:	76 d4       	rcall	.+2284   	; 0xee6 <SendTrace>
	
	Length.AsUINT8 = 0;
	
	Length.PayloadLength = sizeof(double) * 2;
     5fa:	88 e0       	ldi	r24, 0x08	; 8
     5fc:	8b a7       	std	Y+43, r24	; 0x2b
	
	Status = TCTransmitAckPayload((PVOID)&CompassHeading[0], &Length);
     5fe:	be 01       	movw	r22, r28
     600:	65 5d       	subi	r22, 0xD5	; 213
     602:	7f 4f       	sbci	r23, 0xFF	; 255
     604:	ce 01       	movw	r24, r28
     606:	8c 96       	adiw	r24, 0x2c	; 44
     608:	0e 94 ab 0b 	call	0x1756	; 0x1756 <TCTransmitAckPayload>
     60c:	18 2f       	mov	r17, r24
	
	SendTrace(INFO_LEVEL, "Ack Payload Transmitted.\r\n");
     60e:	26 e3       	ldi	r18, 0x36	; 54
     610:	33 e0       	ldi	r19, 0x03	; 3
     612:	3f 93       	push	r19
     614:	2f 93       	push	r18
     616:	0f 93       	push	r16
     618:	66 d4       	rcall	.+2252   	; 0xee6 <SendTrace>
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
     620:	0f 90       	pop	r0
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
	
Exit:

	return Status;
}
     626:	81 2f       	mov	r24, r17
     628:	e3 96       	adiw	r28, 0x33	; 51
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	f8 94       	cli
     62e:	de bf       	out	0x3e, r29	; 62
     630:	0f be       	out	0x3f, r0	; 63
     632:	cd bf       	out	0x3d, r28	; 61
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	1f 91       	pop	r17
     63a:	0f 91       	pop	r16
     63c:	ef 90       	pop	r14
     63e:	df 90       	pop	r13
     640:	cf 90       	pop	r12
     642:	08 95       	ret

00000644 <FlyCopter>:
	TIMSK0 = 0x1;
}

void
FlyCopter()
{
     644:	7f 92       	push	r7
     646:	8f 92       	push	r8
     648:	9f 92       	push	r9
     64a:	af 92       	push	r10
     64c:	bf 92       	push	r11
     64e:	cf 92       	push	r12
     650:	df 92       	push	r13
     652:	ef 92       	push	r14
     654:	ff 92       	push	r15
     656:	0f 93       	push	r16
     658:	1f 93       	push	r17
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	cd b7       	in	r28, 0x3d	; 61
     660:	de b7       	in	r29, 0x3e	; 62
     662:	a1 97       	sbiw	r28, 0x21	; 33
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	f8 94       	cli
     668:	de bf       	out	0x3e, r29	; 62
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	cd bf       	out	0x3d, r28	; 61
		
		//
		// Start Watch Dog Timer
		//
		
		StartWatchDogTimer();
     66e:	0f 2e       	mov	r0, r31
     670:	f5 e0       	ldi	r31, 0x05	; 5
     672:	9f 2e       	mov	r9, r31
     674:	f0 2d       	mov	r31, r0
			TCReceivePayload(&Value[0], &Length);
			
			continue;
		}
		
		SendTrace(INFO_LEVEL, "Length = %d\r\n", Length.AsUINT8);
     676:	0f 2e       	mov	r0, r31
     678:	ff ef       	ldi	r31, 0xFF	; 255
     67a:	ef 2e       	mov	r14, r31
     67c:	f1 e0       	ldi	r31, 0x01	; 1
     67e:	ff 2e       	mov	r15, r31
     680:	f0 2d       	mov	r31, r0
     682:	68 94       	set
     684:	77 24       	eor	r7, r7
     686:	72 f8       	bld	r7, 2
			SendTrace(ERROR_LEVEL, "FlyCopter - Receive Data Failed\r\n");
			
			continue;
		}
		
		SendTrace(INFO_LEVEL, "Throttle = %d, XAxis = %d, YAxis = %d\r\n", Value[0], Value[1], Value[2]);
     688:	0f 2e       	mov	r0, r31
     68a:	ff e8       	ldi	r31, 0x8F	; 143
     68c:	af 2e       	mov	r10, r31
     68e:	f3 e0       	ldi	r31, 0x03	; 3
     690:	bf 2e       	mov	r11, r31
     692:	f0 2d       	mov	r31, r0
		
		Status = TCReceivePayload(&Value[0], &Length);
		
		if (!Status)
		{
			SendTrace(ERROR_LEVEL, "FlyCopter - Receive Data Failed\r\n");
     694:	0f 2e       	mov	r0, r31
     696:	fd e6       	ldi	r31, 0x6D	; 109
     698:	cf 2e       	mov	r12, r31
     69a:	f3 e0       	ldi	r31, 0x03	; 3
     69c:	df 2e       	mov	r13, r31
     69e:	f0 2d       	mov	r31, r0
     6a0:	88 24       	eor	r8, r8
     6a2:	83 94       	inc	r8
		
		TCGetReceivedPayloadLength(&Length);
		
		if ((Length.PayloadLength % (NUM_INPUT_VALUES * sizeof(unsigned int))) != 0)
		{
			SendTrace(ERROR_LEVEL, "Invalid Data Length - %d.\r\n", Length.PayloadLength);
     6a4:	01 e5       	ldi	r16, 0x51	; 81
     6a6:	13 e0       	ldi	r17, 0x03	; 3
	
	unsigned int Value[NUM_INPUT_VALUES * 4];
	
	while(1)
	{	
		SendCompassHeading();
     6a8:	43 df       	rcall	.-378    	; 0x530 <SendCompassHeading>
		
		//
		// Start Watch Dog Timer
		//
		
		StartWatchDogTimer();
     6aa:	95 bc       	out	0x25, r9	; 37
     6ac:	16 bc       	out	0x26, r1	; 38
     6ae:	10 92 d8 15 	sts	0x15D8, r1
     6b2:	10 92 d9 15 	sts	0x15D9, r1
		
		//
		// Wait until acknowledgment data arrives
		//
		
		while(!TCIsReceivePayloadAvailable())
     6b6:	11 c0       	rjmp	.+34     	; 0x6da <FlyCopter+0x96>
		{
			if (gIsSignalLost)
     6b8:	80 91 d8 15 	lds	r24, 0x15D8
     6bc:	88 23       	and	r24, r24
     6be:	69 f0       	breq	.+26     	; 0x6da <FlyCopter+0x96>
			{
				SendTrace(ERROR_LEVEL, "Signal Lost.\r\n");
     6c0:	88 ec       	ldi	r24, 0xC8	; 200
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	9f 93       	push	r25
     6c6:	8f 93       	push	r24
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	8f 93       	push	r24
     6cc:	0c d4       	rcall	.+2072   	; 0xee6 <SendTrace>
				
				PerformEmergencyLanding();
     6ce:	0e 94 08 20 	call	0x4010	; 0x4010 <PerformEmergencyLanding>
		CalculatePulse(Value[0], Value[1], Value[2]);
	}
	
Exit:

	return;
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	5c c0       	rjmp	.+184    	; 0x792 <FlyCopter+0x14e>
		
		//
		// Wait until acknowledgment data arrives
		//
		
		while(!TCIsReceivePayloadAvailable())
     6da:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <TCIsReceivePayloadAvailable>
     6de:	88 23       	and	r24, r24
     6e0:	59 f3       	breq	.-42     	; 0x6b8 <FlyCopter+0x74>
		
		//
		// Stop Watch Dog Timer
		//
		
		StopWatchDogTimer();
     6e2:	15 bc       	out	0x25, r1	; 37
		
		//
		// Get the received payload length
		//
		
		TCGetReceivedPayloadLength(&Length);
     6e4:	ce 01       	movw	r24, r28
     6e6:	01 96       	adiw	r24, 0x01	; 1
     6e8:	0e 94 17 0c 	call	0x182e	; 0x182e <TCGetReceivedPayloadLength>
		
		if ((Length.PayloadLength % (NUM_INPUT_VALUES * sizeof(unsigned int))) != 0)
     6ec:	89 81       	ldd	r24, Y+1	; 0x01
     6ee:	98 2f       	mov	r25, r24
     6f0:	9f 73       	andi	r25, 0x3F	; 63
     6f2:	87 70       	andi	r24, 0x07	; 7
     6f4:	99 f0       	breq	.+38     	; 0x71c <FlyCopter+0xd8>
		{
			SendTrace(ERROR_LEVEL, "Invalid Data Length - %d.\r\n", Length.PayloadLength);
     6f6:	1f 92       	push	r1
     6f8:	9f 93       	push	r25
     6fa:	1f 93       	push	r17
     6fc:	0f 93       	push	r16
     6fe:	8f 92       	push	r8
     700:	f2 d3       	rcall	.+2020   	; 0xee6 <SendTrace>
			
			TCReceivePayload(&Value[0], &Length);
     702:	be 01       	movw	r22, r28
     704:	6f 5f       	subi	r22, 0xFF	; 255
     706:	7f 4f       	sbci	r23, 0xFF	; 255
     708:	ce 01       	movw	r24, r28
     70a:	02 96       	adiw	r24, 0x02	; 2
     70c:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <TCReceivePayload>
			
			continue;
     710:	0f 90       	pop	r0
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	c6 cf       	rjmp	.-116    	; 0x6a8 <FlyCopter+0x64>
		}
		
		SendTrace(INFO_LEVEL, "Length = %d\r\n", Length.AsUINT8);
     71c:	89 81       	ldd	r24, Y+1	; 0x01
     71e:	1f 92       	push	r1
     720:	8f 93       	push	r24
     722:	ff 92       	push	r15
     724:	ef 92       	push	r14
     726:	7f 92       	push	r7
     728:	de d3       	rcall	.+1980   	; 0xee6 <SendTrace>
		
		//
		// Now receive the data
		//
		
		Status = TCReceivePayload(&Value[0], &Length);
     72a:	be 01       	movw	r22, r28
     72c:	6f 5f       	subi	r22, 0xFF	; 255
     72e:	7f 4f       	sbci	r23, 0xFF	; 255
     730:	ce 01       	movw	r24, r28
     732:	02 96       	adiw	r24, 0x02	; 2
     734:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <TCReceivePayload>
		
		if (!Status)
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	81 11       	cpse	r24, r1
     744:	08 c0       	rjmp	.+16     	; 0x756 <FlyCopter+0x112>
		{
			SendTrace(ERROR_LEVEL, "FlyCopter - Receive Data Failed\r\n");
     746:	df 92       	push	r13
     748:	cf 92       	push	r12
     74a:	8f 92       	push	r8
     74c:	cc d3       	rcall	.+1944   	; 0xee6 <SendTrace>
			
			continue;
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	a9 cf       	rjmp	.-174    	; 0x6a8 <FlyCopter+0x64>
		}
		
		SendTrace(INFO_LEVEL, "Throttle = %d, XAxis = %d, YAxis = %d\r\n", Value[0], Value[1], Value[2]);
     756:	8f 81       	ldd	r24, Y+7	; 0x07
     758:	8f 93       	push	r24
     75a:	8e 81       	ldd	r24, Y+6	; 0x06
     75c:	8f 93       	push	r24
     75e:	8d 81       	ldd	r24, Y+5	; 0x05
     760:	8f 93       	push	r24
     762:	8c 81       	ldd	r24, Y+4	; 0x04
     764:	8f 93       	push	r24
     766:	8b 81       	ldd	r24, Y+3	; 0x03
     768:	8f 93       	push	r24
     76a:	8a 81       	ldd	r24, Y+2	; 0x02
     76c:	8f 93       	push	r24
     76e:	bf 92       	push	r11
     770:	af 92       	push	r10
     772:	7f 92       	push	r7
     774:	b8 d3       	rcall	.+1904   	; 0xee6 <SendTrace>
	
		CalculatePulse(Value[0], Value[1], Value[2]);
     776:	4e 81       	ldd	r20, Y+6	; 0x06
     778:	5f 81       	ldd	r21, Y+7	; 0x07
     77a:	6c 81       	ldd	r22, Y+4	; 0x04
     77c:	7d 81       	ldd	r23, Y+5	; 0x05
     77e:	8a 81       	ldd	r24, Y+2	; 0x02
     780:	9b 81       	ldd	r25, Y+3	; 0x03
     782:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <CalculatePulse>
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	f8 94       	cli
     78a:	de bf       	out	0x3e, r29	; 62
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	cd bf       	out	0x3d, r28	; 61
     790:	8b cf       	rjmp	.-234    	; 0x6a8 <FlyCopter+0x64>
	}
	
Exit:

	return;
}
     792:	a1 96       	adiw	r28, 0x21	; 33
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	f8 94       	cli
     798:	de bf       	out	0x3e, r29	; 62
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	cd bf       	out	0x3d, r28	; 61
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	1f 91       	pop	r17
     7a4:	0f 91       	pop	r16
     7a6:	ff 90       	pop	r15
     7a8:	ef 90       	pop	r14
     7aa:	df 90       	pop	r13
     7ac:	cf 90       	pop	r12
     7ae:	bf 90       	pop	r11
     7b0:	af 90       	pop	r10
     7b2:	9f 90       	pop	r9
     7b4:	8f 90       	pop	r8
     7b6:	7f 90       	pop	r7
     7b8:	08 95       	ret

000007ba <main>:
unsigned char gWatchDogTimerTriggerCount = 0;

bool gIsSignalLost = FALSE;

int main(void)
{
     7ba:	0f 93       	push	r16
     7bc:	cf 93       	push	r28
	
	//
	// First Initialize Tracing
	//
	
	InitTrace(F_CPU, INFO_LEVEL | ERROR_LEVEL);
     7be:	45 e0       	ldi	r20, 0x05	; 5
     7c0:	60 e0       	ldi	r22, 0x00	; 0
     7c2:	72 e1       	ldi	r23, 0x12	; 18
     7c4:	8a e7       	ldi	r24, 0x7A	; 122
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	83 d0       	rcall	.+262    	; 0x8d0 <InitTrace>
	
	SendTrace(INFO_LEVEL, "Quadcopter\r\n");
     7ca:	87 eb       	ldi	r24, 0xB7	; 183
     7cc:	93 e0       	ldi	r25, 0x03	; 3
     7ce:	9f 93       	push	r25
     7d0:	8f 93       	push	r24
     7d2:	c4 e0       	ldi	r28, 0x04	; 4
     7d4:	cf 93       	push	r28
     7d6:	87 d3       	rcall	.+1806   	; 0xee6 <SendTrace>
	
	SendTrace(INFO_LEVEL, "-----------------\r\n");
     7d8:	84 ec       	ldi	r24, 0xC4	; 196
     7da:	93 e0       	ldi	r25, 0x03	; 3
     7dc:	9f 93       	push	r25
     7de:	8f 93       	push	r24
     7e0:	cf 93       	push	r28
     7e2:	81 d3       	rcall	.+1794   	; 0xee6 <SendTrace>
	
	//
	// Initialize TWI
	//

	if(!InitTWI(TWI_MASTER, NULL, NULL))
     7e4:	40 e0       	ldi	r20, 0x00	; 0
     7e6:	50 e0       	ldi	r21, 0x00	; 0
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	0e 94 b9 10 	call	0x2172	; 0x2172 <InitTWI>
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	88 23       	and	r24, r24
     800:	09 f4       	brne	.+2      	; 0x804 <main+0x4a>
     802:	48 c0       	rjmp	.+144    	; 0x894 <main+0xda>
	
	//
	// Initialize Interrupts
	//
	
	InitExtInt();
     804:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <InitExtInt>
	
	//
	// Now Initialize Transmitter
	//
	
	Status = InitTransmitter();
     808:	bc dd       	rcall	.-1160   	; 0x382 <InitTransmitter>
     80a:	c8 2f       	mov	r28, r24
	
	if (!Status)
     80c:	81 11       	cpse	r24, r1
     80e:	0b c0       	rjmp	.+22     	; 0x826 <main+0x6c>
	{
		SendTrace(ERROR_LEVEL, "main - Transmitter Initialization Failed\r\n");
     810:	28 ed       	ldi	r18, 0xD8	; 216
     812:	33 e0       	ldi	r19, 0x03	; 3
     814:	3f 93       	push	r19
     816:	2f 93       	push	r18
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	8f 93       	push	r24
     81c:	64 d3       	rcall	.+1736   	; 0xee6 <SendTrace>
		
		goto Exit;
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	38 c0       	rjmp	.+112    	; 0x896 <main+0xdc>
	
	//
	// Initialize Accelerometer
	//
	
	Status = InitializeAccelerometer();
     826:	8d dc       	rcall	.-1766   	; 0x142 <InitializeAccelerometer>
     828:	c8 2f       	mov	r28, r24
	
	if (!Status)
     82a:	81 11       	cpse	r24, r1
     82c:	0b c0       	rjmp	.+22     	; 0x844 <main+0x8a>
	{
		SendTrace(ERROR_LEVEL, "main - Accelerometer Initialization Failed\r\n");
     82e:	23 e0       	ldi	r18, 0x03	; 3
     830:	34 e0       	ldi	r19, 0x04	; 4
     832:	3f 93       	push	r19
     834:	2f 93       	push	r18
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	8f 93       	push	r24
     83a:	55 d3       	rcall	.+1706   	; 0xee6 <SendTrace>
		
		goto Exit;
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	0f 90       	pop	r0
     842:	29 c0       	rjmp	.+82     	; 0x896 <main+0xdc>
	
	//
	// Initialize Magnetometer
	//
	
	Status = InitHMC5883LMagnetometer(CONTINUOUS_MEASUREMENT_MODE, NORMAL, FIFTEEN_HZ, EIGHT_SAMPLES, THOUSAND_AND_NINTY);
     844:	01 e0       	ldi	r16, 0x01	; 1
     846:	23 e0       	ldi	r18, 0x03	; 3
     848:	44 e0       	ldi	r20, 0x04	; 4
     84a:	60 e0       	ldi	r22, 0x00	; 0
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <InitHMC5883LMagnetometer>
     852:	c8 2f       	mov	r28, r24
	
	if (!Status)
     854:	81 11       	cpse	r24, r1
     856:	0b c0       	rjmp	.+22     	; 0x86e <main+0xb4>
	{
		SendTrace(ERROR_LEVEL, "main - Magnetometer Initialization Failed\r\n");
     858:	20 e3       	ldi	r18, 0x30	; 48
     85a:	34 e0       	ldi	r19, 0x04	; 4
     85c:	3f 93       	push	r19
     85e:	2f 93       	push	r18
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	8f 93       	push	r24
     864:	40 d3       	rcall	.+1664   	; 0xee6 <SendTrace>
		
		goto Exit;
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	14 c0       	rjmp	.+40     	; 0x896 <main+0xdc>
	
	//
	// Perform Handshake
	//
	
	Status = PerformHandshake();
     86e:	ca dd       	rcall	.-1132   	; 0x404 <PerformHandshake>
     870:	c8 2f       	mov	r28, r24
	
	if (!Status)
     872:	81 11       	cpse	r24, r1
     874:	0b c0       	rjmp	.+22     	; 0x88c <main+0xd2>
	{
		SendTrace(ERROR_LEVEL, "main - Handshake Failed\r\n");
     876:	2c e5       	ldi	r18, 0x5C	; 92
     878:	34 e0       	ldi	r19, 0x04	; 4
     87a:	3f 93       	push	r19
     87c:	2f 93       	push	r18
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	8f 93       	push	r24
     882:	31 d3       	rcall	.+1634   	; 0xee6 <SendTrace>
		
		goto Exit;
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	05 c0       	rjmp	.+10     	; 0x896 <main+0xdc>
	
	//
	// Init PWM
	//
	
	InitPWM();
     88c:	28 d6       	rcall	.+3152   	; 0x14de <InitPWM>
	
	//
	// Initialize Watch Dog Timer
	//
	
	InitializeWatchDogTimer();
     88e:	47 de       	rcall	.-882    	; 0x51e <InitializeWatchDogTimer>
	
    //
	// Now Fly
	//
	
	FlyCopter();
     890:	d9 de       	rcall	.-590    	; 0x644 <FlyCopter>
     892:	01 c0       	rjmp	.+2      	; 0x896 <main+0xdc>

bool gIsSignalLost = FALSE;

int main(void)
{
	bool Status = FALSE;
     894:	c0 e0       	ldi	r28, 0x00	; 0
	FlyCopter();
	
Exit:

	return Status;
}
     896:	8c 2f       	mov	r24, r28
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	cf 91       	pop	r28
     89c:	0f 91       	pop	r16
     89e:	08 95       	ret

000008a0 <__vector_18>:

	return Status;
}

ISR(TIMER0_OVF_vect)
{	
     8a0:	1f 92       	push	r1
     8a2:	0f 92       	push	r0
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	0f 92       	push	r0
     8a8:	11 24       	eor	r1, r1
     8aa:	8f 93       	push	r24
	if (gWatchDogTimerTriggerCount == MAX_WATCH_DOG_TIMER_TRIGGERS)
     8ac:	80 91 d9 15 	lds	r24, 0x15D9
     8b0:	80 34       	cpi	r24, 0x40	; 64
     8b2:	29 f4       	brne	.+10     	; 0x8be <__vector_18+0x1e>
	{
		gIsSignalLost = TRUE;
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	80 93 d8 15 	sts	0x15D8, r24
		
		StopWatchDogTimer();
     8ba:	15 bc       	out	0x25, r1	; 37
     8bc:	03 c0       	rjmp	.+6      	; 0x8c4 <__vector_18+0x24>
	}
	else
	{
		gWatchDogTimerTriggerCount++;
     8be:	8f 5f       	subi	r24, 0xFF	; 255
     8c0:	80 93 d9 15 	sts	0x15D9, r24
	}
}
     8c4:	8f 91       	pop	r24
     8c6:	0f 90       	pop	r0
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	0f 90       	pop	r0
     8cc:	1f 90       	pop	r1
     8ce:	18 95       	reti

000008d0 <InitTrace>:
#ifdef DEBUG

void
InitTrace(unsigned long ProcFrequency, unsigned char TraceLevel)
{
	if (!gTraceInitialized)
     8d0:	80 91 da 15 	lds	r24, 0x15DA
     8d4:	81 11       	cpse	r24, r1
     8d6:	09 c0       	rjmp	.+18     	; 0x8ea <InitTrace+0x1a>
	{

		gTraceLevel = TraceLevel;
     8d8:	40 93 0a 16 	sts	0x160A, r20

		InitUARTSync(UART_ZERO, BR_9600, NORMAL_MODE);	
     8dc:	40 e0       	ldi	r20, 0x00	; 0
     8de:	63 e3       	ldi	r22, 0x33	; 51
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	54 d4       	rcall	.+2216   	; 0x118c <InitUARTSync>
		
		gTraceInitialized = TRUE;
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	80 93 da 15 	sts	0x15DA, r24
     8ea:	08 95       	ret

000008ec <SendStringValue>:
SendStringValue(char *String)
{

	unsigned long Length = 0;
	
	Length = strlen(String);
     8ec:	fc 01       	movw	r30, r24
     8ee:	01 90       	ld	r0, Z+
     8f0:	00 20       	and	r0, r0
     8f2:	e9 f7       	brne	.-6      	; 0x8ee <SendStringValue+0x2>
     8f4:	31 97       	sbiw	r30, 0x01	; 1
     8f6:	9f 01       	movw	r18, r30
     8f8:	28 1b       	sub	r18, r24
     8fa:	39 0b       	sbc	r19, r25
     8fc:	40 e0       	ldi	r20, 0x00	; 0
     8fe:	50 e0       	ldi	r21, 0x00	; 0
	
	UARTTransmitSync(UART_ZERO, (PVOID) String, Length);
     900:	bc 01       	movw	r22, r24
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	10 c5       	rjmp	.+2592   	; 0x1326 <UARTTransmitSync>
     906:	08 95       	ret

00000908 <SendHexValue>:
	
}

void
SendHexValue(unsigned long long Value)
{
     908:	8f 92       	push	r8
     90a:	9f 92       	push	r9
     90c:	af 92       	push	r10
     90e:	bf 92       	push	r11
     910:	cf 92       	push	r12
     912:	df 92       	push	r13
     914:	ef 92       	push	r14
     916:	ff 92       	push	r15
     918:	0f 93       	push	r16
     91a:	1f 93       	push	r17
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	cd b7       	in	r28, 0x3d	; 61
     922:	de b7       	in	r29, 0x3e	; 62
     924:	da 95       	dec	r29
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	f8 94       	cli
     92a:	de bf       	out	0x3e, r29	; 62
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	cd bf       	out	0x3d, r28	; 61
     930:	02 2f       	mov	r16, r18
     932:	93 2e       	mov	r9, r19
     934:	a4 2e       	mov	r10, r20
     936:	b5 2e       	mov	r11, r21
     938:	c6 2e       	mov	r12, r22
     93a:	d7 2e       	mov	r13, r23
     93c:	e8 2e       	mov	r14, r24
     93e:	f9 2e       	mov	r15, r25

	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
     940:	10 e0       	ldi	r17, 0x00	; 0

		if (Value < 16)
		{
			TransmitChar[Count] = Value;

			Value = 0;
     942:	81 2c       	mov	r8, r1


	do
	{

		if (Value < 16)
     944:	20 2f       	mov	r18, r16
     946:	39 2d       	mov	r19, r9
     948:	4a 2d       	mov	r20, r10
     94a:	5b 2d       	mov	r21, r11
     94c:	6c 2d       	mov	r22, r12
     94e:	7d 2d       	mov	r23, r13
     950:	8e 2d       	mov	r24, r14
     952:	9f 2d       	mov	r25, r15
     954:	af e0       	ldi	r26, 0x0F	; 15
     956:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__cmpdi2_s8>
     95a:	09 f0       	breq	.+2      	; 0x95e <SendHexValue+0x56>
     95c:	80 f4       	brcc	.+32     	; 0x97e <SendHexValue+0x76>
		{
			TransmitChar[Count] = Value;
     95e:	e1 e0       	ldi	r30, 0x01	; 1
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	ec 0f       	add	r30, r28
     964:	fd 1f       	adc	r31, r29
     966:	e1 0f       	add	r30, r17
     968:	f1 1d       	adc	r31, r1
     96a:	00 83       	st	Z, r16

			Value = 0;
     96c:	08 2d       	mov	r16, r8
     96e:	98 2c       	mov	r9, r8
     970:	a8 2c       	mov	r10, r8
     972:	b8 2c       	mov	r11, r8
     974:	c8 2c       	mov	r12, r8
     976:	d8 2c       	mov	r13, r8
     978:	e8 2c       	mov	r14, r8
     97a:	f8 2c       	mov	r15, r8
     97c:	1c c0       	rjmp	.+56     	; 0x9b6 <SendHexValue+0xae>
		}
		else
		{
			TransmitChar[Count] = Value % 16;
     97e:	e1 e0       	ldi	r30, 0x01	; 1
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	ec 0f       	add	r30, r28
     984:	fd 1f       	adc	r31, r29
     986:	e1 0f       	add	r30, r17
     988:	f1 1d       	adc	r31, r1
     98a:	80 2f       	mov	r24, r16
     98c:	8f 70       	andi	r24, 0x0F	; 15
     98e:	80 83       	st	Z, r24

			Value = Value / 16;
     990:	20 2f       	mov	r18, r16
     992:	39 2d       	mov	r19, r9
     994:	4a 2d       	mov	r20, r10
     996:	5b 2d       	mov	r21, r11
     998:	6c 2d       	mov	r22, r12
     99a:	7d 2d       	mov	r23, r13
     99c:	8e 2d       	mov	r24, r14
     99e:	9f 2d       	mov	r25, r15
     9a0:	04 e0       	ldi	r16, 0x04	; 4
     9a2:	0e 94 57 26 	call	0x4cae	; 0x4cae <__lshrdi3>
     9a6:	02 2f       	mov	r16, r18
     9a8:	93 2e       	mov	r9, r19
     9aa:	a4 2e       	mov	r10, r20
     9ac:	b5 2e       	mov	r11, r21
     9ae:	c6 2e       	mov	r12, r22
     9b0:	d7 2e       	mov	r13, r23
     9b2:	e8 2e       	mov	r14, r24
     9b4:	f9 2e       	mov	r15, r25

		}
		
		if (TransmitChar[Count] > 9)
     9b6:	e1 2f       	mov	r30, r17
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	a1 e0       	ldi	r26, 0x01	; 1
     9bc:	b0 e0       	ldi	r27, 0x00	; 0
     9be:	ac 0f       	add	r26, r28
     9c0:	bd 1f       	adc	r27, r29
     9c2:	ae 0f       	add	r26, r30
     9c4:	bf 1f       	adc	r27, r31
     9c6:	8c 91       	ld	r24, X
     9c8:	8a 30       	cpi	r24, 0x0A	; 10
     9ca:	20 f0       	brcs	.+8      	; 0x9d4 <SendHexValue+0xcc>
		{
			TransmitChar[Count] = TransmitChar[Count] + ASCII_HEX_CONVERSION;
     9cc:	fd 01       	movw	r30, r26
     9ce:	89 5a       	subi	r24, 0xA9	; 169
     9d0:	80 83       	st	Z, r24
     9d2:	08 c0       	rjmp	.+16     	; 0x9e4 <SendHexValue+0xdc>
		}
		else
		{
			TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     9d4:	21 e0       	ldi	r18, 0x01	; 1
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	2c 0f       	add	r18, r28
     9da:	3d 1f       	adc	r19, r29
     9dc:	e2 0f       	add	r30, r18
     9de:	f3 1f       	adc	r31, r19
     9e0:	80 5d       	subi	r24, 0xD0	; 208
     9e2:	80 83       	st	Z, r24
		}
		
		Count++;
     9e4:	1f 5f       	subi	r17, 0xFF	; 255

	} while (Value != 0);
     9e6:	20 2f       	mov	r18, r16
     9e8:	39 2d       	mov	r19, r9
     9ea:	4a 2d       	mov	r20, r10
     9ec:	5b 2d       	mov	r21, r11
     9ee:	6c 2d       	mov	r22, r12
     9f0:	7d 2d       	mov	r23, r13
     9f2:	8e 2d       	mov	r24, r14
     9f4:	9f 2d       	mov	r25, r15
     9f6:	a8 2d       	mov	r26, r8
     9f8:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__cmpdi2_s8>
     9fc:	09 f0       	breq	.+2      	; 0xa00 <SendHexValue+0xf8>
     9fe:	a2 cf       	rjmp	.-188    	; 0x944 <SendHexValue+0x3c>

	while (Count != 0)
     a00:	11 23       	and	r17, r17
     a02:	91 f0       	breq	.+36     	; 0xa28 <SendHexValue+0x120>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     a04:	61 2f       	mov	r22, r17
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	61 50       	subi	r22, 0x01	; 1
     a0a:	71 09       	sbc	r23, r1
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	8c 0f       	add	r24, r28
     a12:	9d 1f       	adc	r25, r29
     a14:	68 0f       	add	r22, r24
     a16:	79 1f       	adc	r23, r25
     a18:	21 e0       	ldi	r18, 0x01	; 1
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	40 e0       	ldi	r20, 0x00	; 0
     a1e:	50 e0       	ldi	r21, 0x00	; 0
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	81 d4       	rcall	.+2306   	; 0x1326 <UARTTransmitSync>
		
		Count--;
     a24:	11 50       	subi	r17, 0x01	; 1
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
     a26:	71 f7       	brne	.-36     	; 0xa04 <SendHexValue+0xfc>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}
}
     a28:	d3 95       	inc	r29
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	f8 94       	cli
     a2e:	de bf       	out	0x3e, r29	; 62
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	cd bf       	out	0x3d, r28	; 61
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	ff 90       	pop	r15
     a3e:	ef 90       	pop	r14
     a40:	df 90       	pop	r13
     a42:	cf 90       	pop	r12
     a44:	bf 90       	pop	r11
     a46:	af 90       	pop	r10
     a48:	9f 90       	pop	r9
     a4a:	8f 90       	pop	r8
     a4c:	08 95       	ret

00000a4e <SendDecimalValue>:


void
SendDecimalValue(unsigned long long Value)
{
     a4e:	2f 92       	push	r2
     a50:	3f 92       	push	r3
     a52:	4f 92       	push	r4
     a54:	5f 92       	push	r5
     a56:	6f 92       	push	r6
     a58:	7f 92       	push	r7
     a5a:	8f 92       	push	r8
     a5c:	9f 92       	push	r9
     a5e:	af 92       	push	r10
     a60:	bf 92       	push	r11
     a62:	cf 92       	push	r12
     a64:	df 92       	push	r13
     a66:	ef 92       	push	r14
     a68:	ff 92       	push	r15
     a6a:	0f 93       	push	r16
     a6c:	1f 93       	push	r17
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	cd b7       	in	r28, 0x3d	; 61
     a74:	de b7       	in	r29, 0x3e	; 62
     a76:	c2 50       	subi	r28, 0x02	; 2
     a78:	d1 40       	sbci	r29, 0x01	; 1
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	de bf       	out	0x3e, r29	; 62
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	cd bf       	out	0x3d, r28	; 61
     a84:	cf 5f       	subi	r28, 0xFF	; 255
     a86:	de 4f       	sbci	r29, 0xFE	; 254
     a88:	28 83       	st	Y, r18
     a8a:	c1 50       	subi	r28, 0x01	; 1
     a8c:	d1 40       	sbci	r29, 0x01	; 1
     a8e:	23 2e       	mov	r2, r19
     a90:	34 2e       	mov	r3, r20
     a92:	45 2e       	mov	r4, r21
     a94:	56 2e       	mov	r5, r22
     a96:	67 2e       	mov	r6, r23
     a98:	78 2e       	mov	r7, r24
     a9a:	89 2e       	mov	r8, r25

	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
     a9c:	91 2c       	mov	r9, r1


	do
	{

		if (Value < 10)
     a9e:	cf 5f       	subi	r28, 0xFF	; 255
     aa0:	de 4f       	sbci	r29, 0xFE	; 254
     aa2:	28 81       	ld	r18, Y
     aa4:	c1 50       	subi	r28, 0x01	; 1
     aa6:	d1 40       	sbci	r29, 0x01	; 1
     aa8:	32 2d       	mov	r19, r2
     aaa:	43 2d       	mov	r20, r3
     aac:	54 2d       	mov	r21, r4
     aae:	65 2d       	mov	r22, r5
     ab0:	76 2d       	mov	r23, r6
     ab2:	87 2d       	mov	r24, r7
     ab4:	98 2d       	mov	r25, r8
     ab6:	a9 e0       	ldi	r26, 0x09	; 9
     ab8:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__cmpdi2_s8>
     abc:	09 f0       	breq	.+2      	; 0xac0 <SendDecimalValue+0x72>
     abe:	40 f4       	brcc	.+16     	; 0xad0 <SendDecimalValue+0x82>

			Value = Value / 10;

		}
		
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     ac0:	fe 01       	movw	r30, r28
     ac2:	e9 0d       	add	r30, r9
     ac4:	f1 1d       	adc	r31, r1
     ac6:	82 2f       	mov	r24, r18
     ac8:	80 5d       	subi	r24, 0xD0	; 208
     aca:	81 83       	std	Z+1, r24	; 0x01
		
		Count++;
     acc:	93 94       	inc	r9
     ace:	4b c0       	rjmp	.+150    	; 0xb66 <SendDecimalValue+0x118>

			Value = 0;
		}
		else
		{
			TransmitChar[Count] = Value % 10;
     ad0:	0f 2e       	mov	r0, r31
     ad2:	fa e0       	ldi	r31, 0x0A	; 10
     ad4:	af 2e       	mov	r10, r31
     ad6:	f0 2d       	mov	r31, r0
     ad8:	b1 2c       	mov	r11, r1
     ada:	c1 2c       	mov	r12, r1
     adc:	d1 2c       	mov	r13, r1
     ade:	e1 2c       	mov	r14, r1
     ae0:	f1 2c       	mov	r15, r1
     ae2:	00 e0       	ldi	r16, 0x00	; 0
     ae4:	10 e0       	ldi	r17, 0x00	; 0
     ae6:	cf 5f       	subi	r28, 0xFF	; 255
     ae8:	de 4f       	sbci	r29, 0xFE	; 254
     aea:	28 81       	ld	r18, Y
     aec:	c1 50       	subi	r28, 0x01	; 1
     aee:	d1 40       	sbci	r29, 0x01	; 1
     af0:	32 2d       	mov	r19, r2
     af2:	43 2d       	mov	r20, r3
     af4:	54 2d       	mov	r21, r4
     af6:	65 2d       	mov	r22, r5
     af8:	76 2d       	mov	r23, r6
     afa:	87 2d       	mov	r24, r7
     afc:	98 2d       	mov	r25, r8
     afe:	0e 94 b0 25 	call	0x4b60	; 0x4b60 <__umoddi3>
     b02:	ce 5f       	subi	r28, 0xFE	; 254
     b04:	de 4f       	sbci	r29, 0xFE	; 254
     b06:	28 83       	st	Y, r18
     b08:	c2 50       	subi	r28, 0x02	; 2
     b0a:	d1 40       	sbci	r29, 0x01	; 1

			Value = Value / 10;
     b0c:	cf 5f       	subi	r28, 0xFF	; 255
     b0e:	de 4f       	sbci	r29, 0xFE	; 254
     b10:	28 81       	ld	r18, Y
     b12:	c1 50       	subi	r28, 0x01	; 1
     b14:	d1 40       	sbci	r29, 0x01	; 1
     b16:	32 2d       	mov	r19, r2
     b18:	43 2d       	mov	r20, r3
     b1a:	54 2d       	mov	r21, r4
     b1c:	65 2d       	mov	r22, r5
     b1e:	76 2d       	mov	r23, r6
     b20:	87 2d       	mov	r24, r7
     b22:	98 2d       	mov	r25, r8
     b24:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <__udivdi3>
     b28:	cf 5f       	subi	r28, 0xFF	; 255
     b2a:	de 4f       	sbci	r29, 0xFE	; 254
     b2c:	28 83       	st	Y, r18
     b2e:	c1 50       	subi	r28, 0x01	; 1
     b30:	d1 40       	sbci	r29, 0x01	; 1
     b32:	23 2e       	mov	r2, r19
     b34:	34 2e       	mov	r3, r20
     b36:	45 2e       	mov	r4, r21
     b38:	56 2e       	mov	r5, r22
     b3a:	67 2e       	mov	r6, r23
     b3c:	78 2e       	mov	r7, r24
     b3e:	89 2e       	mov	r8, r25

		}
		
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     b40:	e1 e0       	ldi	r30, 0x01	; 1
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	ec 0f       	add	r30, r28
     b46:	fd 1f       	adc	r31, r29
     b48:	e9 0d       	add	r30, r9
     b4a:	f1 1d       	adc	r31, r1
     b4c:	ce 5f       	subi	r28, 0xFE	; 254
     b4e:	de 4f       	sbci	r29, 0xFE	; 254
     b50:	a8 81       	ld	r26, Y
     b52:	c2 50       	subi	r28, 0x02	; 2
     b54:	d1 40       	sbci	r29, 0x01	; 1
     b56:	a0 5d       	subi	r26, 0xD0	; 208
     b58:	a0 83       	st	Z, r26
		
		Count++;
     b5a:	93 94       	inc	r9

	} while (Value != 0);
     b5c:	a0 e0       	ldi	r26, 0x00	; 0
     b5e:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__cmpdi2_s8>
     b62:	09 f0       	breq	.+2      	; 0xb66 <SendDecimalValue+0x118>
     b64:	9c cf       	rjmp	.-200    	; 0xa9e <SendDecimalValue+0x50>

	while (Count != 0)
     b66:	99 20       	and	r9, r9
     b68:	91 f0       	breq	.+36     	; 0xb8e <SendDecimalValue+0x140>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     b6a:	69 2d       	mov	r22, r9
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	61 50       	subi	r22, 0x01	; 1
     b70:	71 09       	sbc	r23, r1
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	8c 0f       	add	r24, r28
     b78:	9d 1f       	adc	r25, r29
     b7a:	68 0f       	add	r22, r24
     b7c:	79 1f       	adc	r23, r25
     b7e:	21 e0       	ldi	r18, 0x01	; 1
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	50 e0       	ldi	r21, 0x00	; 0
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	ce d3       	rcall	.+1948   	; 0x1326 <UARTTransmitSync>
		
		Count--;
     b8a:	9a 94       	dec	r9
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
     b8c:	71 f7       	brne	.-36     	; 0xb6a <SendDecimalValue+0x11c>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}	
}
     b8e:	ce 5f       	subi	r28, 0xFE	; 254
     b90:	de 4f       	sbci	r29, 0xFE	; 254
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	f8 94       	cli
     b96:	de bf       	out	0x3e, r29	; 62
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	cd bf       	out	0x3d, r28	; 61
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	1f 91       	pop	r17
     ba2:	0f 91       	pop	r16
     ba4:	ff 90       	pop	r15
     ba6:	ef 90       	pop	r14
     ba8:	df 90       	pop	r13
     baa:	cf 90       	pop	r12
     bac:	bf 90       	pop	r11
     bae:	af 90       	pop	r10
     bb0:	9f 90       	pop	r9
     bb2:	8f 90       	pop	r8
     bb4:	7f 90       	pop	r7
     bb6:	6f 90       	pop	r6
     bb8:	5f 90       	pop	r5
     bba:	4f 90       	pop	r4
     bbc:	3f 90       	pop	r3
     bbe:	2f 90       	pop	r2
     bc0:	08 95       	ret

00000bc2 <SendDoubleValue>:

void
SendDoubleValue(double Value)
{
     bc2:	6f 92       	push	r6
     bc4:	7f 92       	push	r7
     bc6:	8f 92       	push	r8
     bc8:	9f 92       	push	r9
     bca:	af 92       	push	r10
     bcc:	bf 92       	push	r11
     bce:	cf 92       	push	r12
     bd0:	df 92       	push	r13
     bd2:	ef 92       	push	r14
     bd4:	ff 92       	push	r15
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <SendDoubleValue+0x1e>
     be0:	1f 92       	push	r1
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
     be6:	6b 01       	movw	r12, r22
     be8:	7c 01       	movw	r14, r24
	
	long long IntPart;
	
	unsigned char FracPart;
	
	unsigned char Dot = '.';
     bea:	8e e2       	ldi	r24, 0x2E	; 46
     bec:	8a 83       	std	Y+2, r24	; 0x02
	
	unsigned char Minus = '-';
     bee:	8d e2       	ldi	r24, 0x2D	; 45
     bf0:	8b 83       	std	Y+3, r24	; 0x03
	
	if (Value < 0)
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	a9 01       	movw	r20, r18
     bf8:	c7 01       	movw	r24, r14
     bfa:	b6 01       	movw	r22, r12
     bfc:	0e 94 64 22 	call	0x44c8	; 0x44c8 <__cmpsf2>
     c00:	88 23       	and	r24, r24
     c02:	6c f4       	brge	.+26     	; 0xc1e <SendDoubleValue+0x5c>
	{
		
		UARTTransmitSync(UART_ZERO, (PVOID) &Minus, 1);
     c04:	21 e0       	ldi	r18, 0x01	; 1
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	40 e0       	ldi	r20, 0x00	; 0
     c0a:	50 e0       	ldi	r21, 0x00	; 0
     c0c:	be 01       	movw	r22, r28
     c0e:	6d 5f       	subi	r22, 0xFD	; 253
     c10:	7f 4f       	sbci	r23, 0xFF	; 255
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	88 d3       	rcall	.+1808   	; 0x1326 <UARTTransmitSync>
		
		Value = Value * -1;
     c16:	f7 fa       	bst	r15, 7
     c18:	f0 94       	com	r15
     c1a:	f7 f8       	bld	r15, 7
     c1c:	f0 94       	com	r15
	}
	
	IntPart = (long long) Value;
     c1e:	c7 01       	movw	r24, r14
     c20:	b6 01       	movw	r22, r12
     c22:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <__fixsfdi>
     c26:	62 2e       	mov	r6, r18
     c28:	73 2e       	mov	r7, r19
     c2a:	84 2e       	mov	r8, r20
     c2c:	95 2e       	mov	r9, r21
     c2e:	a6 2e       	mov	r10, r22
     c30:	b7 2e       	mov	r11, r23
     c32:	08 2f       	mov	r16, r24
     c34:	19 2f       	mov	r17, r25
		
	Value = Value - IntPart;
     c36:	0e 94 3e 23 	call	0x467c	; 0x467c <__floatdisf>
     c3a:	9b 01       	movw	r18, r22
     c3c:	ac 01       	movw	r20, r24
     c3e:	c7 01       	movw	r24, r14
     c40:	b6 01       	movw	r22, r12
     c42:	0e 94 9d 21 	call	0x433a	; 0x433a <__subsf3>
     c46:	6b 01       	movw	r12, r22
     c48:	7c 01       	movw	r14, r24
	
	SendDecimalValue(IntPart);
     c4a:	26 2d       	mov	r18, r6
     c4c:	37 2d       	mov	r19, r7
     c4e:	48 2d       	mov	r20, r8
     c50:	59 2d       	mov	r21, r9
     c52:	6a 2d       	mov	r22, r10
     c54:	7b 2d       	mov	r23, r11
     c56:	80 2f       	mov	r24, r16
     c58:	91 2f       	mov	r25, r17
     c5a:	f9 de       	rcall	.-526    	; 0xa4e <SendDecimalValue>
	
	UARTTransmitSync(UART_ZERO, (PVOID) &Dot, 1);
     c5c:	21 e0       	ldi	r18, 0x01	; 1
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	40 e0       	ldi	r20, 0x00	; 0
     c62:	50 e0       	ldi	r21, 0x00	; 0
     c64:	be 01       	movw	r22, r28
     c66:	6e 5f       	subi	r22, 0xFE	; 254
     c68:	7f 4f       	sbci	r23, 0xFF	; 255
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	5c d3       	rcall	.+1720   	; 0x1326 <UARTTransmitSync>
	
	while (Value != 0)
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	a9 01       	movw	r20, r18
     c74:	c7 01       	movw	r24, r14
     c76:	b6 01       	movw	r22, r12
     c78:	0e 94 64 22 	call	0x44c8	; 0x44c8 <__cmpsf2>
     c7c:	88 23       	and	r24, r24
     c7e:	71 f1       	breq	.+92     	; 0xcdc <SendDoubleValue+0x11a>
	{
		FracPart = (Value * 10);
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	40 e2       	ldi	r20, 0x20	; 32
     c86:	51 e4       	ldi	r21, 0x41	; 65
     c88:	c7 01       	movw	r24, r14
     c8a:	b6 01       	movw	r22, r12
     c8c:	0e 94 ab 24 	call	0x4956	; 0x4956 <__mulsf3>
     c90:	6b 01       	movw	r12, r22
     c92:	7c 01       	movw	r14, r24
     c94:	0e 94 12 23 	call	0x4624	; 0x4624 <__fixunssfsi>
     c98:	16 2f       	mov	r17, r22
		
		Value = (Value * 10) - FracPart;
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 44 23 	call	0x4688	; 0x4688 <__floatsisf>
     ca4:	9b 01       	movw	r18, r22
     ca6:	ac 01       	movw	r20, r24
     ca8:	c7 01       	movw	r24, r14
     caa:	b6 01       	movw	r22, r12
     cac:	0e 94 9d 21 	call	0x433a	; 0x433a <__subsf3>
     cb0:	6b 01       	movw	r12, r22
     cb2:	7c 01       	movw	r14, r24
		
		FracPart = FracPart + ASCII_DECIMAL_CONVERSION;
     cb4:	10 5d       	subi	r17, 0xD0	; 208
     cb6:	19 83       	std	Y+1, r17	; 0x01
		
		UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
     cb8:	21 e0       	ldi	r18, 0x01	; 1
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	40 e0       	ldi	r20, 0x00	; 0
     cbe:	50 e0       	ldi	r21, 0x00	; 0
     cc0:	be 01       	movw	r22, r28
     cc2:	6f 5f       	subi	r22, 0xFF	; 255
     cc4:	7f 4f       	sbci	r23, 0xFF	; 255
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	2e d3       	rcall	.+1628   	; 0x1326 <UARTTransmitSync>
	
	SendDecimalValue(IntPart);
	
	UARTTransmitSync(UART_ZERO, (PVOID) &Dot, 1);
	
	while (Value != 0)
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	a9 01       	movw	r20, r18
     cd0:	c7 01       	movw	r24, r14
     cd2:	b6 01       	movw	r22, r12
     cd4:	0e 94 64 22 	call	0x44c8	; 0x44c8 <__cmpsf2>
     cd8:	81 11       	cpse	r24, r1
     cda:	d2 cf       	rjmp	.-92     	; 0xc80 <SendDoubleValue+0xbe>
	
	//
	// Print 0
	//
	
	FracPart = ASCII_DECIMAL_CONVERSION;
     cdc:	80 e3       	ldi	r24, 0x30	; 48
     cde:	89 83       	std	Y+1, r24	; 0x01
	
	UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
     ce0:	21 e0       	ldi	r18, 0x01	; 1
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	40 e0       	ldi	r20, 0x00	; 0
     ce6:	50 e0       	ldi	r21, 0x00	; 0
     ce8:	be 01       	movw	r22, r28
     cea:	6f 5f       	subi	r22, 0xFF	; 255
     cec:	7f 4f       	sbci	r23, 0xFF	; 255
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	1a d3       	rcall	.+1588   	; 0x1326 <UARTTransmitSync>
}
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	1f 91       	pop	r17
     cfe:	0f 91       	pop	r16
     d00:	ff 90       	pop	r15
     d02:	ef 90       	pop	r14
     d04:	df 90       	pop	r13
     d06:	cf 90       	pop	r12
     d08:	bf 90       	pop	r11
     d0a:	af 90       	pop	r10
     d0c:	9f 90       	pop	r9
     d0e:	8f 90       	pop	r8
     d10:	7f 90       	pop	r7
     d12:	6f 90       	pop	r6
     d14:	08 95       	ret

00000d16 <SendSignedDecimalValue>:

void
SendSignedDecimalValue(long long Value)
{
     d16:	2f 92       	push	r2
     d18:	3f 92       	push	r3
     d1a:	4f 92       	push	r4
     d1c:	5f 92       	push	r5
     d1e:	6f 92       	push	r6
     d20:	7f 92       	push	r7
     d22:	8f 92       	push	r8
     d24:	9f 92       	push	r9
     d26:	af 92       	push	r10
     d28:	bf 92       	push	r11
     d2a:	cf 92       	push	r12
     d2c:	df 92       	push	r13
     d2e:	ef 92       	push	r14
     d30:	ff 92       	push	r15
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	c3 50       	subi	r28, 0x03	; 3
     d40:	d1 40       	sbci	r29, 0x01	; 1
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	f8 94       	cli
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	cd bf       	out	0x3d, r28	; 61
     d4c:	ce 5f       	subi	r28, 0xFE	; 254
     d4e:	de 4f       	sbci	r29, 0xFE	; 254
     d50:	28 83       	st	Y, r18
     d52:	c2 50       	subi	r28, 0x02	; 2
     d54:	d1 40       	sbci	r29, 0x01	; 1
     d56:	83 2e       	mov	r8, r19
     d58:	74 2e       	mov	r7, r20
     d5a:	65 2e       	mov	r6, r21
     d5c:	56 2e       	mov	r5, r22
     d5e:	47 2e       	mov	r4, r23
     d60:	38 2e       	mov	r3, r24
     d62:	29 2e       	mov	r2, r25
	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
	
	unsigned char Minus = '-';
     d64:	8d e2       	ldi	r24, 0x2D	; 45
     d66:	cf 5f       	subi	r28, 0xFF	; 255
     d68:	de 4f       	sbci	r29, 0xFE	; 254
     d6a:	88 83       	st	Y, r24
     d6c:	c1 50       	subi	r28, 0x01	; 1
     d6e:	d1 40       	sbci	r29, 0x01	; 1

	//
	// If the value is negative, print - sign and make the value positive.
	//

	if (Value < 0)
     d70:	83 2d       	mov	r24, r3
     d72:	a0 e0       	ldi	r26, 0x00	; 0
     d74:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__cmpdi2_s8>
     d78:	1c f5       	brge	.+70     	; 0xdc0 <SendSignedDecimalValue+0xaa>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &Minus, 1);
     d7a:	21 e0       	ldi	r18, 0x01	; 1
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	40 e0       	ldi	r20, 0x00	; 0
     d80:	50 e0       	ldi	r21, 0x00	; 0
     d82:	be 01       	movw	r22, r28
     d84:	6f 5f       	subi	r22, 0xFF	; 255
     d86:	7e 4f       	sbci	r23, 0xFE	; 254
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	cd d2       	rcall	.+1434   	; 0x1326 <UARTTransmitSync>

		Value *= -1;
     d8c:	ce 5f       	subi	r28, 0xFE	; 254
     d8e:	de 4f       	sbci	r29, 0xFE	; 254
     d90:	28 81       	ld	r18, Y
     d92:	c2 50       	subi	r28, 0x02	; 2
     d94:	d1 40       	sbci	r29, 0x01	; 1
     d96:	38 2d       	mov	r19, r8
     d98:	47 2d       	mov	r20, r7
     d9a:	56 2d       	mov	r21, r6
     d9c:	65 2d       	mov	r22, r5
     d9e:	74 2d       	mov	r23, r4
     da0:	83 2d       	mov	r24, r3
     da2:	92 2d       	mov	r25, r2
     da4:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <__negdi2>
     da8:	ce 5f       	subi	r28, 0xFE	; 254
     daa:	de 4f       	sbci	r29, 0xFE	; 254
     dac:	28 83       	st	Y, r18
     dae:	c2 50       	subi	r28, 0x02	; 2
     db0:	d1 40       	sbci	r29, 0x01	; 1
     db2:	83 2e       	mov	r8, r19
     db4:	74 2e       	mov	r7, r20
     db6:	65 2e       	mov	r6, r21
     db8:	56 2e       	mov	r5, r22
     dba:	47 2e       	mov	r4, r23
     dbc:	38 2e       	mov	r3, r24
     dbe:	29 2e       	mov	r2, r25
	UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
}

void
SendSignedDecimalValue(long long Value)
{
     dc0:	91 2c       	mov	r9, r1
	}

	do
	{

		if (Value < 10)
     dc2:	ce 5f       	subi	r28, 0xFE	; 254
     dc4:	de 4f       	sbci	r29, 0xFE	; 254
     dc6:	28 81       	ld	r18, Y
     dc8:	c2 50       	subi	r28, 0x02	; 2
     dca:	d1 40       	sbci	r29, 0x01	; 1
     dcc:	38 2d       	mov	r19, r8
     dce:	47 2d       	mov	r20, r7
     dd0:	56 2d       	mov	r21, r6
     dd2:	65 2d       	mov	r22, r5
     dd4:	74 2d       	mov	r23, r4
     dd6:	83 2d       	mov	r24, r3
     dd8:	92 2d       	mov	r25, r2
     dda:	a9 e0       	ldi	r26, 0x09	; 9
     ddc:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__cmpdi2_s8>
     de0:	09 f0       	breq	.+2      	; 0xde4 <SendSignedDecimalValue+0xce>
     de2:	44 f4       	brge	.+16     	; 0xdf4 <SendSignedDecimalValue+0xde>

			Value = Value / 10;

		}
	
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     de4:	fe 01       	movw	r30, r28
     de6:	e9 0d       	add	r30, r9
     de8:	f1 1d       	adc	r31, r1
     dea:	82 2f       	mov	r24, r18
     dec:	80 5d       	subi	r24, 0xD0	; 208
     dee:	81 83       	std	Z+1, r24	; 0x01
		
		Count++;
     df0:	93 94       	inc	r9
     df2:	4b c0       	rjmp	.+150    	; 0xe8a <SendSignedDecimalValue+0x174>

			Value = 0;
		}
		else
		{
			TransmitChar[Count] = Value % 10;
     df4:	0f 2e       	mov	r0, r31
     df6:	fa e0       	ldi	r31, 0x0A	; 10
     df8:	af 2e       	mov	r10, r31
     dfa:	f0 2d       	mov	r31, r0
     dfc:	b1 2c       	mov	r11, r1
     dfe:	c1 2c       	mov	r12, r1
     e00:	d1 2c       	mov	r13, r1
     e02:	e1 2c       	mov	r14, r1
     e04:	f1 2c       	mov	r15, r1
     e06:	00 e0       	ldi	r16, 0x00	; 0
     e08:	10 e0       	ldi	r17, 0x00	; 0
     e0a:	ce 5f       	subi	r28, 0xFE	; 254
     e0c:	de 4f       	sbci	r29, 0xFE	; 254
     e0e:	28 81       	ld	r18, Y
     e10:	c2 50       	subi	r28, 0x02	; 2
     e12:	d1 40       	sbci	r29, 0x01	; 1
     e14:	38 2d       	mov	r19, r8
     e16:	47 2d       	mov	r20, r7
     e18:	56 2d       	mov	r21, r6
     e1a:	65 2d       	mov	r22, r5
     e1c:	74 2d       	mov	r23, r4
     e1e:	83 2d       	mov	r24, r3
     e20:	92 2d       	mov	r25, r2
     e22:	0e 94 85 25 	call	0x4b0a	; 0x4b0a <__moddi3>
     e26:	cd 5f       	subi	r28, 0xFD	; 253
     e28:	de 4f       	sbci	r29, 0xFE	; 254
     e2a:	28 83       	st	Y, r18
     e2c:	c3 50       	subi	r28, 0x03	; 3
     e2e:	d1 40       	sbci	r29, 0x01	; 1

			Value = Value / 10;
     e30:	ce 5f       	subi	r28, 0xFE	; 254
     e32:	de 4f       	sbci	r29, 0xFE	; 254
     e34:	28 81       	ld	r18, Y
     e36:	c2 50       	subi	r28, 0x02	; 2
     e38:	d1 40       	sbci	r29, 0x01	; 1
     e3a:	38 2d       	mov	r19, r8
     e3c:	47 2d       	mov	r20, r7
     e3e:	56 2d       	mov	r21, r6
     e40:	65 2d       	mov	r22, r5
     e42:	74 2d       	mov	r23, r4
     e44:	83 2d       	mov	r24, r3
     e46:	92 2d       	mov	r25, r2
     e48:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <__divdi3>
     e4c:	ce 5f       	subi	r28, 0xFE	; 254
     e4e:	de 4f       	sbci	r29, 0xFE	; 254
     e50:	28 83       	st	Y, r18
     e52:	c2 50       	subi	r28, 0x02	; 2
     e54:	d1 40       	sbci	r29, 0x01	; 1
     e56:	83 2e       	mov	r8, r19
     e58:	74 2e       	mov	r7, r20
     e5a:	65 2e       	mov	r6, r21
     e5c:	56 2e       	mov	r5, r22
     e5e:	47 2e       	mov	r4, r23
     e60:	38 2e       	mov	r3, r24
     e62:	29 2e       	mov	r2, r25

		}
	
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     e64:	e1 e0       	ldi	r30, 0x01	; 1
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	ec 0f       	add	r30, r28
     e6a:	fd 1f       	adc	r31, r29
     e6c:	e9 0d       	add	r30, r9
     e6e:	f1 1d       	adc	r31, r1
     e70:	cd 5f       	subi	r28, 0xFD	; 253
     e72:	de 4f       	sbci	r29, 0xFE	; 254
     e74:	a8 81       	ld	r26, Y
     e76:	c3 50       	subi	r28, 0x03	; 3
     e78:	d1 40       	sbci	r29, 0x01	; 1
     e7a:	a0 5d       	subi	r26, 0xD0	; 208
     e7c:	a0 83       	st	Z, r26
		
		Count++;
     e7e:	93 94       	inc	r9

	} while (Value != 0);
     e80:	a0 e0       	ldi	r26, 0x00	; 0
     e82:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <__cmpdi2_s8>
     e86:	09 f0       	breq	.+2      	; 0xe8a <SendSignedDecimalValue+0x174>
     e88:	9c cf       	rjmp	.-200    	; 0xdc2 <SendSignedDecimalValue+0xac>

	while (Count != 0)
     e8a:	99 20       	and	r9, r9
     e8c:	91 f0       	breq	.+36     	; 0xeb2 <SendSignedDecimalValue+0x19c>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     e8e:	69 2d       	mov	r22, r9
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	61 50       	subi	r22, 0x01	; 1
     e94:	71 09       	sbc	r23, r1
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	8c 0f       	add	r24, r28
     e9c:	9d 1f       	adc	r25, r29
     e9e:	68 0f       	add	r22, r24
     ea0:	79 1f       	adc	r23, r25
     ea2:	21 e0       	ldi	r18, 0x01	; 1
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	40 e0       	ldi	r20, 0x00	; 0
     ea8:	50 e0       	ldi	r21, 0x00	; 0
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	3c d2       	rcall	.+1144   	; 0x1326 <UARTTransmitSync>
		
		Count--;
     eae:	9a 94       	dec	r9
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
     eb0:	71 f7       	brne	.-36     	; 0xe8e <SendSignedDecimalValue+0x178>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}
}
     eb2:	cd 5f       	subi	r28, 0xFD	; 253
     eb4:	de 4f       	sbci	r29, 0xFE	; 254
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	ff 90       	pop	r15
     eca:	ef 90       	pop	r14
     ecc:	df 90       	pop	r13
     ece:	cf 90       	pop	r12
     ed0:	bf 90       	pop	r11
     ed2:	af 90       	pop	r10
     ed4:	9f 90       	pop	r9
     ed6:	8f 90       	pop	r8
     ed8:	7f 90       	pop	r7
     eda:	6f 90       	pop	r6
     edc:	5f 90       	pop	r5
     ede:	4f 90       	pop	r4
     ee0:	3f 90       	pop	r3
     ee2:	2f 90       	pop	r2
     ee4:	08 95       	ret

00000ee6 <SendTrace>:
	}
}

void
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{
     ee6:	3f 92       	push	r3
     ee8:	4f 92       	push	r4
     eea:	5f 92       	push	r5
     eec:	6f 92       	push	r6
     eee:	7f 92       	push	r7
     ef0:	8f 92       	push	r8
     ef2:	9f 92       	push	r9
     ef4:	af 92       	push	r10
     ef6:	bf 92       	push	r11
     ef8:	cf 92       	push	r12
     efa:	df 92       	push	r13
     efc:	ef 92       	push	r14
     efe:	ff 92       	push	r15
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	1f 92       	push	r1
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	0e 89       	ldd	r16, Y+22	; 0x16
     f10:	1f 89       	ldd	r17, Y+23	; 0x17
	
	char Character;

	va_list ArgList;

	if (!gTraceInitialized || !(TraceLevel & gTraceLevel))
     f12:	80 91 da 15 	lds	r24, 0x15DA
     f16:	88 23       	and	r24, r24
     f18:	09 f4       	brne	.+2      	; 0xf1c <SendTrace+0x36>
     f1a:	1c c1       	rjmp	.+568    	; 0x1154 <SendTrace+0x26e>
     f1c:	80 91 0a 16 	lds	r24, 0x160A
     f20:	9d 89       	ldd	r25, Y+21	; 0x15
     f22:	89 23       	and	r24, r25
     f24:	09 f4       	brne	.+2      	; 0xf28 <SendTrace+0x42>
     f26:	16 c1       	rjmp	.+556    	; 0x1154 <SendTrace+0x26e>
	{
		return;
	}

	va_start(ArgList, String);
     f28:	7e 01       	movw	r14, r28
     f2a:	28 e1       	ldi	r18, 0x18	; 24
     f2c:	e2 0e       	add	r14, r18
     f2e:	f1 1c       	adc	r15, r1

	while (*String != '\0')
     f30:	f8 01       	movw	r30, r16
     f32:	20 81       	ld	r18, Z
     f34:	22 23       	and	r18, r18
     f36:	09 f4       	brne	.+2      	; 0xf3a <SendTrace+0x54>
     f38:	0d c1       	rjmp	.+538    	; 0x1154 <SendTrace+0x26e>
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{

	bool IsLong = FALSE;
	
	bool IsLongLong = FALSE;
     f3a:	41 2c       	mov	r4, r1

void
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{

	bool IsLong = FALSE;
     f3c:	d1 2c       	mov	r13, r1
						IsLong = FALSE;
					}
					
					SendDoubleValue(va_arg(ArgList, double));
					
					break;
     f3e:	51 2c       	mov	r5, r1
						
						IsLong = FALSE;
					}
					else
					{
						IsLong = TRUE;
     f40:	33 24       	eor	r3, r3
     f42:	33 94       	inc	r3
	va_start(ArgList, String);

	while (*String != '\0')
	{

		if (*String == '%' || IsLong || IsLongLong)
     f44:	25 32       	cpi	r18, 0x25	; 37
     f46:	29 f0       	breq	.+10     	; 0xf52 <SendTrace+0x6c>
     f48:	d1 10       	cpse	r13, r1
     f4a:	05 c0       	rjmp	.+10     	; 0xf56 <SendTrace+0x70>
     f4c:	41 10       	cpse	r4, r1
     f4e:	03 c0       	rjmp	.+6      	; 0xf56 <SendTrace+0x70>
     f50:	f0 c0       	rjmp	.+480    	; 0x1132 <SendTrace+0x24c>
		{

			if (*String == '%')
			{
				String++;
     f52:	0f 5f       	subi	r16, 0xFF	; 255
     f54:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			switch (*String)
     f56:	f8 01       	movw	r30, r16
     f58:	80 81       	ld	r24, Z
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	fc 01       	movw	r30, r24
     f5e:	e3 56       	subi	r30, 0x63	; 99
     f60:	f1 09       	sbc	r31, r1
     f62:	e6 31       	cpi	r30, 0x16	; 22
     f64:	f1 05       	cpc	r31, r1
     f66:	08 f0       	brcs	.+2      	; 0xf6a <SendTrace+0x84>
     f68:	ed c0       	rjmp	.+474    	; 0x1144 <SendTrace+0x25e>
     f6a:	ea 5b       	subi	r30, 0xBA	; 186
     f6c:	ff 4f       	sbci	r31, 0xFF	; 255
     f6e:	0c 94 7f 25 	jmp	0x4afe	; 0x4afe <__tablejump2__>
			{
				case 'c':
				{

					Character = va_arg(ArgList, int);
     f72:	57 01       	movw	r10, r14
     f74:	f2 e0       	ldi	r31, 0x02	; 2
     f76:	af 0e       	add	r10, r31
     f78:	b1 1c       	adc	r11, r1
     f7a:	f7 01       	movw	r30, r14
     f7c:	80 81       	ld	r24, Z
     f7e:	89 83       	std	Y+1, r24	; 0x01
					
					UARTTransmitSync(UART_ZERO, (PVOID) &Character, 1);
     f80:	21 e0       	ldi	r18, 0x01	; 1
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	40 e0       	ldi	r20, 0x00	; 0
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	be 01       	movw	r22, r28
     f8a:	6f 5f       	subi	r22, 0xFF	; 255
     f8c:	7f 4f       	sbci	r23, 0xFF	; 255
     f8e:	85 2d       	mov	r24, r5
     f90:	ca d1       	rcall	.+916    	; 0x1326 <UARTTransmitSync>
			switch (*String)
			{
				case 'c':
				{

					Character = va_arg(ArgList, int);
     f92:	75 01       	movw	r14, r10
					
					UARTTransmitSync(UART_ZERO, (PVOID) &Character, 1);

					break;
     f94:	d7 c0       	rjmp	.+430    	; 0x1144 <SendTrace+0x25e>

				}
				case 'd':
				{

					if (IsLong)
     f96:	dd 20       	and	r13, r13
     f98:	d9 f0       	breq	.+54     	; 0xfd0 <SendTrace+0xea>
					{

						SendSignedDecimalValue(va_arg(ArgList, long));
     f9a:	67 01       	movw	r12, r14
     f9c:	f4 e0       	ldi	r31, 0x04	; 4
     f9e:	cf 0e       	add	r12, r31
     fa0:	d1 1c       	adc	r13, r1
     fa2:	f7 01       	movw	r30, r14
     fa4:	80 81       	ld	r24, Z
     fa6:	91 81       	ldd	r25, Z+1	; 0x01
     fa8:	a2 81       	ldd	r26, Z+2	; 0x02
     faa:	b3 81       	ldd	r27, Z+3	; 0x03
     fac:	4c 01       	movw	r8, r24
     fae:	5d 01       	movw	r10, r26
     fb0:	bb 0c       	add	r11, r11
     fb2:	88 08       	sbc	r8, r8
     fb4:	98 2c       	mov	r9, r8
     fb6:	54 01       	movw	r10, r8
     fb8:	28 2f       	mov	r18, r24
     fba:	39 2f       	mov	r19, r25
     fbc:	4a 2f       	mov	r20, r26
     fbe:	5b 2f       	mov	r21, r27
     fc0:	68 2d       	mov	r22, r8
     fc2:	78 2d       	mov	r23, r8
     fc4:	88 2d       	mov	r24, r8
     fc6:	98 2d       	mov	r25, r8
     fc8:	a6 de       	rcall	.-692    	; 0xd16 <SendSignedDecimalValue>
     fca:	76 01       	movw	r14, r12

						IsLong = FALSE;
     fcc:	d5 2c       	mov	r13, r5
     fce:	ba c0       	rjmp	.+372    	; 0x1144 <SendTrace+0x25e>

					}
					else if (IsLongLong)
     fd0:	44 20       	and	r4, r4
     fd2:	89 f0       	breq	.+34     	; 0xff6 <SendTrace+0x110>
					{
						SendSignedDecimalValue(va_arg(ArgList, long long));
     fd4:	57 01       	movw	r10, r14
     fd6:	f8 e0       	ldi	r31, 0x08	; 8
     fd8:	af 0e       	add	r10, r31
     fda:	b1 1c       	adc	r11, r1
     fdc:	f7 01       	movw	r30, r14
     fde:	20 81       	ld	r18, Z
     fe0:	31 81       	ldd	r19, Z+1	; 0x01
     fe2:	42 81       	ldd	r20, Z+2	; 0x02
     fe4:	53 81       	ldd	r21, Z+3	; 0x03
     fe6:	64 81       	ldd	r22, Z+4	; 0x04
     fe8:	75 81       	ldd	r23, Z+5	; 0x05
     fea:	86 81       	ldd	r24, Z+6	; 0x06
     fec:	97 81       	ldd	r25, Z+7	; 0x07
     fee:	93 de       	rcall	.-730    	; 0xd16 <SendSignedDecimalValue>
     ff0:	75 01       	movw	r14, r10

						IsLongLong = FALSE;
     ff2:	45 2c       	mov	r4, r5
     ff4:	a7 c0       	rjmp	.+334    	; 0x1144 <SendTrace+0x25e>
					}
					else
					{

						SendSignedDecimalValue(va_arg(ArgList, int));
     ff6:	57 01       	movw	r10, r14
     ff8:	f2 e0       	ldi	r31, 0x02	; 2
     ffa:	af 0e       	add	r10, r31
     ffc:	b1 1c       	adc	r11, r1
     ffe:	f7 01       	movw	r30, r14
    1000:	31 81       	ldd	r19, Z+1	; 0x01
    1002:	20 81       	ld	r18, Z
    1004:	93 2f       	mov	r25, r19
    1006:	99 0f       	add	r25, r25
    1008:	99 0b       	sbc	r25, r25
    100a:	49 2f       	mov	r20, r25
    100c:	59 2f       	mov	r21, r25
    100e:	69 2f       	mov	r22, r25
    1010:	79 2f       	mov	r23, r25
    1012:	89 2f       	mov	r24, r25
    1014:	80 de       	rcall	.-768    	; 0xd16 <SendSignedDecimalValue>
    1016:	75 01       	movw	r14, r10
    1018:	95 c0       	rjmp	.+298    	; 0x1144 <SendTrace+0x25e>
					break;
				}
				case 'u':
				{

					if(IsLong)
    101a:	dd 20       	and	r13, r13
    101c:	b9 f0       	breq	.+46     	; 0x104c <SendTrace+0x166>
					{

						SendDecimalValue(va_arg(ArgList, unsigned long));
    101e:	37 01       	movw	r6, r14
    1020:	f4 e0       	ldi	r31, 0x04	; 4
    1022:	6f 0e       	add	r6, r31
    1024:	71 1c       	adc	r7, r1
    1026:	f7 01       	movw	r30, r14
    1028:	80 81       	ld	r24, Z
    102a:	91 81       	ldd	r25, Z+1	; 0x01
    102c:	a2 81       	ldd	r26, Z+2	; 0x02
    102e:	b3 81       	ldd	r27, Z+3	; 0x03
    1030:	4c 01       	movw	r8, r24
    1032:	5d 01       	movw	r10, r26
    1034:	28 2f       	mov	r18, r24
    1036:	39 2d       	mov	r19, r9
    1038:	4a 2d       	mov	r20, r10
    103a:	5b 2d       	mov	r21, r11
    103c:	65 2d       	mov	r22, r5
    103e:	75 2d       	mov	r23, r5
    1040:	85 2d       	mov	r24, r5
    1042:	95 2d       	mov	r25, r5
    1044:	04 dd       	rcall	.-1528   	; 0xa4e <SendDecimalValue>
    1046:	73 01       	movw	r14, r6
						
						IsLong = FALSE;
    1048:	d5 2c       	mov	r13, r5
    104a:	7c c0       	rjmp	.+248    	; 0x1144 <SendTrace+0x25e>
					
					}
					else if(IsLongLong)
    104c:	44 20       	and	r4, r4
    104e:	89 f0       	breq	.+34     	; 0x1072 <SendTrace+0x18c>
					{
						SendDecimalValue(va_arg(ArgList, unsigned long long));
    1050:	57 01       	movw	r10, r14
    1052:	f8 e0       	ldi	r31, 0x08	; 8
    1054:	af 0e       	add	r10, r31
    1056:	b1 1c       	adc	r11, r1
    1058:	f7 01       	movw	r30, r14
    105a:	20 81       	ld	r18, Z
    105c:	31 81       	ldd	r19, Z+1	; 0x01
    105e:	42 81       	ldd	r20, Z+2	; 0x02
    1060:	53 81       	ldd	r21, Z+3	; 0x03
    1062:	64 81       	ldd	r22, Z+4	; 0x04
    1064:	75 81       	ldd	r23, Z+5	; 0x05
    1066:	86 81       	ldd	r24, Z+6	; 0x06
    1068:	97 81       	ldd	r25, Z+7	; 0x07
    106a:	f1 dc       	rcall	.-1566   	; 0xa4e <SendDecimalValue>
    106c:	75 01       	movw	r14, r10
						
						IsLongLong = FALSE;
    106e:	45 2c       	mov	r4, r5
    1070:	69 c0       	rjmp	.+210    	; 0x1144 <SendTrace+0x25e>
					}
					else
					{

						SendDecimalValue(va_arg(ArgList, unsigned int));
    1072:	f7 01       	movw	r30, r14
    1074:	40 81       	ld	r20, Z
    1076:	51 81       	ldd	r21, Z+1	; 0x01
    1078:	f2 e0       	ldi	r31, 0x02	; 2
    107a:	ef 0e       	add	r14, r31
    107c:	f1 1c       	adc	r15, r1
    107e:	24 2f       	mov	r18, r20
    1080:	35 2f       	mov	r19, r21
    1082:	45 2d       	mov	r20, r5
    1084:	55 2d       	mov	r21, r5
    1086:	65 2d       	mov	r22, r5
    1088:	75 2d       	mov	r23, r5
    108a:	85 2d       	mov	r24, r5
    108c:	95 2d       	mov	r25, r5
    108e:	df dc       	rcall	.-1602   	; 0xa4e <SendDecimalValue>
    1090:	59 c0       	rjmp	.+178    	; 0x1144 <SendTrace+0x25e>
					break;
				}
				case 'x':
				{

					if (IsLong)
    1092:	dd 20       	and	r13, r13
    1094:	a9 f0       	breq	.+42     	; 0x10c0 <SendTrace+0x1da>
					{

						SendHexValue(va_arg(ArgList, unsigned long));
    1096:	f7 01       	movw	r30, r14
    1098:	80 81       	ld	r24, Z
    109a:	91 81       	ldd	r25, Z+1	; 0x01
    109c:	a2 81       	ldd	r26, Z+2	; 0x02
    109e:	b3 81       	ldd	r27, Z+3	; 0x03
    10a0:	24 e0       	ldi	r18, 0x04	; 4
    10a2:	e2 0e       	add	r14, r18
    10a4:	f1 1c       	adc	r15, r1
    10a6:	3c 01       	movw	r6, r24
    10a8:	4d 01       	movw	r8, r26
    10aa:	28 2f       	mov	r18, r24
    10ac:	37 2d       	mov	r19, r7
    10ae:	48 2d       	mov	r20, r8
    10b0:	59 2d       	mov	r21, r9
    10b2:	65 2d       	mov	r22, r5
    10b4:	75 2d       	mov	r23, r5
    10b6:	85 2d       	mov	r24, r5
    10b8:	95 2d       	mov	r25, r5
    10ba:	26 dc       	rcall	.-1972   	; 0x908 <SendHexValue>

						IsLong = FALSE;
    10bc:	d5 2c       	mov	r13, r5
    10be:	42 c0       	rjmp	.+132    	; 0x1144 <SendTrace+0x25e>

					}
					else if (IsLongLong)
    10c0:	44 20       	and	r4, r4
    10c2:	79 f0       	breq	.+30     	; 0x10e2 <SendTrace+0x1fc>
					{
						SendHexValue(va_arg(ArgList, unsigned long long));
    10c4:	f7 01       	movw	r30, r14
    10c6:	20 81       	ld	r18, Z
    10c8:	88 e0       	ldi	r24, 0x08	; 8
    10ca:	e8 0e       	add	r14, r24
    10cc:	f1 1c       	adc	r15, r1
    10ce:	31 81       	ldd	r19, Z+1	; 0x01
    10d0:	42 81       	ldd	r20, Z+2	; 0x02
    10d2:	53 81       	ldd	r21, Z+3	; 0x03
    10d4:	64 81       	ldd	r22, Z+4	; 0x04
    10d6:	75 81       	ldd	r23, Z+5	; 0x05
    10d8:	86 81       	ldd	r24, Z+6	; 0x06
    10da:	97 81       	ldd	r25, Z+7	; 0x07
    10dc:	15 dc       	rcall	.-2006   	; 0x908 <SendHexValue>
						
						IsLongLong = FALSE;
    10de:	45 2c       	mov	r4, r5
    10e0:	31 c0       	rjmp	.+98     	; 0x1144 <SendTrace+0x25e>
					}
					else
					{

						SendHexValue(va_arg(ArgList, unsigned int));
    10e2:	f7 01       	movw	r30, r14
    10e4:	40 81       	ld	r20, Z
    10e6:	51 81       	ldd	r21, Z+1	; 0x01
    10e8:	e2 e0       	ldi	r30, 0x02	; 2
    10ea:	ee 0e       	add	r14, r30
    10ec:	f1 1c       	adc	r15, r1
    10ee:	24 2f       	mov	r18, r20
    10f0:	35 2f       	mov	r19, r21
    10f2:	45 2d       	mov	r20, r5
    10f4:	55 2d       	mov	r21, r5
    10f6:	65 2d       	mov	r22, r5
    10f8:	75 2d       	mov	r23, r5
    10fa:	85 2d       	mov	r24, r5
    10fc:	95 2d       	mov	r25, r5
    10fe:	04 dc       	rcall	.-2040   	; 0x908 <SendHexValue>
    1100:	21 c0       	rjmp	.+66     	; 0x1144 <SendTrace+0x25e>
					break;
				}
				case 'l':
				{

					if (IsLong)
    1102:	dd 20       	and	r13, r13
    1104:	f1 f0       	breq	.+60     	; 0x1142 <SendTrace+0x25c>
					{
						IsLongLong = TRUE;
    1106:	43 2c       	mov	r4, r3
						
						IsLong = FALSE;
    1108:	d5 2c       	mov	r13, r5
    110a:	1c c0       	rjmp	.+56     	; 0x1144 <SendTrace+0x25e>
					break;
				}
				case 's':
				{
					
					SendStringValue(va_arg(ArgList, char *)); 
    110c:	f7 01       	movw	r30, r14
    110e:	80 81       	ld	r24, Z
    1110:	91 81       	ldd	r25, Z+1	; 0x01
    1112:	f2 e0       	ldi	r31, 0x02	; 2
    1114:	ef 0e       	add	r14, r31
    1116:	f1 1c       	adc	r15, r1
    1118:	e9 db       	rcall	.-2094   	; 0x8ec <SendStringValue>

					break;
    111a:	14 c0       	rjmp	.+40     	; 0x1144 <SendTrace+0x25e>
					if(IsLong)
					{
						IsLong = FALSE;
					}
					
					SendDoubleValue(va_arg(ArgList, double));
    111c:	f7 01       	movw	r30, r14
    111e:	60 81       	ld	r22, Z
    1120:	71 81       	ldd	r23, Z+1	; 0x01
    1122:	82 81       	ldd	r24, Z+2	; 0x02
    1124:	93 81       	ldd	r25, Z+3	; 0x03
    1126:	24 e0       	ldi	r18, 0x04	; 4
    1128:	e2 0e       	add	r14, r18
    112a:	f1 1c       	adc	r15, r1
    112c:	4a dd       	rcall	.-1388   	; 0xbc2 <SendDoubleValue>
					
					break;
    112e:	d5 2c       	mov	r13, r5
    1130:	09 c0       	rjmp	.+18     	; 0x1144 <SendTrace+0x25e>

		}
		else
		{

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
    1132:	21 e0       	ldi	r18, 0x01	; 1
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	40 e0       	ldi	r20, 0x00	; 0
    1138:	50 e0       	ldi	r21, 0x00	; 0
    113a:	b8 01       	movw	r22, r16
    113c:	85 2d       	mov	r24, r5
    113e:	f3 d0       	rcall	.+486    	; 0x1326 <UARTTransmitSync>
    1140:	01 c0       	rjmp	.+2      	; 0x1144 <SendTrace+0x25e>
						
						IsLong = FALSE;
					}
					else
					{
						IsLong = TRUE;
    1142:	d3 2c       	mov	r13, r3

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
				
		}

		String++;
    1144:	c8 01       	movw	r24, r16
    1146:	01 96       	adiw	r24, 0x01	; 1
		return;
	}

	va_start(ArgList, String);

	while (*String != '\0')
    1148:	f8 01       	movw	r30, r16
    114a:	21 81       	ldd	r18, Z+1	; 0x01
    114c:	22 23       	and	r18, r18
    114e:	11 f0       	breq	.+4      	; 0x1154 <SendTrace+0x26e>

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
				
		}

		String++;
    1150:	8c 01       	movw	r16, r24
    1152:	f8 ce       	rjmp	.-528    	; 0xf44 <SendTrace+0x5e>
		
	}
	
	va_end(ArgList);
	
}
    1154:	0f 90       	pop	r0
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	1f 91       	pop	r17
    115c:	0f 91       	pop	r16
    115e:	ff 90       	pop	r15
    1160:	ef 90       	pop	r14
    1162:	df 90       	pop	r13
    1164:	cf 90       	pop	r12
    1166:	bf 90       	pop	r11
    1168:	af 90       	pop	r10
    116a:	9f 90       	pop	r9
    116c:	8f 90       	pop	r8
    116e:	7f 90       	pop	r7
    1170:	6f 90       	pop	r6
    1172:	5f 90       	pop	r5
    1174:	4f 90       	pop	r4
    1176:	3f 90       	pop	r3
    1178:	08 95       	ret

0000117a <InitializeUARTTimer>:

unsigned long
UARTReceiveSync(UART_NUMBER UARTNumber, PVOID ReceiveValue, unsigned long Length)
{
	return UARTReceive(UARTNumber, ReceiveValue, Length, 0);
}
    117a:	82 e0       	ldi	r24, 0x02	; 2
    117c:	84 bd       	out	0x24, r24	; 36
    117e:	15 bc       	out	0x25, r1	; 37
    1180:	16 bc       	out	0x26, r1	; 38
    1182:	17 bc       	out	0x27, r1	; 39
    1184:	18 bc       	out	0x28, r1	; 40
    1186:	80 93 6e 00 	sts	0x006E, r24
    118a:	08 95       	ret

0000118c <InitUARTSync>:
    118c:	cf 93       	push	r28
    118e:	40 93 19 16 	sts	0x1619, r20
    1192:	88 23       	and	r24, r24
    1194:	19 f0       	breq	.+6      	; 0x119c <InitUARTSync+0x10>
    1196:	81 30       	cpi	r24, 0x01	; 1
    1198:	c9 f0       	breq	.+50     	; 0x11cc <InitUARTSync+0x40>
    119a:	30 c0       	rjmp	.+96     	; 0x11fc <InitUARTSync+0x70>
    119c:	70 93 c5 00 	sts	0x00C5, r23
    11a0:	60 93 c4 00 	sts	0x00C4, r22
    11a4:	88 e9       	ldi	r24, 0x98	; 152
    11a6:	80 93 c1 00 	sts	0x00C1, r24
    11aa:	41 30       	cpi	r20, 0x01	; 1
    11ac:	39 f4       	brne	.+14     	; 0x11bc <InitUARTSync+0x30>
    11ae:	86 e0       	ldi	r24, 0x06	; 6
    11b0:	80 93 c2 00 	sts	0x00C2, r24
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	80 93 c0 00 	sts	0x00C0, r24
    11ba:	03 c0       	rjmp	.+6      	; 0x11c2 <InitUARTSync+0x36>
    11bc:	86 e0       	ldi	r24, 0x06	; 6
    11be:	80 93 c2 00 	sts	0x00C2, r24
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	80 93 db 15 	sts	0x15DB, r24
    11c8:	c1 e0       	ldi	r28, 0x01	; 1
    11ca:	19 c0       	rjmp	.+50     	; 0x11fe <InitUARTSync+0x72>
    11cc:	70 93 cd 00 	sts	0x00CD, r23
    11d0:	60 93 cc 00 	sts	0x00CC, r22
    11d4:	88 e9       	ldi	r24, 0x98	; 152
    11d6:	80 93 c9 00 	sts	0x00C9, r24
    11da:	41 30       	cpi	r20, 0x01	; 1
    11dc:	39 f4       	brne	.+14     	; 0x11ec <InitUARTSync+0x60>
    11de:	86 e0       	ldi	r24, 0x06	; 6
    11e0:	80 93 ca 00 	sts	0x00CA, r24
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	80 93 c8 00 	sts	0x00C8, r24
    11ea:	03 c0       	rjmp	.+6      	; 0x11f2 <InitUARTSync+0x66>
    11ec:	86 e0       	ldi	r24, 0x06	; 6
    11ee:	80 93 ca 00 	sts	0x00CA, r24
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	80 93 dc 15 	sts	0x15DC, r24
    11f8:	c1 e0       	ldi	r28, 0x01	; 1
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <InitUARTSync+0x72>
    11fc:	c0 e0       	ldi	r28, 0x00	; 0
    11fe:	bd df       	rcall	.-134    	; 0x117a <InitializeUARTTimer>
    1200:	8c 2f       	mov	r24, r28
    1202:	cf 91       	pop	r28
    1204:	08 95       	ret

00001206 <UARTTransmit>:
    1206:	cf 92       	push	r12
    1208:	df 92       	push	r13
    120a:	ef 92       	push	r14
    120c:	ff 92       	push	r15
    120e:	0f 93       	push	r16
    1210:	1f 93       	push	r17
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	6b 01       	movw	r12, r22
    1218:	88 23       	and	r24, r24
    121a:	19 f0       	breq	.+6      	; 0x1222 <UARTTransmit+0x1c>
    121c:	81 30       	cpi	r24, 0x01	; 1
    121e:	c1 f1       	breq	.+112    	; 0x1290 <UARTTransmit+0x8a>
    1220:	6c c0       	rjmp	.+216    	; 0x12fa <UARTTransmit+0xf4>
    1222:	80 91 db 15 	lds	r24, 0x15DB
    1226:	88 23       	and	r24, r24
    1228:	09 f4       	brne	.+2      	; 0x122c <UARTTransmit+0x26>
    122a:	6b c0       	rjmp	.+214    	; 0x1302 <UARTTransmit+0xfc>
    122c:	21 15       	cp	r18, r1
    122e:	31 05       	cpc	r19, r1
    1230:	41 05       	cpc	r20, r1
    1232:	51 05       	cpc	r21, r1
    1234:	09 f4       	brne	.+2      	; 0x1238 <UARTTransmit+0x32>
    1236:	6c c0       	rjmp	.+216    	; 0x1310 <UARTTransmit+0x10a>
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	dc 01       	movw	r26, r24
    123e:	c0 ec       	ldi	r28, 0xC0	; 192
    1240:	d0 e0       	ldi	r29, 0x00	; 0
    1242:	0f 2e       	mov	r0, r31
    1244:	f1 ec       	ldi	r31, 0xC1	; 193
    1246:	ef 2e       	mov	r14, r31
    1248:	f1 2c       	mov	r15, r1
    124a:	f0 2d       	mov	r31, r0
    124c:	66 ec       	ldi	r22, 0xC6	; 198
    124e:	70 e0       	ldi	r23, 0x00	; 0
    1250:	18 81       	ld	r17, Y
    1252:	15 ff       	sbrs	r17, 5
    1254:	fd cf       	rjmp	.-6      	; 0x1250 <UARTTransmit+0x4a>
    1256:	10 91 19 16 	lds	r17, 0x1619
    125a:	11 23       	and	r17, r17
    125c:	59 f0       	breq	.+22     	; 0x1274 <UARTTransmit+0x6e>
    125e:	00 23       	and	r16, r16
    1260:	29 f0       	breq	.+10     	; 0x126c <UARTTransmit+0x66>
    1262:	f7 01       	movw	r30, r14
    1264:	10 81       	ld	r17, Z
    1266:	11 60       	ori	r17, 0x01	; 1
    1268:	10 83       	st	Z, r17
    126a:	04 c0       	rjmp	.+8      	; 0x1274 <UARTTransmit+0x6e>
    126c:	f7 01       	movw	r30, r14
    126e:	10 81       	ld	r17, Z
    1270:	1e 7f       	andi	r17, 0xFE	; 254
    1272:	10 83       	st	Z, r17
    1274:	f6 01       	movw	r30, r12
    1276:	11 91       	ld	r17, Z+
    1278:	6f 01       	movw	r12, r30
    127a:	fb 01       	movw	r30, r22
    127c:	10 83       	st	Z, r17
    127e:	01 96       	adiw	r24, 0x01	; 1
    1280:	a1 1d       	adc	r26, r1
    1282:	b1 1d       	adc	r27, r1
    1284:	82 17       	cp	r24, r18
    1286:	93 07       	cpc	r25, r19
    1288:	a4 07       	cpc	r26, r20
    128a:	b5 07       	cpc	r27, r21
    128c:	09 f7       	brne	.-62     	; 0x1250 <UARTTransmit+0x4a>
    128e:	40 c0       	rjmp	.+128    	; 0x1310 <UARTTransmit+0x10a>
    1290:	80 91 dc 15 	lds	r24, 0x15DC
    1294:	88 23       	and	r24, r24
    1296:	c9 f1       	breq	.+114    	; 0x130a <UARTTransmit+0x104>
    1298:	21 15       	cp	r18, r1
    129a:	31 05       	cpc	r19, r1
    129c:	41 05       	cpc	r20, r1
    129e:	51 05       	cpc	r21, r1
    12a0:	b9 f1       	breq	.+110    	; 0x1310 <UARTTransmit+0x10a>
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	dc 01       	movw	r26, r24
    12a8:	c8 ec       	ldi	r28, 0xC8	; 200
    12aa:	d0 e0       	ldi	r29, 0x00	; 0
    12ac:	0f 2e       	mov	r0, r31
    12ae:	f9 ec       	ldi	r31, 0xC9	; 201
    12b0:	ef 2e       	mov	r14, r31
    12b2:	f1 2c       	mov	r15, r1
    12b4:	f0 2d       	mov	r31, r0
    12b6:	6e ec       	ldi	r22, 0xCE	; 206
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	18 81       	ld	r17, Y
    12bc:	15 ff       	sbrs	r17, 5
    12be:	fd cf       	rjmp	.-6      	; 0x12ba <UARTTransmit+0xb4>
    12c0:	10 91 19 16 	lds	r17, 0x1619
    12c4:	11 23       	and	r17, r17
    12c6:	59 f0       	breq	.+22     	; 0x12de <UARTTransmit+0xd8>
    12c8:	00 23       	and	r16, r16
    12ca:	29 f0       	breq	.+10     	; 0x12d6 <UARTTransmit+0xd0>
    12cc:	f7 01       	movw	r30, r14
    12ce:	10 81       	ld	r17, Z
    12d0:	11 60       	ori	r17, 0x01	; 1
    12d2:	10 83       	st	Z, r17
    12d4:	04 c0       	rjmp	.+8      	; 0x12de <UARTTransmit+0xd8>
    12d6:	f7 01       	movw	r30, r14
    12d8:	10 81       	ld	r17, Z
    12da:	1e 7f       	andi	r17, 0xFE	; 254
    12dc:	10 83       	st	Z, r17
    12de:	f6 01       	movw	r30, r12
    12e0:	11 91       	ld	r17, Z+
    12e2:	6f 01       	movw	r12, r30
    12e4:	fb 01       	movw	r30, r22
    12e6:	10 83       	st	Z, r17
    12e8:	01 96       	adiw	r24, 0x01	; 1
    12ea:	a1 1d       	adc	r26, r1
    12ec:	b1 1d       	adc	r27, r1
    12ee:	82 17       	cp	r24, r18
    12f0:	93 07       	cpc	r25, r19
    12f2:	a4 07       	cpc	r26, r20
    12f4:	b5 07       	cpc	r27, r21
    12f6:	09 f7       	brne	.-62     	; 0x12ba <UARTTransmit+0xb4>
    12f8:	0b c0       	rjmp	.+22     	; 0x1310 <UARTTransmit+0x10a>
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	a9 01       	movw	r20, r18
    1300:	07 c0       	rjmp	.+14     	; 0x1310 <UARTTransmit+0x10a>
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	a9 01       	movw	r20, r18
    1308:	03 c0       	rjmp	.+6      	; 0x1310 <UARTTransmit+0x10a>
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	a9 01       	movw	r20, r18
    1310:	ca 01       	movw	r24, r20
    1312:	b9 01       	movw	r22, r18
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	1f 91       	pop	r17
    131a:	0f 91       	pop	r16
    131c:	ff 90       	pop	r15
    131e:	ef 90       	pop	r14
    1320:	df 90       	pop	r13
    1322:	cf 90       	pop	r12
    1324:	08 95       	ret

00001326 <UARTTransmitSync>:
    1326:	0f 93       	push	r16
    1328:	00 e0       	ldi	r16, 0x00	; 0
    132a:	6d df       	rcall	.-294    	; 0x1206 <UARTTransmit>
    132c:	0f 91       	pop	r16
    132e:	08 95       	ret

00001330 <__vector_16>:
	return IndexI;

}

ISR(TIMER0_COMPA_vect)
{
    1330:	1f 92       	push	r1
    1332:	0f 92       	push	r0
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	0f 92       	push	r0
    1338:	11 24       	eor	r1, r1
    133a:	8f 93       	push	r24
	gUARTTimerTriggered = TRUE;
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	80 93 1c 16 	sts	0x161C, r24
}
    1342:	8f 91       	pop	r24
    1344:	0f 90       	pop	r0
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	0f 90       	pop	r0
    134a:	1f 90       	pop	r1
    134c:	18 95       	reti

0000134e <__vector_20>:

ISR(USART0_RX_vect)
{
    134e:	1f 92       	push	r1
    1350:	0f 92       	push	r0
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	0f 92       	push	r0
    1356:	11 24       	eor	r1, r1
    1358:	0b b6       	in	r0, 0x3b	; 59
    135a:	0f 92       	push	r0
    135c:	2f 93       	push	r18
    135e:	3f 93       	push	r19
    1360:	4f 93       	push	r20
    1362:	5f 93       	push	r21
    1364:	6f 93       	push	r22
    1366:	7f 93       	push	r23
    1368:	8f 93       	push	r24
    136a:	9f 93       	push	r25
    136c:	af 93       	push	r26
    136e:	bf 93       	push	r27
    1370:	ef 93       	push	r30
    1372:	ff 93       	push	r31
	if(gRCICallback0 != NULL)
    1374:	e0 91 0b 16 	lds	r30, 0x160B
    1378:	f0 91 0c 16 	lds	r31, 0x160C
    137c:	30 97       	sbiw	r30, 0x00	; 0
    137e:	31 f0       	breq	.+12     	; 0x138c <__vector_20+0x3e>
	{
		gRCICallback0(UART_ZERO, gRCICallbackContext0);
    1380:	60 91 17 16 	lds	r22, 0x1617
    1384:	70 91 18 16 	lds	r23, 0x1618
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	09 95       	icall
	}
}
    138c:	ff 91       	pop	r31
    138e:	ef 91       	pop	r30
    1390:	bf 91       	pop	r27
    1392:	af 91       	pop	r26
    1394:	9f 91       	pop	r25
    1396:	8f 91       	pop	r24
    1398:	7f 91       	pop	r23
    139a:	6f 91       	pop	r22
    139c:	5f 91       	pop	r21
    139e:	4f 91       	pop	r20
    13a0:	3f 91       	pop	r19
    13a2:	2f 91       	pop	r18
    13a4:	0f 90       	pop	r0
    13a6:	0b be       	out	0x3b, r0	; 59
    13a8:	0f 90       	pop	r0
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	0f 90       	pop	r0
    13ae:	1f 90       	pop	r1
    13b0:	18 95       	reti

000013b2 <__vector_28>:

ISR(USART1_RX_vect)
{
    13b2:	1f 92       	push	r1
    13b4:	0f 92       	push	r0
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	0f 92       	push	r0
    13ba:	11 24       	eor	r1, r1
    13bc:	0b b6       	in	r0, 0x3b	; 59
    13be:	0f 92       	push	r0
    13c0:	2f 93       	push	r18
    13c2:	3f 93       	push	r19
    13c4:	4f 93       	push	r20
    13c6:	5f 93       	push	r21
    13c8:	6f 93       	push	r22
    13ca:	7f 93       	push	r23
    13cc:	8f 93       	push	r24
    13ce:	9f 93       	push	r25
    13d0:	af 93       	push	r26
    13d2:	bf 93       	push	r27
    13d4:	ef 93       	push	r30
    13d6:	ff 93       	push	r31
	if(gRCICallback1 != NULL)
    13d8:	e0 91 11 16 	lds	r30, 0x1611
    13dc:	f0 91 12 16 	lds	r31, 0x1612
    13e0:	30 97       	sbiw	r30, 0x00	; 0
    13e2:	31 f0       	breq	.+12     	; 0x13f0 <__vector_28+0x3e>
	{
		gRCICallback1(UART_ONE, gRCICallbackContext1);
    13e4:	60 91 0f 16 	lds	r22, 0x160F
    13e8:	70 91 10 16 	lds	r23, 0x1610
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	09 95       	icall
	}
}
    13f0:	ff 91       	pop	r31
    13f2:	ef 91       	pop	r30
    13f4:	bf 91       	pop	r27
    13f6:	af 91       	pop	r26
    13f8:	9f 91       	pop	r25
    13fa:	8f 91       	pop	r24
    13fc:	7f 91       	pop	r23
    13fe:	6f 91       	pop	r22
    1400:	5f 91       	pop	r21
    1402:	4f 91       	pop	r20
    1404:	3f 91       	pop	r19
    1406:	2f 91       	pop	r18
    1408:	0f 90       	pop	r0
    140a:	0b be       	out	0x3b, r0	; 59
    140c:	0f 90       	pop	r0
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	0f 90       	pop	r0
    1412:	1f 90       	pop	r1
    1414:	18 95       	reti

00001416 <__vector_22>:

ISR(USART0_TX_vect)
{
    1416:	1f 92       	push	r1
    1418:	0f 92       	push	r0
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	0f 92       	push	r0
    141e:	11 24       	eor	r1, r1
    1420:	0b b6       	in	r0, 0x3b	; 59
    1422:	0f 92       	push	r0
    1424:	2f 93       	push	r18
    1426:	3f 93       	push	r19
    1428:	4f 93       	push	r20
    142a:	5f 93       	push	r21
    142c:	6f 93       	push	r22
    142e:	7f 93       	push	r23
    1430:	8f 93       	push	r24
    1432:	9f 93       	push	r25
    1434:	af 93       	push	r26
    1436:	bf 93       	push	r27
    1438:	ef 93       	push	r30
    143a:	ff 93       	push	r31
	if(gTCICallback0 != NULL)
    143c:	e0 91 0d 16 	lds	r30, 0x160D
    1440:	f0 91 0e 16 	lds	r31, 0x160E
    1444:	30 97       	sbiw	r30, 0x00	; 0
    1446:	31 f0       	breq	.+12     	; 0x1454 <__vector_22+0x3e>
	{
		gTCICallback0(UART_ZERO, gTCICallbackContext0);
    1448:	60 91 15 16 	lds	r22, 0x1615
    144c:	70 91 16 16 	lds	r23, 0x1616
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	09 95       	icall
	}
}
    1454:	ff 91       	pop	r31
    1456:	ef 91       	pop	r30
    1458:	bf 91       	pop	r27
    145a:	af 91       	pop	r26
    145c:	9f 91       	pop	r25
    145e:	8f 91       	pop	r24
    1460:	7f 91       	pop	r23
    1462:	6f 91       	pop	r22
    1464:	5f 91       	pop	r21
    1466:	4f 91       	pop	r20
    1468:	3f 91       	pop	r19
    146a:	2f 91       	pop	r18
    146c:	0f 90       	pop	r0
    146e:	0b be       	out	0x3b, r0	; 59
    1470:	0f 90       	pop	r0
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	0f 90       	pop	r0
    1476:	1f 90       	pop	r1
    1478:	18 95       	reti

0000147a <__vector_30>:

ISR(USART1_TX_vect)
{
    147a:	1f 92       	push	r1
    147c:	0f 92       	push	r0
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	0f 92       	push	r0
    1482:	11 24       	eor	r1, r1
    1484:	0b b6       	in	r0, 0x3b	; 59
    1486:	0f 92       	push	r0
    1488:	2f 93       	push	r18
    148a:	3f 93       	push	r19
    148c:	4f 93       	push	r20
    148e:	5f 93       	push	r21
    1490:	6f 93       	push	r22
    1492:	7f 93       	push	r23
    1494:	8f 93       	push	r24
    1496:	9f 93       	push	r25
    1498:	af 93       	push	r26
    149a:	bf 93       	push	r27
    149c:	ef 93       	push	r30
    149e:	ff 93       	push	r31
	if(gTCICallback1 != NULL)
    14a0:	e0 91 13 16 	lds	r30, 0x1613
    14a4:	f0 91 14 16 	lds	r31, 0x1614
    14a8:	30 97       	sbiw	r30, 0x00	; 0
    14aa:	31 f0       	breq	.+12     	; 0x14b8 <__vector_30+0x3e>
	{
		gTCICallback1(UART_ONE, gTCICallbackContext1);
    14ac:	60 91 1a 16 	lds	r22, 0x161A
    14b0:	70 91 1b 16 	lds	r23, 0x161B
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	09 95       	icall
	}
    14b8:	ff 91       	pop	r31
    14ba:	ef 91       	pop	r30
    14bc:	bf 91       	pop	r27
    14be:	af 91       	pop	r26
    14c0:	9f 91       	pop	r25
    14c2:	8f 91       	pop	r24
    14c4:	7f 91       	pop	r23
    14c6:	6f 91       	pop	r22
    14c8:	5f 91       	pop	r21
    14ca:	4f 91       	pop	r20
    14cc:	3f 91       	pop	r19
    14ce:	2f 91       	pop	r18
    14d0:	0f 90       	pop	r0
    14d2:	0b be       	out	0x3b, r0	; 59
    14d4:	0f 90       	pop	r0
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	0f 90       	pop	r0
    14da:	1f 90       	pop	r1
    14dc:	18 95       	reti

000014de <InitPWM>:
void
TurnOffPWM()
{
	TCCR1B = 0;
	
	TCCR2B = 0;
    14de:	80 91 dd 15 	lds	r24, 0x15DD
    14e2:	88 23       	and	r24, r24
    14e4:	61 f0       	breq	.+24     	; 0x14fe <InitPWM+0x20>
    14e6:	86 e7       	ldi	r24, 0x76	; 118
    14e8:	94 e0       	ldi	r25, 0x04	; 4
    14ea:	9f 93       	push	r25
    14ec:	8f 93       	push	r24
    14ee:	84 e0       	ldi	r24, 0x04	; 4
    14f0:	8f 93       	push	r24
    14f2:	f9 dc       	rcall	.-1550   	; 0xee6 <SendTrace>
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	08 95       	ret
    14fe:	8a b1       	in	r24, 0x0a	; 10
    1500:	80 6f       	ori	r24, 0xF0	; 240
    1502:	8a b9       	out	0x0a, r24	; 10
    1504:	81 ef       	ldi	r24, 0xF1	; 241
    1506:	80 93 80 00 	sts	0x0080, r24
    150a:	80 93 b0 00 	sts	0x00B0, r24
    150e:	84 e0       	ldi	r24, 0x04	; 4
    1510:	80 93 81 00 	sts	0x0081, r24
    1514:	86 e0       	ldi	r24, 0x06	; 6
    1516:	80 93 b1 00 	sts	0x00B1, r24
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	80 93 6f 00 	sts	0x006F, r24
    1520:	80 93 70 00 	sts	0x0070, r24
    1524:	10 92 85 00 	sts	0x0085, r1
    1528:	10 92 84 00 	sts	0x0084, r1
    152c:	10 92 b2 00 	sts	0x00B2, r1
    1530:	80 93 dd 15 	sts	0x15DD, r24
    1534:	08 95       	ret

00001536 <PWMChangePulseDuration>:
}

bool
PWMChangePulseDuration(PWM_CHANNEL PwmChannel, unsigned char Pulse)
{
    1536:	1f 93       	push	r17
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
    153c:	16 2f       	mov	r17, r22
	bool Status = FALSE;
	
	if (!gPWMInitialized)
    153e:	90 91 dd 15 	lds	r25, 0x15DD
    1542:	99 23       	and	r25, r25
    1544:	f9 f0       	breq	.+62     	; 0x1584 <PWMChangePulseDuration+0x4e>
	{
		goto Exit;	
	}
	
	SendTrace(INFO_LEVEL, "Channel = %d - Pulse = %d\r\n", PwmChannel, Pulse);
    1546:	c8 2f       	mov	r28, r24
    1548:	d0 e0       	ldi	r29, 0x00	; 0
    154a:	1f 92       	push	r1
    154c:	6f 93       	push	r22
    154e:	1f 92       	push	r1
    1550:	8f 93       	push	r24
    1552:	80 e9       	ldi	r24, 0x90	; 144
    1554:	94 e0       	ldi	r25, 0x04	; 4
    1556:	9f 93       	push	r25
    1558:	8f 93       	push	r24
    155a:	84 e0       	ldi	r24, 0x04	; 4
    155c:	8f 93       	push	r24
    155e:	c3 dc       	rcall	.-1658   	; 0xee6 <SendTrace>
	if (Pulse > PWM_PULSE_DIVS)
	{
		Pulse = PWM_PULSE_DIVS;
	}
	
	PwmChannelPulse[PwmChannel] = PWM_PULSE_MIN + PWM_PULSE_DIVS - Pulse;
    1560:	c2 52       	subi	r28, 0x22	; 34
    1562:	da 4e       	sbci	r29, 0xEA	; 234
    1564:	8d b7       	in	r24, 0x3d	; 61
    1566:	9e b7       	in	r25, 0x3e	; 62
    1568:	07 96       	adiw	r24, 0x07	; 7
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	f8 94       	cli
    156e:	9e bf       	out	0x3e, r25	; 62
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	8d bf       	out	0x3d, r24	; 61
    1574:	11 31       	cpi	r17, 0x11	; 17
    1576:	08 f0       	brcs	.+2      	; 0x157a <PWMChangePulseDuration+0x44>
    1578:	10 e1       	ldi	r17, 0x10	; 16
    157a:	80 ef       	ldi	r24, 0xF0	; 240
    157c:	81 1b       	sub	r24, r17
    157e:	88 83       	st	Y, r24
	
	Status = TRUE;
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	01 c0       	rjmp	.+2      	; 0x1586 <PWMChangePulseDuration+0x50>
}

bool
PWMChangePulseDuration(PWM_CHANNEL PwmChannel, unsigned char Pulse)
{
	bool Status = FALSE;
    1584:	80 e0       	ldi	r24, 0x00	; 0
	Status = TRUE;
	
Exit:
	
	return Status;
}
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    158c:	08 95       	ret

0000158e <__vector_15>:

ISR(TIMER1_OVF_vect)
{
    158e:	1f 92       	push	r1
    1590:	0f 92       	push	r0
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	0f 92       	push	r0
    1596:	11 24       	eor	r1, r1
    1598:	8f 93       	push	r24
    159a:	9f 93       	push	r25
	if (gPWMInitialized)
    159c:	80 91 dd 15 	lds	r24, 0x15DD
    15a0:	88 23       	and	r24, r24
    15a2:	71 f0       	breq	.+28     	; 0x15c0 <__vector_15+0x32>
	{	
		
		OCR1A = PwmChannelPulse[PWM_CHANNEL_0];
    15a4:	80 91 de 15 	lds	r24, 0x15DE
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	90 93 89 00 	sts	0x0089, r25
    15ae:	80 93 88 00 	sts	0x0088, r24
		
		OCR1B = PwmChannelPulse[PWM_CHANNEL_1];
    15b2:	80 91 df 15 	lds	r24, 0x15DF
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	90 93 8b 00 	sts	0x008B, r25
    15bc:	80 93 8a 00 	sts	0x008A, r24
	}
	
	return;
}
    15c0:	9f 91       	pop	r25
    15c2:	8f 91       	pop	r24
    15c4:	0f 90       	pop	r0
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	0f 90       	pop	r0
    15ca:	1f 90       	pop	r1
    15cc:	18 95       	reti

000015ce <__vector_11>:

ISR(TIMER2_OVF_vect)
{
    15ce:	1f 92       	push	r1
    15d0:	0f 92       	push	r0
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	0f 92       	push	r0
    15d6:	11 24       	eor	r1, r1
    15d8:	8f 93       	push	r24
	if (gPWMInitialized)
    15da:	80 91 dd 15 	lds	r24, 0x15DD
    15de:	88 23       	and	r24, r24
    15e0:	41 f0       	breq	.+16     	; 0x15f2 <__vector_11+0x24>
	{
		OCR2A = PwmChannelPulse[PWM_CHANNEL_2];
    15e2:	80 91 e0 15 	lds	r24, 0x15E0
    15e6:	80 93 b3 00 	sts	0x00B3, r24
	
		OCR2B = PwmChannelPulse[PWM_CHANNEL_3];
    15ea:	80 91 e1 15 	lds	r24, 0x15E1
    15ee:	80 93 b4 00 	sts	0x00B4, r24
	}
	
	return;
    15f2:	8f 91       	pop	r24
    15f4:	0f 90       	pop	r0
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	0f 90       	pop	r0
    15fa:	1f 90       	pop	r1
    15fc:	18 95       	reti

000015fe <TCFlushFIFO>:
	
Exit:
	
	return Status;

}
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
    1602:	1f 92       	push	r1
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	81 11       	cpse	r24, r1
    160a:	03 c0       	rjmp	.+6      	; 0x1612 <TCFlushFIFO+0x14>
    160c:	82 ee       	ldi	r24, 0xE2	; 226
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <TCFlushFIFO+0x18>
    1612:	81 ee       	ldi	r24, 0xE1	; 225
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	fe d3       	rcall	.+2044   	; 0x1e14 <SPIBeginTransfer>
    1618:	21 e0       	ldi	r18, 0x01	; 1
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	40 e0       	ldi	r20, 0x00	; 0
    161e:	50 e0       	ldi	r21, 0x00	; 0
    1620:	be 01       	movw	r22, r28
    1622:	6f 5f       	subi	r22, 0xFF	; 255
    1624:	7f 4f       	sbci	r23, 0xFF	; 255
    1626:	cb 01       	movw	r24, r22
    1628:	f9 d3       	rcall	.+2034   	; 0x1e1c <SPIMasterTransfer>
    162a:	f6 d3       	rcall	.+2028   	; 0x1e18 <SPIEndTransfer>
    162c:	0f 90       	pop	r0
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	08 95       	ret

00001634 <TCTransmit>:
    1634:	cf 92       	push	r12
    1636:	df 92       	push	r13
    1638:	ef 92       	push	r14
    163a:	ff 92       	push	r15
    163c:	0f 93       	push	r16
    163e:	1f 93       	push	r17
    1640:	cf 93       	push	r28
    1642:	df 93       	push	r29
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    1648:	a0 97       	sbiw	r28, 0x20	; 32
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	de bf       	out	0x3e, r29	; 62
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	cd bf       	out	0x3d, r28	; 61
    1654:	8c 01       	movw	r16, r24
    1656:	7b 01       	movw	r14, r22
    1658:	d4 2e       	mov	r13, r20
    165a:	fc 01       	movw	r30, r24
    165c:	80 81       	ld	r24, Z
    165e:	80 3a       	cpi	r24, 0xA0	; 160
    1660:	c1 f4       	brne	.+48     	; 0x1692 <TCTransmit+0x5e>
    1662:	80 91 3d 16 	lds	r24, 0x163D
    1666:	81 11       	cpse	r24, r1
    1668:	16 c0       	rjmp	.+44     	; 0x1696 <TCTransmit+0x62>
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	ff e1       	ldi	r31, 0x1F	; 31
    166e:	f4 17       	cp	r31, r20
    1670:	08 f4       	brcc	.+2      	; 0x1674 <TCTransmit+0x40>
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	c8 2e       	mov	r12, r24
    1676:	88 23       	and	r24, r24
    1678:	79 f0       	breq	.+30     	; 0x1698 <TCTransmit+0x64>
    167a:	8d 2d       	mov	r24, r13
    167c:	e1 e0       	ldi	r30, 0x01	; 1
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	ec 0f       	add	r30, r28
    1682:	fd 1f       	adc	r31, r29
    1684:	e8 0f       	add	r30, r24
    1686:	f1 1d       	adc	r31, r1
    1688:	10 82       	st	Z, r1
    168a:	8f 5f       	subi	r24, 0xFF	; 255
    168c:	80 32       	cpi	r24, 0x20	; 32
    168e:	b1 f7       	brne	.-20     	; 0x167c <TCTransmit+0x48>
    1690:	03 c0       	rjmp	.+6      	; 0x1698 <TCTransmit+0x64>
    1692:	c1 2c       	mov	r12, r1
    1694:	01 c0       	rjmp	.+2      	; 0x1698 <TCTransmit+0x64>
    1696:	c1 2c       	mov	r12, r1
    1698:	bd d3       	rcall	.+1914   	; 0x1e14 <SPIBeginTransfer>
    169a:	21 e0       	ldi	r18, 0x01	; 1
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	40 e0       	ldi	r20, 0x00	; 0
    16a0:	50 e0       	ldi	r21, 0x00	; 0
    16a2:	b8 01       	movw	r22, r16
    16a4:	c8 01       	movw	r24, r16
    16a6:	ba d3       	rcall	.+1908   	; 0x1e1c <SPIMasterTransfer>
    16a8:	18 2f       	mov	r17, r24
    16aa:	81 11       	cpse	r24, r1
    16ac:	0b c0       	rjmp	.+22     	; 0x16c4 <TCTransmit+0x90>
    16ae:	2c ea       	ldi	r18, 0xAC	; 172
    16b0:	34 e0       	ldi	r19, 0x04	; 4
    16b2:	3f 93       	push	r19
    16b4:	2f 93       	push	r18
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	8f 93       	push	r24
    16ba:	15 dc       	rcall	.-2006   	; 0xee6 <SendTrace>
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	38 c0       	rjmp	.+112    	; 0x1734 <TCTransmit+0x100>
    16c4:	2d 2d       	mov	r18, r13
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	50 e0       	ldi	r21, 0x00	; 0
    16cc:	be 01       	movw	r22, r28
    16ce:	6f 5f       	subi	r22, 0xFF	; 255
    16d0:	7f 4f       	sbci	r23, 0xFF	; 255
    16d2:	c7 01       	movw	r24, r14
    16d4:	a3 d3       	rcall	.+1862   	; 0x1e1c <SPIMasterTransfer>
    16d6:	18 2f       	mov	r17, r24
    16d8:	81 11       	cpse	r24, r1
    16da:	0b c0       	rjmp	.+22     	; 0x16f2 <TCTransmit+0xbe>
    16dc:	2c ea       	ldi	r18, 0xAC	; 172
    16de:	34 e0       	ldi	r19, 0x04	; 4
    16e0:	3f 93       	push	r19
    16e2:	2f 93       	push	r18
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	8f 93       	push	r24
    16e8:	fe db       	rcall	.-2052   	; 0xee6 <SendTrace>
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	21 c0       	rjmp	.+66     	; 0x1734 <TCTransmit+0x100>
    16f2:	cc 20       	and	r12, r12
    16f4:	f9 f0       	breq	.+62     	; 0x1734 <TCTransmit+0x100>
    16f6:	4d 2d       	mov	r20, r13
    16f8:	50 e0       	ldi	r21, 0x00	; 0
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	8c 0f       	add	r24, r28
    1700:	9d 1f       	adc	r25, r29
    1702:	84 0f       	add	r24, r20
    1704:	95 1f       	adc	r25, r21
    1706:	20 e2       	ldi	r18, 0x20	; 32
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	24 1b       	sub	r18, r20
    170c:	35 0b       	sbc	r19, r21
    170e:	44 27       	eor	r20, r20
    1710:	37 fd       	sbrc	r19, 7
    1712:	40 95       	com	r20
    1714:	54 2f       	mov	r21, r20
    1716:	bc 01       	movw	r22, r24
    1718:	81 d3       	rcall	.+1794   	; 0x1e1c <SPIMasterTransfer>
    171a:	18 2f       	mov	r17, r24
    171c:	81 11       	cpse	r24, r1
    171e:	0a c0       	rjmp	.+20     	; 0x1734 <TCTransmit+0x100>
    1720:	2c ea       	ldi	r18, 0xAC	; 172
    1722:	34 e0       	ldi	r19, 0x04	; 4
    1724:	3f 93       	push	r19
    1726:	2f 93       	push	r18
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	8f 93       	push	r24
    172c:	dc db       	rcall	.-2120   	; 0xee6 <SendTrace>
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	71 d3       	rcall	.+1762   	; 0x1e18 <SPIEndTransfer>
    1736:	81 2f       	mov	r24, r17
    1738:	a0 96       	adiw	r28, 0x20	; 32
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	1f 91       	pop	r17
    174a:	0f 91       	pop	r16
    174c:	ff 90       	pop	r15
    174e:	ef 90       	pop	r14
    1750:	df 90       	pop	r13
    1752:	cf 90       	pop	r12
    1754:	08 95       	ret

00001756 <TCTransmitAckPayload>:
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	1f 92       	push	r1
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    1760:	20 91 ee 15 	lds	r18, 0x15EE
    1764:	21 11       	cpse	r18, r1
    1766:	0c c0       	rjmp	.+24     	; 0x1780 <TCTransmitAckPayload+0x2a>
    1768:	89 ec       	ldi	r24, 0xC9	; 201
    176a:	94 e0       	ldi	r25, 0x04	; 4
    176c:	9f 93       	push	r25
    176e:	8f 93       	push	r24
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	8f 93       	push	r24
    1774:	b8 db       	rcall	.-2192   	; 0xee6 <SendTrace>
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	18 c0       	rjmp	.+48     	; 0x17b0 <TCTransmitAckPayload+0x5a>
    1780:	20 91 3d 16 	lds	r18, 0x163D
    1784:	21 11       	cpse	r18, r1
    1786:	0c c0       	rjmp	.+24     	; 0x17a0 <TCTransmitAckPayload+0x4a>
    1788:	8c ef       	ldi	r24, 0xFC	; 252
    178a:	94 e0       	ldi	r25, 0x04	; 4
    178c:	9f 93       	push	r25
    178e:	8f 93       	push	r24
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	8f 93       	push	r24
    1794:	a8 db       	rcall	.-2224   	; 0xee6 <SendTrace>
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	08 c0       	rjmp	.+16     	; 0x17b0 <TCTransmitAckPayload+0x5a>
    17a0:	28 ea       	ldi	r18, 0xA8	; 168
    17a2:	29 83       	std	Y+1, r18	; 0x01
    17a4:	fb 01       	movw	r30, r22
    17a6:	40 81       	ld	r20, Z
    17a8:	bc 01       	movw	r22, r24
    17aa:	ce 01       	movw	r24, r28
    17ac:	01 96       	adiw	r24, 0x01	; 1
    17ae:	42 df       	rcall	.-380    	; 0x1634 <TCTransmit>
    17b0:	0f 90       	pop	r0
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	08 95       	ret

000017b8 <TCReceive>:
    17b8:	ff 92       	push	r15
    17ba:	0f 93       	push	r16
    17bc:	1f 93       	push	r17
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	ec 01       	movw	r28, r24
    17c4:	8b 01       	movw	r16, r22
    17c6:	f4 2e       	mov	r15, r20
    17c8:	25 d3       	rcall	.+1610   	; 0x1e14 <SPIBeginTransfer>
    17ca:	21 e0       	ldi	r18, 0x01	; 1
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	40 e0       	ldi	r20, 0x00	; 0
    17d0:	50 e0       	ldi	r21, 0x00	; 0
    17d2:	be 01       	movw	r22, r28
    17d4:	ce 01       	movw	r24, r28
    17d6:	22 d3       	rcall	.+1604   	; 0x1e1c <SPIMasterTransfer>
    17d8:	c8 2f       	mov	r28, r24
    17da:	81 11       	cpse	r24, r1
    17dc:	0b c0       	rjmp	.+22     	; 0x17f4 <TCReceive+0x3c>
    17de:	23 e3       	ldi	r18, 0x33	; 51
    17e0:	35 e0       	ldi	r19, 0x05	; 5
    17e2:	3f 93       	push	r19
    17e4:	2f 93       	push	r18
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	8f 93       	push	r24
    17ea:	7d db       	rcall	.-2310   	; 0xee6 <SendTrace>
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	15 c0       	rjmp	.+42     	; 0x181e <TCReceive+0x66>
    17f4:	2f 2d       	mov	r18, r15
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e0       	ldi	r20, 0x00	; 0
    17fa:	50 e0       	ldi	r21, 0x00	; 0
    17fc:	b8 01       	movw	r22, r16
    17fe:	8d e1       	ldi	r24, 0x1D	; 29
    1800:	96 e1       	ldi	r25, 0x16	; 22
    1802:	0c d3       	rcall	.+1560   	; 0x1e1c <SPIMasterTransfer>
    1804:	c8 2f       	mov	r28, r24
    1806:	81 11       	cpse	r24, r1
    1808:	0a c0       	rjmp	.+20     	; 0x181e <TCReceive+0x66>
    180a:	23 e3       	ldi	r18, 0x33	; 51
    180c:	35 e0       	ldi	r19, 0x05	; 5
    180e:	3f 93       	push	r19
    1810:	2f 93       	push	r18
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	8f 93       	push	r24
    1816:	67 db       	rcall	.-2354   	; 0xee6 <SendTrace>
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	fc d2       	rcall	.+1528   	; 0x1e18 <SPIEndTransfer>
    1820:	8c 2f       	mov	r24, r28
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	1f 91       	pop	r17
    1828:	0f 91       	pop	r16
    182a:	ff 90       	pop	r15
    182c:	08 95       	ret

0000182e <TCGetReceivedPayloadLength>:
    182e:	0f 93       	push	r16
    1830:	1f 93       	push	r17
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	1f 92       	push	r1
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	8c 01       	movw	r16, r24
    183e:	80 91 ee 15 	lds	r24, 0x15EE
    1842:	81 11       	cpse	r24, r1
    1844:	0b c0       	rjmp	.+22     	; 0x185c <TCGetReceivedPayloadLength+0x2e>
    1846:	8f e4       	ldi	r24, 0x4F	; 79
    1848:	95 e0       	ldi	r25, 0x05	; 5
    184a:	9f 93       	push	r25
    184c:	8f 93       	push	r24
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	8f 93       	push	r24
    1852:	49 db       	rcall	.-2414   	; 0xee6 <SendTrace>
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	27 c0       	rjmp	.+78     	; 0x18aa <TCGetReceivedPayloadLength+0x7c>
    185c:	f8 01       	movw	r30, r16
    185e:	10 82       	st	Z, r1
    1860:	80 91 3d 16 	lds	r24, 0x163D
    1864:	88 23       	and	r24, r24
    1866:	e1 f0       	breq	.+56     	; 0x18a0 <TCGetReceivedPayloadLength+0x72>
    1868:	80 e6       	ldi	r24, 0x60	; 96
    186a:	89 83       	std	Y+1, r24	; 0x01
    186c:	41 e0       	ldi	r20, 0x01	; 1
    186e:	b8 01       	movw	r22, r16
    1870:	ce 01       	movw	r24, r28
    1872:	01 96       	adiw	r24, 0x01	; 1
    1874:	a1 df       	rcall	.-190    	; 0x17b8 <TCReceive>
    1876:	88 23       	and	r24, r24
    1878:	21 f0       	breq	.+8      	; 0x1882 <TCGetReceivedPayloadLength+0x54>
    187a:	f8 01       	movw	r30, r16
    187c:	80 81       	ld	r24, Z
    187e:	81 32       	cpi	r24, 0x21	; 33
    1880:	a0 f0       	brcs	.+40     	; 0x18aa <TCGetReceivedPayloadLength+0x7c>
    1882:	f8 01       	movw	r30, r16
    1884:	10 82       	st	Z, r1
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	ba de       	rcall	.-652    	; 0x15fe <TCFlushFIFO>
    188a:	88 e8       	ldi	r24, 0x88	; 136
    188c:	95 e0       	ldi	r25, 0x05	; 5
    188e:	9f 93       	push	r25
    1890:	8f 93       	push	r24
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	8f 93       	push	r24
    1896:	27 db       	rcall	.-2482   	; 0xee6 <SendTrace>
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	05 c0       	rjmp	.+10     	; 0x18aa <TCGetReceivedPayloadLength+0x7c>
    18a0:	f8 01       	movw	r30, r16
    18a2:	80 81       	ld	r24, Z
    18a4:	80 7c       	andi	r24, 0xC0	; 192
    18a6:	80 62       	ori	r24, 0x20	; 32
    18a8:	80 83       	st	Z, r24
    18aa:	0f 90       	pop	r0
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	1f 91       	pop	r17
    18b2:	0f 91       	pop	r16
    18b4:	08 95       	ret

000018b6 <TCReceivePayload>:
    18b6:	ef 92       	push	r14
    18b8:	ff 92       	push	r15
    18ba:	0f 93       	push	r16
    18bc:	1f 93       	push	r17
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <TCReceivePayload+0xe>
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
    18c8:	7c 01       	movw	r14, r24
    18ca:	8b 01       	movw	r16, r22
    18cc:	80 91 ee 15 	lds	r24, 0x15EE
    18d0:	81 11       	cpse	r24, r1
    18d2:	0c c0       	rjmp	.+24     	; 0x18ec <TCReceivePayload+0x36>
    18d4:	8c ec       	ldi	r24, 0xCC	; 204
    18d6:	95 e0       	ldi	r25, 0x05	; 5
    18d8:	9f 93       	push	r25
    18da:	8f 93       	push	r24
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	8f 93       	push	r24
    18e0:	02 db       	rcall	.-2556   	; 0xee6 <SendTrace>
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	27 c0       	rjmp	.+78     	; 0x193a <TCReceivePayload+0x84>
    18ec:	19 82       	std	Y+1, r1	; 0x01
    18ee:	ce 01       	movw	r24, r28
    18f0:	01 96       	adiw	r24, 0x01	; 1
    18f2:	9d df       	rcall	.-198    	; 0x182e <TCGetReceivedPayloadLength>
    18f4:	f8 01       	movw	r30, r16
    18f6:	20 81       	ld	r18, Z
    18f8:	2f 73       	andi	r18, 0x3F	; 63
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	8f 73       	andi	r24, 0x3F	; 63
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	82 17       	cp	r24, r18
    1904:	93 07       	cpc	r25, r19
    1906:	8c f4       	brge	.+34     	; 0x192a <TCReceivePayload+0x74>
    1908:	8b ef       	ldi	r24, 0xFB	; 251
    190a:	95 e0       	ldi	r25, 0x05	; 5
    190c:	9f 93       	push	r25
    190e:	8f 93       	push	r24
    1910:	84 e0       	ldi	r24, 0x04	; 4
    1912:	8f 93       	push	r24
    1914:	e8 da       	rcall	.-2608   	; 0xee6 <SendTrace>
    1916:	99 81       	ldd	r25, Y+1	; 0x01
    1918:	9f 73       	andi	r25, 0x3F	; 63
    191a:	f8 01       	movw	r30, r16
    191c:	80 81       	ld	r24, Z
    191e:	80 7c       	andi	r24, 0xC0	; 192
    1920:	89 2b       	or	r24, r25
    1922:	80 83       	st	Z, r24
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	81 e6       	ldi	r24, 0x61	; 97
    192c:	8a 83       	std	Y+2, r24	; 0x02
    192e:	f8 01       	movw	r30, r16
    1930:	40 81       	ld	r20, Z
    1932:	b7 01       	movw	r22, r14
    1934:	ce 01       	movw	r24, r28
    1936:	02 96       	adiw	r24, 0x02	; 2
    1938:	3f df       	rcall	.-386    	; 0x17b8 <TCReceive>
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	1f 91       	pop	r17
    1944:	0f 91       	pop	r16
    1946:	ff 90       	pop	r15
    1948:	ef 90       	pop	r14
    194a:	08 95       	ret

0000194c <TCReadReg>:
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29
    1950:	1f 92       	push	r1
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	89 83       	std	Y+1, r24	; 0x01
    1958:	ce 01       	movw	r24, r28
    195a:	01 96       	adiw	r24, 0x01	; 1
    195c:	2d df       	rcall	.-422    	; 0x17b8 <TCReceive>
    195e:	0f 90       	pop	r0
    1960:	df 91       	pop	r29
    1962:	cf 91       	pop	r28
    1964:	08 95       	ret

00001966 <TCWriteReg>:
    1966:	0f 93       	push	r16
    1968:	1f 93       	push	r17
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	00 d0       	rcall	.+0      	; 0x1970 <TCWriteReg+0xa>
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	18 2f       	mov	r17, r24
    1976:	1a 82       	std	Y+2, r1	; 0x02
    1978:	80 62       	ori	r24, 0x20	; 32
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	ce 01       	movw	r24, r28
    197e:	01 96       	adiw	r24, 0x01	; 1
    1980:	59 de       	rcall	.-846    	; 0x1634 <TCTransmit>
    1982:	08 2f       	mov	r16, r24
    1984:	41 e0       	ldi	r20, 0x01	; 1
    1986:	be 01       	movw	r22, r28
    1988:	6e 5f       	subi	r22, 0xFE	; 254
    198a:	7f 4f       	sbci	r23, 0xFF	; 255
    198c:	81 2f       	mov	r24, r17
    198e:	de df       	rcall	.-68     	; 0x194c <TCReadReg>
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	1f 92       	push	r1
    1994:	8f 93       	push	r24
    1996:	1f 92       	push	r1
    1998:	1f 93       	push	r17
    199a:	29 e1       	ldi	r18, 0x19	; 25
    199c:	37 e0       	ldi	r19, 0x07	; 7
    199e:	3f 93       	push	r19
    19a0:	2f 93       	push	r18
    19a2:	84 e0       	ldi	r24, 0x04	; 4
    19a4:	8f 93       	push	r24
    19a6:	9f da       	rcall	.-2754   	; 0xee6 <SendTrace>
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	80 2f       	mov	r24, r16
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	08 95       	ret

000019c2 <InitTransceiver>:
    19c2:	ef 92       	push	r14
    19c4:	ff 92       	push	r15
    19c6:	0f 93       	push	r16
    19c8:	1f 93       	push	r17
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	28 97       	sbiw	r28, 0x08	; 8
    19d4:	0f b6       	in	r0, 0x3f	; 63
    19d6:	f8 94       	cli
    19d8:	de bf       	out	0x3e, r29	; 62
    19da:	0f be       	out	0x3f, r0	; 63
    19dc:	cd bf       	out	0x3d, r28	; 61
    19de:	7c 01       	movw	r14, r24
    19e0:	00 97       	sbiw	r24, 0x00	; 0
    19e2:	59 f4       	brne	.+22     	; 0x19fa <InitTransceiver+0x38>
    19e4:	8a e3       	ldi	r24, 0x3A	; 58
    19e6:	97 e0       	ldi	r25, 0x07	; 7
    19e8:	9f 93       	push	r25
    19ea:	8f 93       	push	r24
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	8f 93       	push	r24
    19f0:	7a da       	rcall	.-2828   	; 0xee6 <SendTrace>
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	30 c1       	rjmp	.+608    	; 0x1c5a <InitTransceiver+0x298>
    19fa:	80 91 ee 15 	lds	r24, 0x15EE
    19fe:	88 23       	and	r24, r24
    1a00:	59 f0       	breq	.+22     	; 0x1a18 <InitTransceiver+0x56>
    1a02:	82 e7       	ldi	r24, 0x72	; 114
    1a04:	97 e0       	ldi	r25, 0x07	; 7
    1a06:	9f 93       	push	r25
    1a08:	8f 93       	push	r24
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	8f 93       	push	r24
    1a0e:	6b da       	rcall	.-2858   	; 0xee6 <SendTrace>
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	21 c1       	rjmp	.+578    	; 0x1c5a <InitTransceiver+0x298>
    1a18:	ed e1       	ldi	r30, 0x1D	; 29
    1a1a:	f6 e1       	ldi	r31, 0x16	; 22
    1a1c:	2d e3       	ldi	r18, 0x3D	; 61
    1a1e:	36 e1       	ldi	r19, 0x16	; 22
    1a20:	8f ef       	ldi	r24, 0xFF	; 255
    1a22:	81 93       	st	Z+, r24
    1a24:	e2 17       	cp	r30, r18
    1a26:	f3 07       	cpc	r31, r19
    1a28:	e1 f7       	brne	.-8      	; 0x1a22 <InitTransceiver+0x60>
    1a2a:	3f 9a       	sbi	0x07, 7	; 7
    1a2c:	f7 01       	movw	r30, r14
    1a2e:	84 89       	ldd	r24, Z+20	; 0x14
    1a30:	95 89       	ldd	r25, Z+21	; 0x15
    1a32:	89 2b       	or	r24, r25
    1a34:	99 f0       	breq	.+38     	; 0x1a5c <InitTransceiver+0x9a>
    1a36:	80 8d       	ldd	r24, Z+24	; 0x18
    1a38:	91 8d       	ldd	r25, Z+25	; 0x19
    1a3a:	89 2b       	or	r24, r25
    1a3c:	79 f0       	breq	.+30     	; 0x1a5c <InitTransceiver+0x9a>
    1a3e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a40:	95 8d       	ldd	r25, Z+29	; 0x1d
    1a42:	89 2b       	or	r24, r25
    1a44:	59 f0       	breq	.+22     	; 0x1a5c <InitTransceiver+0x9a>
    1a46:	01 e0       	ldi	r16, 0x01	; 1
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	43 e6       	ldi	r20, 0x63	; 99
    1a4e:	5e e0       	ldi	r21, 0x0E	; 14
    1a50:	62 e0       	ldi	r22, 0x02	; 2
    1a52:	82 e0       	ldi	r24, 0x02	; 2
    1a54:	4f d2       	rcall	.+1182   	; 0x1ef4 <RegisterExtInterrupt>
    1a56:	88 23       	and	r24, r24
    1a58:	09 f4       	brne	.+2      	; 0x1a5c <InitTransceiver+0x9a>
    1a5a:	ff c0       	rjmp	.+510    	; 0x1c5a <InitTransceiver+0x298>
    1a5c:	47 98       	cbi	0x08, 7	; 8
    1a5e:	ff ef       	ldi	r31, 0xFF	; 255
    1a60:	20 e7       	ldi	r18, 0x70	; 112
    1a62:	82 e0       	ldi	r24, 0x02	; 2
    1a64:	f1 50       	subi	r31, 0x01	; 1
    1a66:	20 40       	sbci	r18, 0x00	; 0
    1a68:	80 40       	sbci	r24, 0x00	; 0
    1a6a:	e1 f7       	brne	.-8      	; 0x1a64 <InitTransceiver+0xa2>
    1a6c:	00 c0       	rjmp	.+0      	; 0x1a6e <InitTransceiver+0xac>
    1a6e:	00 00       	nop
    1a70:	f7 01       	movw	r30, r14
    1a72:	80 a1       	ldd	r24, Z+32	; 0x20
    1a74:	80 93 3d 16 	sts	0x163D, r24
    1a78:	84 89       	ldd	r24, Z+20	; 0x14
    1a7a:	95 89       	ldd	r25, Z+21	; 0x15
    1a7c:	90 93 ed 15 	sts	0x15ED, r25
    1a80:	80 93 ec 15 	sts	0x15EC, r24
    1a84:	86 89       	ldd	r24, Z+22	; 0x16
    1a86:	97 89       	ldd	r25, Z+23	; 0x17
    1a88:	90 93 eb 15 	sts	0x15EB, r25
    1a8c:	80 93 ea 15 	sts	0x15EA, r24
    1a90:	80 8d       	ldd	r24, Z+24	; 0x18
    1a92:	91 8d       	ldd	r25, Z+25	; 0x19
    1a94:	90 93 e9 15 	sts	0x15E9, r25
    1a98:	80 93 e8 15 	sts	0x15E8, r24
    1a9c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a9e:	93 8d       	ldd	r25, Z+27	; 0x1b
    1aa0:	90 93 e7 15 	sts	0x15E7, r25
    1aa4:	80 93 e6 15 	sts	0x15E6, r24
    1aa8:	84 8d       	ldd	r24, Z+28	; 0x1c
    1aaa:	95 8d       	ldd	r25, Z+29	; 0x1d
    1aac:	90 93 e5 15 	sts	0x15E5, r25
    1ab0:	80 93 e4 15 	sts	0x15E4, r24
    1ab4:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ab6:	97 8d       	ldd	r25, Z+31	; 0x1f
    1ab8:	90 93 e3 15 	sts	0x15E3, r25
    1abc:	80 93 e2 15 	sts	0x15E2, r24
    1ac0:	5b d1       	rcall	.+694    	; 0x1d78 <TCInitTransfer>
    1ac2:	19 82       	std	Y+1, r1	; 0x01
    1ac4:	f7 01       	movw	r30, r14
    1ac6:	80 81       	ld	r24, Z
    1ac8:	81 11       	cpse	r24, r1
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <InitTransceiver+0x10e>
    1acc:	81 60       	ori	r24, 0x01	; 1
    1ace:	89 83       	std	Y+1, r24	; 0x01
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	82 60       	ori	r24, 0x02	; 2
    1ad4:	88 60       	ori	r24, 0x08	; 8
    1ad6:	89 83       	std	Y+1, r24	; 0x01
    1ad8:	41 e0       	ldi	r20, 0x01	; 1
    1ada:	be 01       	movw	r22, r28
    1adc:	6f 5f       	subi	r22, 0xFF	; 255
    1ade:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	41 df       	rcall	.-382    	; 0x1966 <TCWriteReg>
    1ae4:	19 82       	std	Y+1, r1	; 0x01
    1ae6:	1a 82       	std	Y+2, r1	; 0x02
    1ae8:	f7 01       	movw	r30, r14
    1aea:	80 a1       	ldd	r24, Z+32	; 0x20
    1aec:	88 23       	and	r24, r24
    1aee:	21 f0       	breq	.+8      	; 0x1af8 <InitTransceiver+0x136>
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	80 7c       	andi	r24, 0xC0	; 192
    1af4:	81 60       	ori	r24, 0x01	; 1
    1af6:	8a 83       	std	Y+2, r24	; 0x02
    1af8:	41 e0       	ldi	r20, 0x01	; 1
    1afa:	be 01       	movw	r22, r28
    1afc:	6e 5f       	subi	r22, 0xFE	; 254
    1afe:	7f 4f       	sbci	r23, 0xFF	; 255
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	31 df       	rcall	.-414    	; 0x1966 <TCWriteReg>
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	8b 83       	std	Y+3, r24	; 0x03
    1b08:	41 e0       	ldi	r20, 0x01	; 1
    1b0a:	be 01       	movw	r22, r28
    1b0c:	6d 5f       	subi	r22, 0xFD	; 253
    1b0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b10:	82 e0       	ldi	r24, 0x02	; 2
    1b12:	29 df       	rcall	.-430    	; 0x1966 <TCWriteReg>
    1b14:	f7 01       	movw	r30, r14
    1b16:	82 89       	ldd	r24, Z+18	; 0x12
    1b18:	91 89       	ldd	r25, Z+17	; 0x11
    1b1a:	9f 70       	andi	r25, 0x0F	; 15
    1b1c:	82 95       	swap	r24
    1b1e:	80 7f       	andi	r24, 0xF0	; 240
    1b20:	89 2b       	or	r24, r25
    1b22:	8c 83       	std	Y+4, r24	; 0x04
    1b24:	41 e0       	ldi	r20, 0x01	; 1
    1b26:	be 01       	movw	r22, r28
    1b28:	6c 5f       	subi	r22, 0xFC	; 252
    1b2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2c:	84 e0       	ldi	r24, 0x04	; 4
    1b2e:	1b df       	rcall	.-458    	; 0x1966 <TCWriteReg>
    1b30:	41 e0       	ldi	r20, 0x01	; 1
    1b32:	b7 01       	movw	r22, r14
    1b34:	6d 5e       	subi	r22, 0xED	; 237
    1b36:	7f 4f       	sbci	r23, 0xFF	; 255
    1b38:	85 e0       	ldi	r24, 0x05	; 5
    1b3a:	15 df       	rcall	.-470    	; 0x1966 <TCWriteReg>
    1b3c:	8e e0       	ldi	r24, 0x0E	; 14
    1b3e:	8d 83       	std	Y+5, r24	; 0x05
    1b40:	41 e0       	ldi	r20, 0x01	; 1
    1b42:	be 01       	movw	r22, r28
    1b44:	6b 5f       	subi	r22, 0xFB	; 251
    1b46:	7f 4f       	sbci	r23, 0xFF	; 255
    1b48:	86 e0       	ldi	r24, 0x06	; 6
    1b4a:	0d df       	rcall	.-486    	; 0x1966 <TCWriteReg>
    1b4c:	f7 01       	movw	r30, r14
    1b4e:	71 81       	ldd	r23, Z+1	; 0x01
    1b50:	62 81       	ldd	r22, Z+2	; 0x02
    1b52:	53 81       	ldd	r21, Z+3	; 0x03
    1b54:	44 81       	ldd	r20, Z+4	; 0x04
    1b56:	35 81       	ldd	r19, Z+5	; 0x05
    1b58:	26 81       	ldd	r18, Z+6	; 0x06
    1b5a:	97 81       	ldd	r25, Z+7	; 0x07
    1b5c:	80 85       	ldd	r24, Z+8	; 0x08
    1b5e:	ee e3       	ldi	r30, 0x3E	; 62
    1b60:	f6 e1       	ldi	r31, 0x16	; 22
    1b62:	70 83       	st	Z, r23
    1b64:	61 83       	std	Z+1, r22	; 0x01
    1b66:	52 83       	std	Z+2, r21	; 0x02
    1b68:	43 83       	std	Z+3, r20	; 0x03
    1b6a:	34 83       	std	Z+4, r19	; 0x04
    1b6c:	25 83       	std	Z+5, r18	; 0x05
    1b6e:	96 83       	std	Z+6, r25	; 0x06
    1b70:	87 83       	std	Z+7, r24	; 0x07
    1b72:	f7 01       	movw	r30, r14
    1b74:	71 81       	ldd	r23, Z+1	; 0x01
    1b76:	62 81       	ldd	r22, Z+2	; 0x02
    1b78:	53 81       	ldd	r21, Z+3	; 0x03
    1b7a:	44 81       	ldd	r20, Z+4	; 0x04
    1b7c:	35 81       	ldd	r19, Z+5	; 0x05
    1b7e:	26 81       	ldd	r18, Z+6	; 0x06
    1b80:	97 81       	ldd	r25, Z+7	; 0x07
    1b82:	80 85       	ldd	r24, Z+8	; 0x08
    1b84:	e6 e4       	ldi	r30, 0x46	; 70
    1b86:	f6 e1       	ldi	r31, 0x16	; 22
    1b88:	70 83       	st	Z, r23
    1b8a:	61 83       	std	Z+1, r22	; 0x01
    1b8c:	52 83       	std	Z+2, r21	; 0x02
    1b8e:	43 83       	std	Z+3, r20	; 0x03
    1b90:	34 83       	std	Z+4, r19	; 0x04
    1b92:	25 83       	std	Z+5, r18	; 0x05
    1b94:	96 83       	std	Z+6, r25	; 0x06
    1b96:	87 83       	std	Z+7, r24	; 0x07
    1b98:	f7 01       	movw	r30, r14
    1b9a:	80 a1       	ldd	r24, Z+32	; 0x20
    1b9c:	88 23       	and	r24, r24
    1b9e:	b1 f0       	breq	.+44     	; 0x1bcc <InitTransceiver+0x20a>
    1ba0:	80 81       	ld	r24, Z
    1ba2:	81 11       	cpse	r24, r1
    1ba4:	07 c0       	rjmp	.+14     	; 0x1bb4 <InitTransceiver+0x1f2>
    1ba6:	45 e0       	ldi	r20, 0x05	; 5
    1ba8:	b7 01       	movw	r22, r14
    1baa:	6f 5f       	subi	r22, 0xFF	; 255
    1bac:	7f 4f       	sbci	r23, 0xFF	; 255
    1bae:	8a e0       	ldi	r24, 0x0A	; 10
    1bb0:	da de       	rcall	.-588    	; 0x1966 <TCWriteReg>
    1bb2:	18 c0       	rjmp	.+48     	; 0x1be4 <InitTransceiver+0x222>
    1bb4:	45 e0       	ldi	r20, 0x05	; 5
    1bb6:	87 01       	movw	r16, r14
    1bb8:	07 5f       	subi	r16, 0xF7	; 247
    1bba:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbc:	b8 01       	movw	r22, r16
    1bbe:	8a e0       	ldi	r24, 0x0A	; 10
    1bc0:	d2 de       	rcall	.-604    	; 0x1966 <TCWriteReg>
    1bc2:	45 e0       	ldi	r20, 0x05	; 5
    1bc4:	b8 01       	movw	r22, r16
    1bc6:	80 e1       	ldi	r24, 0x10	; 16
    1bc8:	ce de       	rcall	.-612    	; 0x1966 <TCWriteReg>
    1bca:	0c c0       	rjmp	.+24     	; 0x1be4 <InitTransceiver+0x222>
    1bcc:	45 e0       	ldi	r20, 0x05	; 5
    1bce:	b7 01       	movw	r22, r14
    1bd0:	6f 5f       	subi	r22, 0xFF	; 255
    1bd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd4:	8a e0       	ldi	r24, 0x0A	; 10
    1bd6:	c7 de       	rcall	.-626    	; 0x1966 <TCWriteReg>
    1bd8:	45 e0       	ldi	r20, 0x05	; 5
    1bda:	b7 01       	movw	r22, r14
    1bdc:	67 5f       	subi	r22, 0xF7	; 247
    1bde:	7f 4f       	sbci	r23, 0xFF	; 255
    1be0:	80 e1       	ldi	r24, 0x10	; 16
    1be2:	c1 de       	rcall	.-638    	; 0x1966 <TCWriteReg>
    1be4:	f7 01       	movw	r30, r14
    1be6:	80 a1       	ldd	r24, Z+32	; 0x20
    1be8:	81 11       	cpse	r24, r1
    1bea:	0e c0       	rjmp	.+28     	; 0x1c08 <InitTransceiver+0x246>
    1bec:	8f 81       	ldd	r24, Y+7	; 0x07
    1bee:	80 7c       	andi	r24, 0xC0	; 192
    1bf0:	80 62       	ori	r24, 0x20	; 32
    1bf2:	8f 83       	std	Y+7, r24	; 0x07
    1bf4:	41 e0       	ldi	r20, 0x01	; 1
    1bf6:	be 01       	movw	r22, r28
    1bf8:	69 5f       	subi	r22, 0xF9	; 249
    1bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfc:	81 e1       	ldi	r24, 0x11	; 17
    1bfe:	b3 de       	rcall	.-666    	; 0x1966 <TCWriteReg>
    1c00:	f7 01       	movw	r30, r14
    1c02:	80 a1       	ldd	r24, Z+32	; 0x20
    1c04:	88 23       	and	r24, r24
    1c06:	41 f0       	breq	.+16     	; 0x1c18 <InitTransceiver+0x256>
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	8e 83       	std	Y+6, r24	; 0x06
    1c0c:	41 e0       	ldi	r20, 0x01	; 1
    1c0e:	be 01       	movw	r22, r28
    1c10:	6a 5f       	subi	r22, 0xFA	; 250
    1c12:	7f 4f       	sbci	r23, 0xFF	; 255
    1c14:	8c e1       	ldi	r24, 0x1C	; 28
    1c16:	a7 de       	rcall	.-690    	; 0x1966 <TCWriteReg>
    1c18:	82 e0       	ldi	r24, 0x02	; 2
    1c1a:	88 87       	std	Y+8, r24	; 0x08
    1c1c:	f7 01       	movw	r30, r14
    1c1e:	80 a1       	ldd	r24, Z+32	; 0x20
    1c20:	88 23       	and	r24, r24
    1c22:	19 f0       	breq	.+6      	; 0x1c2a <InitTransceiver+0x268>
    1c24:	82 e0       	ldi	r24, 0x02	; 2
    1c26:	84 60       	ori	r24, 0x04	; 4
    1c28:	88 87       	std	Y+8, r24	; 0x08
    1c2a:	41 e0       	ldi	r20, 0x01	; 1
    1c2c:	be 01       	movw	r22, r28
    1c2e:	68 5f       	subi	r22, 0xF8	; 248
    1c30:	7f 4f       	sbci	r23, 0xFF	; 255
    1c32:	8d e1       	ldi	r24, 0x1D	; 29
    1c34:	98 de       	rcall	.-720    	; 0x1966 <TCWriteReg>
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	e2 dc       	rcall	.-1596   	; 0x15fe <TCFlushFIFO>
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	e0 dc       	rcall	.-1600   	; 0x15fe <TCFlushFIFO>
    1c3e:	f7 01       	movw	r30, r14
    1c40:	80 81       	ld	r24, Z
    1c42:	81 11       	cpse	r24, r1
    1c44:	07 c0       	rjmp	.+14     	; 0x1c54 <InitTransceiver+0x292>
    1c46:	47 9a       	sbi	0x08, 7	; 8
    1c48:	83 e0       	ldi	r24, 0x03	; 3
    1c4a:	91 e0       	ldi	r25, 0x01	; 1
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <InitTransceiver+0x28a>
    1c50:	00 c0       	rjmp	.+0      	; 0x1c52 <InitTransceiver+0x290>
    1c52:	00 00       	nop
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	80 93 ee 15 	sts	0x15EE, r24
    1c5a:	80 91 ee 15 	lds	r24, 0x15EE
    1c5e:	28 96       	adiw	r28, 0x08	; 8
    1c60:	0f b6       	in	r0, 0x3f	; 63
    1c62:	f8 94       	cli
    1c64:	de bf       	out	0x3e, r29	; 62
    1c66:	0f be       	out	0x3f, r0	; 63
    1c68:	cd bf       	out	0x3d, r28	; 61
    1c6a:	df 91       	pop	r29
    1c6c:	cf 91       	pop	r28
    1c6e:	1f 91       	pop	r17
    1c70:	0f 91       	pop	r16
    1c72:	ff 90       	pop	r15
    1c74:	ef 90       	pop	r14
    1c76:	08 95       	ret

00001c78 <TCIsReceivePayloadAvailable>:
    1c78:	cf 93       	push	r28
    1c7a:	df 93       	push	r29
    1c7c:	1f 92       	push	r1
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
    1c82:	41 e0       	ldi	r20, 0x01	; 1
    1c84:	be 01       	movw	r22, r28
    1c86:	6f 5f       	subi	r22, 0xFF	; 255
    1c88:	7f 4f       	sbci	r23, 0xFF	; 255
    1c8a:	87 e0       	ldi	r24, 0x07	; 7
    1c8c:	5f de       	rcall	.-834    	; 0x194c <TCReadReg>
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	86 ff       	sbrs	r24, 6
    1c92:	14 c0       	rjmp	.+40     	; 0x1cbc <TCIsReceivePayloadAvailable+0x44>
    1c94:	80 e4       	ldi	r24, 0x40	; 64
    1c96:	89 83       	std	Y+1, r24	; 0x01
    1c98:	41 e0       	ldi	r20, 0x01	; 1
    1c9a:	be 01       	movw	r22, r28
    1c9c:	6f 5f       	subi	r22, 0xFF	; 255
    1c9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca0:	87 e0       	ldi	r24, 0x07	; 7
    1ca2:	61 de       	rcall	.-830    	; 0x1966 <TCWriteReg>
    1ca4:	86 ea       	ldi	r24, 0xA6	; 166
    1ca6:	97 e0       	ldi	r25, 0x07	; 7
    1ca8:	9f 93       	push	r25
    1caa:	8f 93       	push	r24
    1cac:	84 e0       	ldi	r24, 0x04	; 4
    1cae:	8f 93       	push	r24
    1cb0:	1a d9       	rcall	.-3532   	; 0xee6 <SendTrace>
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	01 c0       	rjmp	.+2      	; 0x1cbe <TCIsReceivePayloadAvailable+0x46>
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	0f 90       	pop	r0
    1cc0:	df 91       	pop	r29
    1cc2:	cf 91       	pop	r28
    1cc4:	08 95       	ret

00001cc6 <TCIntCallback>:
// Interrupt Callback
//

void
TCIntCallback(PVOID CallbackContext)
{
    1cc6:	cf 93       	push	r28
    1cc8:	df 93       	push	r29
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <TCIntCallback+0x6>
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
	
	//
	// Read STATUS Register to find the cause of interrupt
	//
	
	TCReadReg(STATUS_OFFSET, &StatusReg.AsUINT8, 1);
    1cd0:	41 e0       	ldi	r20, 0x01	; 1
    1cd2:	be 01       	movw	r22, r28
    1cd4:	6f 5f       	subi	r22, 0xFF	; 255
    1cd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd8:	87 e0       	ldi	r24, 0x07	; 7
    1cda:	38 de       	rcall	.-912    	; 0x194c <TCReadReg>
	
	SendTrace(INFO_LEVEL, "ISR - Status Reg = 0x%x\r\n", StatusReg.AsUINT8);
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	1f 92       	push	r1
    1ce0:	8f 93       	push	r24
    1ce2:	87 e3       	ldi	r24, 0x37	; 55
    1ce4:	98 e0       	ldi	r25, 0x08	; 8
    1ce6:	9f 93       	push	r25
    1ce8:	8f 93       	push	r24
    1cea:	84 e0       	ldi	r24, 0x04	; 4
    1cec:	8f 93       	push	r24
    1cee:	fb d8       	rcall	.-3594   	; 0xee6 <SendTrace>
	
	ClearInt.AsUINT8 = 0;
    1cf0:	1a 82       	std	Y+2, r1	; 0x02
	
	if (StatusReg.MAX_RT && gMaxRTCallback != NULL)
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	84 ff       	sbrs	r24, 4
    1d00:	0e c0       	rjmp	.+28     	; 0x1d1e <TCIntCallback+0x58>
    1d02:	e0 91 ec 15 	lds	r30, 0x15EC
    1d06:	f0 91 ed 15 	lds	r31, 0x15ED
    1d0a:	30 97       	sbiw	r30, 0x00	; 0
    1d0c:	41 f0       	breq	.+16     	; 0x1d1e <TCIntCallback+0x58>
	{
		gMaxRTCallback(gMaxRTCallbackContext);
    1d0e:	80 91 ea 15 	lds	r24, 0x15EA
    1d12:	90 91 eb 15 	lds	r25, 0x15EB
    1d16:	09 95       	icall
		
		ClearInt.MAX_RT = 1;
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	80 61       	ori	r24, 0x10	; 16
    1d1c:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	if (StatusReg.RX_DR && gRxDRCallback != NULL)
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	86 ff       	sbrs	r24, 6
    1d22:	0e c0       	rjmp	.+28     	; 0x1d40 <TCIntCallback+0x7a>
    1d24:	e0 91 e8 15 	lds	r30, 0x15E8
    1d28:	f0 91 e9 15 	lds	r31, 0x15E9
    1d2c:	30 97       	sbiw	r30, 0x00	; 0
    1d2e:	41 f0       	breq	.+16     	; 0x1d40 <TCIntCallback+0x7a>
	{
		gRxDRCallback(gRxDRCallbackContext);
    1d30:	80 91 e6 15 	lds	r24, 0x15E6
    1d34:	90 91 e7 15 	lds	r25, 0x15E7
    1d38:	09 95       	icall
		
		ClearInt.RX_DR = 1;
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	80 64       	ori	r24, 0x40	; 64
    1d3e:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	if (StatusReg.TX_DS && gTxDSCallback != NULL)
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	85 ff       	sbrs	r24, 5
    1d44:	0e c0       	rjmp	.+28     	; 0x1d62 <TCIntCallback+0x9c>
    1d46:	e0 91 e4 15 	lds	r30, 0x15E4
    1d4a:	f0 91 e5 15 	lds	r31, 0x15E5
    1d4e:	30 97       	sbiw	r30, 0x00	; 0
    1d50:	41 f0       	breq	.+16     	; 0x1d62 <TCIntCallback+0x9c>
	{
		gTxDSCallback(gTxDSCallbackContext);
    1d52:	80 91 e2 15 	lds	r24, 0x15E2
    1d56:	90 91 e3 15 	lds	r25, 0x15E3
    1d5a:	09 95       	icall
		
		ClearInt.TX_DS = 1;
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	80 62       	ori	r24, 0x20	; 32
    1d60:	8a 83       	std	Y+2, r24	; 0x02
	
	//
	// Clear the interrupts
	//
	
	TCWriteReg(STATUS_OFFSET, &ClearInt.AsUINT8, 1);
    1d62:	41 e0       	ldi	r20, 0x01	; 1
    1d64:	be 01       	movw	r22, r28
    1d66:	6e 5f       	subi	r22, 0xFE	; 254
    1d68:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6a:	87 e0       	ldi	r24, 0x07	; 7
    1d6c:	fc dd       	rcall	.-1032   	; 0x1966 <TCWriteReg>
} 
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	df 91       	pop	r29
    1d74:	cf 91       	pop	r28
    1d76:	08 95       	ret

00001d78 <TCInitTransfer>:

#include "Trace.h"

void
TCInitTransfer ()
{
    1d78:	cf 93       	push	r28
    1d7a:	df 93       	push	r29
    1d7c:	00 d0       	rcall	.+0      	; 0x1d7e <TCInitTransfer+0x6>
    1d7e:	00 d0       	rcall	.+0      	; 0x1d80 <TCInitTransfer+0x8>
    1d80:	1f 92       	push	r1
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
	//
	// SPI Initialization Code for ATMega 1284P
	
	SPI_MODE SPIMode;
	
	SPIMode.IsMaster		= TRUE;
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	89 83       	std	Y+1, r24	; 0x01

	SPIMode.ClockPolarity	= CLK_POL_0;
    1d8a:	1a 82       	std	Y+2, r1	; 0x02
	
	SPIMode.ClockPulse		= CLK_PUL_0;
    1d8c:	1b 82       	std	Y+3, r1	; 0x03
	
	SPIMode.DataOrder		= DATA_ORDER_MSB;
    1d8e:	1c 82       	std	Y+4, r1	; 0x04
	
	SPIMode.ClockRate		= FRE_OSC_BY_4;
    1d90:	1d 82       	std	Y+5, r1	; 0x05
	
	InitSPI(&SPIMode);
    1d92:	ce 01       	movw	r24, r28
    1d94:	01 96       	adiw	r24, 0x01	; 1
    1d96:	08 d0       	rcall	.+16     	; 0x1da8 <InitSPI>
	//
	// SPI Initialization Code for Galileo
	//

#endif
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	08 95       	ret

00001da8 <InitSPI>:

bool gIsMaster				= FALSE;

void
InitSPI (PSPI_MODE SPIMode)
{	
    1da8:	fc 01       	movw	r30, r24
	
	//
	// Disable SPI
	//

	SPCR = 0;
    1daa:	1c bc       	out	0x2c, r1	; 44

	//
	// Reset Data Direction Register of SPI
	//

	DDRB &= ~((1 << PORTB4) | (1 << PORTB5) | (1 << PORTB6) | (1 << PORTB7));
    1dac:	84 b1       	in	r24, 0x04	; 4
    1dae:	8f 70       	andi	r24, 0x0F	; 15
    1db0:	84 b9       	out	0x04, r24	; 4

	//
	// Set Clock Rate
	//

	SPCR = SPIMode->ClockRate & SPCR_CLOCK_RATE_MASK;
    1db2:	84 81       	ldd	r24, Z+4	; 0x04
    1db4:	83 70       	andi	r24, 0x03	; 3
    1db6:	8c bd       	out	0x2c, r24	; 44

	if (SPIMode->ClockRate & SPSR_CLOCK_RATE_MASK)
    1db8:	84 81       	ldd	r24, Z+4	; 0x04
    1dba:	82 ff       	sbrs	r24, 2
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <InitSPI+0x1a>
	{
		SPSR = (1 << SPI2X);
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	8d bd       	out	0x2d, r24	; 45
	}

	if (SPIMode->ClockPulse)
    1dc2:	82 81       	ldd	r24, Z+2	; 0x02
    1dc4:	88 23       	and	r24, r24
    1dc6:	19 f0       	breq	.+6      	; 0x1dce <InitSPI+0x26>
	{
		SPCR |= (1 << CPHA);
    1dc8:	8c b5       	in	r24, 0x2c	; 44
    1dca:	84 60       	ori	r24, 0x04	; 4
    1dcc:	8c bd       	out	0x2c, r24	; 44

	//
	// Set Clock Polarity
	//

	if (SPIMode->ClockPolarity)
    1dce:	81 81       	ldd	r24, Z+1	; 0x01
    1dd0:	88 23       	and	r24, r24
    1dd2:	19 f0       	breq	.+6      	; 0x1dda <InitSPI+0x32>
	{
		SPCR |= (1 << CPOL);
    1dd4:	8c b5       	in	r24, 0x2c	; 44
    1dd6:	88 60       	ori	r24, 0x08	; 8
    1dd8:	8c bd       	out	0x2c, r24	; 44

	//
	// Set Clock Pulse
	//

	if (SPIMode->DataOrder)
    1dda:	83 81       	ldd	r24, Z+3	; 0x03
    1ddc:	88 23       	and	r24, r24
    1dde:	19 f0       	breq	.+6      	; 0x1de6 <InitSPI+0x3e>
	{
		SPCR |= (1 << DORD);
    1de0:	8c b5       	in	r24, 0x2c	; 44
    1de2:	80 62       	ori	r24, 0x20	; 32
    1de4:	8c bd       	out	0x2c, r24	; 44

	//
	// Set Direction Registers Accordingly.
	//
		
	if (SPIMode->IsMaster)
    1de6:	80 81       	ld	r24, Z
    1de8:	88 23       	and	r24, r24
    1dea:	59 f0       	breq	.+22     	; 0x1e02 <InitSPI+0x5a>
	{
		//
		// Master Mode
		//

		DDRB |= ((1 << PORTB4) | (1 << PORTB5) | (1 << PORTB7));
    1dec:	84 b1       	in	r24, 0x04	; 4
    1dee:	80 6b       	ori	r24, 0xB0	; 176
    1df0:	84 b9       	out	0x04, r24	; 4

		SPCR |= (1 << MSTR);
    1df2:	8c b5       	in	r24, 0x2c	; 44
    1df4:	80 61       	ori	r24, 0x10	; 16
    1df6:	8c bd       	out	0x2c, r24	; 44
			
		SS_HIGH();
    1df8:	2c 9a       	sbi	0x05, 4	; 5

		gIsMaster = TRUE;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	80 93 ef 15 	sts	0x15EF, r24
    1e00:	01 c0       	rjmp	.+2      	; 0x1e04 <InitSPI+0x5c>
	{
		//
		// Slave Mode
		//

		DDRB |= (1 << PORTB6);
    1e02:	26 9a       	sbi	0x04, 6	; 4

	//
	// Clear SPDR
	//
	
	SPDR = 0;
    1e04:	1e bc       	out	0x2e, r1	; 46

	//
	// Enable SPI
	//

	SPCR |= (1 << SPE);
    1e06:	8c b5       	in	r24, 0x2c	; 44
    1e08:	80 64       	ori	r24, 0x40	; 64
    1e0a:	8c bd       	out	0x2c, r24	; 44
	
	gSPIInitialized = TRUE;
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	80 93 f0 15 	sts	0x15F0, r24
    1e12:	08 95       	ret

00001e14 <SPIBeginTransfer>:
}

void
SPIBeginTransfer()
{
	SS_LOW();
    1e14:	2c 98       	cbi	0x05, 4	; 5
    1e16:	08 95       	ret

00001e18 <SPIEndTransfer>:

void
SPIEndTransfer()
{

	SS_HIGH();
    1e18:	2c 9a       	sbi	0x05, 4	; 5
    1e1a:	08 95       	ret

00001e1c <SPIMasterTransfer>:
}

bool
SPIMasterTransfer(PVOID TransmitBuffer, PVOID ReceiveBuffer, unsigned long Length) 
{
    1e1c:	cf 92       	push	r12
    1e1e:	df 92       	push	r13
    1e20:	ef 92       	push	r14
    1e22:	ff 92       	push	r15
    1e24:	fb 01       	movw	r30, r22
	unsigned char *TxBytePtr = (unsigned char *) TransmitBuffer;
	
	unsigned char *RxBytePtr = (unsigned char *) ReceiveBuffer;
	

	if (!gSPIInitialized)
    1e26:	60 91 f0 15 	lds	r22, 0x15F0
    1e2a:	61 11       	cpse	r22, r1
    1e2c:	0c c0       	rjmp	.+24     	; 0x1e46 <SPIMasterTransfer+0x2a>
	{

		SendTrace(ERROR_LEVEL, "SPITransfer - SPI Not Initialized\r\n");
    1e2e:	81 e5       	ldi	r24, 0x51	; 81
    1e30:	98 e0       	ldi	r25, 0x08	; 8
    1e32:	9f 93       	push	r25
    1e34:	8f 93       	push	r24
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	8f 93       	push	r24
    1e3a:	55 d8       	rcall	.-3926   	; 0xee6 <SendTrace>

		Status = FALSE;

		goto Exit;
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
	if (!gSPIInitialized)
	{

		SendTrace(ERROR_LEVEL, "SPITransfer - SPI Not Initialized\r\n");

		Status = FALSE;
    1e42:	80 e0       	ldi	r24, 0x00	; 0

		goto Exit;
    1e44:	3b c0       	rjmp	.+118    	; 0x1ebc <SPIMasterTransfer+0xa0>
	}
	
	if (!gIsMaster)
    1e46:	60 91 ef 15 	lds	r22, 0x15EF
    1e4a:	61 11       	cpse	r22, r1
    1e4c:	0c c0       	rjmp	.+24     	; 0x1e66 <SPIMasterTransfer+0x4a>
	{

		SendTrace(ERROR_LEVEL, "SPITransfer - SPI Not In Master Mode\r\n");
    1e4e:	85 e7       	ldi	r24, 0x75	; 117
    1e50:	98 e0       	ldi	r25, 0x08	; 8
    1e52:	9f 93       	push	r25
    1e54:	8f 93       	push	r24
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	8f 93       	push	r24
    1e5a:	45 d8       	rcall	.-3958   	; 0xee6 <SendTrace>

		Status = FALSE;

		goto Exit;
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
	if (!gIsMaster)
	{

		SendTrace(ERROR_LEVEL, "SPITransfer - SPI Not In Master Mode\r\n");

		Status = FALSE;
    1e62:	80 e0       	ldi	r24, 0x00	; 0

		goto Exit;
    1e64:	2b c0       	rjmp	.+86     	; 0x1ebc <SPIMasterTransfer+0xa0>
	}
	
	if (Length == 0 || TransmitBuffer == NULL || ReceiveBuffer == NULL) 
    1e66:	21 15       	cp	r18, r1
    1e68:	31 05       	cpc	r19, r1
    1e6a:	41 05       	cpc	r20, r1
    1e6c:	51 05       	cpc	r21, r1
    1e6e:	21 f0       	breq	.+8      	; 0x1e78 <SPIMasterTransfer+0x5c>
    1e70:	00 97       	sbiw	r24, 0x00	; 0
    1e72:	11 f0       	breq	.+4      	; 0x1e78 <SPIMasterTransfer+0x5c>
    1e74:	30 97       	sbiw	r30, 0x00	; 0
    1e76:	61 f4       	brne	.+24     	; 0x1e90 <SPIMasterTransfer+0x74>
	{
		SendTrace(ERROR_LEVEL, "SPITransfer - SPI Buffer Error\r\n");
    1e78:	8c e9       	ldi	r24, 0x9C	; 156
    1e7a:	98 e0       	ldi	r25, 0x08	; 8
    1e7c:	9f 93       	push	r25
    1e7e:	8f 93       	push	r24
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	8f 93       	push	r24
    1e84:	30 d8       	rcall	.-4000   	; 0xee6 <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
	
	if (Length == 0 || TransmitBuffer == NULL || ReceiveBuffer == NULL) 
	{
		SendTrace(ERROR_LEVEL, "SPITransfer - SPI Buffer Error\r\n");
		
		Status = FALSE;
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
		
		goto Exit;
    1e8e:	16 c0       	rjmp	.+44     	; 0x1ebc <SPIMasterTransfer+0xa0>
    1e90:	dc 01       	movw	r26, r24
		Status = FALSE;

		goto Exit;
	}
	
	if (Length == 0 || TransmitBuffer == NULL || ReceiveBuffer == NULL) 
    1e92:	c1 2c       	mov	r12, r1
    1e94:	d1 2c       	mov	r13, r1
    1e96:	76 01       	movw	r14, r12
		goto Exit;
	}
	
	for (IndexI = 0; IndexI < Length; IndexI++)
	{
		SPDR = *TxBytePtr;
    1e98:	8d 91       	ld	r24, X+
    1e9a:	8e bd       	out	0x2e, r24	; 46
		
		//
		// Wait for transmission to complete
		//
		
		while (!(SPSR & (1 << SPIF)));
    1e9c:	0d b4       	in	r0, 0x2d	; 45
    1e9e:	07 fe       	sbrs	r0, 7
    1ea0:	fd cf       	rjmp	.-6      	; 0x1e9c <SPIMasterTransfer+0x80>
		
		//
		// Receive the data
		//
		
		*RxBytePtr = SPDR;
    1ea2:	8e b5       	in	r24, 0x2e	; 46
    1ea4:	81 93       	st	Z+, r24
		Status = FALSE;
		
		goto Exit;
	}
	
	for (IndexI = 0; IndexI < Length; IndexI++)
    1ea6:	8f ef       	ldi	r24, 0xFF	; 255
    1ea8:	c8 1a       	sub	r12, r24
    1eaa:	d8 0a       	sbc	r13, r24
    1eac:	e8 0a       	sbc	r14, r24
    1eae:	f8 0a       	sbc	r15, r24
    1eb0:	c2 16       	cp	r12, r18
    1eb2:	d3 06       	cpc	r13, r19
    1eb4:	e4 06       	cpc	r14, r20
    1eb6:	f5 06       	cpc	r15, r21
    1eb8:	79 f7       	brne	.-34     	; 0x1e98 <SPIMasterTransfer+0x7c>
}

bool
SPIMasterTransfer(PVOID TransmitBuffer, PVOID ReceiveBuffer, unsigned long Length) 
{
	bool Status = TRUE;
    1eba:	81 e0       	ldi	r24, 0x01	; 1
	
Exit:

	return Status;
	
}
    1ebc:	ff 90       	pop	r15
    1ebe:	ef 90       	pop	r14
    1ec0:	df 90       	pop	r13
    1ec2:	cf 90       	pop	r12
    1ec4:	08 95       	ret

00001ec6 <InitExtInt>:
	
	Exit:

	return Status;

}
    1ec6:	f8 94       	cli
    1ec8:	10 92 69 00 	sts	0x0069, r1
    1ecc:	1d ba       	out	0x1d, r1	; 29
    1ece:	87 e0       	ldi	r24, 0x07	; 7
    1ed0:	8c bb       	out	0x1c, r24	; 28
    1ed2:	10 92 68 00 	sts	0x0068, r1
    1ed6:	8f e0       	ldi	r24, 0x0F	; 15
    1ed8:	8b bb       	out	0x1b, r24	; 27
    1eda:	10 92 6b 00 	sts	0x006B, r1
    1ede:	10 92 6c 00 	sts	0x006C, r1
    1ee2:	10 92 6d 00 	sts	0x006D, r1
    1ee6:	10 92 73 00 	sts	0x0073, r1
    1eea:	78 94       	sei
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	80 93 fd 15 	sts	0x15FD, r24
    1ef2:	08 95       	ret

00001ef4 <RegisterExtInterrupt>:
    1ef4:	bf 92       	push	r11
    1ef6:	cf 92       	push	r12
    1ef8:	df 92       	push	r13
    1efa:	ef 92       	push	r14
    1efc:	ff 92       	push	r15
    1efe:	0f 93       	push	r16
    1f00:	1f 93       	push	r17
    1f02:	cf 93       	push	r28
    1f04:	df 93       	push	r29
    1f06:	18 2f       	mov	r17, r24
    1f08:	b6 2e       	mov	r11, r22
    1f0a:	ea 01       	movw	r28, r20
    1f0c:	69 01       	movw	r12, r18
    1f0e:	80 91 fd 15 	lds	r24, 0x15FD
    1f12:	81 11       	cpse	r24, r1
    1f14:	0d c0       	rjmp	.+26     	; 0x1f30 <RegisterExtInterrupt+0x3c>
    1f16:	8d eb       	ldi	r24, 0xBD	; 189
    1f18:	98 e0       	ldi	r25, 0x08	; 8
    1f1a:	9f 93       	push	r25
    1f1c:	8f 93       	push	r24
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	8f 93       	push	r24
    1f22:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	0f 90       	pop	r0
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	7e c0       	rjmp	.+252    	; 0x202c <RegisterExtInterrupt+0x138>
    1f30:	20 97       	sbiw	r28, 0x00	; 0
    1f32:	69 f4       	brne	.+26     	; 0x1f4e <RegisterExtInterrupt+0x5a>
    1f34:	82 ee       	ldi	r24, 0xE2	; 226
    1f36:	98 e0       	ldi	r25, 0x08	; 8
    1f38:	9f 93       	push	r25
    1f3a:	8f 93       	push	r24
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	8f 93       	push	r24
    1f40:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	6f c0       	rjmp	.+222    	; 0x202c <RegisterExtInterrupt+0x138>
    1f4e:	e1 2e       	mov	r14, r17
    1f50:	f1 2c       	mov	r15, r1
    1f52:	f7 01       	movw	r30, r14
    1f54:	ee 0f       	add	r30, r30
    1f56:	ff 1f       	adc	r31, r31
    1f58:	e9 50       	subi	r30, 0x09	; 9
    1f5a:	fa 4e       	sbci	r31, 0xEA	; 234
    1f5c:	40 81       	ld	r20, Z
    1f5e:	51 81       	ldd	r21, Z+1	; 0x01
    1f60:	45 2b       	or	r20, r21
    1f62:	69 f0       	breq	.+26     	; 0x1f7e <RegisterExtInterrupt+0x8a>
    1f64:	8d ef       	ldi	r24, 0xFD	; 253
    1f66:	98 e0       	ldi	r25, 0x08	; 8
    1f68:	9f 93       	push	r25
    1f6a:	8f 93       	push	r24
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	8f 93       	push	r24
    1f70:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	57 c0       	rjmp	.+174    	; 0x202c <RegisterExtInterrupt+0x138>
    1f7e:	1f 92       	push	r1
    1f80:	1f 93       	push	r17
    1f82:	8c e1       	ldi	r24, 0x1C	; 28
    1f84:	99 e0       	ldi	r25, 0x09	; 9
    1f86:	9f 93       	push	r25
    1f88:	8f 93       	push	r24
    1f8a:	84 e0       	ldi	r24, 0x04	; 4
    1f8c:	8f 93       	push	r24
    1f8e:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    1f92:	97 01       	movw	r18, r14
    1f94:	22 0f       	add	r18, r18
    1f96:	33 1f       	adc	r19, r19
    1f98:	f9 01       	movw	r30, r18
    1f9a:	e9 50       	subi	r30, 0x09	; 9
    1f9c:	fa 4e       	sbci	r31, 0xEA	; 234
    1f9e:	d1 83       	std	Z+1, r29	; 0x01
    1fa0:	c0 83       	st	Z, r28
    1fa2:	f9 01       	movw	r30, r18
    1fa4:	ef 50       	subi	r30, 0x0F	; 15
    1fa6:	fa 4e       	sbci	r31, 0xEA	; 234
    1fa8:	d1 82       	std	Z+1, r13	; 0x01
    1faa:	c0 82       	st	Z, r12
    1fac:	e9 e6       	ldi	r30, 0x69	; 105
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	e0 80       	ld	r14, Z
    1fb2:	8b 2d       	mov	r24, r11
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	ac 01       	movw	r20, r24
    1fb8:	02 c0       	rjmp	.+4      	; 0x1fbe <RegisterExtInterrupt+0xca>
    1fba:	44 0f       	add	r20, r20
    1fbc:	55 1f       	adc	r21, r21
    1fbe:	2a 95       	dec	r18
    1fc0:	e2 f7       	brpl	.-8      	; 0x1fba <RegisterExtInterrupt+0xc6>
    1fc2:	9a 01       	movw	r18, r20
    1fc4:	2e 29       	or	r18, r14
    1fc6:	20 83       	st	Z, r18
    1fc8:	8d b3       	in	r24, 0x1d	; 29
    1fca:	21 e0       	ldi	r18, 0x01	; 1
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	01 2e       	mov	r0, r17
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <RegisterExtInterrupt+0xe2>
    1fd2:	22 0f       	add	r18, r18
    1fd4:	33 1f       	adc	r19, r19
    1fd6:	0a 94       	dec	r0
    1fd8:	e2 f7       	brpl	.-8      	; 0x1fd2 <RegisterExtInterrupt+0xde>
    1fda:	82 2b       	or	r24, r18
    1fdc:	8d bb       	out	0x1d, r24	; 29
    1fde:	8c b3       	in	r24, 0x1c	; 28
    1fe0:	28 2b       	or	r18, r24
    1fe2:	2c bb       	out	0x1c, r18	; 28
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	11 30       	cpi	r17, 0x01	; 1
    1ff0:	51 f0       	breq	.+20     	; 0x2006 <RegisterExtInterrupt+0x112>
    1ff2:	18 f0       	brcs	.+6      	; 0x1ffa <RegisterExtInterrupt+0x106>
    1ff4:	12 30       	cpi	r17, 0x02	; 2
    1ff6:	69 f0       	breq	.+26     	; 0x2012 <RegisterExtInterrupt+0x11e>
    1ff8:	12 c0       	rjmp	.+36     	; 0x201e <RegisterExtInterrupt+0x12a>
    1ffa:	52 98       	cbi	0x0a, 2	; 10
    1ffc:	00 23       	and	r16, r16
    1ffe:	89 f0       	breq	.+34     	; 0x2022 <RegisterExtInterrupt+0x12e>
    2000:	5a 9a       	sbi	0x0b, 2	; 11
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	13 c0       	rjmp	.+38     	; 0x202c <RegisterExtInterrupt+0x138>
    2006:	53 98       	cbi	0x0a, 3	; 10
    2008:	00 23       	and	r16, r16
    200a:	69 f0       	breq	.+26     	; 0x2026 <RegisterExtInterrupt+0x132>
    200c:	5b 9a       	sbi	0x0b, 3	; 11
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	0d c0       	rjmp	.+26     	; 0x202c <RegisterExtInterrupt+0x138>
    2012:	52 98       	cbi	0x0a, 2	; 10
    2014:	00 23       	and	r16, r16
    2016:	49 f0       	breq	.+18     	; 0x202a <RegisterExtInterrupt+0x136>
    2018:	2a 9a       	sbi	0x05, 2	; 5
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	07 c0       	rjmp	.+14     	; 0x202c <RegisterExtInterrupt+0x138>
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	05 c0       	rjmp	.+10     	; 0x202c <RegisterExtInterrupt+0x138>
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	03 c0       	rjmp	.+6      	; 0x202c <RegisterExtInterrupt+0x138>
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	01 c0       	rjmp	.+2      	; 0x202c <RegisterExtInterrupt+0x138>
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	df 91       	pop	r29
    202e:	cf 91       	pop	r28
    2030:	1f 91       	pop	r17
    2032:	0f 91       	pop	r16
    2034:	ff 90       	pop	r15
    2036:	ef 90       	pop	r14
    2038:	df 90       	pop	r13
    203a:	cf 90       	pop	r12
    203c:	bf 90       	pop	r11
    203e:	08 95       	ret

00002040 <__vector_1>:

ISR(INT0_vect)
{
    2040:	1f 92       	push	r1
    2042:	0f 92       	push	r0
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	0f 92       	push	r0
    2048:	11 24       	eor	r1, r1
    204a:	0b b6       	in	r0, 0x3b	; 59
    204c:	0f 92       	push	r0
    204e:	2f 93       	push	r18
    2050:	3f 93       	push	r19
    2052:	4f 93       	push	r20
    2054:	5f 93       	push	r21
    2056:	6f 93       	push	r22
    2058:	7f 93       	push	r23
    205a:	8f 93       	push	r24
    205c:	9f 93       	push	r25
    205e:	af 93       	push	r26
    2060:	bf 93       	push	r27
    2062:	ef 93       	push	r30
    2064:	ff 93       	push	r31
	//
	// Disable Interrupt while we process this.
	//
	
	cli();
    2066:	f8 94       	cli
	
	if (gExtIntCallback[0] != NULL)
    2068:	e0 91 f7 15 	lds	r30, 0x15F7
    206c:	f0 91 f8 15 	lds	r31, 0x15F8
    2070:	30 97       	sbiw	r30, 0x00	; 0
    2072:	29 f0       	breq	.+10     	; 0x207e <__vector_1+0x3e>
	{
		(*gExtIntCallback[0])(gExtIntCallbackContext[0]);
    2074:	80 91 f1 15 	lds	r24, 0x15F1
    2078:	90 91 f2 15 	lds	r25, 0x15F2
    207c:	09 95       	icall
	
	//
	// Enable Interrupt
	//
	
	sei();
    207e:	78 94       	sei
}
    2080:	ff 91       	pop	r31
    2082:	ef 91       	pop	r30
    2084:	bf 91       	pop	r27
    2086:	af 91       	pop	r26
    2088:	9f 91       	pop	r25
    208a:	8f 91       	pop	r24
    208c:	7f 91       	pop	r23
    208e:	6f 91       	pop	r22
    2090:	5f 91       	pop	r21
    2092:	4f 91       	pop	r20
    2094:	3f 91       	pop	r19
    2096:	2f 91       	pop	r18
    2098:	0f 90       	pop	r0
    209a:	0b be       	out	0x3b, r0	; 59
    209c:	0f 90       	pop	r0
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	0f 90       	pop	r0
    20a2:	1f 90       	pop	r1
    20a4:	18 95       	reti

000020a6 <__vector_2>:

ISR(INT1_vect)
{
    20a6:	1f 92       	push	r1
    20a8:	0f 92       	push	r0
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	0f 92       	push	r0
    20ae:	11 24       	eor	r1, r1
    20b0:	0b b6       	in	r0, 0x3b	; 59
    20b2:	0f 92       	push	r0
    20b4:	2f 93       	push	r18
    20b6:	3f 93       	push	r19
    20b8:	4f 93       	push	r20
    20ba:	5f 93       	push	r21
    20bc:	6f 93       	push	r22
    20be:	7f 93       	push	r23
    20c0:	8f 93       	push	r24
    20c2:	9f 93       	push	r25
    20c4:	af 93       	push	r26
    20c6:	bf 93       	push	r27
    20c8:	ef 93       	push	r30
    20ca:	ff 93       	push	r31
	//
	// Disable Interrupt while we process this.
	//
	
	cli();
    20cc:	f8 94       	cli
	
	if (gExtIntCallback[1] != NULL)
    20ce:	e0 91 f9 15 	lds	r30, 0x15F9
    20d2:	f0 91 fa 15 	lds	r31, 0x15FA
    20d6:	30 97       	sbiw	r30, 0x00	; 0
    20d8:	29 f0       	breq	.+10     	; 0x20e4 <__vector_2+0x3e>
	{
		(*gExtIntCallback[1])(gExtIntCallbackContext[1]);
    20da:	80 91 f3 15 	lds	r24, 0x15F3
    20de:	90 91 f4 15 	lds	r25, 0x15F4
    20e2:	09 95       	icall
	
	//
	// Enable Interrupt
	//
	
	sei();
    20e4:	78 94       	sei
}
    20e6:	ff 91       	pop	r31
    20e8:	ef 91       	pop	r30
    20ea:	bf 91       	pop	r27
    20ec:	af 91       	pop	r26
    20ee:	9f 91       	pop	r25
    20f0:	8f 91       	pop	r24
    20f2:	7f 91       	pop	r23
    20f4:	6f 91       	pop	r22
    20f6:	5f 91       	pop	r21
    20f8:	4f 91       	pop	r20
    20fa:	3f 91       	pop	r19
    20fc:	2f 91       	pop	r18
    20fe:	0f 90       	pop	r0
    2100:	0b be       	out	0x3b, r0	; 59
    2102:	0f 90       	pop	r0
    2104:	0f be       	out	0x3f, r0	; 63
    2106:	0f 90       	pop	r0
    2108:	1f 90       	pop	r1
    210a:	18 95       	reti

0000210c <__vector_3>:

ISR(INT2_vect)
{
    210c:	1f 92       	push	r1
    210e:	0f 92       	push	r0
    2110:	0f b6       	in	r0, 0x3f	; 63
    2112:	0f 92       	push	r0
    2114:	11 24       	eor	r1, r1
    2116:	0b b6       	in	r0, 0x3b	; 59
    2118:	0f 92       	push	r0
    211a:	2f 93       	push	r18
    211c:	3f 93       	push	r19
    211e:	4f 93       	push	r20
    2120:	5f 93       	push	r21
    2122:	6f 93       	push	r22
    2124:	7f 93       	push	r23
    2126:	8f 93       	push	r24
    2128:	9f 93       	push	r25
    212a:	af 93       	push	r26
    212c:	bf 93       	push	r27
    212e:	ef 93       	push	r30
    2130:	ff 93       	push	r31
	//
	// Disable Interrupt while we process this.
	//
	
	cli();
    2132:	f8 94       	cli
	
	if (gExtIntCallback[2] != NULL)
    2134:	e0 91 fb 15 	lds	r30, 0x15FB
    2138:	f0 91 fc 15 	lds	r31, 0x15FC
    213c:	30 97       	sbiw	r30, 0x00	; 0
    213e:	29 f0       	breq	.+10     	; 0x214a <__vector_3+0x3e>
	{
		(*gExtIntCallback[2])(gExtIntCallbackContext[2]);
    2140:	80 91 f5 15 	lds	r24, 0x15F5
    2144:	90 91 f6 15 	lds	r25, 0x15F6
    2148:	09 95       	icall
	
	//
	// Enable Interrupt
	//
	
	sei();
    214a:	78 94       	sei
    214c:	ff 91       	pop	r31
    214e:	ef 91       	pop	r30
    2150:	bf 91       	pop	r27
    2152:	af 91       	pop	r26
    2154:	9f 91       	pop	r25
    2156:	8f 91       	pop	r24
    2158:	7f 91       	pop	r23
    215a:	6f 91       	pop	r22
    215c:	5f 91       	pop	r21
    215e:	4f 91       	pop	r20
    2160:	3f 91       	pop	r19
    2162:	2f 91       	pop	r18
    2164:	0f 90       	pop	r0
    2166:	0b be       	out	0x3b, r0	; 59
    2168:	0f 90       	pop	r0
    216a:	0f be       	out	0x3f, r0	; 63
    216c:	0f 90       	pop	r0
    216e:	1f 90       	pop	r1
    2170:	18 95       	reti

00002172 <InitTWI>:
bool
InitTWI(TWI_MODE Mode, PTWI_ADDRESS Address, PTWI_ADDRESS_MASK AddressMask)
{	
	bool Status = TRUE;
	
	if (Mode == TWI_SLAVE)
    2172:	81 11       	cpse	r24, r1
    2174:	21 c0       	rjmp	.+66     	; 0x21b8 <InitTWI+0x46>
	{
		if (Address != NULL && AddressMask != NULL)
    2176:	61 15       	cp	r22, r1
    2178:	71 05       	cpc	r23, r1
    217a:	89 f0       	breq	.+34     	; 0x219e <InitTWI+0x2c>
    217c:	41 15       	cp	r20, r1
    217e:	51 05       	cpc	r21, r1
    2180:	71 f0       	breq	.+28     	; 0x219e <InitTWI+0x2c>
		{
			//
			// Set Slave Address and Mask
			//
				
			TWAR = Address->AsUINT8;
    2182:	fb 01       	movw	r30, r22
    2184:	80 81       	ld	r24, Z
    2186:	80 93 ba 00 	sts	0x00BA, r24
				
			TWAMR = AddressMask->AsUINT8;
    218a:	fa 01       	movw	r30, r20
    218c:	80 81       	ld	r24, Z
    218e:	80 93 bd 00 	sts	0x00BD, r24
			
			//
			// Set Data and Clock to IN
			//
			
			DDRC &= ~((0x1 << PORTC0) | (0x1 << PORTC1));
    2192:	87 b1       	in	r24, 0x07	; 7
    2194:	8c 7f       	andi	r24, 0xFC	; 252
    2196:	87 b9       	out	0x07, r24	; 7
			
			gMode = TWI_SLAVE;
    2198:	10 92 4e 16 	sts	0x164E, r1
    219c:	13 c0       	rjmp	.+38     	; 0x21c4 <InitTWI+0x52>
		}
		else
		{
			SendTrace(ERROR_LEVEL, "InitTWI - Invalid Parameters\r\n");
    219e:	8f e2       	ldi	r24, 0x2F	; 47
    21a0:	99 e0       	ldi	r25, 0x09	; 9
    21a2:	9f 93       	push	r25
    21a4:	8f 93       	push	r24
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	8f 93       	push	r24
    21aa:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
		}
		else
		{
			SendTrace(ERROR_LEVEL, "InitTWI - Invalid Parameters\r\n");
			
			Status = FALSE;
    21b4:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
    21b6:	08 95       	ret
		}
	}
	else
	{
		gMode = TWI_MASTER;
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	80 93 4e 16 	sts	0x164E, r24
		
		//
		// Set Data and Clock to Out
		//
		
		DDRC |= ((0x1 << PORTC0) | (0x1 << PORTC1));
    21be:	87 b1       	in	r24, 0x07	; 7
    21c0:	83 60       	ori	r24, 0x03	; 3
    21c2:	87 b9       	out	0x07, r24	; 7
	//
	// Set TWI Bit Rate Register to 8 so that
	// SCL is set to 100 KHz.
	//

	TWBR = BIT_RATE_VALUE;
    21c4:	80 e2       	ldi	r24, 0x20	; 32
    21c6:	80 93 b8 00 	sts	0x00B8, r24
	
	//
	// Set Pre-scalar value to 1
	//

	TWSR = 0;
    21ca:	10 92 b9 00 	sts	0x00B9, r1
	
	//
	// Set TWI Control Register
	//
	
	TWCR = (0x1 << TWEN) | (0x1 << TWEA);
    21ce:	84 e4       	ldi	r24, 0x44	; 68
    21d0:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    21d4:	ff ef       	ldi	r31, 0xFF	; 255
    21d6:	20 e7       	ldi	r18, 0x70	; 112
    21d8:	82 e0       	ldi	r24, 0x02	; 2
    21da:	f1 50       	subi	r31, 0x01	; 1
    21dc:	20 40       	sbci	r18, 0x00	; 0
    21de:	80 40       	sbci	r24, 0x00	; 0
    21e0:	e1 f7       	brne	.-8      	; 0x21da <InitTWI+0x68>
    21e2:	00 c0       	rjmp	.+0      	; 0x21e4 <InitTWI+0x72>
    21e4:	00 00       	nop
	// Wait for 100 ms for bus to settle down
	//
	
	_delay_ms(100);
	
	gIsRepeatedStart = FALSE;
    21e6:	10 92 fe 15 	sts	0x15FE, r1
	
	gIsTWIInitialized = TRUE;
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	80 93 ff 15 	sts	0x15FF, r24

Exit:

	return Status;
}
    21f0:	08 95       	ret

000021f2 <SendStartCondition>:
	
	//
	// Send Start Condition
	//
	
	ENABLE_START();
    21f2:	ec eb       	ldi	r30, 0xBC	; 188
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	8f 75       	andi	r24, 0x5F	; 95
    21fa:	80 62       	ori	r24, 0x20	; 32
    21fc:	80 83       	st	Z, r24
	
	WAIT_FOR_OP_COMPLETION();
    21fe:	80 81       	ld	r24, Z
    2200:	80 68       	ori	r24, 0x80	; 128
    2202:	80 83       	st	Z, r24
    2204:	80 81       	ld	r24, Z
    2206:	88 23       	and	r24, r24
    2208:	ec f7       	brge	.-6      	; 0x2204 <SendStartCondition+0x12>
	
	DISABLE_START();
    220a:	ec eb       	ldi	r30, 0xBC	; 188
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	8f 75       	andi	r24, 0x5F	; 95
    2212:	80 83       	st	Z, r24
	
	if (gIsRepeatedStart)
    2214:	80 91 fe 15 	lds	r24, 0x15FE
    2218:	88 23       	and	r24, r24
    221a:	41 f0       	breq	.+16     	; 0x222c <SendStartCondition+0x3a>
	{
		Status = ProcessTwiStatus(REPEATED_START_TRANSMITTED);
    221c:	90 91 b9 00 	lds	r25, 0x00B9
    2220:	98 7f       	andi	r25, 0xF8	; 248
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 31       	cpi	r25, 0x10	; 16
    2226:	49 f0       	breq	.+18     	; 0x223a <SendStartCondition+0x48>
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	08 95       	ret
	}
	else
	{
		Status = ProcessTwiStatus(START_TRANSMITTED);
    222c:	90 91 b9 00 	lds	r25, 0x00B9
    2230:	98 7f       	andi	r25, 0xF8	; 248
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	98 30       	cpi	r25, 0x08	; 8
    2236:	09 f0       	breq	.+2      	; 0x223a <SendStartCondition+0x48>
    2238:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return Status;
}
    223a:	08 95       	ret

0000223c <SendStopCondition>:

void
SendStopCondition()
{	
	ENABLE_STOP();
    223c:	ec eb       	ldi	r30, 0xBC	; 188
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	8f 76       	andi	r24, 0x6F	; 111
    2244:	80 61       	ori	r24, 0x10	; 16
    2246:	80 83       	st	Z, r24
	
	//
	// Send the Stop condition by clearing the TWINT flag
	//
	
	TWCR |= (1 << TWINT);
    2248:	80 81       	ld	r24, Z
    224a:	80 68       	ori	r24, 0x80	; 128
    224c:	80 83       	st	Z, r24
	//
	// TWINT is not set after stop condition.
	// Instead TWSTO bit in TWCR is cleared.
	//
	
	while (!(TWCR & (0x1 << TWSTO)));
    224e:	80 81       	ld	r24, Z
    2250:	84 ff       	sbrs	r24, 4
    2252:	fd cf       	rjmp	.-6      	; 0x224e <SendStopCondition+0x12>
}
    2254:	08 95       	ret

00002256 <Transmit>:

bool
Transmit(PVOID Buffer, unsigned long Length)
{
    2256:	8f 92       	push	r8
    2258:	9f 92       	push	r9
    225a:	af 92       	push	r10
    225c:	bf 92       	push	r11
    225e:	df 92       	push	r13
    2260:	ef 92       	push	r14
    2262:	ff 92       	push	r15
    2264:	0f 93       	push	r16
    2266:	1f 93       	push	r17
    2268:	cf 93       	push	r28
    226a:	df 93       	push	r29
	
	unsigned char *BytePtr;
	
	TWI_STATUS TransmitStatus;
	
	if (gMode == TWI_MASTER)
    226c:	20 91 4e 16 	lds	r18, 0x164E
    2270:	21 30       	cpi	r18, 0x01	; 1
    2272:	29 f4       	brne	.+10     	; 0x227e <Transmit+0x28>
	{
		TransmitStatus = DATA_TRANSMITTED_ACK;
    2274:	0f 2e       	mov	r0, r31
    2276:	f8 e2       	ldi	r31, 0x28	; 40
    2278:	df 2e       	mov	r13, r31
    227a:	f0 2d       	mov	r31, r0
    227c:	04 c0       	rjmp	.+8      	; 0x2286 <Transmit+0x30>
	}
	else
	{
		TransmitStatus = SLA_R_DATA_TRANSMITTED_ACK;
    227e:	0f 2e       	mov	r0, r31
    2280:	f8 eb       	ldi	r31, 0xB8	; 184
    2282:	df 2e       	mov	r13, r31
    2284:	f0 2d       	mov	r31, r0
	// Now transmit the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
    2286:	4a 01       	movw	r8, r20
    2288:	5b 01       	movw	r10, r22
    228a:	21 e0       	ldi	r18, 0x01	; 1
    228c:	82 1a       	sub	r8, r18
    228e:	91 08       	sbc	r9, r1
    2290:	a1 08       	sbc	r10, r1
    2292:	b1 08       	sbc	r11, r1
    2294:	81 14       	cp	r8, r1
    2296:	91 04       	cpc	r9, r1
    2298:	a1 04       	cpc	r10, r1
    229a:	b1 04       	cpc	r11, r1
    229c:	e9 f1       	breq	.+122    	; 0x2318 <Transmit+0xc2>
    229e:	dc 01       	movw	r26, r24
    22a0:	00 e0       	ldi	r16, 0x00	; 0
    22a2:	10 e0       	ldi	r17, 0x00	; 0
    22a4:	98 01       	movw	r18, r16
	{
		TWDR = *BytePtr;
    22a6:	4b eb       	ldi	r20, 0xBB	; 187
    22a8:	50 e0       	ldi	r21, 0x00	; 0
		
		WAIT_FOR_OP_COMPLETION();
    22aa:	ec eb       	ldi	r30, 0xBC	; 188
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
		
		if (!ProcessTwiStatus(TransmitStatus))
    22ae:	0f 2e       	mov	r0, r31
    22b0:	f9 eb       	ldi	r31, 0xB9	; 185
    22b2:	ef 2e       	mov	r14, r31
    22b4:	f1 2c       	mov	r15, r1
    22b6:	f0 2d       	mov	r31, r0
    22b8:	6d 2d       	mov	r22, r13
    22ba:	70 e0       	ldi	r23, 0x00	; 0
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
	{
		TWDR = *BytePtr;
    22bc:	8d 91       	ld	r24, X+
    22be:	ea 01       	movw	r28, r20
    22c0:	88 83       	st	Y, r24
		
		WAIT_FOR_OP_COMPLETION();
    22c2:	80 81       	ld	r24, Z
    22c4:	80 68       	ori	r24, 0x80	; 128
    22c6:	80 83       	st	Z, r24
    22c8:	80 81       	ld	r24, Z
    22ca:	88 23       	and	r24, r24
    22cc:	ec f7       	brge	.-6      	; 0x22c8 <Transmit+0x72>
		
		if (!ProcessTwiStatus(TransmitStatus))
    22ce:	e7 01       	movw	r28, r14
    22d0:	88 81       	ld	r24, Y
    22d2:	88 7f       	andi	r24, 0xF8	; 248
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	86 17       	cp	r24, r22
    22d8:	97 07       	cpc	r25, r23
    22da:	a1 f0       	breq	.+40     	; 0x2304 <Transmit+0xae>
		{
			SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
    22dc:	80 91 b9 00 	lds	r24, 0x00B9
    22e0:	88 7f       	andi	r24, 0xF8	; 248
    22e2:	1f 92       	push	r1
    22e4:	8f 93       	push	r24
    22e6:	8e e4       	ldi	r24, 0x4E	; 78
    22e8:	99 e0       	ldi	r25, 0x09	; 9
    22ea:	9f 93       	push	r25
    22ec:	8f 93       	push	r24
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	8f 93       	push	r24
    22f2:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(TransmitStatus))
		{
			SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
			
			Status = FALSE;
    2300:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
    2302:	3c c0       	rjmp	.+120    	; 0x237c <Transmit+0x126>
		}
		
		BytePtr++;
    2304:	cd 01       	movw	r24, r26
	// Now transmit the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
    2306:	0f 5f       	subi	r16, 0xFF	; 255
    2308:	1f 4f       	sbci	r17, 0xFF	; 255
    230a:	2f 4f       	sbci	r18, 0xFF	; 255
    230c:	3f 4f       	sbci	r19, 0xFF	; 255
    230e:	08 15       	cp	r16, r8
    2310:	19 05       	cpc	r17, r9
    2312:	2a 05       	cpc	r18, r10
    2314:	3b 05       	cpc	r19, r11
    2316:	90 f2       	brcs	.-92     	; 0x22bc <Transmit+0x66>
	
	//
	// In slave mode after transmitting the last byte we will get a NACK from the Master
	//
	
	if (gMode == TWI_SLAVE)
    2318:	20 91 4e 16 	lds	r18, 0x164E
    231c:	21 11       	cpse	r18, r1
    231e:	04 c0       	rjmp	.+8      	; 0x2328 <Transmit+0xd2>
	{
		TransmitStatus = SLA_R_DATA_TRANSMITTED_NACK;
    2320:	0f 2e       	mov	r0, r31
    2322:	f0 ec       	ldi	r31, 0xC0	; 192
    2324:	df 2e       	mov	r13, r31
    2326:	f0 2d       	mov	r31, r0
	}
	
	TWDR = *BytePtr;
    2328:	fc 01       	movw	r30, r24
    232a:	80 81       	ld	r24, Z
    232c:	80 93 bb 00 	sts	0x00BB, r24
	
	WAIT_FOR_OP_COMPLETION();
    2330:	ec eb       	ldi	r30, 0xBC	; 188
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	80 68       	ori	r24, 0x80	; 128
    2338:	80 83       	st	Z, r24
    233a:	80 81       	ld	r24, Z
    233c:	88 23       	and	r24, r24
    233e:	ec f7       	brge	.-6      	; 0x233a <Transmit+0xe4>
	
	if (!ProcessTwiStatus(TransmitStatus))
    2340:	20 91 b9 00 	lds	r18, 0x00B9
    2344:	28 7f       	andi	r18, 0xF8	; 248
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	8d 2d       	mov	r24, r13
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	28 17       	cp	r18, r24
    234e:	39 07       	cpc	r19, r25
    2350:	a1 f0       	breq	.+40     	; 0x237a <Transmit+0x124>
	{
		SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
    2352:	80 91 b9 00 	lds	r24, 0x00B9
    2356:	88 7f       	andi	r24, 0xF8	; 248
    2358:	1f 92       	push	r1
    235a:	8f 93       	push	r24
    235c:	8e e4       	ldi	r24, 0x4E	; 78
    235e:	99 e0       	ldi	r25, 0x09	; 9
    2360:	9f 93       	push	r25
    2362:	8f 93       	push	r24
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	8f 93       	push	r24
    2368:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
    236c:	0f 90       	pop	r0
    236e:	0f 90       	pop	r0
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
	
	if (!ProcessTwiStatus(TransmitStatus))
	{
		SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
    2376:	80 e0       	ldi	r24, 0x00	; 0
		
		goto Exit;
    2378:	01 c0       	rjmp	.+2      	; 0x237c <Transmit+0x126>
}

bool
Transmit(PVOID Buffer, unsigned long Length)
{
	bool Status = TRUE;
    237a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
Exit:

	return Status;	
}
    237c:	df 91       	pop	r29
    237e:	cf 91       	pop	r28
    2380:	1f 91       	pop	r17
    2382:	0f 91       	pop	r16
    2384:	ff 90       	pop	r15
    2386:	ef 90       	pop	r14
    2388:	df 90       	pop	r13
    238a:	bf 90       	pop	r11
    238c:	af 90       	pop	r10
    238e:	9f 90       	pop	r9
    2390:	8f 90       	pop	r8
    2392:	08 95       	ret

00002394 <TwiMasterTransmit>:
bool
TwiMasterTransmit(PVOID Buffer, 
				  unsigned long Length, 
				  PTWI_ADDRESS Address,
				  bool SendStop)
{
    2394:	af 92       	push	r10
    2396:	bf 92       	push	r11
    2398:	cf 92       	push	r12
    239a:	df 92       	push	r13
    239c:	ef 92       	push	r14
    239e:	ff 92       	push	r15
    23a0:	0f 93       	push	r16
    23a2:	cf 93       	push	r28
    23a4:	df 93       	push	r29
    23a6:	5c 01       	movw	r10, r24
    23a8:	6a 01       	movw	r12, r20
    23aa:	7b 01       	movw	r14, r22
    23ac:	e9 01       	movw	r28, r18
	bool Status = TRUE;
	
	if (!SendStartCondition())
    23ae:	21 df       	rcall	.-446    	; 0x21f2 <SendStartCondition>
    23b0:	81 11       	cpse	r24, r1
    23b2:	14 c0       	rjmp	.+40     	; 0x23dc <TwiMasterTransmit+0x48>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
    23b4:	80 91 b9 00 	lds	r24, 0x00B9
    23b8:	88 7f       	andi	r24, 0xF8	; 248
    23ba:	1f 92       	push	r1
    23bc:	8f 93       	push	r24
    23be:	84 e8       	ldi	r24, 0x84	; 132
    23c0:	99 e0       	ldi	r25, 0x09	; 9
    23c2:	9f 93       	push	r25
    23c4:	8f 93       	push	r24
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	8f 93       	push	r24
    23ca:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		Status = FALSE;
			
		goto Exit;
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	0f 90       	pop	r0
    23d4:	0f 90       	pop	r0
    23d6:	0f 90       	pop	r0
	
	if (!SendStartCondition())
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
    23d8:	c0 e0       	ldi	r28, 0x00	; 0
			
		goto Exit;
    23da:	34 c0       	rjmp	.+104    	; 0x2444 <TwiMasterTransmit+0xb0>
	}
	
	gIsRepeatedStart = FALSE;
    23dc:	10 92 fe 15 	sts	0x15FE, r1
	//
	// Set Address->ReadWrite = 0 indicating a write operation.
	// Then transmit SLA+W
	//
	
	Address->RW_EnGenCall = 0;
    23e0:	88 81       	ld	r24, Y
    23e2:	8e 7f       	andi	r24, 0xFE	; 254
    23e4:	88 83       	st	Y, r24
	
	TWDR = Address->AsUINT8;
    23e6:	80 93 bb 00 	sts	0x00BB, r24
		
	WAIT_FOR_OP_COMPLETION();
    23ea:	ec eb       	ldi	r30, 0xBC	; 188
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	80 68       	ori	r24, 0x80	; 128
    23f2:	80 83       	st	Z, r24
    23f4:	80 81       	ld	r24, Z
    23f6:	88 23       	and	r24, r24
    23f8:	ec f7       	brge	.-6      	; 0x23f4 <TwiMasterTransmit+0x60>
		
	if (!ProcessTwiStatus(SLA_W_TRANSMITTED_ACK))
    23fa:	80 91 b9 00 	lds	r24, 0x00B9
    23fe:	88 7f       	andi	r24, 0xF8	; 248
    2400:	88 31       	cpi	r24, 0x18	; 24
    2402:	a1 f0       	breq	.+40     	; 0x242c <TwiMasterTransmit+0x98>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Slave Address and Write Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
    2404:	80 91 b9 00 	lds	r24, 0x00B9
    2408:	88 7f       	andi	r24, 0xF8	; 248
    240a:	1f 92       	push	r1
    240c:	8f 93       	push	r24
    240e:	8e ec       	ldi	r24, 0xCE	; 206
    2410:	99 e0       	ldi	r25, 0x09	; 9
    2412:	9f 93       	push	r25
    2414:	8f 93       	push	r24
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	8f 93       	push	r24
    241a:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		Status = FALSE;
			
		goto Exit;
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	0f 90       	pop	r0
    2426:	0f 90       	pop	r0
		
	if (!ProcessTwiStatus(SLA_W_TRANSMITTED_ACK))
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Slave Address and Write Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
    2428:	c0 e0       	ldi	r28, 0x00	; 0
			
		goto Exit;
    242a:	0c c0       	rjmp	.+24     	; 0x2444 <TwiMasterTransmit+0xb0>
	}
	
	Status = Transmit(Buffer, Length);
    242c:	b7 01       	movw	r22, r14
    242e:	a6 01       	movw	r20, r12
    2430:	c5 01       	movw	r24, r10
    2432:	11 df       	rcall	.-478    	; 0x2256 <Transmit>
    2434:	c8 2f       	mov	r28, r24
	
	//
	// Send stop condition
	//
	
	if (SendStop)
    2436:	00 23       	and	r16, r16
    2438:	11 f0       	breq	.+4      	; 0x243e <TwiMasterTransmit+0xaa>
	{
		SendStopCondition();
    243a:	00 df       	rcall	.-512    	; 0x223c <SendStopCondition>
    243c:	03 c0       	rjmp	.+6      	; 0x2444 <TwiMasterTransmit+0xb0>
	}
	else
	{
		gIsRepeatedStart = TRUE;
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	80 93 fe 15 	sts	0x15FE, r24
	}
	
Exit:

	return Status;
}
    2444:	8c 2f       	mov	r24, r28
    2446:	df 91       	pop	r29
    2448:	cf 91       	pop	r28
    244a:	0f 91       	pop	r16
    244c:	ff 90       	pop	r15
    244e:	ef 90       	pop	r14
    2450:	df 90       	pop	r13
    2452:	cf 90       	pop	r12
    2454:	bf 90       	pop	r11
    2456:	af 90       	pop	r10
    2458:	08 95       	ret

0000245a <TwiTransmit>:
bool 
TwiTransmit(PVOID Buffer, 
			unsigned long Length,
			PTWI_ADDRESS Address,
			bool SendStop)
{
    245a:	0f 93       	push	r16
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
    245c:	e0 91 ff 15 	lds	r30, 0x15FF
    2460:	ee 23       	and	r30, r30
    2462:	09 f4       	brne	.+2      	; 0x2466 <TwiTransmit+0xc>
    2464:	4a c0       	rjmp	.+148    	; 0x24fa <TwiTransmit+0xa0>
    2466:	00 97       	sbiw	r24, 0x00	; 0
    2468:	09 f4       	brne	.+2      	; 0x246c <TwiTransmit+0x12>
    246a:	49 c0       	rjmp	.+146    	; 0x24fe <TwiTransmit+0xa4>
		Status = FALSE;
		
		goto Exit;
	}
	
	if (gMode == TWI_MASTER)
    246c:	e0 91 4e 16 	lds	r30, 0x164E
    2470:	e1 30       	cpi	r30, 0x01	; 1
    2472:	91 f4       	brne	.+36     	; 0x2498 <TwiTransmit+0x3e>
	{
		if (Address == NULL)
    2474:	21 15       	cp	r18, r1
    2476:	31 05       	cpc	r19, r1
    2478:	69 f4       	brne	.+26     	; 0x2494 <TwiTransmit+0x3a>
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Invalid Parameters\r\n");
    247a:	85 e2       	ldi	r24, 0x25	; 37
    247c:	9a e0       	ldi	r25, 0x0A	; 10
    247e:	9f 93       	push	r25
    2480:	8f 93       	push	r24
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	8f 93       	push	r24
    2486:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
			
			Status = FALSE;
		
			goto Exit;
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
	{
		if (Address == NULL)
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Invalid Parameters\r\n");
			
			Status = FALSE;
    2490:	80 e0       	ldi	r24, 0x00	; 0
		
			goto Exit;
    2492:	36 c0       	rjmp	.+108    	; 0x2500 <TwiTransmit+0xa6>
		}
		else
		{
			Status = TwiMasterTransmit(Buffer, Length, Address, SendStop);	
    2494:	7f df       	rcall	.-258    	; 0x2394 <TwiMasterTransmit>
    2496:	34 c0       	rjmp	.+104    	; 0x2500 <TwiTransmit+0xa6>
		}
	}
	else
	{
		WAIT_FOR_OP_COMPLETION();
    2498:	ec eb       	ldi	r30, 0xBC	; 188
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	20 81       	ld	r18, Z
    249e:	20 68       	ori	r18, 0x80	; 128
    24a0:	20 83       	st	Z, r18
    24a2:	20 81       	ld	r18, Z
    24a4:	22 23       	and	r18, r18
    24a6:	ec f7       	brge	.-6      	; 0x24a2 <TwiTransmit+0x48>
		
		if (ProcessTwiStatus(STOP_REPEATED_START_RECEIVED))
    24a8:	20 91 b9 00 	lds	r18, 0x00B9
    24ac:	28 7f       	andi	r18, 0xF8	; 248
    24ae:	20 3a       	cpi	r18, 0xA0	; 160
    24b0:	41 f4       	brne	.+16     	; 0x24c2 <TwiTransmit+0x68>
		{
			WAIT_FOR_OP_COMPLETION();	
    24b2:	ec eb       	ldi	r30, 0xBC	; 188
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	20 81       	ld	r18, Z
    24b8:	20 68       	ori	r18, 0x80	; 128
    24ba:	20 83       	st	Z, r18
    24bc:	20 81       	ld	r18, Z
    24be:	22 23       	and	r18, r18
    24c0:	ec f7       	brge	.-6      	; 0x24bc <TwiTransmit+0x62>
		}
		
		if (!ProcessTwiStatus(SLA_R_RECEIVED_ACK))
    24c2:	20 91 b9 00 	lds	r18, 0x00B9
    24c6:	28 7f       	andi	r18, 0xF8	; 248
    24c8:	28 3a       	cpi	r18, 0xA8	; 168
    24ca:	99 f0       	breq	.+38     	; 0x24f2 <TwiTransmit+0x98>
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Slave Read Not Requested by Master - 0x%x\r\n", TWSR);
    24cc:	80 91 b9 00 	lds	r24, 0x00B9
    24d0:	1f 92       	push	r1
    24d2:	8f 93       	push	r24
    24d4:	88 e4       	ldi	r24, 0x48	; 72
    24d6:	9a e0       	ldi	r25, 0x0A	; 10
    24d8:	9f 93       	push	r25
    24da:	8f 93       	push	r24
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	8f 93       	push	r24
    24e0:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
			
			Status = FALSE;
		
			goto Exit;
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(SLA_R_RECEIVED_ACK))
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Slave Read Not Requested by Master - 0x%x\r\n", TWSR);
			
			Status = FALSE;
    24ee:	80 e0       	ldi	r24, 0x00	; 0
		
			goto Exit;
    24f0:	07 c0       	rjmp	.+14     	; 0x2500 <TwiTransmit+0xa6>
		}
		else
		{	
			DATA_OUT();
    24f2:	39 9a       	sbi	0x07, 1	; 7
		
			Status = Transmit(Buffer, Length);
    24f4:	b0 de       	rcall	.-672    	; 0x2256 <Transmit>
		
			DATA_IN();
    24f6:	39 98       	cbi	0x07, 1	; 7
    24f8:	03 c0       	rjmp	.+6      	; 0x2500 <TwiTransmit+0xa6>
{
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
	{
		Status = FALSE;
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	01 c0       	rjmp	.+2      	; 0x2500 <TwiTransmit+0xa6>
    24fe:	80 e0       	ldi	r24, 0x00	; 0
	}
	
Exit:

	return Status;
}
    2500:	0f 91       	pop	r16
    2502:	08 95       	ret

00002504 <Receive>:
	return Status;	
}

bool
Receive(PVOID Buffer, unsigned long Length)
{
    2504:	8f 92       	push	r8
    2506:	9f 92       	push	r9
    2508:	af 92       	push	r10
    250a:	bf 92       	push	r11
    250c:	df 92       	push	r13
    250e:	ef 92       	push	r14
    2510:	ff 92       	push	r15
    2512:	0f 93       	push	r16
    2514:	1f 93       	push	r17
    2516:	cf 93       	push	r28
    2518:	df 93       	push	r29
	
	unsigned char *BytePtr;
	
	TWI_STATUS ReceiveStatus;
	
	if (gMode == TWI_MASTER)
    251a:	20 91 4e 16 	lds	r18, 0x164E
    251e:	21 30       	cpi	r18, 0x01	; 1
    2520:	29 f4       	brne	.+10     	; 0x252c <Receive+0x28>
	{
		ReceiveStatus = DATA_RECEIVED_ACK;
    2522:	0f 2e       	mov	r0, r31
    2524:	f0 e5       	ldi	r31, 0x50	; 80
    2526:	df 2e       	mov	r13, r31
    2528:	f0 2d       	mov	r31, r0
    252a:	03 c0       	rjmp	.+6      	; 0x2532 <Receive+0x2e>
	}
	else
	{
		ReceiveStatus = SLA_W_DATA_RECEIVED_ACK;
    252c:	68 94       	set
    252e:	dd 24       	eor	r13, r13
    2530:	d7 f8       	bld	r13, 7
	// Now receive the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
    2532:	4a 01       	movw	r8, r20
    2534:	5b 01       	movw	r10, r22
    2536:	21 e0       	ldi	r18, 0x01	; 1
    2538:	82 1a       	sub	r8, r18
    253a:	91 08       	sbc	r9, r1
    253c:	a1 08       	sbc	r10, r1
    253e:	b1 08       	sbc	r11, r1
    2540:	81 14       	cp	r8, r1
    2542:	91 04       	cpc	r9, r1
    2544:	a1 04       	cpc	r10, r1
    2546:	b1 04       	cpc	r11, r1
    2548:	e9 f1       	breq	.+122    	; 0x25c4 <Receive+0xc0>
    254a:	dc 01       	movw	r26, r24
    254c:	00 e0       	ldi	r16, 0x00	; 0
    254e:	10 e0       	ldi	r17, 0x00	; 0
    2550:	98 01       	movw	r18, r16
	{
			
		WAIT_FOR_OP_COMPLETION();
    2552:	ec eb       	ldi	r30, 0xBC	; 188
    2554:	f0 e0       	ldi	r31, 0x00	; 0
		
		if (!ProcessTwiStatus(ReceiveStatus))
    2556:	0f 2e       	mov	r0, r31
    2558:	f9 eb       	ldi	r31, 0xB9	; 185
    255a:	ef 2e       	mov	r14, r31
    255c:	f1 2c       	mov	r15, r1
    255e:	f0 2d       	mov	r31, r0
    2560:	6d 2d       	mov	r22, r13
    2562:	70 e0       	ldi	r23, 0x00	; 0
			Status = FALSE;
			
			goto Exit;
		}
		
		*BytePtr = TWDR;
    2564:	4b eb       	ldi	r20, 0xBB	; 187
    2566:	50 e0       	ldi	r21, 0x00	; 0
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
	{
			
		WAIT_FOR_OP_COMPLETION();
    2568:	80 81       	ld	r24, Z
    256a:	80 68       	ori	r24, 0x80	; 128
    256c:	80 83       	st	Z, r24
    256e:	80 81       	ld	r24, Z
    2570:	88 23       	and	r24, r24
    2572:	ec f7       	brge	.-6      	; 0x256e <Receive+0x6a>
		
		if (!ProcessTwiStatus(ReceiveStatus))
    2574:	e7 01       	movw	r28, r14
    2576:	88 81       	ld	r24, Y
    2578:	88 7f       	andi	r24, 0xF8	; 248
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	86 17       	cp	r24, r22
    257e:	97 07       	cpc	r25, r23
    2580:	a1 f0       	breq	.+40     	; 0x25aa <Receive+0xa6>
		{
			SendTrace(ERROR_LEVEL, "Receive - Data Reception Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
    2582:	80 91 b9 00 	lds	r24, 0x00B9
    2586:	88 7f       	andi	r24, 0xF8	; 248
    2588:	1f 92       	push	r1
    258a:	8f 93       	push	r24
    258c:	82 e8       	ldi	r24, 0x82	; 130
    258e:	9a e0       	ldi	r25, 0x0A	; 10
    2590:	9f 93       	push	r25
    2592:	8f 93       	push	r24
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	8f 93       	push	r24
    2598:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
    259c:	0f 90       	pop	r0
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(ReceiveStatus))
		{
			SendTrace(ERROR_LEVEL, "Receive - Data Reception Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
			
			Status = FALSE;
    25a6:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
    25a8:	44 c0       	rjmp	.+136    	; 0x2632 <Receive+0x12e>
		}
		
		*BytePtr = TWDR;
    25aa:	ea 01       	movw	r28, r20
    25ac:	88 81       	ld	r24, Y
    25ae:	8d 93       	st	X+, r24
		
		BytePtr++;
    25b0:	cd 01       	movw	r24, r26
	// Now receive the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
    25b2:	0f 5f       	subi	r16, 0xFF	; 255
    25b4:	1f 4f       	sbci	r17, 0xFF	; 255
    25b6:	2f 4f       	sbci	r18, 0xFF	; 255
    25b8:	3f 4f       	sbci	r19, 0xFF	; 255
    25ba:	08 15       	cp	r16, r8
    25bc:	19 05       	cpc	r17, r9
    25be:	2a 05       	cpc	r18, r10
    25c0:	3b 05       	cpc	r19, r11
    25c2:	90 f2       	brcs	.-92     	; 0x2568 <Receive+0x64>
	//
	// When receiving the last byte if the receiver is a master then we need to transmit a NACK.
	// If the receiver is a slave we need to transmit a ACK.
	//
	
	if (gMode == TWI_MASTER)
    25c4:	20 91 4e 16 	lds	r18, 0x164E
    25c8:	21 30       	cpi	r18, 0x01	; 1
    25ca:	49 f4       	brne	.+18     	; 0x25de <Receive+0xda>
	{
		ENABLE_NACK();
    25cc:	ec eb       	ldi	r30, 0xBC	; 188
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	20 81       	ld	r18, Z
    25d2:	2f 73       	andi	r18, 0x3F	; 63
    25d4:	20 83       	st	Z, r18
		
		ReceiveStatus = DATA_RECEIVED_NACK;
    25d6:	0f 2e       	mov	r0, r31
    25d8:	f8 e5       	ldi	r31, 0x58	; 88
    25da:	df 2e       	mov	r13, r31
    25dc:	f0 2d       	mov	r31, r0
	}
	
	WAIT_FOR_OP_COMPLETION();
    25de:	ec eb       	ldi	r30, 0xBC	; 188
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	20 81       	ld	r18, Z
    25e4:	20 68       	ori	r18, 0x80	; 128
    25e6:	20 83       	st	Z, r18
    25e8:	20 81       	ld	r18, Z
    25ea:	22 23       	and	r18, r18
    25ec:	ec f7       	brge	.-6      	; 0x25e8 <Receive+0xe4>
	
	if (!ProcessTwiStatus(ReceiveStatus))
    25ee:	40 91 b9 00 	lds	r20, 0x00B9
    25f2:	48 7f       	andi	r20, 0xF8	; 248
    25f4:	50 e0       	ldi	r21, 0x00	; 0
    25f6:	2d 2d       	mov	r18, r13
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	42 17       	cp	r20, r18
    25fc:	53 07       	cpc	r21, r19
    25fe:	a1 f0       	breq	.+40     	; 0x2628 <Receive+0x124>
	{
		SendTrace(ERROR_LEVEL, "Receive - Data Reception Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
    2600:	80 91 b9 00 	lds	r24, 0x00B9
    2604:	88 7f       	andi	r24, 0xF8	; 248
    2606:	1f 92       	push	r1
    2608:	8f 93       	push	r24
    260a:	82 e8       	ldi	r24, 0x82	; 130
    260c:	9a e0       	ldi	r25, 0x0A	; 10
    260e:	9f 93       	push	r25
    2610:	8f 93       	push	r24
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	8f 93       	push	r24
    2616:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
    261a:	0f 90       	pop	r0
    261c:	0f 90       	pop	r0
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
	
	if (!ProcessTwiStatus(ReceiveStatus))
	{
		SendTrace(ERROR_LEVEL, "Receive - Data Reception Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
    2624:	80 e0       	ldi	r24, 0x00	; 0
		
		goto Exit;
    2626:	05 c0       	rjmp	.+10     	; 0x2632 <Receive+0x12e>
	}
	
	*BytePtr = TWDR;
    2628:	20 91 bb 00 	lds	r18, 0x00BB
    262c:	fc 01       	movw	r30, r24
    262e:	20 83       	st	Z, r18
}

bool
Receive(PVOID Buffer, unsigned long Length)
{
	bool Status = TRUE;
    2630:	81 e0       	ldi	r24, 0x01	; 1
	
	*BytePtr = TWDR;
	
Exit:

	ENABLE_ACK();
    2632:	ec eb       	ldi	r30, 0xBC	; 188
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	90 81       	ld	r25, Z
    2638:	9f 73       	andi	r25, 0x3F	; 63
    263a:	90 64       	ori	r25, 0x40	; 64
    263c:	90 83       	st	Z, r25

	return Status;
}
    263e:	df 91       	pop	r29
    2640:	cf 91       	pop	r28
    2642:	1f 91       	pop	r17
    2644:	0f 91       	pop	r16
    2646:	ff 90       	pop	r15
    2648:	ef 90       	pop	r14
    264a:	df 90       	pop	r13
    264c:	bf 90       	pop	r11
    264e:	af 90       	pop	r10
    2650:	9f 90       	pop	r9
    2652:	8f 90       	pop	r8
    2654:	08 95       	ret

00002656 <TwiMasterReceive>:
bool
TwiMasterReceive(PVOID Buffer, 
				 unsigned long Length, 
				 PTWI_ADDRESS Address,
				 bool SendStop)
{
    2656:	af 92       	push	r10
    2658:	bf 92       	push	r11
    265a:	cf 92       	push	r12
    265c:	df 92       	push	r13
    265e:	ef 92       	push	r14
    2660:	ff 92       	push	r15
    2662:	0f 93       	push	r16
    2664:	cf 93       	push	r28
    2666:	df 93       	push	r29
    2668:	5c 01       	movw	r10, r24
    266a:	6a 01       	movw	r12, r20
    266c:	7b 01       	movw	r14, r22
    266e:	e9 01       	movw	r28, r18
	bool Status = TRUE;
	
	if (!SendStartCondition())
    2670:	c0 dd       	rcall	.-1152   	; 0x21f2 <SendStartCondition>
    2672:	81 11       	cpse	r24, r1
    2674:	14 c0       	rjmp	.+40     	; 0x269e <TwiMasterReceive+0x48>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterReceive - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
    2676:	80 91 b9 00 	lds	r24, 0x00B9
    267a:	88 7f       	andi	r24, 0xF8	; 248
    267c:	1f 92       	push	r1
    267e:	8f 93       	push	r24
    2680:	84 eb       	ldi	r24, 0xB4	; 180
    2682:	9a e0       	ldi	r25, 0x0A	; 10
    2684:	9f 93       	push	r25
    2686:	8f 93       	push	r24
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	8f 93       	push	r24
    268c:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
	
	if (!SendStartCondition())
	{
		SendTrace(ERROR_LEVEL, "TwiMasterReceive - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
    269a:	c0 e0       	ldi	r28, 0x00	; 0
		
		goto Exit;
    269c:	34 c0       	rjmp	.+104    	; 0x2706 <TwiMasterReceive+0xb0>
	}
	
	gIsRepeatedStart = FALSE;
    269e:	10 92 fe 15 	sts	0x15FE, r1
	//
	// Set Address->ReadWrite = 1 indicating a read operation.
	// Then transmit SLA+R
	//
	
	Address->RW_EnGenCall = 1;
    26a2:	88 81       	ld	r24, Y
    26a4:	81 60       	ori	r24, 0x01	; 1
    26a6:	88 83       	st	Y, r24
	
	TWDR = Address->AsUINT8;
    26a8:	80 93 bb 00 	sts	0x00BB, r24
	
	WAIT_FOR_OP_COMPLETION();
    26ac:	ec eb       	ldi	r30, 0xBC	; 188
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	80 68       	ori	r24, 0x80	; 128
    26b4:	80 83       	st	Z, r24
    26b6:	80 81       	ld	r24, Z
    26b8:	88 23       	and	r24, r24
    26ba:	ec f7       	brge	.-6      	; 0x26b6 <TwiMasterReceive+0x60>
	
	if (!ProcessTwiStatus(SLA_R_TRANSMITTED_ACK))
    26bc:	80 91 b9 00 	lds	r24, 0x00B9
    26c0:	88 7f       	andi	r24, 0xF8	; 248
    26c2:	80 34       	cpi	r24, 0x40	; 64
    26c4:	a1 f0       	breq	.+40     	; 0x26ee <TwiMasterReceive+0x98>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterReceive - Slave Address and Read Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
    26c6:	80 91 b9 00 	lds	r24, 0x00B9
    26ca:	88 7f       	andi	r24, 0xF8	; 248
    26cc:	1f 92       	push	r1
    26ce:	8f 93       	push	r24
    26d0:	8d ef       	ldi	r24, 0xFD	; 253
    26d2:	9a e0       	ldi	r25, 0x0A	; 10
    26d4:	9f 93       	push	r25
    26d6:	8f 93       	push	r24
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	8f 93       	push	r24
    26dc:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
	
	if (!ProcessTwiStatus(SLA_R_TRANSMITTED_ACK))
	{
		SendTrace(ERROR_LEVEL, "TwiMasterReceive - Slave Address and Read Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
    26ea:	c0 e0       	ldi	r28, 0x00	; 0
		
		goto Exit;
    26ec:	0c c0       	rjmp	.+24     	; 0x2706 <TwiMasterReceive+0xb0>
	}
	
	Status = Receive(Buffer, Length);
    26ee:	b7 01       	movw	r22, r14
    26f0:	a6 01       	movw	r20, r12
    26f2:	c5 01       	movw	r24, r10
    26f4:	07 df       	rcall	.-498    	; 0x2504 <Receive>
    26f6:	c8 2f       	mov	r28, r24
	
	//
	// Send stop condition
	//
	
	if (SendStop)
    26f8:	00 23       	and	r16, r16
    26fa:	11 f0       	breq	.+4      	; 0x2700 <TwiMasterReceive+0xaa>
	{
		SendStopCondition();
    26fc:	9f dd       	rcall	.-1218   	; 0x223c <SendStopCondition>
    26fe:	03 c0       	rjmp	.+6      	; 0x2706 <TwiMasterReceive+0xb0>
	}
	else
	{
		gIsRepeatedStart = TRUE;
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	80 93 fe 15 	sts	0x15FE, r24
	}
	
Exit:

	return Status;
}
    2706:	8c 2f       	mov	r24, r28
    2708:	df 91       	pop	r29
    270a:	cf 91       	pop	r28
    270c:	0f 91       	pop	r16
    270e:	ff 90       	pop	r15
    2710:	ef 90       	pop	r14
    2712:	df 90       	pop	r13
    2714:	cf 90       	pop	r12
    2716:	bf 90       	pop	r11
    2718:	af 90       	pop	r10
    271a:	08 95       	ret

0000271c <TwiReceive>:
bool
TwiReceive(PVOID Buffer,
		   unsigned long Length,
		   PTWI_ADDRESS Address,
		   bool SendStop)
{
    271c:	0f 93       	push	r16
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
    271e:	e0 91 ff 15 	lds	r30, 0x15FF
    2722:	ee 23       	and	r30, r30
    2724:	e1 f1       	breq	.+120    	; 0x279e <TwiReceive+0x82>
    2726:	00 97       	sbiw	r24, 0x00	; 0
    2728:	e1 f1       	breq	.+120    	; 0x27a2 <TwiReceive+0x86>
		Status = FALSE;
		
		goto Exit;
	}
	
	if (gMode == TWI_MASTER)
    272a:	e0 91 4e 16 	lds	r30, 0x164E
    272e:	e1 30       	cpi	r30, 0x01	; 1
    2730:	a1 f4       	brne	.+40     	; 0x275a <TwiReceive+0x3e>
	{
		if (Address == NULL)
    2732:	21 15       	cp	r18, r1
    2734:	31 05       	cpc	r19, r1
    2736:	69 f4       	brne	.+26     	; 0x2752 <TwiReceive+0x36>
		{
			SendTrace(ERROR_LEVEL, "TwiReceive - Invalid Parameters\r\n");
    2738:	82 e5       	ldi	r24, 0x52	; 82
    273a:	9b e0       	ldi	r25, 0x0B	; 11
    273c:	9f 93       	push	r25
    273e:	8f 93       	push	r24
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	8f 93       	push	r24
    2744:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
    2748:	0f 90       	pop	r0
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
	{
		if (Address == NULL)
		{
			SendTrace(ERROR_LEVEL, "TwiReceive - Invalid Parameters\r\n");
			
			Status = FALSE;
    274e:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
    2750:	29 c0       	rjmp	.+82     	; 0x27a4 <TwiReceive+0x88>
		}
		else
		{
			DATA_IN();
    2752:	39 98       	cbi	0x07, 1	; 7
			
			Status = TwiMasterReceive(Buffer, Length, Address, SendStop);
    2754:	80 df       	rcall	.-256    	; 0x2656 <TwiMasterReceive>
			
			DATA_OUT();
    2756:	39 9a       	sbi	0x07, 1	; 7
    2758:	25 c0       	rjmp	.+74     	; 0x27a4 <TwiReceive+0x88>
		}
	}
	else
	{
		WAIT_FOR_OP_COMPLETION();
    275a:	ec eb       	ldi	r30, 0xBC	; 188
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	20 81       	ld	r18, Z
    2760:	20 68       	ori	r18, 0x80	; 128
    2762:	20 83       	st	Z, r18
    2764:	20 81       	ld	r18, Z
    2766:	22 23       	and	r18, r18
    2768:	ec f7       	brge	.-6      	; 0x2764 <TwiReceive+0x48>
		
		if (!ProcessTwiStatus(SLA_W_RECEIVED_ACK))
    276a:	20 91 b9 00 	lds	r18, 0x00B9
    276e:	28 7f       	andi	r18, 0xF8	; 248
    2770:	20 36       	cpi	r18, 0x60	; 96
    2772:	99 f0       	breq	.+38     	; 0x279a <TwiReceive+0x7e>
		{
			SendTrace(ERROR_LEVEL, "TwiReceive - Slave Write Not Requested by Master - Status 0x%x\r\n", TWSR);
    2774:	80 91 b9 00 	lds	r24, 0x00B9
    2778:	1f 92       	push	r1
    277a:	8f 93       	push	r24
    277c:	84 e7       	ldi	r24, 0x74	; 116
    277e:	9b e0       	ldi	r25, 0x0B	; 11
    2780:	9f 93       	push	r25
    2782:	8f 93       	push	r24
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	8f 93       	push	r24
    2788:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(SLA_W_RECEIVED_ACK))
		{
			SendTrace(ERROR_LEVEL, "TwiReceive - Slave Write Not Requested by Master - Status 0x%x\r\n", TWSR);
			
			Status = FALSE;
    2796:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
    2798:	05 c0       	rjmp	.+10     	; 0x27a4 <TwiReceive+0x88>
		}
		else
		{	
			Status = Receive(Buffer, Length);
    279a:	b4 de       	rcall	.-664    	; 0x2504 <Receive>
    279c:	03 c0       	rjmp	.+6      	; 0x27a4 <TwiReceive+0x88>
{
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
	{
		Status = FALSE;
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	01 c0       	rjmp	.+2      	; 0x27a4 <TwiReceive+0x88>
    27a2:	80 e0       	ldi	r24, 0x00	; 0
	}
	
Exit:

	return Status;		   
}
    27a4:	0f 91       	pop	r16
    27a6:	08 95       	ret

000027a8 <ReadADXL345Register>:
	}
	
Exit:

	return Status;
}
    27a8:	af 92       	push	r10
    27aa:	bf 92       	push	r11
    27ac:	cf 92       	push	r12
    27ae:	df 92       	push	r13
    27b0:	ef 92       	push	r14
    27b2:	ff 92       	push	r15
    27b4:	0f 93       	push	r16
    27b6:	1f 93       	push	r17
    27b8:	cf 93       	push	r28
    27ba:	df 93       	push	r29
    27bc:	1f 92       	push	r1
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    27c2:	89 83       	std	Y+1, r24	; 0x01
    27c4:	5b 01       	movw	r10, r22
    27c6:	69 01       	movw	r12, r18
    27c8:	7a 01       	movw	r14, r20
    27ca:	00 e0       	ldi	r16, 0x00	; 0
    27cc:	2f e4       	ldi	r18, 0x4F	; 79
    27ce:	36 e1       	ldi	r19, 0x16	; 22
    27d0:	41 e0       	ldi	r20, 0x01	; 1
    27d2:	50 e0       	ldi	r21, 0x00	; 0
    27d4:	60 e0       	ldi	r22, 0x00	; 0
    27d6:	70 e0       	ldi	r23, 0x00	; 0
    27d8:	ce 01       	movw	r24, r28
    27da:	01 96       	adiw	r24, 0x01	; 1
    27dc:	3e de       	rcall	.-900    	; 0x245a <TwiTransmit>
    27de:	18 2f       	mov	r17, r24
    27e0:	81 11       	cpse	r24, r1
    27e2:	0c c0       	rjmp	.+24     	; 0x27fc <ReadADXL345Register+0x54>
    27e4:	25 eb       	ldi	r18, 0xB5	; 181
    27e6:	3b e0       	ldi	r19, 0x0B	; 11
    27e8:	3f 93       	push	r19
    27ea:	2f 93       	push	r18
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	8f 93       	push	r24
    27f0:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	15 c0       	rjmp	.+42     	; 0x2826 <ReadADXL345Register+0x7e>
    27fc:	01 e0       	ldi	r16, 0x01	; 1
    27fe:	2f e4       	ldi	r18, 0x4F	; 79
    2800:	36 e1       	ldi	r19, 0x16	; 22
    2802:	b7 01       	movw	r22, r14
    2804:	a6 01       	movw	r20, r12
    2806:	c5 01       	movw	r24, r10
    2808:	89 df       	rcall	.-238    	; 0x271c <TwiReceive>
    280a:	18 2f       	mov	r17, r24
    280c:	81 11       	cpse	r24, r1
    280e:	0b c0       	rjmp	.+22     	; 0x2826 <ReadADXL345Register+0x7e>
    2810:	2d ed       	ldi	r18, 0xDD	; 221
    2812:	3b e0       	ldi	r19, 0x0B	; 11
    2814:	3f 93       	push	r19
    2816:	2f 93       	push	r18
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	8f 93       	push	r24
    281c:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    2820:	0f 90       	pop	r0
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	81 2f       	mov	r24, r17
    2828:	0f 90       	pop	r0
    282a:	df 91       	pop	r29
    282c:	cf 91       	pop	r28
    282e:	1f 91       	pop	r17
    2830:	0f 91       	pop	r16
    2832:	ff 90       	pop	r15
    2834:	ef 90       	pop	r14
    2836:	df 90       	pop	r13
    2838:	cf 90       	pop	r12
    283a:	bf 90       	pop	r11
    283c:	af 90       	pop	r10
    283e:	08 95       	ret

00002840 <ReadADXL345InterruptSource>:
    2840:	cf 93       	push	r28
    2842:	20 91 00 16 	lds	r18, 0x1600
    2846:	21 11       	cpse	r18, r1
    2848:	0d c0       	rjmp	.+26     	; 0x2864 <ReadADXL345InterruptSource+0x24>
    284a:	83 e0       	ldi	r24, 0x03	; 3
    284c:	9c e0       	ldi	r25, 0x0C	; 12
    284e:	9f 93       	push	r25
    2850:	8f 93       	push	r24
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	8f 93       	push	r24
    2856:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    285a:	0f 90       	pop	r0
    285c:	0f 90       	pop	r0
    285e:	0f 90       	pop	r0
    2860:	c0 e0       	ldi	r28, 0x00	; 0
    2862:	15 c0       	rjmp	.+42     	; 0x288e <ReadADXL345InterruptSource+0x4e>
    2864:	21 e0       	ldi	r18, 0x01	; 1
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	40 e0       	ldi	r20, 0x00	; 0
    286a:	50 e0       	ldi	r21, 0x00	; 0
    286c:	bc 01       	movw	r22, r24
    286e:	80 e3       	ldi	r24, 0x30	; 48
    2870:	9b df       	rcall	.-202    	; 0x27a8 <ReadADXL345Register>
    2872:	c8 2f       	mov	r28, r24
    2874:	81 11       	cpse	r24, r1
    2876:	0b c0       	rjmp	.+22     	; 0x288e <ReadADXL345InterruptSource+0x4e>
    2878:	20 e9       	ldi	r18, 0x90	; 144
    287a:	3c e0       	ldi	r19, 0x0C	; 12
    287c:	3f 93       	push	r19
    287e:	2f 93       	push	r18
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	8f 93       	push	r24
    2884:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	8c 2f       	mov	r24, r28
    2890:	cf 91       	pop	r28
    2892:	08 95       	ret

00002894 <ReadADXL345FifoStatus>:
    2894:	cf 93       	push	r28
    2896:	20 91 00 16 	lds	r18, 0x1600
    289a:	21 11       	cpse	r18, r1
    289c:	0d c0       	rjmp	.+26     	; 0x28b8 <ReadADXL345FifoStatus+0x24>
    289e:	83 e0       	ldi	r24, 0x03	; 3
    28a0:	9c e0       	ldi	r25, 0x0C	; 12
    28a2:	9f 93       	push	r25
    28a4:	8f 93       	push	r24
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	8f 93       	push	r24
    28aa:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    28ae:	0f 90       	pop	r0
    28b0:	0f 90       	pop	r0
    28b2:	0f 90       	pop	r0
    28b4:	c0 e0       	ldi	r28, 0x00	; 0
    28b6:	15 c0       	rjmp	.+42     	; 0x28e2 <ReadADXL345FifoStatus+0x4e>
    28b8:	21 e0       	ldi	r18, 0x01	; 1
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	40 e0       	ldi	r20, 0x00	; 0
    28be:	50 e0       	ldi	r21, 0x00	; 0
    28c0:	bc 01       	movw	r22, r24
    28c2:	89 e3       	ldi	r24, 0x39	; 57
    28c4:	71 df       	rcall	.-286    	; 0x27a8 <ReadADXL345Register>
    28c6:	c8 2f       	mov	r28, r24
    28c8:	81 11       	cpse	r24, r1
    28ca:	0b c0       	rjmp	.+22     	; 0x28e2 <ReadADXL345FifoStatus+0x4e>
    28cc:	27 eb       	ldi	r18, 0xB7	; 183
    28ce:	3c e0       	ldi	r19, 0x0C	; 12
    28d0:	3f 93       	push	r19
    28d2:	2f 93       	push	r18
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	8f 93       	push	r24
    28d8:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	8c 2f       	mov	r24, r28
    28e4:	cf 91       	pop	r28
    28e6:	08 95       	ret

000028e8 <ReadADXL345RawData>:

bool ReadADXL345RawData(PRAW_DATA_XYZ RawData)
{
    28e8:	cf 93       	push	r28
	bool Status = FALSE;
	
	if (!gIsADXL345Initialized)
    28ea:	20 91 00 16 	lds	r18, 0x1600
    28ee:	21 11       	cpse	r18, r1
    28f0:	0d c0       	rjmp	.+26     	; 0x290c <ReadADXL345RawData+0x24>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
    28f2:	83 e0       	ldi	r24, 0x03	; 3
    28f4:	9c e0       	ldi	r25, 0x0C	; 12
    28f6:	9f 93       	push	r25
    28f8:	8f 93       	push	r24
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	8f 93       	push	r24
    28fe:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	0f 90       	pop	r0
	return Status;
}

bool ReadADXL345RawData(PRAW_DATA_XYZ RawData)
{
	bool Status = FALSE;
    2908:	c0 e0       	ldi	r28, 0x00	; 0
	
	if (!gIsADXL345Initialized)
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
		
		goto Exit;
    290a:	15 c0       	rjmp	.+42     	; 0x2936 <ReadADXL345RawData+0x4e>
	}
	
	Status = ReadADXL345Register(ADR_DATAX0, RawData, sizeof(RAW_DATA_XYZ));
    290c:	26 e0       	ldi	r18, 0x06	; 6
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e0       	ldi	r20, 0x00	; 0
    2912:	50 e0       	ldi	r21, 0x00	; 0
    2914:	bc 01       	movw	r22, r24
    2916:	82 e3       	ldi	r24, 0x32	; 50
    2918:	47 df       	rcall	.-370    	; 0x27a8 <ReadADXL345Register>
    291a:	c8 2f       	mov	r28, r24
	
	if(!Status)
    291c:	81 11       	cpse	r24, r1
    291e:	0b c0       	rjmp	.+22     	; 0x2936 <ReadADXL345RawData+0x4e>
	{
		SendTrace(ERROR_LEVEL, "Failed to read Data Register. \r\n");
    2920:	2a e0       	ldi	r18, 0x0A	; 10
    2922:	3d e0       	ldi	r19, 0x0D	; 13
    2924:	3f 93       	push	r19
    2926:	2f 93       	push	r18
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	8f 93       	push	r24
    292c:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
	}
	
Exit:

	return Status;
}
    2936:	8c 2f       	mov	r24, r28
    2938:	cf 91       	pop	r28
    293a:	08 95       	ret

0000293c <FlushADXL345Fifo>:

	return Status;	
}

bool FlushADXL345Fifo()
{
    293c:	ef 92       	push	r14
    293e:	ff 92       	push	r15
    2940:	0f 93       	push	r16
    2942:	1f 93       	push	r17
    2944:	cf 93       	push	r28
    2946:	df 93       	push	r29
    2948:	cd b7       	in	r28, 0x3d	; 61
    294a:	de b7       	in	r29, 0x3e	; 62
    294c:	27 97       	sbiw	r28, 0x07	; 7
    294e:	0f b6       	in	r0, 0x3f	; 63
    2950:	f8 94       	cli
    2952:	de bf       	out	0x3e, r29	; 62
    2954:	0f be       	out	0x3f, r0	; 63
    2956:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char index;
	
	RAW_DATA_XYZ Data;
	
	if (!ReadADXL345FifoStatus(&FifoStatus))
    2958:	ce 01       	movw	r24, r28
    295a:	01 96       	adiw	r24, 0x01	; 1
    295c:	9b df       	rcall	.-202    	; 0x2894 <ReadADXL345FifoStatus>
    295e:	88 23       	and	r24, r24
    2960:	f9 f0       	breq	.+62     	; 0x29a0 <FlushADXL345Fifo+0x64>
		Status = FALSE;
		
		goto Exit;
	}
	
	for (index=0; index < FifoStatus.Entries; index++)
    2962:	89 81       	ldd	r24, Y+1	; 0x01
    2964:	8f 73       	andi	r24, 0x3F	; 63
    2966:	f1 f0       	breq	.+60     	; 0x29a4 <FlushADXL345Fifo+0x68>
    2968:	f1 2c       	mov	r15, r1
	{
		if(!ReadADXL345RawData(&Data))
		{
			SendTrace(ERROR_LEVEL, "Reading data failed while attempting to flush FIFO. \r\n");
    296a:	0b e2       	ldi	r16, 0x2B	; 43
    296c:	1d e0       	ldi	r17, 0x0D	; 13
    296e:	ee 24       	eor	r14, r14
    2970:	e3 94       	inc	r14
		goto Exit;
	}
	
	for (index=0; index < FifoStatus.Entries; index++)
	{
		if(!ReadADXL345RawData(&Data))
    2972:	ce 01       	movw	r24, r28
    2974:	02 96       	adiw	r24, 0x02	; 2
    2976:	b8 df       	rcall	.-144    	; 0x28e8 <ReadADXL345RawData>
    2978:	81 11       	cpse	r24, r1
    297a:	08 c0       	rjmp	.+16     	; 0x298c <FlushADXL345Fifo+0x50>
		{
			SendTrace(ERROR_LEVEL, "Reading data failed while attempting to flush FIFO. \r\n");
    297c:	1f 93       	push	r17
    297e:	0f 93       	push	r16
    2980:	ef 92       	push	r14
    2982:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	0f 90       	pop	r0
		Status = FALSE;
		
		goto Exit;
	}
	
	for (index=0; index < FifoStatus.Entries; index++)
    298c:	f3 94       	inc	r15
    298e:	2f 2d       	mov	r18, r15
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	89 81       	ldd	r24, Y+1	; 0x01
    2994:	8f 73       	andi	r24, 0x3F	; 63
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	28 17       	cp	r18, r24
    299a:	39 07       	cpc	r19, r25
    299c:	54 f3       	brlt	.-44     	; 0x2972 <FlushADXL345Fifo+0x36>
    299e:	04 c0       	rjmp	.+8      	; 0x29a8 <FlushADXL345Fifo+0x6c>
	
	RAW_DATA_XYZ Data;
	
	if (!ReadADXL345FifoStatus(&FifoStatus))
	{
		Status = FALSE;
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	03 c0       	rjmp	.+6      	; 0x29aa <FlushADXL345Fifo+0x6e>
	return Status;	
}

bool FlushADXL345Fifo()
{
	bool Status = TRUE;
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	01 c0       	rjmp	.+2      	; 0x29aa <FlushADXL345Fifo+0x6e>
    29a8:	81 e0       	ldi	r24, 0x01	; 1
	}
	
Exit:

	return Status;
}
    29aa:	27 96       	adiw	r28, 0x07	; 7
    29ac:	0f b6       	in	r0, 0x3f	; 63
    29ae:	f8 94       	cli
    29b0:	de bf       	out	0x3e, r29	; 62
    29b2:	0f be       	out	0x3f, r0	; 63
    29b4:	cd bf       	out	0x3d, r28	; 61
    29b6:	df 91       	pop	r29
    29b8:	cf 91       	pop	r28
    29ba:	1f 91       	pop	r17
    29bc:	0f 91       	pop	r16
    29be:	ff 90       	pop	r15
    29c0:	ef 90       	pop	r14
    29c2:	08 95       	ret

000029c4 <ReadADXL345AccAndTiltData>:

	return Status;
}

bool ReadADXL345AccAndTiltData(ANGLE_UNIT AngleUnit, PACC_TILT_DATA_XYZ AccTiltData)
{
    29c4:	2f 92       	push	r2
    29c6:	3f 92       	push	r3
    29c8:	4f 92       	push	r4
    29ca:	5f 92       	push	r5
    29cc:	6f 92       	push	r6
    29ce:	7f 92       	push	r7
    29d0:	8f 92       	push	r8
    29d2:	9f 92       	push	r9
    29d4:	af 92       	push	r10
    29d6:	bf 92       	push	r11
    29d8:	cf 92       	push	r12
    29da:	df 92       	push	r13
    29dc:	ef 92       	push	r14
    29de:	ff 92       	push	r15
    29e0:	0f 93       	push	r16
    29e2:	1f 93       	push	r17
    29e4:	cf 93       	push	r28
    29e6:	df 93       	push	r29
    29e8:	cd b7       	in	r28, 0x3d	; 61
    29ea:	de b7       	in	r29, 0x3e	; 62
    29ec:	62 97       	sbiw	r28, 0x12	; 18
    29ee:	0f b6       	in	r0, 0x3f	; 63
    29f0:	f8 94       	cli
    29f2:	de bf       	out	0x3e, r29	; 62
    29f4:	0f be       	out	0x3f, r0	; 63
    29f6:	cd bf       	out	0x3d, r28	; 61
    29f8:	08 2f       	mov	r16, r24
    29fa:	1b 01       	movw	r2, r22
	
	double RadToDegree;
	
	RAW_DATA_XYZ RawData;
	
	if (!gIsADXL345Initialized)
    29fc:	80 91 00 16 	lds	r24, 0x1600
    2a00:	81 11       	cpse	r24, r1
    2a02:	0d c0       	rjmp	.+26     	; 0x2a1e <ReadADXL345AccAndTiltData+0x5a>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
    2a04:	83 e0       	ldi	r24, 0x03	; 3
    2a06:	9c e0       	ldi	r25, 0x0C	; 12
    2a08:	9f 93       	push	r25
    2a0a:	8f 93       	push	r24
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	8f 93       	push	r24
    2a10:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    2a14:	0f 90       	pop	r0
    2a16:	0f 90       	pop	r0
    2a18:	0f 90       	pop	r0
	return Status;
}

bool ReadADXL345AccAndTiltData(ANGLE_UNIT AngleUnit, PACC_TILT_DATA_XYZ AccTiltData)
{
	bool Status = FALSE;
    2a1a:	10 e0       	ldi	r17, 0x00	; 0
	
	if (!gIsADXL345Initialized)
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
		
		goto Exit;
    2a1c:	e5 c0       	rjmp	.+458    	; 0x2be8 <ReadADXL345AccAndTiltData+0x224>
	}
	
	Status = ReadADXL345Register(ADR_DATAX0, &RawData, sizeof(RAW_DATA_XYZ));
    2a1e:	26 e0       	ldi	r18, 0x06	; 6
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	40 e0       	ldi	r20, 0x00	; 0
    2a24:	50 e0       	ldi	r21, 0x00	; 0
    2a26:	be 01       	movw	r22, r28
    2a28:	6f 5f       	subi	r22, 0xFF	; 255
    2a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2c:	82 e3       	ldi	r24, 0x32	; 50
    2a2e:	bc de       	rcall	.-648    	; 0x27a8 <ReadADXL345Register>
    2a30:	18 2f       	mov	r17, r24
	
	if(!Status)
    2a32:	81 11       	cpse	r24, r1
    2a34:	0c c0       	rjmp	.+24     	; 0x2a4e <ReadADXL345AccAndTiltData+0x8a>
	{
		SendTrace(ERROR_LEVEL, "Failed to read Data Register. \r\n");
    2a36:	8a e0       	ldi	r24, 0x0A	; 10
    2a38:	9d e0       	ldi	r25, 0x0D	; 13
    2a3a:	9f 93       	push	r25
    2a3c:	8f 93       	push	r24
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	8f 93       	push	r24
    2a42:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    2a46:	0f 90       	pop	r0
    2a48:	0f 90       	pop	r0
    2a4a:	0f 90       	pop	r0
    2a4c:	cd c0       	rjmp	.+410    	; 0x2be8 <ReadADXL345AccAndTiltData+0x224>
	
	//
	// Calculate G Data in X, Y and Z axis
	//
	
	AccTiltData->AccX = RawData.DataX / LsbPerG;
    2a4e:	69 81       	ldd	r22, Y+1	; 0x01
    2a50:	7a 81       	ldd	r23, Y+2	; 0x02
    2a52:	88 27       	eor	r24, r24
    2a54:	77 fd       	sbrc	r23, 7
    2a56:	80 95       	com	r24
    2a58:	98 2f       	mov	r25, r24
    2a5a:	0e 94 44 23 	call	0x4688	; 0x4688 <__floatsisf>
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	40 e8       	ldi	r20, 0x80	; 128
    2a64:	5b e3       	ldi	r21, 0x3B	; 59
    2a66:	0e 94 ab 24 	call	0x4956	; 0x4956 <__mulsf3>
    2a6a:	4b 01       	movw	r8, r22
    2a6c:	5c 01       	movw	r10, r24
    2a6e:	f1 01       	movw	r30, r2
    2a70:	60 83       	st	Z, r22
    2a72:	71 83       	std	Z+1, r23	; 0x01
    2a74:	82 83       	std	Z+2, r24	; 0x02
    2a76:	93 83       	std	Z+3, r25	; 0x03
	
	AccTiltData->AccY = RawData.DataY / LsbPerG;
    2a78:	6b 81       	ldd	r22, Y+3	; 0x03
    2a7a:	7c 81       	ldd	r23, Y+4	; 0x04
    2a7c:	88 27       	eor	r24, r24
    2a7e:	77 fd       	sbrc	r23, 7
    2a80:	80 95       	com	r24
    2a82:	98 2f       	mov	r25, r24
    2a84:	0e 94 44 23 	call	0x4688	; 0x4688 <__floatsisf>
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	40 e8       	ldi	r20, 0x80	; 128
    2a8e:	5b e3       	ldi	r21, 0x3B	; 59
    2a90:	0e 94 ab 24 	call	0x4956	; 0x4956 <__mulsf3>
    2a94:	6b 01       	movw	r12, r22
    2a96:	7c 01       	movw	r14, r24
    2a98:	f1 01       	movw	r30, r2
    2a9a:	64 83       	std	Z+4, r22	; 0x04
    2a9c:	75 83       	std	Z+5, r23	; 0x05
    2a9e:	86 83       	std	Z+6, r24	; 0x06
    2aa0:	97 83       	std	Z+7, r25	; 0x07
	
	AccTiltData->AccZ = RawData.DataZ / LsbPerG;
    2aa2:	6d 81       	ldd	r22, Y+5	; 0x05
    2aa4:	7e 81       	ldd	r23, Y+6	; 0x06
    2aa6:	88 27       	eor	r24, r24
    2aa8:	77 fd       	sbrc	r23, 7
    2aaa:	80 95       	com	r24
    2aac:	98 2f       	mov	r25, r24
    2aae:	0e 94 44 23 	call	0x4688	; 0x4688 <__floatsisf>
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	40 e8       	ldi	r20, 0x80	; 128
    2ab8:	5b e3       	ldi	r21, 0x3B	; 59
    2aba:	0e 94 ab 24 	call	0x4956	; 0x4956 <__mulsf3>
    2abe:	2b 01       	movw	r4, r22
    2ac0:	3c 01       	movw	r6, r24
    2ac2:	f1 01       	movw	r30, r2
    2ac4:	60 87       	std	Z+8, r22	; 0x08
    2ac6:	71 87       	std	Z+9, r23	; 0x09
    2ac8:	82 87       	std	Z+10, r24	; 0x0a
    2aca:	93 87       	std	Z+11, r25	; 0x0b
	
	//
	// Calculate Tilt in X, Y and Z axis
	//
	
	DataXSqrd = pow(AccTiltData->AccX, 2.0);
    2acc:	a5 01       	movw	r20, r10
    2ace:	94 01       	movw	r18, r8
    2ad0:	c5 01       	movw	r24, r10
    2ad2:	b4 01       	movw	r22, r8
    2ad4:	0e 94 ab 24 	call	0x4956	; 0x4956 <__mulsf3>
    2ad8:	6f 83       	std	Y+7, r22	; 0x07
    2ada:	78 87       	std	Y+8, r23	; 0x08
    2adc:	89 87       	std	Y+9, r24	; 0x09
    2ade:	9a 87       	std	Y+10, r25	; 0x0a
	
	DataYSqrd = pow(AccTiltData->AccY, 2.0);
    2ae0:	a7 01       	movw	r20, r14
    2ae2:	96 01       	movw	r18, r12
    2ae4:	c7 01       	movw	r24, r14
    2ae6:	b6 01       	movw	r22, r12
    2ae8:	0e 94 ab 24 	call	0x4956	; 0x4956 <__mulsf3>
    2aec:	6b 87       	std	Y+11, r22	; 0x0b
    2aee:	7c 87       	std	Y+12, r23	; 0x0c
    2af0:	8d 87       	std	Y+13, r24	; 0x0d
    2af2:	9e 87       	std	Y+14, r25	; 0x0e
	
	DataZSqrd = pow(AccTiltData->AccZ, 2.0);
    2af4:	a3 01       	movw	r20, r6
    2af6:	92 01       	movw	r18, r4
    2af8:	c3 01       	movw	r24, r6
    2afa:	b2 01       	movw	r22, r4
    2afc:	0e 94 ab 24 	call	0x4956	; 0x4956 <__mulsf3>
    2b00:	6f 87       	std	Y+15, r22	; 0x0f
    2b02:	78 8b       	std	Y+16, r23	; 0x10
    2b04:	89 8b       	std	Y+17, r24	; 0x11
    2b06:	9a 8b       	std	Y+18, r25	; 0x12
	
	AccTiltData->TiltX = atan2 (AccTiltData->AccX, sqrt(DataYSqrd + DataZSqrd));
    2b08:	9b 01       	movw	r18, r22
    2b0a:	ac 01       	movw	r20, r24
    2b0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b14:	0e 94 9e 21 	call	0x433c	; 0x433c <__addsf3>
    2b18:	0e 94 18 25 	call	0x4a30	; 0x4a30 <sqrt>
    2b1c:	9b 01       	movw	r18, r22
    2b1e:	ac 01       	movw	r20, r24
    2b20:	c5 01       	movw	r24, r10
    2b22:	b4 01       	movw	r22, r8
    2b24:	0e 94 11 22 	call	0x4422	; 0x4422 <atan2>
    2b28:	4b 01       	movw	r8, r22
    2b2a:	5c 01       	movw	r10, r24
    2b2c:	f1 01       	movw	r30, r2
    2b2e:	64 87       	std	Z+12, r22	; 0x0c
    2b30:	75 87       	std	Z+13, r23	; 0x0d
    2b32:	86 87       	std	Z+14, r24	; 0x0e
    2b34:	97 87       	std	Z+15, r25	; 0x0f
	
	AccTiltData->TiltY = atan2 (AccTiltData->AccY, sqrt(DataXSqrd + DataZSqrd));
    2b36:	2f 85       	ldd	r18, Y+15	; 0x0f
    2b38:	38 89       	ldd	r19, Y+16	; 0x10
    2b3a:	49 89       	ldd	r20, Y+17	; 0x11
    2b3c:	5a 89       	ldd	r21, Y+18	; 0x12
    2b3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b40:	78 85       	ldd	r23, Y+8	; 0x08
    2b42:	89 85       	ldd	r24, Y+9	; 0x09
    2b44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b46:	0e 94 9e 21 	call	0x433c	; 0x433c <__addsf3>
    2b4a:	0e 94 18 25 	call	0x4a30	; 0x4a30 <sqrt>
    2b4e:	9b 01       	movw	r18, r22
    2b50:	ac 01       	movw	r20, r24
    2b52:	c7 01       	movw	r24, r14
    2b54:	b6 01       	movw	r22, r12
    2b56:	0e 94 11 22 	call	0x4422	; 0x4422 <atan2>
    2b5a:	6b 01       	movw	r12, r22
    2b5c:	7c 01       	movw	r14, r24
    2b5e:	f1 01       	movw	r30, r2
    2b60:	60 8b       	std	Z+16, r22	; 0x10
    2b62:	71 8b       	std	Z+17, r23	; 0x11
    2b64:	82 8b       	std	Z+18, r24	; 0x12
    2b66:	93 8b       	std	Z+19, r25	; 0x13
	
	AccTiltData->TiltZ = atan2 (sqrt(DataXSqrd + DataYSqrd), AccTiltData->AccZ);
    2b68:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b6a:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b6c:	4d 85       	ldd	r20, Y+13	; 0x0d
    2b6e:	5e 85       	ldd	r21, Y+14	; 0x0e
    2b70:	6f 81       	ldd	r22, Y+7	; 0x07
    2b72:	78 85       	ldd	r23, Y+8	; 0x08
    2b74:	89 85       	ldd	r24, Y+9	; 0x09
    2b76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b78:	0e 94 9e 21 	call	0x433c	; 0x433c <__addsf3>
    2b7c:	0e 94 18 25 	call	0x4a30	; 0x4a30 <sqrt>
    2b80:	a3 01       	movw	r20, r6
    2b82:	92 01       	movw	r18, r4
    2b84:	0e 94 11 22 	call	0x4422	; 0x4422 <atan2>
    2b88:	2b 01       	movw	r4, r22
    2b8a:	3c 01       	movw	r6, r24
    2b8c:	f1 01       	movw	r30, r2
    2b8e:	64 8b       	std	Z+20, r22	; 0x14
    2b90:	75 8b       	std	Z+21, r23	; 0x15
    2b92:	86 8b       	std	Z+22, r24	; 0x16
    2b94:	97 8b       	std	Z+23, r25	; 0x17
	
	if (AngleUnit == DEGREES)
    2b96:	01 30       	cpi	r16, 0x01	; 1
    2b98:	39 f5       	brne	.+78     	; 0x2be8 <ReadADXL345AccAndTiltData+0x224>
	{
		RadToDegree = 180.0 / M_PI;
		
		AccTiltData->TiltX = AccTiltData->TiltX * RadToDegree;
    2b9a:	20 ee       	ldi	r18, 0xE0	; 224
    2b9c:	3e e2       	ldi	r19, 0x2E	; 46
    2b9e:	45 e6       	ldi	r20, 0x65	; 101
    2ba0:	52 e4       	ldi	r21, 0x42	; 66
    2ba2:	c5 01       	movw	r24, r10
    2ba4:	b4 01       	movw	r22, r8
    2ba6:	0e 94 ab 24 	call	0x4956	; 0x4956 <__mulsf3>
    2baa:	f1 01       	movw	r30, r2
    2bac:	64 87       	std	Z+12, r22	; 0x0c
    2bae:	75 87       	std	Z+13, r23	; 0x0d
    2bb0:	86 87       	std	Z+14, r24	; 0x0e
    2bb2:	97 87       	std	Z+15, r25	; 0x0f
	
		AccTiltData->TiltY = AccTiltData->TiltY * RadToDegree;
    2bb4:	20 ee       	ldi	r18, 0xE0	; 224
    2bb6:	3e e2       	ldi	r19, 0x2E	; 46
    2bb8:	45 e6       	ldi	r20, 0x65	; 101
    2bba:	52 e4       	ldi	r21, 0x42	; 66
    2bbc:	c7 01       	movw	r24, r14
    2bbe:	b6 01       	movw	r22, r12
    2bc0:	0e 94 ab 24 	call	0x4956	; 0x4956 <__mulsf3>
    2bc4:	f1 01       	movw	r30, r2
    2bc6:	60 8b       	std	Z+16, r22	; 0x10
    2bc8:	71 8b       	std	Z+17, r23	; 0x11
    2bca:	82 8b       	std	Z+18, r24	; 0x12
    2bcc:	93 8b       	std	Z+19, r25	; 0x13
	
		AccTiltData->TiltZ = AccTiltData->TiltZ * RadToDegree;
    2bce:	20 ee       	ldi	r18, 0xE0	; 224
    2bd0:	3e e2       	ldi	r19, 0x2E	; 46
    2bd2:	45 e6       	ldi	r20, 0x65	; 101
    2bd4:	52 e4       	ldi	r21, 0x42	; 66
    2bd6:	c3 01       	movw	r24, r6
    2bd8:	b2 01       	movw	r22, r4
    2bda:	0e 94 ab 24 	call	0x4956	; 0x4956 <__mulsf3>
    2bde:	f1 01       	movw	r30, r2
    2be0:	64 8b       	std	Z+20, r22	; 0x14
    2be2:	75 8b       	std	Z+21, r23	; 0x15
    2be4:	86 8b       	std	Z+22, r24	; 0x16
    2be6:	97 8b       	std	Z+23, r25	; 0x17
	}
	
Exit:

	return Status;	
}
    2be8:	81 2f       	mov	r24, r17
    2bea:	62 96       	adiw	r28, 0x12	; 18
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	f8 94       	cli
    2bf0:	de bf       	out	0x3e, r29	; 62
    2bf2:	0f be       	out	0x3f, r0	; 63
    2bf4:	cd bf       	out	0x3d, r28	; 61
    2bf6:	df 91       	pop	r29
    2bf8:	cf 91       	pop	r28
    2bfa:	1f 91       	pop	r17
    2bfc:	0f 91       	pop	r16
    2bfe:	ff 90       	pop	r15
    2c00:	ef 90       	pop	r14
    2c02:	df 90       	pop	r13
    2c04:	cf 90       	pop	r12
    2c06:	bf 90       	pop	r11
    2c08:	af 90       	pop	r10
    2c0a:	9f 90       	pop	r9
    2c0c:	8f 90       	pop	r8
    2c0e:	7f 90       	pop	r7
    2c10:	6f 90       	pop	r6
    2c12:	5f 90       	pop	r5
    2c14:	4f 90       	pop	r4
    2c16:	3f 90       	pop	r3
    2c18:	2f 90       	pop	r2
    2c1a:	08 95       	ret

00002c1c <CheckADXL345DeviceId>:
//
// Private Functions
//

bool CheckADXL345DeviceId()
{
    2c1c:	1f 93       	push	r17
    2c1e:	cf 93       	push	r28
    2c20:	df 93       	push	r29
    2c22:	1f 92       	push	r1
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62
	bool Status = FALSE;
	
	unsigned char DeviceId;
	
	Status = ReadADXL345Register(ADR_DEVID, &DeviceId, sizeof(unsigned char));
    2c28:	21 e0       	ldi	r18, 0x01	; 1
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	40 e0       	ldi	r20, 0x00	; 0
    2c2e:	50 e0       	ldi	r21, 0x00	; 0
    2c30:	be 01       	movw	r22, r28
    2c32:	6f 5f       	subi	r22, 0xFF	; 255
    2c34:	7f 4f       	sbci	r23, 0xFF	; 255
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	b7 dd       	rcall	.-1170   	; 0x27a8 <ReadADXL345Register>
    2c3a:	18 2f       	mov	r17, r24
	
	if (!Status)
    2c3c:	81 11       	cpse	r24, r1
    2c3e:	0c c0       	rjmp	.+24     	; 0x2c58 <CheckADXL345DeviceId+0x3c>
	{
		SendTrace(ERROR_LEVEL, "Failed to read Accelerometer Device Id. \r\n");
    2c40:	22 e6       	ldi	r18, 0x62	; 98
    2c42:	3d e0       	ldi	r19, 0x0D	; 13
    2c44:	3f 93       	push	r19
    2c46:	2f 93       	push	r18
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	8f 93       	push	r24
    2c4c:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	0f 90       	pop	r0
    2c56:	13 c0       	rjmp	.+38     	; 0x2c7e <CheckADXL345DeviceId+0x62>
	}
	
	if (DeviceId != DEVID)
    2c58:	89 81       	ldd	r24, Y+1	; 0x01
    2c5a:	85 3e       	cpi	r24, 0xE5	; 229
    2c5c:	81 f0       	breq	.+32     	; 0x2c7e <CheckADXL345DeviceId+0x62>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer Device Id does not match 0x%x. \r\n", DeviceId);
    2c5e:	1f 92       	push	r1
    2c60:	8f 93       	push	r24
    2c62:	8d e8       	ldi	r24, 0x8D	; 141
    2c64:	9d e0       	ldi	r25, 0x0D	; 13
    2c66:	9f 93       	push	r25
    2c68:	8f 93       	push	r24
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	8f 93       	push	r24
    2c6e:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    2c72:	0f 90       	pop	r0
    2c74:	0f 90       	pop	r0
    2c76:	0f 90       	pop	r0
    2c78:	0f 90       	pop	r0
    2c7a:	0f 90       	pop	r0
		
		Status = FALSE;
    2c7c:	10 e0       	ldi	r17, 0x00	; 0
	}
	
Exit:
	
	return Status;
}
    2c7e:	81 2f       	mov	r24, r17
    2c80:	0f 90       	pop	r0
    2c82:	df 91       	pop	r29
    2c84:	cf 91       	pop	r28
    2c86:	1f 91       	pop	r17
    2c88:	08 95       	ret

00002c8a <InitADXL345DevAddress>:

bool InitADXL345DevAddress(bool IsAltAddressGnd)
{
	bool Status = FALSE;
	
    gADXL345DeviceAddress.Address = GET_DEVICE_ADDRESS(IsAltAddressGnd);
    2c8a:	88 23       	and	r24, r24
    2c8c:	11 f0       	breq	.+4      	; 0x2c92 <InitADXL345DevAddress+0x8>
    2c8e:	83 e5       	ldi	r24, 0x53	; 83
    2c90:	01 c0       	rjmp	.+2      	; 0x2c94 <InitADXL345DevAddress+0xa>
    2c92:	8d e1       	ldi	r24, 0x1D	; 29
    2c94:	28 2f       	mov	r18, r24
    2c96:	22 0f       	add	r18, r18
    2c98:	90 91 4f 16 	lds	r25, 0x164F
    2c9c:	91 70       	andi	r25, 0x01	; 1
    2c9e:	92 2b       	or	r25, r18
    2ca0:	90 93 4f 16 	sts	0x164F, r25
	
	SendTrace(INFO_LEVEL, "Device Address = 0x%x\r\n", gADXL345DeviceAddress.Address);
    2ca4:	1f 92       	push	r1
    2ca6:	8f 93       	push	r24
    2ca8:	8d eb       	ldi	r24, 0xBD	; 189
    2caa:	9d e0       	ldi	r25, 0x0D	; 13
    2cac:	9f 93       	push	r25
    2cae:	8f 93       	push	r24
    2cb0:	84 e0       	ldi	r24, 0x04	; 4
    2cb2:	8f 93       	push	r24
    2cb4:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
	
	//
	// Check Accelerometer Device ID
	//
	
	Status = CheckADXL345DeviceId();
    2cb8:	b1 df       	rcall	.-158    	; 0x2c1c <CheckADXL345DeviceId>
	
	if (!Status)
    2cba:	0f 90       	pop	r0
    2cbc:	0f 90       	pop	r0
    2cbe:	0f 90       	pop	r0
    2cc0:	0f 90       	pop	r0
    2cc2:	0f 90       	pop	r0
    2cc4:	88 23       	and	r24, r24
    2cc6:	19 f0       	breq	.+6      	; 0x2cce <InitADXL345DevAddress+0x44>
	{
		goto Exit;
	}
	
	gIsADXL345Initialized = TRUE;
    2cc8:	91 e0       	ldi	r25, 0x01	; 1
    2cca:	90 93 00 16 	sts	0x1600, r25
	
Exit:
	
    return Status;
}
    2cce:	08 95       	ret

00002cd0 <SetADXL345Register>:

	return Status;
}

bool SetADXL345Register(unsigned char RegisterAddress, PVOID RegisterValue, unsigned long Length)
{
    2cd0:	af 92       	push	r10
    2cd2:	bf 92       	push	r11
    2cd4:	cf 92       	push	r12
    2cd6:	df 92       	push	r13
    2cd8:	ef 92       	push	r14
    2cda:	ff 92       	push	r15
    2cdc:	0f 93       	push	r16
    2cde:	1f 93       	push	r17
    2ce0:	cf 93       	push	r28
    2ce2:	df 93       	push	r29
    2ce4:	18 2f       	mov	r17, r24
    2ce6:	5b 01       	movw	r10, r22
    2ce8:	69 01       	movw	r12, r18
    2cea:	7a 01       	movw	r14, r20
	bool Status = FALSE;
	
	PVOID WriteValue;
	
	WriteValue = malloc(Length + 1);
    2cec:	c9 01       	movw	r24, r18
    2cee:	01 96       	adiw	r24, 0x01	; 1
    2cf0:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <malloc>
    2cf4:	ec 01       	movw	r28, r24
	
	if (WriteValue == NULL)
    2cf6:	00 97       	sbiw	r24, 0x00	; 0
    2cf8:	09 f4       	brne	.+2      	; 0x2cfc <SetADXL345Register+0x2c>
    2cfa:	48 c0       	rjmp	.+144    	; 0x2d8c <SetADXL345Register+0xbc>
	{
		goto Exit;
	}
	
	*(unsigned char *)(WriteValue) = RegisterAddress;
    2cfc:	fc 01       	movw	r30, r24
    2cfe:	11 93       	st	Z+, r17
	
	memcpy(WriteValue + 1, RegisterValue, Length);
    2d00:	a6 01       	movw	r20, r12
    2d02:	b5 01       	movw	r22, r10
    2d04:	cf 01       	movw	r24, r30
    2d06:	0e 94 94 21 	call	0x4328	; 0x4328 <memcpy>
	
	Status = TwiTransmit(WriteValue, Length + 1, &gADXL345DeviceAddress, TRUE);
    2d0a:	01 e0       	ldi	r16, 0x01	; 1
    2d0c:	2f e4       	ldi	r18, 0x4F	; 79
    2d0e:	36 e1       	ldi	r19, 0x16	; 22
    2d10:	b7 01       	movw	r22, r14
    2d12:	a6 01       	movw	r20, r12
    2d14:	4f 5f       	subi	r20, 0xFF	; 255
    2d16:	5f 4f       	sbci	r21, 0xFF	; 255
    2d18:	6f 4f       	sbci	r22, 0xFF	; 255
    2d1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d1c:	ce 01       	movw	r24, r28
    2d1e:	9d db       	rcall	.-2246   	; 0x245a <TwiTransmit>
    2d20:	08 2f       	mov	r16, r24
	
	if (!Status)
    2d22:	81 11       	cpse	r24, r1
    2d24:	0b c0       	rjmp	.+22     	; 0x2d3c <SetADXL345Register+0x6c>
	{
		SendTrace(ERROR_LEVEL, "Failed to transmit Register Value. \r\n");
    2d26:	25 ed       	ldi	r18, 0xD5	; 213
    2d28:	3d e0       	ldi	r19, 0x0D	; 13
    2d2a:	3f 93       	push	r19
    2d2c:	2f 93       	push	r18
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	8f 93       	push	r24
    2d32:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    2d36:	0f 90       	pop	r0
    2d38:	0f 90       	pop	r0
    2d3a:	0f 90       	pop	r0
	}
	
	free(WriteValue);
    2d3c:	ce 01       	movw	r24, r28
    2d3e:	0e 94 03 21 	call	0x4206	; 0x4206 <free>
	
	SendTrace(INFO_LEVEL, "Written Value 0x%x\t", *(unsigned char *)RegisterValue);
    2d42:	f5 01       	movw	r30, r10
    2d44:	80 81       	ld	r24, Z
    2d46:	1f 92       	push	r1
    2d48:	8f 93       	push	r24
    2d4a:	2b ef       	ldi	r18, 0xFB	; 251
    2d4c:	3d e0       	ldi	r19, 0x0D	; 13
    2d4e:	3f 93       	push	r19
    2d50:	2f 93       	push	r18
    2d52:	c4 e0       	ldi	r28, 0x04	; 4
    2d54:	cf 93       	push	r28
    2d56:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
	
	ReadADXL345Register(RegisterAddress, RegisterValue, Length);
    2d5a:	a7 01       	movw	r20, r14
    2d5c:	96 01       	movw	r18, r12
    2d5e:	b5 01       	movw	r22, r10
    2d60:	81 2f       	mov	r24, r17
    2d62:	22 dd       	rcall	.-1468   	; 0x27a8 <ReadADXL345Register>
	
	SendTrace(INFO_LEVEL, "Read Value 0x%x\r\n", *(unsigned char *)RegisterValue);
    2d64:	f5 01       	movw	r30, r10
    2d66:	80 81       	ld	r24, Z
    2d68:	1f 92       	push	r1
    2d6a:	8f 93       	push	r24
    2d6c:	2f e0       	ldi	r18, 0x0F	; 15
    2d6e:	3e e0       	ldi	r19, 0x0E	; 14
    2d70:	3f 93       	push	r19
    2d72:	2f 93       	push	r18
    2d74:	cf 93       	push	r28
    2d76:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    2d7a:	8d b7       	in	r24, 0x3d	; 61
    2d7c:	9e b7       	in	r25, 0x3e	; 62
    2d7e:	0a 96       	adiw	r24, 0x0a	; 10
    2d80:	0f b6       	in	r0, 0x3f	; 63
    2d82:	f8 94       	cli
    2d84:	9e bf       	out	0x3e, r25	; 62
    2d86:	0f be       	out	0x3f, r0	; 63
    2d88:	8d bf       	out	0x3d, r24	; 61
    2d8a:	01 c0       	rjmp	.+2      	; 0x2d8e <SetADXL345Register+0xbe>
	return Status;
}

bool SetADXL345Register(unsigned char RegisterAddress, PVOID RegisterValue, unsigned long Length)
{
	bool Status = FALSE;
    2d8c:	00 e0       	ldi	r16, 0x00	; 0
	SendTrace(INFO_LEVEL, "Read Value 0x%x\r\n", *(unsigned char *)RegisterValue);
	
Exit:

	return Status;
}
    2d8e:	80 2f       	mov	r24, r16
    2d90:	df 91       	pop	r29
    2d92:	cf 91       	pop	r28
    2d94:	1f 91       	pop	r17
    2d96:	0f 91       	pop	r16
    2d98:	ff 90       	pop	r15
    2d9a:	ef 90       	pop	r14
    2d9c:	df 90       	pop	r13
    2d9e:	cf 90       	pop	r12
    2da0:	bf 90       	pop	r11
    2da2:	af 90       	pop	r10
    2da4:	08 95       	ret

00002da6 <EnableDisableADXL345StandbyMode>:
	
    return Status;
}

bool EnableDisableADXL345StandbyMode(bool Enable)
{
    2da6:	0f 93       	push	r16
    2da8:	1f 93       	push	r17
    2daa:	cf 93       	push	r28
    2dac:	df 93       	push	r29
    2dae:	1f 92       	push	r1
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
    2db4:	08 2f       	mov	r16, r24
	bool Status = FALSE;
	
	POWER_CTL PowerCtl;
	
	if (!gIsADXL345Initialized)
    2db6:	90 91 00 16 	lds	r25, 0x1600
    2dba:	91 11       	cpse	r25, r1
    2dbc:	0d c0       	rjmp	.+26     	; 0x2dd8 <EnableDisableADXL345StandbyMode+0x32>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
    2dbe:	83 e0       	ldi	r24, 0x03	; 3
    2dc0:	9c e0       	ldi	r25, 0x0C	; 12
    2dc2:	9f 93       	push	r25
    2dc4:	8f 93       	push	r24
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	8f 93       	push	r24
    2dca:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    2dce:	0f 90       	pop	r0
    2dd0:	0f 90       	pop	r0
    2dd2:	0f 90       	pop	r0
    return Status;
}

bool EnableDisableADXL345StandbyMode(bool Enable)
{
	bool Status = FALSE;
    2dd4:	10 e0       	ldi	r17, 0x00	; 0
	
	if (!gIsADXL345Initialized)
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
		
		goto Exit;
    2dd6:	39 c0       	rjmp	.+114    	; 0x2e4a <EnableDisableADXL345StandbyMode+0xa4>
	
	//
	// Read Power Ctl Register
	//
	
	Status = ReadADXL345Register(ADR_POWER_CTL, &PowerCtl, sizeof(POWER_CTL));
    2dd8:	21 e0       	ldi	r18, 0x01	; 1
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	40 e0       	ldi	r20, 0x00	; 0
    2dde:	50 e0       	ldi	r21, 0x00	; 0
    2de0:	be 01       	movw	r22, r28
    2de2:	6f 5f       	subi	r22, 0xFF	; 255
    2de4:	7f 4f       	sbci	r23, 0xFF	; 255
    2de6:	8d e2       	ldi	r24, 0x2D	; 45
    2de8:	df dc       	rcall	.-1602   	; 0x27a8 <ReadADXL345Register>
    2dea:	18 2f       	mov	r17, r24
	
	if (!Status)
    2dec:	81 11       	cpse	r24, r1
    2dee:	0c c0       	rjmp	.+24     	; 0x2e08 <EnableDisableADXL345StandbyMode+0x62>
	{
		SendTrace(ERROR_LEVEL, "Failed to read Power CTL register. \r\n");
    2df0:	21 e2       	ldi	r18, 0x21	; 33
    2df2:	3e e0       	ldi	r19, 0x0E	; 14
    2df4:	3f 93       	push	r19
    2df6:	2f 93       	push	r18
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	8f 93       	push	r24
    2dfc:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    2e00:	0f 90       	pop	r0
    2e02:	0f 90       	pop	r0
    2e04:	0f 90       	pop	r0
    2e06:	21 c0       	rjmp	.+66     	; 0x2e4a <EnableDisableADXL345StandbyMode+0xa4>
	
	//
	// Now place the accelerometer in standby mode
	//
	
	PowerCtl.Measure = (Enable ? 0 : 1);
    2e08:	91 e0       	ldi	r25, 0x01	; 1
    2e0a:	01 11       	cpse	r16, r1
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	89 81       	ldd	r24, Y+1	; 0x01
    2e10:	90 fb       	bst	r25, 0
    2e12:	83 f9       	bld	r24, 3
    2e14:	89 83       	std	Y+1, r24	; 0x01
	
	Status = SetADXL345Register(ADR_POWER_CTL, &PowerCtl, sizeof(POWER_CTL));
    2e16:	21 e0       	ldi	r18, 0x01	; 1
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	40 e0       	ldi	r20, 0x00	; 0
    2e1c:	50 e0       	ldi	r21, 0x00	; 0
    2e1e:	be 01       	movw	r22, r28
    2e20:	6f 5f       	subi	r22, 0xFF	; 255
    2e22:	7f 4f       	sbci	r23, 0xFF	; 255
    2e24:	8d e2       	ldi	r24, 0x2D	; 45
    2e26:	54 df       	rcall	.-344    	; 0x2cd0 <SetADXL345Register>
    2e28:	18 2f       	mov	r17, r24
	
	if (!Status)
    2e2a:	81 11       	cpse	r24, r1
    2e2c:	0c c0       	rjmp	.+24     	; 0x2e46 <EnableDisableADXL345StandbyMode+0xa0>
	{
		SendTrace (ERROR_LEVEL, "Failed to place Accelerometer in standby mode. \r\n");
    2e2e:	27 e4       	ldi	r18, 0x47	; 71
    2e30:	3e e0       	ldi	r19, 0x0E	; 14
    2e32:	3f 93       	push	r19
    2e34:	2f 93       	push	r18
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	8f 93       	push	r24
    2e3a:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    2e3e:	0f 90       	pop	r0
    2e40:	0f 90       	pop	r0
    2e42:	0f 90       	pop	r0
    2e44:	02 c0       	rjmp	.+4      	; 0x2e4a <EnableDisableADXL345StandbyMode+0xa4>
	}
	
	gIsADXL345InStandby = Enable;
    2e46:	00 93 06 01 	sts	0x0106, r16
	
Exit:

	return Status;
}
    2e4a:	81 2f       	mov	r24, r17
    2e4c:	0f 90       	pop	r0
    2e4e:	df 91       	pop	r29
    2e50:	cf 91       	pop	r28
    2e52:	1f 91       	pop	r17
    2e54:	0f 91       	pop	r16
    2e56:	08 95       	ret

00002e58 <ProgramADXL345PowerCtl>:

bool ProgramADXL345PowerCtl(POWER_MODE PowerMode, WAKEUP_FREQ WakeupFreq)
{
    2e58:	ff 92       	push	r15
    2e5a:	0f 93       	push	r16
    2e5c:	1f 93       	push	r17
    2e5e:	cf 93       	push	r28
    2e60:	df 93       	push	r29
    2e62:	00 d0       	rcall	.+0      	; 0x2e64 <ProgramADXL345PowerCtl+0xc>
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62
    2e68:	08 2f       	mov	r16, r24
    2e6a:	f6 2e       	mov	r15, r22
	
	BW_RATE BwRate;
	
	POWER_CTL PowerCtl;
	
	if (!gIsADXL345Initialized || !gIsADXL345InStandby)
    2e6c:	80 91 00 16 	lds	r24, 0x1600
    2e70:	88 23       	and	r24, r24
    2e72:	21 f0       	breq	.+8      	; 0x2e7c <ProgramADXL345PowerCtl+0x24>
    2e74:	80 91 06 01 	lds	r24, 0x0106
    2e78:	81 11       	cpse	r24, r1
    2e7a:	0d c0       	rjmp	.+26     	; 0x2e96 <ProgramADXL345PowerCtl+0x3e>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized or it is not in standby mode. \r\n");
    2e7c:	89 e7       	ldi	r24, 0x79	; 121
    2e7e:	9e e0       	ldi	r25, 0x0E	; 14
    2e80:	9f 93       	push	r25
    2e82:	8f 93       	push	r24
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	8f 93       	push	r24
    2e88:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    2e8c:	0f 90       	pop	r0
    2e8e:	0f 90       	pop	r0
    2e90:	0f 90       	pop	r0
	return Status;
}

bool ProgramADXL345PowerCtl(POWER_MODE PowerMode, WAKEUP_FREQ WakeupFreq)
{
	bool Status = FALSE;
    2e92:	10 e0       	ldi	r17, 0x00	; 0
	
	if (!gIsADXL345Initialized || !gIsADXL345InStandby)
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized or it is not in standby mode. \r\n");
		
		goto Exit;
    2e94:	90 c0       	rjmp	.+288    	; 0x2fb6 <ProgramADXL345PowerCtl+0x15e>
	}
	
	if (PowerMode == FULL_POWER && WakeupFreq != NO_WAKEUP)
    2e96:	02 30       	cpi	r16, 0x02	; 2
    2e98:	81 f4       	brne	.+32     	; 0x2eba <ProgramADXL345PowerCtl+0x62>
    2e9a:	84 e0       	ldi	r24, 0x04	; 4
    2e9c:	68 17       	cp	r22, r24
    2e9e:	69 f0       	breq	.+26     	; 0x2eba <ProgramADXL345PowerCtl+0x62>
	{
		SendTrace(ERROR_LEVEL, "Invalid Wakeup Frequency Selected.\r\n");
    2ea0:	88 eb       	ldi	r24, 0xB8	; 184
    2ea2:	9e e0       	ldi	r25, 0x0E	; 14
    2ea4:	9f 93       	push	r25
    2ea6:	8f 93       	push	r24
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	8f 93       	push	r24
    2eac:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    2eb0:	0f 90       	pop	r0
    2eb2:	0f 90       	pop	r0
    2eb4:	0f 90       	pop	r0
	return Status;
}

bool ProgramADXL345PowerCtl(POWER_MODE PowerMode, WAKEUP_FREQ WakeupFreq)
{
	bool Status = FALSE;
    2eb6:	10 e0       	ldi	r17, 0x00	; 0
	
	if (PowerMode == FULL_POWER && WakeupFreq != NO_WAKEUP)
	{
		SendTrace(ERROR_LEVEL, "Invalid Wakeup Frequency Selected.\r\n");
		
		goto Exit;
    2eb8:	7e c0       	rjmp	.+252    	; 0x2fb6 <ProgramADXL345PowerCtl+0x15e>
	
	//
	// Read BW Rate Register
	//
	
	Status = ReadADXL345Register(ADR_BW_RATE, &BwRate, sizeof(BW_RATE));
    2eba:	21 e0       	ldi	r18, 0x01	; 1
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	40 e0       	ldi	r20, 0x00	; 0
    2ec0:	50 e0       	ldi	r21, 0x00	; 0
    2ec2:	be 01       	movw	r22, r28
    2ec4:	6f 5f       	subi	r22, 0xFF	; 255
    2ec6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec8:	8c e2       	ldi	r24, 0x2C	; 44
    2eca:	6e dc       	rcall	.-1828   	; 0x27a8 <ReadADXL345Register>
    2ecc:	18 2f       	mov	r17, r24
	
	if (!Status)
    2ece:	81 11       	cpse	r24, r1
    2ed0:	0c c0       	rjmp	.+24     	; 0x2eea <ProgramADXL345PowerCtl+0x92>
	{
		SendTrace(ERROR_LEVEL, "Failed to read BW RATE register. \r\n");
    2ed2:	2d ed       	ldi	r18, 0xDD	; 221
    2ed4:	3e e0       	ldi	r19, 0x0E	; 14
    2ed6:	3f 93       	push	r19
    2ed8:	2f 93       	push	r18
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	8f 93       	push	r24
    2ede:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    2ee2:	0f 90       	pop	r0
    2ee4:	0f 90       	pop	r0
    2ee6:	0f 90       	pop	r0
    2ee8:	66 c0       	rjmp	.+204    	; 0x2fb6 <ProgramADXL345PowerCtl+0x15e>
	
	//
	// Program Power Ctl
	//
	
	PowerCtl.AsUINT8 = 0;
    2eea:	1a 82       	std	Y+2, r1	; 0x02
	
	switch (PowerMode)
    2eec:	01 30       	cpi	r16, 0x01	; 1
    2eee:	11 f1       	breq	.+68     	; 0x2f34 <ProgramADXL345PowerCtl+0xdc>
    2ef0:	18 f0       	brcs	.+6      	; 0x2ef8 <ProgramADXL345PowerCtl+0xa0>
    2ef2:	02 30       	cpi	r16, 0x02	; 2
    2ef4:	59 f1       	breq	.+86     	; 0x2f4c <ProgramADXL345PowerCtl+0xf4>
    2ef6:	30 c0       	rjmp	.+96     	; 0x2f58 <ProgramADXL345PowerCtl+0x100>
	{
		case LOW_POWER:
		{
			if (BwRate.Rate < TWELVE_POINT_FIVE_HZ || BwRate.Rate > FOUR_HUNDRED_HZ)
    2ef8:	89 81       	ldd	r24, Y+1	; 0x01
    2efa:	87 5f       	subi	r24, 0xF7	; 247
    2efc:	8f 70       	andi	r24, 0x0F	; 15
    2efe:	86 30       	cpi	r24, 0x06	; 6
    2f00:	68 f0       	brcs	.+26     	; 0x2f1c <ProgramADXL345PowerCtl+0xc4>
			{
				SendTrace(ERROR_LEVEL, "Invalid Data Rate for Low Power Mode. \r\n");
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	9f e0       	ldi	r25, 0x0F	; 15
    2f06:	9f 93       	push	r25
    2f08:	8f 93       	push	r24
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	8f 93       	push	r24
    2f0e:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
				
				Status = FALSE;
				
				goto Exit;
    2f12:	0f 90       	pop	r0
    2f14:	0f 90       	pop	r0
    2f16:	0f 90       	pop	r0
		{
			if (BwRate.Rate < TWELVE_POINT_FIVE_HZ || BwRate.Rate > FOUR_HUNDRED_HZ)
			{
				SendTrace(ERROR_LEVEL, "Invalid Data Rate for Low Power Mode. \r\n");
				
				Status = FALSE;
    2f18:	10 e0       	ldi	r17, 0x00	; 0
				
				goto Exit;
    2f1a:	4d c0       	rjmp	.+154    	; 0x2fb6 <ProgramADXL345PowerCtl+0x15e>
			}
			
			BwRate.LowPwr = 1;
    2f1c:	89 81       	ldd	r24, Y+1	; 0x01
    2f1e:	80 61       	ori	r24, 0x10	; 16
    2f20:	89 83       	std	Y+1, r24	; 0x01
			
			PowerCtl.AutoSleep = 1;
    2f22:	9a 81       	ldd	r25, Y+2	; 0x02
			
			PowerCtl.Link = 1;
			
			PowerCtl.Measure = 1;
    2f24:	94 7c       	andi	r25, 0xC4	; 196
			
			PowerCtl.Wakeup = WakeupFreq;
    2f26:	8f 2d       	mov	r24, r15
    2f28:	83 70       	andi	r24, 0x03	; 3
    2f2a:	98 63       	ori	r25, 0x38	; 56
    2f2c:	f9 2e       	mov	r15, r25
    2f2e:	f8 2a       	or	r15, r24
    2f30:	fa 82       	std	Y+2, r15	; 0x02
			
			break;
    2f32:	12 c0       	rjmp	.+36     	; 0x2f58 <ProgramADXL345PowerCtl+0x100>
		}
		case AUTO_SLEEP:
		{
			BwRate.LowPwr = 0;
    2f34:	89 81       	ldd	r24, Y+1	; 0x01
    2f36:	8f 7e       	andi	r24, 0xEF	; 239
    2f38:	89 83       	std	Y+1, r24	; 0x01
			
			PowerCtl.AutoSleep = 1;
    2f3a:	9a 81       	ldd	r25, Y+2	; 0x02
			
			PowerCtl.Link = 1;
			
			PowerCtl.Measure = 1;
    2f3c:	94 7c       	andi	r25, 0xC4	; 196
			
			PowerCtl.Wakeup = WakeupFreq;
    2f3e:	8f 2d       	mov	r24, r15
    2f40:	83 70       	andi	r24, 0x03	; 3
    2f42:	98 63       	ori	r25, 0x38	; 56
    2f44:	f9 2e       	mov	r15, r25
    2f46:	f8 2a       	or	r15, r24
    2f48:	fa 82       	std	Y+2, r15	; 0x02
			
			break;
    2f4a:	06 c0       	rjmp	.+12     	; 0x2f58 <ProgramADXL345PowerCtl+0x100>
		}
		case FULL_POWER:
		{
			BwRate.LowPwr = 0;
    2f4c:	89 81       	ldd	r24, Y+1	; 0x01
    2f4e:	8f 7e       	andi	r24, 0xEF	; 239
    2f50:	89 83       	std	Y+1, r24	; 0x01
			
			PowerCtl.Measure = 1;
    2f52:	8a 81       	ldd	r24, Y+2	; 0x02
    2f54:	88 60       	ori	r24, 0x08	; 8
    2f56:	8a 83       	std	Y+2, r24	; 0x02
			
			break;
		}
	};
	
	Status = SetADXL345Register(ADR_BW_RATE, &BwRate, sizeof(BW_RATE));
    2f58:	21 e0       	ldi	r18, 0x01	; 1
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	40 e0       	ldi	r20, 0x00	; 0
    2f5e:	50 e0       	ldi	r21, 0x00	; 0
    2f60:	be 01       	movw	r22, r28
    2f62:	6f 5f       	subi	r22, 0xFF	; 255
    2f64:	7f 4f       	sbci	r23, 0xFF	; 255
    2f66:	8c e2       	ldi	r24, 0x2C	; 44
    2f68:	b3 de       	rcall	.-666    	; 0x2cd0 <SetADXL345Register>
    2f6a:	18 2f       	mov	r17, r24
	
	if (!Status)
    2f6c:	81 11       	cpse	r24, r1
    2f6e:	0c c0       	rjmp	.+24     	; 0x2f88 <ProgramADXL345PowerCtl+0x130>
	{
		SendTrace (ERROR_LEVEL, "Failed to program BW RATE Register. \r\n");
    2f70:	2a e2       	ldi	r18, 0x2A	; 42
    2f72:	3f e0       	ldi	r19, 0x0F	; 15
    2f74:	3f 93       	push	r19
    2f76:	2f 93       	push	r18
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	8f 93       	push	r24
    2f7c:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    2f80:	0f 90       	pop	r0
    2f82:	0f 90       	pop	r0
    2f84:	0f 90       	pop	r0
    2f86:	17 c0       	rjmp	.+46     	; 0x2fb6 <ProgramADXL345PowerCtl+0x15e>
	}
	
	Status = SetADXL345Register(ADR_POWER_CTL, &PowerCtl, sizeof(POWER_CTL));
    2f88:	21 e0       	ldi	r18, 0x01	; 1
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	40 e0       	ldi	r20, 0x00	; 0
    2f8e:	50 e0       	ldi	r21, 0x00	; 0
    2f90:	be 01       	movw	r22, r28
    2f92:	6e 5f       	subi	r22, 0xFE	; 254
    2f94:	7f 4f       	sbci	r23, 0xFF	; 255
    2f96:	8d e2       	ldi	r24, 0x2D	; 45
    2f98:	9b de       	rcall	.-714    	; 0x2cd0 <SetADXL345Register>
    2f9a:	18 2f       	mov	r17, r24
	
	if (!Status)
    2f9c:	81 11       	cpse	r24, r1
    2f9e:	0b c0       	rjmp	.+22     	; 0x2fb6 <ProgramADXL345PowerCtl+0x15e>
	{
		SendTrace (ERROR_LEVEL, "Failed to program Power CTL Register. \r\n");
    2fa0:	21 e5       	ldi	r18, 0x51	; 81
    2fa2:	3f e0       	ldi	r19, 0x0F	; 15
    2fa4:	3f 93       	push	r19
    2fa6:	2f 93       	push	r18
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	8f 93       	push	r24
    2fac:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    2fb0:	0f 90       	pop	r0
    2fb2:	0f 90       	pop	r0
    2fb4:	0f 90       	pop	r0
	}
	
Exit:

	return Status;
}
    2fb6:	81 2f       	mov	r24, r17
    2fb8:	0f 90       	pop	r0
    2fba:	0f 90       	pop	r0
    2fbc:	df 91       	pop	r29
    2fbe:	cf 91       	pop	r28
    2fc0:	1f 91       	pop	r17
    2fc2:	0f 91       	pop	r16
    2fc4:	ff 90       	pop	r15
    2fc6:	08 95       	ret

00002fc8 <ProgramADXL345Interrupts>:

bool ProgramADXL345Interrupts(PINT_ENABLE_MAP_SOURCE IntMap, PINT_ENABLE_MAP_SOURCE IntEnable)
{
    2fc8:	1f 93       	push	r17
    2fca:	cf 93       	push	r28
    2fcc:	df 93       	push	r29
    2fce:	eb 01       	movw	r28, r22
	bool Status = FALSE;
	
	if (!gIsADXL345Initialized)
    2fd0:	20 91 00 16 	lds	r18, 0x1600
    2fd4:	21 11       	cpse	r18, r1
    2fd6:	0d c0       	rjmp	.+26     	; 0x2ff2 <ProgramADXL345Interrupts+0x2a>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
    2fd8:	83 e0       	ldi	r24, 0x03	; 3
    2fda:	9c e0       	ldi	r25, 0x0C	; 12
    2fdc:	9f 93       	push	r25
    2fde:	8f 93       	push	r24
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	8f 93       	push	r24
    2fe4:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    2fe8:	0f 90       	pop	r0
    2fea:	0f 90       	pop	r0
    2fec:	0f 90       	pop	r0
	return Status;
}

bool ProgramADXL345Interrupts(PINT_ENABLE_MAP_SOURCE IntMap, PINT_ENABLE_MAP_SOURCE IntEnable)
{
	bool Status = FALSE;
    2fee:	10 e0       	ldi	r17, 0x00	; 0
	
	if (!gIsADXL345Initialized)
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
		
		goto Exit;
    2ff0:	2b c0       	rjmp	.+86     	; 0x3048 <ProgramADXL345Interrupts+0x80>
	
	//
	// Program Interrupts
	//
	
	Status = SetADXL345Register(ADR_INT_MAP, IntMap, sizeof(INT_ENABLE_MAP_SOURCE));
    2ff2:	21 e0       	ldi	r18, 0x01	; 1
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	40 e0       	ldi	r20, 0x00	; 0
    2ff8:	50 e0       	ldi	r21, 0x00	; 0
    2ffa:	bc 01       	movw	r22, r24
    2ffc:	8f e2       	ldi	r24, 0x2F	; 47
    2ffe:	68 de       	rcall	.-816    	; 0x2cd0 <SetADXL345Register>
    3000:	18 2f       	mov	r17, r24
	
	if (!Status)
    3002:	81 11       	cpse	r24, r1
    3004:	0c c0       	rjmp	.+24     	; 0x301e <ProgramADXL345Interrupts+0x56>
	{
		SendTrace (ERROR_LEVEL, "Failed to program INT MAP Register. \r\n");
    3006:	2a e7       	ldi	r18, 0x7A	; 122
    3008:	3f e0       	ldi	r19, 0x0F	; 15
    300a:	3f 93       	push	r19
    300c:	2f 93       	push	r18
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	8f 93       	push	r24
    3012:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    3016:	0f 90       	pop	r0
    3018:	0f 90       	pop	r0
    301a:	0f 90       	pop	r0
    301c:	15 c0       	rjmp	.+42     	; 0x3048 <ProgramADXL345Interrupts+0x80>
	}
	
	Status = SetADXL345Register(ADR_INT_ENABLE, IntEnable, sizeof(INT_ENABLE_MAP_SOURCE));
    301e:	21 e0       	ldi	r18, 0x01	; 1
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	40 e0       	ldi	r20, 0x00	; 0
    3024:	50 e0       	ldi	r21, 0x00	; 0
    3026:	be 01       	movw	r22, r28
    3028:	8e e2       	ldi	r24, 0x2E	; 46
    302a:	52 de       	rcall	.-860    	; 0x2cd0 <SetADXL345Register>
    302c:	18 2f       	mov	r17, r24
	
	if (!Status)
    302e:	81 11       	cpse	r24, r1
    3030:	0b c0       	rjmp	.+22     	; 0x3048 <ProgramADXL345Interrupts+0x80>
	{
		SendTrace (ERROR_LEVEL, "Failed to program INT ENABLE Register. \r\n");
    3032:	21 ea       	ldi	r18, 0xA1	; 161
    3034:	3f e0       	ldi	r19, 0x0F	; 15
    3036:	3f 93       	push	r19
    3038:	2f 93       	push	r18
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	8f 93       	push	r24
    303e:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	0f 90       	pop	r0
	}
	
Exit:

	return Status;
}
    3048:	81 2f       	mov	r24, r17
    304a:	df 91       	pop	r29
    304c:	cf 91       	pop	r28
    304e:	1f 91       	pop	r17
    3050:	08 95       	ret

00003052 <ProgramADXL345FifoControl>:

bool ProgramADXL345FifoControl(PFIFO_CTL FifoCtl)
{
    3052:	cf 93       	push	r28
	bool Status = FALSE;
	
	if (!gIsADXL345Initialized)
    3054:	20 91 00 16 	lds	r18, 0x1600
    3058:	21 11       	cpse	r18, r1
    305a:	0d c0       	rjmp	.+26     	; 0x3076 <ProgramADXL345FifoControl+0x24>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
    305c:	83 e0       	ldi	r24, 0x03	; 3
    305e:	9c e0       	ldi	r25, 0x0C	; 12
    3060:	9f 93       	push	r25
    3062:	8f 93       	push	r24
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	8f 93       	push	r24
    3068:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    306c:	0f 90       	pop	r0
    306e:	0f 90       	pop	r0
    3070:	0f 90       	pop	r0
	return Status;
}

bool ProgramADXL345FifoControl(PFIFO_CTL FifoCtl)
{
	bool Status = FALSE;
    3072:	c0 e0       	ldi	r28, 0x00	; 0
	
	if (!gIsADXL345Initialized)
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
		
		goto Exit;
    3074:	15 c0       	rjmp	.+42     	; 0x30a0 <ProgramADXL345FifoControl+0x4e>
	
	//
	// Program FIFO Control Register
	//
	
	Status = SetADXL345Register(ADR_FIFO_CTL, FifoCtl, sizeof(FIFO_CTL));
    3076:	21 e0       	ldi	r18, 0x01	; 1
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	40 e0       	ldi	r20, 0x00	; 0
    307c:	50 e0       	ldi	r21, 0x00	; 0
    307e:	bc 01       	movw	r22, r24
    3080:	88 e3       	ldi	r24, 0x38	; 56
    3082:	26 de       	rcall	.-948    	; 0x2cd0 <SetADXL345Register>
    3084:	c8 2f       	mov	r28, r24
	
	if (!Status)
    3086:	81 11       	cpse	r24, r1
    3088:	0b c0       	rjmp	.+22     	; 0x30a0 <ProgramADXL345FifoControl+0x4e>
	{
		SendTrace (ERROR_LEVEL, "Failed to program FIFO CTL Register. \r\n");
    308a:	2b ec       	ldi	r18, 0xCB	; 203
    308c:	3f e0       	ldi	r19, 0x0F	; 15
    308e:	3f 93       	push	r19
    3090:	2f 93       	push	r18
    3092:	81 e0       	ldi	r24, 0x01	; 1
    3094:	8f 93       	push	r24
    3096:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    309a:	0f 90       	pop	r0
    309c:	0f 90       	pop	r0
    309e:	0f 90       	pop	r0
	}
	
Exit:
	
	return Status;
}
    30a0:	8c 2f       	mov	r24, r28
    30a2:	cf 91       	pop	r28
    30a4:	08 95       	ret

000030a6 <ProgramADXL345DataFormat>:

bool ProgramADXL345DataFormat(DATA_RANGE DataRange, bool IntInvert, PDATA_OFFSET DataOffset, DATA_RATE DataRate)
{
    30a6:	ef 92       	push	r14
    30a8:	ff 92       	push	r15
    30aa:	0f 93       	push	r16
    30ac:	1f 93       	push	r17
    30ae:	cf 93       	push	r28
    30b0:	df 93       	push	r29
    30b2:	00 d0       	rcall	.+0      	; 0x30b4 <ProgramADXL345DataFormat+0xe>
    30b4:	cd b7       	in	r28, 0x3d	; 61
    30b6:	de b7       	in	r29, 0x3e	; 62
    30b8:	8a 01       	movw	r16, r20
    30ba:	e2 2e       	mov	r14, r18
	
	DATA_FORMAT DataFormat;
	
	BW_RATE BwRate;
	
	if (!gIsADXL345Initialized)
    30bc:	90 91 00 16 	lds	r25, 0x1600
    30c0:	91 11       	cpse	r25, r1
    30c2:	0d c0       	rjmp	.+26     	; 0x30de <ProgramADXL345DataFormat+0x38>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
    30c4:	83 e0       	ldi	r24, 0x03	; 3
    30c6:	9c e0       	ldi	r25, 0x0C	; 12
    30c8:	9f 93       	push	r25
    30ca:	8f 93       	push	r24
    30cc:	81 e0       	ldi	r24, 0x01	; 1
    30ce:	8f 93       	push	r24
    30d0:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    30d4:	0f 90       	pop	r0
    30d6:	0f 90       	pop	r0
    30d8:	0f 90       	pop	r0
}

bool ProgramADXL345DataFormat(DATA_RANGE DataRange, bool IntInvert, PDATA_OFFSET DataOffset, DATA_RATE DataRate)
{
	
	bool Status = FALSE;
    30da:	f1 2c       	mov	r15, r1
	
	if (!gIsADXL345Initialized)
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
		
		goto Exit;
    30dc:	9d c0       	rjmp	.+314    	; 0x3218 <ProgramADXL345DataFormat+0x172>
	
	//
	// Set Data Format
	//
	
	DataFormat.FullRes = 1;
    30de:	99 81       	ldd	r25, Y+1	; 0x01
	
	DataFormat.IntInvert = IntInvert;
    30e0:	98 60       	ori	r25, 0x08	; 8
    30e2:	60 fb       	bst	r22, 0
    30e4:	95 f9       	bld	r25, 5
	
	DataFormat.Justify = 0;
	
	DataFormat.Range = DataRange;
    30e6:	83 70       	andi	r24, 0x03	; 3
	
	DataFormat.Rsvd = 0;
	
	DataFormat.SelfTest = 0;
    30e8:	98 76       	andi	r25, 0x68	; 104
	
	DataFormat.SPI = 0;
    30ea:	89 2b       	or	r24, r25
    30ec:	8f 7b       	andi	r24, 0xBF	; 191
    30ee:	89 83       	std	Y+1, r24	; 0x01
	
	Status = SetADXL345Register(ADR_DATA_FORMAT, &DataFormat, sizeof(DATA_FORMAT));
    30f0:	21 e0       	ldi	r18, 0x01	; 1
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	40 e0       	ldi	r20, 0x00	; 0
    30f6:	50 e0       	ldi	r21, 0x00	; 0
    30f8:	be 01       	movw	r22, r28
    30fa:	6f 5f       	subi	r22, 0xFF	; 255
    30fc:	7f 4f       	sbci	r23, 0xFF	; 255
    30fe:	81 e3       	ldi	r24, 0x31	; 49
    3100:	e7 dd       	rcall	.-1074   	; 0x2cd0 <SetADXL345Register>
    3102:	f8 2e       	mov	r15, r24
	
	if (!Status)
    3104:	81 11       	cpse	r24, r1
    3106:	0c c0       	rjmp	.+24     	; 0x3120 <ProgramADXL345DataFormat+0x7a>
	{
		SendTrace (ERROR_LEVEL, "Failed to program DATA FORMAT Register. \r\n");
    3108:	23 ef       	ldi	r18, 0xF3	; 243
    310a:	3f e0       	ldi	r19, 0x0F	; 15
    310c:	3f 93       	push	r19
    310e:	2f 93       	push	r18
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	8f 93       	push	r24
    3114:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    3118:	0f 90       	pop	r0
    311a:	0f 90       	pop	r0
    311c:	0f 90       	pop	r0
    311e:	7c c0       	rjmp	.+248    	; 0x3218 <ProgramADXL345DataFormat+0x172>
	
	//
	// Read Data Rate Register
	//
	
	Status = ReadADXL345Register(ADR_BW_RATE, &BwRate, sizeof(BW_RATE));
    3120:	21 e0       	ldi	r18, 0x01	; 1
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	40 e0       	ldi	r20, 0x00	; 0
    3126:	50 e0       	ldi	r21, 0x00	; 0
    3128:	be 01       	movw	r22, r28
    312a:	6e 5f       	subi	r22, 0xFE	; 254
    312c:	7f 4f       	sbci	r23, 0xFF	; 255
    312e:	8c e2       	ldi	r24, 0x2C	; 44
    3130:	3b db       	rcall	.-2442   	; 0x27a8 <ReadADXL345Register>
    3132:	f8 2e       	mov	r15, r24
	
	if (!Status)
    3134:	81 11       	cpse	r24, r1
    3136:	0c c0       	rjmp	.+24     	; 0x3150 <ProgramADXL345DataFormat+0xaa>
	{
		SendTrace(ERROR_LEVEL, "Failed to read BW RATE register. \r\n");
    3138:	2d ed       	ldi	r18, 0xDD	; 221
    313a:	3e e0       	ldi	r19, 0x0E	; 14
    313c:	3f 93       	push	r19
    313e:	2f 93       	push	r18
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	8f 93       	push	r24
    3144:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    3148:	0f 90       	pop	r0
    314a:	0f 90       	pop	r0
    314c:	0f 90       	pop	r0
    314e:	64 c0       	rjmp	.+200    	; 0x3218 <ProgramADXL345DataFormat+0x172>
	}
	
	BwRate.Rate = DataRate;
    3150:	8e 2d       	mov	r24, r14
    3152:	8f 70       	andi	r24, 0x0F	; 15
    3154:	9a 81       	ldd	r25, Y+2	; 0x02
    3156:	90 7f       	andi	r25, 0xF0	; 240
    3158:	e9 2e       	mov	r14, r25
    315a:	e8 2a       	or	r14, r24
    315c:	ea 82       	std	Y+2, r14	; 0x02
	
	//
	// Program new data rate
	//
	
	Status = SetADXL345Register(ADR_BW_RATE, &BwRate, sizeof(BW_RATE));
    315e:	21 e0       	ldi	r18, 0x01	; 1
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	40 e0       	ldi	r20, 0x00	; 0
    3164:	50 e0       	ldi	r21, 0x00	; 0
    3166:	be 01       	movw	r22, r28
    3168:	6e 5f       	subi	r22, 0xFE	; 254
    316a:	7f 4f       	sbci	r23, 0xFF	; 255
    316c:	8c e2       	ldi	r24, 0x2C	; 44
    316e:	b0 dd       	rcall	.-1184   	; 0x2cd0 <SetADXL345Register>
    3170:	f8 2e       	mov	r15, r24
	
	if(!Status)
    3172:	81 11       	cpse	r24, r1
    3174:	0c c0       	rjmp	.+24     	; 0x318e <ProgramADXL345DataFormat+0xe8>
	{
		SendTrace(ERROR_LEVEL, "Failed to set BW RATE register. \r\n");
    3176:	2e e1       	ldi	r18, 0x1E	; 30
    3178:	30 e1       	ldi	r19, 0x10	; 16
    317a:	3f 93       	push	r19
    317c:	2f 93       	push	r18
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	8f 93       	push	r24
    3182:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    3186:	0f 90       	pop	r0
    3188:	0f 90       	pop	r0
    318a:	0f 90       	pop	r0
    318c:	45 c0       	rjmp	.+138    	; 0x3218 <ProgramADXL345DataFormat+0x172>
	
	//
	// Set Data Offset
	//
	
	Status = SetADXL345Register(ADR_OFSX, &DataOffset->OffsetX, sizeof(signed char));
    318e:	21 e0       	ldi	r18, 0x01	; 1
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	40 e0       	ldi	r20, 0x00	; 0
    3194:	50 e0       	ldi	r21, 0x00	; 0
    3196:	b8 01       	movw	r22, r16
    3198:	8e e1       	ldi	r24, 0x1E	; 30
    319a:	9a dd       	rcall	.-1228   	; 0x2cd0 <SetADXL345Register>
    319c:	f8 2e       	mov	r15, r24
	
	if (!Status)
    319e:	81 11       	cpse	r24, r1
    31a0:	0c c0       	rjmp	.+24     	; 0x31ba <ProgramADXL345DataFormat+0x114>
	{
		SendTrace (ERROR_LEVEL, "Failed to program DATA OFFSET X Register. \r\n");
    31a2:	21 e4       	ldi	r18, 0x41	; 65
    31a4:	30 e1       	ldi	r19, 0x10	; 16
    31a6:	3f 93       	push	r19
    31a8:	2f 93       	push	r18
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	8f 93       	push	r24
    31ae:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    31b2:	0f 90       	pop	r0
    31b4:	0f 90       	pop	r0
    31b6:	0f 90       	pop	r0
    31b8:	2f c0       	rjmp	.+94     	; 0x3218 <ProgramADXL345DataFormat+0x172>
	}
	
	Status = SetADXL345Register(ADR_OFSY, &DataOffset->OffsetY, sizeof(signed char));
    31ba:	21 e0       	ldi	r18, 0x01	; 1
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	40 e0       	ldi	r20, 0x00	; 0
    31c0:	50 e0       	ldi	r21, 0x00	; 0
    31c2:	b8 01       	movw	r22, r16
    31c4:	6f 5f       	subi	r22, 0xFF	; 255
    31c6:	7f 4f       	sbci	r23, 0xFF	; 255
    31c8:	8f e1       	ldi	r24, 0x1F	; 31
    31ca:	82 dd       	rcall	.-1276   	; 0x2cd0 <SetADXL345Register>
    31cc:	f8 2e       	mov	r15, r24
	
	if (!Status)
    31ce:	81 11       	cpse	r24, r1
    31d0:	0c c0       	rjmp	.+24     	; 0x31ea <ProgramADXL345DataFormat+0x144>
	{
		SendTrace (ERROR_LEVEL, "Failed to program DATA OFFSET Y Register. \r\n");
    31d2:	2e e6       	ldi	r18, 0x6E	; 110
    31d4:	30 e1       	ldi	r19, 0x10	; 16
    31d6:	3f 93       	push	r19
    31d8:	2f 93       	push	r18
    31da:	81 e0       	ldi	r24, 0x01	; 1
    31dc:	8f 93       	push	r24
    31de:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    31e2:	0f 90       	pop	r0
    31e4:	0f 90       	pop	r0
    31e6:	0f 90       	pop	r0
    31e8:	17 c0       	rjmp	.+46     	; 0x3218 <ProgramADXL345DataFormat+0x172>
	}
	
	Status = SetADXL345Register(ADR_OFSZ, &DataOffset->OffsetZ, sizeof(signed char));
    31ea:	b8 01       	movw	r22, r16
    31ec:	6e 5f       	subi	r22, 0xFE	; 254
    31ee:	7f 4f       	sbci	r23, 0xFF	; 255
    31f0:	21 e0       	ldi	r18, 0x01	; 1
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	40 e0       	ldi	r20, 0x00	; 0
    31f6:	50 e0       	ldi	r21, 0x00	; 0
    31f8:	80 e2       	ldi	r24, 0x20	; 32
    31fa:	6a dd       	rcall	.-1324   	; 0x2cd0 <SetADXL345Register>
    31fc:	f8 2e       	mov	r15, r24
	
	if (!Status)
    31fe:	81 11       	cpse	r24, r1
    3200:	0b c0       	rjmp	.+22     	; 0x3218 <ProgramADXL345DataFormat+0x172>
	{
		SendTrace (ERROR_LEVEL, "Failed to program DATA OFFSET Z Register. \r\n");
    3202:	2b e9       	ldi	r18, 0x9B	; 155
    3204:	30 e1       	ldi	r19, 0x10	; 16
    3206:	3f 93       	push	r19
    3208:	2f 93       	push	r18
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	8f 93       	push	r24
    320e:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    3212:	0f 90       	pop	r0
    3214:	0f 90       	pop	r0
    3216:	0f 90       	pop	r0
	}
	
Exit:

	return Status;
}
    3218:	8f 2d       	mov	r24, r15
    321a:	0f 90       	pop	r0
    321c:	0f 90       	pop	r0
    321e:	df 91       	pop	r29
    3220:	cf 91       	pop	r28
    3222:	1f 91       	pop	r17
    3224:	0f 91       	pop	r16
    3226:	ff 90       	pop	r15
    3228:	ef 90       	pop	r14
    322a:	08 95       	ret

0000322c <ProgramADXL345ActivityInactivityDetection>:

bool ProgramADXL345ActivityInactivityDetection(PACT_INACT_CTL ActInactCtl, unsigned char ActThreshold, unsigned char InactThreshold, unsigned char TimeInact)
{
    322c:	1f 93       	push	r17
    322e:	cf 93       	push	r28
    3230:	df 93       	push	r29
    3232:	00 d0       	rcall	.+0      	; 0x3234 <ProgramADXL345ActivityInactivityDetection+0x8>
    3234:	1f 92       	push	r1
    3236:	cd b7       	in	r28, 0x3d	; 61
    3238:	de b7       	in	r29, 0x3e	; 62
    323a:	69 83       	std	Y+1, r22	; 0x01
    323c:	4a 83       	std	Y+2, r20	; 0x02
    323e:	2b 83       	std	Y+3, r18	; 0x03
	
	bool Status = FALSE;
	
	if (!gIsADXL345Initialized)
    3240:	20 91 00 16 	lds	r18, 0x1600
    3244:	21 11       	cpse	r18, r1
    3246:	0d c0       	rjmp	.+26     	; 0x3262 <ProgramADXL345ActivityInactivityDetection+0x36>
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
    3248:	83 e0       	ldi	r24, 0x03	; 3
    324a:	9c e0       	ldi	r25, 0x0C	; 12
    324c:	9f 93       	push	r25
    324e:	8f 93       	push	r24
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	8f 93       	push	r24
    3254:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    3258:	0f 90       	pop	r0
    325a:	0f 90       	pop	r0
    325c:	0f 90       	pop	r0
}

bool ProgramADXL345ActivityInactivityDetection(PACT_INACT_CTL ActInactCtl, unsigned char ActThreshold, unsigned char InactThreshold, unsigned char TimeInact)
{
	
	bool Status = FALSE;
    325e:	10 e0       	ldi	r17, 0x00	; 0
	
	if (!gIsADXL345Initialized)
	{
		SendTrace(ERROR_LEVEL, "Accelerometer not initialized. \r\n");
		
		goto Exit;
    3260:	5d c0       	rjmp	.+186    	; 0x331c <ProgramADXL345ActivityInactivityDetection+0xf0>
	
	//
	// Program Act Inact Ctl Register
	//
	
	Status = SetADXL345Register(ADR_INACT_CTL, ActInactCtl, sizeof(ACT_INACT_CTL));
    3262:	21 e0       	ldi	r18, 0x01	; 1
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	40 e0       	ldi	r20, 0x00	; 0
    3268:	50 e0       	ldi	r21, 0x00	; 0
    326a:	bc 01       	movw	r22, r24
    326c:	87 e2       	ldi	r24, 0x27	; 39
    326e:	30 dd       	rcall	.-1440   	; 0x2cd0 <SetADXL345Register>
    3270:	18 2f       	mov	r17, r24
	
	if (!Status)
    3272:	81 11       	cpse	r24, r1
    3274:	0c c0       	rjmp	.+24     	; 0x328e <ProgramADXL345ActivityInactivityDetection+0x62>
	{
		SendTrace (ERROR_LEVEL, "Failed to program ACT INACT CTL Register. \r\n");
    3276:	28 ec       	ldi	r18, 0xC8	; 200
    3278:	30 e1       	ldi	r19, 0x10	; 16
    327a:	3f 93       	push	r19
    327c:	2f 93       	push	r18
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	8f 93       	push	r24
    3282:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    3286:	0f 90       	pop	r0
    3288:	0f 90       	pop	r0
    328a:	0f 90       	pop	r0
    328c:	47 c0       	rjmp	.+142    	; 0x331c <ProgramADXL345ActivityInactivityDetection+0xf0>
	
	//
	// Program Act Threshold Register
	//
	
	Status = SetADXL345Register(ADR_THRESH_ACT, &ActThreshold, sizeof(unsigned char));
    328e:	21 e0       	ldi	r18, 0x01	; 1
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	40 e0       	ldi	r20, 0x00	; 0
    3294:	50 e0       	ldi	r21, 0x00	; 0
    3296:	be 01       	movw	r22, r28
    3298:	6f 5f       	subi	r22, 0xFF	; 255
    329a:	7f 4f       	sbci	r23, 0xFF	; 255
    329c:	84 e2       	ldi	r24, 0x24	; 36
    329e:	18 dd       	rcall	.-1488   	; 0x2cd0 <SetADXL345Register>
    32a0:	18 2f       	mov	r17, r24
	
	if (!Status)
    32a2:	81 11       	cpse	r24, r1
    32a4:	0c c0       	rjmp	.+24     	; 0x32be <ProgramADXL345ActivityInactivityDetection+0x92>
	{
		SendTrace (ERROR_LEVEL, "Failed to program THRESH ACT Register. \r\n");
    32a6:	25 ef       	ldi	r18, 0xF5	; 245
    32a8:	30 e1       	ldi	r19, 0x10	; 16
    32aa:	3f 93       	push	r19
    32ac:	2f 93       	push	r18
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	8f 93       	push	r24
    32b2:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    32b6:	0f 90       	pop	r0
    32b8:	0f 90       	pop	r0
    32ba:	0f 90       	pop	r0
    32bc:	2f c0       	rjmp	.+94     	; 0x331c <ProgramADXL345ActivityInactivityDetection+0xf0>
	
	//
	// Program Inact Threshould Register
	//
	
	Status = SetADXL345Register(ADR_THRESH_INACT, &InactThreshold, sizeof(unsigned char));
    32be:	21 e0       	ldi	r18, 0x01	; 1
    32c0:	30 e0       	ldi	r19, 0x00	; 0
    32c2:	40 e0       	ldi	r20, 0x00	; 0
    32c4:	50 e0       	ldi	r21, 0x00	; 0
    32c6:	be 01       	movw	r22, r28
    32c8:	6e 5f       	subi	r22, 0xFE	; 254
    32ca:	7f 4f       	sbci	r23, 0xFF	; 255
    32cc:	85 e2       	ldi	r24, 0x25	; 37
    32ce:	00 dd       	rcall	.-1536   	; 0x2cd0 <SetADXL345Register>
    32d0:	18 2f       	mov	r17, r24
	
	if (!Status)
    32d2:	81 11       	cpse	r24, r1
    32d4:	0c c0       	rjmp	.+24     	; 0x32ee <ProgramADXL345ActivityInactivityDetection+0xc2>
	{
		SendTrace(ERROR_LEVEL, "Failed to program THRESH INACT Register. \r\n");
    32d6:	2f e1       	ldi	r18, 0x1F	; 31
    32d8:	31 e1       	ldi	r19, 0x11	; 17
    32da:	3f 93       	push	r19
    32dc:	2f 93       	push	r18
    32de:	81 e0       	ldi	r24, 0x01	; 1
    32e0:	8f 93       	push	r24
    32e2:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    32e6:	0f 90       	pop	r0
    32e8:	0f 90       	pop	r0
    32ea:	0f 90       	pop	r0
    32ec:	17 c0       	rjmp	.+46     	; 0x331c <ProgramADXL345ActivityInactivityDetection+0xf0>
	
	//
	// Program Time Inact Register
	//
	
	Status = SetADXL345Register(ADR_TIME_INACT, &TimeInact, sizeof(unsigned char));
    32ee:	21 e0       	ldi	r18, 0x01	; 1
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	40 e0       	ldi	r20, 0x00	; 0
    32f4:	50 e0       	ldi	r21, 0x00	; 0
    32f6:	be 01       	movw	r22, r28
    32f8:	6d 5f       	subi	r22, 0xFD	; 253
    32fa:	7f 4f       	sbci	r23, 0xFF	; 255
    32fc:	86 e2       	ldi	r24, 0x26	; 38
    32fe:	e8 dc       	rcall	.-1584   	; 0x2cd0 <SetADXL345Register>
    3300:	18 2f       	mov	r17, r24
	
	if (!Status)
    3302:	81 11       	cpse	r24, r1
    3304:	0b c0       	rjmp	.+22     	; 0x331c <ProgramADXL345ActivityInactivityDetection+0xf0>
	{
		SendTrace(ERROR_LEVEL, "Failed to program TIME INACT Register. \r\n");
    3306:	2b e4       	ldi	r18, 0x4B	; 75
    3308:	31 e1       	ldi	r19, 0x11	; 17
    330a:	3f 93       	push	r19
    330c:	2f 93       	push	r18
    330e:	81 e0       	ldi	r24, 0x01	; 1
    3310:	8f 93       	push	r24
    3312:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    3316:	0f 90       	pop	r0
    3318:	0f 90       	pop	r0
    331a:	0f 90       	pop	r0
	}
	
Exit:
	
	return Status;
}
    331c:	81 2f       	mov	r24, r17
    331e:	0f 90       	pop	r0
    3320:	0f 90       	pop	r0
    3322:	0f 90       	pop	r0
    3324:	df 91       	pop	r29
    3326:	cf 91       	pop	r28
    3328:	1f 91       	pop	r17
    332a:	08 95       	ret

0000332c <CalculateCompassHeading>:
	pData->GaussZ = pData->RawDataZ * HMC5883L_SCALE_FACTOR;
	
Exit:

	return Status;
}
    332c:	2f 92       	push	r2
    332e:	3f 92       	push	r3
    3330:	4f 92       	push	r4
    3332:	5f 92       	push	r5
    3334:	6f 92       	push	r6
    3336:	7f 92       	push	r7
    3338:	8f 92       	push	r8
    333a:	9f 92       	push	r9
    333c:	af 92       	push	r10
    333e:	bf 92       	push	r11
    3340:	cf 92       	push	r12
    3342:	df 92       	push	r13
    3344:	ef 92       	push	r14
    3346:	ff 92       	push	r15
    3348:	0f 93       	push	r16
    334a:	1f 93       	push	r17
    334c:	cf 93       	push	r28
    334e:	df 93       	push	r29
    3350:	cd b7       	in	r28, 0x3d	; 61
    3352:	de b7       	in	r29, 0x3e	; 62
    3354:	62 97       	sbiw	r28, 0x12	; 18
    3356:	0f b6       	in	r0, 0x3f	; 63
    3358:	f8 94       	cli
    335a:	de bf       	out	0x3e, r29	; 62
    335c:	0f be       	out	0x3f, r0	; 63
    335e:	cd bf       	out	0x3d, r28	; 61
    3360:	9a 8b       	std	Y+18, r25	; 0x12
    3362:	89 8b       	std	Y+17, r24	; 0x11
    3364:	48 01       	movw	r8, r16
    3366:	59 01       	movw	r10, r18
    3368:	1e 2d       	mov	r17, r14
    336a:	16 01       	movw	r2, r12
    336c:	89 2b       	or	r24, r25
    336e:	09 f4       	brne	.+2      	; 0x3372 <CalculateCompassHeading+0x46>
    3370:	ec c0       	rjmp	.+472    	; 0x354a <CalculateCompassHeading+0x21e>
    3372:	c1 14       	cp	r12, r1
    3374:	d1 04       	cpc	r13, r1
    3376:	09 f4       	brne	.+2      	; 0x337a <CalculateCompassHeading+0x4e>
    3378:	ea c0       	rjmp	.+468    	; 0x354e <CalculateCompassHeading+0x222>
    337a:	2a 01       	movw	r4, r20
    337c:	3b 01       	movw	r6, r22
    337e:	77 fa       	bst	r7, 7
    3380:	70 94       	com	r7
    3382:	77 f8       	bld	r7, 7
    3384:	70 94       	com	r7
    3386:	c3 01       	movw	r24, r6
    3388:	b2 01       	movw	r22, r4
    338a:	0e 94 68 22 	call	0x44d0	; 0x44d0 <cos>
    338e:	6b 01       	movw	r12, r22
    3390:	7c 01       	movw	r14, r24
    3392:	c3 01       	movw	r24, r6
    3394:	b2 01       	movw	r22, r4
    3396:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <sin>
    339a:	69 83       	std	Y+1, r22	; 0x01
    339c:	7a 83       	std	Y+2, r23	; 0x02
    339e:	8b 83       	std	Y+3, r24	; 0x03
    33a0:	9c 83       	std	Y+4, r25	; 0x04
    33a2:	c5 01       	movw	r24, r10
    33a4:	b4 01       	movw	r22, r8
    33a6:	0e 94 68 22 	call	0x44d0	; 0x44d0 <cos>
    33aa:	6d 83       	std	Y+5, r22	; 0x05
    33ac:	7e 83       	std	Y+6, r23	; 0x06
    33ae:	8f 83       	std	Y+7, r24	; 0x07
    33b0:	98 87       	std	Y+8, r25	; 0x08
    33b2:	c5 01       	movw	r24, r10
    33b4:	b4 01       	movw	r22, r8
    33b6:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <sin>
    33ba:	4b 01       	movw	r8, r22
    33bc:	5c 01       	movw	r10, r24
    33be:	a9 89       	ldd	r26, Y+17	; 0x11
    33c0:	ba 89       	ldd	r27, Y+18	; 0x12
    33c2:	1a 96       	adiw	r26, 0x0a	; 10
    33c4:	8d 91       	ld	r24, X+
    33c6:	9d 91       	ld	r25, X+
    33c8:	0d 90       	ld	r0, X+
    33ca:	bc 91       	ld	r27, X
    33cc:	a0 2d       	mov	r26, r0
    33ce:	89 87       	std	Y+9, r24	; 0x09
    33d0:	9a 87       	std	Y+10, r25	; 0x0a
    33d2:	ab 87       	std	Y+11, r26	; 0x0b
    33d4:	bc 87       	std	Y+12, r27	; 0x0c
    33d6:	a9 89       	ldd	r26, Y+17	; 0x11
    33d8:	ba 89       	ldd	r27, Y+18	; 0x12
    33da:	1e 96       	adiw	r26, 0x0e	; 14
    33dc:	8d 91       	ld	r24, X+
    33de:	9d 91       	ld	r25, X+
    33e0:	0d 90       	ld	r0, X+
    33e2:	bc 91       	ld	r27, X
    33e4:	a0 2d       	mov	r26, r0
    33e6:	8d 87       	std	Y+13, r24	; 0x0d
    33e8:	9e 87       	std	Y+14, r25	; 0x0e
    33ea:	af 87       	std	Y+15, r26	; 0x0f
    33ec:	b8 8b       	std	Y+16, r27	; 0x10
    33ee:	29 85       	ldd	r18, Y+9	; 0x09
    33f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    33f2:	4b 85       	ldd	r20, Y+11	; 0x0b
    33f4:	5c 85       	ldd	r21, Y+12	; 0x0c
    33f6:	6d 81       	ldd	r22, Y+5	; 0x05
    33f8:	7e 81       	ldd	r23, Y+6	; 0x06
    33fa:	8f 81       	ldd	r24, Y+7	; 0x07
    33fc:	98 85       	ldd	r25, Y+8	; 0x08
    33fe:	0e 94 ab 24 	call	0x4956	; 0x4956 <__mulsf3>
    3402:	2b 01       	movw	r4, r22
    3404:	3c 01       	movw	r6, r24
    3406:	2d 85       	ldd	r18, Y+13	; 0x0d
    3408:	3e 85       	ldd	r19, Y+14	; 0x0e
    340a:	4f 85       	ldd	r20, Y+15	; 0x0f
    340c:	58 89       	ldd	r21, Y+16	; 0x10
    340e:	c5 01       	movw	r24, r10
    3410:	b4 01       	movw	r22, r8
    3412:	0e 94 ab 24 	call	0x4956	; 0x4956 <__mulsf3>
    3416:	9b 01       	movw	r18, r22
    3418:	ac 01       	movw	r20, r24
    341a:	c3 01       	movw	r24, r6
    341c:	b2 01       	movw	r22, r4
    341e:	8d d7       	rcall	.+3866   	; 0x433a <__subsf3>
    3420:	2b 01       	movw	r4, r22
    3422:	3c 01       	movw	r6, r24
    3424:	e9 89       	ldd	r30, Y+17	; 0x11
    3426:	fa 89       	ldd	r31, Y+18	; 0x12
    3428:	26 81       	ldd	r18, Z+6	; 0x06
    342a:	37 81       	ldd	r19, Z+7	; 0x07
    342c:	40 85       	ldd	r20, Z+8	; 0x08
    342e:	51 85       	ldd	r21, Z+9	; 0x09
    3430:	c7 01       	movw	r24, r14
    3432:	b6 01       	movw	r22, r12
    3434:	0e 94 ab 24 	call	0x4956	; 0x4956 <__mulsf3>
    3438:	6b 01       	movw	r12, r22
    343a:	7c 01       	movw	r14, r24
    343c:	29 81       	ldd	r18, Y+1	; 0x01
    343e:	3a 81       	ldd	r19, Y+2	; 0x02
    3440:	4b 81       	ldd	r20, Y+3	; 0x03
    3442:	5c 81       	ldd	r21, Y+4	; 0x04
    3444:	69 85       	ldd	r22, Y+9	; 0x09
    3446:	7a 85       	ldd	r23, Y+10	; 0x0a
    3448:	8b 85       	ldd	r24, Y+11	; 0x0b
    344a:	9c 85       	ldd	r25, Y+12	; 0x0c
    344c:	0e 94 ab 24 	call	0x4956	; 0x4956 <__mulsf3>
    3450:	a5 01       	movw	r20, r10
    3452:	94 01       	movw	r18, r8
    3454:	0e 94 ab 24 	call	0x4956	; 0x4956 <__mulsf3>
    3458:	9b 01       	movw	r18, r22
    345a:	ac 01       	movw	r20, r24
    345c:	c7 01       	movw	r24, r14
    345e:	b6 01       	movw	r22, r12
    3460:	6d d7       	rcall	.+3802   	; 0x433c <__addsf3>
    3462:	6b 01       	movw	r12, r22
    3464:	7c 01       	movw	r14, r24
    3466:	29 81       	ldd	r18, Y+1	; 0x01
    3468:	3a 81       	ldd	r19, Y+2	; 0x02
    346a:	4b 81       	ldd	r20, Y+3	; 0x03
    346c:	5c 81       	ldd	r21, Y+4	; 0x04
    346e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3470:	7e 85       	ldd	r23, Y+14	; 0x0e
    3472:	8f 85       	ldd	r24, Y+15	; 0x0f
    3474:	98 89       	ldd	r25, Y+16	; 0x10
    3476:	0e 94 ab 24 	call	0x4956	; 0x4956 <__mulsf3>
    347a:	2d 81       	ldd	r18, Y+5	; 0x05
    347c:	3e 81       	ldd	r19, Y+6	; 0x06
    347e:	4f 81       	ldd	r20, Y+7	; 0x07
    3480:	58 85       	ldd	r21, Y+8	; 0x08
    3482:	0e 94 ab 24 	call	0x4956	; 0x4956 <__mulsf3>
    3486:	9b 01       	movw	r18, r22
    3488:	ac 01       	movw	r20, r24
    348a:	c7 01       	movw	r24, r14
    348c:	b6 01       	movw	r22, r12
    348e:	56 d7       	rcall	.+3756   	; 0x433c <__addsf3>
    3490:	a3 01       	movw	r20, r6
    3492:	92 01       	movw	r18, r4
    3494:	c6 d7       	rcall	.+3980   	; 0x4422 <atan2>
    3496:	2b ed       	ldi	r18, 0xDB	; 219
    3498:	3f e0       	ldi	r19, 0x0F	; 15
    349a:	49 e4       	ldi	r20, 0x49	; 73
    349c:	50 e4       	ldi	r21, 0x40	; 64
    349e:	4e d7       	rcall	.+3740   	; 0x433c <__addsf3>
    34a0:	6b 01       	movw	r12, r22
    34a2:	7c 01       	movw	r14, r24
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	a9 01       	movw	r20, r18
    34aa:	0e 94 64 22 	call	0x44c8	; 0x44c8 <__cmpsf2>
    34ae:	88 23       	and	r24, r24
    34b0:	74 f4       	brge	.+28     	; 0x34ce <CalculateCompassHeading+0x1a2>
    34b2:	2b ed       	ldi	r18, 0xDB	; 219
    34b4:	3f e0       	ldi	r19, 0x0F	; 15
    34b6:	49 ec       	ldi	r20, 0xC9	; 201
    34b8:	50 e4       	ldi	r21, 0x40	; 64
    34ba:	c7 01       	movw	r24, r14
    34bc:	b6 01       	movw	r22, r12
    34be:	3e d7       	rcall	.+3708   	; 0x433c <__addsf3>
    34c0:	d1 01       	movw	r26, r2
    34c2:	6d 93       	st	X+, r22
    34c4:	7d 93       	st	X+, r23
    34c6:	8d 93       	st	X+, r24
    34c8:	9c 93       	st	X, r25
    34ca:	13 97       	sbiw	r26, 0x03	; 3
    34cc:	1d c0       	rjmp	.+58     	; 0x3508 <CalculateCompassHeading+0x1dc>
    34ce:	2b ed       	ldi	r18, 0xDB	; 219
    34d0:	3f e0       	ldi	r19, 0x0F	; 15
    34d2:	49 ec       	ldi	r20, 0xC9	; 201
    34d4:	50 e4       	ldi	r21, 0x40	; 64
    34d6:	c7 01       	movw	r24, r14
    34d8:	b6 01       	movw	r22, r12
    34da:	0e 94 a0 24 	call	0x4940	; 0x4940 <__gesf2>
    34de:	18 16       	cp	r1, r24
    34e0:	34 f0       	brlt	.+12     	; 0x34ee <CalculateCompassHeading+0x1c2>
    34e2:	f1 01       	movw	r30, r2
    34e4:	c0 82       	st	Z, r12
    34e6:	d1 82       	std	Z+1, r13	; 0x01
    34e8:	e2 82       	std	Z+2, r14	; 0x02
    34ea:	f3 82       	std	Z+3, r15	; 0x03
    34ec:	0d c0       	rjmp	.+26     	; 0x3508 <CalculateCompassHeading+0x1dc>
    34ee:	2b ed       	ldi	r18, 0xDB	; 219
    34f0:	3f e0       	ldi	r19, 0x0F	; 15
    34f2:	49 ec       	ldi	r20, 0xC9	; 201
    34f4:	50 e4       	ldi	r21, 0x40	; 64
    34f6:	c7 01       	movw	r24, r14
    34f8:	b6 01       	movw	r22, r12
    34fa:	1f d7       	rcall	.+3646   	; 0x433a <__subsf3>
    34fc:	d1 01       	movw	r26, r2
    34fe:	6d 93       	st	X+, r22
    3500:	7d 93       	st	X+, r23
    3502:	8d 93       	st	X+, r24
    3504:	9c 93       	st	X, r25
    3506:	13 97       	sbiw	r26, 0x03	; 3
    3508:	f1 01       	movw	r30, r2
    350a:	20 81       	ld	r18, Z
    350c:	31 81       	ldd	r19, Z+1	; 0x01
    350e:	42 81       	ldd	r20, Z+2	; 0x02
    3510:	53 81       	ldd	r21, Z+3	; 0x03
    3512:	6b ed       	ldi	r22, 0xDB	; 219
    3514:	7f e0       	ldi	r23, 0x0F	; 15
    3516:	89 ec       	ldi	r24, 0xC9	; 201
    3518:	90 e4       	ldi	r25, 0x40	; 64
    351a:	0f d7       	rcall	.+3614   	; 0x433a <__subsf3>
    351c:	11 30       	cpi	r17, 0x01	; 1
    351e:	41 f0       	breq	.+16     	; 0x3530 <CalculateCompassHeading+0x204>
    3520:	d1 01       	movw	r26, r2
    3522:	6d 93       	st	X+, r22
    3524:	7d 93       	st	X+, r23
    3526:	8d 93       	st	X+, r24
    3528:	9c 93       	st	X, r25
    352a:	13 97       	sbiw	r26, 0x03	; 3
    352c:	81 e0       	ldi	r24, 0x01	; 1
    352e:	10 c0       	rjmp	.+32     	; 0x3550 <CalculateCompassHeading+0x224>
    3530:	20 ee       	ldi	r18, 0xE0	; 224
    3532:	3e e2       	ldi	r19, 0x2E	; 46
    3534:	45 e6       	ldi	r20, 0x65	; 101
    3536:	52 e4       	ldi	r21, 0x42	; 66
    3538:	0e 94 ab 24 	call	0x4956	; 0x4956 <__mulsf3>
    353c:	f1 01       	movw	r30, r2
    353e:	60 83       	st	Z, r22
    3540:	71 83       	std	Z+1, r23	; 0x01
    3542:	82 83       	std	Z+2, r24	; 0x02
    3544:	93 83       	std	Z+3, r25	; 0x03
    3546:	81 e0       	ldi	r24, 0x01	; 1
    3548:	03 c0       	rjmp	.+6      	; 0x3550 <CalculateCompassHeading+0x224>
    354a:	80 e0       	ldi	r24, 0x00	; 0
    354c:	01 c0       	rjmp	.+2      	; 0x3550 <CalculateCompassHeading+0x224>
    354e:	80 e0       	ldi	r24, 0x00	; 0
    3550:	62 96       	adiw	r28, 0x12	; 18
    3552:	0f b6       	in	r0, 0x3f	; 63
    3554:	f8 94       	cli
    3556:	de bf       	out	0x3e, r29	; 62
    3558:	0f be       	out	0x3f, r0	; 63
    355a:	cd bf       	out	0x3d, r28	; 61
    355c:	df 91       	pop	r29
    355e:	cf 91       	pop	r28
    3560:	1f 91       	pop	r17
    3562:	0f 91       	pop	r16
    3564:	ff 90       	pop	r15
    3566:	ef 90       	pop	r14
    3568:	df 90       	pop	r13
    356a:	cf 90       	pop	r12
    356c:	bf 90       	pop	r11
    356e:	af 90       	pop	r10
    3570:	9f 90       	pop	r9
    3572:	8f 90       	pop	r8
    3574:	7f 90       	pop	r7
    3576:	6f 90       	pop	r6
    3578:	5f 90       	pop	r5
    357a:	4f 90       	pop	r4
    357c:	3f 90       	pop	r3
    357e:	2f 90       	pop	r2
    3580:	08 95       	ret

00003582 <ReadHMC5883LRegister>:
    3582:	af 92       	push	r10
    3584:	bf 92       	push	r11
    3586:	cf 92       	push	r12
    3588:	df 92       	push	r13
    358a:	ef 92       	push	r14
    358c:	ff 92       	push	r15
    358e:	0f 93       	push	r16
    3590:	1f 93       	push	r17
    3592:	cf 93       	push	r28
    3594:	df 93       	push	r29
    3596:	1f 92       	push	r1
    3598:	cd b7       	in	r28, 0x3d	; 61
    359a:	de b7       	in	r29, 0x3e	; 62
    359c:	89 83       	std	Y+1, r24	; 0x01
    359e:	5b 01       	movw	r10, r22
    35a0:	69 01       	movw	r12, r18
    35a2:	7a 01       	movw	r14, r20
    35a4:	00 e0       	ldi	r16, 0x00	; 0
    35a6:	20 e5       	ldi	r18, 0x50	; 80
    35a8:	36 e1       	ldi	r19, 0x16	; 22
    35aa:	41 e0       	ldi	r20, 0x01	; 1
    35ac:	50 e0       	ldi	r21, 0x00	; 0
    35ae:	60 e0       	ldi	r22, 0x00	; 0
    35b0:	70 e0       	ldi	r23, 0x00	; 0
    35b2:	ce 01       	movw	r24, r28
    35b4:	01 96       	adiw	r24, 0x01	; 1
    35b6:	0e 94 2d 12 	call	0x245a	; 0x245a <TwiTransmit>
    35ba:	18 2f       	mov	r17, r24
    35bc:	81 11       	cpse	r24, r1
    35be:	0c c0       	rjmp	.+24     	; 0x35d8 <ReadHMC5883LRegister+0x56>
    35c0:	25 eb       	ldi	r18, 0xB5	; 181
    35c2:	3b e0       	ldi	r19, 0x0B	; 11
    35c4:	3f 93       	push	r19
    35c6:	2f 93       	push	r18
    35c8:	81 e0       	ldi	r24, 0x01	; 1
    35ca:	8f 93       	push	r24
    35cc:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    35d0:	0f 90       	pop	r0
    35d2:	0f 90       	pop	r0
    35d4:	0f 90       	pop	r0
    35d6:	15 c0       	rjmp	.+42     	; 0x3602 <ReadHMC5883LRegister+0x80>
    35d8:	01 e0       	ldi	r16, 0x01	; 1
    35da:	20 e5       	ldi	r18, 0x50	; 80
    35dc:	36 e1       	ldi	r19, 0x16	; 22
    35de:	b7 01       	movw	r22, r14
    35e0:	a6 01       	movw	r20, r12
    35e2:	c5 01       	movw	r24, r10
    35e4:	9b d8       	rcall	.-3786   	; 0x271c <TwiReceive>
    35e6:	18 2f       	mov	r17, r24
    35e8:	81 11       	cpse	r24, r1
    35ea:	0b c0       	rjmp	.+22     	; 0x3602 <ReadHMC5883LRegister+0x80>
    35ec:	2d ed       	ldi	r18, 0xDD	; 221
    35ee:	3b e0       	ldi	r19, 0x0B	; 11
    35f0:	3f 93       	push	r19
    35f2:	2f 93       	push	r18
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	8f 93       	push	r24
    35f8:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    35fc:	0f 90       	pop	r0
    35fe:	0f 90       	pop	r0
    3600:	0f 90       	pop	r0
    3602:	81 2f       	mov	r24, r17
    3604:	0f 90       	pop	r0
    3606:	df 91       	pop	r29
    3608:	cf 91       	pop	r28
    360a:	1f 91       	pop	r17
    360c:	0f 91       	pop	r16
    360e:	ff 90       	pop	r15
    3610:	ef 90       	pop	r14
    3612:	df 90       	pop	r13
    3614:	cf 90       	pop	r12
    3616:	bf 90       	pop	r11
    3618:	af 90       	pop	r10
    361a:	08 95       	ret

0000361c <PrintHMC5883LConfigRegisters>:
    361c:	1f 93       	push	r17
    361e:	cf 93       	push	r28
    3620:	df 93       	push	r29
    3622:	1f 92       	push	r1
    3624:	cd b7       	in	r28, 0x3d	; 61
    3626:	de b7       	in	r29, 0x3e	; 62
    3628:	21 e0       	ldi	r18, 0x01	; 1
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	40 e0       	ldi	r20, 0x00	; 0
    362e:	50 e0       	ldi	r21, 0x00	; 0
    3630:	be 01       	movw	r22, r28
    3632:	6f 5f       	subi	r22, 0xFF	; 255
    3634:	7f 4f       	sbci	r23, 0xFF	; 255
    3636:	80 e0       	ldi	r24, 0x00	; 0
    3638:	a4 df       	rcall	.-184    	; 0x3582 <ReadHMC5883LRegister>
    363a:	18 2f       	mov	r17, r24
    363c:	88 23       	and	r24, r24
    363e:	09 f4       	brne	.+2      	; 0x3642 <PrintHMC5883LConfigRegisters+0x26>
    3640:	48 c0       	rjmp	.+144    	; 0x36d2 <PrintHMC5883LConfigRegisters+0xb6>
    3642:	89 81       	ldd	r24, Y+1	; 0x01
    3644:	1f 92       	push	r1
    3646:	8f 93       	push	r24
    3648:	82 e0       	ldi	r24, 0x02	; 2
    364a:	92 e1       	ldi	r25, 0x12	; 18
    364c:	9f 93       	push	r25
    364e:	8f 93       	push	r24
    3650:	84 e0       	ldi	r24, 0x04	; 4
    3652:	8f 93       	push	r24
    3654:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    3658:	21 e0       	ldi	r18, 0x01	; 1
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	40 e0       	ldi	r20, 0x00	; 0
    365e:	50 e0       	ldi	r21, 0x00	; 0
    3660:	be 01       	movw	r22, r28
    3662:	6f 5f       	subi	r22, 0xFF	; 255
    3664:	7f 4f       	sbci	r23, 0xFF	; 255
    3666:	81 e0       	ldi	r24, 0x01	; 1
    3668:	8c df       	rcall	.-232    	; 0x3582 <ReadHMC5883LRegister>
    366a:	18 2f       	mov	r17, r24
    366c:	0f 90       	pop	r0
    366e:	0f 90       	pop	r0
    3670:	0f 90       	pop	r0
    3672:	0f 90       	pop	r0
    3674:	0f 90       	pop	r0
    3676:	88 23       	and	r24, r24
    3678:	61 f1       	breq	.+88     	; 0x36d2 <PrintHMC5883LConfigRegisters+0xb6>
    367a:	89 81       	ldd	r24, Y+1	; 0x01
    367c:	1f 92       	push	r1
    367e:	8f 93       	push	r24
    3680:	88 e1       	ldi	r24, 0x18	; 24
    3682:	92 e1       	ldi	r25, 0x12	; 18
    3684:	9f 93       	push	r25
    3686:	8f 93       	push	r24
    3688:	84 e0       	ldi	r24, 0x04	; 4
    368a:	8f 93       	push	r24
    368c:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    3690:	21 e0       	ldi	r18, 0x01	; 1
    3692:	30 e0       	ldi	r19, 0x00	; 0
    3694:	40 e0       	ldi	r20, 0x00	; 0
    3696:	50 e0       	ldi	r21, 0x00	; 0
    3698:	be 01       	movw	r22, r28
    369a:	6f 5f       	subi	r22, 0xFF	; 255
    369c:	7f 4f       	sbci	r23, 0xFF	; 255
    369e:	82 e0       	ldi	r24, 0x02	; 2
    36a0:	70 df       	rcall	.-288    	; 0x3582 <ReadHMC5883LRegister>
    36a2:	18 2f       	mov	r17, r24
    36a4:	0f 90       	pop	r0
    36a6:	0f 90       	pop	r0
    36a8:	0f 90       	pop	r0
    36aa:	0f 90       	pop	r0
    36ac:	0f 90       	pop	r0
    36ae:	88 23       	and	r24, r24
    36b0:	81 f0       	breq	.+32     	; 0x36d2 <PrintHMC5883LConfigRegisters+0xb6>
    36b2:	89 81       	ldd	r24, Y+1	; 0x01
    36b4:	1f 92       	push	r1
    36b6:	8f 93       	push	r24
    36b8:	2e e2       	ldi	r18, 0x2E	; 46
    36ba:	32 e1       	ldi	r19, 0x12	; 18
    36bc:	3f 93       	push	r19
    36be:	2f 93       	push	r18
    36c0:	84 e0       	ldi	r24, 0x04	; 4
    36c2:	8f 93       	push	r24
    36c4:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    36c8:	0f 90       	pop	r0
    36ca:	0f 90       	pop	r0
    36cc:	0f 90       	pop	r0
    36ce:	0f 90       	pop	r0
    36d0:	0f 90       	pop	r0
    36d2:	81 2f       	mov	r24, r17
    36d4:	0f 90       	pop	r0
    36d6:	df 91       	pop	r29
    36d8:	cf 91       	pop	r28
    36da:	1f 91       	pop	r17
    36dc:	08 95       	ret

000036de <ReadHMC5883LData>:
    36de:	ff 92       	push	r15
    36e0:	0f 93       	push	r16
    36e2:	1f 93       	push	r17
    36e4:	cf 93       	push	r28
    36e6:	df 93       	push	r29
    36e8:	00 d0       	rcall	.+0      	; 0x36ea <ReadHMC5883LData+0xc>
    36ea:	00 d0       	rcall	.+0      	; 0x36ec <ReadHMC5883LData+0xe>
    36ec:	00 d0       	rcall	.+0      	; 0x36ee <ReadHMC5883LData+0x10>
    36ee:	cd b7       	in	r28, 0x3d	; 61
    36f0:	de b7       	in	r29, 0x3e	; 62
    36f2:	8c 01       	movw	r16, r24
    36f4:	26 e0       	ldi	r18, 0x06	; 6
    36f6:	30 e0       	ldi	r19, 0x00	; 0
    36f8:	40 e0       	ldi	r20, 0x00	; 0
    36fa:	50 e0       	ldi	r21, 0x00	; 0
    36fc:	be 01       	movw	r22, r28
    36fe:	6f 5f       	subi	r22, 0xFF	; 255
    3700:	7f 4f       	sbci	r23, 0xFF	; 255
    3702:	83 e0       	ldi	r24, 0x03	; 3
    3704:	3e df       	rcall	.-388    	; 0x3582 <ReadHMC5883LRegister>
    3706:	f8 2e       	mov	r15, r24
    3708:	81 11       	cpse	r24, r1
    370a:	0c c0       	rjmp	.+24     	; 0x3724 <ReadHMC5883LData+0x46>
    370c:	80 e4       	ldi	r24, 0x40	; 64
    370e:	92 e1       	ldi	r25, 0x12	; 18
    3710:	9f 93       	push	r25
    3712:	8f 93       	push	r24
    3714:	81 e0       	ldi	r24, 0x01	; 1
    3716:	8f 93       	push	r24
    3718:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    371c:	0f 90       	pop	r0
    371e:	0f 90       	pop	r0
    3720:	0f 90       	pop	r0
    3722:	19 c0       	rjmp	.+50     	; 0x3756 <ReadHMC5883LData+0x78>
    3724:	89 81       	ldd	r24, Y+1	; 0x01
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	98 2f       	mov	r25, r24
    372a:	88 27       	eor	r24, r24
    372c:	2a 81       	ldd	r18, Y+2	; 0x02
    372e:	82 2b       	or	r24, r18
    3730:	f8 01       	movw	r30, r16
    3732:	91 83       	std	Z+1, r25	; 0x01
    3734:	80 83       	st	Z, r24
    3736:	2b 81       	ldd	r18, Y+3	; 0x03
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	32 2f       	mov	r19, r18
    373c:	22 27       	eor	r18, r18
    373e:	8c 81       	ldd	r24, Y+4	; 0x04
    3740:	28 2b       	or	r18, r24
    3742:	35 83       	std	Z+5, r19	; 0x05
    3744:	24 83       	std	Z+4, r18	; 0x04
    3746:	2d 81       	ldd	r18, Y+5	; 0x05
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	32 2f       	mov	r19, r18
    374c:	22 27       	eor	r18, r18
    374e:	8e 81       	ldd	r24, Y+6	; 0x06
    3750:	28 2b       	or	r18, r24
    3752:	33 83       	std	Z+3, r19	; 0x03
    3754:	22 83       	std	Z+2, r18	; 0x02
    3756:	8f 2d       	mov	r24, r15
    3758:	26 96       	adiw	r28, 0x06	; 6
    375a:	0f b6       	in	r0, 0x3f	; 63
    375c:	f8 94       	cli
    375e:	de bf       	out	0x3e, r29	; 62
    3760:	0f be       	out	0x3f, r0	; 63
    3762:	cd bf       	out	0x3d, r28	; 61
    3764:	df 91       	pop	r29
    3766:	cf 91       	pop	r28
    3768:	1f 91       	pop	r17
    376a:	0f 91       	pop	r16
    376c:	ff 90       	pop	r15
    376e:	08 95       	ret

00003770 <SetHMC5883LRegister>:
    3770:	4f 92       	push	r4
    3772:	5f 92       	push	r5
    3774:	6f 92       	push	r6
    3776:	7f 92       	push	r7
    3778:	af 92       	push	r10
    377a:	bf 92       	push	r11
    377c:	cf 92       	push	r12
    377e:	df 92       	push	r13
    3780:	ef 92       	push	r14
    3782:	ff 92       	push	r15
    3784:	0f 93       	push	r16
    3786:	1f 93       	push	r17
    3788:	cf 93       	push	r28
    378a:	df 93       	push	r29
    378c:	cd b7       	in	r28, 0x3d	; 61
    378e:	de b7       	in	r29, 0x3e	; 62
    3790:	96 2f       	mov	r25, r22
    3792:	a7 2f       	mov	r26, r23
    3794:	29 01       	movw	r4, r18
    3796:	3a 01       	movw	r6, r20
    3798:	ed b6       	in	r14, 0x3d	; 61
    379a:	fe b6       	in	r15, 0x3e	; 62
    379c:	ba 01       	movw	r22, r20
    379e:	a9 01       	movw	r20, r18
    37a0:	4f 5f       	subi	r20, 0xFF	; 255
    37a2:	5f 4f       	sbci	r21, 0xFF	; 255
    37a4:	6f 4f       	sbci	r22, 0xFF	; 255
    37a6:	7f 4f       	sbci	r23, 0xFF	; 255
    37a8:	2d b7       	in	r18, 0x3d	; 61
    37aa:	3e b7       	in	r19, 0x3e	; 62
    37ac:	24 1b       	sub	r18, r20
    37ae:	35 0b       	sbc	r19, r21
    37b0:	0f b6       	in	r0, 0x3f	; 63
    37b2:	f8 94       	cli
    37b4:	3e bf       	out	0x3e, r19	; 62
    37b6:	0f be       	out	0x3f, r0	; 63
    37b8:	2d bf       	out	0x3d, r18	; 61
    37ba:	ed b7       	in	r30, 0x3d	; 61
    37bc:	fe b7       	in	r31, 0x3e	; 62
    37be:	31 96       	adiw	r30, 0x01	; 1
    37c0:	6f 01       	movw	r12, r30
    37c2:	5f 01       	movw	r10, r30
    37c4:	ed b7       	in	r30, 0x3d	; 61
    37c6:	fe b7       	in	r31, 0x3e	; 62
    37c8:	81 83       	std	Z+1, r24	; 0x01
    37ca:	41 14       	cp	r4, r1
    37cc:	51 04       	cpc	r5, r1
    37ce:	61 04       	cpc	r6, r1
    37d0:	71 04       	cpc	r7, r1
    37d2:	99 f0       	breq	.+38     	; 0x37fa <SetHMC5883LRegister+0x8a>
    37d4:	e9 2f       	mov	r30, r25
    37d6:	fa 2f       	mov	r31, r26
    37d8:	00 e0       	ldi	r16, 0x00	; 0
    37da:	10 e0       	ldi	r17, 0x00	; 0
    37dc:	98 01       	movw	r18, r16
    37de:	0f 5f       	subi	r16, 0xFF	; 255
    37e0:	1f 4f       	sbci	r17, 0xFF	; 255
    37e2:	2f 4f       	sbci	r18, 0xFF	; 255
    37e4:	3f 4f       	sbci	r19, 0xFF	; 255
    37e6:	81 91       	ld	r24, Z+
    37e8:	d5 01       	movw	r26, r10
    37ea:	a0 0f       	add	r26, r16
    37ec:	b1 1f       	adc	r27, r17
    37ee:	8c 93       	st	X, r24
    37f0:	04 15       	cp	r16, r4
    37f2:	15 05       	cpc	r17, r5
    37f4:	26 05       	cpc	r18, r6
    37f6:	37 05       	cpc	r19, r7
    37f8:	91 f7       	brne	.-28     	; 0x37de <SetHMC5883LRegister+0x6e>
    37fa:	01 e0       	ldi	r16, 0x01	; 1
    37fc:	20 e5       	ldi	r18, 0x50	; 80
    37fe:	36 e1       	ldi	r19, 0x16	; 22
    3800:	c6 01       	movw	r24, r12
    3802:	0e 94 2d 12 	call	0x245a	; 0x245a <TwiTransmit>
    3806:	18 2f       	mov	r17, r24
    3808:	81 11       	cpse	r24, r1
    380a:	0b c0       	rjmp	.+22     	; 0x3822 <SetHMC5883LRegister+0xb2>
    380c:	25 eb       	ldi	r18, 0xB5	; 181
    380e:	3b e0       	ldi	r19, 0x0B	; 11
    3810:	3f 93       	push	r19
    3812:	2f 93       	push	r18
    3814:	81 e0       	ldi	r24, 0x01	; 1
    3816:	8f 93       	push	r24
    3818:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    381c:	0f 90       	pop	r0
    381e:	0f 90       	pop	r0
    3820:	0f 90       	pop	r0
    3822:	81 2f       	mov	r24, r17
    3824:	0f b6       	in	r0, 0x3f	; 63
    3826:	f8 94       	cli
    3828:	fe be       	out	0x3e, r15	; 62
    382a:	0f be       	out	0x3f, r0	; 63
    382c:	ed be       	out	0x3d, r14	; 61
    382e:	df 91       	pop	r29
    3830:	cf 91       	pop	r28
    3832:	1f 91       	pop	r17
    3834:	0f 91       	pop	r16
    3836:	ff 90       	pop	r15
    3838:	ef 90       	pop	r14
    383a:	df 90       	pop	r13
    383c:	cf 90       	pop	r12
    383e:	bf 90       	pop	r11
    3840:	af 90       	pop	r10
    3842:	7f 90       	pop	r7
    3844:	6f 90       	pop	r6
    3846:	5f 90       	pop	r5
    3848:	4f 90       	pop	r4
    384a:	08 95       	ret

0000384c <IsHMC5883LDataReady>:
    384c:	1f 93       	push	r17
    384e:	cf 93       	push	r28
    3850:	df 93       	push	r29
    3852:	1f 92       	push	r1
    3854:	cd b7       	in	r28, 0x3d	; 61
    3856:	de b7       	in	r29, 0x3e	; 62
    3858:	21 e0       	ldi	r18, 0x01	; 1
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	40 e0       	ldi	r20, 0x00	; 0
    385e:	50 e0       	ldi	r21, 0x00	; 0
    3860:	be 01       	movw	r22, r28
    3862:	6f 5f       	subi	r22, 0xFF	; 255
    3864:	7f 4f       	sbci	r23, 0xFF	; 255
    3866:	89 e0       	ldi	r24, 0x09	; 9
    3868:	8c de       	rcall	.-744    	; 0x3582 <ReadHMC5883LRegister>
    386a:	18 2f       	mov	r17, r24
    386c:	81 11       	cpse	r24, r1
    386e:	0c c0       	rjmp	.+24     	; 0x3888 <IsHMC5883LDataReady+0x3c>
    3870:	21 e6       	ldi	r18, 0x61	; 97
    3872:	32 e1       	ldi	r19, 0x12	; 18
    3874:	3f 93       	push	r19
    3876:	2f 93       	push	r18
    3878:	81 e0       	ldi	r24, 0x01	; 1
    387a:	8f 93       	push	r24
    387c:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    3880:	0f 90       	pop	r0
    3882:	0f 90       	pop	r0
    3884:	0f 90       	pop	r0
    3886:	1e c0       	rjmp	.+60     	; 0x38c4 <IsHMC5883LDataReady+0x78>
    3888:	89 81       	ldd	r24, Y+1	; 0x01
    388a:	80 ff       	sbrs	r24, 0
    388c:	1a c0       	rjmp	.+52     	; 0x38c2 <IsHMC5883LDataReady+0x76>
    388e:	82 60       	ori	r24, 0x02	; 2
    3890:	89 83       	std	Y+1, r24	; 0x01
    3892:	21 e0       	ldi	r18, 0x01	; 1
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	40 e0       	ldi	r20, 0x00	; 0
    3898:	50 e0       	ldi	r21, 0x00	; 0
    389a:	be 01       	movw	r22, r28
    389c:	6f 5f       	subi	r22, 0xFF	; 255
    389e:	7f 4f       	sbci	r23, 0xFF	; 255
    38a0:	89 e0       	ldi	r24, 0x09	; 9
    38a2:	66 df       	rcall	.-308    	; 0x3770 <SetHMC5883LRegister>
    38a4:	18 2f       	mov	r17, r24
    38a6:	81 11       	cpse	r24, r1
    38a8:	0d c0       	rjmp	.+26     	; 0x38c4 <IsHMC5883LDataReady+0x78>
    38aa:	2f e7       	ldi	r18, 0x7F	; 127
    38ac:	32 e1       	ldi	r19, 0x12	; 18
    38ae:	3f 93       	push	r19
    38b0:	2f 93       	push	r18
    38b2:	81 e0       	ldi	r24, 0x01	; 1
    38b4:	8f 93       	push	r24
    38b6:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    38ba:	0f 90       	pop	r0
    38bc:	0f 90       	pop	r0
    38be:	0f 90       	pop	r0
    38c0:	01 c0       	rjmp	.+2      	; 0x38c4 <IsHMC5883LDataReady+0x78>
    38c2:	10 e0       	ldi	r17, 0x00	; 0
    38c4:	81 2f       	mov	r24, r17
    38c6:	0f 90       	pop	r0
    38c8:	df 91       	pop	r29
    38ca:	cf 91       	pop	r28
    38cc:	1f 91       	pop	r17
    38ce:	08 95       	ret

000038d0 <ReadHMC5883LContinuousMeasurementData>:
    38d0:	1f 93       	push	r17
    38d2:	cf 93       	push	r28
    38d4:	df 93       	push	r29
    38d6:	ec 01       	movw	r28, r24
    38d8:	80 91 01 16 	lds	r24, 0x1601
    38dc:	81 11       	cpse	r24, r1
    38de:	0d c0       	rjmp	.+26     	; 0x38fa <ReadHMC5883LContinuousMeasurementData+0x2a>
    38e0:	8d e9       	ldi	r24, 0x9D	; 157
    38e2:	92 e1       	ldi	r25, 0x12	; 18
    38e4:	9f 93       	push	r25
    38e6:	8f 93       	push	r24
    38e8:	81 e0       	ldi	r24, 0x01	; 1
    38ea:	8f 93       	push	r24
    38ec:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    38f0:	0f 90       	pop	r0
    38f2:	0f 90       	pop	r0
    38f4:	0f 90       	pop	r0
    38f6:	10 e0       	ldi	r17, 0x00	; 0
    38f8:	63 c0       	rjmp	.+198    	; 0x39c0 <ReadHMC5883LContinuousMeasurementData+0xf0>
    38fa:	80 91 51 16 	lds	r24, 0x1651
    38fe:	88 23       	and	r24, r24
    3900:	69 f0       	breq	.+26     	; 0x391c <ReadHMC5883LContinuousMeasurementData+0x4c>
    3902:	8e eb       	ldi	r24, 0xBE	; 190
    3904:	92 e1       	ldi	r25, 0x12	; 18
    3906:	9f 93       	push	r25
    3908:	8f 93       	push	r24
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	8f 93       	push	r24
    390e:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    3912:	0f 90       	pop	r0
    3914:	0f 90       	pop	r0
    3916:	0f 90       	pop	r0
    3918:	10 e0       	ldi	r17, 0x00	; 0
    391a:	52 c0       	rjmp	.+164    	; 0x39c0 <ReadHMC5883LContinuousMeasurementData+0xf0>
    391c:	97 df       	rcall	.-210    	; 0x384c <IsHMC5883LDataReady>
    391e:	88 23       	and	r24, r24
    3920:	09 f4       	brne	.+2      	; 0x3924 <ReadHMC5883LContinuousMeasurementData+0x54>
    3922:	42 c0       	rjmp	.+132    	; 0x39a8 <ReadHMC5883LContinuousMeasurementData+0xd8>
    3924:	ce 01       	movw	r24, r28
    3926:	db de       	rcall	.-586    	; 0x36de <ReadHMC5883LData>
    3928:	18 2f       	mov	r17, r24
    392a:	81 11       	cpse	r24, r1
    392c:	0c c0       	rjmp	.+24     	; 0x3946 <ReadHMC5883LContinuousMeasurementData+0x76>
    392e:	81 ef       	ldi	r24, 0xF1	; 241
    3930:	92 e1       	ldi	r25, 0x12	; 18
    3932:	9f 93       	push	r25
    3934:	8f 93       	push	r24
    3936:	84 e0       	ldi	r24, 0x04	; 4
    3938:	8f 93       	push	r24
    393a:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    393e:	0f 90       	pop	r0
    3940:	0f 90       	pop	r0
    3942:	0f 90       	pop	r0
    3944:	3d c0       	rjmp	.+122    	; 0x39c0 <ReadHMC5883LContinuousMeasurementData+0xf0>
    3946:	68 81       	ld	r22, Y
    3948:	79 81       	ldd	r23, Y+1	; 0x01
    394a:	88 27       	eor	r24, r24
    394c:	77 fd       	sbrc	r23, 7
    394e:	80 95       	com	r24
    3950:	98 2f       	mov	r25, r24
    3952:	9a d6       	rcall	.+3380   	; 0x4688 <__floatsisf>
    3954:	20 e0       	ldi	r18, 0x00	; 0
    3956:	30 e0       	ldi	r19, 0x00	; 0
    3958:	4a ef       	ldi	r20, 0xFA	; 250
    395a:	5e e3       	ldi	r21, 0x3E	; 62
    395c:	fc d7       	rcall	.+4088   	; 0x4956 <__mulsf3>
    395e:	6e 83       	std	Y+6, r22	; 0x06
    3960:	7f 83       	std	Y+7, r23	; 0x07
    3962:	88 87       	std	Y+8, r24	; 0x08
    3964:	99 87       	std	Y+9, r25	; 0x09
    3966:	6a 81       	ldd	r22, Y+2	; 0x02
    3968:	7b 81       	ldd	r23, Y+3	; 0x03
    396a:	88 27       	eor	r24, r24
    396c:	77 fd       	sbrc	r23, 7
    396e:	80 95       	com	r24
    3970:	98 2f       	mov	r25, r24
    3972:	8a d6       	rcall	.+3348   	; 0x4688 <__floatsisf>
    3974:	20 e0       	ldi	r18, 0x00	; 0
    3976:	30 e0       	ldi	r19, 0x00	; 0
    3978:	4a ef       	ldi	r20, 0xFA	; 250
    397a:	5e e3       	ldi	r21, 0x3E	; 62
    397c:	ec d7       	rcall	.+4056   	; 0x4956 <__mulsf3>
    397e:	6a 87       	std	Y+10, r22	; 0x0a
    3980:	7b 87       	std	Y+11, r23	; 0x0b
    3982:	8c 87       	std	Y+12, r24	; 0x0c
    3984:	9d 87       	std	Y+13, r25	; 0x0d
    3986:	6c 81       	ldd	r22, Y+4	; 0x04
    3988:	7d 81       	ldd	r23, Y+5	; 0x05
    398a:	88 27       	eor	r24, r24
    398c:	77 fd       	sbrc	r23, 7
    398e:	80 95       	com	r24
    3990:	98 2f       	mov	r25, r24
    3992:	7a d6       	rcall	.+3316   	; 0x4688 <__floatsisf>
    3994:	20 e0       	ldi	r18, 0x00	; 0
    3996:	30 e0       	ldi	r19, 0x00	; 0
    3998:	4a ef       	ldi	r20, 0xFA	; 250
    399a:	5e e3       	ldi	r21, 0x3E	; 62
    399c:	dc d7       	rcall	.+4024   	; 0x4956 <__mulsf3>
    399e:	6e 87       	std	Y+14, r22	; 0x0e
    39a0:	7f 87       	std	Y+15, r23	; 0x0f
    39a2:	88 8b       	std	Y+16, r24	; 0x10
    39a4:	99 8b       	std	Y+17, r25	; 0x11
    39a6:	0c c0       	rjmp	.+24     	; 0x39c0 <ReadHMC5883LContinuousMeasurementData+0xf0>
    39a8:	80 e1       	ldi	r24, 0x10	; 16
    39aa:	93 e1       	ldi	r25, 0x13	; 19
    39ac:	9f 93       	push	r25
    39ae:	8f 93       	push	r24
    39b0:	84 e0       	ldi	r24, 0x04	; 4
    39b2:	8f 93       	push	r24
    39b4:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    39b8:	0f 90       	pop	r0
    39ba:	0f 90       	pop	r0
    39bc:	0f 90       	pop	r0
    39be:	10 e0       	ldi	r17, 0x00	; 0
    39c0:	81 2f       	mov	r24, r17
    39c2:	df 91       	pop	r29
    39c4:	cf 91       	pop	r28
    39c6:	1f 91       	pop	r17
    39c8:	08 95       	ret

000039ca <CheckHMC5883LDeviceId>:

	return Status;
}

bool CheckHMC5883LDeviceId()
{
    39ca:	1f 93       	push	r17
    39cc:	cf 93       	push	r28
    39ce:	df 93       	push	r29
    39d0:	1f 92       	push	r1
    39d2:	cd b7       	in	r28, 0x3d	; 61
    39d4:	de b7       	in	r29, 0x3e	; 62
	bool Status = FALSE;
	
	unsigned char DeviceId = 0;
    39d6:	19 82       	std	Y+1, r1	; 0x01
	
	Status = ReadHMC5883LRegister(ADR_ID_REG_A, &DeviceId, sizeof(unsigned char));
    39d8:	21 e0       	ldi	r18, 0x01	; 1
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	40 e0       	ldi	r20, 0x00	; 0
    39de:	50 e0       	ldi	r21, 0x00	; 0
    39e0:	be 01       	movw	r22, r28
    39e2:	6f 5f       	subi	r22, 0xFF	; 255
    39e4:	7f 4f       	sbci	r23, 0xFF	; 255
    39e6:	8a e0       	ldi	r24, 0x0A	; 10
    39e8:	cc dd       	rcall	.-1128   	; 0x3582 <ReadHMC5883LRegister>
    39ea:	18 2f       	mov	r17, r24
	
	if (!Status)
    39ec:	81 11       	cpse	r24, r1
    39ee:	0c c0       	rjmp	.+24     	; 0x3a08 <CheckHMC5883LDeviceId+0x3e>
	{
		SendTrace(ERROR_LEVEL, "Failed to read Magnetometer Device Id A. \r\n");
    39f0:	20 e8       	ldi	r18, 0x80	; 128
    39f2:	33 e1       	ldi	r19, 0x13	; 19
    39f4:	3f 93       	push	r19
    39f6:	2f 93       	push	r18
    39f8:	81 e0       	ldi	r24, 0x01	; 1
    39fa:	8f 93       	push	r24
    39fc:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    3a00:	0f 90       	pop	r0
    3a02:	0f 90       	pop	r0
    3a04:	0f 90       	pop	r0
    3a06:	67 c0       	rjmp	.+206    	; 0x3ad6 <CheckHMC5883LDeviceId+0x10c>
	}
	
	if (DeviceId != ID_A)
    3a08:	89 81       	ldd	r24, Y+1	; 0x01
    3a0a:	88 34       	cpi	r24, 0x48	; 72
    3a0c:	79 f0       	breq	.+30     	; 0x3a2c <CheckHMC5883LDeviceId+0x62>
	{
		SendTrace(ERROR_LEVEL, "Magnetometer Device Id A does not match 0x%x. \r\n", DeviceId);
    3a0e:	1f 92       	push	r1
    3a10:	8f 93       	push	r24
    3a12:	8c ea       	ldi	r24, 0xAC	; 172
    3a14:	93 e1       	ldi	r25, 0x13	; 19
    3a16:	9f 93       	push	r25
    3a18:	8f 93       	push	r24
    3a1a:	81 e0       	ldi	r24, 0x01	; 1
    3a1c:	8f 93       	push	r24
    3a1e:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    3a22:	0f 90       	pop	r0
    3a24:	0f 90       	pop	r0
    3a26:	0f 90       	pop	r0
    3a28:	0f 90       	pop	r0
    3a2a:	0f 90       	pop	r0
		
		Status = FALSE;
	}
	
	Status = ReadHMC5883LRegister(ADR_ID_REG_B, &DeviceId, sizeof(unsigned char));
    3a2c:	21 e0       	ldi	r18, 0x01	; 1
    3a2e:	30 e0       	ldi	r19, 0x00	; 0
    3a30:	40 e0       	ldi	r20, 0x00	; 0
    3a32:	50 e0       	ldi	r21, 0x00	; 0
    3a34:	be 01       	movw	r22, r28
    3a36:	6f 5f       	subi	r22, 0xFF	; 255
    3a38:	7f 4f       	sbci	r23, 0xFF	; 255
    3a3a:	8b e0       	ldi	r24, 0x0B	; 11
    3a3c:	a2 dd       	rcall	.-1212   	; 0x3582 <ReadHMC5883LRegister>
    3a3e:	18 2f       	mov	r17, r24
	
	if (!Status)
    3a40:	81 11       	cpse	r24, r1
    3a42:	0c c0       	rjmp	.+24     	; 0x3a5c <CheckHMC5883LDeviceId+0x92>
	{
		SendTrace(ERROR_LEVEL, "Failed to read Magnetometer Device Id B. \r\n");
    3a44:	2d ed       	ldi	r18, 0xDD	; 221
    3a46:	33 e1       	ldi	r19, 0x13	; 19
    3a48:	3f 93       	push	r19
    3a4a:	2f 93       	push	r18
    3a4c:	81 e0       	ldi	r24, 0x01	; 1
    3a4e:	8f 93       	push	r24
    3a50:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    3a54:	0f 90       	pop	r0
    3a56:	0f 90       	pop	r0
    3a58:	0f 90       	pop	r0
    3a5a:	3d c0       	rjmp	.+122    	; 0x3ad6 <CheckHMC5883LDeviceId+0x10c>
	}
	
	if (DeviceId != ID_B)
    3a5c:	89 81       	ldd	r24, Y+1	; 0x01
    3a5e:	84 33       	cpi	r24, 0x34	; 52
    3a60:	79 f0       	breq	.+30     	; 0x3a80 <CheckHMC5883LDeviceId+0xb6>
	{
		SendTrace(ERROR_LEVEL, "Magnetometer Device Id B does not match 0x%x. \r\n", DeviceId);
    3a62:	1f 92       	push	r1
    3a64:	8f 93       	push	r24
    3a66:	89 e0       	ldi	r24, 0x09	; 9
    3a68:	94 e1       	ldi	r25, 0x14	; 20
    3a6a:	9f 93       	push	r25
    3a6c:	8f 93       	push	r24
    3a6e:	81 e0       	ldi	r24, 0x01	; 1
    3a70:	8f 93       	push	r24
    3a72:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    3a76:	0f 90       	pop	r0
    3a78:	0f 90       	pop	r0
    3a7a:	0f 90       	pop	r0
    3a7c:	0f 90       	pop	r0
    3a7e:	0f 90       	pop	r0
		
		Status = FALSE;
	}
	
	Status = ReadHMC5883LRegister(ADR_ID_REG_C, &DeviceId, sizeof(unsigned char));
    3a80:	21 e0       	ldi	r18, 0x01	; 1
    3a82:	30 e0       	ldi	r19, 0x00	; 0
    3a84:	40 e0       	ldi	r20, 0x00	; 0
    3a86:	50 e0       	ldi	r21, 0x00	; 0
    3a88:	be 01       	movw	r22, r28
    3a8a:	6f 5f       	subi	r22, 0xFF	; 255
    3a8c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a8e:	8c e0       	ldi	r24, 0x0C	; 12
    3a90:	78 dd       	rcall	.-1296   	; 0x3582 <ReadHMC5883LRegister>
    3a92:	18 2f       	mov	r17, r24
	
	if (!Status)
    3a94:	81 11       	cpse	r24, r1
    3a96:	0c c0       	rjmp	.+24     	; 0x3ab0 <CheckHMC5883LDeviceId+0xe6>
	{
		SendTrace(ERROR_LEVEL, "Failed to read Magnetometer Device Id C. \r\n");
    3a98:	2a e3       	ldi	r18, 0x3A	; 58
    3a9a:	34 e1       	ldi	r19, 0x14	; 20
    3a9c:	3f 93       	push	r19
    3a9e:	2f 93       	push	r18
    3aa0:	81 e0       	ldi	r24, 0x01	; 1
    3aa2:	8f 93       	push	r24
    3aa4:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    3aa8:	0f 90       	pop	r0
    3aaa:	0f 90       	pop	r0
    3aac:	0f 90       	pop	r0
    3aae:	13 c0       	rjmp	.+38     	; 0x3ad6 <CheckHMC5883LDeviceId+0x10c>
	}
	
	if (DeviceId != ID_C)
    3ab0:	89 81       	ldd	r24, Y+1	; 0x01
    3ab2:	83 33       	cpi	r24, 0x33	; 51
    3ab4:	81 f0       	breq	.+32     	; 0x3ad6 <CheckHMC5883LDeviceId+0x10c>
	{
		SendTrace(ERROR_LEVEL, "Magnetometer Device Id C does not match 0x%x. \r\n", DeviceId);
    3ab6:	1f 92       	push	r1
    3ab8:	8f 93       	push	r24
    3aba:	86 e6       	ldi	r24, 0x66	; 102
    3abc:	94 e1       	ldi	r25, 0x14	; 20
    3abe:	9f 93       	push	r25
    3ac0:	8f 93       	push	r24
    3ac2:	81 e0       	ldi	r24, 0x01	; 1
    3ac4:	8f 93       	push	r24
    3ac6:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    3aca:	0f 90       	pop	r0
    3acc:	0f 90       	pop	r0
    3ace:	0f 90       	pop	r0
    3ad0:	0f 90       	pop	r0
    3ad2:	0f 90       	pop	r0
		
		Status = FALSE;
    3ad4:	10 e0       	ldi	r17, 0x00	; 0
	}
	
Exit:
	
	return Status;
    3ad6:	81 2f       	mov	r24, r17
    3ad8:	0f 90       	pop	r0
    3ada:	df 91       	pop	r29
    3adc:	cf 91       	pop	r28
    3ade:	1f 91       	pop	r17
    3ae0:	08 95       	ret

00003ae2 <InitHMC5883LMagnetometer>:
bool InitHMC5883LMagnetometer(OP_MODE OpMode, 
							  MEASUREMENT_MODE MeasurementMode,
							  DATA_OUTPUT_RATE DataOutputRate,
							  SAMPLES_AVERAGED_PER_MEASUREMENT SamplesAveragedPerMeasurement,
							  GAIN_CONFIGURATION GainConfiguration)
{
    3ae2:	cf 92       	push	r12
    3ae4:	df 92       	push	r13
    3ae6:	ef 92       	push	r14
    3ae8:	ff 92       	push	r15
    3aea:	0f 93       	push	r16
    3aec:	1f 93       	push	r17
    3aee:	cf 93       	push	r28
    3af0:	df 93       	push	r29
    3af2:	00 d0       	rcall	.+0      	; 0x3af4 <InitHMC5883LMagnetometer+0x12>
    3af4:	1f 92       	push	r1
    3af6:	cd b7       	in	r28, 0x3d	; 61
    3af8:	de b7       	in	r29, 0x3e	; 62
    3afa:	f8 2e       	mov	r15, r24
    3afc:	d6 2e       	mov	r13, r22
    3afe:	c4 2e       	mov	r12, r20
    3b00:	e2 2e       	mov	r14, r18
	
	CONFIG_REG_B ConfigRegB;
	
	MODE_REG ModeReg;
	
	gHMC5883LDeviceAddress.Address = DEVICE_ADDRESS;
    3b02:	90 91 50 16 	lds	r25, 0x1650
    3b06:	91 70       	andi	r25, 0x01	; 1
    3b08:	9c 63       	ori	r25, 0x3C	; 60
    3b0a:	90 93 50 16 	sts	0x1650, r25
	
	if (gIsInitialized)
    3b0e:	90 91 01 16 	lds	r25, 0x1601
    3b12:	99 23       	and	r25, r25
    3b14:	99 f1       	breq	.+102    	; 0x3b7c <InitHMC5883LMagnetometer+0x9a>
		// Program Mode Register
		//
		
		ModeReg.AsUINT8 = 0;
		
		ModeReg.Mode = IDLE_MODE;
    3b16:	82 e0       	ldi	r24, 0x02	; 2
    3b18:	8b 83       	std	Y+3, r24	; 0x03
		
		Status = SetHMC5883LRegister(ADR_MODE_REG, &ModeReg, sizeof(MODE_REG));
    3b1a:	21 e0       	ldi	r18, 0x01	; 1
    3b1c:	30 e0       	ldi	r19, 0x00	; 0
    3b1e:	40 e0       	ldi	r20, 0x00	; 0
    3b20:	50 e0       	ldi	r21, 0x00	; 0
    3b22:	be 01       	movw	r22, r28
    3b24:	6d 5f       	subi	r22, 0xFD	; 253
    3b26:	7f 4f       	sbci	r23, 0xFF	; 255
    3b28:	23 de       	rcall	.-954    	; 0x3770 <SetHMC5883LRegister>
    3b2a:	18 2f       	mov	r17, r24
		
		if (!Status)
    3b2c:	81 11       	cpse	r24, r1
    3b2e:	0c c0       	rjmp	.+24     	; 0x3b48 <InitHMC5883LMagnetometer+0x66>
		{
			SendTrace(ERROR_LEVEL, "Failed to program MODE REG to stop measurement. \r\n");
    3b30:	27 e9       	ldi	r18, 0x97	; 151
    3b32:	34 e1       	ldi	r19, 0x14	; 20
    3b34:	3f 93       	push	r19
    3b36:	2f 93       	push	r18
    3b38:	81 e0       	ldi	r24, 0x01	; 1
    3b3a:	8f 93       	push	r24
    3b3c:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
			
			goto Exit;
    3b40:	0f 90       	pop	r0
    3b42:	0f 90       	pop	r0
    3b44:	0f 90       	pop	r0
    3b46:	94 c0       	rjmp	.+296    	; 0x3c70 <InitHMC5883LMagnetometer+0x18e>
		// Stop measurement.
		//
		
		ConfigRegA.AsUINT8 = 0;
		
		ConfigRegA.StartStopMeasurement = 1;
    3b48:	80 e8       	ldi	r24, 0x80	; 128
    3b4a:	89 83       	std	Y+1, r24	; 0x01
		
		Status = SetHMC5883LRegister(ADR_CONFIG_REG_A, &ConfigRegA, sizeof(CONFIG_REG_A));
    3b4c:	21 e0       	ldi	r18, 0x01	; 1
    3b4e:	30 e0       	ldi	r19, 0x00	; 0
    3b50:	40 e0       	ldi	r20, 0x00	; 0
    3b52:	50 e0       	ldi	r21, 0x00	; 0
    3b54:	be 01       	movw	r22, r28
    3b56:	6f 5f       	subi	r22, 0xFF	; 255
    3b58:	7f 4f       	sbci	r23, 0xFF	; 255
    3b5a:	80 e0       	ldi	r24, 0x00	; 0
    3b5c:	09 de       	rcall	.-1006   	; 0x3770 <SetHMC5883LRegister>
    3b5e:	18 2f       	mov	r17, r24
		
		if (!Status)
    3b60:	81 11       	cpse	r24, r1
    3b62:	1b c0       	rjmp	.+54     	; 0x3b9a <InitHMC5883LMagnetometer+0xb8>
		{
			SendTrace(ERROR_LEVEL, "Failed to program Config Reg A to stop measurement. \r\n");
    3b64:	2a ec       	ldi	r18, 0xCA	; 202
    3b66:	34 e1       	ldi	r19, 0x14	; 20
    3b68:	3f 93       	push	r19
    3b6a:	2f 93       	push	r18
    3b6c:	81 e0       	ldi	r24, 0x01	; 1
    3b6e:	8f 93       	push	r24
    3b70:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
			
			goto Exit;
    3b74:	0f 90       	pop	r0
    3b76:	0f 90       	pop	r0
    3b78:	0f 90       	pop	r0
    3b7a:	7a c0       	rjmp	.+244    	; 0x3c70 <InitHMC5883LMagnetometer+0x18e>
		}
	}
	else
	{
		if (!CheckHMC5883LDeviceId())
    3b7c:	26 df       	rcall	.-436    	; 0x39ca <CheckHMC5883LDeviceId>
    3b7e:	88 23       	and	r24, r24
    3b80:	09 f4       	brne	.+2      	; 0x3b84 <InitHMC5883LMagnetometer+0xa2>
    3b82:	75 c0       	rjmp	.+234    	; 0x3c6e <InitHMC5883LMagnetometer+0x18c>
		{
			goto Exit;
		}
		else
		{
			SendTrace(INFO_LEVEL, "Device ID Check Passed.\r\n");
    3b84:	e1 e0       	ldi	r30, 0x01	; 1
    3b86:	f5 e1       	ldi	r31, 0x15	; 21
    3b88:	ff 93       	push	r31
    3b8a:	ef 93       	push	r30
    3b8c:	84 e0       	ldi	r24, 0x04	; 4
    3b8e:	8f 93       	push	r24
    3b90:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
    3b94:	0f 90       	pop	r0
    3b96:	0f 90       	pop	r0
    3b98:	0f 90       	pop	r0
	// Program Mode Register
	//
	
	ModeReg.AsUINT8 = 0;
	
	ModeReg.Mode = OpMode;
    3b9a:	8f 2d       	mov	r24, r15
    3b9c:	83 70       	andi	r24, 0x03	; 3
    3b9e:	8b 83       	std	Y+3, r24	; 0x03
	
	Status = SetHMC5883LRegister(ADR_MODE_REG, &ModeReg, sizeof(MODE_REG));
    3ba0:	21 e0       	ldi	r18, 0x01	; 1
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	40 e0       	ldi	r20, 0x00	; 0
    3ba6:	50 e0       	ldi	r21, 0x00	; 0
    3ba8:	be 01       	movw	r22, r28
    3baa:	6d 5f       	subi	r22, 0xFD	; 253
    3bac:	7f 4f       	sbci	r23, 0xFF	; 255
    3bae:	82 e0       	ldi	r24, 0x02	; 2
    3bb0:	df dd       	rcall	.-1090   	; 0x3770 <SetHMC5883LRegister>
    3bb2:	18 2f       	mov	r17, r24
	
	if (!Status)
    3bb4:	81 11       	cpse	r24, r1
    3bb6:	0c c0       	rjmp	.+24     	; 0x3bd0 <InitHMC5883LMagnetometer+0xee>
	{
		SendTrace(ERROR_LEVEL, "Failed to program MODE REG. \r\n");
    3bb8:	2b e1       	ldi	r18, 0x1B	; 27
    3bba:	35 e1       	ldi	r19, 0x15	; 21
    3bbc:	3f 93       	push	r19
    3bbe:	2f 93       	push	r18
    3bc0:	81 e0       	ldi	r24, 0x01	; 1
    3bc2:	8f 93       	push	r24
    3bc4:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    3bc8:	0f 90       	pop	r0
    3bca:	0f 90       	pop	r0
    3bcc:	0f 90       	pop	r0
    3bce:	50 c0       	rjmp	.+160    	; 0x3c70 <InitHMC5883LMagnetometer+0x18e>
	}
	
	gHMC5883LOpMode = OpMode;
    3bd0:	f0 92 51 16 	sts	0x1651, r15
	// Program Configuration Register B
	//
	
	ConfigRegB.AsUINT8 = 0;
	
	ConfigRegB.GainConfiguration = GainConfiguration;
    3bd4:	02 95       	swap	r16
    3bd6:	00 0f       	add	r16, r16
    3bd8:	00 7e       	andi	r16, 0xE0	; 224
    3bda:	0a 83       	std	Y+2, r16	; 0x02
	
	Status = SetHMC5883LRegister(ADR_CONFIG_REG_B, &ConfigRegB, sizeof(CONFIG_REG_B));
    3bdc:	21 e0       	ldi	r18, 0x01	; 1
    3bde:	30 e0       	ldi	r19, 0x00	; 0
    3be0:	40 e0       	ldi	r20, 0x00	; 0
    3be2:	50 e0       	ldi	r21, 0x00	; 0
    3be4:	be 01       	movw	r22, r28
    3be6:	6e 5f       	subi	r22, 0xFE	; 254
    3be8:	7f 4f       	sbci	r23, 0xFF	; 255
    3bea:	81 e0       	ldi	r24, 0x01	; 1
    3bec:	c1 dd       	rcall	.-1150   	; 0x3770 <SetHMC5883LRegister>
    3bee:	18 2f       	mov	r17, r24
	
	if (!Status)
    3bf0:	81 11       	cpse	r24, r1
    3bf2:	0c c0       	rjmp	.+24     	; 0x3c0c <InitHMC5883LMagnetometer+0x12a>
	{
		SendTrace(ERROR_LEVEL, "Failed to program CONFIG REG B. \r\n");
    3bf4:	2a e3       	ldi	r18, 0x3A	; 58
    3bf6:	35 e1       	ldi	r19, 0x15	; 21
    3bf8:	3f 93       	push	r19
    3bfa:	2f 93       	push	r18
    3bfc:	81 e0       	ldi	r24, 0x01	; 1
    3bfe:	8f 93       	push	r24
    3c00:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    3c04:	0f 90       	pop	r0
    3c06:	0f 90       	pop	r0
    3c08:	0f 90       	pop	r0
    3c0a:	32 c0       	rjmp	.+100    	; 0x3c70 <InitHMC5883LMagnetometer+0x18e>
	
	//
	// Program Configuration Register A
	//
	
	ConfigRegA.DataOutputRate = DataOutputRate;
    3c0c:	8c 2d       	mov	r24, r12
    3c0e:	87 70       	andi	r24, 0x07	; 7
    3c10:	c8 2e       	mov	r12, r24
    3c12:	cc 0c       	add	r12, r12
    3c14:	cc 0c       	add	r12, r12
    3c16:	99 81       	ldd	r25, Y+1	; 0x01
    3c18:	90 7e       	andi	r25, 0xE0	; 224
	
	ConfigRegA.MeasurementMode = MeasurementMode;
    3c1a:	8d 2d       	mov	r24, r13
    3c1c:	83 70       	andi	r24, 0x03	; 3
    3c1e:	9c 29       	or	r25, r12
    3c20:	98 2b       	or	r25, r24
	
	ConfigRegA.SamplesAveragedPerMeasurement = SamplesAveragedPerMeasurement;
    3c22:	8e 2d       	mov	r24, r14
    3c24:	83 70       	andi	r24, 0x03	; 3
    3c26:	82 95       	swap	r24
    3c28:	88 0f       	add	r24, r24
    3c2a:	80 7e       	andi	r24, 0xE0	; 224
    3c2c:	9f 79       	andi	r25, 0x9F	; 159
    3c2e:	e9 2e       	mov	r14, r25
    3c30:	e8 2a       	or	r14, r24
    3c32:	e9 82       	std	Y+1, r14	; 0x01
	
	Status = SetHMC5883LRegister(ADR_CONFIG_REG_A, &ConfigRegA, sizeof(CONFIG_REG_A));
    3c34:	21 e0       	ldi	r18, 0x01	; 1
    3c36:	30 e0       	ldi	r19, 0x00	; 0
    3c38:	40 e0       	ldi	r20, 0x00	; 0
    3c3a:	50 e0       	ldi	r21, 0x00	; 0
    3c3c:	be 01       	movw	r22, r28
    3c3e:	6f 5f       	subi	r22, 0xFF	; 255
    3c40:	7f 4f       	sbci	r23, 0xFF	; 255
    3c42:	80 e0       	ldi	r24, 0x00	; 0
    3c44:	95 dd       	rcall	.-1238   	; 0x3770 <SetHMC5883LRegister>
    3c46:	18 2f       	mov	r17, r24
	
	if (!Status)
    3c48:	81 11       	cpse	r24, r1
    3c4a:	0c c0       	rjmp	.+24     	; 0x3c64 <InitHMC5883LMagnetometer+0x182>
	{
		SendTrace(ERROR_LEVEL, "Failed to program CONFIG REG A. \r\n");
    3c4c:	2d e5       	ldi	r18, 0x5D	; 93
    3c4e:	35 e1       	ldi	r19, 0x15	; 21
    3c50:	3f 93       	push	r19
    3c52:	2f 93       	push	r18
    3c54:	81 e0       	ldi	r24, 0x01	; 1
    3c56:	8f 93       	push	r24
    3c58:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
		goto Exit;
    3c5c:	0f 90       	pop	r0
    3c5e:	0f 90       	pop	r0
    3c60:	0f 90       	pop	r0
    3c62:	06 c0       	rjmp	.+12     	; 0x3c70 <InitHMC5883LMagnetometer+0x18e>
	}
	
	PrintHMC5883LConfigRegisters();
    3c64:	db dc       	rcall	.-1610   	; 0x361c <PrintHMC5883LConfigRegisters>
	
	gIsInitialized = TRUE;
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    3c68:	80 93 01 16 	sts	0x1601, r24
    3c6c:	01 c0       	rjmp	.+2      	; 0x3c70 <InitHMC5883LMagnetometer+0x18e>
							  MEASUREMENT_MODE MeasurementMode,
							  DATA_OUTPUT_RATE DataOutputRate,
							  SAMPLES_AVERAGED_PER_MEASUREMENT SamplesAveragedPerMeasurement,
							  GAIN_CONFIGURATION GainConfiguration)
{
	bool Status = FALSE;
    3c6e:	10 e0       	ldi	r17, 0x00	; 0
	gIsInitialized = TRUE;
	
Exit:

	return Status;
}
    3c70:	81 2f       	mov	r24, r17
    3c72:	0f 90       	pop	r0
    3c74:	0f 90       	pop	r0
    3c76:	0f 90       	pop	r0
    3c78:	df 91       	pop	r29
    3c7a:	cf 91       	pop	r28
    3c7c:	1f 91       	pop	r17
    3c7e:	0f 91       	pop	r16
    3c80:	ff 90       	pop	r15
    3c82:	ef 90       	pop	r14
    3c84:	df 90       	pop	r13
    3c86:	cf 90       	pop	r12
    3c88:	08 95       	ret

00003c8a <CalculatePulse>:



void
CalculatePulse(unsigned int ThValue, unsigned int XValue, unsigned int YValue)
{	
    3c8a:	2f 92       	push	r2
    3c8c:	3f 92       	push	r3
    3c8e:	4f 92       	push	r4
    3c90:	5f 92       	push	r5
    3c92:	6f 92       	push	r6
    3c94:	7f 92       	push	r7
    3c96:	8f 92       	push	r8
    3c98:	9f 92       	push	r9
    3c9a:	af 92       	push	r10
    3c9c:	bf 92       	push	r11
    3c9e:	cf 92       	push	r12
    3ca0:	df 92       	push	r13
    3ca2:	ef 92       	push	r14
    3ca4:	ff 92       	push	r15
    3ca6:	0f 93       	push	r16
    3ca8:	1f 93       	push	r17
    3caa:	cf 93       	push	r28
    3cac:	df 93       	push	r29
    3cae:	cd b7       	in	r28, 0x3d	; 61
    3cb0:	de b7       	in	r29, 0x3e	; 62
    3cb2:	a4 97       	sbiw	r28, 0x24	; 36
    3cb4:	0f b6       	in	r0, 0x3f	; 63
    3cb6:	f8 94       	cli
    3cb8:	de bf       	out	0x3e, r29	; 62
    3cba:	0f be       	out	0x3f, r0	; 63
    3cbc:	cd bf       	out	0x3d, r28	; 61
    3cbe:	5b 01       	movw	r10, r22
    3cc0:	8a 01       	movw	r16, r20
	
	//
	// Calculate Pulse
	//
	
	gThPulse = ThValue / (double)TH_SCALE_FACTOR;
    3cc2:	bc 01       	movw	r22, r24
    3cc4:	80 e0       	ldi	r24, 0x00	; 0
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	dd d4       	rcall	.+2490   	; 0x4684 <__floatunsisf>
    3cca:	20 e0       	ldi	r18, 0x00	; 0
    3ccc:	30 e0       	ldi	r19, 0x00	; 0
    3cce:	4a ea       	ldi	r20, 0xAA	; 170
    3cd0:	52 e4       	ldi	r21, 0x42	; 66
    3cd2:	01 d4       	rcall	.+2050   	; 0x44d6 <__divsf3>
    3cd4:	6b 01       	movw	r12, r22
    3cd6:	7c 01       	movw	r14, r24
    3cd8:	60 93 52 16 	sts	0x1652, r22
    3cdc:	70 93 53 16 	sts	0x1653, r23
    3ce0:	80 93 54 16 	sts	0x1654, r24
    3ce4:	90 93 55 16 	sts	0x1655, r25
	
	//
	// Scale XPulse and YPulse to -1 to 1.
	//
	
	XPulse = ((XValue - ADC_CENTER) * 2.0) / ADC_MAX_VALUE;
    3ce8:	b5 01       	movw	r22, r10
    3cea:	80 e0       	ldi	r24, 0x00	; 0
    3cec:	90 e0       	ldi	r25, 0x00	; 0
    3cee:	ca d4       	rcall	.+2452   	; 0x4684 <__floatunsisf>
    3cf0:	20 e0       	ldi	r18, 0x00	; 0
    3cf2:	30 e0       	ldi	r19, 0x00	; 0
    3cf4:	4f ef       	ldi	r20, 0xFF	; 255
    3cf6:	53 e4       	ldi	r21, 0x43	; 67
    3cf8:	20 d3       	rcall	.+1600   	; 0x433a <__subsf3>
    3cfa:	9b 01       	movw	r18, r22
    3cfc:	ac 01       	movw	r20, r24
    3cfe:	1e d3       	rcall	.+1596   	; 0x433c <__addsf3>
    3d00:	20 e0       	ldi	r18, 0x00	; 0
    3d02:	30 e0       	ldi	r19, 0x00	; 0
    3d04:	4f e7       	ldi	r20, 0x7F	; 127
    3d06:	54 e4       	ldi	r21, 0x44	; 68
    3d08:	e6 d3       	rcall	.+1996   	; 0x44d6 <__divsf3>
    3d0a:	2b 01       	movw	r4, r22
    3d0c:	3c 01       	movw	r6, r24
	
	YPulse = ((YValue - ADC_CENTER) * 2.0) / ADC_MAX_VALUE;
    3d0e:	b8 01       	movw	r22, r16
    3d10:	80 e0       	ldi	r24, 0x00	; 0
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	b7 d4       	rcall	.+2414   	; 0x4684 <__floatunsisf>
    3d16:	20 e0       	ldi	r18, 0x00	; 0
    3d18:	30 e0       	ldi	r19, 0x00	; 0
    3d1a:	4f ef       	ldi	r20, 0xFF	; 255
    3d1c:	53 e4       	ldi	r21, 0x43	; 67
    3d1e:	0d d3       	rcall	.+1562   	; 0x433a <__subsf3>
    3d20:	9b 01       	movw	r18, r22
    3d22:	ac 01       	movw	r20, r24
    3d24:	0b d3       	rcall	.+1558   	; 0x433c <__addsf3>
    3d26:	20 e0       	ldi	r18, 0x00	; 0
    3d28:	30 e0       	ldi	r19, 0x00	; 0
    3d2a:	4f e7       	ldi	r20, 0x7F	; 127
    3d2c:	54 e4       	ldi	r21, 0x44	; 68
    3d2e:	d3 d3       	rcall	.+1958   	; 0x44d6 <__divsf3>
    3d30:	4b 01       	movw	r8, r22
    3d32:	5c 01       	movw	r10, r24
	
	//
	// Scale XPulse and YPulse to current Thrust scale
	//
	
	XPulse = XPulse * (gThPulse / PWM_PULSE_DIVS);
    3d34:	20 e0       	ldi	r18, 0x00	; 0
    3d36:	30 e0       	ldi	r19, 0x00	; 0
    3d38:	40 e8       	ldi	r20, 0x80	; 128
    3d3a:	5d e3       	ldi	r21, 0x3D	; 61
    3d3c:	c7 01       	movw	r24, r14
    3d3e:	b6 01       	movw	r22, r12
    3d40:	0a d6       	rcall	.+3092   	; 0x4956 <__mulsf3>
    3d42:	6b 01       	movw	r12, r22
    3d44:	7c 01       	movw	r14, r24
    3d46:	a3 01       	movw	r20, r6
    3d48:	92 01       	movw	r18, r4
    3d4a:	05 d6       	rcall	.+3082   	; 0x4956 <__mulsf3>
    3d4c:	6d 8f       	std	Y+29, r22	; 0x1d
    3d4e:	7e 8f       	std	Y+30, r23	; 0x1e
    3d50:	8f 8f       	std	Y+31, r24	; 0x1f
    3d52:	98 a3       	std	Y+32, r25	; 0x20
	
	YPulse = YPulse * (gThPulse / PWM_PULSE_DIVS);
    3d54:	a7 01       	movw	r20, r14
    3d56:	96 01       	movw	r18, r12
    3d58:	c5 01       	movw	r24, r10
    3d5a:	b4 01       	movw	r22, r8
    3d5c:	fc d5       	rcall	.+3064   	; 0x4956 <__mulsf3>
    3d5e:	69 a3       	std	Y+33, r22	; 0x21
    3d60:	7a a3       	std	Y+34, r23	; 0x22
    3d62:	8b a3       	std	Y+35, r24	; 0x23
    3d64:	9c a3       	std	Y+36, r25	; 0x24

	//
	// Read Accelerometer Data
	//
	
	Status = ReadADXL345AccAndTiltData(DEGREES, &AccTiltData);
    3d66:	be 01       	movw	r22, r28
    3d68:	6f 5f       	subi	r22, 0xFF	; 255
    3d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d6c:	81 e0       	ldi	r24, 0x01	; 1
    3d6e:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <ReadADXL345AccAndTiltData>
	
	if (!Status)
    3d72:	81 11       	cpse	r24, r1
    3d74:	24 c0       	rjmp	.+72     	; 0x3dbe <CalculatePulse+0x134>
	{
		SendTrace(ERROR_LEVEL, "Failed to read Accelerometer Data.\r\n");
    3d76:	87 e9       	ldi	r24, 0x97	; 151
    3d78:	92 e0       	ldi	r25, 0x02	; 2
    3d7a:	9f 93       	push	r25
    3d7c:	8f 93       	push	r24
    3d7e:	81 e0       	ldi	r24, 0x01	; 1
    3d80:	8f 93       	push	r24
    3d82:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
			
		AccTiltData.AccX = gAccX;
    3d86:	80 91 06 16 	lds	r24, 0x1606
    3d8a:	90 91 07 16 	lds	r25, 0x1607
    3d8e:	a0 91 08 16 	lds	r26, 0x1608
    3d92:	b0 91 09 16 	lds	r27, 0x1609
    3d96:	89 83       	std	Y+1, r24	; 0x01
    3d98:	9a 83       	std	Y+2, r25	; 0x02
    3d9a:	ab 83       	std	Y+3, r26	; 0x03
    3d9c:	bc 83       	std	Y+4, r27	; 0x04
		
		AccTiltData.AccY = gAccY;
    3d9e:	80 91 02 16 	lds	r24, 0x1602
    3da2:	90 91 03 16 	lds	r25, 0x1603
    3da6:	a0 91 04 16 	lds	r26, 0x1604
    3daa:	b0 91 05 16 	lds	r27, 0x1605
    3dae:	8d 83       	std	Y+5, r24	; 0x05
    3db0:	9e 83       	std	Y+6, r25	; 0x06
    3db2:	af 83       	std	Y+7, r26	; 0x07
    3db4:	b8 87       	std	Y+8, r27	; 0x08
    3db6:	0f 90       	pop	r0
    3db8:	0f 90       	pop	r0
    3dba:	0f 90       	pop	r0
    3dbc:	18 c0       	rjmp	.+48     	; 0x3dee <CalculatePulse+0x164>
	}
	else
	{
		gAccX = AccTiltData.AccX;
    3dbe:	89 81       	ldd	r24, Y+1	; 0x01
    3dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    3dc2:	ab 81       	ldd	r26, Y+3	; 0x03
    3dc4:	bc 81       	ldd	r27, Y+4	; 0x04
    3dc6:	80 93 06 16 	sts	0x1606, r24
    3dca:	90 93 07 16 	sts	0x1607, r25
    3dce:	a0 93 08 16 	sts	0x1608, r26
    3dd2:	b0 93 09 16 	sts	0x1609, r27
		
		gAccY = AccTiltData.AccY;
    3dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    3dda:	af 81       	ldd	r26, Y+7	; 0x07
    3ddc:	b8 85       	ldd	r27, Y+8	; 0x08
    3dde:	80 93 02 16 	sts	0x1602, r24
    3de2:	90 93 03 16 	sts	0x1603, r25
    3de6:	a0 93 04 16 	sts	0x1604, r26
    3dea:	b0 93 05 16 	sts	0x1605, r27
	
	//
	// Scale Accelerometer data to current Thrust scale
	//
	
	 AccTiltData.AccX =  (AccTiltData.AccX / 2.0) * (gThPulse / PWM_PULSE_DIVS);
    3dee:	80 91 52 16 	lds	r24, 0x1652
    3df2:	89 8f       	std	Y+25, r24	; 0x19
    3df4:	90 91 53 16 	lds	r25, 0x1653
    3df8:	9a 8f       	std	Y+26, r25	; 0x1a
    3dfa:	80 91 54 16 	lds	r24, 0x1654
    3dfe:	8b 8f       	std	Y+27, r24	; 0x1b
    3e00:	90 91 55 16 	lds	r25, 0x1655
    3e04:	9c 8f       	std	Y+28, r25	; 0x1c
    3e06:	20 e0       	ldi	r18, 0x00	; 0
    3e08:	30 e0       	ldi	r19, 0x00	; 0
    3e0a:	40 e8       	ldi	r20, 0x80	; 128
    3e0c:	5d e3       	ldi	r21, 0x3D	; 61
    3e0e:	b9 8d       	ldd	r27, Y+25	; 0x19
    3e10:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3e12:	6b 2f       	mov	r22, r27
    3e14:	7a 2f       	mov	r23, r26
    3e16:	9f d5       	rcall	.+2878   	; 0x4956 <__mulsf3>
    3e18:	6b 01       	movw	r12, r22
    3e1a:	7c 01       	movw	r14, r24
    3e1c:	20 e0       	ldi	r18, 0x00	; 0
    3e1e:	30 e0       	ldi	r19, 0x00	; 0
    3e20:	40 e0       	ldi	r20, 0x00	; 0
    3e22:	5f e3       	ldi	r21, 0x3F	; 63
    3e24:	69 81       	ldd	r22, Y+1	; 0x01
    3e26:	7a 81       	ldd	r23, Y+2	; 0x02
    3e28:	8b 81       	ldd	r24, Y+3	; 0x03
    3e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e2c:	94 d5       	rcall	.+2856   	; 0x4956 <__mulsf3>
    3e2e:	a7 01       	movw	r20, r14
    3e30:	96 01       	movw	r18, r12
    3e32:	91 d5       	rcall	.+2850   	; 0x4956 <__mulsf3>
    3e34:	96 2e       	mov	r9, r22
    3e36:	87 2e       	mov	r8, r23
    3e38:	78 2e       	mov	r7, r24
    3e3a:	69 2e       	mov	r6, r25
    3e3c:	86 2f       	mov	r24, r22
    3e3e:	98 2d       	mov	r25, r8
    3e40:	a7 2d       	mov	r26, r7
    3e42:	b6 2d       	mov	r27, r6
    3e44:	89 83       	std	Y+1, r24	; 0x01
    3e46:	9a 83       	std	Y+2, r25	; 0x02
    3e48:	ab 83       	std	Y+3, r26	; 0x03
    3e4a:	bc 83       	std	Y+4, r27	; 0x04
	 
	 AccTiltData.AccY =  (AccTiltData.AccY / 2.0) * (gThPulse / PWM_PULSE_DIVS);
    3e4c:	20 e0       	ldi	r18, 0x00	; 0
    3e4e:	30 e0       	ldi	r19, 0x00	; 0
    3e50:	40 e0       	ldi	r20, 0x00	; 0
    3e52:	5f e3       	ldi	r21, 0x3F	; 63
    3e54:	6d 81       	ldd	r22, Y+5	; 0x05
    3e56:	7e 81       	ldd	r23, Y+6	; 0x06
    3e58:	8f 81       	ldd	r24, Y+7	; 0x07
    3e5a:	98 85       	ldd	r25, Y+8	; 0x08
    3e5c:	7c d5       	rcall	.+2808   	; 0x4956 <__mulsf3>
    3e5e:	9b 01       	movw	r18, r22
    3e60:	ac 01       	movw	r20, r24
    3e62:	c7 01       	movw	r24, r14
    3e64:	b6 01       	movw	r22, r12
    3e66:	77 d5       	rcall	.+2798   	; 0x4956 <__mulsf3>
    3e68:	56 2e       	mov	r5, r22
    3e6a:	47 2e       	mov	r4, r23
    3e6c:	38 2e       	mov	r3, r24
    3e6e:	29 2e       	mov	r2, r25
    3e70:	86 2f       	mov	r24, r22
    3e72:	94 2d       	mov	r25, r4
    3e74:	a3 2d       	mov	r26, r3
    3e76:	b2 2d       	mov	r27, r2
    3e78:	8d 83       	std	Y+5, r24	; 0x05
    3e7a:	9e 83       	std	Y+6, r25	; 0x06
    3e7c:	af 83       	std	Y+7, r26	; 0x07
    3e7e:	b8 87       	std	Y+8, r27	; 0x08
	
	//
	// Now calculate Tilt
	//
	
	XTilt = XPulse - AccTiltData.AccX;
    3e80:	29 2d       	mov	r18, r9
    3e82:	38 2d       	mov	r19, r8
    3e84:	47 2d       	mov	r20, r7
    3e86:	56 2d       	mov	r21, r6
    3e88:	bd 8d       	ldd	r27, Y+29	; 0x1d
    3e8a:	ae 8d       	ldd	r26, Y+30	; 0x1e
    3e8c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3e8e:	e8 a1       	ldd	r30, Y+32	; 0x20
    3e90:	6b 2f       	mov	r22, r27
    3e92:	7a 2f       	mov	r23, r26
    3e94:	8f 2f       	mov	r24, r31
    3e96:	9e 2f       	mov	r25, r30
    3e98:	50 d2       	rcall	.+1184   	; 0x433a <__subsf3>
    3e9a:	a6 2e       	mov	r10, r22
    3e9c:	b7 2e       	mov	r11, r23
    3e9e:	c8 2e       	mov	r12, r24
    3ea0:	d9 2e       	mov	r13, r25
	
	YTilt = YPulse - AccTiltData.AccY;
    3ea2:	25 2d       	mov	r18, r5
    3ea4:	34 2d       	mov	r19, r4
    3ea6:	43 2d       	mov	r20, r3
    3ea8:	52 2d       	mov	r21, r2
    3eaa:	b9 a1       	ldd	r27, Y+33	; 0x21
    3eac:	aa a1       	ldd	r26, Y+34	; 0x22
    3eae:	fb a1       	ldd	r31, Y+35	; 0x23
    3eb0:	ec a1       	ldd	r30, Y+36	; 0x24
    3eb2:	6b 2f       	mov	r22, r27
    3eb4:	7a 2f       	mov	r23, r26
    3eb6:	8f 2f       	mov	r24, r31
    3eb8:	9e 2f       	mov	r25, r30
    3eba:	3f d2       	rcall	.+1150   	; 0x433a <__subsf3>
    3ebc:	e6 2e       	mov	r14, r22
    3ebe:	f7 2e       	mov	r15, r23
    3ec0:	08 2f       	mov	r16, r24
    3ec2:	19 2f       	mov	r17, r25
	
	SendTrace(INFO_LEVEL, "ThPulse = %f, XPulse = %f, YPulse = %f, AccX = %f, AccY = %f, XTilt = %f, YTilt = %f\r\n", gThPulse, XPulse, YPulse, AccTiltData.AccX, AccTiltData.AccY, XTilt, YTilt);
    3ec4:	9f 93       	push	r25
    3ec6:	8f 93       	push	r24
    3ec8:	7f 93       	push	r23
    3eca:	6f 93       	push	r22
    3ecc:	df 92       	push	r13
    3ece:	cf 92       	push	r12
    3ed0:	bf 92       	push	r11
    3ed2:	af 92       	push	r10
    3ed4:	2f 92       	push	r2
    3ed6:	3f 92       	push	r3
    3ed8:	4f 92       	push	r4
    3eda:	5f 92       	push	r5
    3edc:	6f 92       	push	r6
    3ede:	7f 92       	push	r7
    3ee0:	8f 92       	push	r8
    3ee2:	9f 92       	push	r9
    3ee4:	8c a1       	ldd	r24, Y+36	; 0x24
    3ee6:	8f 93       	push	r24
    3ee8:	9b a1       	ldd	r25, Y+35	; 0x23
    3eea:	9f 93       	push	r25
    3eec:	8a a1       	ldd	r24, Y+34	; 0x22
    3eee:	8f 93       	push	r24
    3ef0:	99 a1       	ldd	r25, Y+33	; 0x21
    3ef2:	9f 93       	push	r25
    3ef4:	88 a1       	ldd	r24, Y+32	; 0x20
    3ef6:	8f 93       	push	r24
    3ef8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3efa:	9f 93       	push	r25
    3efc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3efe:	8f 93       	push	r24
    3f00:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3f02:	9f 93       	push	r25
    3f04:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3f06:	8f 93       	push	r24
    3f08:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3f0a:	9f 93       	push	r25
    3f0c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3f0e:	8f 93       	push	r24
    3f10:	99 8d       	ldd	r25, Y+25	; 0x19
    3f12:	9f 93       	push	r25
    3f14:	80 e8       	ldi	r24, 0x80	; 128
    3f16:	95 e1       	ldi	r25, 0x15	; 21
    3f18:	9f 93       	push	r25
    3f1a:	8f 93       	push	r24
    3f1c:	84 e0       	ldi	r24, 0x04	; 4
    3f1e:	8f 93       	push	r24
    3f20:	0e 94 73 07 	call	0xee6	; 0xee6 <SendTrace>
		
	//
	// Now set PWM Pulse for X and Y axis
	//
		
	PWMChangePulseDuration(PWM_CHANNEL_0, RoundLong(gThPulse + XTilt - YTilt));
    3f24:	20 91 52 16 	lds	r18, 0x1652
    3f28:	30 91 53 16 	lds	r19, 0x1653
    3f2c:	40 91 54 16 	lds	r20, 0x1654
    3f30:	50 91 55 16 	lds	r21, 0x1655
    3f34:	6a 2d       	mov	r22, r10
    3f36:	7b 2d       	mov	r23, r11
    3f38:	8c 2d       	mov	r24, r12
    3f3a:	9d 2d       	mov	r25, r13
    3f3c:	ff d1       	rcall	.+1022   	; 0x433c <__addsf3>
    3f3e:	2e 2d       	mov	r18, r14
    3f40:	3f 2d       	mov	r19, r15
    3f42:	40 2f       	mov	r20, r16
    3f44:	51 2f       	mov	r21, r17
    3f46:	f9 d1       	rcall	.+1010   	; 0x433a <__subsf3>
    3f48:	8b d0       	rcall	.+278    	; 0x4060 <RoundLong>
    3f4a:	80 e0       	ldi	r24, 0x00	; 0
    3f4c:	0e 94 9b 0a 	call	0x1536	; 0x1536 <PWMChangePulseDuration>
		
	PWMChangePulseDuration(PWM_CHANNEL_1, RoundLong(gThPulse + XTilt + YTilt));
    3f50:	20 91 52 16 	lds	r18, 0x1652
    3f54:	30 91 53 16 	lds	r19, 0x1653
    3f58:	40 91 54 16 	lds	r20, 0x1654
    3f5c:	50 91 55 16 	lds	r21, 0x1655
    3f60:	6a 2d       	mov	r22, r10
    3f62:	7b 2d       	mov	r23, r11
    3f64:	8c 2d       	mov	r24, r12
    3f66:	9d 2d       	mov	r25, r13
    3f68:	e9 d1       	rcall	.+978    	; 0x433c <__addsf3>
    3f6a:	2e 2d       	mov	r18, r14
    3f6c:	3f 2d       	mov	r19, r15
    3f6e:	40 2f       	mov	r20, r16
    3f70:	51 2f       	mov	r21, r17
    3f72:	e4 d1       	rcall	.+968    	; 0x433c <__addsf3>
    3f74:	75 d0       	rcall	.+234    	; 0x4060 <RoundLong>
    3f76:	81 e0       	ldi	r24, 0x01	; 1
    3f78:	0e 94 9b 0a 	call	0x1536	; 0x1536 <PWMChangePulseDuration>
		
	PWMChangePulseDuration(PWM_CHANNEL_2, RoundLong(gThPulse - XTilt - YTilt));
    3f7c:	2a 2d       	mov	r18, r10
    3f7e:	3b 2d       	mov	r19, r11
    3f80:	4c 2d       	mov	r20, r12
    3f82:	5d 2d       	mov	r21, r13
    3f84:	60 91 52 16 	lds	r22, 0x1652
    3f88:	70 91 53 16 	lds	r23, 0x1653
    3f8c:	80 91 54 16 	lds	r24, 0x1654
    3f90:	90 91 55 16 	lds	r25, 0x1655
    3f94:	d2 d1       	rcall	.+932    	; 0x433a <__subsf3>
    3f96:	2e 2d       	mov	r18, r14
    3f98:	3f 2d       	mov	r19, r15
    3f9a:	40 2f       	mov	r20, r16
    3f9c:	51 2f       	mov	r21, r17
    3f9e:	cd d1       	rcall	.+922    	; 0x433a <__subsf3>
    3fa0:	5f d0       	rcall	.+190    	; 0x4060 <RoundLong>
    3fa2:	82 e0       	ldi	r24, 0x02	; 2
    3fa4:	0e 94 9b 0a 	call	0x1536	; 0x1536 <PWMChangePulseDuration>
		
	PWMChangePulseDuration(PWM_CHANNEL_3, RoundLong(gThPulse - XTilt + YTilt));
    3fa8:	2a 2d       	mov	r18, r10
    3faa:	3b 2d       	mov	r19, r11
    3fac:	4c 2d       	mov	r20, r12
    3fae:	5d 2d       	mov	r21, r13
    3fb0:	60 91 52 16 	lds	r22, 0x1652
    3fb4:	70 91 53 16 	lds	r23, 0x1653
    3fb8:	80 91 54 16 	lds	r24, 0x1654
    3fbc:	90 91 55 16 	lds	r25, 0x1655
    3fc0:	bc d1       	rcall	.+888    	; 0x433a <__subsf3>
    3fc2:	2e 2d       	mov	r18, r14
    3fc4:	3f 2d       	mov	r19, r15
    3fc6:	40 2f       	mov	r20, r16
    3fc8:	51 2f       	mov	r21, r17
    3fca:	b8 d1       	rcall	.+880    	; 0x433c <__addsf3>
    3fcc:	49 d0       	rcall	.+146    	; 0x4060 <RoundLong>
    3fce:	83 e0       	ldi	r24, 0x03	; 3
    3fd0:	0e 94 9b 0a 	call	0x1536	; 0x1536 <PWMChangePulseDuration>
    3fd4:	0f b6       	in	r0, 0x3f	; 63
    3fd6:	f8 94       	cli
    3fd8:	de bf       	out	0x3e, r29	; 62
    3fda:	0f be       	out	0x3f, r0	; 63
    3fdc:	cd bf       	out	0x3d, r28	; 61
}
    3fde:	a4 96       	adiw	r28, 0x24	; 36
    3fe0:	0f b6       	in	r0, 0x3f	; 63
    3fe2:	f8 94       	cli
    3fe4:	de bf       	out	0x3e, r29	; 62
    3fe6:	0f be       	out	0x3f, r0	; 63
    3fe8:	cd bf       	out	0x3d, r28	; 61
    3fea:	df 91       	pop	r29
    3fec:	cf 91       	pop	r28
    3fee:	1f 91       	pop	r17
    3ff0:	0f 91       	pop	r16
    3ff2:	ff 90       	pop	r15
    3ff4:	ef 90       	pop	r14
    3ff6:	df 90       	pop	r13
    3ff8:	cf 90       	pop	r12
    3ffa:	bf 90       	pop	r11
    3ffc:	af 90       	pop	r10
    3ffe:	9f 90       	pop	r9
    4000:	8f 90       	pop	r8
    4002:	7f 90       	pop	r7
    4004:	6f 90       	pop	r6
    4006:	5f 90       	pop	r5
    4008:	4f 90       	pop	r4
    400a:	3f 90       	pop	r3
    400c:	2f 90       	pop	r2
    400e:	08 95       	ret

00004010 <PerformEmergencyLanding>:
void
PerformEmergencyLanding()
{
	char Index;
	
	for (Index = gThPulse; Index > 0; Index--)
    4010:	60 91 52 16 	lds	r22, 0x1652
    4014:	70 91 53 16 	lds	r23, 0x1653
    4018:	80 91 54 16 	lds	r24, 0x1654
    401c:	90 91 55 16 	lds	r25, 0x1655
    4020:	01 d3       	rcall	.+1538   	; 0x4624 <__fixunssfsi>
    4022:	c6 2f       	mov	r28, r22
    4024:	66 23       	and	r22, r22
    4026:	d9 f0       	breq	.+54     	; 0x405e <PerformEmergencyLanding+0x4e>
	{
		PWMChangePulseDuration(PWM_CHANNEL_0, Index);
    4028:	6c 2f       	mov	r22, r28
    402a:	80 e0       	ldi	r24, 0x00	; 0
    402c:	0e 94 9b 0a 	call	0x1536	; 0x1536 <PWMChangePulseDuration>
		
		PWMChangePulseDuration(PWM_CHANNEL_1, Index);
    4030:	6c 2f       	mov	r22, r28
    4032:	81 e0       	ldi	r24, 0x01	; 1
    4034:	0e 94 9b 0a 	call	0x1536	; 0x1536 <PWMChangePulseDuration>
		
		PWMChangePulseDuration(PWM_CHANNEL_2, Index);
    4038:	6c 2f       	mov	r22, r28
    403a:	82 e0       	ldi	r24, 0x02	; 2
    403c:	0e 94 9b 0a 	call	0x1536	; 0x1536 <PWMChangePulseDuration>
		
		PWMChangePulseDuration(PWM_CHANNEL_3, Index);
    4040:	6c 2f       	mov	r22, r28
    4042:	83 e0       	ldi	r24, 0x03	; 3
    4044:	0e 94 9b 0a 	call	0x1536	; 0x1536 <PWMChangePulseDuration>
    4048:	2f ef       	ldi	r18, 0xFF	; 255
    404a:	80 e7       	ldi	r24, 0x70	; 112
    404c:	92 e0       	ldi	r25, 0x02	; 2
    404e:	21 50       	subi	r18, 0x01	; 1
    4050:	80 40       	sbci	r24, 0x00	; 0
    4052:	90 40       	sbci	r25, 0x00	; 0
    4054:	e1 f7       	brne	.-8      	; 0x404e <PerformEmergencyLanding+0x3e>
    4056:	00 c0       	rjmp	.+0      	; 0x4058 <PerformEmergencyLanding+0x48>
    4058:	00 00       	nop
void
PerformEmergencyLanding()
{
	char Index;
	
	for (Index = gThPulse; Index > 0; Index--)
    405a:	c1 50       	subi	r28, 0x01	; 1
    405c:	29 f7       	brne	.-54     	; 0x4028 <PerformEmergencyLanding+0x18>
    405e:	ff cf       	rjmp	.-2      	; 0x405e <PerformEmergencyLanding+0x4e>

00004060 <RoundLong>:

#include <avr/io.h>

long
RoundLong(double Value)
{
    4060:	af 92       	push	r10
    4062:	bf 92       	push	r11
    4064:	cf 92       	push	r12
    4066:	df 92       	push	r13
    4068:	ef 92       	push	r14
    406a:	ff 92       	push	r15
    406c:	0f 93       	push	r16
    406e:	1f 93       	push	r17
    4070:	5b 01       	movw	r10, r22
    4072:	6c 01       	movw	r12, r24
	long IntPart;
	
	double FracPart;
	
	IntPart = (long) Value;
    4074:	d2 d2       	rcall	.+1444   	; 0x461a <__fixsfsi>
    4076:	7b 01       	movw	r14, r22
    4078:	8c 01       	movw	r16, r24
	
	FracPart = Value - IntPart;
	
	if (FracPart < 0.5)
    407a:	06 d3       	rcall	.+1548   	; 0x4688 <__floatsisf>
    407c:	9b 01       	movw	r18, r22
    407e:	ac 01       	movw	r20, r24
    4080:	c6 01       	movw	r24, r12
    4082:	b5 01       	movw	r22, r10
    4084:	5a d1       	rcall	.+692    	; 0x433a <__subsf3>
    4086:	20 e0       	ldi	r18, 0x00	; 0
    4088:	30 e0       	ldi	r19, 0x00	; 0
    408a:	40 e0       	ldi	r20, 0x00	; 0
    408c:	5f e3       	ldi	r21, 0x3F	; 63
    408e:	1c d2       	rcall	.+1080   	; 0x44c8 <__cmpsf2>
    4090:	88 23       	and	r24, r24
    4092:	a4 f0       	brlt	.+40     	; 0x40bc <RoundLong+0x5c>
	{
		return IntPart;
	}
	else
	{
		if (Value < 0)
    4094:	c6 01       	movw	r24, r12
    4096:	b5 01       	movw	r22, r10
    4098:	20 e0       	ldi	r18, 0x00	; 0
    409a:	30 e0       	ldi	r19, 0x00	; 0
    409c:	40 e0       	ldi	r20, 0x00	; 0
    409e:	50 e0       	ldi	r21, 0x00	; 0
    40a0:	13 d2       	rcall	.+1062   	; 0x44c8 <__cmpsf2>
    40a2:	88 23       	and	r24, r24
    40a4:	34 f4       	brge	.+12     	; 0x40b2 <RoundLong+0x52>
		{
			return IntPart - 1;
    40a6:	08 94       	sec
    40a8:	e1 08       	sbc	r14, r1
    40aa:	f1 08       	sbc	r15, r1
    40ac:	01 09       	sbc	r16, r1
    40ae:	11 09       	sbc	r17, r1
    40b0:	05 c0       	rjmp	.+10     	; 0x40bc <RoundLong+0x5c>
		}
		else
		{
			return IntPart + 1;
    40b2:	08 94       	sec
    40b4:	e1 1c       	adc	r14, r1
    40b6:	f1 1c       	adc	r15, r1
    40b8:	01 1d       	adc	r16, r1
    40ba:	11 1d       	adc	r17, r1
		}
	}
    40bc:	6e 2d       	mov	r22, r14
    40be:	7f 2d       	mov	r23, r15
    40c0:	80 2f       	mov	r24, r16
    40c2:	91 2f       	mov	r25, r17
    40c4:	1f 91       	pop	r17
    40c6:	0f 91       	pop	r16
    40c8:	ff 90       	pop	r15
    40ca:	ef 90       	pop	r14
    40cc:	df 90       	pop	r13
    40ce:	cf 90       	pop	r12
    40d0:	bf 90       	pop	r11
    40d2:	af 90       	pop	r10
    40d4:	08 95       	ret

000040d6 <malloc>:
    40d6:	cf 93       	push	r28
    40d8:	df 93       	push	r29
    40da:	82 30       	cpi	r24, 0x02	; 2
    40dc:	91 05       	cpc	r25, r1
    40de:	10 f4       	brcc	.+4      	; 0x40e4 <malloc+0xe>
    40e0:	82 e0       	ldi	r24, 0x02	; 2
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	e0 91 58 16 	lds	r30, 0x1658
    40e8:	f0 91 59 16 	lds	r31, 0x1659
    40ec:	20 e0       	ldi	r18, 0x00	; 0
    40ee:	30 e0       	ldi	r19, 0x00	; 0
    40f0:	a0 e0       	ldi	r26, 0x00	; 0
    40f2:	b0 e0       	ldi	r27, 0x00	; 0
    40f4:	30 97       	sbiw	r30, 0x00	; 0
    40f6:	39 f1       	breq	.+78     	; 0x4146 <__stack+0x47>
    40f8:	40 81       	ld	r20, Z
    40fa:	51 81       	ldd	r21, Z+1	; 0x01
    40fc:	48 17       	cp	r20, r24
    40fe:	59 07       	cpc	r21, r25
    4100:	b8 f0       	brcs	.+46     	; 0x4130 <__stack+0x31>
    4102:	48 17       	cp	r20, r24
    4104:	59 07       	cpc	r21, r25
    4106:	71 f4       	brne	.+28     	; 0x4124 <__stack+0x25>
    4108:	82 81       	ldd	r24, Z+2	; 0x02
    410a:	93 81       	ldd	r25, Z+3	; 0x03
    410c:	10 97       	sbiw	r26, 0x00	; 0
    410e:	29 f0       	breq	.+10     	; 0x411a <__stack+0x1b>
    4110:	13 96       	adiw	r26, 0x03	; 3
    4112:	9c 93       	st	X, r25
    4114:	8e 93       	st	-X, r24
    4116:	12 97       	sbiw	r26, 0x02	; 2
    4118:	2c c0       	rjmp	.+88     	; 0x4172 <__stack+0x73>
    411a:	90 93 59 16 	sts	0x1659, r25
    411e:	80 93 58 16 	sts	0x1658, r24
    4122:	27 c0       	rjmp	.+78     	; 0x4172 <__stack+0x73>
    4124:	21 15       	cp	r18, r1
    4126:	31 05       	cpc	r19, r1
    4128:	31 f0       	breq	.+12     	; 0x4136 <__stack+0x37>
    412a:	42 17       	cp	r20, r18
    412c:	53 07       	cpc	r21, r19
    412e:	18 f0       	brcs	.+6      	; 0x4136 <__stack+0x37>
    4130:	a9 01       	movw	r20, r18
    4132:	db 01       	movw	r26, r22
    4134:	01 c0       	rjmp	.+2      	; 0x4138 <__stack+0x39>
    4136:	ef 01       	movw	r28, r30
    4138:	9a 01       	movw	r18, r20
    413a:	bd 01       	movw	r22, r26
    413c:	df 01       	movw	r26, r30
    413e:	02 80       	ldd	r0, Z+2	; 0x02
    4140:	f3 81       	ldd	r31, Z+3	; 0x03
    4142:	e0 2d       	mov	r30, r0
    4144:	d7 cf       	rjmp	.-82     	; 0x40f4 <malloc+0x1e>
    4146:	21 15       	cp	r18, r1
    4148:	31 05       	cpc	r19, r1
    414a:	f9 f0       	breq	.+62     	; 0x418a <__stack+0x8b>
    414c:	28 1b       	sub	r18, r24
    414e:	39 0b       	sbc	r19, r25
    4150:	24 30       	cpi	r18, 0x04	; 4
    4152:	31 05       	cpc	r19, r1
    4154:	80 f4       	brcc	.+32     	; 0x4176 <__stack+0x77>
    4156:	8a 81       	ldd	r24, Y+2	; 0x02
    4158:	9b 81       	ldd	r25, Y+3	; 0x03
    415a:	61 15       	cp	r22, r1
    415c:	71 05       	cpc	r23, r1
    415e:	21 f0       	breq	.+8      	; 0x4168 <__stack+0x69>
    4160:	fb 01       	movw	r30, r22
    4162:	93 83       	std	Z+3, r25	; 0x03
    4164:	82 83       	std	Z+2, r24	; 0x02
    4166:	04 c0       	rjmp	.+8      	; 0x4170 <__stack+0x71>
    4168:	90 93 59 16 	sts	0x1659, r25
    416c:	80 93 58 16 	sts	0x1658, r24
    4170:	fe 01       	movw	r30, r28
    4172:	32 96       	adiw	r30, 0x02	; 2
    4174:	44 c0       	rjmp	.+136    	; 0x41fe <__stack+0xff>
    4176:	fe 01       	movw	r30, r28
    4178:	e2 0f       	add	r30, r18
    417a:	f3 1f       	adc	r31, r19
    417c:	81 93       	st	Z+, r24
    417e:	91 93       	st	Z+, r25
    4180:	22 50       	subi	r18, 0x02	; 2
    4182:	31 09       	sbc	r19, r1
    4184:	39 83       	std	Y+1, r19	; 0x01
    4186:	28 83       	st	Y, r18
    4188:	3a c0       	rjmp	.+116    	; 0x41fe <__stack+0xff>
    418a:	20 91 56 16 	lds	r18, 0x1656
    418e:	30 91 57 16 	lds	r19, 0x1657
    4192:	23 2b       	or	r18, r19
    4194:	41 f4       	brne	.+16     	; 0x41a6 <__stack+0xa7>
    4196:	20 91 02 01 	lds	r18, 0x0102
    419a:	30 91 03 01 	lds	r19, 0x0103
    419e:	30 93 57 16 	sts	0x1657, r19
    41a2:	20 93 56 16 	sts	0x1656, r18
    41a6:	20 91 00 01 	lds	r18, 0x0100
    41aa:	30 91 01 01 	lds	r19, 0x0101
    41ae:	21 15       	cp	r18, r1
    41b0:	31 05       	cpc	r19, r1
    41b2:	41 f4       	brne	.+16     	; 0x41c4 <__stack+0xc5>
    41b4:	2d b7       	in	r18, 0x3d	; 61
    41b6:	3e b7       	in	r19, 0x3e	; 62
    41b8:	40 91 04 01 	lds	r20, 0x0104
    41bc:	50 91 05 01 	lds	r21, 0x0105
    41c0:	24 1b       	sub	r18, r20
    41c2:	35 0b       	sbc	r19, r21
    41c4:	e0 91 56 16 	lds	r30, 0x1656
    41c8:	f0 91 57 16 	lds	r31, 0x1657
    41cc:	e2 17       	cp	r30, r18
    41ce:	f3 07       	cpc	r31, r19
    41d0:	a0 f4       	brcc	.+40     	; 0x41fa <__stack+0xfb>
    41d2:	2e 1b       	sub	r18, r30
    41d4:	3f 0b       	sbc	r19, r31
    41d6:	28 17       	cp	r18, r24
    41d8:	39 07       	cpc	r19, r25
    41da:	78 f0       	brcs	.+30     	; 0x41fa <__stack+0xfb>
    41dc:	ac 01       	movw	r20, r24
    41de:	4e 5f       	subi	r20, 0xFE	; 254
    41e0:	5f 4f       	sbci	r21, 0xFF	; 255
    41e2:	24 17       	cp	r18, r20
    41e4:	35 07       	cpc	r19, r21
    41e6:	48 f0       	brcs	.+18     	; 0x41fa <__stack+0xfb>
    41e8:	4e 0f       	add	r20, r30
    41ea:	5f 1f       	adc	r21, r31
    41ec:	50 93 57 16 	sts	0x1657, r21
    41f0:	40 93 56 16 	sts	0x1656, r20
    41f4:	81 93       	st	Z+, r24
    41f6:	91 93       	st	Z+, r25
    41f8:	02 c0       	rjmp	.+4      	; 0x41fe <__stack+0xff>
    41fa:	e0 e0       	ldi	r30, 0x00	; 0
    41fc:	f0 e0       	ldi	r31, 0x00	; 0
    41fe:	cf 01       	movw	r24, r30
    4200:	df 91       	pop	r29
    4202:	cf 91       	pop	r28
    4204:	08 95       	ret

00004206 <free>:
    4206:	cf 93       	push	r28
    4208:	df 93       	push	r29
    420a:	00 97       	sbiw	r24, 0x00	; 0
    420c:	09 f4       	brne	.+2      	; 0x4210 <free+0xa>
    420e:	87 c0       	rjmp	.+270    	; 0x431e <free+0x118>
    4210:	fc 01       	movw	r30, r24
    4212:	32 97       	sbiw	r30, 0x02	; 2
    4214:	13 82       	std	Z+3, r1	; 0x03
    4216:	12 82       	std	Z+2, r1	; 0x02
    4218:	c0 91 58 16 	lds	r28, 0x1658
    421c:	d0 91 59 16 	lds	r29, 0x1659
    4220:	20 97       	sbiw	r28, 0x00	; 0
    4222:	81 f4       	brne	.+32     	; 0x4244 <free+0x3e>
    4224:	20 81       	ld	r18, Z
    4226:	31 81       	ldd	r19, Z+1	; 0x01
    4228:	28 0f       	add	r18, r24
    422a:	39 1f       	adc	r19, r25
    422c:	80 91 56 16 	lds	r24, 0x1656
    4230:	90 91 57 16 	lds	r25, 0x1657
    4234:	82 17       	cp	r24, r18
    4236:	93 07       	cpc	r25, r19
    4238:	79 f5       	brne	.+94     	; 0x4298 <free+0x92>
    423a:	f0 93 57 16 	sts	0x1657, r31
    423e:	e0 93 56 16 	sts	0x1656, r30
    4242:	6d c0       	rjmp	.+218    	; 0x431e <free+0x118>
    4244:	de 01       	movw	r26, r28
    4246:	20 e0       	ldi	r18, 0x00	; 0
    4248:	30 e0       	ldi	r19, 0x00	; 0
    424a:	ae 17       	cp	r26, r30
    424c:	bf 07       	cpc	r27, r31
    424e:	50 f4       	brcc	.+20     	; 0x4264 <free+0x5e>
    4250:	12 96       	adiw	r26, 0x02	; 2
    4252:	4d 91       	ld	r20, X+
    4254:	5c 91       	ld	r21, X
    4256:	13 97       	sbiw	r26, 0x03	; 3
    4258:	9d 01       	movw	r18, r26
    425a:	41 15       	cp	r20, r1
    425c:	51 05       	cpc	r21, r1
    425e:	09 f1       	breq	.+66     	; 0x42a2 <free+0x9c>
    4260:	da 01       	movw	r26, r20
    4262:	f3 cf       	rjmp	.-26     	; 0x424a <free+0x44>
    4264:	b3 83       	std	Z+3, r27	; 0x03
    4266:	a2 83       	std	Z+2, r26	; 0x02
    4268:	40 81       	ld	r20, Z
    426a:	51 81       	ldd	r21, Z+1	; 0x01
    426c:	84 0f       	add	r24, r20
    426e:	95 1f       	adc	r25, r21
    4270:	8a 17       	cp	r24, r26
    4272:	9b 07       	cpc	r25, r27
    4274:	71 f4       	brne	.+28     	; 0x4292 <free+0x8c>
    4276:	8d 91       	ld	r24, X+
    4278:	9c 91       	ld	r25, X
    427a:	11 97       	sbiw	r26, 0x01	; 1
    427c:	84 0f       	add	r24, r20
    427e:	95 1f       	adc	r25, r21
    4280:	02 96       	adiw	r24, 0x02	; 2
    4282:	91 83       	std	Z+1, r25	; 0x01
    4284:	80 83       	st	Z, r24
    4286:	12 96       	adiw	r26, 0x02	; 2
    4288:	8d 91       	ld	r24, X+
    428a:	9c 91       	ld	r25, X
    428c:	13 97       	sbiw	r26, 0x03	; 3
    428e:	93 83       	std	Z+3, r25	; 0x03
    4290:	82 83       	std	Z+2, r24	; 0x02
    4292:	21 15       	cp	r18, r1
    4294:	31 05       	cpc	r19, r1
    4296:	29 f4       	brne	.+10     	; 0x42a2 <free+0x9c>
    4298:	f0 93 59 16 	sts	0x1659, r31
    429c:	e0 93 58 16 	sts	0x1658, r30
    42a0:	3e c0       	rjmp	.+124    	; 0x431e <free+0x118>
    42a2:	d9 01       	movw	r26, r18
    42a4:	13 96       	adiw	r26, 0x03	; 3
    42a6:	fc 93       	st	X, r31
    42a8:	ee 93       	st	-X, r30
    42aa:	12 97       	sbiw	r26, 0x02	; 2
    42ac:	4d 91       	ld	r20, X+
    42ae:	5d 91       	ld	r21, X+
    42b0:	a4 0f       	add	r26, r20
    42b2:	b5 1f       	adc	r27, r21
    42b4:	ea 17       	cp	r30, r26
    42b6:	fb 07       	cpc	r31, r27
    42b8:	79 f4       	brne	.+30     	; 0x42d8 <free+0xd2>
    42ba:	80 81       	ld	r24, Z
    42bc:	91 81       	ldd	r25, Z+1	; 0x01
    42be:	84 0f       	add	r24, r20
    42c0:	95 1f       	adc	r25, r21
    42c2:	02 96       	adiw	r24, 0x02	; 2
    42c4:	d9 01       	movw	r26, r18
    42c6:	11 96       	adiw	r26, 0x01	; 1
    42c8:	9c 93       	st	X, r25
    42ca:	8e 93       	st	-X, r24
    42cc:	82 81       	ldd	r24, Z+2	; 0x02
    42ce:	93 81       	ldd	r25, Z+3	; 0x03
    42d0:	13 96       	adiw	r26, 0x03	; 3
    42d2:	9c 93       	st	X, r25
    42d4:	8e 93       	st	-X, r24
    42d6:	12 97       	sbiw	r26, 0x02	; 2
    42d8:	e0 e0       	ldi	r30, 0x00	; 0
    42da:	f0 e0       	ldi	r31, 0x00	; 0
    42dc:	8a 81       	ldd	r24, Y+2	; 0x02
    42de:	9b 81       	ldd	r25, Y+3	; 0x03
    42e0:	00 97       	sbiw	r24, 0x00	; 0
    42e2:	19 f0       	breq	.+6      	; 0x42ea <free+0xe4>
    42e4:	fe 01       	movw	r30, r28
    42e6:	ec 01       	movw	r28, r24
    42e8:	f9 cf       	rjmp	.-14     	; 0x42dc <free+0xd6>
    42ea:	ce 01       	movw	r24, r28
    42ec:	02 96       	adiw	r24, 0x02	; 2
    42ee:	28 81       	ld	r18, Y
    42f0:	39 81       	ldd	r19, Y+1	; 0x01
    42f2:	82 0f       	add	r24, r18
    42f4:	93 1f       	adc	r25, r19
    42f6:	20 91 56 16 	lds	r18, 0x1656
    42fa:	30 91 57 16 	lds	r19, 0x1657
    42fe:	28 17       	cp	r18, r24
    4300:	39 07       	cpc	r19, r25
    4302:	69 f4       	brne	.+26     	; 0x431e <free+0x118>
    4304:	30 97       	sbiw	r30, 0x00	; 0
    4306:	29 f4       	brne	.+10     	; 0x4312 <free+0x10c>
    4308:	10 92 59 16 	sts	0x1659, r1
    430c:	10 92 58 16 	sts	0x1658, r1
    4310:	02 c0       	rjmp	.+4      	; 0x4316 <free+0x110>
    4312:	13 82       	std	Z+3, r1	; 0x03
    4314:	12 82       	std	Z+2, r1	; 0x02
    4316:	d0 93 57 16 	sts	0x1657, r29
    431a:	c0 93 56 16 	sts	0x1656, r28
    431e:	df 91       	pop	r29
    4320:	cf 91       	pop	r28
    4322:	08 95       	ret

00004324 <exit>:
    4324:	f8 94       	cli
    4326:	eb c4       	rjmp	.+2518   	; 0x4cfe <_exit>

00004328 <memcpy>:
    4328:	fb 01       	movw	r30, r22
    432a:	dc 01       	movw	r26, r24
    432c:	02 c0       	rjmp	.+4      	; 0x4332 <memcpy+0xa>
    432e:	01 90       	ld	r0, Z+
    4330:	0d 92       	st	X+, r0
    4332:	41 50       	subi	r20, 0x01	; 1
    4334:	50 40       	sbci	r21, 0x00	; 0
    4336:	d8 f7       	brcc	.-10     	; 0x432e <memcpy+0x6>
    4338:	08 95       	ret

0000433a <__subsf3>:
    433a:	50 58       	subi	r21, 0x80	; 128

0000433c <__addsf3>:
    433c:	bb 27       	eor	r27, r27
    433e:	aa 27       	eor	r26, r26
    4340:	0e d0       	rcall	.+28     	; 0x435e <__addsf3x>
    4342:	b3 c2       	rjmp	.+1382   	; 0x48aa <__fp_round>
    4344:	7c d2       	rcall	.+1272   	; 0x483e <__fp_pscA>
    4346:	30 f0       	brcs	.+12     	; 0x4354 <__addsf3+0x18>
    4348:	81 d2       	rcall	.+1282   	; 0x484c <__fp_pscB>
    434a:	20 f0       	brcs	.+8      	; 0x4354 <__addsf3+0x18>
    434c:	31 f4       	brne	.+12     	; 0x435a <__addsf3+0x1e>
    434e:	9f 3f       	cpi	r25, 0xFF	; 255
    4350:	11 f4       	brne	.+4      	; 0x4356 <__addsf3+0x1a>
    4352:	1e f4       	brtc	.+6      	; 0x435a <__addsf3+0x1e>
    4354:	3c c2       	rjmp	.+1144   	; 0x47ce <__fp_nan>
    4356:	0e f4       	brtc	.+2      	; 0x435a <__addsf3+0x1e>
    4358:	e0 95       	com	r30
    435a:	e7 fb       	bst	r30, 7
    435c:	32 c2       	rjmp	.+1124   	; 0x47c2 <__fp_inf>

0000435e <__addsf3x>:
    435e:	e9 2f       	mov	r30, r25
    4360:	c6 d2       	rcall	.+1420   	; 0x48ee <__fp_split3>
    4362:	80 f3       	brcs	.-32     	; 0x4344 <__addsf3+0x8>
    4364:	ba 17       	cp	r27, r26
    4366:	62 07       	cpc	r22, r18
    4368:	73 07       	cpc	r23, r19
    436a:	84 07       	cpc	r24, r20
    436c:	95 07       	cpc	r25, r21
    436e:	18 f0       	brcs	.+6      	; 0x4376 <__addsf3x+0x18>
    4370:	71 f4       	brne	.+28     	; 0x438e <__addsf3x+0x30>
    4372:	9e f5       	brtc	.+102    	; 0x43da <__addsf3x+0x7c>
    4374:	de c2       	rjmp	.+1468   	; 0x4932 <__fp_zero>
    4376:	0e f4       	brtc	.+2      	; 0x437a <__addsf3x+0x1c>
    4378:	e0 95       	com	r30
    437a:	0b 2e       	mov	r0, r27
    437c:	ba 2f       	mov	r27, r26
    437e:	a0 2d       	mov	r26, r0
    4380:	0b 01       	movw	r0, r22
    4382:	b9 01       	movw	r22, r18
    4384:	90 01       	movw	r18, r0
    4386:	0c 01       	movw	r0, r24
    4388:	ca 01       	movw	r24, r20
    438a:	a0 01       	movw	r20, r0
    438c:	11 24       	eor	r1, r1
    438e:	ff 27       	eor	r31, r31
    4390:	59 1b       	sub	r21, r25
    4392:	99 f0       	breq	.+38     	; 0x43ba <__addsf3x+0x5c>
    4394:	59 3f       	cpi	r21, 0xF9	; 249
    4396:	50 f4       	brcc	.+20     	; 0x43ac <__addsf3x+0x4e>
    4398:	50 3e       	cpi	r21, 0xE0	; 224
    439a:	68 f1       	brcs	.+90     	; 0x43f6 <__addsf3x+0x98>
    439c:	1a 16       	cp	r1, r26
    439e:	f0 40       	sbci	r31, 0x00	; 0
    43a0:	a2 2f       	mov	r26, r18
    43a2:	23 2f       	mov	r18, r19
    43a4:	34 2f       	mov	r19, r20
    43a6:	44 27       	eor	r20, r20
    43a8:	58 5f       	subi	r21, 0xF8	; 248
    43aa:	f3 cf       	rjmp	.-26     	; 0x4392 <__addsf3x+0x34>
    43ac:	46 95       	lsr	r20
    43ae:	37 95       	ror	r19
    43b0:	27 95       	ror	r18
    43b2:	a7 95       	ror	r26
    43b4:	f0 40       	sbci	r31, 0x00	; 0
    43b6:	53 95       	inc	r21
    43b8:	c9 f7       	brne	.-14     	; 0x43ac <__addsf3x+0x4e>
    43ba:	7e f4       	brtc	.+30     	; 0x43da <__addsf3x+0x7c>
    43bc:	1f 16       	cp	r1, r31
    43be:	ba 0b       	sbc	r27, r26
    43c0:	62 0b       	sbc	r22, r18
    43c2:	73 0b       	sbc	r23, r19
    43c4:	84 0b       	sbc	r24, r20
    43c6:	ba f0       	brmi	.+46     	; 0x43f6 <__addsf3x+0x98>
    43c8:	91 50       	subi	r25, 0x01	; 1
    43ca:	a1 f0       	breq	.+40     	; 0x43f4 <__addsf3x+0x96>
    43cc:	ff 0f       	add	r31, r31
    43ce:	bb 1f       	adc	r27, r27
    43d0:	66 1f       	adc	r22, r22
    43d2:	77 1f       	adc	r23, r23
    43d4:	88 1f       	adc	r24, r24
    43d6:	c2 f7       	brpl	.-16     	; 0x43c8 <__addsf3x+0x6a>
    43d8:	0e c0       	rjmp	.+28     	; 0x43f6 <__addsf3x+0x98>
    43da:	ba 0f       	add	r27, r26
    43dc:	62 1f       	adc	r22, r18
    43de:	73 1f       	adc	r23, r19
    43e0:	84 1f       	adc	r24, r20
    43e2:	48 f4       	brcc	.+18     	; 0x43f6 <__addsf3x+0x98>
    43e4:	87 95       	ror	r24
    43e6:	77 95       	ror	r23
    43e8:	67 95       	ror	r22
    43ea:	b7 95       	ror	r27
    43ec:	f7 95       	ror	r31
    43ee:	9e 3f       	cpi	r25, 0xFE	; 254
    43f0:	08 f0       	brcs	.+2      	; 0x43f4 <__addsf3x+0x96>
    43f2:	b3 cf       	rjmp	.-154    	; 0x435a <__addsf3+0x1e>
    43f4:	93 95       	inc	r25
    43f6:	88 0f       	add	r24, r24
    43f8:	08 f0       	brcs	.+2      	; 0x43fc <__addsf3x+0x9e>
    43fa:	99 27       	eor	r25, r25
    43fc:	ee 0f       	add	r30, r30
    43fe:	97 95       	ror	r25
    4400:	87 95       	ror	r24
    4402:	08 95       	ret
    4404:	1c d2       	rcall	.+1080   	; 0x483e <__fp_pscA>
    4406:	58 f0       	brcs	.+22     	; 0x441e <__addsf3x+0xc0>
    4408:	80 e8       	ldi	r24, 0x80	; 128
    440a:	91 e0       	ldi	r25, 0x01	; 1
    440c:	09 f4       	brne	.+2      	; 0x4410 <__addsf3x+0xb2>
    440e:	9e ef       	ldi	r25, 0xFE	; 254
    4410:	1d d2       	rcall	.+1082   	; 0x484c <__fp_pscB>
    4412:	28 f0       	brcs	.+10     	; 0x441e <__addsf3x+0xc0>
    4414:	40 e8       	ldi	r20, 0x80	; 128
    4416:	51 e0       	ldi	r21, 0x01	; 1
    4418:	59 f4       	brne	.+22     	; 0x4430 <atan2+0xe>
    441a:	5e ef       	ldi	r21, 0xFE	; 254
    441c:	09 c0       	rjmp	.+18     	; 0x4430 <atan2+0xe>
    441e:	d7 c1       	rjmp	.+942    	; 0x47ce <__fp_nan>
    4420:	88 c2       	rjmp	.+1296   	; 0x4932 <__fp_zero>

00004422 <atan2>:
    4422:	e9 2f       	mov	r30, r25
    4424:	e0 78       	andi	r30, 0x80	; 128
    4426:	63 d2       	rcall	.+1222   	; 0x48ee <__fp_split3>
    4428:	68 f3       	brcs	.-38     	; 0x4404 <__addsf3x+0xa6>
    442a:	09 2e       	mov	r0, r25
    442c:	05 2a       	or	r0, r21
    442e:	c1 f3       	breq	.-16     	; 0x4420 <__addsf3x+0xc2>
    4430:	26 17       	cp	r18, r22
    4432:	37 07       	cpc	r19, r23
    4434:	48 07       	cpc	r20, r24
    4436:	59 07       	cpc	r21, r25
    4438:	38 f0       	brcs	.+14     	; 0x4448 <atan2+0x26>
    443a:	0e 2e       	mov	r0, r30
    443c:	07 f8       	bld	r0, 7
    443e:	e0 25       	eor	r30, r0
    4440:	69 f0       	breq	.+26     	; 0x445c <atan2+0x3a>
    4442:	e0 25       	eor	r30, r0
    4444:	e0 64       	ori	r30, 0x40	; 64
    4446:	0a c0       	rjmp	.+20     	; 0x445c <atan2+0x3a>
    4448:	ef 63       	ori	r30, 0x3F	; 63
    444a:	07 f8       	bld	r0, 7
    444c:	00 94       	com	r0
    444e:	07 fa       	bst	r0, 7
    4450:	db 01       	movw	r26, r22
    4452:	b9 01       	movw	r22, r18
    4454:	9d 01       	movw	r18, r26
    4456:	dc 01       	movw	r26, r24
    4458:	ca 01       	movw	r24, r20
    445a:	ad 01       	movw	r20, r26
    445c:	ef 93       	push	r30
    445e:	4a d0       	rcall	.+148    	; 0x44f4 <__divsf3_pse>
    4460:	24 d2       	rcall	.+1096   	; 0x48aa <__fp_round>
    4462:	0a d0       	rcall	.+20     	; 0x4478 <atan>
    4464:	5f 91       	pop	r21
    4466:	55 23       	and	r21, r21
    4468:	31 f0       	breq	.+12     	; 0x4476 <atan2+0x54>
    446a:	2b ed       	ldi	r18, 0xDB	; 219
    446c:	3f e0       	ldi	r19, 0x0F	; 15
    446e:	49 e4       	ldi	r20, 0x49	; 73
    4470:	50 fd       	sbrc	r21, 0
    4472:	49 ec       	ldi	r20, 0xC9	; 201
    4474:	63 cf       	rjmp	.-314    	; 0x433c <__addsf3>
    4476:	08 95       	ret

00004478 <atan>:
    4478:	df 93       	push	r29
    447a:	dd 27       	eor	r29, r29
    447c:	b9 2f       	mov	r27, r25
    447e:	bf 77       	andi	r27, 0x7F	; 127
    4480:	40 e8       	ldi	r20, 0x80	; 128
    4482:	5f e3       	ldi	r21, 0x3F	; 63
    4484:	16 16       	cp	r1, r22
    4486:	17 06       	cpc	r1, r23
    4488:	48 07       	cpc	r20, r24
    448a:	5b 07       	cpc	r21, r27
    448c:	10 f4       	brcc	.+4      	; 0x4492 <atan+0x1a>
    448e:	d9 2f       	mov	r29, r25
    4490:	5b d2       	rcall	.+1206   	; 0x4948 <inverse>
    4492:	9f 93       	push	r25
    4494:	8f 93       	push	r24
    4496:	7f 93       	push	r23
    4498:	6f 93       	push	r22
    449a:	08 d3       	rcall	.+1552   	; 0x4aac <square>
    449c:	e8 eb       	ldi	r30, 0xB8	; 184
    449e:	f0 e0       	ldi	r31, 0x00	; 0
    44a0:	a9 d1       	rcall	.+850    	; 0x47f4 <__fp_powser>
    44a2:	03 d2       	rcall	.+1030   	; 0x48aa <__fp_round>
    44a4:	2f 91       	pop	r18
    44a6:	3f 91       	pop	r19
    44a8:	4f 91       	pop	r20
    44aa:	5f 91       	pop	r21
    44ac:	60 d2       	rcall	.+1216   	; 0x496e <__mulsf3x>
    44ae:	dd 23       	and	r29, r29
    44b0:	49 f0       	breq	.+18     	; 0x44c4 <atan+0x4c>
    44b2:	90 58       	subi	r25, 0x80	; 128
    44b4:	a2 ea       	ldi	r26, 0xA2	; 162
    44b6:	2a ed       	ldi	r18, 0xDA	; 218
    44b8:	3f e0       	ldi	r19, 0x0F	; 15
    44ba:	49 ec       	ldi	r20, 0xC9	; 201
    44bc:	5f e3       	ldi	r21, 0x3F	; 63
    44be:	d0 78       	andi	r29, 0x80	; 128
    44c0:	5d 27       	eor	r21, r29
    44c2:	4d df       	rcall	.-358    	; 0x435e <__addsf3x>
    44c4:	df 91       	pop	r29
    44c6:	f1 c1       	rjmp	.+994    	; 0x48aa <__fp_round>

000044c8 <__cmpsf2>:
    44c8:	58 d1       	rcall	.+688    	; 0x477a <__fp_cmp>
    44ca:	08 f4       	brcc	.+2      	; 0x44ce <__cmpsf2+0x6>
    44cc:	81 e0       	ldi	r24, 0x01	; 1
    44ce:	08 95       	ret

000044d0 <cos>:
    44d0:	c5 d1       	rcall	.+906    	; 0x485c <__fp_rempio2>
    44d2:	e3 95       	inc	r30
    44d4:	fb c1       	rjmp	.+1014   	; 0x48cc <__fp_sinus>

000044d6 <__divsf3>:
    44d6:	0c d0       	rcall	.+24     	; 0x44f0 <__divsf3x>
    44d8:	e8 c1       	rjmp	.+976    	; 0x48aa <__fp_round>
    44da:	b8 d1       	rcall	.+880    	; 0x484c <__fp_pscB>
    44dc:	40 f0       	brcs	.+16     	; 0x44ee <__divsf3+0x18>
    44de:	af d1       	rcall	.+862    	; 0x483e <__fp_pscA>
    44e0:	30 f0       	brcs	.+12     	; 0x44ee <__divsf3+0x18>
    44e2:	21 f4       	brne	.+8      	; 0x44ec <__divsf3+0x16>
    44e4:	5f 3f       	cpi	r21, 0xFF	; 255
    44e6:	19 f0       	breq	.+6      	; 0x44ee <__divsf3+0x18>
    44e8:	6c c1       	rjmp	.+728    	; 0x47c2 <__fp_inf>
    44ea:	51 11       	cpse	r21, r1
    44ec:	23 c2       	rjmp	.+1094   	; 0x4934 <__fp_szero>
    44ee:	6f c1       	rjmp	.+734    	; 0x47ce <__fp_nan>

000044f0 <__divsf3x>:
    44f0:	fe d1       	rcall	.+1020   	; 0x48ee <__fp_split3>
    44f2:	98 f3       	brcs	.-26     	; 0x44da <__divsf3+0x4>

000044f4 <__divsf3_pse>:
    44f4:	99 23       	and	r25, r25
    44f6:	c9 f3       	breq	.-14     	; 0x44ea <__divsf3+0x14>
    44f8:	55 23       	and	r21, r21
    44fa:	b1 f3       	breq	.-20     	; 0x44e8 <__divsf3+0x12>
    44fc:	95 1b       	sub	r25, r21
    44fe:	55 0b       	sbc	r21, r21
    4500:	bb 27       	eor	r27, r27
    4502:	aa 27       	eor	r26, r26
    4504:	62 17       	cp	r22, r18
    4506:	73 07       	cpc	r23, r19
    4508:	84 07       	cpc	r24, r20
    450a:	38 f0       	brcs	.+14     	; 0x451a <__divsf3_pse+0x26>
    450c:	9f 5f       	subi	r25, 0xFF	; 255
    450e:	5f 4f       	sbci	r21, 0xFF	; 255
    4510:	22 0f       	add	r18, r18
    4512:	33 1f       	adc	r19, r19
    4514:	44 1f       	adc	r20, r20
    4516:	aa 1f       	adc	r26, r26
    4518:	a9 f3       	breq	.-22     	; 0x4504 <__divsf3_pse+0x10>
    451a:	33 d0       	rcall	.+102    	; 0x4582 <__divsf3_pse+0x8e>
    451c:	0e 2e       	mov	r0, r30
    451e:	3a f0       	brmi	.+14     	; 0x452e <__divsf3_pse+0x3a>
    4520:	e0 e8       	ldi	r30, 0x80	; 128
    4522:	30 d0       	rcall	.+96     	; 0x4584 <__divsf3_pse+0x90>
    4524:	91 50       	subi	r25, 0x01	; 1
    4526:	50 40       	sbci	r21, 0x00	; 0
    4528:	e6 95       	lsr	r30
    452a:	00 1c       	adc	r0, r0
    452c:	ca f7       	brpl	.-14     	; 0x4520 <__divsf3_pse+0x2c>
    452e:	29 d0       	rcall	.+82     	; 0x4582 <__divsf3_pse+0x8e>
    4530:	fe 2f       	mov	r31, r30
    4532:	27 d0       	rcall	.+78     	; 0x4582 <__divsf3_pse+0x8e>
    4534:	66 0f       	add	r22, r22
    4536:	77 1f       	adc	r23, r23
    4538:	88 1f       	adc	r24, r24
    453a:	bb 1f       	adc	r27, r27
    453c:	26 17       	cp	r18, r22
    453e:	37 07       	cpc	r19, r23
    4540:	48 07       	cpc	r20, r24
    4542:	ab 07       	cpc	r26, r27
    4544:	b0 e8       	ldi	r27, 0x80	; 128
    4546:	09 f0       	breq	.+2      	; 0x454a <__divsf3_pse+0x56>
    4548:	bb 0b       	sbc	r27, r27
    454a:	80 2d       	mov	r24, r0
    454c:	bf 01       	movw	r22, r30
    454e:	ff 27       	eor	r31, r31
    4550:	93 58       	subi	r25, 0x83	; 131
    4552:	5f 4f       	sbci	r21, 0xFF	; 255
    4554:	2a f0       	brmi	.+10     	; 0x4560 <__divsf3_pse+0x6c>
    4556:	9e 3f       	cpi	r25, 0xFE	; 254
    4558:	51 05       	cpc	r21, r1
    455a:	68 f0       	brcs	.+26     	; 0x4576 <__divsf3_pse+0x82>
    455c:	32 c1       	rjmp	.+612    	; 0x47c2 <__fp_inf>
    455e:	ea c1       	rjmp	.+980    	; 0x4934 <__fp_szero>
    4560:	5f 3f       	cpi	r21, 0xFF	; 255
    4562:	ec f3       	brlt	.-6      	; 0x455e <__divsf3_pse+0x6a>
    4564:	98 3e       	cpi	r25, 0xE8	; 232
    4566:	dc f3       	brlt	.-10     	; 0x455e <__divsf3_pse+0x6a>
    4568:	86 95       	lsr	r24
    456a:	77 95       	ror	r23
    456c:	67 95       	ror	r22
    456e:	b7 95       	ror	r27
    4570:	f7 95       	ror	r31
    4572:	9f 5f       	subi	r25, 0xFF	; 255
    4574:	c9 f7       	brne	.-14     	; 0x4568 <__divsf3_pse+0x74>
    4576:	88 0f       	add	r24, r24
    4578:	91 1d       	adc	r25, r1
    457a:	96 95       	lsr	r25
    457c:	87 95       	ror	r24
    457e:	97 f9       	bld	r25, 7
    4580:	08 95       	ret
    4582:	e1 e0       	ldi	r30, 0x01	; 1
    4584:	66 0f       	add	r22, r22
    4586:	77 1f       	adc	r23, r23
    4588:	88 1f       	adc	r24, r24
    458a:	bb 1f       	adc	r27, r27
    458c:	62 17       	cp	r22, r18
    458e:	73 07       	cpc	r23, r19
    4590:	84 07       	cpc	r24, r20
    4592:	ba 07       	cpc	r27, r26
    4594:	20 f0       	brcs	.+8      	; 0x459e <__divsf3_pse+0xaa>
    4596:	62 1b       	sub	r22, r18
    4598:	73 0b       	sbc	r23, r19
    459a:	84 0b       	sbc	r24, r20
    459c:	ba 0b       	sbc	r27, r26
    459e:	ee 1f       	adc	r30, r30
    45a0:	88 f7       	brcc	.-30     	; 0x4584 <__divsf3_pse+0x90>
    45a2:	e0 95       	com	r30
    45a4:	08 95       	ret

000045a6 <__fixsfdi>:
    45a6:	be e3       	ldi	r27, 0x3E	; 62
    45a8:	04 d0       	rcall	.+8      	; 0x45b2 <__fixunssfdi+0x2>
    45aa:	08 f4       	brcc	.+2      	; 0x45ae <__fixsfdi+0x8>
    45ac:	90 e8       	ldi	r25, 0x80	; 128
    45ae:	08 95       	ret

000045b0 <__fixunssfdi>:
    45b0:	bf e3       	ldi	r27, 0x3F	; 63
    45b2:	22 27       	eor	r18, r18
    45b4:	33 27       	eor	r19, r19
    45b6:	a9 01       	movw	r20, r18
    45b8:	a2 d1       	rcall	.+836    	; 0x48fe <__fp_splitA>
    45ba:	58 f1       	brcs	.+86     	; 0x4612 <__fixunssfdi+0x62>
    45bc:	9f 57       	subi	r25, 0x7F	; 127
    45be:	40 f1       	brcs	.+80     	; 0x4610 <__fixunssfdi+0x60>
    45c0:	b9 17       	cp	r27, r25
    45c2:	38 f1       	brcs	.+78     	; 0x4612 <__fixunssfdi+0x62>
    45c4:	bf e3       	ldi	r27, 0x3F	; 63
    45c6:	b9 1b       	sub	r27, r25
    45c8:	99 27       	eor	r25, r25
    45ca:	b8 50       	subi	r27, 0x08	; 8
    45cc:	3a f4       	brpl	.+14     	; 0x45dc <__fixunssfdi+0x2c>
    45ce:	66 0f       	add	r22, r22
    45d0:	77 1f       	adc	r23, r23
    45d2:	88 1f       	adc	r24, r24
    45d4:	99 1f       	adc	r25, r25
    45d6:	b3 95       	inc	r27
    45d8:	d2 f3       	brmi	.-12     	; 0x45ce <__fixunssfdi+0x1e>
    45da:	16 c0       	rjmp	.+44     	; 0x4608 <__fixunssfdi+0x58>
    45dc:	b8 50       	subi	r27, 0x08	; 8
    45de:	4a f0       	brmi	.+18     	; 0x45f2 <__fixunssfdi+0x42>
    45e0:	23 2f       	mov	r18, r19
    45e2:	34 2f       	mov	r19, r20
    45e4:	45 2f       	mov	r20, r21
    45e6:	56 2f       	mov	r21, r22
    45e8:	67 2f       	mov	r22, r23
    45ea:	78 2f       	mov	r23, r24
    45ec:	88 27       	eor	r24, r24
    45ee:	b8 50       	subi	r27, 0x08	; 8
    45f0:	ba f7       	brpl	.-18     	; 0x45e0 <__fixunssfdi+0x30>
    45f2:	b8 5f       	subi	r27, 0xF8	; 248
    45f4:	49 f0       	breq	.+18     	; 0x4608 <__fixunssfdi+0x58>
    45f6:	86 95       	lsr	r24
    45f8:	77 95       	ror	r23
    45fa:	67 95       	ror	r22
    45fc:	57 95       	ror	r21
    45fe:	47 95       	ror	r20
    4600:	37 95       	ror	r19
    4602:	27 95       	ror	r18
    4604:	ba 95       	dec	r27
    4606:	b9 f7       	brne	.-18     	; 0x45f6 <__fixunssfdi+0x46>
    4608:	0e f4       	brtc	.+2      	; 0x460c <__fixunssfdi+0x5c>
    460a:	e4 d0       	rcall	.+456    	; 0x47d4 <__fp_negdi>
    460c:	88 94       	clc
    460e:	08 95       	ret
    4610:	88 94       	clc
    4612:	60 e0       	ldi	r22, 0x00	; 0
    4614:	70 e0       	ldi	r23, 0x00	; 0
    4616:	cb 01       	movw	r24, r22
    4618:	08 95       	ret

0000461a <__fixsfsi>:
    461a:	04 d0       	rcall	.+8      	; 0x4624 <__fixunssfsi>
    461c:	68 94       	set
    461e:	b1 11       	cpse	r27, r1
    4620:	89 c1       	rjmp	.+786    	; 0x4934 <__fp_szero>
    4622:	08 95       	ret

00004624 <__fixunssfsi>:
    4624:	6c d1       	rcall	.+728    	; 0x48fe <__fp_splitA>
    4626:	88 f0       	brcs	.+34     	; 0x464a <__fixunssfsi+0x26>
    4628:	9f 57       	subi	r25, 0x7F	; 127
    462a:	90 f0       	brcs	.+36     	; 0x4650 <__fixunssfsi+0x2c>
    462c:	b9 2f       	mov	r27, r25
    462e:	99 27       	eor	r25, r25
    4630:	b7 51       	subi	r27, 0x17	; 23
    4632:	a0 f0       	brcs	.+40     	; 0x465c <__fixunssfsi+0x38>
    4634:	d1 f0       	breq	.+52     	; 0x466a <__fixunssfsi+0x46>
    4636:	66 0f       	add	r22, r22
    4638:	77 1f       	adc	r23, r23
    463a:	88 1f       	adc	r24, r24
    463c:	99 1f       	adc	r25, r25
    463e:	1a f0       	brmi	.+6      	; 0x4646 <__fixunssfsi+0x22>
    4640:	ba 95       	dec	r27
    4642:	c9 f7       	brne	.-14     	; 0x4636 <__fixunssfsi+0x12>
    4644:	12 c0       	rjmp	.+36     	; 0x466a <__fixunssfsi+0x46>
    4646:	b1 30       	cpi	r27, 0x01	; 1
    4648:	81 f0       	breq	.+32     	; 0x466a <__fixunssfsi+0x46>
    464a:	73 d1       	rcall	.+742    	; 0x4932 <__fp_zero>
    464c:	b1 e0       	ldi	r27, 0x01	; 1
    464e:	08 95       	ret
    4650:	70 c1       	rjmp	.+736    	; 0x4932 <__fp_zero>
    4652:	67 2f       	mov	r22, r23
    4654:	78 2f       	mov	r23, r24
    4656:	88 27       	eor	r24, r24
    4658:	b8 5f       	subi	r27, 0xF8	; 248
    465a:	39 f0       	breq	.+14     	; 0x466a <__fixunssfsi+0x46>
    465c:	b9 3f       	cpi	r27, 0xF9	; 249
    465e:	cc f3       	brlt	.-14     	; 0x4652 <__fixunssfsi+0x2e>
    4660:	86 95       	lsr	r24
    4662:	77 95       	ror	r23
    4664:	67 95       	ror	r22
    4666:	b3 95       	inc	r27
    4668:	d9 f7       	brne	.-10     	; 0x4660 <__fixunssfsi+0x3c>
    466a:	3e f4       	brtc	.+14     	; 0x467a <__fixunssfsi+0x56>
    466c:	90 95       	com	r25
    466e:	80 95       	com	r24
    4670:	70 95       	com	r23
    4672:	61 95       	neg	r22
    4674:	7f 4f       	sbci	r23, 0xFF	; 255
    4676:	8f 4f       	sbci	r24, 0xFF	; 255
    4678:	9f 4f       	sbci	r25, 0xFF	; 255
    467a:	08 95       	ret

0000467c <__floatdisf>:
    467c:	97 fb       	bst	r25, 7
    467e:	0e f4       	brtc	.+2      	; 0x4682 <__floatdisf+0x6>
    4680:	a9 d0       	rcall	.+338    	; 0x47d4 <__fp_negdi>
    4682:	3e c0       	rjmp	.+124    	; 0x4700 <__fp_di2sf>

00004684 <__floatunsisf>:
    4684:	e8 94       	clt
    4686:	09 c0       	rjmp	.+18     	; 0x469a <__floatsisf+0x12>

00004688 <__floatsisf>:
    4688:	97 fb       	bst	r25, 7
    468a:	3e f4       	brtc	.+14     	; 0x469a <__floatsisf+0x12>
    468c:	90 95       	com	r25
    468e:	80 95       	com	r24
    4690:	70 95       	com	r23
    4692:	61 95       	neg	r22
    4694:	7f 4f       	sbci	r23, 0xFF	; 255
    4696:	8f 4f       	sbci	r24, 0xFF	; 255
    4698:	9f 4f       	sbci	r25, 0xFF	; 255
    469a:	99 23       	and	r25, r25
    469c:	a9 f0       	breq	.+42     	; 0x46c8 <__floatsisf+0x40>
    469e:	f9 2f       	mov	r31, r25
    46a0:	96 e9       	ldi	r25, 0x96	; 150
    46a2:	bb 27       	eor	r27, r27
    46a4:	93 95       	inc	r25
    46a6:	f6 95       	lsr	r31
    46a8:	87 95       	ror	r24
    46aa:	77 95       	ror	r23
    46ac:	67 95       	ror	r22
    46ae:	b7 95       	ror	r27
    46b0:	f1 11       	cpse	r31, r1
    46b2:	f8 cf       	rjmp	.-16     	; 0x46a4 <__floatsisf+0x1c>
    46b4:	fa f4       	brpl	.+62     	; 0x46f4 <__floatsisf+0x6c>
    46b6:	bb 0f       	add	r27, r27
    46b8:	11 f4       	brne	.+4      	; 0x46be <__floatsisf+0x36>
    46ba:	60 ff       	sbrs	r22, 0
    46bc:	1b c0       	rjmp	.+54     	; 0x46f4 <__floatsisf+0x6c>
    46be:	6f 5f       	subi	r22, 0xFF	; 255
    46c0:	7f 4f       	sbci	r23, 0xFF	; 255
    46c2:	8f 4f       	sbci	r24, 0xFF	; 255
    46c4:	9f 4f       	sbci	r25, 0xFF	; 255
    46c6:	16 c0       	rjmp	.+44     	; 0x46f4 <__floatsisf+0x6c>
    46c8:	88 23       	and	r24, r24
    46ca:	11 f0       	breq	.+4      	; 0x46d0 <__floatsisf+0x48>
    46cc:	96 e9       	ldi	r25, 0x96	; 150
    46ce:	11 c0       	rjmp	.+34     	; 0x46f2 <__floatsisf+0x6a>
    46d0:	77 23       	and	r23, r23
    46d2:	21 f0       	breq	.+8      	; 0x46dc <__floatsisf+0x54>
    46d4:	9e e8       	ldi	r25, 0x8E	; 142
    46d6:	87 2f       	mov	r24, r23
    46d8:	76 2f       	mov	r23, r22
    46da:	05 c0       	rjmp	.+10     	; 0x46e6 <__floatsisf+0x5e>
    46dc:	66 23       	and	r22, r22
    46de:	71 f0       	breq	.+28     	; 0x46fc <__floatsisf+0x74>
    46e0:	96 e8       	ldi	r25, 0x86	; 134
    46e2:	86 2f       	mov	r24, r22
    46e4:	70 e0       	ldi	r23, 0x00	; 0
    46e6:	60 e0       	ldi	r22, 0x00	; 0
    46e8:	2a f0       	brmi	.+10     	; 0x46f4 <__floatsisf+0x6c>
    46ea:	9a 95       	dec	r25
    46ec:	66 0f       	add	r22, r22
    46ee:	77 1f       	adc	r23, r23
    46f0:	88 1f       	adc	r24, r24
    46f2:	da f7       	brpl	.-10     	; 0x46ea <__floatsisf+0x62>
    46f4:	88 0f       	add	r24, r24
    46f6:	96 95       	lsr	r25
    46f8:	87 95       	ror	r24
    46fa:	97 f9       	bld	r25, 7
    46fc:	08 95       	ret

000046fe <__floatundisf>:
    46fe:	e8 94       	clt

00004700 <__fp_di2sf>:
    4700:	f9 2f       	mov	r31, r25
    4702:	96 eb       	ldi	r25, 0xB6	; 182
    4704:	ff 23       	and	r31, r31
    4706:	81 f0       	breq	.+32     	; 0x4728 <__fp_di2sf+0x28>
    4708:	12 16       	cp	r1, r18
    470a:	13 06       	cpc	r1, r19
    470c:	14 06       	cpc	r1, r20
    470e:	44 0b       	sbc	r20, r20
    4710:	93 95       	inc	r25
    4712:	f6 95       	lsr	r31
    4714:	87 95       	ror	r24
    4716:	77 95       	ror	r23
    4718:	67 95       	ror	r22
    471a:	57 95       	ror	r21
    471c:	40 40       	sbci	r20, 0x00	; 0
    471e:	ff 23       	and	r31, r31
    4720:	b9 f7       	brne	.-18     	; 0x4710 <__fp_di2sf+0x10>
    4722:	1b c0       	rjmp	.+54     	; 0x475a <__fp_di2sf+0x5a>
    4724:	99 27       	eor	r25, r25
    4726:	08 95       	ret
    4728:	88 23       	and	r24, r24
    472a:	51 f4       	brne	.+20     	; 0x4740 <__fp_di2sf+0x40>
    472c:	98 50       	subi	r25, 0x08	; 8
    472e:	d2 f7       	brpl	.-12     	; 0x4724 <__fp_di2sf+0x24>
    4730:	87 2b       	or	r24, r23
    4732:	76 2f       	mov	r23, r22
    4734:	65 2f       	mov	r22, r21
    4736:	54 2f       	mov	r21, r20
    4738:	43 2f       	mov	r20, r19
    473a:	32 2f       	mov	r19, r18
    473c:	20 e0       	ldi	r18, 0x00	; 0
    473e:	b1 f3       	breq	.-20     	; 0x472c <__fp_di2sf+0x2c>
    4740:	12 16       	cp	r1, r18
    4742:	13 06       	cpc	r1, r19
    4744:	14 06       	cpc	r1, r20
    4746:	44 0b       	sbc	r20, r20
    4748:	88 23       	and	r24, r24
    474a:	3a f0       	brmi	.+14     	; 0x475a <__fp_di2sf+0x5a>
    474c:	9a 95       	dec	r25
    474e:	44 0f       	add	r20, r20
    4750:	55 1f       	adc	r21, r21
    4752:	66 1f       	adc	r22, r22
    4754:	77 1f       	adc	r23, r23
    4756:	88 1f       	adc	r24, r24
    4758:	ca f7       	brpl	.-14     	; 0x474c <__fp_di2sf+0x4c>
    475a:	55 23       	and	r21, r21
    475c:	4a f4       	brpl	.+18     	; 0x4770 <__fp_di2sf+0x70>
    475e:	44 0f       	add	r20, r20
    4760:	55 1f       	adc	r21, r21
    4762:	11 f4       	brne	.+4      	; 0x4768 <__fp_di2sf+0x68>
    4764:	60 ff       	sbrs	r22, 0
    4766:	04 c0       	rjmp	.+8      	; 0x4770 <__fp_di2sf+0x70>
    4768:	6f 5f       	subi	r22, 0xFF	; 255
    476a:	7f 4f       	sbci	r23, 0xFF	; 255
    476c:	8f 4f       	sbci	r24, 0xFF	; 255
    476e:	9f 4f       	sbci	r25, 0xFF	; 255
    4770:	88 0f       	add	r24, r24
    4772:	96 95       	lsr	r25
    4774:	87 95       	ror	r24
    4776:	97 f9       	bld	r25, 7
    4778:	08 95       	ret

0000477a <__fp_cmp>:
    477a:	99 0f       	add	r25, r25
    477c:	00 08       	sbc	r0, r0
    477e:	55 0f       	add	r21, r21
    4780:	aa 0b       	sbc	r26, r26
    4782:	e0 e8       	ldi	r30, 0x80	; 128
    4784:	fe ef       	ldi	r31, 0xFE	; 254
    4786:	16 16       	cp	r1, r22
    4788:	17 06       	cpc	r1, r23
    478a:	e8 07       	cpc	r30, r24
    478c:	f9 07       	cpc	r31, r25
    478e:	c0 f0       	brcs	.+48     	; 0x47c0 <__fp_cmp+0x46>
    4790:	12 16       	cp	r1, r18
    4792:	13 06       	cpc	r1, r19
    4794:	e4 07       	cpc	r30, r20
    4796:	f5 07       	cpc	r31, r21
    4798:	98 f0       	brcs	.+38     	; 0x47c0 <__fp_cmp+0x46>
    479a:	62 1b       	sub	r22, r18
    479c:	73 0b       	sbc	r23, r19
    479e:	84 0b       	sbc	r24, r20
    47a0:	95 0b       	sbc	r25, r21
    47a2:	39 f4       	brne	.+14     	; 0x47b2 <__fp_cmp+0x38>
    47a4:	0a 26       	eor	r0, r26
    47a6:	61 f0       	breq	.+24     	; 0x47c0 <__fp_cmp+0x46>
    47a8:	23 2b       	or	r18, r19
    47aa:	24 2b       	or	r18, r20
    47ac:	25 2b       	or	r18, r21
    47ae:	21 f4       	brne	.+8      	; 0x47b8 <__fp_cmp+0x3e>
    47b0:	08 95       	ret
    47b2:	0a 26       	eor	r0, r26
    47b4:	09 f4       	brne	.+2      	; 0x47b8 <__fp_cmp+0x3e>
    47b6:	a1 40       	sbci	r26, 0x01	; 1
    47b8:	a6 95       	lsr	r26
    47ba:	8f ef       	ldi	r24, 0xFF	; 255
    47bc:	81 1d       	adc	r24, r1
    47be:	81 1d       	adc	r24, r1
    47c0:	08 95       	ret

000047c2 <__fp_inf>:
    47c2:	97 f9       	bld	r25, 7
    47c4:	9f 67       	ori	r25, 0x7F	; 127
    47c6:	80 e8       	ldi	r24, 0x80	; 128
    47c8:	70 e0       	ldi	r23, 0x00	; 0
    47ca:	60 e0       	ldi	r22, 0x00	; 0
    47cc:	08 95       	ret

000047ce <__fp_nan>:
    47ce:	9f ef       	ldi	r25, 0xFF	; 255
    47d0:	80 ec       	ldi	r24, 0xC0	; 192
    47d2:	08 95       	ret

000047d4 <__fp_negdi>:
    47d4:	90 95       	com	r25
    47d6:	80 95       	com	r24
    47d8:	70 95       	com	r23
    47da:	60 95       	com	r22
    47dc:	50 95       	com	r21
    47de:	40 95       	com	r20
    47e0:	30 95       	com	r19
    47e2:	21 95       	neg	r18
    47e4:	3f 4f       	sbci	r19, 0xFF	; 255
    47e6:	4f 4f       	sbci	r20, 0xFF	; 255
    47e8:	5f 4f       	sbci	r21, 0xFF	; 255
    47ea:	6f 4f       	sbci	r22, 0xFF	; 255
    47ec:	7f 4f       	sbci	r23, 0xFF	; 255
    47ee:	8f 4f       	sbci	r24, 0xFF	; 255
    47f0:	9f 4f       	sbci	r25, 0xFF	; 255
    47f2:	08 95       	ret

000047f4 <__fp_powser>:
    47f4:	df 93       	push	r29
    47f6:	cf 93       	push	r28
    47f8:	1f 93       	push	r17
    47fa:	0f 93       	push	r16
    47fc:	ff 92       	push	r15
    47fe:	ef 92       	push	r14
    4800:	df 92       	push	r13
    4802:	7b 01       	movw	r14, r22
    4804:	8c 01       	movw	r16, r24
    4806:	68 94       	set
    4808:	05 c0       	rjmp	.+10     	; 0x4814 <__fp_powser+0x20>
    480a:	da 2e       	mov	r13, r26
    480c:	ef 01       	movw	r28, r30
    480e:	af d0       	rcall	.+350    	; 0x496e <__mulsf3x>
    4810:	fe 01       	movw	r30, r28
    4812:	e8 94       	clt
    4814:	a5 91       	lpm	r26, Z+
    4816:	25 91       	lpm	r18, Z+
    4818:	35 91       	lpm	r19, Z+
    481a:	45 91       	lpm	r20, Z+
    481c:	55 91       	lpm	r21, Z+
    481e:	ae f3       	brts	.-22     	; 0x480a <__fp_powser+0x16>
    4820:	ef 01       	movw	r28, r30
    4822:	9d dd       	rcall	.-1222   	; 0x435e <__addsf3x>
    4824:	fe 01       	movw	r30, r28
    4826:	97 01       	movw	r18, r14
    4828:	a8 01       	movw	r20, r16
    482a:	da 94       	dec	r13
    482c:	79 f7       	brne	.-34     	; 0x480c <__fp_powser+0x18>
    482e:	df 90       	pop	r13
    4830:	ef 90       	pop	r14
    4832:	ff 90       	pop	r15
    4834:	0f 91       	pop	r16
    4836:	1f 91       	pop	r17
    4838:	cf 91       	pop	r28
    483a:	df 91       	pop	r29
    483c:	08 95       	ret

0000483e <__fp_pscA>:
    483e:	00 24       	eor	r0, r0
    4840:	0a 94       	dec	r0
    4842:	16 16       	cp	r1, r22
    4844:	17 06       	cpc	r1, r23
    4846:	18 06       	cpc	r1, r24
    4848:	09 06       	cpc	r0, r25
    484a:	08 95       	ret

0000484c <__fp_pscB>:
    484c:	00 24       	eor	r0, r0
    484e:	0a 94       	dec	r0
    4850:	12 16       	cp	r1, r18
    4852:	13 06       	cpc	r1, r19
    4854:	14 06       	cpc	r1, r20
    4856:	05 06       	cpc	r0, r21
    4858:	08 95       	ret
    485a:	b9 cf       	rjmp	.-142    	; 0x47ce <__fp_nan>

0000485c <__fp_rempio2>:
    485c:	50 d0       	rcall	.+160    	; 0x48fe <__fp_splitA>
    485e:	e8 f3       	brcs	.-6      	; 0x485a <__fp_pscB+0xe>
    4860:	e8 94       	clt
    4862:	e0 e0       	ldi	r30, 0x00	; 0
    4864:	bb 27       	eor	r27, r27
    4866:	9f 57       	subi	r25, 0x7F	; 127
    4868:	f0 f0       	brcs	.+60     	; 0x48a6 <__fp_rempio2+0x4a>
    486a:	2a ed       	ldi	r18, 0xDA	; 218
    486c:	3f e0       	ldi	r19, 0x0F	; 15
    486e:	49 ec       	ldi	r20, 0xC9	; 201
    4870:	06 c0       	rjmp	.+12     	; 0x487e <__fp_rempio2+0x22>
    4872:	ee 0f       	add	r30, r30
    4874:	bb 0f       	add	r27, r27
    4876:	66 1f       	adc	r22, r22
    4878:	77 1f       	adc	r23, r23
    487a:	88 1f       	adc	r24, r24
    487c:	28 f0       	brcs	.+10     	; 0x4888 <__fp_rempio2+0x2c>
    487e:	b2 3a       	cpi	r27, 0xA2	; 162
    4880:	62 07       	cpc	r22, r18
    4882:	73 07       	cpc	r23, r19
    4884:	84 07       	cpc	r24, r20
    4886:	28 f0       	brcs	.+10     	; 0x4892 <__fp_rempio2+0x36>
    4888:	b2 5a       	subi	r27, 0xA2	; 162
    488a:	62 0b       	sbc	r22, r18
    488c:	73 0b       	sbc	r23, r19
    488e:	84 0b       	sbc	r24, r20
    4890:	e3 95       	inc	r30
    4892:	9a 95       	dec	r25
    4894:	72 f7       	brpl	.-36     	; 0x4872 <__fp_rempio2+0x16>
    4896:	80 38       	cpi	r24, 0x80	; 128
    4898:	30 f4       	brcc	.+12     	; 0x48a6 <__fp_rempio2+0x4a>
    489a:	9a 95       	dec	r25
    489c:	bb 0f       	add	r27, r27
    489e:	66 1f       	adc	r22, r22
    48a0:	77 1f       	adc	r23, r23
    48a2:	88 1f       	adc	r24, r24
    48a4:	d2 f7       	brpl	.-12     	; 0x489a <__fp_rempio2+0x3e>
    48a6:	90 48       	sbci	r25, 0x80	; 128
    48a8:	06 c1       	rjmp	.+524    	; 0x4ab6 <__fp_mpack_finite>

000048aa <__fp_round>:
    48aa:	09 2e       	mov	r0, r25
    48ac:	03 94       	inc	r0
    48ae:	00 0c       	add	r0, r0
    48b0:	11 f4       	brne	.+4      	; 0x48b6 <__fp_round+0xc>
    48b2:	88 23       	and	r24, r24
    48b4:	52 f0       	brmi	.+20     	; 0x48ca <__fp_round+0x20>
    48b6:	bb 0f       	add	r27, r27
    48b8:	40 f4       	brcc	.+16     	; 0x48ca <__fp_round+0x20>
    48ba:	bf 2b       	or	r27, r31
    48bc:	11 f4       	brne	.+4      	; 0x48c2 <__fp_round+0x18>
    48be:	60 ff       	sbrs	r22, 0
    48c0:	04 c0       	rjmp	.+8      	; 0x48ca <__fp_round+0x20>
    48c2:	6f 5f       	subi	r22, 0xFF	; 255
    48c4:	7f 4f       	sbci	r23, 0xFF	; 255
    48c6:	8f 4f       	sbci	r24, 0xFF	; 255
    48c8:	9f 4f       	sbci	r25, 0xFF	; 255
    48ca:	08 95       	ret

000048cc <__fp_sinus>:
    48cc:	ef 93       	push	r30
    48ce:	e0 ff       	sbrs	r30, 0
    48d0:	06 c0       	rjmp	.+12     	; 0x48de <__fp_sinus+0x12>
    48d2:	a2 ea       	ldi	r26, 0xA2	; 162
    48d4:	2a ed       	ldi	r18, 0xDA	; 218
    48d6:	3f e0       	ldi	r19, 0x0F	; 15
    48d8:	49 ec       	ldi	r20, 0xC9	; 201
    48da:	5f eb       	ldi	r21, 0xBF	; 191
    48dc:	40 dd       	rcall	.-1408   	; 0x435e <__addsf3x>
    48de:	e5 df       	rcall	.-54     	; 0x48aa <__fp_round>
    48e0:	0f 90       	pop	r0
    48e2:	03 94       	inc	r0
    48e4:	01 fc       	sbrc	r0, 1
    48e6:	90 58       	subi	r25, 0x80	; 128
    48e8:	e5 ee       	ldi	r30, 0xE5	; 229
    48ea:	f0 e0       	ldi	r31, 0x00	; 0
    48ec:	f7 c0       	rjmp	.+494    	; 0x4adc <__fp_powsodd>

000048ee <__fp_split3>:
    48ee:	57 fd       	sbrc	r21, 7
    48f0:	90 58       	subi	r25, 0x80	; 128
    48f2:	44 0f       	add	r20, r20
    48f4:	55 1f       	adc	r21, r21
    48f6:	59 f0       	breq	.+22     	; 0x490e <__fp_splitA+0x10>
    48f8:	5f 3f       	cpi	r21, 0xFF	; 255
    48fa:	71 f0       	breq	.+28     	; 0x4918 <__fp_splitA+0x1a>
    48fc:	47 95       	ror	r20

000048fe <__fp_splitA>:
    48fe:	88 0f       	add	r24, r24
    4900:	97 fb       	bst	r25, 7
    4902:	99 1f       	adc	r25, r25
    4904:	61 f0       	breq	.+24     	; 0x491e <__fp_splitA+0x20>
    4906:	9f 3f       	cpi	r25, 0xFF	; 255
    4908:	79 f0       	breq	.+30     	; 0x4928 <__fp_splitA+0x2a>
    490a:	87 95       	ror	r24
    490c:	08 95       	ret
    490e:	12 16       	cp	r1, r18
    4910:	13 06       	cpc	r1, r19
    4912:	14 06       	cpc	r1, r20
    4914:	55 1f       	adc	r21, r21
    4916:	f2 cf       	rjmp	.-28     	; 0x48fc <__fp_split3+0xe>
    4918:	46 95       	lsr	r20
    491a:	f1 df       	rcall	.-30     	; 0x48fe <__fp_splitA>
    491c:	08 c0       	rjmp	.+16     	; 0x492e <__fp_splitA+0x30>
    491e:	16 16       	cp	r1, r22
    4920:	17 06       	cpc	r1, r23
    4922:	18 06       	cpc	r1, r24
    4924:	99 1f       	adc	r25, r25
    4926:	f1 cf       	rjmp	.-30     	; 0x490a <__fp_splitA+0xc>
    4928:	86 95       	lsr	r24
    492a:	71 05       	cpc	r23, r1
    492c:	61 05       	cpc	r22, r1
    492e:	08 94       	sec
    4930:	08 95       	ret

00004932 <__fp_zero>:
    4932:	e8 94       	clt

00004934 <__fp_szero>:
    4934:	bb 27       	eor	r27, r27
    4936:	66 27       	eor	r22, r22
    4938:	77 27       	eor	r23, r23
    493a:	cb 01       	movw	r24, r22
    493c:	97 f9       	bld	r25, 7
    493e:	08 95       	ret

00004940 <__gesf2>:
    4940:	1c df       	rcall	.-456    	; 0x477a <__fp_cmp>
    4942:	08 f4       	brcc	.+2      	; 0x4946 <__gesf2+0x6>
    4944:	8f ef       	ldi	r24, 0xFF	; 255
    4946:	08 95       	ret

00004948 <inverse>:
    4948:	9b 01       	movw	r18, r22
    494a:	ac 01       	movw	r20, r24
    494c:	60 e0       	ldi	r22, 0x00	; 0
    494e:	70 e0       	ldi	r23, 0x00	; 0
    4950:	80 e8       	ldi	r24, 0x80	; 128
    4952:	9f e3       	ldi	r25, 0x3F	; 63
    4954:	c0 cd       	rjmp	.-1152   	; 0x44d6 <__divsf3>

00004956 <__mulsf3>:
    4956:	0b d0       	rcall	.+22     	; 0x496e <__mulsf3x>
    4958:	a8 cf       	rjmp	.-176    	; 0x48aa <__fp_round>
    495a:	71 df       	rcall	.-286    	; 0x483e <__fp_pscA>
    495c:	28 f0       	brcs	.+10     	; 0x4968 <__mulsf3+0x12>
    495e:	76 df       	rcall	.-276    	; 0x484c <__fp_pscB>
    4960:	18 f0       	brcs	.+6      	; 0x4968 <__mulsf3+0x12>
    4962:	95 23       	and	r25, r21
    4964:	09 f0       	breq	.+2      	; 0x4968 <__mulsf3+0x12>
    4966:	2d cf       	rjmp	.-422    	; 0x47c2 <__fp_inf>
    4968:	32 cf       	rjmp	.-412    	; 0x47ce <__fp_nan>
    496a:	11 24       	eor	r1, r1
    496c:	e3 cf       	rjmp	.-58     	; 0x4934 <__fp_szero>

0000496e <__mulsf3x>:
    496e:	bf df       	rcall	.-130    	; 0x48ee <__fp_split3>
    4970:	a0 f3       	brcs	.-24     	; 0x495a <__mulsf3+0x4>

00004972 <__mulsf3_pse>:
    4972:	95 9f       	mul	r25, r21
    4974:	d1 f3       	breq	.-12     	; 0x496a <__mulsf3+0x14>
    4976:	95 0f       	add	r25, r21
    4978:	50 e0       	ldi	r21, 0x00	; 0
    497a:	55 1f       	adc	r21, r21
    497c:	62 9f       	mul	r22, r18
    497e:	f0 01       	movw	r30, r0
    4980:	72 9f       	mul	r23, r18
    4982:	bb 27       	eor	r27, r27
    4984:	f0 0d       	add	r31, r0
    4986:	b1 1d       	adc	r27, r1
    4988:	63 9f       	mul	r22, r19
    498a:	aa 27       	eor	r26, r26
    498c:	f0 0d       	add	r31, r0
    498e:	b1 1d       	adc	r27, r1
    4990:	aa 1f       	adc	r26, r26
    4992:	64 9f       	mul	r22, r20
    4994:	66 27       	eor	r22, r22
    4996:	b0 0d       	add	r27, r0
    4998:	a1 1d       	adc	r26, r1
    499a:	66 1f       	adc	r22, r22
    499c:	82 9f       	mul	r24, r18
    499e:	22 27       	eor	r18, r18
    49a0:	b0 0d       	add	r27, r0
    49a2:	a1 1d       	adc	r26, r1
    49a4:	62 1f       	adc	r22, r18
    49a6:	73 9f       	mul	r23, r19
    49a8:	b0 0d       	add	r27, r0
    49aa:	a1 1d       	adc	r26, r1
    49ac:	62 1f       	adc	r22, r18
    49ae:	83 9f       	mul	r24, r19
    49b0:	a0 0d       	add	r26, r0
    49b2:	61 1d       	adc	r22, r1
    49b4:	22 1f       	adc	r18, r18
    49b6:	74 9f       	mul	r23, r20
    49b8:	33 27       	eor	r19, r19
    49ba:	a0 0d       	add	r26, r0
    49bc:	61 1d       	adc	r22, r1
    49be:	23 1f       	adc	r18, r19
    49c0:	84 9f       	mul	r24, r20
    49c2:	60 0d       	add	r22, r0
    49c4:	21 1d       	adc	r18, r1
    49c6:	82 2f       	mov	r24, r18
    49c8:	76 2f       	mov	r23, r22
    49ca:	6a 2f       	mov	r22, r26
    49cc:	11 24       	eor	r1, r1
    49ce:	9f 57       	subi	r25, 0x7F	; 127
    49d0:	50 40       	sbci	r21, 0x00	; 0
    49d2:	8a f0       	brmi	.+34     	; 0x49f6 <__mulsf3_pse+0x84>
    49d4:	e1 f0       	breq	.+56     	; 0x4a0e <__mulsf3_pse+0x9c>
    49d6:	88 23       	and	r24, r24
    49d8:	4a f0       	brmi	.+18     	; 0x49ec <__mulsf3_pse+0x7a>
    49da:	ee 0f       	add	r30, r30
    49dc:	ff 1f       	adc	r31, r31
    49de:	bb 1f       	adc	r27, r27
    49e0:	66 1f       	adc	r22, r22
    49e2:	77 1f       	adc	r23, r23
    49e4:	88 1f       	adc	r24, r24
    49e6:	91 50       	subi	r25, 0x01	; 1
    49e8:	50 40       	sbci	r21, 0x00	; 0
    49ea:	a9 f7       	brne	.-22     	; 0x49d6 <__mulsf3_pse+0x64>
    49ec:	9e 3f       	cpi	r25, 0xFE	; 254
    49ee:	51 05       	cpc	r21, r1
    49f0:	70 f0       	brcs	.+28     	; 0x4a0e <__mulsf3_pse+0x9c>
    49f2:	e7 ce       	rjmp	.-562    	; 0x47c2 <__fp_inf>
    49f4:	9f cf       	rjmp	.-194    	; 0x4934 <__fp_szero>
    49f6:	5f 3f       	cpi	r21, 0xFF	; 255
    49f8:	ec f3       	brlt	.-6      	; 0x49f4 <__mulsf3_pse+0x82>
    49fa:	98 3e       	cpi	r25, 0xE8	; 232
    49fc:	dc f3       	brlt	.-10     	; 0x49f4 <__mulsf3_pse+0x82>
    49fe:	86 95       	lsr	r24
    4a00:	77 95       	ror	r23
    4a02:	67 95       	ror	r22
    4a04:	b7 95       	ror	r27
    4a06:	f7 95       	ror	r31
    4a08:	e7 95       	ror	r30
    4a0a:	9f 5f       	subi	r25, 0xFF	; 255
    4a0c:	c1 f7       	brne	.-16     	; 0x49fe <__mulsf3_pse+0x8c>
    4a0e:	fe 2b       	or	r31, r30
    4a10:	88 0f       	add	r24, r24
    4a12:	91 1d       	adc	r25, r1
    4a14:	96 95       	lsr	r25
    4a16:	87 95       	ror	r24
    4a18:	97 f9       	bld	r25, 7
    4a1a:	08 95       	ret

00004a1c <sin>:
    4a1c:	9f 93       	push	r25
    4a1e:	1e df       	rcall	.-452    	; 0x485c <__fp_rempio2>
    4a20:	0f 90       	pop	r0
    4a22:	07 fc       	sbrc	r0, 7
    4a24:	ee 5f       	subi	r30, 0xFE	; 254
    4a26:	52 cf       	rjmp	.-348    	; 0x48cc <__fp_sinus>
    4a28:	11 f4       	brne	.+4      	; 0x4a2e <sin+0x12>
    4a2a:	0e f4       	brtc	.+2      	; 0x4a2e <sin+0x12>
    4a2c:	d0 ce       	rjmp	.-608    	; 0x47ce <__fp_nan>
    4a2e:	41 c0       	rjmp	.+130    	; 0x4ab2 <__fp_mpack>

00004a30 <sqrt>:
    4a30:	66 df       	rcall	.-308    	; 0x48fe <__fp_splitA>
    4a32:	d0 f3       	brcs	.-12     	; 0x4a28 <sin+0xc>
    4a34:	99 23       	and	r25, r25
    4a36:	d9 f3       	breq	.-10     	; 0x4a2e <sin+0x12>
    4a38:	ce f3       	brts	.-14     	; 0x4a2c <sin+0x10>
    4a3a:	9f 57       	subi	r25, 0x7F	; 127
    4a3c:	55 0b       	sbc	r21, r21
    4a3e:	87 ff       	sbrs	r24, 7
    4a40:	46 d0       	rcall	.+140    	; 0x4ace <__fp_norm2>
    4a42:	00 24       	eor	r0, r0
    4a44:	a0 e6       	ldi	r26, 0x60	; 96
    4a46:	40 ea       	ldi	r20, 0xA0	; 160
    4a48:	90 01       	movw	r18, r0
    4a4a:	80 58       	subi	r24, 0x80	; 128
    4a4c:	56 95       	lsr	r21
    4a4e:	97 95       	ror	r25
    4a50:	28 f4       	brcc	.+10     	; 0x4a5c <sqrt+0x2c>
    4a52:	80 5c       	subi	r24, 0xC0	; 192
    4a54:	66 0f       	add	r22, r22
    4a56:	77 1f       	adc	r23, r23
    4a58:	88 1f       	adc	r24, r24
    4a5a:	20 f0       	brcs	.+8      	; 0x4a64 <sqrt+0x34>
    4a5c:	26 17       	cp	r18, r22
    4a5e:	37 07       	cpc	r19, r23
    4a60:	48 07       	cpc	r20, r24
    4a62:	30 f4       	brcc	.+12     	; 0x4a70 <sqrt+0x40>
    4a64:	62 1b       	sub	r22, r18
    4a66:	73 0b       	sbc	r23, r19
    4a68:	84 0b       	sbc	r24, r20
    4a6a:	20 29       	or	r18, r0
    4a6c:	31 29       	or	r19, r1
    4a6e:	4a 2b       	or	r20, r26
    4a70:	a6 95       	lsr	r26
    4a72:	17 94       	ror	r1
    4a74:	07 94       	ror	r0
    4a76:	20 25       	eor	r18, r0
    4a78:	31 25       	eor	r19, r1
    4a7a:	4a 27       	eor	r20, r26
    4a7c:	58 f7       	brcc	.-42     	; 0x4a54 <sqrt+0x24>
    4a7e:	66 0f       	add	r22, r22
    4a80:	77 1f       	adc	r23, r23
    4a82:	88 1f       	adc	r24, r24
    4a84:	20 f0       	brcs	.+8      	; 0x4a8e <sqrt+0x5e>
    4a86:	26 17       	cp	r18, r22
    4a88:	37 07       	cpc	r19, r23
    4a8a:	48 07       	cpc	r20, r24
    4a8c:	30 f4       	brcc	.+12     	; 0x4a9a <sqrt+0x6a>
    4a8e:	62 0b       	sbc	r22, r18
    4a90:	73 0b       	sbc	r23, r19
    4a92:	84 0b       	sbc	r24, r20
    4a94:	20 0d       	add	r18, r0
    4a96:	31 1d       	adc	r19, r1
    4a98:	41 1d       	adc	r20, r1
    4a9a:	a0 95       	com	r26
    4a9c:	81 f7       	brne	.-32     	; 0x4a7e <sqrt+0x4e>
    4a9e:	b9 01       	movw	r22, r18
    4aa0:	84 2f       	mov	r24, r20
    4aa2:	91 58       	subi	r25, 0x81	; 129
    4aa4:	88 0f       	add	r24, r24
    4aa6:	96 95       	lsr	r25
    4aa8:	87 95       	ror	r24
    4aaa:	08 95       	ret

00004aac <square>:
    4aac:	9b 01       	movw	r18, r22
    4aae:	ac 01       	movw	r20, r24
    4ab0:	52 cf       	rjmp	.-348    	; 0x4956 <__mulsf3>

00004ab2 <__fp_mpack>:
    4ab2:	9f 3f       	cpi	r25, 0xFF	; 255
    4ab4:	31 f0       	breq	.+12     	; 0x4ac2 <__fp_mpack_finite+0xc>

00004ab6 <__fp_mpack_finite>:
    4ab6:	91 50       	subi	r25, 0x01	; 1
    4ab8:	20 f4       	brcc	.+8      	; 0x4ac2 <__fp_mpack_finite+0xc>
    4aba:	87 95       	ror	r24
    4abc:	77 95       	ror	r23
    4abe:	67 95       	ror	r22
    4ac0:	b7 95       	ror	r27
    4ac2:	88 0f       	add	r24, r24
    4ac4:	91 1d       	adc	r25, r1
    4ac6:	96 95       	lsr	r25
    4ac8:	87 95       	ror	r24
    4aca:	97 f9       	bld	r25, 7
    4acc:	08 95       	ret

00004ace <__fp_norm2>:
    4ace:	91 50       	subi	r25, 0x01	; 1
    4ad0:	50 40       	sbci	r21, 0x00	; 0
    4ad2:	66 0f       	add	r22, r22
    4ad4:	77 1f       	adc	r23, r23
    4ad6:	88 1f       	adc	r24, r24
    4ad8:	d2 f7       	brpl	.-12     	; 0x4ace <__fp_norm2>
    4ada:	08 95       	ret

00004adc <__fp_powsodd>:
    4adc:	9f 93       	push	r25
    4ade:	8f 93       	push	r24
    4ae0:	7f 93       	push	r23
    4ae2:	6f 93       	push	r22
    4ae4:	ff 93       	push	r31
    4ae6:	ef 93       	push	r30
    4ae8:	9b 01       	movw	r18, r22
    4aea:	ac 01       	movw	r20, r24
    4aec:	34 df       	rcall	.-408    	; 0x4956 <__mulsf3>
    4aee:	ef 91       	pop	r30
    4af0:	ff 91       	pop	r31
    4af2:	80 de       	rcall	.-768    	; 0x47f4 <__fp_powser>
    4af4:	2f 91       	pop	r18
    4af6:	3f 91       	pop	r19
    4af8:	4f 91       	pop	r20
    4afa:	5f 91       	pop	r21
    4afc:	2c cf       	rjmp	.-424    	; 0x4956 <__mulsf3>

00004afe <__tablejump2__>:
    4afe:	ee 0f       	add	r30, r30
    4b00:	ff 1f       	adc	r31, r31

00004b02 <__tablejump__>:
    4b02:	05 90       	lpm	r0, Z+
    4b04:	f4 91       	lpm	r31, Z
    4b06:	e0 2d       	mov	r30, r0
    4b08:	09 94       	ijmp

00004b0a <__moddi3>:
    4b0a:	68 94       	set
    4b0c:	01 c0       	rjmp	.+2      	; 0x4b10 <__divdi3_moddi3>

00004b0e <__divdi3>:
    4b0e:	e8 94       	clt

00004b10 <__divdi3_moddi3>:
    4b10:	f9 2f       	mov	r31, r25
    4b12:	f1 2b       	or	r31, r17
    4b14:	0a f0       	brmi	.+2      	; 0x4b18 <__divdi3_moddi3+0x8>
    4b16:	27 c0       	rjmp	.+78     	; 0x4b66 <__udivdi3_umoddi3>
    4b18:	a0 e0       	ldi	r26, 0x00	; 0
    4b1a:	b0 e0       	ldi	r27, 0x00	; 0
    4b1c:	e1 e9       	ldi	r30, 0x91	; 145
    4b1e:	f5 e2       	ldi	r31, 0x25	; 37
    4b20:	93 c0       	rjmp	.+294    	; 0x4c48 <__prologue_saves__+0xc>
    4b22:	09 2e       	mov	r0, r25
    4b24:	05 94       	asr	r0
    4b26:	1a f4       	brpl	.+6      	; 0x4b2e <__divdi3_moddi3+0x1e>
    4b28:	79 d0       	rcall	.+242    	; 0x4c1c <__negdi2>
    4b2a:	11 23       	and	r17, r17
    4b2c:	92 f4       	brpl	.+36     	; 0x4b52 <__divdi3_moddi3+0x42>
    4b2e:	f0 e8       	ldi	r31, 0x80	; 128
    4b30:	0f 26       	eor	r0, r31
    4b32:	ff ef       	ldi	r31, 0xFF	; 255
    4b34:	e0 94       	com	r14
    4b36:	f0 94       	com	r15
    4b38:	00 95       	com	r16
    4b3a:	10 95       	com	r17
    4b3c:	b0 94       	com	r11
    4b3e:	c0 94       	com	r12
    4b40:	d0 94       	com	r13
    4b42:	a1 94       	neg	r10
    4b44:	bf 0a       	sbc	r11, r31
    4b46:	cf 0a       	sbc	r12, r31
    4b48:	df 0a       	sbc	r13, r31
    4b4a:	ef 0a       	sbc	r14, r31
    4b4c:	ff 0a       	sbc	r15, r31
    4b4e:	0f 0b       	sbc	r16, r31
    4b50:	1f 0b       	sbc	r17, r31
    4b52:	13 d0       	rcall	.+38     	; 0x4b7a <__udivmod64>
    4b54:	07 fc       	sbrc	r0, 7
    4b56:	62 d0       	rcall	.+196    	; 0x4c1c <__negdi2>
    4b58:	cd b7       	in	r28, 0x3d	; 61
    4b5a:	de b7       	in	r29, 0x3e	; 62
    4b5c:	ec e0       	ldi	r30, 0x0C	; 12
    4b5e:	90 c0       	rjmp	.+288    	; 0x4c80 <__epilogue_restores__+0xc>

00004b60 <__umoddi3>:
    4b60:	68 94       	set
    4b62:	01 c0       	rjmp	.+2      	; 0x4b66 <__udivdi3_umoddi3>

00004b64 <__udivdi3>:
    4b64:	e8 94       	clt

00004b66 <__udivdi3_umoddi3>:
    4b66:	8f 92       	push	r8
    4b68:	9f 92       	push	r9
    4b6a:	cf 93       	push	r28
    4b6c:	df 93       	push	r29
    4b6e:	05 d0       	rcall	.+10     	; 0x4b7a <__udivmod64>
    4b70:	df 91       	pop	r29
    4b72:	cf 91       	pop	r28
    4b74:	9f 90       	pop	r9
    4b76:	8f 90       	pop	r8
    4b78:	08 95       	ret

00004b7a <__udivmod64>:
    4b7a:	88 24       	eor	r8, r8
    4b7c:	99 24       	eor	r9, r9
    4b7e:	f4 01       	movw	r30, r8
    4b80:	e4 01       	movw	r28, r8
    4b82:	b0 e4       	ldi	r27, 0x40	; 64
    4b84:	9f 93       	push	r25
    4b86:	aa 27       	eor	r26, r26
    4b88:	9a 15       	cp	r25, r10
    4b8a:	8b 04       	cpc	r8, r11
    4b8c:	9c 04       	cpc	r9, r12
    4b8e:	ed 05       	cpc	r30, r13
    4b90:	fe 05       	cpc	r31, r14
    4b92:	cf 05       	cpc	r28, r15
    4b94:	d0 07       	cpc	r29, r16
    4b96:	a1 07       	cpc	r26, r17
    4b98:	98 f4       	brcc	.+38     	; 0x4bc0 <__udivmod64+0x46>
    4b9a:	ad 2f       	mov	r26, r29
    4b9c:	dc 2f       	mov	r29, r28
    4b9e:	cf 2f       	mov	r28, r31
    4ba0:	fe 2f       	mov	r31, r30
    4ba2:	e9 2d       	mov	r30, r9
    4ba4:	98 2c       	mov	r9, r8
    4ba6:	89 2e       	mov	r8, r25
    4ba8:	98 2f       	mov	r25, r24
    4baa:	87 2f       	mov	r24, r23
    4bac:	76 2f       	mov	r23, r22
    4bae:	65 2f       	mov	r22, r21
    4bb0:	54 2f       	mov	r21, r20
    4bb2:	43 2f       	mov	r20, r19
    4bb4:	32 2f       	mov	r19, r18
    4bb6:	22 27       	eor	r18, r18
    4bb8:	b8 50       	subi	r27, 0x08	; 8
    4bba:	31 f7       	brne	.-52     	; 0x4b88 <__udivmod64+0xe>
    4bbc:	bf 91       	pop	r27
    4bbe:	27 c0       	rjmp	.+78     	; 0x4c0e <__udivmod64+0x94>
    4bc0:	1b 2e       	mov	r1, r27
    4bc2:	bf 91       	pop	r27
    4bc4:	bb 27       	eor	r27, r27
    4bc6:	22 0f       	add	r18, r18
    4bc8:	33 1f       	adc	r19, r19
    4bca:	44 1f       	adc	r20, r20
    4bcc:	55 1f       	adc	r21, r21
    4bce:	66 1f       	adc	r22, r22
    4bd0:	77 1f       	adc	r23, r23
    4bd2:	88 1f       	adc	r24, r24
    4bd4:	99 1f       	adc	r25, r25
    4bd6:	88 1c       	adc	r8, r8
    4bd8:	99 1c       	adc	r9, r9
    4bda:	ee 1f       	adc	r30, r30
    4bdc:	ff 1f       	adc	r31, r31
    4bde:	cc 1f       	adc	r28, r28
    4be0:	dd 1f       	adc	r29, r29
    4be2:	aa 1f       	adc	r26, r26
    4be4:	bb 1f       	adc	r27, r27
    4be6:	8a 14       	cp	r8, r10
    4be8:	9b 04       	cpc	r9, r11
    4bea:	ec 05       	cpc	r30, r12
    4bec:	fd 05       	cpc	r31, r13
    4bee:	ce 05       	cpc	r28, r14
    4bf0:	df 05       	cpc	r29, r15
    4bf2:	a0 07       	cpc	r26, r16
    4bf4:	b1 07       	cpc	r27, r17
    4bf6:	48 f0       	brcs	.+18     	; 0x4c0a <__udivmod64+0x90>
    4bf8:	8a 18       	sub	r8, r10
    4bfa:	9b 08       	sbc	r9, r11
    4bfc:	ec 09       	sbc	r30, r12
    4bfe:	fd 09       	sbc	r31, r13
    4c00:	ce 09       	sbc	r28, r14
    4c02:	df 09       	sbc	r29, r15
    4c04:	a0 0b       	sbc	r26, r16
    4c06:	b1 0b       	sbc	r27, r17
    4c08:	21 60       	ori	r18, 0x01	; 1
    4c0a:	1a 94       	dec	r1
    4c0c:	e1 f6       	brne	.-72     	; 0x4bc6 <__udivmod64+0x4c>
    4c0e:	2e f4       	brtc	.+10     	; 0x4c1a <__udivmod64+0xa0>
    4c10:	94 01       	movw	r18, r8
    4c12:	af 01       	movw	r20, r30
    4c14:	be 01       	movw	r22, r28
    4c16:	cd 01       	movw	r24, r26
    4c18:	00 0c       	add	r0, r0
    4c1a:	08 95       	ret

00004c1c <__negdi2>:
    4c1c:	60 95       	com	r22
    4c1e:	70 95       	com	r23
    4c20:	80 95       	com	r24
    4c22:	90 95       	com	r25
    4c24:	30 95       	com	r19
    4c26:	40 95       	com	r20
    4c28:	50 95       	com	r21
    4c2a:	21 95       	neg	r18
    4c2c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c2e:	4f 4f       	sbci	r20, 0xFF	; 255
    4c30:	5f 4f       	sbci	r21, 0xFF	; 255
    4c32:	6f 4f       	sbci	r22, 0xFF	; 255
    4c34:	7f 4f       	sbci	r23, 0xFF	; 255
    4c36:	8f 4f       	sbci	r24, 0xFF	; 255
    4c38:	9f 4f       	sbci	r25, 0xFF	; 255
    4c3a:	08 95       	ret

00004c3c <__prologue_saves__>:
    4c3c:	2f 92       	push	r2
    4c3e:	3f 92       	push	r3
    4c40:	4f 92       	push	r4
    4c42:	5f 92       	push	r5
    4c44:	6f 92       	push	r6
    4c46:	7f 92       	push	r7
    4c48:	8f 92       	push	r8
    4c4a:	9f 92       	push	r9
    4c4c:	af 92       	push	r10
    4c4e:	bf 92       	push	r11
    4c50:	cf 92       	push	r12
    4c52:	df 92       	push	r13
    4c54:	ef 92       	push	r14
    4c56:	ff 92       	push	r15
    4c58:	0f 93       	push	r16
    4c5a:	1f 93       	push	r17
    4c5c:	cf 93       	push	r28
    4c5e:	df 93       	push	r29
    4c60:	cd b7       	in	r28, 0x3d	; 61
    4c62:	de b7       	in	r29, 0x3e	; 62
    4c64:	ca 1b       	sub	r28, r26
    4c66:	db 0b       	sbc	r29, r27
    4c68:	0f b6       	in	r0, 0x3f	; 63
    4c6a:	f8 94       	cli
    4c6c:	de bf       	out	0x3e, r29	; 62
    4c6e:	0f be       	out	0x3f, r0	; 63
    4c70:	cd bf       	out	0x3d, r28	; 61
    4c72:	09 94       	ijmp

00004c74 <__epilogue_restores__>:
    4c74:	2a 88       	ldd	r2, Y+18	; 0x12
    4c76:	39 88       	ldd	r3, Y+17	; 0x11
    4c78:	48 88       	ldd	r4, Y+16	; 0x10
    4c7a:	5f 84       	ldd	r5, Y+15	; 0x0f
    4c7c:	6e 84       	ldd	r6, Y+14	; 0x0e
    4c7e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4c80:	8c 84       	ldd	r8, Y+12	; 0x0c
    4c82:	9b 84       	ldd	r9, Y+11	; 0x0b
    4c84:	aa 84       	ldd	r10, Y+10	; 0x0a
    4c86:	b9 84       	ldd	r11, Y+9	; 0x09
    4c88:	c8 84       	ldd	r12, Y+8	; 0x08
    4c8a:	df 80       	ldd	r13, Y+7	; 0x07
    4c8c:	ee 80       	ldd	r14, Y+6	; 0x06
    4c8e:	fd 80       	ldd	r15, Y+5	; 0x05
    4c90:	0c 81       	ldd	r16, Y+4	; 0x04
    4c92:	1b 81       	ldd	r17, Y+3	; 0x03
    4c94:	aa 81       	ldd	r26, Y+2	; 0x02
    4c96:	b9 81       	ldd	r27, Y+1	; 0x01
    4c98:	ce 0f       	add	r28, r30
    4c9a:	d1 1d       	adc	r29, r1
    4c9c:	0f b6       	in	r0, 0x3f	; 63
    4c9e:	f8 94       	cli
    4ca0:	de bf       	out	0x3e, r29	; 62
    4ca2:	0f be       	out	0x3f, r0	; 63
    4ca4:	cd bf       	out	0x3d, r28	; 61
    4ca6:	ed 01       	movw	r28, r26
    4ca8:	08 95       	ret

00004caa <__ashrdi3>:
    4caa:	97 fb       	bst	r25, 7
    4cac:	10 f8       	bld	r1, 0

00004cae <__lshrdi3>:
    4cae:	16 94       	lsr	r1
    4cb0:	00 08       	sbc	r0, r0
    4cb2:	0f 93       	push	r16
    4cb4:	08 30       	cpi	r16, 0x08	; 8
    4cb6:	98 f0       	brcs	.+38     	; 0x4cde <__lshrdi3+0x30>
    4cb8:	08 50       	subi	r16, 0x08	; 8
    4cba:	23 2f       	mov	r18, r19
    4cbc:	34 2f       	mov	r19, r20
    4cbe:	45 2f       	mov	r20, r21
    4cc0:	56 2f       	mov	r21, r22
    4cc2:	67 2f       	mov	r22, r23
    4cc4:	78 2f       	mov	r23, r24
    4cc6:	89 2f       	mov	r24, r25
    4cc8:	90 2d       	mov	r25, r0
    4cca:	f4 cf       	rjmp	.-24     	; 0x4cb4 <__lshrdi3+0x6>
    4ccc:	05 94       	asr	r0
    4cce:	97 95       	ror	r25
    4cd0:	87 95       	ror	r24
    4cd2:	77 95       	ror	r23
    4cd4:	67 95       	ror	r22
    4cd6:	57 95       	ror	r21
    4cd8:	47 95       	ror	r20
    4cda:	37 95       	ror	r19
    4cdc:	27 95       	ror	r18
    4cde:	0a 95       	dec	r16
    4ce0:	aa f7       	brpl	.-22     	; 0x4ccc <__lshrdi3+0x1e>
    4ce2:	0f 91       	pop	r16
    4ce4:	08 95       	ret

00004ce6 <__cmpdi2_s8>:
    4ce6:	00 24       	eor	r0, r0
    4ce8:	a7 fd       	sbrc	r26, 7
    4cea:	00 94       	com	r0
    4cec:	2a 17       	cp	r18, r26
    4cee:	30 05       	cpc	r19, r0
    4cf0:	40 05       	cpc	r20, r0
    4cf2:	50 05       	cpc	r21, r0
    4cf4:	60 05       	cpc	r22, r0
    4cf6:	70 05       	cpc	r23, r0
    4cf8:	80 05       	cpc	r24, r0
    4cfa:	90 05       	cpc	r25, r0
    4cfc:	08 95       	ret

00004cfe <_exit>:
    4cfe:	f8 94       	cli

00004d00 <__stop_program>:
    4d00:	ff cf       	rjmp	.-2      	; 0x4d00 <__stop_program>
