
PWMTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  0000164a  000016de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000164a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800184  00800184  00001762  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001762  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  00001792  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a8f  00000000  00000000  00001912  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a6  00000000  00000000  000033a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010ca  00000000  00000000  00003c47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000068c  00000000  00000000  00004d14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b2c  00000000  00000000  000053a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001e78  00000000  00000000  00005ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000130  00000000  00000000  00007d44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5b c0       	rjmp	.+182    	; 0xb8 <__ctors_end>
       2:	00 00       	nop
       4:	77 c0       	rjmp	.+238    	; 0xf4 <__bad_interrupt>
       6:	00 00       	nop
       8:	75 c0       	rjmp	.+234    	; 0xf4 <__bad_interrupt>
       a:	00 00       	nop
       c:	73 c0       	rjmp	.+230    	; 0xf4 <__bad_interrupt>
       e:	00 00       	nop
      10:	71 c0       	rjmp	.+226    	; 0xf4 <__bad_interrupt>
      12:	00 00       	nop
      14:	6f c0       	rjmp	.+222    	; 0xf4 <__bad_interrupt>
      16:	00 00       	nop
      18:	6d c0       	rjmp	.+218    	; 0xf4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6b c0       	rjmp	.+214    	; 0xf4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	69 c0       	rjmp	.+210    	; 0xf4 <__bad_interrupt>
      22:	00 00       	nop
      24:	67 c0       	rjmp	.+206    	; 0xf4 <__bad_interrupt>
      26:	00 00       	nop
      28:	65 c0       	rjmp	.+202    	; 0xf4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c7       	rjmp	.+3750   	; 0xed4 <__vector_11>
      2e:	00 00       	nop
      30:	61 c0       	rjmp	.+194    	; 0xf4 <__bad_interrupt>
      32:	00 00       	nop
      34:	5f c0       	rjmp	.+190    	; 0xf4 <__bad_interrupt>
      36:	00 00       	nop
      38:	5d c0       	rjmp	.+186    	; 0xf4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2b c7       	rjmp	.+3670   	; 0xe94 <__vector_15>
      3e:	00 00       	nop
      40:	fa c5       	rjmp	.+3060   	; 0xc36 <__vector_16>
      42:	00 00       	nop
      44:	57 c0       	rjmp	.+174    	; 0xf4 <__bad_interrupt>
      46:	00 00       	nop
      48:	55 c0       	rjmp	.+170    	; 0xf4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	53 c0       	rjmp	.+166    	; 0xf4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	01 c6       	rjmp	.+3074   	; 0xc54 <__vector_20>
      52:	00 00       	nop
      54:	4f c0       	rjmp	.+158    	; 0xf4 <__bad_interrupt>
      56:	00 00       	nop
      58:	61 c6       	rjmp	.+3266   	; 0xd1c <__vector_22>
      5a:	00 00       	nop
      5c:	4b c0       	rjmp	.+150    	; 0xf4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	49 c0       	rjmp	.+146    	; 0xf4 <__bad_interrupt>
      62:	00 00       	nop
      64:	47 c0       	rjmp	.+142    	; 0xf4 <__bad_interrupt>
      66:	00 00       	nop
      68:	45 c0       	rjmp	.+138    	; 0xf4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	43 c0       	rjmp	.+134    	; 0xf4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	23 c6       	rjmp	.+3142   	; 0xcb8 <__vector_28>
      72:	00 00       	nop
      74:	3f c0       	rjmp	.+126    	; 0xf4 <__bad_interrupt>
      76:	00 00       	nop
      78:	83 c6       	rjmp	.+3334   	; 0xd80 <__vector_30>
      7a:	00 00       	nop
      7c:	3b c0       	rjmp	.+118    	; 0xf4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	39 c0       	rjmp	.+114    	; 0xf4 <__bad_interrupt>
      82:	00 00       	nop
      84:	37 c0       	rjmp	.+110    	; 0xf4 <__bad_interrupt>
      86:	00 00       	nop
      88:	35 c0       	rjmp	.+106    	; 0xf4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3c 04       	cpc	r3, r12
      8e:	4e 04       	cpc	r4, r14
      90:	25 05       	cpc	r18, r5
      92:	11 05       	cpc	r17, r1
      94:	25 05       	cpc	r18, r5
      96:	25 05       	cpc	r18, r5
      98:	25 05       	cpc	r18, r5
      9a:	25 05       	cpc	r18, r5
      9c:	25 05       	cpc	r18, r5
      9e:	04 05       	cpc	r16, r4
      a0:	25 05       	cpc	r18, r5
      a2:	25 05       	cpc	r18, r5
      a4:	25 05       	cpc	r18, r5
      a6:	25 05       	cpc	r18, r5
      a8:	25 05       	cpc	r18, r5
      aa:	25 05       	cpc	r18, r5
      ac:	09 05       	cpc	r16, r9
      ae:	25 05       	cpc	r18, r5
      b0:	90 04       	cpc	r9, r0
      b2:	25 05       	cpc	r18, r5
      b4:	25 05       	cpc	r18, r5
      b6:	cc 04       	cpc	r12, r12

000000b8 <__ctors_end>:
      b8:	11 24       	eor	r1, r1
      ba:	1f be       	out	0x3f, r1	; 63
      bc:	cf ef       	ldi	r28, 0xFF	; 255
      be:	d0 e4       	ldi	r29, 0x40	; 64
      c0:	de bf       	out	0x3e, r29	; 62
      c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
      c4:	11 e0       	ldi	r17, 0x01	; 1
      c6:	a0 e0       	ldi	r26, 0x00	; 0
      c8:	b1 e0       	ldi	r27, 0x01	; 1
      ca:	ea e4       	ldi	r30, 0x4A	; 74
      cc:	f6 e1       	ldi	r31, 0x16	; 22
      ce:	00 e0       	ldi	r16, 0x00	; 0
      d0:	0b bf       	out	0x3b, r16	; 59
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x14>
      d4:	07 90       	elpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	a4 38       	cpi	r26, 0x84	; 132
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0x10>

000000de <__do_clear_bss>:
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	a4 e8       	ldi	r26, 0x84	; 132
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	a0 3a       	cpi	r26, 0xA0	; 160
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>
      ee:	03 d0       	rcall	.+6      	; 0xf6 <main>
      f0:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <_exit>

000000f4 <__bad_interrupt>:
      f4:	85 cf       	rjmp	.-246    	; 0x0 <__vectors>

000000f6 <main>:
#include "PWM.h"

#include "ADC.h"

int main(void)
{
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
      fa:	00 d0       	rcall	.+0      	; 0xfc <main+0x6>
      fc:	00 d0       	rcall	.+0      	; 0xfe <main+0x8>
      fe:	00 d0       	rcall	.+0      	; 0x100 <main+0xa>
     100:	cd b7       	in	r28, 0x3d	; 61
     102:	de b7       	in	r29, 0x3e	; 62
	
	//
	// Initialize Tracing
	//
	
	InitTrace(F_CPU, ERROR_LEVEL | INFO_LEVEL);
     104:	45 e0       	ldi	r20, 0x05	; 5
     106:	60 e0       	ldi	r22, 0x00	; 0
     108:	72 e1       	ldi	r23, 0x12	; 18
     10a:	8a e7       	ldi	r24, 0x7A	; 122
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	74 d0       	rcall	.+232    	; 0x1f8 <InitTrace>
	
	SendTrace(INFO_LEVEL, "PWM Test\r\n");
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	91 e0       	ldi	r25, 0x01	; 1
     114:	9f 93       	push	r25
     116:	8f 93       	push	r24
     118:	14 e0       	ldi	r17, 0x04	; 4
     11a:	1f 93       	push	r17
     11c:	68 d3       	rcall	.+1744   	; 0x7ee <SendTrace>
	
	SendTrace(INFO_LEVEL, "---------\r\n");
     11e:	8b e0       	ldi	r24, 0x0B	; 11
     120:	91 e0       	ldi	r25, 0x01	; 1
     122:	9f 93       	push	r25
     124:	8f 93       	push	r24
     126:	1f 93       	push	r17
     128:	62 d3       	rcall	.+1732   	; 0x7ee <SendTrace>
	
	//
	// Enable interrupts
	//
	
	sei();
     12a:	78 94       	sei
	
	//
	// Initialize ADC
	//
	
	AdcParams.Flags.IsLeftAdjustResult = 0;
     12c:	89 81       	ldd	r24, Y+1	; 0x01
     12e:	8e 7f       	andi	r24, 0xFE	; 254
     130:	89 83       	std	Y+1, r24	; 0x01
	
	AdcParams.RefVoltSelect = AREF_VOLT;
     132:	1a 82       	std	Y+2, r1	; 0x02
	
	AdcParams.Prescalar = DIV_FACTOR_0;
     134:	1b 82       	std	Y+3, r1	; 0x03
	
	AdcParams.EnabledChannelsBitVector = (0x1 << ADC_CHANNEL_0);
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	8c 83       	std	Y+4, r24	; 0x04
	
	InitADC(&AdcParams);
     13a:	ce 01       	movw	r24, r28
     13c:	01 96       	adiw	r24, 0x01	; 1
     13e:	e2 d6       	rcall	.+3524   	; 0xf04 <InitADC>
		Pulse = PWM_PULSE_DIVS;
	}*/ 
	
	Pulse = 7;
	
	InitPWM(Pulse);
     140:	87 e0       	ldi	r24, 0x07	; 7
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	4f d6       	rcall	.+3230   	; 0xde4 <InitPWM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     146:	2f ef       	ldi	r18, 0xFF	; 255
     148:	89 e6       	ldi	r24, 0x69	; 105
     14a:	98 e1       	ldi	r25, 0x18	; 24
     14c:	21 50       	subi	r18, 0x01	; 1
     14e:	80 40       	sbci	r24, 0x00	; 0
     150:	90 40       	sbci	r25, 0x00	; 0
     152:	e1 f7       	brne	.-8      	; 0x14c <main+0x56>
     154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x60>
     156:	00 00       	nop
     158:	0f 90       	pop	r0
     15a:	0f 90       	pop	r0
     15c:	0f 90       	pop	r0
     15e:	0f 90       	pop	r0
     160:	0f 90       	pop	r0
     162:	0f 90       	pop	r0
		
		Pulse = ADCValue / Threshold;
		
		if (Pulse >= PWM_PULSE_DIVS)
		{
			Pulse = PWM_PULSE_DIVS;
     164:	68 94       	set
     166:	ee 24       	eor	r14, r14
     168:	e4 f8       	bld	r14, 4
		}    
    
		SendTrace(INFO_LEVEL,"ADC Value = %d, Pulse = %d\r\n", ADCValue, Pulse);
     16a:	07 e1       	ldi	r16, 0x17	; 23
     16c:	11 e0       	ldi	r17, 0x01	; 1
     16e:	68 94       	set
     170:	ff 24       	eor	r15, r15
     172:	f2 f8       	bld	r15, 2
	
	_delay_ms(1000);
	
    while(1)
    {
		ADCValue = 0;
     174:	1e 82       	std	Y+6, r1	; 0x06
     176:	1d 82       	std	Y+5, r1	; 0x05
		
		ADCRead(ADC_CHANNEL_0, &ADCValue);
     178:	be 01       	movw	r22, r28
     17a:	6b 5f       	subi	r22, 0xFB	; 251
     17c:	7f 4f       	sbci	r23, 0xFF	; 255
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	de d6       	rcall	.+3516   	; 0xf3e <ADCRead>
		
		ADCRead(ADC_CHANNEL_0, &ADCValue);
     182:	be 01       	movw	r22, r28
     184:	6b 5f       	subi	r22, 0xFB	; 251
     186:	7f 4f       	sbci	r23, 0xFF	; 255
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	d9 d6       	rcall	.+3506   	; 0xf3e <ADCRead>
		
		Pulse = ADCValue / Threshold;
     18c:	4d 81       	ldd	r20, Y+5	; 0x05
     18e:	5e 81       	ldd	r21, Y+6	; 0x06
     190:	9a 01       	movw	r18, r20
     192:	a1 e1       	ldi	r26, 0x11	; 17
     194:	b4 e0       	ldi	r27, 0x04	; 4
     196:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__umulhisi3>
     19a:	ba 01       	movw	r22, r20
     19c:	68 1b       	sub	r22, r24
     19e:	79 0b       	sbc	r23, r25
     1a0:	76 95       	lsr	r23
     1a2:	67 95       	ror	r22
     1a4:	86 0f       	add	r24, r22
     1a6:	97 1f       	adc	r25, r23
     1a8:	bc 01       	movw	r22, r24
     1aa:	76 95       	lsr	r23
     1ac:	67 95       	ror	r22
     1ae:	72 95       	swap	r23
     1b0:	62 95       	swap	r22
     1b2:	6f 70       	andi	r22, 0x0F	; 15
     1b4:	67 27       	eor	r22, r23
     1b6:	7f 70       	andi	r23, 0x0F	; 15
     1b8:	67 27       	eor	r22, r23
     1ba:	d6 2e       	mov	r13, r22
		
		if (Pulse >= PWM_PULSE_DIVS)
     1bc:	2f e0       	ldi	r18, 0x0F	; 15
     1be:	26 17       	cp	r18, r22
     1c0:	08 f4       	brcc	.+2      	; 0x1c4 <main+0xce>
		{
			Pulse = PWM_PULSE_DIVS;
     1c2:	de 2c       	mov	r13, r14
		}    
    
		SendTrace(INFO_LEVEL,"ADC Value = %d, Pulse = %d\r\n", ADCValue, Pulse);
     1c4:	1f 92       	push	r1
     1c6:	df 92       	push	r13
     1c8:	5f 93       	push	r21
     1ca:	4f 93       	push	r20
     1cc:	1f 93       	push	r17
     1ce:	0f 93       	push	r16
     1d0:	ff 92       	push	r15
     1d2:	0d d3       	rcall	.+1562   	; 0x7ee <SendTrace>
	
		PWMChangePulseDuration(PWM_CHANNEL_0, Pulse);
     1d4:	6d 2d       	mov	r22, r13
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	31 d6       	rcall	.+3170   	; 0xe3c <PWMChangePulseDuration>
		
		PWMChangePulseDuration(PWM_CHANNEL_1, Pulse);
     1da:	6d 2d       	mov	r22, r13
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	2e d6       	rcall	.+3164   	; 0xe3c <PWMChangePulseDuration>
		
		PWMChangePulseDuration(PWM_CHANNEL_2, Pulse);
     1e0:	6d 2d       	mov	r22, r13
     1e2:	82 e0       	ldi	r24, 0x02	; 2
     1e4:	2b d6       	rcall	.+3158   	; 0xe3c <PWMChangePulseDuration>
		
		PWMChangePulseDuration(PWM_CHANNEL_3, Pulse);
     1e6:	6d 2d       	mov	r22, r13
     1e8:	83 e0       	ldi	r24, 0x03	; 3
     1ea:	28 d6       	rcall	.+3152   	; 0xe3c <PWMChangePulseDuration>
	}
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	f8 94       	cli
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	0f be       	out	0x3f, r0	; 63
     1f4:	cd bf       	out	0x3d, r28	; 61
     1f6:	be cf       	rjmp	.-132    	; 0x174 <main+0x7e>

000001f8 <InitTrace>:
#ifdef DEBUG

void
InitTrace(unsigned long ProcFrequency, unsigned char TraceLevel)
{
	if (!gTraceInitialized)
     1f8:	80 91 84 01 	lds	r24, 0x0184
     1fc:	81 11       	cpse	r24, r1
     1fe:	09 c0       	rjmp	.+18     	; 0x212 <InitTrace+0x1a>
	{

		gTraceLevel = TraceLevel;
     200:	40 93 8d 01 	sts	0x018D, r20

		InitUARTSync(UART_ZERO, BR_9600, NORMAL_MODE);	
     204:	40 e0       	ldi	r20, 0x00	; 0
     206:	63 e3       	ldi	r22, 0x33	; 51
     208:	70 e0       	ldi	r23, 0x00	; 0
     20a:	43 d4       	rcall	.+2182   	; 0xa92 <InitUARTSync>
		
		gTraceInitialized = TRUE;
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	80 93 84 01 	sts	0x0184, r24
     212:	08 95       	ret

00000214 <SendStringValue>:
SendStringValue(char *String)
{

	unsigned long Length = 0;
	
	Length = strlen(String);
     214:	fc 01       	movw	r30, r24
     216:	01 90       	ld	r0, Z+
     218:	00 20       	and	r0, r0
     21a:	e9 f7       	brne	.-6      	; 0x216 <SendStringValue+0x2>
     21c:	31 97       	sbiw	r30, 0x01	; 1
     21e:	9f 01       	movw	r18, r30
     220:	28 1b       	sub	r18, r24
     222:	39 0b       	sbc	r19, r25
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
	
	UARTTransmitSync(UART_ZERO, (PVOID) String, Length);
     228:	bc 01       	movw	r22, r24
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	ff c4       	rjmp	.+2558   	; 0xc2c <UARTTransmitSync>
     22e:	08 95       	ret

00000230 <SendHexValue>:
	
}

void
SendHexValue(unsigned long long Value)
{
     230:	8f 92       	push	r8
     232:	9f 92       	push	r9
     234:	af 92       	push	r10
     236:	bf 92       	push	r11
     238:	cf 92       	push	r12
     23a:	df 92       	push	r13
     23c:	ef 92       	push	r14
     23e:	ff 92       	push	r15
     240:	0f 93       	push	r16
     242:	1f 93       	push	r17
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	cd b7       	in	r28, 0x3d	; 61
     24a:	de b7       	in	r29, 0x3e	; 62
     24c:	da 95       	dec	r29
     24e:	0f b6       	in	r0, 0x3f	; 63
     250:	f8 94       	cli
     252:	de bf       	out	0x3e, r29	; 62
     254:	0f be       	out	0x3f, r0	; 63
     256:	cd bf       	out	0x3d, r28	; 61
     258:	02 2f       	mov	r16, r18
     25a:	93 2e       	mov	r9, r19
     25c:	a4 2e       	mov	r10, r20
     25e:	b5 2e       	mov	r11, r21
     260:	c6 2e       	mov	r12, r22
     262:	d7 2e       	mov	r13, r23
     264:	e8 2e       	mov	r14, r24
     266:	f9 2e       	mov	r15, r25

	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
     268:	10 e0       	ldi	r17, 0x00	; 0

		if (Value < 16)
		{
			TransmitChar[Count] = Value;

			Value = 0;
     26a:	81 2c       	mov	r8, r1


	do
	{

		if (Value < 16)
     26c:	20 2f       	mov	r18, r16
     26e:	39 2d       	mov	r19, r9
     270:	4a 2d       	mov	r20, r10
     272:	5b 2d       	mov	r21, r11
     274:	6c 2d       	mov	r22, r12
     276:	7d 2d       	mov	r23, r13
     278:	8e 2d       	mov	r24, r14
     27a:	9f 2d       	mov	r25, r15
     27c:	af e0       	ldi	r26, 0x0F	; 15
     27e:	0e 94 17 0b 	call	0x162e	; 0x162e <__cmpdi2_s8>
     282:	09 f0       	breq	.+2      	; 0x286 <SendHexValue+0x56>
     284:	80 f4       	brcc	.+32     	; 0x2a6 <SendHexValue+0x76>
		{
			TransmitChar[Count] = Value;
     286:	e1 e0       	ldi	r30, 0x01	; 1
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	ec 0f       	add	r30, r28
     28c:	fd 1f       	adc	r31, r29
     28e:	e1 0f       	add	r30, r17
     290:	f1 1d       	adc	r31, r1
     292:	00 83       	st	Z, r16

			Value = 0;
     294:	08 2d       	mov	r16, r8
     296:	98 2c       	mov	r9, r8
     298:	a8 2c       	mov	r10, r8
     29a:	b8 2c       	mov	r11, r8
     29c:	c8 2c       	mov	r12, r8
     29e:	d8 2c       	mov	r13, r8
     2a0:	e8 2c       	mov	r14, r8
     2a2:	f8 2c       	mov	r15, r8
     2a4:	1c c0       	rjmp	.+56     	; 0x2de <SendHexValue+0xae>
		}
		else
		{
			TransmitChar[Count] = Value % 16;
     2a6:	e1 e0       	ldi	r30, 0x01	; 1
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	ec 0f       	add	r30, r28
     2ac:	fd 1f       	adc	r31, r29
     2ae:	e1 0f       	add	r30, r17
     2b0:	f1 1d       	adc	r31, r1
     2b2:	80 2f       	mov	r24, r16
     2b4:	8f 70       	andi	r24, 0x0F	; 15
     2b6:	80 83       	st	Z, r24

			Value = Value / 16;
     2b8:	20 2f       	mov	r18, r16
     2ba:	39 2d       	mov	r19, r9
     2bc:	4a 2d       	mov	r20, r10
     2be:	5b 2d       	mov	r21, r11
     2c0:	6c 2d       	mov	r22, r12
     2c2:	7d 2d       	mov	r23, r13
     2c4:	8e 2d       	mov	r24, r14
     2c6:	9f 2d       	mov	r25, r15
     2c8:	04 e0       	ldi	r16, 0x04	; 4
     2ca:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__lshrdi3>
     2ce:	02 2f       	mov	r16, r18
     2d0:	93 2e       	mov	r9, r19
     2d2:	a4 2e       	mov	r10, r20
     2d4:	b5 2e       	mov	r11, r21
     2d6:	c6 2e       	mov	r12, r22
     2d8:	d7 2e       	mov	r13, r23
     2da:	e8 2e       	mov	r14, r24
     2dc:	f9 2e       	mov	r15, r25

		}
		
		if (TransmitChar[Count] > 9)
     2de:	e1 2f       	mov	r30, r17
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	a1 e0       	ldi	r26, 0x01	; 1
     2e4:	b0 e0       	ldi	r27, 0x00	; 0
     2e6:	ac 0f       	add	r26, r28
     2e8:	bd 1f       	adc	r27, r29
     2ea:	ae 0f       	add	r26, r30
     2ec:	bf 1f       	adc	r27, r31
     2ee:	8c 91       	ld	r24, X
     2f0:	8a 30       	cpi	r24, 0x0A	; 10
     2f2:	20 f0       	brcs	.+8      	; 0x2fc <SendHexValue+0xcc>
		{
			TransmitChar[Count] = TransmitChar[Count] + ASCII_HEX_CONVERSION;
     2f4:	fd 01       	movw	r30, r26
     2f6:	89 5a       	subi	r24, 0xA9	; 169
     2f8:	80 83       	st	Z, r24
     2fa:	08 c0       	rjmp	.+16     	; 0x30c <SendHexValue+0xdc>
		}
		else
		{
			TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     2fc:	21 e0       	ldi	r18, 0x01	; 1
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	2c 0f       	add	r18, r28
     302:	3d 1f       	adc	r19, r29
     304:	e2 0f       	add	r30, r18
     306:	f3 1f       	adc	r31, r19
     308:	80 5d       	subi	r24, 0xD0	; 208
     30a:	80 83       	st	Z, r24
		}
		
		Count++;
     30c:	1f 5f       	subi	r17, 0xFF	; 255

	} while (Value != 0);
     30e:	20 2f       	mov	r18, r16
     310:	39 2d       	mov	r19, r9
     312:	4a 2d       	mov	r20, r10
     314:	5b 2d       	mov	r21, r11
     316:	6c 2d       	mov	r22, r12
     318:	7d 2d       	mov	r23, r13
     31a:	8e 2d       	mov	r24, r14
     31c:	9f 2d       	mov	r25, r15
     31e:	a8 2d       	mov	r26, r8
     320:	0e 94 17 0b 	call	0x162e	; 0x162e <__cmpdi2_s8>
     324:	09 f0       	breq	.+2      	; 0x328 <SendHexValue+0xf8>
     326:	a2 cf       	rjmp	.-188    	; 0x26c <SendHexValue+0x3c>

	while (Count != 0)
     328:	11 23       	and	r17, r17
     32a:	91 f0       	breq	.+36     	; 0x350 <SendHexValue+0x120>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     32c:	61 2f       	mov	r22, r17
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	61 50       	subi	r22, 0x01	; 1
     332:	71 09       	sbc	r23, r1
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	8c 0f       	add	r24, r28
     33a:	9d 1f       	adc	r25, r29
     33c:	68 0f       	add	r22, r24
     33e:	79 1f       	adc	r23, r25
     340:	21 e0       	ldi	r18, 0x01	; 1
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	40 e0       	ldi	r20, 0x00	; 0
     346:	50 e0       	ldi	r21, 0x00	; 0
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	70 d4       	rcall	.+2272   	; 0xc2c <UARTTransmitSync>
		
		Count--;
     34c:	11 50       	subi	r17, 0x01	; 1
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
     34e:	71 f7       	brne	.-36     	; 0x32c <SendHexValue+0xfc>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}
}
     350:	d3 95       	inc	r29
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	de bf       	out	0x3e, r29	; 62
     358:	0f be       	out	0x3f, r0	; 63
     35a:	cd bf       	out	0x3d, r28	; 61
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	1f 91       	pop	r17
     362:	0f 91       	pop	r16
     364:	ff 90       	pop	r15
     366:	ef 90       	pop	r14
     368:	df 90       	pop	r13
     36a:	cf 90       	pop	r12
     36c:	bf 90       	pop	r11
     36e:	af 90       	pop	r10
     370:	9f 90       	pop	r9
     372:	8f 90       	pop	r8
     374:	08 95       	ret

00000376 <SendDecimalValue>:


void
SendDecimalValue(unsigned long long Value)
{
     376:	2f 92       	push	r2
     378:	3f 92       	push	r3
     37a:	4f 92       	push	r4
     37c:	5f 92       	push	r5
     37e:	6f 92       	push	r6
     380:	7f 92       	push	r7
     382:	8f 92       	push	r8
     384:	9f 92       	push	r9
     386:	af 92       	push	r10
     388:	bf 92       	push	r11
     38a:	cf 92       	push	r12
     38c:	df 92       	push	r13
     38e:	ef 92       	push	r14
     390:	ff 92       	push	r15
     392:	0f 93       	push	r16
     394:	1f 93       	push	r17
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
     39e:	c2 50       	subi	r28, 0x02	; 2
     3a0:	d1 40       	sbci	r29, 0x01	; 1
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	de bf       	out	0x3e, r29	; 62
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	cf 5f       	subi	r28, 0xFF	; 255
     3ae:	de 4f       	sbci	r29, 0xFE	; 254
     3b0:	28 83       	st	Y, r18
     3b2:	c1 50       	subi	r28, 0x01	; 1
     3b4:	d1 40       	sbci	r29, 0x01	; 1
     3b6:	23 2e       	mov	r2, r19
     3b8:	34 2e       	mov	r3, r20
     3ba:	45 2e       	mov	r4, r21
     3bc:	56 2e       	mov	r5, r22
     3be:	67 2e       	mov	r6, r23
     3c0:	78 2e       	mov	r7, r24
     3c2:	89 2e       	mov	r8, r25

	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
     3c4:	91 2c       	mov	r9, r1


	do
	{

		if (Value < 10)
     3c6:	cf 5f       	subi	r28, 0xFF	; 255
     3c8:	de 4f       	sbci	r29, 0xFE	; 254
     3ca:	28 81       	ld	r18, Y
     3cc:	c1 50       	subi	r28, 0x01	; 1
     3ce:	d1 40       	sbci	r29, 0x01	; 1
     3d0:	32 2d       	mov	r19, r2
     3d2:	43 2d       	mov	r20, r3
     3d4:	54 2d       	mov	r21, r4
     3d6:	65 2d       	mov	r22, r5
     3d8:	76 2d       	mov	r23, r6
     3da:	87 2d       	mov	r24, r7
     3dc:	98 2d       	mov	r25, r8
     3de:	a9 e0       	ldi	r26, 0x09	; 9
     3e0:	0e 94 17 0b 	call	0x162e	; 0x162e <__cmpdi2_s8>
     3e4:	09 f0       	breq	.+2      	; 0x3e8 <SendDecimalValue+0x72>
     3e6:	40 f4       	brcc	.+16     	; 0x3f8 <SendDecimalValue+0x82>

			Value = Value / 10;

		}
		
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     3e8:	fe 01       	movw	r30, r28
     3ea:	e9 0d       	add	r30, r9
     3ec:	f1 1d       	adc	r31, r1
     3ee:	82 2f       	mov	r24, r18
     3f0:	80 5d       	subi	r24, 0xD0	; 208
     3f2:	81 83       	std	Z+1, r24	; 0x01
		
		Count++;
     3f4:	93 94       	inc	r9
     3f6:	4b c0       	rjmp	.+150    	; 0x48e <SendDecimalValue+0x118>

			Value = 0;
		}
		else
		{
			TransmitChar[Count] = Value % 10;
     3f8:	0f 2e       	mov	r0, r31
     3fa:	fa e0       	ldi	r31, 0x0A	; 10
     3fc:	af 2e       	mov	r10, r31
     3fe:	f0 2d       	mov	r31, r0
     400:	b1 2c       	mov	r11, r1
     402:	c1 2c       	mov	r12, r1
     404:	d1 2c       	mov	r13, r1
     406:	e1 2c       	mov	r14, r1
     408:	f1 2c       	mov	r15, r1
     40a:	00 e0       	ldi	r16, 0x00	; 0
     40c:	10 e0       	ldi	r17, 0x00	; 0
     40e:	cf 5f       	subi	r28, 0xFF	; 255
     410:	de 4f       	sbci	r29, 0xFE	; 254
     412:	28 81       	ld	r18, Y
     414:	c1 50       	subi	r28, 0x01	; 1
     416:	d1 40       	sbci	r29, 0x01	; 1
     418:	32 2d       	mov	r19, r2
     41a:	43 2d       	mov	r20, r3
     41c:	54 2d       	mov	r21, r4
     41e:	65 2d       	mov	r22, r5
     420:	76 2d       	mov	r23, r6
     422:	87 2d       	mov	r24, r7
     424:	98 2d       	mov	r25, r8
     426:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__umoddi3>
     42a:	ce 5f       	subi	r28, 0xFE	; 254
     42c:	de 4f       	sbci	r29, 0xFE	; 254
     42e:	28 83       	st	Y, r18
     430:	c2 50       	subi	r28, 0x02	; 2
     432:	d1 40       	sbci	r29, 0x01	; 1

			Value = Value / 10;
     434:	cf 5f       	subi	r28, 0xFF	; 255
     436:	de 4f       	sbci	r29, 0xFE	; 254
     438:	28 81       	ld	r18, Y
     43a:	c1 50       	subi	r28, 0x01	; 1
     43c:	d1 40       	sbci	r29, 0x01	; 1
     43e:	32 2d       	mov	r19, r2
     440:	43 2d       	mov	r20, r3
     442:	54 2d       	mov	r21, r4
     444:	65 2d       	mov	r22, r5
     446:	76 2d       	mov	r23, r6
     448:	87 2d       	mov	r24, r7
     44a:	98 2d       	mov	r25, r8
     44c:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__udivdi3>
     450:	cf 5f       	subi	r28, 0xFF	; 255
     452:	de 4f       	sbci	r29, 0xFE	; 254
     454:	28 83       	st	Y, r18
     456:	c1 50       	subi	r28, 0x01	; 1
     458:	d1 40       	sbci	r29, 0x01	; 1
     45a:	23 2e       	mov	r2, r19
     45c:	34 2e       	mov	r3, r20
     45e:	45 2e       	mov	r4, r21
     460:	56 2e       	mov	r5, r22
     462:	67 2e       	mov	r6, r23
     464:	78 2e       	mov	r7, r24
     466:	89 2e       	mov	r8, r25

		}
		
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     468:	e1 e0       	ldi	r30, 0x01	; 1
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	ec 0f       	add	r30, r28
     46e:	fd 1f       	adc	r31, r29
     470:	e9 0d       	add	r30, r9
     472:	f1 1d       	adc	r31, r1
     474:	ce 5f       	subi	r28, 0xFE	; 254
     476:	de 4f       	sbci	r29, 0xFE	; 254
     478:	a8 81       	ld	r26, Y
     47a:	c2 50       	subi	r28, 0x02	; 2
     47c:	d1 40       	sbci	r29, 0x01	; 1
     47e:	a0 5d       	subi	r26, 0xD0	; 208
     480:	a0 83       	st	Z, r26
		
		Count++;
     482:	93 94       	inc	r9

	} while (Value != 0);
     484:	a0 e0       	ldi	r26, 0x00	; 0
     486:	0e 94 17 0b 	call	0x162e	; 0x162e <__cmpdi2_s8>
     48a:	09 f0       	breq	.+2      	; 0x48e <SendDecimalValue+0x118>
     48c:	9c cf       	rjmp	.-200    	; 0x3c6 <SendDecimalValue+0x50>

	while (Count != 0)
     48e:	99 20       	and	r9, r9
     490:	91 f0       	breq	.+36     	; 0x4b6 <SendDecimalValue+0x140>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     492:	69 2d       	mov	r22, r9
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	61 50       	subi	r22, 0x01	; 1
     498:	71 09       	sbc	r23, r1
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	8c 0f       	add	r24, r28
     4a0:	9d 1f       	adc	r25, r29
     4a2:	68 0f       	add	r22, r24
     4a4:	79 1f       	adc	r23, r25
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	40 e0       	ldi	r20, 0x00	; 0
     4ac:	50 e0       	ldi	r21, 0x00	; 0
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	bd d3       	rcall	.+1914   	; 0xc2c <UARTTransmitSync>
		
		Count--;
     4b2:	9a 94       	dec	r9
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
     4b4:	71 f7       	brne	.-36     	; 0x492 <SendDecimalValue+0x11c>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}	
}
     4b6:	ce 5f       	subi	r28, 0xFE	; 254
     4b8:	de 4f       	sbci	r29, 0xFE	; 254
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	f8 94       	cli
     4be:	de bf       	out	0x3e, r29	; 62
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	cd bf       	out	0x3d, r28	; 61
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	1f 91       	pop	r17
     4ca:	0f 91       	pop	r16
     4cc:	ff 90       	pop	r15
     4ce:	ef 90       	pop	r14
     4d0:	df 90       	pop	r13
     4d2:	cf 90       	pop	r12
     4d4:	bf 90       	pop	r11
     4d6:	af 90       	pop	r10
     4d8:	9f 90       	pop	r9
     4da:	8f 90       	pop	r8
     4dc:	7f 90       	pop	r7
     4de:	6f 90       	pop	r6
     4e0:	5f 90       	pop	r5
     4e2:	4f 90       	pop	r4
     4e4:	3f 90       	pop	r3
     4e6:	2f 90       	pop	r2
     4e8:	08 95       	ret

000004ea <SendDoubleValue>:

void
SendDoubleValue(double Value)
{
     4ea:	6f 92       	push	r6
     4ec:	7f 92       	push	r7
     4ee:	8f 92       	push	r8
     4f0:	9f 92       	push	r9
     4f2:	af 92       	push	r10
     4f4:	bf 92       	push	r11
     4f6:	cf 92       	push	r12
     4f8:	df 92       	push	r13
     4fa:	ef 92       	push	r14
     4fc:	ff 92       	push	r15
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	00 d0       	rcall	.+0      	; 0x508 <SendDoubleValue+0x1e>
     508:	1f 92       	push	r1
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	6b 01       	movw	r12, r22
     510:	7c 01       	movw	r14, r24
	
	long long IntPart;
	
	unsigned char FracPart;
	
	unsigned char Dot = '.';
     512:	8e e2       	ldi	r24, 0x2E	; 46
     514:	8a 83       	std	Y+2, r24	; 0x02
	
	unsigned char Minus = '-';
     516:	8d e2       	ldi	r24, 0x2D	; 45
     518:	8b 83       	std	Y+3, r24	; 0x03
	
	if (Value < 0)
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	a9 01       	movw	r20, r18
     520:	c7 01       	movw	r24, r14
     522:	b6 01       	movw	r22, r12
     524:	b0 d5       	rcall	.+2912   	; 0x1086 <__cmpsf2>
     526:	88 23       	and	r24, r24
     528:	6c f4       	brge	.+26     	; 0x544 <SendDoubleValue+0x5a>
	{
		
		UARTTransmitSync(UART_ZERO, (PVOID) &Minus, 1);
     52a:	21 e0       	ldi	r18, 0x01	; 1
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	40 e0       	ldi	r20, 0x00	; 0
     530:	50 e0       	ldi	r21, 0x00	; 0
     532:	be 01       	movw	r22, r28
     534:	6d 5f       	subi	r22, 0xFD	; 253
     536:	7f 4f       	sbci	r23, 0xFF	; 255
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	78 d3       	rcall	.+1776   	; 0xc2c <UARTTransmitSync>
		
		Value = Value * -1;
     53c:	f7 fa       	bst	r15, 7
     53e:	f0 94       	com	r15
     540:	f7 f8       	bld	r15, 7
     542:	f0 94       	com	r15
	}
	
	IntPart = (long long) Value;
     544:	c7 01       	movw	r24, r14
     546:	b6 01       	movw	r22, r12
     548:	a2 d5       	rcall	.+2884   	; 0x108e <__fixsfdi>
     54a:	62 2e       	mov	r6, r18
     54c:	73 2e       	mov	r7, r19
     54e:	84 2e       	mov	r8, r20
     550:	95 2e       	mov	r9, r21
     552:	a6 2e       	mov	r10, r22
     554:	b7 2e       	mov	r11, r23
     556:	08 2f       	mov	r16, r24
     558:	19 2f       	mov	r17, r25
		
	Value = Value - IntPart;
     55a:	ff d5       	rcall	.+3070   	; 0x115a <__floatdisf>
     55c:	9b 01       	movw	r18, r22
     55e:	ac 01       	movw	r20, r24
     560:	c7 01       	movw	r24, r14
     562:	b6 01       	movw	r22, r12
     564:	2b d5       	rcall	.+2646   	; 0xfbc <__subsf3>
     566:	6b 01       	movw	r12, r22
     568:	7c 01       	movw	r14, r24
	
	SendDecimalValue(IntPart);
     56a:	26 2d       	mov	r18, r6
     56c:	37 2d       	mov	r19, r7
     56e:	48 2d       	mov	r20, r8
     570:	59 2d       	mov	r21, r9
     572:	6a 2d       	mov	r22, r10
     574:	7b 2d       	mov	r23, r11
     576:	80 2f       	mov	r24, r16
     578:	91 2f       	mov	r25, r17
     57a:	fd de       	rcall	.-518    	; 0x376 <SendDecimalValue>
	
	UARTTransmitSync(UART_ZERO, (PVOID) &Dot, 1);
     57c:	21 e0       	ldi	r18, 0x01	; 1
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	40 e0       	ldi	r20, 0x00	; 0
     582:	50 e0       	ldi	r21, 0x00	; 0
     584:	be 01       	movw	r22, r28
     586:	6e 5f       	subi	r22, 0xFE	; 254
     588:	7f 4f       	sbci	r23, 0xFF	; 255
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	4f d3       	rcall	.+1694   	; 0xc2c <UARTTransmitSync>
	
	while (Value != 0)
     58e:	20 e0       	ldi	r18, 0x00	; 0
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	a9 01       	movw	r20, r18
     594:	c7 01       	movw	r24, r14
     596:	b6 01       	movw	r22, r12
     598:	76 d5       	rcall	.+2796   	; 0x1086 <__cmpsf2>
     59a:	88 23       	and	r24, r24
     59c:	49 f1       	breq	.+82     	; 0x5f0 <SendDoubleValue+0x106>
	{
		FracPart = (Value * 10);
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	40 e2       	ldi	r20, 0x20	; 32
     5a4:	51 e4       	ldi	r21, 0x41	; 65
     5a6:	c7 01       	movw	r24, r14
     5a8:	b6 01       	movw	r22, r12
     5aa:	db d6       	rcall	.+3510   	; 0x1362 <__mulsf3>
     5ac:	6b 01       	movw	r12, r22
     5ae:	7c 01       	movw	r14, r24
     5b0:	a8 d5       	rcall	.+2896   	; 0x1102 <__fixunssfsi>
     5b2:	16 2f       	mov	r17, r22
		
		Value = (Value * 10) - FracPart;
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	d5 d5       	rcall	.+2986   	; 0x1166 <__floatsisf>
     5bc:	9b 01       	movw	r18, r22
     5be:	ac 01       	movw	r20, r24
     5c0:	c7 01       	movw	r24, r14
     5c2:	b6 01       	movw	r22, r12
     5c4:	fb d4       	rcall	.+2550   	; 0xfbc <__subsf3>
     5c6:	6b 01       	movw	r12, r22
     5c8:	7c 01       	movw	r14, r24
		
		FracPart = FracPart + ASCII_DECIMAL_CONVERSION;
     5ca:	10 5d       	subi	r17, 0xD0	; 208
     5cc:	19 83       	std	Y+1, r17	; 0x01
		
		UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
     5ce:	21 e0       	ldi	r18, 0x01	; 1
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	40 e0       	ldi	r20, 0x00	; 0
     5d4:	50 e0       	ldi	r21, 0x00	; 0
     5d6:	be 01       	movw	r22, r28
     5d8:	6f 5f       	subi	r22, 0xFF	; 255
     5da:	7f 4f       	sbci	r23, 0xFF	; 255
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	26 d3       	rcall	.+1612   	; 0xc2c <UARTTransmitSync>
	
	SendDecimalValue(IntPart);
	
	UARTTransmitSync(UART_ZERO, (PVOID) &Dot, 1);
	
	while (Value != 0)
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	a9 01       	movw	r20, r18
     5e6:	c7 01       	movw	r24, r14
     5e8:	b6 01       	movw	r22, r12
     5ea:	4d d5       	rcall	.+2714   	; 0x1086 <__cmpsf2>
     5ec:	81 11       	cpse	r24, r1
     5ee:	d7 cf       	rjmp	.-82     	; 0x59e <SendDoubleValue+0xb4>
	
	//
	// Print 0
	//
	
	FracPart = ASCII_DECIMAL_CONVERSION;
     5f0:	80 e3       	ldi	r24, 0x30	; 48
     5f2:	89 83       	std	Y+1, r24	; 0x01
	
	UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
     5f4:	21 e0       	ldi	r18, 0x01	; 1
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	40 e0       	ldi	r20, 0x00	; 0
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	be 01       	movw	r22, r28
     5fe:	6f 5f       	subi	r22, 0xFF	; 255
     600:	7f 4f       	sbci	r23, 0xFF	; 255
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	13 d3       	rcall	.+1574   	; 0xc2c <UARTTransmitSync>
}
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	1f 91       	pop	r17
     612:	0f 91       	pop	r16
     614:	ff 90       	pop	r15
     616:	ef 90       	pop	r14
     618:	df 90       	pop	r13
     61a:	cf 90       	pop	r12
     61c:	bf 90       	pop	r11
     61e:	af 90       	pop	r10
     620:	9f 90       	pop	r9
     622:	8f 90       	pop	r8
     624:	7f 90       	pop	r7
     626:	6f 90       	pop	r6
     628:	08 95       	ret

0000062a <SendSignedDecimalValue>:

void
SendSignedDecimalValue(long long Value)
{
     62a:	2f 92       	push	r2
     62c:	3f 92       	push	r3
     62e:	4f 92       	push	r4
     630:	5f 92       	push	r5
     632:	6f 92       	push	r6
     634:	7f 92       	push	r7
     636:	8f 92       	push	r8
     638:	9f 92       	push	r9
     63a:	af 92       	push	r10
     63c:	bf 92       	push	r11
     63e:	cf 92       	push	r12
     640:	df 92       	push	r13
     642:	ef 92       	push	r14
     644:	ff 92       	push	r15
     646:	0f 93       	push	r16
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	cd b7       	in	r28, 0x3d	; 61
     650:	de b7       	in	r29, 0x3e	; 62
     652:	c3 50       	subi	r28, 0x03	; 3
     654:	d1 40       	sbci	r29, 0x01	; 1
     656:	0f b6       	in	r0, 0x3f	; 63
     658:	f8 94       	cli
     65a:	de bf       	out	0x3e, r29	; 62
     65c:	0f be       	out	0x3f, r0	; 63
     65e:	cd bf       	out	0x3d, r28	; 61
     660:	ce 5f       	subi	r28, 0xFE	; 254
     662:	de 4f       	sbci	r29, 0xFE	; 254
     664:	28 83       	st	Y, r18
     666:	c2 50       	subi	r28, 0x02	; 2
     668:	d1 40       	sbci	r29, 0x01	; 1
     66a:	83 2e       	mov	r8, r19
     66c:	74 2e       	mov	r7, r20
     66e:	65 2e       	mov	r6, r21
     670:	56 2e       	mov	r5, r22
     672:	47 2e       	mov	r4, r23
     674:	38 2e       	mov	r3, r24
     676:	29 2e       	mov	r2, r25
	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
	
	unsigned char Minus = '-';
     678:	8d e2       	ldi	r24, 0x2D	; 45
     67a:	cf 5f       	subi	r28, 0xFF	; 255
     67c:	de 4f       	sbci	r29, 0xFE	; 254
     67e:	88 83       	st	Y, r24
     680:	c1 50       	subi	r28, 0x01	; 1
     682:	d1 40       	sbci	r29, 0x01	; 1

	//
	// If the value is negative, print - sign and make the value positive.
	//

	if (Value < 0)
     684:	83 2d       	mov	r24, r3
     686:	a0 e0       	ldi	r26, 0x00	; 0
     688:	d2 d7       	rcall	.+4004   	; 0x162e <__cmpdi2_s8>
     68a:	14 f5       	brge	.+68     	; 0x6d0 <SendSignedDecimalValue+0xa6>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &Minus, 1);
     68c:	21 e0       	ldi	r18, 0x01	; 1
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	40 e0       	ldi	r20, 0x00	; 0
     692:	50 e0       	ldi	r21, 0x00	; 0
     694:	be 01       	movw	r22, r28
     696:	6f 5f       	subi	r22, 0xFF	; 255
     698:	7e 4f       	sbci	r23, 0xFE	; 254
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	c7 d2       	rcall	.+1422   	; 0xc2c <UARTTransmitSync>

		Value *= -1;
     69e:	ce 5f       	subi	r28, 0xFE	; 254
     6a0:	de 4f       	sbci	r29, 0xFE	; 254
     6a2:	28 81       	ld	r18, Y
     6a4:	c2 50       	subi	r28, 0x02	; 2
     6a6:	d1 40       	sbci	r29, 0x01	; 1
     6a8:	38 2d       	mov	r19, r8
     6aa:	47 2d       	mov	r20, r7
     6ac:	56 2d       	mov	r21, r6
     6ae:	65 2d       	mov	r22, r5
     6b0:	74 2d       	mov	r23, r4
     6b2:	83 2d       	mov	r24, r3
     6b4:	92 2d       	mov	r25, r2
     6b6:	56 d7       	rcall	.+3756   	; 0x1564 <__negdi2>
     6b8:	ce 5f       	subi	r28, 0xFE	; 254
     6ba:	de 4f       	sbci	r29, 0xFE	; 254
     6bc:	28 83       	st	Y, r18
     6be:	c2 50       	subi	r28, 0x02	; 2
     6c0:	d1 40       	sbci	r29, 0x01	; 1
     6c2:	83 2e       	mov	r8, r19
     6c4:	74 2e       	mov	r7, r20
     6c6:	65 2e       	mov	r6, r21
     6c8:	56 2e       	mov	r5, r22
     6ca:	47 2e       	mov	r4, r23
     6cc:	38 2e       	mov	r3, r24
     6ce:	29 2e       	mov	r2, r25
	UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
}

void
SendSignedDecimalValue(long long Value)
{
     6d0:	91 2c       	mov	r9, r1
	}

	do
	{

		if (Value < 10)
     6d2:	ce 5f       	subi	r28, 0xFE	; 254
     6d4:	de 4f       	sbci	r29, 0xFE	; 254
     6d6:	28 81       	ld	r18, Y
     6d8:	c2 50       	subi	r28, 0x02	; 2
     6da:	d1 40       	sbci	r29, 0x01	; 1
     6dc:	38 2d       	mov	r19, r8
     6de:	47 2d       	mov	r20, r7
     6e0:	56 2d       	mov	r21, r6
     6e2:	65 2d       	mov	r22, r5
     6e4:	74 2d       	mov	r23, r4
     6e6:	83 2d       	mov	r24, r3
     6e8:	92 2d       	mov	r25, r2
     6ea:	a9 e0       	ldi	r26, 0x09	; 9
     6ec:	a0 d7       	rcall	.+3904   	; 0x162e <__cmpdi2_s8>
     6ee:	09 f0       	breq	.+2      	; 0x6f2 <SendSignedDecimalValue+0xc8>
     6f0:	44 f4       	brge	.+16     	; 0x702 <SendSignedDecimalValue+0xd8>

			Value = Value / 10;

		}
	
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     6f2:	fe 01       	movw	r30, r28
     6f4:	e9 0d       	add	r30, r9
     6f6:	f1 1d       	adc	r31, r1
     6f8:	82 2f       	mov	r24, r18
     6fa:	80 5d       	subi	r24, 0xD0	; 208
     6fc:	81 83       	std	Z+1, r24	; 0x01
		
		Count++;
     6fe:	93 94       	inc	r9
     700:	48 c0       	rjmp	.+144    	; 0x792 <SendSignedDecimalValue+0x168>

			Value = 0;
		}
		else
		{
			TransmitChar[Count] = Value % 10;
     702:	0f 2e       	mov	r0, r31
     704:	fa e0       	ldi	r31, 0x0A	; 10
     706:	af 2e       	mov	r10, r31
     708:	f0 2d       	mov	r31, r0
     70a:	b1 2c       	mov	r11, r1
     70c:	c1 2c       	mov	r12, r1
     70e:	d1 2c       	mov	r13, r1
     710:	e1 2c       	mov	r14, r1
     712:	f1 2c       	mov	r15, r1
     714:	00 e0       	ldi	r16, 0x00	; 0
     716:	10 e0       	ldi	r17, 0x00	; 0
     718:	ce 5f       	subi	r28, 0xFE	; 254
     71a:	de 4f       	sbci	r29, 0xFE	; 254
     71c:	28 81       	ld	r18, Y
     71e:	c2 50       	subi	r28, 0x02	; 2
     720:	d1 40       	sbci	r29, 0x01	; 1
     722:	38 2d       	mov	r19, r8
     724:	47 2d       	mov	r20, r7
     726:	56 2d       	mov	r21, r6
     728:	65 2d       	mov	r22, r5
     72a:	74 2d       	mov	r23, r4
     72c:	83 2d       	mov	r24, r3
     72e:	92 2d       	mov	r25, r2
     730:	90 d6       	rcall	.+3360   	; 0x1452 <__moddi3>
     732:	cd 5f       	subi	r28, 0xFD	; 253
     734:	de 4f       	sbci	r29, 0xFE	; 254
     736:	28 83       	st	Y, r18
     738:	c3 50       	subi	r28, 0x03	; 3
     73a:	d1 40       	sbci	r29, 0x01	; 1

			Value = Value / 10;
     73c:	ce 5f       	subi	r28, 0xFE	; 254
     73e:	de 4f       	sbci	r29, 0xFE	; 254
     740:	28 81       	ld	r18, Y
     742:	c2 50       	subi	r28, 0x02	; 2
     744:	d1 40       	sbci	r29, 0x01	; 1
     746:	38 2d       	mov	r19, r8
     748:	47 2d       	mov	r20, r7
     74a:	56 2d       	mov	r21, r6
     74c:	65 2d       	mov	r22, r5
     74e:	74 2d       	mov	r23, r4
     750:	83 2d       	mov	r24, r3
     752:	92 2d       	mov	r25, r2
     754:	80 d6       	rcall	.+3328   	; 0x1456 <__divdi3>
     756:	ce 5f       	subi	r28, 0xFE	; 254
     758:	de 4f       	sbci	r29, 0xFE	; 254
     75a:	28 83       	st	Y, r18
     75c:	c2 50       	subi	r28, 0x02	; 2
     75e:	d1 40       	sbci	r29, 0x01	; 1
     760:	83 2e       	mov	r8, r19
     762:	74 2e       	mov	r7, r20
     764:	65 2e       	mov	r6, r21
     766:	56 2e       	mov	r5, r22
     768:	47 2e       	mov	r4, r23
     76a:	38 2e       	mov	r3, r24
     76c:	29 2e       	mov	r2, r25

		}
	
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     76e:	e1 e0       	ldi	r30, 0x01	; 1
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	ec 0f       	add	r30, r28
     774:	fd 1f       	adc	r31, r29
     776:	e9 0d       	add	r30, r9
     778:	f1 1d       	adc	r31, r1
     77a:	cd 5f       	subi	r28, 0xFD	; 253
     77c:	de 4f       	sbci	r29, 0xFE	; 254
     77e:	a8 81       	ld	r26, Y
     780:	c3 50       	subi	r28, 0x03	; 3
     782:	d1 40       	sbci	r29, 0x01	; 1
     784:	a0 5d       	subi	r26, 0xD0	; 208
     786:	a0 83       	st	Z, r26
		
		Count++;
     788:	93 94       	inc	r9

	} while (Value != 0);
     78a:	a0 e0       	ldi	r26, 0x00	; 0
     78c:	50 d7       	rcall	.+3744   	; 0x162e <__cmpdi2_s8>
     78e:	09 f0       	breq	.+2      	; 0x792 <SendSignedDecimalValue+0x168>
     790:	a0 cf       	rjmp	.-192    	; 0x6d2 <SendSignedDecimalValue+0xa8>

	while (Count != 0)
     792:	99 20       	and	r9, r9
     794:	91 f0       	breq	.+36     	; 0x7ba <SendSignedDecimalValue+0x190>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     796:	69 2d       	mov	r22, r9
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	61 50       	subi	r22, 0x01	; 1
     79c:	71 09       	sbc	r23, r1
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	8c 0f       	add	r24, r28
     7a4:	9d 1f       	adc	r25, r29
     7a6:	68 0f       	add	r22, r24
     7a8:	79 1f       	adc	r23, r25
     7aa:	21 e0       	ldi	r18, 0x01	; 1
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	40 e0       	ldi	r20, 0x00	; 0
     7b0:	50 e0       	ldi	r21, 0x00	; 0
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	3b d2       	rcall	.+1142   	; 0xc2c <UARTTransmitSync>
		
		Count--;
     7b6:	9a 94       	dec	r9
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
     7b8:	71 f7       	brne	.-36     	; 0x796 <SendSignedDecimalValue+0x16c>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}
}
     7ba:	cd 5f       	subi	r28, 0xFD	; 253
     7bc:	de 4f       	sbci	r29, 0xFE	; 254
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	cd bf       	out	0x3d, r28	; 61
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	ff 90       	pop	r15
     7d2:	ef 90       	pop	r14
     7d4:	df 90       	pop	r13
     7d6:	cf 90       	pop	r12
     7d8:	bf 90       	pop	r11
     7da:	af 90       	pop	r10
     7dc:	9f 90       	pop	r9
     7de:	8f 90       	pop	r8
     7e0:	7f 90       	pop	r7
     7e2:	6f 90       	pop	r6
     7e4:	5f 90       	pop	r5
     7e6:	4f 90       	pop	r4
     7e8:	3f 90       	pop	r3
     7ea:	2f 90       	pop	r2
     7ec:	08 95       	ret

000007ee <SendTrace>:
	}
}

void
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{
     7ee:	3f 92       	push	r3
     7f0:	4f 92       	push	r4
     7f2:	5f 92       	push	r5
     7f4:	6f 92       	push	r6
     7f6:	7f 92       	push	r7
     7f8:	8f 92       	push	r8
     7fa:	9f 92       	push	r9
     7fc:	af 92       	push	r10
     7fe:	bf 92       	push	r11
     800:	cf 92       	push	r12
     802:	df 92       	push	r13
     804:	ef 92       	push	r14
     806:	ff 92       	push	r15
     808:	0f 93       	push	r16
     80a:	1f 93       	push	r17
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	1f 92       	push	r1
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
     816:	0e 89       	ldd	r16, Y+22	; 0x16
     818:	1f 89       	ldd	r17, Y+23	; 0x17
	
	char Character;

	va_list ArgList;

	if (!gTraceInitialized || !(TraceLevel & gTraceLevel))
     81a:	80 91 84 01 	lds	r24, 0x0184
     81e:	88 23       	and	r24, r24
     820:	09 f4       	brne	.+2      	; 0x824 <SendTrace+0x36>
     822:	1b c1       	rjmp	.+566    	; 0xa5a <SendTrace+0x26c>
     824:	80 91 8d 01 	lds	r24, 0x018D
     828:	9d 89       	ldd	r25, Y+21	; 0x15
     82a:	89 23       	and	r24, r25
     82c:	09 f4       	brne	.+2      	; 0x830 <SendTrace+0x42>
     82e:	15 c1       	rjmp	.+554    	; 0xa5a <SendTrace+0x26c>
	{
		return;
	}

	va_start(ArgList, String);
     830:	7e 01       	movw	r14, r28
     832:	28 e1       	ldi	r18, 0x18	; 24
     834:	e2 0e       	add	r14, r18
     836:	f1 1c       	adc	r15, r1

	while (*String != '\0')
     838:	f8 01       	movw	r30, r16
     83a:	20 81       	ld	r18, Z
     83c:	22 23       	and	r18, r18
     83e:	09 f4       	brne	.+2      	; 0x842 <SendTrace+0x54>
     840:	0c c1       	rjmp	.+536    	; 0xa5a <SendTrace+0x26c>
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{

	bool IsLong = FALSE;
	
	bool IsLongLong = FALSE;
     842:	41 2c       	mov	r4, r1

void
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{

	bool IsLong = FALSE;
     844:	d1 2c       	mov	r13, r1
						IsLong = FALSE;
					}
					
					SendDoubleValue(va_arg(ArgList, double));
					
					break;
     846:	51 2c       	mov	r5, r1
						
						IsLong = FALSE;
					}
					else
					{
						IsLong = TRUE;
     848:	33 24       	eor	r3, r3
     84a:	33 94       	inc	r3
	va_start(ArgList, String);

	while (*String != '\0')
	{

		if (*String == '%' || IsLong || IsLongLong)
     84c:	25 32       	cpi	r18, 0x25	; 37
     84e:	29 f0       	breq	.+10     	; 0x85a <SendTrace+0x6c>
     850:	d1 10       	cpse	r13, r1
     852:	05 c0       	rjmp	.+10     	; 0x85e <SendTrace+0x70>
     854:	41 10       	cpse	r4, r1
     856:	03 c0       	rjmp	.+6      	; 0x85e <SendTrace+0x70>
     858:	ef c0       	rjmp	.+478    	; 0xa38 <SendTrace+0x24a>
		{

			if (*String == '%')
			{
				String++;
     85a:	0f 5f       	subi	r16, 0xFF	; 255
     85c:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			switch (*String)
     85e:	f8 01       	movw	r30, r16
     860:	80 81       	ld	r24, Z
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	fc 01       	movw	r30, r24
     866:	e3 56       	subi	r30, 0x63	; 99
     868:	f1 09       	sbc	r31, r1
     86a:	e6 31       	cpi	r30, 0x16	; 22
     86c:	f1 05       	cpc	r31, r1
     86e:	08 f0       	brcs	.+2      	; 0x872 <SendTrace+0x84>
     870:	ec c0       	rjmp	.+472    	; 0xa4a <SendTrace+0x25c>
     872:	ea 5b       	subi	r30, 0xBA	; 186
     874:	ff 4f       	sbci	r31, 0xFF	; 255
     876:	d8 c5       	rjmp	.+2992   	; 0x1428 <__tablejump2__>
			{
				case 'c':
				{

					Character = va_arg(ArgList, int);
     878:	57 01       	movw	r10, r14
     87a:	f2 e0       	ldi	r31, 0x02	; 2
     87c:	af 0e       	add	r10, r31
     87e:	b1 1c       	adc	r11, r1
     880:	f7 01       	movw	r30, r14
     882:	80 81       	ld	r24, Z
     884:	89 83       	std	Y+1, r24	; 0x01
					
					UARTTransmitSync(UART_ZERO, (PVOID) &Character, 1);
     886:	21 e0       	ldi	r18, 0x01	; 1
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	40 e0       	ldi	r20, 0x00	; 0
     88c:	50 e0       	ldi	r21, 0x00	; 0
     88e:	be 01       	movw	r22, r28
     890:	6f 5f       	subi	r22, 0xFF	; 255
     892:	7f 4f       	sbci	r23, 0xFF	; 255
     894:	85 2d       	mov	r24, r5
     896:	ca d1       	rcall	.+916    	; 0xc2c <UARTTransmitSync>
			switch (*String)
			{
				case 'c':
				{

					Character = va_arg(ArgList, int);
     898:	75 01       	movw	r14, r10
					
					UARTTransmitSync(UART_ZERO, (PVOID) &Character, 1);

					break;
     89a:	d7 c0       	rjmp	.+430    	; 0xa4a <SendTrace+0x25c>

				}
				case 'd':
				{

					if (IsLong)
     89c:	dd 20       	and	r13, r13
     89e:	d9 f0       	breq	.+54     	; 0x8d6 <SendTrace+0xe8>
					{

						SendSignedDecimalValue(va_arg(ArgList, long));
     8a0:	67 01       	movw	r12, r14
     8a2:	f4 e0       	ldi	r31, 0x04	; 4
     8a4:	cf 0e       	add	r12, r31
     8a6:	d1 1c       	adc	r13, r1
     8a8:	f7 01       	movw	r30, r14
     8aa:	80 81       	ld	r24, Z
     8ac:	91 81       	ldd	r25, Z+1	; 0x01
     8ae:	a2 81       	ldd	r26, Z+2	; 0x02
     8b0:	b3 81       	ldd	r27, Z+3	; 0x03
     8b2:	4c 01       	movw	r8, r24
     8b4:	5d 01       	movw	r10, r26
     8b6:	bb 0c       	add	r11, r11
     8b8:	88 08       	sbc	r8, r8
     8ba:	98 2c       	mov	r9, r8
     8bc:	54 01       	movw	r10, r8
     8be:	28 2f       	mov	r18, r24
     8c0:	39 2f       	mov	r19, r25
     8c2:	4a 2f       	mov	r20, r26
     8c4:	5b 2f       	mov	r21, r27
     8c6:	68 2d       	mov	r22, r8
     8c8:	78 2d       	mov	r23, r8
     8ca:	88 2d       	mov	r24, r8
     8cc:	98 2d       	mov	r25, r8
     8ce:	ad de       	rcall	.-678    	; 0x62a <SendSignedDecimalValue>
     8d0:	76 01       	movw	r14, r12

						IsLong = FALSE;
     8d2:	d5 2c       	mov	r13, r5
     8d4:	ba c0       	rjmp	.+372    	; 0xa4a <SendTrace+0x25c>

					}
					else if (IsLongLong)
     8d6:	44 20       	and	r4, r4
     8d8:	89 f0       	breq	.+34     	; 0x8fc <SendTrace+0x10e>
					{
						SendSignedDecimalValue(va_arg(ArgList, long long));
     8da:	57 01       	movw	r10, r14
     8dc:	f8 e0       	ldi	r31, 0x08	; 8
     8de:	af 0e       	add	r10, r31
     8e0:	b1 1c       	adc	r11, r1
     8e2:	f7 01       	movw	r30, r14
     8e4:	20 81       	ld	r18, Z
     8e6:	31 81       	ldd	r19, Z+1	; 0x01
     8e8:	42 81       	ldd	r20, Z+2	; 0x02
     8ea:	53 81       	ldd	r21, Z+3	; 0x03
     8ec:	64 81       	ldd	r22, Z+4	; 0x04
     8ee:	75 81       	ldd	r23, Z+5	; 0x05
     8f0:	86 81       	ldd	r24, Z+6	; 0x06
     8f2:	97 81       	ldd	r25, Z+7	; 0x07
     8f4:	9a de       	rcall	.-716    	; 0x62a <SendSignedDecimalValue>
     8f6:	75 01       	movw	r14, r10

						IsLongLong = FALSE;
     8f8:	45 2c       	mov	r4, r5
     8fa:	a7 c0       	rjmp	.+334    	; 0xa4a <SendTrace+0x25c>
					}
					else
					{

						SendSignedDecimalValue(va_arg(ArgList, int));
     8fc:	57 01       	movw	r10, r14
     8fe:	f2 e0       	ldi	r31, 0x02	; 2
     900:	af 0e       	add	r10, r31
     902:	b1 1c       	adc	r11, r1
     904:	f7 01       	movw	r30, r14
     906:	31 81       	ldd	r19, Z+1	; 0x01
     908:	20 81       	ld	r18, Z
     90a:	93 2f       	mov	r25, r19
     90c:	99 0f       	add	r25, r25
     90e:	99 0b       	sbc	r25, r25
     910:	49 2f       	mov	r20, r25
     912:	59 2f       	mov	r21, r25
     914:	69 2f       	mov	r22, r25
     916:	79 2f       	mov	r23, r25
     918:	89 2f       	mov	r24, r25
     91a:	87 de       	rcall	.-754    	; 0x62a <SendSignedDecimalValue>
     91c:	75 01       	movw	r14, r10
     91e:	95 c0       	rjmp	.+298    	; 0xa4a <SendTrace+0x25c>
					break;
				}
				case 'u':
				{

					if(IsLong)
     920:	dd 20       	and	r13, r13
     922:	b9 f0       	breq	.+46     	; 0x952 <SendTrace+0x164>
					{

						SendDecimalValue(va_arg(ArgList, unsigned long));
     924:	37 01       	movw	r6, r14
     926:	f4 e0       	ldi	r31, 0x04	; 4
     928:	6f 0e       	add	r6, r31
     92a:	71 1c       	adc	r7, r1
     92c:	f7 01       	movw	r30, r14
     92e:	80 81       	ld	r24, Z
     930:	91 81       	ldd	r25, Z+1	; 0x01
     932:	a2 81       	ldd	r26, Z+2	; 0x02
     934:	b3 81       	ldd	r27, Z+3	; 0x03
     936:	4c 01       	movw	r8, r24
     938:	5d 01       	movw	r10, r26
     93a:	28 2f       	mov	r18, r24
     93c:	39 2d       	mov	r19, r9
     93e:	4a 2d       	mov	r20, r10
     940:	5b 2d       	mov	r21, r11
     942:	65 2d       	mov	r22, r5
     944:	75 2d       	mov	r23, r5
     946:	85 2d       	mov	r24, r5
     948:	95 2d       	mov	r25, r5
     94a:	15 dd       	rcall	.-1494   	; 0x376 <SendDecimalValue>
     94c:	73 01       	movw	r14, r6
						
						IsLong = FALSE;
     94e:	d5 2c       	mov	r13, r5
     950:	7c c0       	rjmp	.+248    	; 0xa4a <SendTrace+0x25c>
					
					}
					else if(IsLongLong)
     952:	44 20       	and	r4, r4
     954:	89 f0       	breq	.+34     	; 0x978 <SendTrace+0x18a>
					{
						SendDecimalValue(va_arg(ArgList, unsigned long long));
     956:	57 01       	movw	r10, r14
     958:	f8 e0       	ldi	r31, 0x08	; 8
     95a:	af 0e       	add	r10, r31
     95c:	b1 1c       	adc	r11, r1
     95e:	f7 01       	movw	r30, r14
     960:	20 81       	ld	r18, Z
     962:	31 81       	ldd	r19, Z+1	; 0x01
     964:	42 81       	ldd	r20, Z+2	; 0x02
     966:	53 81       	ldd	r21, Z+3	; 0x03
     968:	64 81       	ldd	r22, Z+4	; 0x04
     96a:	75 81       	ldd	r23, Z+5	; 0x05
     96c:	86 81       	ldd	r24, Z+6	; 0x06
     96e:	97 81       	ldd	r25, Z+7	; 0x07
     970:	02 dd       	rcall	.-1532   	; 0x376 <SendDecimalValue>
     972:	75 01       	movw	r14, r10
						
						IsLongLong = FALSE;
     974:	45 2c       	mov	r4, r5
     976:	69 c0       	rjmp	.+210    	; 0xa4a <SendTrace+0x25c>
					}
					else
					{

						SendDecimalValue(va_arg(ArgList, unsigned int));
     978:	f7 01       	movw	r30, r14
     97a:	40 81       	ld	r20, Z
     97c:	51 81       	ldd	r21, Z+1	; 0x01
     97e:	f2 e0       	ldi	r31, 0x02	; 2
     980:	ef 0e       	add	r14, r31
     982:	f1 1c       	adc	r15, r1
     984:	24 2f       	mov	r18, r20
     986:	35 2f       	mov	r19, r21
     988:	45 2d       	mov	r20, r5
     98a:	55 2d       	mov	r21, r5
     98c:	65 2d       	mov	r22, r5
     98e:	75 2d       	mov	r23, r5
     990:	85 2d       	mov	r24, r5
     992:	95 2d       	mov	r25, r5
     994:	f0 dc       	rcall	.-1568   	; 0x376 <SendDecimalValue>
     996:	59 c0       	rjmp	.+178    	; 0xa4a <SendTrace+0x25c>
					break;
				}
				case 'x':
				{

					if (IsLong)
     998:	dd 20       	and	r13, r13
     99a:	a9 f0       	breq	.+42     	; 0x9c6 <SendTrace+0x1d8>
					{

						SendHexValue(va_arg(ArgList, unsigned long));
     99c:	f7 01       	movw	r30, r14
     99e:	80 81       	ld	r24, Z
     9a0:	91 81       	ldd	r25, Z+1	; 0x01
     9a2:	a2 81       	ldd	r26, Z+2	; 0x02
     9a4:	b3 81       	ldd	r27, Z+3	; 0x03
     9a6:	24 e0       	ldi	r18, 0x04	; 4
     9a8:	e2 0e       	add	r14, r18
     9aa:	f1 1c       	adc	r15, r1
     9ac:	3c 01       	movw	r6, r24
     9ae:	4d 01       	movw	r8, r26
     9b0:	28 2f       	mov	r18, r24
     9b2:	37 2d       	mov	r19, r7
     9b4:	48 2d       	mov	r20, r8
     9b6:	59 2d       	mov	r21, r9
     9b8:	65 2d       	mov	r22, r5
     9ba:	75 2d       	mov	r23, r5
     9bc:	85 2d       	mov	r24, r5
     9be:	95 2d       	mov	r25, r5
     9c0:	37 dc       	rcall	.-1938   	; 0x230 <SendHexValue>

						IsLong = FALSE;
     9c2:	d5 2c       	mov	r13, r5
     9c4:	42 c0       	rjmp	.+132    	; 0xa4a <SendTrace+0x25c>

					}
					else if (IsLongLong)
     9c6:	44 20       	and	r4, r4
     9c8:	79 f0       	breq	.+30     	; 0x9e8 <SendTrace+0x1fa>
					{
						SendHexValue(va_arg(ArgList, unsigned long long));
     9ca:	f7 01       	movw	r30, r14
     9cc:	20 81       	ld	r18, Z
     9ce:	88 e0       	ldi	r24, 0x08	; 8
     9d0:	e8 0e       	add	r14, r24
     9d2:	f1 1c       	adc	r15, r1
     9d4:	31 81       	ldd	r19, Z+1	; 0x01
     9d6:	42 81       	ldd	r20, Z+2	; 0x02
     9d8:	53 81       	ldd	r21, Z+3	; 0x03
     9da:	64 81       	ldd	r22, Z+4	; 0x04
     9dc:	75 81       	ldd	r23, Z+5	; 0x05
     9de:	86 81       	ldd	r24, Z+6	; 0x06
     9e0:	97 81       	ldd	r25, Z+7	; 0x07
     9e2:	26 dc       	rcall	.-1972   	; 0x230 <SendHexValue>
						
						IsLongLong = FALSE;
     9e4:	45 2c       	mov	r4, r5
     9e6:	31 c0       	rjmp	.+98     	; 0xa4a <SendTrace+0x25c>
					}
					else
					{

						SendHexValue(va_arg(ArgList, unsigned int));
     9e8:	f7 01       	movw	r30, r14
     9ea:	40 81       	ld	r20, Z
     9ec:	51 81       	ldd	r21, Z+1	; 0x01
     9ee:	e2 e0       	ldi	r30, 0x02	; 2
     9f0:	ee 0e       	add	r14, r30
     9f2:	f1 1c       	adc	r15, r1
     9f4:	24 2f       	mov	r18, r20
     9f6:	35 2f       	mov	r19, r21
     9f8:	45 2d       	mov	r20, r5
     9fa:	55 2d       	mov	r21, r5
     9fc:	65 2d       	mov	r22, r5
     9fe:	75 2d       	mov	r23, r5
     a00:	85 2d       	mov	r24, r5
     a02:	95 2d       	mov	r25, r5
     a04:	15 dc       	rcall	.-2006   	; 0x230 <SendHexValue>
     a06:	21 c0       	rjmp	.+66     	; 0xa4a <SendTrace+0x25c>
					break;
				}
				case 'l':
				{

					if (IsLong)
     a08:	dd 20       	and	r13, r13
     a0a:	f1 f0       	breq	.+60     	; 0xa48 <SendTrace+0x25a>
					{
						IsLongLong = TRUE;
     a0c:	43 2c       	mov	r4, r3
						
						IsLong = FALSE;
     a0e:	d5 2c       	mov	r13, r5
     a10:	1c c0       	rjmp	.+56     	; 0xa4a <SendTrace+0x25c>
					break;
				}
				case 's':
				{
					
					SendStringValue(va_arg(ArgList, char *)); 
     a12:	f7 01       	movw	r30, r14
     a14:	80 81       	ld	r24, Z
     a16:	91 81       	ldd	r25, Z+1	; 0x01
     a18:	f2 e0       	ldi	r31, 0x02	; 2
     a1a:	ef 0e       	add	r14, r31
     a1c:	f1 1c       	adc	r15, r1
     a1e:	fa db       	rcall	.-2060   	; 0x214 <SendStringValue>

					break;
     a20:	14 c0       	rjmp	.+40     	; 0xa4a <SendTrace+0x25c>
					if(IsLong)
					{
						IsLong = FALSE;
					}
					
					SendDoubleValue(va_arg(ArgList, double));
     a22:	f7 01       	movw	r30, r14
     a24:	60 81       	ld	r22, Z
     a26:	71 81       	ldd	r23, Z+1	; 0x01
     a28:	82 81       	ldd	r24, Z+2	; 0x02
     a2a:	93 81       	ldd	r25, Z+3	; 0x03
     a2c:	24 e0       	ldi	r18, 0x04	; 4
     a2e:	e2 0e       	add	r14, r18
     a30:	f1 1c       	adc	r15, r1
     a32:	5b dd       	rcall	.-1354   	; 0x4ea <SendDoubleValue>
					
					break;
     a34:	d5 2c       	mov	r13, r5
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <SendTrace+0x25c>

		}
		else
		{

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
     a38:	21 e0       	ldi	r18, 0x01	; 1
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	50 e0       	ldi	r21, 0x00	; 0
     a40:	b8 01       	movw	r22, r16
     a42:	85 2d       	mov	r24, r5
     a44:	f3 d0       	rcall	.+486    	; 0xc2c <UARTTransmitSync>
     a46:	01 c0       	rjmp	.+2      	; 0xa4a <SendTrace+0x25c>
						
						IsLong = FALSE;
					}
					else
					{
						IsLong = TRUE;
     a48:	d3 2c       	mov	r13, r3

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
				
		}

		String++;
     a4a:	c8 01       	movw	r24, r16
     a4c:	01 96       	adiw	r24, 0x01	; 1
		return;
	}

	va_start(ArgList, String);

	while (*String != '\0')
     a4e:	f8 01       	movw	r30, r16
     a50:	21 81       	ldd	r18, Z+1	; 0x01
     a52:	22 23       	and	r18, r18
     a54:	11 f0       	breq	.+4      	; 0xa5a <SendTrace+0x26c>

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
				
		}

		String++;
     a56:	8c 01       	movw	r16, r24
     a58:	f9 ce       	rjmp	.-526    	; 0x84c <SendTrace+0x5e>
		
	}
	
	va_end(ArgList);
	
}
     a5a:	0f 90       	pop	r0
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	1f 91       	pop	r17
     a62:	0f 91       	pop	r16
     a64:	ff 90       	pop	r15
     a66:	ef 90       	pop	r14
     a68:	df 90       	pop	r13
     a6a:	cf 90       	pop	r12
     a6c:	bf 90       	pop	r11
     a6e:	af 90       	pop	r10
     a70:	9f 90       	pop	r9
     a72:	8f 90       	pop	r8
     a74:	7f 90       	pop	r7
     a76:	6f 90       	pop	r6
     a78:	5f 90       	pop	r5
     a7a:	4f 90       	pop	r4
     a7c:	3f 90       	pop	r3
     a7e:	08 95       	ret

00000a80 <InitializeUARTTimer>:

unsigned long
UARTReceiveSync(UART_NUMBER UARTNumber, PVOID ReceiveValue, unsigned long Length)
{
	return UARTReceive(UARTNumber, ReceiveValue, Length, 0);
}
     a80:	82 e0       	ldi	r24, 0x02	; 2
     a82:	84 bd       	out	0x24, r24	; 36
     a84:	15 bc       	out	0x25, r1	; 37
     a86:	16 bc       	out	0x26, r1	; 38
     a88:	17 bc       	out	0x27, r1	; 39
     a8a:	18 bc       	out	0x28, r1	; 40
     a8c:	80 93 6e 00 	sts	0x006E, r24
     a90:	08 95       	ret

00000a92 <InitUARTSync>:
     a92:	cf 93       	push	r28
     a94:	40 93 9c 01 	sts	0x019C, r20
     a98:	88 23       	and	r24, r24
     a9a:	19 f0       	breq	.+6      	; 0xaa2 <InitUARTSync+0x10>
     a9c:	81 30       	cpi	r24, 0x01	; 1
     a9e:	c9 f0       	breq	.+50     	; 0xad2 <InitUARTSync+0x40>
     aa0:	30 c0       	rjmp	.+96     	; 0xb02 <InitUARTSync+0x70>
     aa2:	70 93 c5 00 	sts	0x00C5, r23
     aa6:	60 93 c4 00 	sts	0x00C4, r22
     aaa:	88 e9       	ldi	r24, 0x98	; 152
     aac:	80 93 c1 00 	sts	0x00C1, r24
     ab0:	41 30       	cpi	r20, 0x01	; 1
     ab2:	39 f4       	brne	.+14     	; 0xac2 <InitUARTSync+0x30>
     ab4:	86 e0       	ldi	r24, 0x06	; 6
     ab6:	80 93 c2 00 	sts	0x00C2, r24
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	80 93 c0 00 	sts	0x00C0, r24
     ac0:	03 c0       	rjmp	.+6      	; 0xac8 <InitUARTSync+0x36>
     ac2:	86 e0       	ldi	r24, 0x06	; 6
     ac4:	80 93 c2 00 	sts	0x00C2, r24
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	80 93 85 01 	sts	0x0185, r24
     ace:	c1 e0       	ldi	r28, 0x01	; 1
     ad0:	19 c0       	rjmp	.+50     	; 0xb04 <InitUARTSync+0x72>
     ad2:	70 93 cd 00 	sts	0x00CD, r23
     ad6:	60 93 cc 00 	sts	0x00CC, r22
     ada:	88 e9       	ldi	r24, 0x98	; 152
     adc:	80 93 c9 00 	sts	0x00C9, r24
     ae0:	41 30       	cpi	r20, 0x01	; 1
     ae2:	39 f4       	brne	.+14     	; 0xaf2 <InitUARTSync+0x60>
     ae4:	86 e0       	ldi	r24, 0x06	; 6
     ae6:	80 93 ca 00 	sts	0x00CA, r24
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	80 93 c8 00 	sts	0x00C8, r24
     af0:	03 c0       	rjmp	.+6      	; 0xaf8 <InitUARTSync+0x66>
     af2:	86 e0       	ldi	r24, 0x06	; 6
     af4:	80 93 ca 00 	sts	0x00CA, r24
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	80 93 86 01 	sts	0x0186, r24
     afe:	c1 e0       	ldi	r28, 0x01	; 1
     b00:	01 c0       	rjmp	.+2      	; 0xb04 <InitUARTSync+0x72>
     b02:	c0 e0       	ldi	r28, 0x00	; 0
     b04:	bd df       	rcall	.-134    	; 0xa80 <InitializeUARTTimer>
     b06:	8c 2f       	mov	r24, r28
     b08:	cf 91       	pop	r28
     b0a:	08 95       	ret

00000b0c <UARTTransmit>:
     b0c:	cf 92       	push	r12
     b0e:	df 92       	push	r13
     b10:	ef 92       	push	r14
     b12:	ff 92       	push	r15
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	6b 01       	movw	r12, r22
     b1e:	88 23       	and	r24, r24
     b20:	19 f0       	breq	.+6      	; 0xb28 <UARTTransmit+0x1c>
     b22:	81 30       	cpi	r24, 0x01	; 1
     b24:	c1 f1       	breq	.+112    	; 0xb96 <UARTTransmit+0x8a>
     b26:	6c c0       	rjmp	.+216    	; 0xc00 <UARTTransmit+0xf4>
     b28:	80 91 85 01 	lds	r24, 0x0185
     b2c:	88 23       	and	r24, r24
     b2e:	09 f4       	brne	.+2      	; 0xb32 <UARTTransmit+0x26>
     b30:	6b c0       	rjmp	.+214    	; 0xc08 <UARTTransmit+0xfc>
     b32:	21 15       	cp	r18, r1
     b34:	31 05       	cpc	r19, r1
     b36:	41 05       	cpc	r20, r1
     b38:	51 05       	cpc	r21, r1
     b3a:	09 f4       	brne	.+2      	; 0xb3e <UARTTransmit+0x32>
     b3c:	6c c0       	rjmp	.+216    	; 0xc16 <UARTTransmit+0x10a>
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	dc 01       	movw	r26, r24
     b44:	c0 ec       	ldi	r28, 0xC0	; 192
     b46:	d0 e0       	ldi	r29, 0x00	; 0
     b48:	0f 2e       	mov	r0, r31
     b4a:	f1 ec       	ldi	r31, 0xC1	; 193
     b4c:	ef 2e       	mov	r14, r31
     b4e:	f1 2c       	mov	r15, r1
     b50:	f0 2d       	mov	r31, r0
     b52:	66 ec       	ldi	r22, 0xC6	; 198
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	18 81       	ld	r17, Y
     b58:	15 ff       	sbrs	r17, 5
     b5a:	fd cf       	rjmp	.-6      	; 0xb56 <UARTTransmit+0x4a>
     b5c:	10 91 9c 01 	lds	r17, 0x019C
     b60:	11 23       	and	r17, r17
     b62:	59 f0       	breq	.+22     	; 0xb7a <UARTTransmit+0x6e>
     b64:	00 23       	and	r16, r16
     b66:	29 f0       	breq	.+10     	; 0xb72 <UARTTransmit+0x66>
     b68:	f7 01       	movw	r30, r14
     b6a:	10 81       	ld	r17, Z
     b6c:	11 60       	ori	r17, 0x01	; 1
     b6e:	10 83       	st	Z, r17
     b70:	04 c0       	rjmp	.+8      	; 0xb7a <UARTTransmit+0x6e>
     b72:	f7 01       	movw	r30, r14
     b74:	10 81       	ld	r17, Z
     b76:	1e 7f       	andi	r17, 0xFE	; 254
     b78:	10 83       	st	Z, r17
     b7a:	f6 01       	movw	r30, r12
     b7c:	11 91       	ld	r17, Z+
     b7e:	6f 01       	movw	r12, r30
     b80:	fb 01       	movw	r30, r22
     b82:	10 83       	st	Z, r17
     b84:	01 96       	adiw	r24, 0x01	; 1
     b86:	a1 1d       	adc	r26, r1
     b88:	b1 1d       	adc	r27, r1
     b8a:	82 17       	cp	r24, r18
     b8c:	93 07       	cpc	r25, r19
     b8e:	a4 07       	cpc	r26, r20
     b90:	b5 07       	cpc	r27, r21
     b92:	09 f7       	brne	.-62     	; 0xb56 <UARTTransmit+0x4a>
     b94:	40 c0       	rjmp	.+128    	; 0xc16 <UARTTransmit+0x10a>
     b96:	80 91 86 01 	lds	r24, 0x0186
     b9a:	88 23       	and	r24, r24
     b9c:	c9 f1       	breq	.+114    	; 0xc10 <UARTTransmit+0x104>
     b9e:	21 15       	cp	r18, r1
     ba0:	31 05       	cpc	r19, r1
     ba2:	41 05       	cpc	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	b9 f1       	breq	.+110    	; 0xc16 <UARTTransmit+0x10a>
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	dc 01       	movw	r26, r24
     bae:	c8 ec       	ldi	r28, 0xC8	; 200
     bb0:	d0 e0       	ldi	r29, 0x00	; 0
     bb2:	0f 2e       	mov	r0, r31
     bb4:	f9 ec       	ldi	r31, 0xC9	; 201
     bb6:	ef 2e       	mov	r14, r31
     bb8:	f1 2c       	mov	r15, r1
     bba:	f0 2d       	mov	r31, r0
     bbc:	6e ec       	ldi	r22, 0xCE	; 206
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	18 81       	ld	r17, Y
     bc2:	15 ff       	sbrs	r17, 5
     bc4:	fd cf       	rjmp	.-6      	; 0xbc0 <UARTTransmit+0xb4>
     bc6:	10 91 9c 01 	lds	r17, 0x019C
     bca:	11 23       	and	r17, r17
     bcc:	59 f0       	breq	.+22     	; 0xbe4 <UARTTransmit+0xd8>
     bce:	00 23       	and	r16, r16
     bd0:	29 f0       	breq	.+10     	; 0xbdc <UARTTransmit+0xd0>
     bd2:	f7 01       	movw	r30, r14
     bd4:	10 81       	ld	r17, Z
     bd6:	11 60       	ori	r17, 0x01	; 1
     bd8:	10 83       	st	Z, r17
     bda:	04 c0       	rjmp	.+8      	; 0xbe4 <UARTTransmit+0xd8>
     bdc:	f7 01       	movw	r30, r14
     bde:	10 81       	ld	r17, Z
     be0:	1e 7f       	andi	r17, 0xFE	; 254
     be2:	10 83       	st	Z, r17
     be4:	f6 01       	movw	r30, r12
     be6:	11 91       	ld	r17, Z+
     be8:	6f 01       	movw	r12, r30
     bea:	fb 01       	movw	r30, r22
     bec:	10 83       	st	Z, r17
     bee:	01 96       	adiw	r24, 0x01	; 1
     bf0:	a1 1d       	adc	r26, r1
     bf2:	b1 1d       	adc	r27, r1
     bf4:	82 17       	cp	r24, r18
     bf6:	93 07       	cpc	r25, r19
     bf8:	a4 07       	cpc	r26, r20
     bfa:	b5 07       	cpc	r27, r21
     bfc:	09 f7       	brne	.-62     	; 0xbc0 <UARTTransmit+0xb4>
     bfe:	0b c0       	rjmp	.+22     	; 0xc16 <UARTTransmit+0x10a>
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	a9 01       	movw	r20, r18
     c06:	07 c0       	rjmp	.+14     	; 0xc16 <UARTTransmit+0x10a>
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	a9 01       	movw	r20, r18
     c0e:	03 c0       	rjmp	.+6      	; 0xc16 <UARTTransmit+0x10a>
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	a9 01       	movw	r20, r18
     c16:	ca 01       	movw	r24, r20
     c18:	b9 01       	movw	r22, r18
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	1f 91       	pop	r17
     c20:	0f 91       	pop	r16
     c22:	ff 90       	pop	r15
     c24:	ef 90       	pop	r14
     c26:	df 90       	pop	r13
     c28:	cf 90       	pop	r12
     c2a:	08 95       	ret

00000c2c <UARTTransmitSync>:
     c2c:	0f 93       	push	r16
     c2e:	00 e0       	ldi	r16, 0x00	; 0
     c30:	6d df       	rcall	.-294    	; 0xb0c <UARTTransmit>
     c32:	0f 91       	pop	r16
     c34:	08 95       	ret

00000c36 <__vector_16>:
	return IndexI;

}

ISR(TIMER0_COMPA_vect)
{
     c36:	1f 92       	push	r1
     c38:	0f 92       	push	r0
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	0f 92       	push	r0
     c3e:	11 24       	eor	r1, r1
     c40:	8f 93       	push	r24
	gUARTTimerTriggered = TRUE;
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	80 93 9f 01 	sts	0x019F, r24
}
     c48:	8f 91       	pop	r24
     c4a:	0f 90       	pop	r0
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	0f 90       	pop	r0
     c50:	1f 90       	pop	r1
     c52:	18 95       	reti

00000c54 <__vector_20>:

ISR(USART0_RX_vect)
{
     c54:	1f 92       	push	r1
     c56:	0f 92       	push	r0
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	0f 92       	push	r0
     c5c:	11 24       	eor	r1, r1
     c5e:	0b b6       	in	r0, 0x3b	; 59
     c60:	0f 92       	push	r0
     c62:	2f 93       	push	r18
     c64:	3f 93       	push	r19
     c66:	4f 93       	push	r20
     c68:	5f 93       	push	r21
     c6a:	6f 93       	push	r22
     c6c:	7f 93       	push	r23
     c6e:	8f 93       	push	r24
     c70:	9f 93       	push	r25
     c72:	af 93       	push	r26
     c74:	bf 93       	push	r27
     c76:	ef 93       	push	r30
     c78:	ff 93       	push	r31
	if(gRCICallback0 != NULL)
     c7a:	e0 91 8e 01 	lds	r30, 0x018E
     c7e:	f0 91 8f 01 	lds	r31, 0x018F
     c82:	30 97       	sbiw	r30, 0x00	; 0
     c84:	31 f0       	breq	.+12     	; 0xc92 <__vector_20+0x3e>
	{
		gRCICallback0(UART_ZERO, gRCICallbackContext0);
     c86:	60 91 9a 01 	lds	r22, 0x019A
     c8a:	70 91 9b 01 	lds	r23, 0x019B
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	09 95       	icall
	}
}
     c92:	ff 91       	pop	r31
     c94:	ef 91       	pop	r30
     c96:	bf 91       	pop	r27
     c98:	af 91       	pop	r26
     c9a:	9f 91       	pop	r25
     c9c:	8f 91       	pop	r24
     c9e:	7f 91       	pop	r23
     ca0:	6f 91       	pop	r22
     ca2:	5f 91       	pop	r21
     ca4:	4f 91       	pop	r20
     ca6:	3f 91       	pop	r19
     ca8:	2f 91       	pop	r18
     caa:	0f 90       	pop	r0
     cac:	0b be       	out	0x3b, r0	; 59
     cae:	0f 90       	pop	r0
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	0f 90       	pop	r0
     cb4:	1f 90       	pop	r1
     cb6:	18 95       	reti

00000cb8 <__vector_28>:

ISR(USART1_RX_vect)
{
     cb8:	1f 92       	push	r1
     cba:	0f 92       	push	r0
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	0f 92       	push	r0
     cc0:	11 24       	eor	r1, r1
     cc2:	0b b6       	in	r0, 0x3b	; 59
     cc4:	0f 92       	push	r0
     cc6:	2f 93       	push	r18
     cc8:	3f 93       	push	r19
     cca:	4f 93       	push	r20
     ccc:	5f 93       	push	r21
     cce:	6f 93       	push	r22
     cd0:	7f 93       	push	r23
     cd2:	8f 93       	push	r24
     cd4:	9f 93       	push	r25
     cd6:	af 93       	push	r26
     cd8:	bf 93       	push	r27
     cda:	ef 93       	push	r30
     cdc:	ff 93       	push	r31
	if(gRCICallback1 != NULL)
     cde:	e0 91 94 01 	lds	r30, 0x0194
     ce2:	f0 91 95 01 	lds	r31, 0x0195
     ce6:	30 97       	sbiw	r30, 0x00	; 0
     ce8:	31 f0       	breq	.+12     	; 0xcf6 <__vector_28+0x3e>
	{
		gRCICallback1(UART_ONE, gRCICallbackContext1);
     cea:	60 91 92 01 	lds	r22, 0x0192
     cee:	70 91 93 01 	lds	r23, 0x0193
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	09 95       	icall
	}
}
     cf6:	ff 91       	pop	r31
     cf8:	ef 91       	pop	r30
     cfa:	bf 91       	pop	r27
     cfc:	af 91       	pop	r26
     cfe:	9f 91       	pop	r25
     d00:	8f 91       	pop	r24
     d02:	7f 91       	pop	r23
     d04:	6f 91       	pop	r22
     d06:	5f 91       	pop	r21
     d08:	4f 91       	pop	r20
     d0a:	3f 91       	pop	r19
     d0c:	2f 91       	pop	r18
     d0e:	0f 90       	pop	r0
     d10:	0b be       	out	0x3b, r0	; 59
     d12:	0f 90       	pop	r0
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	0f 90       	pop	r0
     d18:	1f 90       	pop	r1
     d1a:	18 95       	reti

00000d1c <__vector_22>:

ISR(USART0_TX_vect)
{
     d1c:	1f 92       	push	r1
     d1e:	0f 92       	push	r0
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	0f 92       	push	r0
     d24:	11 24       	eor	r1, r1
     d26:	0b b6       	in	r0, 0x3b	; 59
     d28:	0f 92       	push	r0
     d2a:	2f 93       	push	r18
     d2c:	3f 93       	push	r19
     d2e:	4f 93       	push	r20
     d30:	5f 93       	push	r21
     d32:	6f 93       	push	r22
     d34:	7f 93       	push	r23
     d36:	8f 93       	push	r24
     d38:	9f 93       	push	r25
     d3a:	af 93       	push	r26
     d3c:	bf 93       	push	r27
     d3e:	ef 93       	push	r30
     d40:	ff 93       	push	r31
	if(gTCICallback0 != NULL)
     d42:	e0 91 90 01 	lds	r30, 0x0190
     d46:	f0 91 91 01 	lds	r31, 0x0191
     d4a:	30 97       	sbiw	r30, 0x00	; 0
     d4c:	31 f0       	breq	.+12     	; 0xd5a <__vector_22+0x3e>
	{
		gTCICallback0(UART_ZERO, gTCICallbackContext0);
     d4e:	60 91 98 01 	lds	r22, 0x0198
     d52:	70 91 99 01 	lds	r23, 0x0199
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	09 95       	icall
	}
}
     d5a:	ff 91       	pop	r31
     d5c:	ef 91       	pop	r30
     d5e:	bf 91       	pop	r27
     d60:	af 91       	pop	r26
     d62:	9f 91       	pop	r25
     d64:	8f 91       	pop	r24
     d66:	7f 91       	pop	r23
     d68:	6f 91       	pop	r22
     d6a:	5f 91       	pop	r21
     d6c:	4f 91       	pop	r20
     d6e:	3f 91       	pop	r19
     d70:	2f 91       	pop	r18
     d72:	0f 90       	pop	r0
     d74:	0b be       	out	0x3b, r0	; 59
     d76:	0f 90       	pop	r0
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	0f 90       	pop	r0
     d7c:	1f 90       	pop	r1
     d7e:	18 95       	reti

00000d80 <__vector_30>:

ISR(USART1_TX_vect)
{
     d80:	1f 92       	push	r1
     d82:	0f 92       	push	r0
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	0f 92       	push	r0
     d88:	11 24       	eor	r1, r1
     d8a:	0b b6       	in	r0, 0x3b	; 59
     d8c:	0f 92       	push	r0
     d8e:	2f 93       	push	r18
     d90:	3f 93       	push	r19
     d92:	4f 93       	push	r20
     d94:	5f 93       	push	r21
     d96:	6f 93       	push	r22
     d98:	7f 93       	push	r23
     d9a:	8f 93       	push	r24
     d9c:	9f 93       	push	r25
     d9e:	af 93       	push	r26
     da0:	bf 93       	push	r27
     da2:	ef 93       	push	r30
     da4:	ff 93       	push	r31
	if(gTCICallback1 != NULL)
     da6:	e0 91 96 01 	lds	r30, 0x0196
     daa:	f0 91 97 01 	lds	r31, 0x0197
     dae:	30 97       	sbiw	r30, 0x00	; 0
     db0:	31 f0       	breq	.+12     	; 0xdbe <__vector_30+0x3e>
	{
		gTCICallback1(UART_ONE, gTCICallbackContext1);
     db2:	60 91 9d 01 	lds	r22, 0x019D
     db6:	70 91 9e 01 	lds	r23, 0x019E
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	09 95       	icall
	}
     dbe:	ff 91       	pop	r31
     dc0:	ef 91       	pop	r30
     dc2:	bf 91       	pop	r27
     dc4:	af 91       	pop	r26
     dc6:	9f 91       	pop	r25
     dc8:	8f 91       	pop	r24
     dca:	7f 91       	pop	r23
     dcc:	6f 91       	pop	r22
     dce:	5f 91       	pop	r21
     dd0:	4f 91       	pop	r20
     dd2:	3f 91       	pop	r19
     dd4:	2f 91       	pop	r18
     dd6:	0f 90       	pop	r0
     dd8:	0b be       	out	0x3b, r0	; 59
     dda:	0f 90       	pop	r0
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	0f 90       	pop	r0
     de0:	1f 90       	pop	r1
     de2:	18 95       	reti

00000de4 <InitPWM>:
void
TurnOffPWM()
{
	TCCR1B = 0;
	
	TCCR2B = 0;
     de4:	80 91 87 01 	lds	r24, 0x0187
     de8:	88 23       	and	r24, r24
     dea:	61 f0       	breq	.+24     	; 0xe04 <InitPWM+0x20>
     dec:	84 e3       	ldi	r24, 0x34	; 52
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	9f 93       	push	r25
     df2:	8f 93       	push	r24
     df4:	84 e0       	ldi	r24, 0x04	; 4
     df6:	8f 93       	push	r24
     df8:	fa dc       	rcall	.-1548   	; 0x7ee <SendTrace>
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	08 95       	ret
     e04:	8a b1       	in	r24, 0x0a	; 10
     e06:	80 6f       	ori	r24, 0xF0	; 240
     e08:	8a b9       	out	0x0a, r24	; 10
     e0a:	81 ef       	ldi	r24, 0xF1	; 241
     e0c:	80 93 80 00 	sts	0x0080, r24
     e10:	80 93 b0 00 	sts	0x00B0, r24
     e14:	84 e0       	ldi	r24, 0x04	; 4
     e16:	80 93 81 00 	sts	0x0081, r24
     e1a:	86 e0       	ldi	r24, 0x06	; 6
     e1c:	80 93 b1 00 	sts	0x00B1, r24
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	80 93 6f 00 	sts	0x006F, r24
     e26:	80 93 70 00 	sts	0x0070, r24
     e2a:	10 92 85 00 	sts	0x0085, r1
     e2e:	10 92 84 00 	sts	0x0084, r1
     e32:	10 92 b2 00 	sts	0x00B2, r1
     e36:	80 93 87 01 	sts	0x0187, r24
     e3a:	08 95       	ret

00000e3c <PWMChangePulseDuration>:
}

bool
PWMChangePulseDuration(PWM_CHANNEL PwmChannel, unsigned char Pulse)
{
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	16 2f       	mov	r17, r22
	bool Status = FALSE;
	
	if (!gPWMInitialized)
     e44:	90 91 87 01 	lds	r25, 0x0187
     e48:	99 23       	and	r25, r25
     e4a:	f9 f0       	breq	.+62     	; 0xe8a <PWMChangePulseDuration+0x4e>
	{
		goto Exit;	
	}
	
	SendTrace(INFO_LEVEL, "Channel = %d - Pulse = %d\r\n", PwmChannel, Pulse);
     e4c:	c8 2f       	mov	r28, r24
     e4e:	d0 e0       	ldi	r29, 0x00	; 0
     e50:	1f 92       	push	r1
     e52:	6f 93       	push	r22
     e54:	1f 92       	push	r1
     e56:	8f 93       	push	r24
     e58:	8e e4       	ldi	r24, 0x4E	; 78
     e5a:	91 e0       	ldi	r25, 0x01	; 1
     e5c:	9f 93       	push	r25
     e5e:	8f 93       	push	r24
     e60:	84 e0       	ldi	r24, 0x04	; 4
     e62:	8f 93       	push	r24
     e64:	c4 dc       	rcall	.-1656   	; 0x7ee <SendTrace>
	if (Pulse > PWM_PULSE_DIVS)
	{
		Pulse = PWM_PULSE_DIVS;
	}
	
	PwmChannelPulse[PwmChannel] = PWM_PULSE_MIN + PWM_PULSE_DIVS - Pulse;
     e66:	c8 57       	subi	r28, 0x78	; 120
     e68:	de 4f       	sbci	r29, 0xFE	; 254
     e6a:	8d b7       	in	r24, 0x3d	; 61
     e6c:	9e b7       	in	r25, 0x3e	; 62
     e6e:	07 96       	adiw	r24, 0x07	; 7
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	f8 94       	cli
     e74:	9e bf       	out	0x3e, r25	; 62
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	8d bf       	out	0x3d, r24	; 61
     e7a:	11 31       	cpi	r17, 0x11	; 17
     e7c:	08 f0       	brcs	.+2      	; 0xe80 <PWMChangePulseDuration+0x44>
     e7e:	10 e1       	ldi	r17, 0x10	; 16
     e80:	80 ef       	ldi	r24, 0xF0	; 240
     e82:	81 1b       	sub	r24, r17
     e84:	88 83       	st	Y, r24
	
	Status = TRUE;
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	01 c0       	rjmp	.+2      	; 0xe8c <PWMChangePulseDuration+0x50>
}

bool
PWMChangePulseDuration(PWM_CHANNEL PwmChannel, unsigned char Pulse)
{
	bool Status = FALSE;
     e8a:	80 e0       	ldi	r24, 0x00	; 0
	Status = TRUE;
	
Exit:
	
	return Status;
}
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	1f 91       	pop	r17
     e92:	08 95       	ret

00000e94 <__vector_15>:

ISR(TIMER1_OVF_vect)
{
     e94:	1f 92       	push	r1
     e96:	0f 92       	push	r0
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	0f 92       	push	r0
     e9c:	11 24       	eor	r1, r1
     e9e:	8f 93       	push	r24
     ea0:	9f 93       	push	r25
	if (gPWMInitialized)
     ea2:	80 91 87 01 	lds	r24, 0x0187
     ea6:	88 23       	and	r24, r24
     ea8:	71 f0       	breq	.+28     	; 0xec6 <__vector_15+0x32>
	{	
		
		OCR1A = PwmChannelPulse[PWM_CHANNEL_0];
     eaa:	80 91 88 01 	lds	r24, 0x0188
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	90 93 89 00 	sts	0x0089, r25
     eb4:	80 93 88 00 	sts	0x0088, r24
		
		OCR1B = PwmChannelPulse[PWM_CHANNEL_1];
     eb8:	80 91 89 01 	lds	r24, 0x0189
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	90 93 8b 00 	sts	0x008B, r25
     ec2:	80 93 8a 00 	sts	0x008A, r24
	}
	
	return;
}
     ec6:	9f 91       	pop	r25
     ec8:	8f 91       	pop	r24
     eca:	0f 90       	pop	r0
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	0f 90       	pop	r0
     ed0:	1f 90       	pop	r1
     ed2:	18 95       	reti

00000ed4 <__vector_11>:

ISR(TIMER2_OVF_vect)
{
     ed4:	1f 92       	push	r1
     ed6:	0f 92       	push	r0
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	0f 92       	push	r0
     edc:	11 24       	eor	r1, r1
     ede:	8f 93       	push	r24
	if (gPWMInitialized)
     ee0:	80 91 87 01 	lds	r24, 0x0187
     ee4:	88 23       	and	r24, r24
     ee6:	41 f0       	breq	.+16     	; 0xef8 <__vector_11+0x24>
	{
		OCR2A = PwmChannelPulse[PWM_CHANNEL_2];
     ee8:	80 91 8a 01 	lds	r24, 0x018A
     eec:	80 93 b3 00 	sts	0x00B3, r24
	
		OCR2B = PwmChannelPulse[PWM_CHANNEL_3];
     ef0:	80 91 8b 01 	lds	r24, 0x018B
     ef4:	80 93 b4 00 	sts	0x00B4, r24
	}
	
	return;
     ef8:	8f 91       	pop	r24
     efa:	0f 90       	pop	r0
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	0f 90       	pop	r0
     f00:	1f 90       	pop	r1
     f02:	18 95       	reti

00000f04 <InitADC>:

bool gADCInitialized = FALSE;

bool
InitADC(PADC_INIT_PARAMS InitParams)
{
     f04:	fc 01       	movw	r30, r24
	
	//
	// Check to see if the init params is set to NULL
	//
	
	if (InitParams == NULL)
     f06:	00 97       	sbiw	r24, 0x00	; 0
     f08:	b9 f0       	breq	.+46     	; 0xf38 <InitADC+0x34>
	// Initialize ADC Mux register
	//
	
	AdcMux.AsUINT8 = 0;
	
	AdcMux.RefVoltSelect = InitParams->RefVoltSelect;
     f0a:	81 81       	ldd	r24, Z+1	; 0x01
     f0c:	82 95       	swap	r24
     f0e:	88 0f       	add	r24, r24
     f10:	88 0f       	add	r24, r24
     f12:	80 7c       	andi	r24, 0xC0	; 192
	
	AdcMux.Adlar = InitParams->Flags.IsLeftAdjustResult;
     f14:	90 81       	ld	r25, Z
     f16:	90 fb       	bst	r25, 0
     f18:	85 f9       	bld	r24, 5
	
	ADMUX = AdcMux.AsUINT8;
     f1a:	80 93 7c 00 	sts	0x007C, r24
	// Initialize Control and Status A Register
	//
	
	AdcCtrlStatusA.AsUINT8 = 0;
	
	AdcCtrlStatusA.Prescalar = InitParams->Prescalar;
     f1e:	82 81       	ldd	r24, Z+2	; 0x02
     f20:	87 70       	andi	r24, 0x07	; 7
	
	AdcCtrlStatusA.ADCEnable = 1;
     f22:	80 68       	ori	r24, 0x80	; 128
	
	ADCSRA = AdcCtrlStatusA.AsUINT8;
     f24:	80 93 7a 00 	sts	0x007A, r24
	
	//
	// Initialize Control and Status Register B
	//
	
	ADCSRB = 0;
     f28:	10 92 7b 00 	sts	0x007B, r1
	
	//
	// Initialize Digital Input Disable Register 0
	//
	
	DIDR0 = InitParams->EnabledChannelsBitVector;
     f2c:	83 81       	ldd	r24, Z+3	; 0x03
     f2e:	80 93 7e 00 	sts	0x007E, r24
	
	
	gADCInitialized = TRUE;
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	80 93 8c 01 	sts	0x018C, r24
	
	Exit:

	return gADCInitialized;
}
     f38:	80 91 8c 01 	lds	r24, 0x018C
     f3c:	08 95       	ret

00000f3e <ADCRead>:
	
	//
	// Read DIDR0 register to check enabled channels
	//
	
	if (!(DIDR0 & (0x1 << AdcChannel)))
     f3e:	20 91 7e 00 	lds	r18, 0x007E
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	08 2e       	mov	r0, r24
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <ADCRead+0xe>
     f48:	35 95       	asr	r19
     f4a:	27 95       	ror	r18
     f4c:	0a 94       	dec	r0
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <ADCRead+0xa>
     f50:	20 fd       	sbrc	r18, 0
     f52:	0c c0       	rjmp	.+24     	; 0xf6c <ADCRead+0x2e>
	{
		Status = FALSE;
		
		SendTrace(ERROR_LEVEL, "ADC Channel Not Enabled\r\n");
     f54:	8a e6       	ldi	r24, 0x6A	; 106
     f56:	91 e0       	ldi	r25, 0x01	; 1
     f58:	9f 93       	push	r25
     f5a:	8f 93       	push	r24
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	8f 93       	push	r24
     f60:	46 dc       	rcall	.-1908   	; 0x7ee <SendTrace>
		
		goto Exit;
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
	// Read DIDR0 register to check enabled channels
	//
	
	if (!(DIDR0 & (0x1 << AdcChannel)))
	{
		Status = FALSE;
     f68:	80 e0       	ldi	r24, 0x00	; 0
		
		SendTrace(ERROR_LEVEL, "ADC Channel Not Enabled\r\n");
		
		goto Exit;
     f6a:	08 95       	ret
	
	//
	// Write the ADC Channel in ADCMUX
	//
	
	AdcMux.AsUINT8 = ADMUX;
     f6c:	ec e7       	ldi	r30, 0x7C	; 124
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	90 81       	ld	r25, Z
	
	AdcMux.Mux = AdcChannel;
     f72:	8f 71       	andi	r24, 0x1F	; 31
     f74:	90 7e       	andi	r25, 0xE0	; 224
     f76:	89 2b       	or	r24, r25
	
	ADMUX = AdcMux.AsUINT8; 
     f78:	80 83       	st	Z, r24
	
	//
	// Start Conversion
	//
	
	START_CONVERSION();
     f7a:	ea e7       	ldi	r30, 0x7A	; 122
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	80 64       	ori	r24, 0x40	; 64
     f82:	80 83       	st	Z, r24
	
	//
	// Wait for Conversion to complete
	//
	
	WAIT_FOR_CONVERSION();
     f84:	80 81       	ld	r24, Z
     f86:	84 ff       	sbrs	r24, 4
     f88:	fd cf       	rjmp	.-6      	; 0xf84 <ADCRead+0x46>
	
	//
	// Read the data
	//
	
	*Value = ADCL;
     f8a:	80 91 78 00 	lds	r24, 0x0078
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	fb 01       	movw	r30, r22
     f92:	91 83       	std	Z+1, r25	; 0x01
     f94:	80 83       	st	Z, r24
	
	*Value |= (ADCH << 8);
     f96:	20 91 79 00 	lds	r18, 0x0079
     f9a:	92 2b       	or	r25, r18
	
	if (*Value >= ADC_MAX_VALUE)
     f9c:	8c 3f       	cpi	r24, 0xFC	; 252
     f9e:	f3 e0       	ldi	r31, 0x03	; 3
     fa0:	9f 07       	cpc	r25, r31
     fa2:	28 f4       	brcc	.+10     	; 0xfae <ADCRead+0x70>
	// Read the data
	//
	
	*Value = ADCL;
	
	*Value |= (ADCH << 8);
     fa4:	fb 01       	movw	r30, r22
     fa6:	91 83       	std	Z+1, r25	; 0x01
     fa8:	80 83       	st	Z, r24
}

bool
ADCRead(ADC_CHANNEL AdcChannel, unsigned int *Value)
{
	bool Status = TRUE;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	08 95       	ret
	
	*Value |= (ADCH << 8);
	
	if (*Value >= ADC_MAX_VALUE)
	{
		*Value = ADC_MAX_VALUE - 1;
     fae:	8b ef       	ldi	r24, 0xFB	; 251
     fb0:	93 e0       	ldi	r25, 0x03	; 3
     fb2:	fb 01       	movw	r30, r22
     fb4:	91 83       	std	Z+1, r25	; 0x01
     fb6:	80 83       	st	Z, r24
}

bool
ADCRead(ADC_CHANNEL AdcChannel, unsigned int *Value)
{
	bool Status = TRUE;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
	}
	
Exit:

	return Status;
     fba:	08 95       	ret

00000fbc <__subsf3>:
     fbc:	50 58       	subi	r21, 0x80	; 128

00000fbe <__addsf3>:
     fbe:	bb 27       	eor	r27, r27
     fc0:	aa 27       	eor	r26, r26
     fc2:	0e d0       	rcall	.+28     	; 0xfe0 <__addsf3x>
     fc4:	94 c1       	rjmp	.+808    	; 0x12ee <__fp_round>
     fc6:	85 d1       	rcall	.+778    	; 0x12d2 <__fp_pscA>
     fc8:	30 f0       	brcs	.+12     	; 0xfd6 <__addsf3+0x18>
     fca:	8a d1       	rcall	.+788    	; 0x12e0 <__fp_pscB>
     fcc:	20 f0       	brcs	.+8      	; 0xfd6 <__addsf3+0x18>
     fce:	31 f4       	brne	.+12     	; 0xfdc <__addsf3+0x1e>
     fd0:	9f 3f       	cpi	r25, 0xFF	; 255
     fd2:	11 f4       	brne	.+4      	; 0xfd8 <__addsf3+0x1a>
     fd4:	1e f4       	brtc	.+6      	; 0xfdc <__addsf3+0x1e>
     fd6:	6a c1       	rjmp	.+724    	; 0x12ac <__fp_nan>
     fd8:	0e f4       	brtc	.+2      	; 0xfdc <__addsf3+0x1e>
     fda:	e0 95       	com	r30
     fdc:	e7 fb       	bst	r30, 7
     fde:	60 c1       	rjmp	.+704    	; 0x12a0 <__fp_inf>

00000fe0 <__addsf3x>:
     fe0:	e9 2f       	mov	r30, r25
     fe2:	96 d1       	rcall	.+812    	; 0x1310 <__fp_split3>
     fe4:	80 f3       	brcs	.-32     	; 0xfc6 <__addsf3+0x8>
     fe6:	ba 17       	cp	r27, r26
     fe8:	62 07       	cpc	r22, r18
     fea:	73 07       	cpc	r23, r19
     fec:	84 07       	cpc	r24, r20
     fee:	95 07       	cpc	r25, r21
     ff0:	18 f0       	brcs	.+6      	; 0xff8 <__addsf3x+0x18>
     ff2:	71 f4       	brne	.+28     	; 0x1010 <__addsf3x+0x30>
     ff4:	9e f5       	brtc	.+102    	; 0x105c <__addsf3x+0x7c>
     ff6:	ae c1       	rjmp	.+860    	; 0x1354 <__fp_zero>
     ff8:	0e f4       	brtc	.+2      	; 0xffc <__addsf3x+0x1c>
     ffa:	e0 95       	com	r30
     ffc:	0b 2e       	mov	r0, r27
     ffe:	ba 2f       	mov	r27, r26
    1000:	a0 2d       	mov	r26, r0
    1002:	0b 01       	movw	r0, r22
    1004:	b9 01       	movw	r22, r18
    1006:	90 01       	movw	r18, r0
    1008:	0c 01       	movw	r0, r24
    100a:	ca 01       	movw	r24, r20
    100c:	a0 01       	movw	r20, r0
    100e:	11 24       	eor	r1, r1
    1010:	ff 27       	eor	r31, r31
    1012:	59 1b       	sub	r21, r25
    1014:	99 f0       	breq	.+38     	; 0x103c <__addsf3x+0x5c>
    1016:	59 3f       	cpi	r21, 0xF9	; 249
    1018:	50 f4       	brcc	.+20     	; 0x102e <__addsf3x+0x4e>
    101a:	50 3e       	cpi	r21, 0xE0	; 224
    101c:	68 f1       	brcs	.+90     	; 0x1078 <__addsf3x+0x98>
    101e:	1a 16       	cp	r1, r26
    1020:	f0 40       	sbci	r31, 0x00	; 0
    1022:	a2 2f       	mov	r26, r18
    1024:	23 2f       	mov	r18, r19
    1026:	34 2f       	mov	r19, r20
    1028:	44 27       	eor	r20, r20
    102a:	58 5f       	subi	r21, 0xF8	; 248
    102c:	f3 cf       	rjmp	.-26     	; 0x1014 <__addsf3x+0x34>
    102e:	46 95       	lsr	r20
    1030:	37 95       	ror	r19
    1032:	27 95       	ror	r18
    1034:	a7 95       	ror	r26
    1036:	f0 40       	sbci	r31, 0x00	; 0
    1038:	53 95       	inc	r21
    103a:	c9 f7       	brne	.-14     	; 0x102e <__addsf3x+0x4e>
    103c:	7e f4       	brtc	.+30     	; 0x105c <__addsf3x+0x7c>
    103e:	1f 16       	cp	r1, r31
    1040:	ba 0b       	sbc	r27, r26
    1042:	62 0b       	sbc	r22, r18
    1044:	73 0b       	sbc	r23, r19
    1046:	84 0b       	sbc	r24, r20
    1048:	ba f0       	brmi	.+46     	; 0x1078 <__addsf3x+0x98>
    104a:	91 50       	subi	r25, 0x01	; 1
    104c:	a1 f0       	breq	.+40     	; 0x1076 <__addsf3x+0x96>
    104e:	ff 0f       	add	r31, r31
    1050:	bb 1f       	adc	r27, r27
    1052:	66 1f       	adc	r22, r22
    1054:	77 1f       	adc	r23, r23
    1056:	88 1f       	adc	r24, r24
    1058:	c2 f7       	brpl	.-16     	; 0x104a <__addsf3x+0x6a>
    105a:	0e c0       	rjmp	.+28     	; 0x1078 <__addsf3x+0x98>
    105c:	ba 0f       	add	r27, r26
    105e:	62 1f       	adc	r22, r18
    1060:	73 1f       	adc	r23, r19
    1062:	84 1f       	adc	r24, r20
    1064:	48 f4       	brcc	.+18     	; 0x1078 <__addsf3x+0x98>
    1066:	87 95       	ror	r24
    1068:	77 95       	ror	r23
    106a:	67 95       	ror	r22
    106c:	b7 95       	ror	r27
    106e:	f7 95       	ror	r31
    1070:	9e 3f       	cpi	r25, 0xFE	; 254
    1072:	08 f0       	brcs	.+2      	; 0x1076 <__addsf3x+0x96>
    1074:	b3 cf       	rjmp	.-154    	; 0xfdc <__addsf3+0x1e>
    1076:	93 95       	inc	r25
    1078:	88 0f       	add	r24, r24
    107a:	08 f0       	brcs	.+2      	; 0x107e <__addsf3x+0x9e>
    107c:	99 27       	eor	r25, r25
    107e:	ee 0f       	add	r30, r30
    1080:	97 95       	ror	r25
    1082:	87 95       	ror	r24
    1084:	08 95       	ret

00001086 <__cmpsf2>:
    1086:	e8 d0       	rcall	.+464    	; 0x1258 <__fp_cmp>
    1088:	08 f4       	brcc	.+2      	; 0x108c <__cmpsf2+0x6>
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	08 95       	ret

0000108e <__fixsfdi>:
    108e:	be e3       	ldi	r27, 0x3E	; 62
    1090:	04 d0       	rcall	.+8      	; 0x109a <__fixunssfdi+0x2>
    1092:	08 f4       	brcc	.+2      	; 0x1096 <__fixsfdi+0x8>
    1094:	90 e8       	ldi	r25, 0x80	; 128
    1096:	08 95       	ret

00001098 <__fixunssfdi>:
    1098:	bf e3       	ldi	r27, 0x3F	; 63
    109a:	22 27       	eor	r18, r18
    109c:	33 27       	eor	r19, r19
    109e:	a9 01       	movw	r20, r18
    10a0:	3f d1       	rcall	.+638    	; 0x1320 <__fp_splitA>
    10a2:	58 f1       	brcs	.+86     	; 0x10fa <__fixunssfdi+0x62>
    10a4:	9f 57       	subi	r25, 0x7F	; 127
    10a6:	40 f1       	brcs	.+80     	; 0x10f8 <__fixunssfdi+0x60>
    10a8:	b9 17       	cp	r27, r25
    10aa:	38 f1       	brcs	.+78     	; 0x10fa <__fixunssfdi+0x62>
    10ac:	bf e3       	ldi	r27, 0x3F	; 63
    10ae:	b9 1b       	sub	r27, r25
    10b0:	99 27       	eor	r25, r25
    10b2:	b8 50       	subi	r27, 0x08	; 8
    10b4:	3a f4       	brpl	.+14     	; 0x10c4 <__fixunssfdi+0x2c>
    10b6:	66 0f       	add	r22, r22
    10b8:	77 1f       	adc	r23, r23
    10ba:	88 1f       	adc	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	b3 95       	inc	r27
    10c0:	d2 f3       	brmi	.-12     	; 0x10b6 <__fixunssfdi+0x1e>
    10c2:	16 c0       	rjmp	.+44     	; 0x10f0 <__fixunssfdi+0x58>
    10c4:	b8 50       	subi	r27, 0x08	; 8
    10c6:	4a f0       	brmi	.+18     	; 0x10da <__fixunssfdi+0x42>
    10c8:	23 2f       	mov	r18, r19
    10ca:	34 2f       	mov	r19, r20
    10cc:	45 2f       	mov	r20, r21
    10ce:	56 2f       	mov	r21, r22
    10d0:	67 2f       	mov	r22, r23
    10d2:	78 2f       	mov	r23, r24
    10d4:	88 27       	eor	r24, r24
    10d6:	b8 50       	subi	r27, 0x08	; 8
    10d8:	ba f7       	brpl	.-18     	; 0x10c8 <__fixunssfdi+0x30>
    10da:	b8 5f       	subi	r27, 0xF8	; 248
    10dc:	49 f0       	breq	.+18     	; 0x10f0 <__fixunssfdi+0x58>
    10de:	86 95       	lsr	r24
    10e0:	77 95       	ror	r23
    10e2:	67 95       	ror	r22
    10e4:	57 95       	ror	r21
    10e6:	47 95       	ror	r20
    10e8:	37 95       	ror	r19
    10ea:	27 95       	ror	r18
    10ec:	ba 95       	dec	r27
    10ee:	b9 f7       	brne	.-18     	; 0x10de <__fixunssfdi+0x46>
    10f0:	0e f4       	brtc	.+2      	; 0x10f4 <__fixunssfdi+0x5c>
    10f2:	df d0       	rcall	.+446    	; 0x12b2 <__fp_negdi>
    10f4:	88 94       	clc
    10f6:	08 95       	ret
    10f8:	88 94       	clc
    10fa:	60 e0       	ldi	r22, 0x00	; 0
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	cb 01       	movw	r24, r22
    1100:	08 95       	ret

00001102 <__fixunssfsi>:
    1102:	0e d1       	rcall	.+540    	; 0x1320 <__fp_splitA>
    1104:	88 f0       	brcs	.+34     	; 0x1128 <__fixunssfsi+0x26>
    1106:	9f 57       	subi	r25, 0x7F	; 127
    1108:	90 f0       	brcs	.+36     	; 0x112e <__fixunssfsi+0x2c>
    110a:	b9 2f       	mov	r27, r25
    110c:	99 27       	eor	r25, r25
    110e:	b7 51       	subi	r27, 0x17	; 23
    1110:	a0 f0       	brcs	.+40     	; 0x113a <__fixunssfsi+0x38>
    1112:	d1 f0       	breq	.+52     	; 0x1148 <__fixunssfsi+0x46>
    1114:	66 0f       	add	r22, r22
    1116:	77 1f       	adc	r23, r23
    1118:	88 1f       	adc	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	1a f0       	brmi	.+6      	; 0x1124 <__fixunssfsi+0x22>
    111e:	ba 95       	dec	r27
    1120:	c9 f7       	brne	.-14     	; 0x1114 <__fixunssfsi+0x12>
    1122:	12 c0       	rjmp	.+36     	; 0x1148 <__fixunssfsi+0x46>
    1124:	b1 30       	cpi	r27, 0x01	; 1
    1126:	81 f0       	breq	.+32     	; 0x1148 <__fixunssfsi+0x46>
    1128:	15 d1       	rcall	.+554    	; 0x1354 <__fp_zero>
    112a:	b1 e0       	ldi	r27, 0x01	; 1
    112c:	08 95       	ret
    112e:	12 c1       	rjmp	.+548    	; 0x1354 <__fp_zero>
    1130:	67 2f       	mov	r22, r23
    1132:	78 2f       	mov	r23, r24
    1134:	88 27       	eor	r24, r24
    1136:	b8 5f       	subi	r27, 0xF8	; 248
    1138:	39 f0       	breq	.+14     	; 0x1148 <__fixunssfsi+0x46>
    113a:	b9 3f       	cpi	r27, 0xF9	; 249
    113c:	cc f3       	brlt	.-14     	; 0x1130 <__fixunssfsi+0x2e>
    113e:	86 95       	lsr	r24
    1140:	77 95       	ror	r23
    1142:	67 95       	ror	r22
    1144:	b3 95       	inc	r27
    1146:	d9 f7       	brne	.-10     	; 0x113e <__fixunssfsi+0x3c>
    1148:	3e f4       	brtc	.+14     	; 0x1158 <__fixunssfsi+0x56>
    114a:	90 95       	com	r25
    114c:	80 95       	com	r24
    114e:	70 95       	com	r23
    1150:	61 95       	neg	r22
    1152:	7f 4f       	sbci	r23, 0xFF	; 255
    1154:	8f 4f       	sbci	r24, 0xFF	; 255
    1156:	9f 4f       	sbci	r25, 0xFF	; 255
    1158:	08 95       	ret

0000115a <__floatdisf>:
    115a:	97 fb       	bst	r25, 7
    115c:	0e f4       	brtc	.+2      	; 0x1160 <__floatdisf+0x6>
    115e:	a9 d0       	rcall	.+338    	; 0x12b2 <__fp_negdi>
    1160:	3e c0       	rjmp	.+124    	; 0x11de <__fp_di2sf>

00001162 <__floatunsisf>:
    1162:	e8 94       	clt
    1164:	09 c0       	rjmp	.+18     	; 0x1178 <__floatsisf+0x12>

00001166 <__floatsisf>:
    1166:	97 fb       	bst	r25, 7
    1168:	3e f4       	brtc	.+14     	; 0x1178 <__floatsisf+0x12>
    116a:	90 95       	com	r25
    116c:	80 95       	com	r24
    116e:	70 95       	com	r23
    1170:	61 95       	neg	r22
    1172:	7f 4f       	sbci	r23, 0xFF	; 255
    1174:	8f 4f       	sbci	r24, 0xFF	; 255
    1176:	9f 4f       	sbci	r25, 0xFF	; 255
    1178:	99 23       	and	r25, r25
    117a:	a9 f0       	breq	.+42     	; 0x11a6 <__floatsisf+0x40>
    117c:	f9 2f       	mov	r31, r25
    117e:	96 e9       	ldi	r25, 0x96	; 150
    1180:	bb 27       	eor	r27, r27
    1182:	93 95       	inc	r25
    1184:	f6 95       	lsr	r31
    1186:	87 95       	ror	r24
    1188:	77 95       	ror	r23
    118a:	67 95       	ror	r22
    118c:	b7 95       	ror	r27
    118e:	f1 11       	cpse	r31, r1
    1190:	f8 cf       	rjmp	.-16     	; 0x1182 <__floatsisf+0x1c>
    1192:	fa f4       	brpl	.+62     	; 0x11d2 <__floatsisf+0x6c>
    1194:	bb 0f       	add	r27, r27
    1196:	11 f4       	brne	.+4      	; 0x119c <__floatsisf+0x36>
    1198:	60 ff       	sbrs	r22, 0
    119a:	1b c0       	rjmp	.+54     	; 0x11d2 <__floatsisf+0x6c>
    119c:	6f 5f       	subi	r22, 0xFF	; 255
    119e:	7f 4f       	sbci	r23, 0xFF	; 255
    11a0:	8f 4f       	sbci	r24, 0xFF	; 255
    11a2:	9f 4f       	sbci	r25, 0xFF	; 255
    11a4:	16 c0       	rjmp	.+44     	; 0x11d2 <__floatsisf+0x6c>
    11a6:	88 23       	and	r24, r24
    11a8:	11 f0       	breq	.+4      	; 0x11ae <__floatsisf+0x48>
    11aa:	96 e9       	ldi	r25, 0x96	; 150
    11ac:	11 c0       	rjmp	.+34     	; 0x11d0 <__floatsisf+0x6a>
    11ae:	77 23       	and	r23, r23
    11b0:	21 f0       	breq	.+8      	; 0x11ba <__floatsisf+0x54>
    11b2:	9e e8       	ldi	r25, 0x8E	; 142
    11b4:	87 2f       	mov	r24, r23
    11b6:	76 2f       	mov	r23, r22
    11b8:	05 c0       	rjmp	.+10     	; 0x11c4 <__floatsisf+0x5e>
    11ba:	66 23       	and	r22, r22
    11bc:	71 f0       	breq	.+28     	; 0x11da <__floatsisf+0x74>
    11be:	96 e8       	ldi	r25, 0x86	; 134
    11c0:	86 2f       	mov	r24, r22
    11c2:	70 e0       	ldi	r23, 0x00	; 0
    11c4:	60 e0       	ldi	r22, 0x00	; 0
    11c6:	2a f0       	brmi	.+10     	; 0x11d2 <__floatsisf+0x6c>
    11c8:	9a 95       	dec	r25
    11ca:	66 0f       	add	r22, r22
    11cc:	77 1f       	adc	r23, r23
    11ce:	88 1f       	adc	r24, r24
    11d0:	da f7       	brpl	.-10     	; 0x11c8 <__floatsisf+0x62>
    11d2:	88 0f       	add	r24, r24
    11d4:	96 95       	lsr	r25
    11d6:	87 95       	ror	r24
    11d8:	97 f9       	bld	r25, 7
    11da:	08 95       	ret

000011dc <__floatundisf>:
    11dc:	e8 94       	clt

000011de <__fp_di2sf>:
    11de:	f9 2f       	mov	r31, r25
    11e0:	96 eb       	ldi	r25, 0xB6	; 182
    11e2:	ff 23       	and	r31, r31
    11e4:	81 f0       	breq	.+32     	; 0x1206 <__fp_di2sf+0x28>
    11e6:	12 16       	cp	r1, r18
    11e8:	13 06       	cpc	r1, r19
    11ea:	14 06       	cpc	r1, r20
    11ec:	44 0b       	sbc	r20, r20
    11ee:	93 95       	inc	r25
    11f0:	f6 95       	lsr	r31
    11f2:	87 95       	ror	r24
    11f4:	77 95       	ror	r23
    11f6:	67 95       	ror	r22
    11f8:	57 95       	ror	r21
    11fa:	40 40       	sbci	r20, 0x00	; 0
    11fc:	ff 23       	and	r31, r31
    11fe:	b9 f7       	brne	.-18     	; 0x11ee <__fp_di2sf+0x10>
    1200:	1b c0       	rjmp	.+54     	; 0x1238 <__fp_di2sf+0x5a>
    1202:	99 27       	eor	r25, r25
    1204:	08 95       	ret
    1206:	88 23       	and	r24, r24
    1208:	51 f4       	brne	.+20     	; 0x121e <__fp_di2sf+0x40>
    120a:	98 50       	subi	r25, 0x08	; 8
    120c:	d2 f7       	brpl	.-12     	; 0x1202 <__fp_di2sf+0x24>
    120e:	87 2b       	or	r24, r23
    1210:	76 2f       	mov	r23, r22
    1212:	65 2f       	mov	r22, r21
    1214:	54 2f       	mov	r21, r20
    1216:	43 2f       	mov	r20, r19
    1218:	32 2f       	mov	r19, r18
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	b1 f3       	breq	.-20     	; 0x120a <__fp_di2sf+0x2c>
    121e:	12 16       	cp	r1, r18
    1220:	13 06       	cpc	r1, r19
    1222:	14 06       	cpc	r1, r20
    1224:	44 0b       	sbc	r20, r20
    1226:	88 23       	and	r24, r24
    1228:	3a f0       	brmi	.+14     	; 0x1238 <__fp_di2sf+0x5a>
    122a:	9a 95       	dec	r25
    122c:	44 0f       	add	r20, r20
    122e:	55 1f       	adc	r21, r21
    1230:	66 1f       	adc	r22, r22
    1232:	77 1f       	adc	r23, r23
    1234:	88 1f       	adc	r24, r24
    1236:	ca f7       	brpl	.-14     	; 0x122a <__fp_di2sf+0x4c>
    1238:	55 23       	and	r21, r21
    123a:	4a f4       	brpl	.+18     	; 0x124e <__fp_di2sf+0x70>
    123c:	44 0f       	add	r20, r20
    123e:	55 1f       	adc	r21, r21
    1240:	11 f4       	brne	.+4      	; 0x1246 <__fp_di2sf+0x68>
    1242:	60 ff       	sbrs	r22, 0
    1244:	04 c0       	rjmp	.+8      	; 0x124e <__fp_di2sf+0x70>
    1246:	6f 5f       	subi	r22, 0xFF	; 255
    1248:	7f 4f       	sbci	r23, 0xFF	; 255
    124a:	8f 4f       	sbci	r24, 0xFF	; 255
    124c:	9f 4f       	sbci	r25, 0xFF	; 255
    124e:	88 0f       	add	r24, r24
    1250:	96 95       	lsr	r25
    1252:	87 95       	ror	r24
    1254:	97 f9       	bld	r25, 7
    1256:	08 95       	ret

00001258 <__fp_cmp>:
    1258:	99 0f       	add	r25, r25
    125a:	00 08       	sbc	r0, r0
    125c:	55 0f       	add	r21, r21
    125e:	aa 0b       	sbc	r26, r26
    1260:	e0 e8       	ldi	r30, 0x80	; 128
    1262:	fe ef       	ldi	r31, 0xFE	; 254
    1264:	16 16       	cp	r1, r22
    1266:	17 06       	cpc	r1, r23
    1268:	e8 07       	cpc	r30, r24
    126a:	f9 07       	cpc	r31, r25
    126c:	c0 f0       	brcs	.+48     	; 0x129e <__fp_cmp+0x46>
    126e:	12 16       	cp	r1, r18
    1270:	13 06       	cpc	r1, r19
    1272:	e4 07       	cpc	r30, r20
    1274:	f5 07       	cpc	r31, r21
    1276:	98 f0       	brcs	.+38     	; 0x129e <__fp_cmp+0x46>
    1278:	62 1b       	sub	r22, r18
    127a:	73 0b       	sbc	r23, r19
    127c:	84 0b       	sbc	r24, r20
    127e:	95 0b       	sbc	r25, r21
    1280:	39 f4       	brne	.+14     	; 0x1290 <__fp_cmp+0x38>
    1282:	0a 26       	eor	r0, r26
    1284:	61 f0       	breq	.+24     	; 0x129e <__fp_cmp+0x46>
    1286:	23 2b       	or	r18, r19
    1288:	24 2b       	or	r18, r20
    128a:	25 2b       	or	r18, r21
    128c:	21 f4       	brne	.+8      	; 0x1296 <__fp_cmp+0x3e>
    128e:	08 95       	ret
    1290:	0a 26       	eor	r0, r26
    1292:	09 f4       	brne	.+2      	; 0x1296 <__fp_cmp+0x3e>
    1294:	a1 40       	sbci	r26, 0x01	; 1
    1296:	a6 95       	lsr	r26
    1298:	8f ef       	ldi	r24, 0xFF	; 255
    129a:	81 1d       	adc	r24, r1
    129c:	81 1d       	adc	r24, r1
    129e:	08 95       	ret

000012a0 <__fp_inf>:
    12a0:	97 f9       	bld	r25, 7
    12a2:	9f 67       	ori	r25, 0x7F	; 127
    12a4:	80 e8       	ldi	r24, 0x80	; 128
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	60 e0       	ldi	r22, 0x00	; 0
    12aa:	08 95       	ret

000012ac <__fp_nan>:
    12ac:	9f ef       	ldi	r25, 0xFF	; 255
    12ae:	80 ec       	ldi	r24, 0xC0	; 192
    12b0:	08 95       	ret

000012b2 <__fp_negdi>:
    12b2:	90 95       	com	r25
    12b4:	80 95       	com	r24
    12b6:	70 95       	com	r23
    12b8:	60 95       	com	r22
    12ba:	50 95       	com	r21
    12bc:	40 95       	com	r20
    12be:	30 95       	com	r19
    12c0:	21 95       	neg	r18
    12c2:	3f 4f       	sbci	r19, 0xFF	; 255
    12c4:	4f 4f       	sbci	r20, 0xFF	; 255
    12c6:	5f 4f       	sbci	r21, 0xFF	; 255
    12c8:	6f 4f       	sbci	r22, 0xFF	; 255
    12ca:	7f 4f       	sbci	r23, 0xFF	; 255
    12cc:	8f 4f       	sbci	r24, 0xFF	; 255
    12ce:	9f 4f       	sbci	r25, 0xFF	; 255
    12d0:	08 95       	ret

000012d2 <__fp_pscA>:
    12d2:	00 24       	eor	r0, r0
    12d4:	0a 94       	dec	r0
    12d6:	16 16       	cp	r1, r22
    12d8:	17 06       	cpc	r1, r23
    12da:	18 06       	cpc	r1, r24
    12dc:	09 06       	cpc	r0, r25
    12de:	08 95       	ret

000012e0 <__fp_pscB>:
    12e0:	00 24       	eor	r0, r0
    12e2:	0a 94       	dec	r0
    12e4:	12 16       	cp	r1, r18
    12e6:	13 06       	cpc	r1, r19
    12e8:	14 06       	cpc	r1, r20
    12ea:	05 06       	cpc	r0, r21
    12ec:	08 95       	ret

000012ee <__fp_round>:
    12ee:	09 2e       	mov	r0, r25
    12f0:	03 94       	inc	r0
    12f2:	00 0c       	add	r0, r0
    12f4:	11 f4       	brne	.+4      	; 0x12fa <__fp_round+0xc>
    12f6:	88 23       	and	r24, r24
    12f8:	52 f0       	brmi	.+20     	; 0x130e <__fp_round+0x20>
    12fa:	bb 0f       	add	r27, r27
    12fc:	40 f4       	brcc	.+16     	; 0x130e <__fp_round+0x20>
    12fe:	bf 2b       	or	r27, r31
    1300:	11 f4       	brne	.+4      	; 0x1306 <__fp_round+0x18>
    1302:	60 ff       	sbrs	r22, 0
    1304:	04 c0       	rjmp	.+8      	; 0x130e <__fp_round+0x20>
    1306:	6f 5f       	subi	r22, 0xFF	; 255
    1308:	7f 4f       	sbci	r23, 0xFF	; 255
    130a:	8f 4f       	sbci	r24, 0xFF	; 255
    130c:	9f 4f       	sbci	r25, 0xFF	; 255
    130e:	08 95       	ret

00001310 <__fp_split3>:
    1310:	57 fd       	sbrc	r21, 7
    1312:	90 58       	subi	r25, 0x80	; 128
    1314:	44 0f       	add	r20, r20
    1316:	55 1f       	adc	r21, r21
    1318:	59 f0       	breq	.+22     	; 0x1330 <__fp_splitA+0x10>
    131a:	5f 3f       	cpi	r21, 0xFF	; 255
    131c:	71 f0       	breq	.+28     	; 0x133a <__fp_splitA+0x1a>
    131e:	47 95       	ror	r20

00001320 <__fp_splitA>:
    1320:	88 0f       	add	r24, r24
    1322:	97 fb       	bst	r25, 7
    1324:	99 1f       	adc	r25, r25
    1326:	61 f0       	breq	.+24     	; 0x1340 <__fp_splitA+0x20>
    1328:	9f 3f       	cpi	r25, 0xFF	; 255
    132a:	79 f0       	breq	.+30     	; 0x134a <__fp_splitA+0x2a>
    132c:	87 95       	ror	r24
    132e:	08 95       	ret
    1330:	12 16       	cp	r1, r18
    1332:	13 06       	cpc	r1, r19
    1334:	14 06       	cpc	r1, r20
    1336:	55 1f       	adc	r21, r21
    1338:	f2 cf       	rjmp	.-28     	; 0x131e <__fp_split3+0xe>
    133a:	46 95       	lsr	r20
    133c:	f1 df       	rcall	.-30     	; 0x1320 <__fp_splitA>
    133e:	08 c0       	rjmp	.+16     	; 0x1350 <__fp_splitA+0x30>
    1340:	16 16       	cp	r1, r22
    1342:	17 06       	cpc	r1, r23
    1344:	18 06       	cpc	r1, r24
    1346:	99 1f       	adc	r25, r25
    1348:	f1 cf       	rjmp	.-30     	; 0x132c <__fp_splitA+0xc>
    134a:	86 95       	lsr	r24
    134c:	71 05       	cpc	r23, r1
    134e:	61 05       	cpc	r22, r1
    1350:	08 94       	sec
    1352:	08 95       	ret

00001354 <__fp_zero>:
    1354:	e8 94       	clt

00001356 <__fp_szero>:
    1356:	bb 27       	eor	r27, r27
    1358:	66 27       	eor	r22, r22
    135a:	77 27       	eor	r23, r23
    135c:	cb 01       	movw	r24, r22
    135e:	97 f9       	bld	r25, 7
    1360:	08 95       	ret

00001362 <__mulsf3>:
    1362:	0b d0       	rcall	.+22     	; 0x137a <__mulsf3x>
    1364:	c4 cf       	rjmp	.-120    	; 0x12ee <__fp_round>
    1366:	b5 df       	rcall	.-150    	; 0x12d2 <__fp_pscA>
    1368:	28 f0       	brcs	.+10     	; 0x1374 <__mulsf3+0x12>
    136a:	ba df       	rcall	.-140    	; 0x12e0 <__fp_pscB>
    136c:	18 f0       	brcs	.+6      	; 0x1374 <__mulsf3+0x12>
    136e:	95 23       	and	r25, r21
    1370:	09 f0       	breq	.+2      	; 0x1374 <__mulsf3+0x12>
    1372:	96 cf       	rjmp	.-212    	; 0x12a0 <__fp_inf>
    1374:	9b cf       	rjmp	.-202    	; 0x12ac <__fp_nan>
    1376:	11 24       	eor	r1, r1
    1378:	ee cf       	rjmp	.-36     	; 0x1356 <__fp_szero>

0000137a <__mulsf3x>:
    137a:	ca df       	rcall	.-108    	; 0x1310 <__fp_split3>
    137c:	a0 f3       	brcs	.-24     	; 0x1366 <__mulsf3+0x4>

0000137e <__mulsf3_pse>:
    137e:	95 9f       	mul	r25, r21
    1380:	d1 f3       	breq	.-12     	; 0x1376 <__mulsf3+0x14>
    1382:	95 0f       	add	r25, r21
    1384:	50 e0       	ldi	r21, 0x00	; 0
    1386:	55 1f       	adc	r21, r21
    1388:	62 9f       	mul	r22, r18
    138a:	f0 01       	movw	r30, r0
    138c:	72 9f       	mul	r23, r18
    138e:	bb 27       	eor	r27, r27
    1390:	f0 0d       	add	r31, r0
    1392:	b1 1d       	adc	r27, r1
    1394:	63 9f       	mul	r22, r19
    1396:	aa 27       	eor	r26, r26
    1398:	f0 0d       	add	r31, r0
    139a:	b1 1d       	adc	r27, r1
    139c:	aa 1f       	adc	r26, r26
    139e:	64 9f       	mul	r22, r20
    13a0:	66 27       	eor	r22, r22
    13a2:	b0 0d       	add	r27, r0
    13a4:	a1 1d       	adc	r26, r1
    13a6:	66 1f       	adc	r22, r22
    13a8:	82 9f       	mul	r24, r18
    13aa:	22 27       	eor	r18, r18
    13ac:	b0 0d       	add	r27, r0
    13ae:	a1 1d       	adc	r26, r1
    13b0:	62 1f       	adc	r22, r18
    13b2:	73 9f       	mul	r23, r19
    13b4:	b0 0d       	add	r27, r0
    13b6:	a1 1d       	adc	r26, r1
    13b8:	62 1f       	adc	r22, r18
    13ba:	83 9f       	mul	r24, r19
    13bc:	a0 0d       	add	r26, r0
    13be:	61 1d       	adc	r22, r1
    13c0:	22 1f       	adc	r18, r18
    13c2:	74 9f       	mul	r23, r20
    13c4:	33 27       	eor	r19, r19
    13c6:	a0 0d       	add	r26, r0
    13c8:	61 1d       	adc	r22, r1
    13ca:	23 1f       	adc	r18, r19
    13cc:	84 9f       	mul	r24, r20
    13ce:	60 0d       	add	r22, r0
    13d0:	21 1d       	adc	r18, r1
    13d2:	82 2f       	mov	r24, r18
    13d4:	76 2f       	mov	r23, r22
    13d6:	6a 2f       	mov	r22, r26
    13d8:	11 24       	eor	r1, r1
    13da:	9f 57       	subi	r25, 0x7F	; 127
    13dc:	50 40       	sbci	r21, 0x00	; 0
    13de:	8a f0       	brmi	.+34     	; 0x1402 <__mulsf3_pse+0x84>
    13e0:	e1 f0       	breq	.+56     	; 0x141a <__mulsf3_pse+0x9c>
    13e2:	88 23       	and	r24, r24
    13e4:	4a f0       	brmi	.+18     	; 0x13f8 <__mulsf3_pse+0x7a>
    13e6:	ee 0f       	add	r30, r30
    13e8:	ff 1f       	adc	r31, r31
    13ea:	bb 1f       	adc	r27, r27
    13ec:	66 1f       	adc	r22, r22
    13ee:	77 1f       	adc	r23, r23
    13f0:	88 1f       	adc	r24, r24
    13f2:	91 50       	subi	r25, 0x01	; 1
    13f4:	50 40       	sbci	r21, 0x00	; 0
    13f6:	a9 f7       	brne	.-22     	; 0x13e2 <__mulsf3_pse+0x64>
    13f8:	9e 3f       	cpi	r25, 0xFE	; 254
    13fa:	51 05       	cpc	r21, r1
    13fc:	70 f0       	brcs	.+28     	; 0x141a <__mulsf3_pse+0x9c>
    13fe:	50 cf       	rjmp	.-352    	; 0x12a0 <__fp_inf>
    1400:	aa cf       	rjmp	.-172    	; 0x1356 <__fp_szero>
    1402:	5f 3f       	cpi	r21, 0xFF	; 255
    1404:	ec f3       	brlt	.-6      	; 0x1400 <__mulsf3_pse+0x82>
    1406:	98 3e       	cpi	r25, 0xE8	; 232
    1408:	dc f3       	brlt	.-10     	; 0x1400 <__mulsf3_pse+0x82>
    140a:	86 95       	lsr	r24
    140c:	77 95       	ror	r23
    140e:	67 95       	ror	r22
    1410:	b7 95       	ror	r27
    1412:	f7 95       	ror	r31
    1414:	e7 95       	ror	r30
    1416:	9f 5f       	subi	r25, 0xFF	; 255
    1418:	c1 f7       	brne	.-16     	; 0x140a <__mulsf3_pse+0x8c>
    141a:	fe 2b       	or	r31, r30
    141c:	88 0f       	add	r24, r24
    141e:	91 1d       	adc	r25, r1
    1420:	96 95       	lsr	r25
    1422:	87 95       	ror	r24
    1424:	97 f9       	bld	r25, 7
    1426:	08 95       	ret

00001428 <__tablejump2__>:
    1428:	ee 0f       	add	r30, r30
    142a:	ff 1f       	adc	r31, r31

0000142c <__tablejump__>:
    142c:	05 90       	lpm	r0, Z+
    142e:	f4 91       	lpm	r31, Z
    1430:	e0 2d       	mov	r30, r0
    1432:	09 94       	ijmp

00001434 <__umulhisi3>:
    1434:	a2 9f       	mul	r26, r18
    1436:	b0 01       	movw	r22, r0
    1438:	b3 9f       	mul	r27, r19
    143a:	c0 01       	movw	r24, r0
    143c:	a3 9f       	mul	r26, r19
    143e:	70 0d       	add	r23, r0
    1440:	81 1d       	adc	r24, r1
    1442:	11 24       	eor	r1, r1
    1444:	91 1d       	adc	r25, r1
    1446:	b2 9f       	mul	r27, r18
    1448:	70 0d       	add	r23, r0
    144a:	81 1d       	adc	r24, r1
    144c:	11 24       	eor	r1, r1
    144e:	91 1d       	adc	r25, r1
    1450:	08 95       	ret

00001452 <__moddi3>:
    1452:	68 94       	set
    1454:	01 c0       	rjmp	.+2      	; 0x1458 <__divdi3_moddi3>

00001456 <__divdi3>:
    1456:	e8 94       	clt

00001458 <__divdi3_moddi3>:
    1458:	f9 2f       	mov	r31, r25
    145a:	f1 2b       	or	r31, r17
    145c:	0a f0       	brmi	.+2      	; 0x1460 <__divdi3_moddi3+0x8>
    145e:	27 c0       	rjmp	.+78     	; 0x14ae <__udivdi3_umoddi3>
    1460:	a0 e0       	ldi	r26, 0x00	; 0
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e5 e3       	ldi	r30, 0x35	; 53
    1466:	fa e0       	ldi	r31, 0x0A	; 10
    1468:	93 c0       	rjmp	.+294    	; 0x1590 <__prologue_saves__+0xc>
    146a:	09 2e       	mov	r0, r25
    146c:	05 94       	asr	r0
    146e:	1a f4       	brpl	.+6      	; 0x1476 <__divdi3_moddi3+0x1e>
    1470:	79 d0       	rcall	.+242    	; 0x1564 <__negdi2>
    1472:	11 23       	and	r17, r17
    1474:	92 f4       	brpl	.+36     	; 0x149a <__divdi3_moddi3+0x42>
    1476:	f0 e8       	ldi	r31, 0x80	; 128
    1478:	0f 26       	eor	r0, r31
    147a:	ff ef       	ldi	r31, 0xFF	; 255
    147c:	e0 94       	com	r14
    147e:	f0 94       	com	r15
    1480:	00 95       	com	r16
    1482:	10 95       	com	r17
    1484:	b0 94       	com	r11
    1486:	c0 94       	com	r12
    1488:	d0 94       	com	r13
    148a:	a1 94       	neg	r10
    148c:	bf 0a       	sbc	r11, r31
    148e:	cf 0a       	sbc	r12, r31
    1490:	df 0a       	sbc	r13, r31
    1492:	ef 0a       	sbc	r14, r31
    1494:	ff 0a       	sbc	r15, r31
    1496:	0f 0b       	sbc	r16, r31
    1498:	1f 0b       	sbc	r17, r31
    149a:	13 d0       	rcall	.+38     	; 0x14c2 <__udivmod64>
    149c:	07 fc       	sbrc	r0, 7
    149e:	62 d0       	rcall	.+196    	; 0x1564 <__negdi2>
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	ec e0       	ldi	r30, 0x0C	; 12
    14a6:	90 c0       	rjmp	.+288    	; 0x15c8 <__epilogue_restores__+0xc>

000014a8 <__umoddi3>:
    14a8:	68 94       	set
    14aa:	01 c0       	rjmp	.+2      	; 0x14ae <__udivdi3_umoddi3>

000014ac <__udivdi3>:
    14ac:	e8 94       	clt

000014ae <__udivdi3_umoddi3>:
    14ae:	8f 92       	push	r8
    14b0:	9f 92       	push	r9
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	05 d0       	rcall	.+10     	; 0x14c2 <__udivmod64>
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	9f 90       	pop	r9
    14be:	8f 90       	pop	r8
    14c0:	08 95       	ret

000014c2 <__udivmod64>:
    14c2:	88 24       	eor	r8, r8
    14c4:	99 24       	eor	r9, r9
    14c6:	f4 01       	movw	r30, r8
    14c8:	e4 01       	movw	r28, r8
    14ca:	b0 e4       	ldi	r27, 0x40	; 64
    14cc:	9f 93       	push	r25
    14ce:	aa 27       	eor	r26, r26
    14d0:	9a 15       	cp	r25, r10
    14d2:	8b 04       	cpc	r8, r11
    14d4:	9c 04       	cpc	r9, r12
    14d6:	ed 05       	cpc	r30, r13
    14d8:	fe 05       	cpc	r31, r14
    14da:	cf 05       	cpc	r28, r15
    14dc:	d0 07       	cpc	r29, r16
    14de:	a1 07       	cpc	r26, r17
    14e0:	98 f4       	brcc	.+38     	; 0x1508 <__udivmod64+0x46>
    14e2:	ad 2f       	mov	r26, r29
    14e4:	dc 2f       	mov	r29, r28
    14e6:	cf 2f       	mov	r28, r31
    14e8:	fe 2f       	mov	r31, r30
    14ea:	e9 2d       	mov	r30, r9
    14ec:	98 2c       	mov	r9, r8
    14ee:	89 2e       	mov	r8, r25
    14f0:	98 2f       	mov	r25, r24
    14f2:	87 2f       	mov	r24, r23
    14f4:	76 2f       	mov	r23, r22
    14f6:	65 2f       	mov	r22, r21
    14f8:	54 2f       	mov	r21, r20
    14fa:	43 2f       	mov	r20, r19
    14fc:	32 2f       	mov	r19, r18
    14fe:	22 27       	eor	r18, r18
    1500:	b8 50       	subi	r27, 0x08	; 8
    1502:	31 f7       	brne	.-52     	; 0x14d0 <__udivmod64+0xe>
    1504:	bf 91       	pop	r27
    1506:	27 c0       	rjmp	.+78     	; 0x1556 <__udivmod64+0x94>
    1508:	1b 2e       	mov	r1, r27
    150a:	bf 91       	pop	r27
    150c:	bb 27       	eor	r27, r27
    150e:	22 0f       	add	r18, r18
    1510:	33 1f       	adc	r19, r19
    1512:	44 1f       	adc	r20, r20
    1514:	55 1f       	adc	r21, r21
    1516:	66 1f       	adc	r22, r22
    1518:	77 1f       	adc	r23, r23
    151a:	88 1f       	adc	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	88 1c       	adc	r8, r8
    1520:	99 1c       	adc	r9, r9
    1522:	ee 1f       	adc	r30, r30
    1524:	ff 1f       	adc	r31, r31
    1526:	cc 1f       	adc	r28, r28
    1528:	dd 1f       	adc	r29, r29
    152a:	aa 1f       	adc	r26, r26
    152c:	bb 1f       	adc	r27, r27
    152e:	8a 14       	cp	r8, r10
    1530:	9b 04       	cpc	r9, r11
    1532:	ec 05       	cpc	r30, r12
    1534:	fd 05       	cpc	r31, r13
    1536:	ce 05       	cpc	r28, r14
    1538:	df 05       	cpc	r29, r15
    153a:	a0 07       	cpc	r26, r16
    153c:	b1 07       	cpc	r27, r17
    153e:	48 f0       	brcs	.+18     	; 0x1552 <__udivmod64+0x90>
    1540:	8a 18       	sub	r8, r10
    1542:	9b 08       	sbc	r9, r11
    1544:	ec 09       	sbc	r30, r12
    1546:	fd 09       	sbc	r31, r13
    1548:	ce 09       	sbc	r28, r14
    154a:	df 09       	sbc	r29, r15
    154c:	a0 0b       	sbc	r26, r16
    154e:	b1 0b       	sbc	r27, r17
    1550:	21 60       	ori	r18, 0x01	; 1
    1552:	1a 94       	dec	r1
    1554:	e1 f6       	brne	.-72     	; 0x150e <__udivmod64+0x4c>
    1556:	2e f4       	brtc	.+10     	; 0x1562 <__udivmod64+0xa0>
    1558:	94 01       	movw	r18, r8
    155a:	af 01       	movw	r20, r30
    155c:	be 01       	movw	r22, r28
    155e:	cd 01       	movw	r24, r26
    1560:	00 0c       	add	r0, r0
    1562:	08 95       	ret

00001564 <__negdi2>:
    1564:	60 95       	com	r22
    1566:	70 95       	com	r23
    1568:	80 95       	com	r24
    156a:	90 95       	com	r25
    156c:	30 95       	com	r19
    156e:	40 95       	com	r20
    1570:	50 95       	com	r21
    1572:	21 95       	neg	r18
    1574:	3f 4f       	sbci	r19, 0xFF	; 255
    1576:	4f 4f       	sbci	r20, 0xFF	; 255
    1578:	5f 4f       	sbci	r21, 0xFF	; 255
    157a:	6f 4f       	sbci	r22, 0xFF	; 255
    157c:	7f 4f       	sbci	r23, 0xFF	; 255
    157e:	8f 4f       	sbci	r24, 0xFF	; 255
    1580:	9f 4f       	sbci	r25, 0xFF	; 255
    1582:	08 95       	ret

00001584 <__prologue_saves__>:
    1584:	2f 92       	push	r2
    1586:	3f 92       	push	r3
    1588:	4f 92       	push	r4
    158a:	5f 92       	push	r5
    158c:	6f 92       	push	r6
    158e:	7f 92       	push	r7
    1590:	8f 92       	push	r8
    1592:	9f 92       	push	r9
    1594:	af 92       	push	r10
    1596:	bf 92       	push	r11
    1598:	cf 92       	push	r12
    159a:	df 92       	push	r13
    159c:	ef 92       	push	r14
    159e:	ff 92       	push	r15
    15a0:	0f 93       	push	r16
    15a2:	1f 93       	push	r17
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	ca 1b       	sub	r28, r26
    15ae:	db 0b       	sbc	r29, r27
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	de bf       	out	0x3e, r29	; 62
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	cd bf       	out	0x3d, r28	; 61
    15ba:	09 94       	ijmp

000015bc <__epilogue_restores__>:
    15bc:	2a 88       	ldd	r2, Y+18	; 0x12
    15be:	39 88       	ldd	r3, Y+17	; 0x11
    15c0:	48 88       	ldd	r4, Y+16	; 0x10
    15c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    15c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    15c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    15c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    15ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    15cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    15ce:	b9 84       	ldd	r11, Y+9	; 0x09
    15d0:	c8 84       	ldd	r12, Y+8	; 0x08
    15d2:	df 80       	ldd	r13, Y+7	; 0x07
    15d4:	ee 80       	ldd	r14, Y+6	; 0x06
    15d6:	fd 80       	ldd	r15, Y+5	; 0x05
    15d8:	0c 81       	ldd	r16, Y+4	; 0x04
    15da:	1b 81       	ldd	r17, Y+3	; 0x03
    15dc:	aa 81       	ldd	r26, Y+2	; 0x02
    15de:	b9 81       	ldd	r27, Y+1	; 0x01
    15e0:	ce 0f       	add	r28, r30
    15e2:	d1 1d       	adc	r29, r1
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	de bf       	out	0x3e, r29	; 62
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	ed 01       	movw	r28, r26
    15f0:	08 95       	ret

000015f2 <__ashrdi3>:
    15f2:	97 fb       	bst	r25, 7
    15f4:	10 f8       	bld	r1, 0

000015f6 <__lshrdi3>:
    15f6:	16 94       	lsr	r1
    15f8:	00 08       	sbc	r0, r0
    15fa:	0f 93       	push	r16
    15fc:	08 30       	cpi	r16, 0x08	; 8
    15fe:	98 f0       	brcs	.+38     	; 0x1626 <__lshrdi3+0x30>
    1600:	08 50       	subi	r16, 0x08	; 8
    1602:	23 2f       	mov	r18, r19
    1604:	34 2f       	mov	r19, r20
    1606:	45 2f       	mov	r20, r21
    1608:	56 2f       	mov	r21, r22
    160a:	67 2f       	mov	r22, r23
    160c:	78 2f       	mov	r23, r24
    160e:	89 2f       	mov	r24, r25
    1610:	90 2d       	mov	r25, r0
    1612:	f4 cf       	rjmp	.-24     	; 0x15fc <__lshrdi3+0x6>
    1614:	05 94       	asr	r0
    1616:	97 95       	ror	r25
    1618:	87 95       	ror	r24
    161a:	77 95       	ror	r23
    161c:	67 95       	ror	r22
    161e:	57 95       	ror	r21
    1620:	47 95       	ror	r20
    1622:	37 95       	ror	r19
    1624:	27 95       	ror	r18
    1626:	0a 95       	dec	r16
    1628:	aa f7       	brpl	.-22     	; 0x1614 <__lshrdi3+0x1e>
    162a:	0f 91       	pop	r16
    162c:	08 95       	ret

0000162e <__cmpdi2_s8>:
    162e:	00 24       	eor	r0, r0
    1630:	a7 fd       	sbrc	r26, 7
    1632:	00 94       	com	r0
    1634:	2a 17       	cp	r18, r26
    1636:	30 05       	cpc	r19, r0
    1638:	40 05       	cpc	r20, r0
    163a:	50 05       	cpc	r21, r0
    163c:	60 05       	cpc	r22, r0
    163e:	70 05       	cpc	r23, r0
    1640:	80 05       	cpc	r24, r0
    1642:	90 05       	cpc	r25, r0
    1644:	08 95       	ret

00001646 <_exit>:
    1646:	f8 94       	cli

00001648 <__stop_program>:
    1648:	ff cf       	rjmp	.-2      	; 0x1648 <__stop_program>
