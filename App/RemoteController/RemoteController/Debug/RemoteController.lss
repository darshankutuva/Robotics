
RemoteController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000a3c  00800100  00002f28  00002fbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000074  00800b3c  00800b3c  000039f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000039f8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000398  00000000  00000000  00003a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005576  00000000  00000000  00003dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000144a  00000000  00000000  00009336  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002dd2  00000000  00000000  0000a780  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000010a4  00000000  00000000  0000d554  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001af1  00000000  00000000  0000e5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005669  00000000  00000000  000100e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002f8  00000000  00000000  00015752  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5b c0       	rjmp	.+182    	; 0xb8 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__vector_1>
       8:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__vector_2>
       c:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__vector_3>
      10:	71 c0       	rjmp	.+226    	; 0xf4 <__bad_interrupt>
      12:	00 00       	nop
      14:	6f c0       	rjmp	.+222    	; 0xf4 <__bad_interrupt>
      16:	00 00       	nop
      18:	6d c0       	rjmp	.+218    	; 0xf4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6b c0       	rjmp	.+214    	; 0xf4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	69 c0       	rjmp	.+210    	; 0xf4 <__bad_interrupt>
      22:	00 00       	nop
      24:	67 c0       	rjmp	.+206    	; 0xf4 <__bad_interrupt>
      26:	00 00       	nop
      28:	65 c0       	rjmp	.+202    	; 0xf4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	63 c0       	rjmp	.+198    	; 0xf4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	61 c0       	rjmp	.+194    	; 0xf4 <__bad_interrupt>
      32:	00 00       	nop
      34:	5f c0       	rjmp	.+190    	; 0xf4 <__bad_interrupt>
      36:	00 00       	nop
      38:	5d c0       	rjmp	.+186    	; 0xf4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5b c0       	rjmp	.+182    	; 0xf4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <__vector_16>
      44:	57 c0       	rjmp	.+174    	; 0xf4 <__bad_interrupt>
      46:	00 00       	nop
      48:	55 c0       	rjmp	.+170    	; 0xf4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	53 c0       	rjmp	.+166    	; 0xf4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <__vector_20>
      54:	4f c0       	rjmp	.+158    	; 0xf4 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 75 15 	jmp	0x2aea	; 0x2aea <__vector_22>
      5c:	4b c0       	rjmp	.+150    	; 0xf4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	49 c0       	rjmp	.+146    	; 0xf4 <__bad_interrupt>
      62:	00 00       	nop
      64:	47 c0       	rjmp	.+142    	; 0xf4 <__bad_interrupt>
      66:	00 00       	nop
      68:	45 c0       	rjmp	.+138    	; 0xf4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	43 c0       	rjmp	.+134    	; 0xf4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <__vector_28>
      74:	3f c0       	rjmp	.+126    	; 0xf4 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 a7 15 	jmp	0x2b4e	; 0x2b4e <__vector_30>
      7c:	3b c0       	rjmp	.+118    	; 0xf4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	39 c0       	rjmp	.+114    	; 0xf4 <__bad_interrupt>
      82:	00 00       	nop
      84:	37 c0       	rjmp	.+110    	; 0xf4 <__bad_interrupt>
      86:	00 00       	nop
      88:	35 c0       	rjmp	.+106    	; 0xf4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9d 09       	sbc	r25, r13
      8e:	b0 09       	sbc	r27, r0
      90:	88 0a       	sbc	r8, r24
      92:	73 0a       	sbc	r7, r19
      94:	88 0a       	sbc	r8, r24
      96:	88 0a       	sbc	r8, r24
      98:	88 0a       	sbc	r8, r24
      9a:	88 0a       	sbc	r8, r24
      9c:	88 0a       	sbc	r8, r24
      9e:	66 0a       	sbc	r6, r22
      a0:	88 0a       	sbc	r8, r24
      a2:	88 0a       	sbc	r8, r24
      a4:	88 0a       	sbc	r8, r24
      a6:	88 0a       	sbc	r8, r24
      a8:	88 0a       	sbc	r8, r24
      aa:	88 0a       	sbc	r8, r24
      ac:	6b 0a       	sbc	r6, r27
      ae:	88 0a       	sbc	r8, r24
      b0:	f2 09       	sbc	r31, r2
      b2:	88 0a       	sbc	r8, r24
      b4:	88 0a       	sbc	r8, r24
      b6:	2e 0a       	sbc	r2, r30

000000b8 <__ctors_end>:
      b8:	11 24       	eor	r1, r1
      ba:	1f be       	out	0x3f, r1	; 63
      bc:	cf ef       	ldi	r28, 0xFF	; 255
      be:	d0 e4       	ldi	r29, 0x40	; 64
      c0:	de bf       	out	0x3e, r29	; 62
      c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
      c4:	1b e0       	ldi	r17, 0x0B	; 11
      c6:	a0 e0       	ldi	r26, 0x00	; 0
      c8:	b1 e0       	ldi	r27, 0x01	; 1
      ca:	e8 e2       	ldi	r30, 0x28	; 40
      cc:	ff e2       	ldi	r31, 0x2F	; 47
      ce:	00 e0       	ldi	r16, 0x00	; 0
      d0:	0b bf       	out	0x3b, r16	; 59
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x14>
      d4:	07 90       	elpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	ac 33       	cpi	r26, 0x3C	; 60
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0x10>

000000de <__do_clear_bss>:
      de:	2b e0       	ldi	r18, 0x0B	; 11
      e0:	ac e3       	ldi	r26, 0x3C	; 60
      e2:	bb e0       	ldi	r27, 0x0B	; 11
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	a0 3b       	cpi	r26, 0xB0	; 176
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>
      ee:	fe d2       	rcall	.+1532   	; 0x6ec <main>
      f0:	0c 94 92 17 	jmp	0x2f24	; 0x2f24 <_exit>

000000f4 <__bad_interrupt>:
      f4:	85 cf       	rjmp	.-246    	; 0x0 <__vectors>

000000f6 <RCADCIntCallback>:
}

void
RCADCIntCallback(PVOID CallbackContext)
{
	gIsEnterPressed = TRUE;
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	80 93 3c 0b 	sts	0x0B3C, r24
      fc:	08 95       	ret

000000fe <InitDisplay>:
	return Status;
}

bool
InitDisplay()
{
      fe:	cf 93       	push	r28
     100:	df 93       	push	r29
     102:	00 d0       	rcall	.+0      	; 0x104 <InitDisplay+0x6>
     104:	00 d0       	rcall	.+0      	; 0x106 <InitDisplay+0x8>
     106:	1f 92       	push	r1
     108:	cd b7       	in	r28, 0x3d	; 61
     10a:	de b7       	in	r29, 0x3e	; 62
	
	//
	// Initialize Init Params Structure
	//
	
	InitParams.Flags.AsUINT16 = 0;
     10c:	1a 82       	std	Y+2, r1	; 0x02
     10e:	19 82       	std	Y+1, r1	; 0x01
	
	InitParams.Flags.IsDisplayShift = 1;
	
	InitParams.Flags.IsIncrementPos = 0;
	
	InitParams.Flags.IsAutoScroll = 0;
     110:	85 e4       	ldi	r24, 0x45	; 69
     112:	8f 77       	andi	r24, 0x7F	; 127
     114:	89 83       	std	Y+1, r24	; 0x01
	// Set LCD Address
	//
	
	InitParams.SlaveAddress.AsUINT8 = 0;
	
	InitParams.SlaveAddress.Address = LCD_ADDRESS;
     116:	8e e4       	ldi	r24, 0x4E	; 78
     118:	8d 83       	std	Y+5, r24	; 0x05
	
	//
	// Set Max Characters per line and number of lines
	//
	
	InitParams.MaxCharacters = MAX_CHARACTERS;
     11a:	80 e1       	ldi	r24, 0x10	; 16
     11c:	8c 83       	std	Y+4, r24	; 0x04
	
	InitParams.MaxLines = MAX_LINES;
     11e:	82 e0       	ldi	r24, 0x02	; 2
     120:	8b 83       	std	Y+3, r24	; 0x03
	
	//
	// Initialize LCD
	//

	return InitLCD(&InitParams);
     122:	ce 01       	movw	r24, r28
     124:	01 96       	adiw	r24, 0x01	; 1
     126:	0e 94 76 0c 	call	0x18ec	; 0x18ec <InitLCD>
}
     12a:	0f 90       	pop	r0
     12c:	0f 90       	pop	r0
     12e:	0f 90       	pop	r0
     130:	0f 90       	pop	r0
     132:	0f 90       	pop	r0
     134:	df 91       	pop	r29
     136:	cf 91       	pop	r28
     138:	08 95       	ret

0000013a <InitInputControl>:

bool
InitInputControl()
{
     13a:	0f 93       	push	r16
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	00 d0       	rcall	.+0      	; 0x142 <InitInputControl+0x8>
     142:	00 d0       	rcall	.+0      	; 0x144 <InitInputControl+0xa>
     144:	cd b7       	in	r28, 0x3d	; 61
     146:	de b7       	in	r29, 0x3e	; 62
	
	//
	// Register INT0 Interrupt
	//
	
	RegisterExtInterrupt(EXTINT_INT0, FALLING_EDGE_TRIGGERED, &RCADCIntCallback, NULL, TRUE);
     148:	01 e0       	ldi	r16, 0x01	; 1
     14a:	20 e0       	ldi	r18, 0x00	; 0
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	4b e7       	ldi	r20, 0x7B	; 123
     150:	50 e0       	ldi	r21, 0x00	; 0
     152:	62 e0       	ldi	r22, 0x02	; 2
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	0e 94 de 10 	call	0x21bc	; 0x21bc <RegisterExtInterrupt>
	
	//
	// Initialize ADC Params
	//
	
	AdcParams.Flags.IsLeftAdjustResult = 0;
     15a:	89 81       	ldd	r24, Y+1	; 0x01
     15c:	8e 7f       	andi	r24, 0xFE	; 254
     15e:	89 83       	std	Y+1, r24	; 0x01
	
	AdcParams.RefVoltSelect = AREF_VOLT;
     160:	1a 82       	std	Y+2, r1	; 0x02
	
	AdcParams.Prescalar = DIV_FACTOR_0;
     162:	1b 82       	std	Y+3, r1	; 0x03
	
	AdcParams.EnabledChannelsBitVector = (0x1 << ADC_CHANNEL_0) | (0x1 << ADC_CHANNEL_1) | (0x1 << ADC_CHANNEL_2);
     164:	87 e0       	ldi	r24, 0x07	; 7
     166:	8c 83       	std	Y+4, r24	; 0x04
	
	return InitADC(&AdcParams);
     168:	ce 01       	movw	r24, r28
     16a:	01 96       	adiw	r24, 0x01	; 1
     16c:	0e 94 a3 0a 	call	0x1546	; 0x1546 <InitADC>
}
     170:	0f 90       	pop	r0
     172:	0f 90       	pop	r0
     174:	0f 90       	pop	r0
     176:	0f 90       	pop	r0
     178:	df 91       	pop	r29
     17a:	cf 91       	pop	r28
     17c:	0f 91       	pop	r16
     17e:	08 95       	ret

00000180 <InitTransmitter>:

bool
InitTransmitter()
{
     180:	cf 93       	push	r28
     182:	df 93       	push	r29
     184:	cd b7       	in	r28, 0x3d	; 61
     186:	de b7       	in	r29, 0x3e	; 62
     188:	a1 97       	sbiw	r28, 0x21	; 33
     18a:	0f b6       	in	r0, 0x3f	; 63
     18c:	f8 94       	cli
     18e:	de bf       	out	0x3e, r29	; 62
     190:	0f be       	out	0x3f, r0	; 63
     192:	cd bf       	out	0x3d, r28	; 61
	
	//
	// Initialize Mode
	//
	
	InitParams.Mode = TRANSMITTER;
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	89 83       	std	Y+1, r24	; 0x01
	
	//
	// Initialize Auto Acknowledgment
	//
	
	InitParams.IsAutoAcknowledgeEnabled = TRUE;
     198:	89 a3       	std	Y+33, r24	; 0x21
	
	//
	// Initialize MY Address
	//
	
	InitParams.MyAddress.AsULongLong = 0x0;
     19a:	1f 82       	std	Y+7, r1	; 0x07
     19c:	18 86       	std	Y+8, r1	; 0x08
     19e:	19 86       	std	Y+9, r1	; 0x09
	
	InitParams.MyAddress.Address = MY_ADDRESS;
     1a0:	80 ee       	ldi	r24, 0xE0	; 224
     1a2:	8a 83       	std	Y+2, r24	; 0x02
     1a4:	80 ed       	ldi	r24, 0xD0	; 208
     1a6:	8b 83       	std	Y+3, r24	; 0x03
     1a8:	80 ec       	ldi	r24, 0xC0	; 192
     1aa:	8c 83       	std	Y+4, r24	; 0x04
     1ac:	80 eb       	ldi	r24, 0xB0	; 176
     1ae:	8d 83       	std	Y+5, r24	; 0x05
     1b0:	80 ea       	ldi	r24, 0xA0	; 160
     1b2:	8e 83       	std	Y+6, r24	; 0x06
	
	//
	// Initialize Destination Address
	//
	
	InitParams.DestAddress.AsULongLong = 0x0;
     1b4:	1f 86       	std	Y+15, r1	; 0x0f
     1b6:	18 8a       	std	Y+16, r1	; 0x10
     1b8:	19 8a       	std	Y+17, r1	; 0x11
	
	InitParams.DestAddress.Address = DEST_ADDRESS;
     1ba:	88 e7       	ldi	r24, 0x78	; 120
     1bc:	8a 87       	std	Y+10, r24	; 0x0a
     1be:	8b 87       	std	Y+11, r24	; 0x0b
     1c0:	8c 87       	std	Y+12, r24	; 0x0c
     1c2:	8d 87       	std	Y+13, r24	; 0x0d
     1c4:	8e 87       	std	Y+14, r24	; 0x0e
	
	//
	// Initialize Retry parameters
	//
	
	InitParams.AutoRetryCount = ARC_15;
     1c6:	8f e0       	ldi	r24, 0x0F	; 15
     1c8:	8a 8b       	std	Y+18, r24	; 0x12
	
	InitParams.AutoRetryDelay = ARD_4000_MS;
     1ca:	8b 8b       	std	Y+19, r24	; 0x13
	// Initialize RF Channel
	//
	
	InitParams.RFChannel.AsUINT8 = 0;
	
	InitParams.RFChannel.RFCH = RF_CH;
     1cc:	8e e6       	ldi	r24, 0x6E	; 110
     1ce:	8c 8b       	std	Y+20, r24	; 0x14
	
	//
	// Register Interrupt Callbacks
	//
	
	InitParams.MaxRTCallback = NULL;
     1d0:	1e 8a       	std	Y+22, r1	; 0x16
     1d2:	1d 8a       	std	Y+21, r1	; 0x15
	
	InitParams.RxDRCallback = NULL;
     1d4:	1a 8e       	std	Y+26, r1	; 0x1a
     1d6:	19 8e       	std	Y+25, r1	; 0x19
	
	InitParams.TxDSCallback = NULL;
     1d8:	1e 8e       	std	Y+30, r1	; 0x1e
     1da:	1d 8e       	std	Y+29, r1	; 0x1d
	
	//
	// Initialize call back context
	//
	
	InitParams.MaxRTCallbackContext = NULL;
     1dc:	18 8e       	std	Y+24, r1	; 0x18
     1de:	1f 8a       	std	Y+23, r1	; 0x17
	
	InitParams.TxDSCallbackContext	= NULL;
     1e0:	18 a2       	std	Y+32, r1	; 0x20
     1e2:	1f 8e       	std	Y+31, r1	; 0x1f
	
	InitParams.RxDRCallbackContext	= NULL;
     1e4:	1c 8e       	std	Y+28, r1	; 0x1c
     1e6:	1b 8e       	std	Y+27, r1	; 0x1b
	
	//
	// Call initialization routine
	//
	
	return InitTransceiver(&InitParams);
     1e8:	ce 01       	movw	r24, r28
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	0e 94 75 0e 	call	0x1cea	; 0x1cea <InitTransceiver>
}
     1f0:	a1 96       	adiw	r28, 0x21	; 33
     1f2:	0f b6       	in	r0, 0x3f	; 63
     1f4:	f8 94       	cli
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	0f be       	out	0x3f, r0	; 63
     1fa:	cd bf       	out	0x3d, r28	; 61
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <WaitForThrottle>:

void
WaitForThrottle()
{
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	00 d0       	rcall	.+0      	; 0x208 <WaitForThrottle+0x6>
     208:	cd b7       	in	r28, 0x3d	; 61
     20a:	de b7       	in	r29, 0x3e	; 62
	unsigned int Value = 0;
     20c:	1a 82       	std	Y+2, r1	; 0x02
     20e:	19 82       	std	Y+1, r1	; 0x01
	
	do
	{
		ADCRead(ADC_CHANNEL_0, &Value);
     210:	be 01       	movw	r22, r28
     212:	6f 5f       	subi	r22, 0xFF	; 255
     214:	7f 4f       	sbci	r23, 0xFF	; 255
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	0e 94 c0 0a 	call	0x1580	; 0x1580 <ADCRead>
		
		ADCRead(ADC_CHANNEL_0, &Value);
     21c:	be 01       	movw	r22, r28
     21e:	6f 5f       	subi	r22, 0xFF	; 255
     220:	7f 4f       	sbci	r23, 0xFF	; 255
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	0e 94 c0 0a 	call	0x1580	; 0x1580 <ADCRead>
	
	} while (Value != 0 && Value != (ADC_MAX_VALUE - 1));
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	9a 81       	ldd	r25, Y+2	; 0x02
     22c:	00 97       	sbiw	r24, 0x00	; 0
     22e:	19 f0       	breq	.+6      	; 0x236 <WaitForThrottle+0x34>
     230:	8b 3f       	cpi	r24, 0xFB	; 251
     232:	93 40       	sbci	r25, 0x03	; 3
     234:	69 f7       	brne	.-38     	; 0x210 <WaitForThrottle+0xe>
}
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
     23a:	df 91       	pop	r29
     23c:	cf 91       	pop	r28
     23e:	08 95       	ret

00000240 <VerifyAckData>:
	return Status;
}

bool
VerifyAckData()
{
     240:	1f 93       	push	r17
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	00 d0       	rcall	.+0      	; 0x248 <VerifyAckData+0x8>
     248:	1f 92       	push	r1
     24a:	cd b7       	in	r28, 0x3d	; 61
     24c:	de b7       	in	r29, 0x3e	; 62
	bool Status;
	
	unsigned int RxValue = 0;
     24e:	1a 82       	std	Y+2, r1	; 0x02
     250:	19 82       	std	Y+1, r1	; 0x01
	
	PAYLOAD_LENGTH Length;
	
	//WaitForEvent(gIsDataReceived);
	
	while(!TCIsReceivePayloadAvailable());
     252:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <TCIsReceivePayloadAvailable>
     256:	88 23       	and	r24, r24
     258:	e1 f3       	breq	.-8      	; 0x252 <VerifyAckData+0x12>
	
	//
	// Get the received payload length
	//
	
	TCGetReceivedPayloadLength(&Length);
     25a:	ce 01       	movw	r24, r28
     25c:	03 96       	adiw	r24, 0x03	; 3
     25e:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <TCGetReceivedPayloadLength>
	
	if (Length.PayloadLength != sizeof(unsigned int))
     262:	8b 81       	ldd	r24, Y+3	; 0x03
     264:	8f 73       	andi	r24, 0x3F	; 63
     266:	82 30       	cpi	r24, 0x02	; 2
     268:	69 f0       	breq	.+26     	; 0x284 <VerifyAckData+0x44>
	{
		SendTrace(ERROR_LEVEL, "ConnectToCopter - Invalid Data Length\r\n");
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	91 e0       	ldi	r25, 0x01	; 1
     26e:	9f 93       	push	r25
     270:	8f 93       	push	r24
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	8f 93       	push	r24
     276:	0e 94 57 09 	call	0x12ae	; 0x12ae <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
     27a:	0f 90       	pop	r0
     27c:	0f 90       	pop	r0
     27e:	0f 90       	pop	r0
	
	if (Length.PayloadLength != sizeof(unsigned int))
	{
		SendTrace(ERROR_LEVEL, "ConnectToCopter - Invalid Data Length\r\n");
		
		Status = FALSE;
     280:	10 e0       	ldi	r17, 0x00	; 0
		
		goto Exit;
     282:	38 c0       	rjmp	.+112    	; 0x2f4 <VerifyAckData+0xb4>
	
	//
	// Now receive the data
	//
	
	Status = TCReceivePayload(&RxValue, &Length);
     284:	be 01       	movw	r22, r28
     286:	6d 5f       	subi	r22, 0xFD	; 253
     288:	7f 4f       	sbci	r23, 0xFF	; 255
     28a:	ce 01       	movw	r24, r28
     28c:	01 96       	adiw	r24, 0x01	; 1
     28e:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <TCReceivePayload>
     292:	18 2f       	mov	r17, r24
	
	if (!Status)
     294:	81 11       	cpse	r24, r1
     296:	0c c0       	rjmp	.+24     	; 0x2b0 <VerifyAckData+0x70>
	{
		SendTrace(ERROR_LEVEL, "ConnectToCopter - Receive Data Failed\r\n");
     298:	28 e2       	ldi	r18, 0x28	; 40
     29a:	31 e0       	ldi	r19, 0x01	; 1
     29c:	3f 93       	push	r19
     29e:	2f 93       	push	r18
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	8f 93       	push	r24
     2a4:	0e 94 57 09 	call	0x12ae	; 0x12ae <SendTrace>
		
		goto Exit;
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
     2ae:	22 c0       	rjmp	.+68     	; 0x2f4 <VerifyAckData+0xb4>
	}
	
	if (RxValue != ADC_MAX_VALUE + 1)
     2b0:	89 81       	ldd	r24, Y+1	; 0x01
     2b2:	9a 81       	ldd	r25, Y+2	; 0x02
     2b4:	8d 3f       	cpi	r24, 0xFD	; 253
     2b6:	93 40       	sbci	r25, 0x03	; 3
     2b8:	61 f0       	breq	.+24     	; 0x2d2 <VerifyAckData+0x92>
	{
		SendTrace(ERROR_LEVEL, "ConnectToCopter - Invalid Acknowledgment\r\n");
     2ba:	80 e5       	ldi	r24, 0x50	; 80
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	9f 93       	push	r25
     2c0:	8f 93       	push	r24
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	8f 93       	push	r24
     2c6:	f3 d7       	rcall	.+4070   	; 0x12ae <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
     2c8:	0f 90       	pop	r0
     2ca:	0f 90       	pop	r0
     2cc:	0f 90       	pop	r0
	
	if (RxValue != ADC_MAX_VALUE + 1)
	{
		SendTrace(ERROR_LEVEL, "ConnectToCopter - Invalid Acknowledgment\r\n");
		
		Status = FALSE;
     2ce:	10 e0       	ldi	r17, 0x00	; 0
		
		goto Exit;
     2d0:	11 c0       	rjmp	.+34     	; 0x2f4 <VerifyAckData+0xb4>
	}
	
	SendTrace(INFO_LEVEL, "ConnectToCopter - Ack Value = %d\r\n", RxValue);
     2d2:	83 e0       	ldi	r24, 0x03	; 3
     2d4:	8f 93       	push	r24
     2d6:	8d ef       	ldi	r24, 0xFD	; 253
     2d8:	8f 93       	push	r24
     2da:	8b e7       	ldi	r24, 0x7B	; 123
     2dc:	91 e0       	ldi	r25, 0x01	; 1
     2de:	9f 93       	push	r25
     2e0:	8f 93       	push	r24
     2e2:	84 e0       	ldi	r24, 0x04	; 4
     2e4:	8f 93       	push	r24
     2e6:	e3 d7       	rcall	.+4038   	; 0x12ae <SendTrace>
     2e8:	0f 90       	pop	r0
     2ea:	0f 90       	pop	r0
     2ec:	0f 90       	pop	r0
     2ee:	0f 90       	pop	r0
     2f0:	0f 90       	pop	r0
	
	Status = TRUE;
     2f2:	11 e0       	ldi	r17, 0x01	; 1
	
Exit:

	return Status;
}
     2f4:	81 2f       	mov	r24, r17
     2f6:	0f 90       	pop	r0
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	1f 91       	pop	r17
     302:	08 95       	ret

00000304 <ConnectToCopter>:
	} while (Value != 0 && Value != (ADC_MAX_VALUE - 1));
}

bool
ConnectToCopter()
{
     304:	1f 93       	push	r17
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
     30a:	00 d0       	rcall	.+0      	; 0x30c <ConnectToCopter+0x8>
     30c:	1f 92       	push	r1
     30e:	cd b7       	in	r28, 0x3d	; 61
     310:	de b7       	in	r29, 0x3e	; 62
	bool Status;
	
	unsigned int Value = ADC_MAX_VALUE;
     312:	8c ef       	ldi	r24, 0xFC	; 252
     314:	93 e0       	ldi	r25, 0x03	; 3
     316:	9a 83       	std	Y+2, r25	; 0x02
     318:	89 83       	std	Y+1, r24	; 0x01
	//
	
	
	Length.AsUINT8 = 0;
		
	Length.PayloadLength = sizeof(unsigned int);
     31a:	82 e0       	ldi	r24, 0x02	; 2
     31c:	8b 83       	std	Y+3, r24	; 0x03
		
	//
	// Transmit Data
	//
	
	SendTrace(ERROR_LEVEL, "ConnectToCopter - Transmit Data\r\n");
     31e:	8e e9       	ldi	r24, 0x9E	; 158
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	9f 93       	push	r25
     324:	8f 93       	push	r24
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	8f 93       	push	r24
     32a:	c1 d7       	rcall	.+3970   	; 0x12ae <SendTrace>
				
	Status = TCTransmitPayload((PVOID) &Value, &Length);
     32c:	be 01       	movw	r22, r28
     32e:	6d 5f       	subi	r22, 0xFD	; 253
     330:	7f 4f       	sbci	r23, 0xFF	; 255
     332:	ce 01       	movw	r24, r28
     334:	01 96       	adiw	r24, 0x01	; 1
     336:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <TCTransmitPayload>
     33a:	18 2f       	mov	r17, r24
		
	if (!Status)
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	0f 90       	pop	r0
     342:	81 11       	cpse	r24, r1
     344:	0b c0       	rjmp	.+22     	; 0x35c <ConnectToCopter+0x58>
	{
		SendTrace(ERROR_LEVEL, "ConnectToCopter - Transmit Data Failed\r\n");
     346:	20 ec       	ldi	r18, 0xC0	; 192
     348:	31 e0       	ldi	r19, 0x01	; 1
     34a:	3f 93       	push	r19
     34c:	2f 93       	push	r18
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	8f 93       	push	r24
     352:	ad d7       	rcall	.+3930   	; 0x12ae <SendTrace>
			
		goto Exit;
     354:	0f 90       	pop	r0
     356:	0f 90       	pop	r0
     358:	0f 90       	pop	r0
     35a:	0c c0       	rjmp	.+24     	; 0x374 <ConnectToCopter+0x70>
		
	//
	// Wait until acknowledgment data arrives
	//
	
	SendTrace(ERROR_LEVEL, "ConnectToCopter - Wait For Data\r\n");
     35c:	89 ee       	ldi	r24, 0xE9	; 233
     35e:	91 e0       	ldi	r25, 0x01	; 1
     360:	9f 93       	push	r25
     362:	8f 93       	push	r24
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	8f 93       	push	r24
     368:	a2 d7       	rcall	.+3908   	; 0x12ae <SendTrace>
	
	Status = VerifyAckData();
     36a:	6a df       	rcall	.-300    	; 0x240 <VerifyAckData>
     36c:	18 2f       	mov	r17, r24
     36e:	0f 90       	pop	r0
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
	
Exit:
	
	return Status;
}
     374:	81 2f       	mov	r24, r17
     376:	0f 90       	pop	r0
     378:	0f 90       	pop	r0
     37a:	0f 90       	pop	r0
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	1f 91       	pop	r17
     382:	08 95       	ret

00000384 <GetDirection>:
	LCDPrint(&Direction[0]);
}

bool
GetDirection(double CompassHeading, char *Direction, unsigned char Length)
{
     384:	cf 92       	push	r12
     386:	df 92       	push	r13
     388:	ef 92       	push	r14
     38a:	ff 92       	push	r15
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	6b 01       	movw	r12, r22
     392:	7c 01       	movw	r14, r24
     394:	ea 01       	movw	r28, r20
	if (Length < 3 || CompassHeading < 0 || CompassHeading > 360)
     396:	23 30       	cpi	r18, 0x03	; 3
     398:	08 f4       	brcc	.+2      	; 0x39c <GetDirection+0x18>
     39a:	de c0       	rjmp	.+444    	; 0x558 <GetDirection+0x1d4>
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	a9 01       	movw	r20, r18
     3a2:	85 d2       	rcall	.+1290   	; 0x8ae <__cmpsf2>
     3a4:	88 23       	and	r24, r24
     3a6:	0c f4       	brge	.+2      	; 0x3aa <GetDirection+0x26>
     3a8:	d9 c0       	rjmp	.+434    	; 0x55c <GetDirection+0x1d8>
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	44 eb       	ldi	r20, 0xB4	; 180
     3b0:	53 e4       	ldi	r21, 0x43	; 67
     3b2:	c7 01       	movw	r24, r14
     3b4:	b6 01       	movw	r22, r12
     3b6:	a3 d2       	rcall	.+1350   	; 0x8fe <__gesf2>
     3b8:	18 16       	cp	r1, r24
     3ba:	0c f4       	brge	.+2      	; 0x3be <GetDirection+0x3a>
     3bc:	d1 c0       	rjmp	.+418    	; 0x560 <GetDirection+0x1dc>
	{
		return FALSE;
	}
	
	if (CompassHeading >= 0 && CompassHeading <= 15)
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	a9 01       	movw	r20, r18
     3c4:	c7 01       	movw	r24, r14
     3c6:	b6 01       	movw	r22, r12
     3c8:	9a d2       	rcall	.+1332   	; 0x8fe <__gesf2>
     3ca:	88 23       	and	r24, r24
     3cc:	7c f0       	brlt	.+30     	; 0x3ec <GetDirection+0x68>
     3ce:	20 e0       	ldi	r18, 0x00	; 0
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	40 e7       	ldi	r20, 0x70	; 112
     3d4:	51 e4       	ldi	r21, 0x41	; 65
     3d6:	c7 01       	movw	r24, r14
     3d8:	b6 01       	movw	r22, r12
     3da:	69 d2       	rcall	.+1234   	; 0x8ae <__cmpsf2>
     3dc:	18 16       	cp	r1, r24
     3de:	34 f0       	brlt	.+12     	; 0x3ec <GetDirection+0x68>
	{
		strcpy(Direction, "N");
     3e0:	8e e4       	ldi	r24, 0x4E	; 78
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	99 83       	std	Y+1, r25	; 0x01
     3e6:	88 83       	st	Y, r24
	else
	{
		strcpy(Direction, "N");
	}
	
	return TRUE;
     3e8:	81 e0       	ldi	r24, 0x01	; 1
		return FALSE;
	}
	
	if (CompassHeading >= 0 && CompassHeading <= 15)
	{
		strcpy(Direction, "N");
     3ea:	bb c0       	rjmp	.+374    	; 0x562 <GetDirection+0x1de>
	}
	else if(CompassHeading > 15 && CompassHeading <= 75)
     3ec:	20 e0       	ldi	r18, 0x00	; 0
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	40 e7       	ldi	r20, 0x70	; 112
     3f2:	51 e4       	ldi	r21, 0x41	; 65
     3f4:	c7 01       	movw	r24, r14
     3f6:	b6 01       	movw	r22, r12
     3f8:	82 d2       	rcall	.+1284   	; 0x8fe <__gesf2>
     3fa:	18 16       	cp	r1, r24
     3fc:	8c f4       	brge	.+34     	; 0x420 <GetDirection+0x9c>
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	46 e9       	ldi	r20, 0x96	; 150
     404:	52 e4       	ldi	r21, 0x42	; 66
     406:	c7 01       	movw	r24, r14
     408:	b6 01       	movw	r22, r12
     40a:	51 d2       	rcall	.+1186   	; 0x8ae <__cmpsf2>
     40c:	18 16       	cp	r1, r24
     40e:	44 f0       	brlt	.+16     	; 0x420 <GetDirection+0x9c>
	{
		strcpy(Direction, "NE");
     410:	8e e4       	ldi	r24, 0x4E	; 78
     412:	95 e4       	ldi	r25, 0x45	; 69
     414:	a0 e0       	ldi	r26, 0x00	; 0
     416:	88 83       	st	Y, r24
     418:	99 83       	std	Y+1, r25	; 0x01
     41a:	aa 83       	std	Y+2, r26	; 0x02
	else
	{
		strcpy(Direction, "N");
	}
	
	return TRUE;
     41c:	81 e0       	ldi	r24, 0x01	; 1
	{
		strcpy(Direction, "N");
	}
	else if(CompassHeading > 15 && CompassHeading <= 75)
	{
		strcpy(Direction, "NE");
     41e:	a1 c0       	rjmp	.+322    	; 0x562 <GetDirection+0x1de>
	}
	else if(CompassHeading > 75 && CompassHeading <= 105)
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	46 e9       	ldi	r20, 0x96	; 150
     426:	52 e4       	ldi	r21, 0x42	; 66
     428:	c7 01       	movw	r24, r14
     42a:	b6 01       	movw	r22, r12
     42c:	68 d2       	rcall	.+1232   	; 0x8fe <__gesf2>
     42e:	18 16       	cp	r1, r24
     430:	7c f4       	brge	.+30     	; 0x450 <GetDirection+0xcc>
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	42 ed       	ldi	r20, 0xD2	; 210
     438:	52 e4       	ldi	r21, 0x42	; 66
     43a:	c7 01       	movw	r24, r14
     43c:	b6 01       	movw	r22, r12
     43e:	37 d2       	rcall	.+1134   	; 0x8ae <__cmpsf2>
     440:	18 16       	cp	r1, r24
     442:	34 f0       	brlt	.+12     	; 0x450 <GetDirection+0xcc>
	{
		strcpy(Direction, "E");
     444:	85 e4       	ldi	r24, 0x45	; 69
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	99 83       	std	Y+1, r25	; 0x01
     44a:	88 83       	st	Y, r24
	else
	{
		strcpy(Direction, "N");
	}
	
	return TRUE;
     44c:	81 e0       	ldi	r24, 0x01	; 1
	{
		strcpy(Direction, "NE");
	}
	else if(CompassHeading > 75 && CompassHeading <= 105)
	{
		strcpy(Direction, "E");
     44e:	89 c0       	rjmp	.+274    	; 0x562 <GetDirection+0x1de>
	}
	else if(CompassHeading > 105 && CompassHeading <= 165)
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	42 ed       	ldi	r20, 0xD2	; 210
     456:	52 e4       	ldi	r21, 0x42	; 66
     458:	c7 01       	movw	r24, r14
     45a:	b6 01       	movw	r22, r12
     45c:	50 d2       	rcall	.+1184   	; 0x8fe <__gesf2>
     45e:	18 16       	cp	r1, r24
     460:	8c f4       	brge	.+34     	; 0x484 <GetDirection+0x100>
     462:	20 e0       	ldi	r18, 0x00	; 0
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	45 e2       	ldi	r20, 0x25	; 37
     468:	53 e4       	ldi	r21, 0x43	; 67
     46a:	c7 01       	movw	r24, r14
     46c:	b6 01       	movw	r22, r12
     46e:	1f d2       	rcall	.+1086   	; 0x8ae <__cmpsf2>
     470:	18 16       	cp	r1, r24
     472:	44 f0       	brlt	.+16     	; 0x484 <GetDirection+0x100>
	{
		strcpy(Direction, "SE");
     474:	83 e5       	ldi	r24, 0x53	; 83
     476:	95 e4       	ldi	r25, 0x45	; 69
     478:	a0 e0       	ldi	r26, 0x00	; 0
     47a:	88 83       	st	Y, r24
     47c:	99 83       	std	Y+1, r25	; 0x01
     47e:	aa 83       	std	Y+2, r26	; 0x02
	else
	{
		strcpy(Direction, "N");
	}
	
	return TRUE;
     480:	81 e0       	ldi	r24, 0x01	; 1
	{
		strcpy(Direction, "E");
	}
	else if(CompassHeading > 105 && CompassHeading <= 165)
	{
		strcpy(Direction, "SE");
     482:	6f c0       	rjmp	.+222    	; 0x562 <GetDirection+0x1de>
	}
	else if(CompassHeading > 165 && CompassHeading <= 195)
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	45 e2       	ldi	r20, 0x25	; 37
     48a:	53 e4       	ldi	r21, 0x43	; 67
     48c:	c7 01       	movw	r24, r14
     48e:	b6 01       	movw	r22, r12
     490:	36 d2       	rcall	.+1132   	; 0x8fe <__gesf2>
     492:	18 16       	cp	r1, r24
     494:	7c f4       	brge	.+30     	; 0x4b4 <GetDirection+0x130>
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	43 e4       	ldi	r20, 0x43	; 67
     49c:	53 e4       	ldi	r21, 0x43	; 67
     49e:	c7 01       	movw	r24, r14
     4a0:	b6 01       	movw	r22, r12
     4a2:	05 d2       	rcall	.+1034   	; 0x8ae <__cmpsf2>
     4a4:	18 16       	cp	r1, r24
     4a6:	34 f0       	brlt	.+12     	; 0x4b4 <GetDirection+0x130>
	{
		strcpy(Direction, "S");
     4a8:	83 e5       	ldi	r24, 0x53	; 83
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	99 83       	std	Y+1, r25	; 0x01
     4ae:	88 83       	st	Y, r24
	else
	{
		strcpy(Direction, "N");
	}
	
	return TRUE;
     4b0:	81 e0       	ldi	r24, 0x01	; 1
	{
		strcpy(Direction, "SE");
	}
	else if(CompassHeading > 165 && CompassHeading <= 195)
	{
		strcpy(Direction, "S");
     4b2:	57 c0       	rjmp	.+174    	; 0x562 <GetDirection+0x1de>
	}
	else if(CompassHeading > 195 && CompassHeading <= 255)
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	43 e4       	ldi	r20, 0x43	; 67
     4ba:	53 e4       	ldi	r21, 0x43	; 67
     4bc:	c7 01       	movw	r24, r14
     4be:	b6 01       	movw	r22, r12
     4c0:	1e d2       	rcall	.+1084   	; 0x8fe <__gesf2>
     4c2:	18 16       	cp	r1, r24
     4c4:	8c f4       	brge	.+34     	; 0x4e8 <GetDirection+0x164>
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	4f e7       	ldi	r20, 0x7F	; 127
     4cc:	53 e4       	ldi	r21, 0x43	; 67
     4ce:	c7 01       	movw	r24, r14
     4d0:	b6 01       	movw	r22, r12
     4d2:	ed d1       	rcall	.+986    	; 0x8ae <__cmpsf2>
     4d4:	18 16       	cp	r1, r24
     4d6:	44 f0       	brlt	.+16     	; 0x4e8 <GetDirection+0x164>
	{
		strcpy(Direction, "SW");
     4d8:	83 e5       	ldi	r24, 0x53	; 83
     4da:	97 e5       	ldi	r25, 0x57	; 87
     4dc:	a0 e0       	ldi	r26, 0x00	; 0
     4de:	88 83       	st	Y, r24
     4e0:	99 83       	std	Y+1, r25	; 0x01
     4e2:	aa 83       	std	Y+2, r26	; 0x02
	else
	{
		strcpy(Direction, "N");
	}
	
	return TRUE;
     4e4:	81 e0       	ldi	r24, 0x01	; 1
	{
		strcpy(Direction, "S");
	}
	else if(CompassHeading > 195 && CompassHeading <= 255)
	{
		strcpy(Direction, "SW");
     4e6:	3d c0       	rjmp	.+122    	; 0x562 <GetDirection+0x1de>
	}
	else if(CompassHeading > 255 && CompassHeading <= 285)
     4e8:	20 e0       	ldi	r18, 0x00	; 0
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	4f e7       	ldi	r20, 0x7F	; 127
     4ee:	53 e4       	ldi	r21, 0x43	; 67
     4f0:	c7 01       	movw	r24, r14
     4f2:	b6 01       	movw	r22, r12
     4f4:	04 d2       	rcall	.+1032   	; 0x8fe <__gesf2>
     4f6:	18 16       	cp	r1, r24
     4f8:	7c f4       	brge	.+30     	; 0x518 <GetDirection+0x194>
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	30 e8       	ldi	r19, 0x80	; 128
     4fe:	4e e8       	ldi	r20, 0x8E	; 142
     500:	53 e4       	ldi	r21, 0x43	; 67
     502:	c7 01       	movw	r24, r14
     504:	b6 01       	movw	r22, r12
     506:	d3 d1       	rcall	.+934    	; 0x8ae <__cmpsf2>
     508:	18 16       	cp	r1, r24
     50a:	34 f0       	brlt	.+12     	; 0x518 <GetDirection+0x194>
	{
		strcpy(Direction, "W");
     50c:	87 e5       	ldi	r24, 0x57	; 87
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	99 83       	std	Y+1, r25	; 0x01
     512:	88 83       	st	Y, r24
	else
	{
		strcpy(Direction, "N");
	}
	
	return TRUE;
     514:	81 e0       	ldi	r24, 0x01	; 1
	{
		strcpy(Direction, "SW");
	}
	else if(CompassHeading > 255 && CompassHeading <= 285)
	{
		strcpy(Direction, "W");
     516:	25 c0       	rjmp	.+74     	; 0x562 <GetDirection+0x1de>
	}
	else if(CompassHeading > 285 && CompassHeading <= 345)
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	30 e8       	ldi	r19, 0x80	; 128
     51c:	4e e8       	ldi	r20, 0x8E	; 142
     51e:	53 e4       	ldi	r21, 0x43	; 67
     520:	c7 01       	movw	r24, r14
     522:	b6 01       	movw	r22, r12
     524:	ec d1       	rcall	.+984    	; 0x8fe <__gesf2>
     526:	18 16       	cp	r1, r24
     528:	8c f4       	brge	.+34     	; 0x54c <GetDirection+0x1c8>
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	30 e8       	ldi	r19, 0x80	; 128
     52e:	4c ea       	ldi	r20, 0xAC	; 172
     530:	53 e4       	ldi	r21, 0x43	; 67
     532:	c7 01       	movw	r24, r14
     534:	b6 01       	movw	r22, r12
     536:	bb d1       	rcall	.+886    	; 0x8ae <__cmpsf2>
     538:	18 16       	cp	r1, r24
     53a:	44 f0       	brlt	.+16     	; 0x54c <GetDirection+0x1c8>
	{
		strcpy(Direction, "NW");
     53c:	8e e4       	ldi	r24, 0x4E	; 78
     53e:	97 e5       	ldi	r25, 0x57	; 87
     540:	a0 e0       	ldi	r26, 0x00	; 0
     542:	88 83       	st	Y, r24
     544:	99 83       	std	Y+1, r25	; 0x01
     546:	aa 83       	std	Y+2, r26	; 0x02
	else
	{
		strcpy(Direction, "N");
	}
	
	return TRUE;
     548:	81 e0       	ldi	r24, 0x01	; 1
	{
		strcpy(Direction, "W");
	}
	else if(CompassHeading > 285 && CompassHeading <= 345)
	{
		strcpy(Direction, "NW");
     54a:	0b c0       	rjmp	.+22     	; 0x562 <GetDirection+0x1de>
	}
	else
	{
		strcpy(Direction, "N");
     54c:	8e e4       	ldi	r24, 0x4E	; 78
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	99 83       	std	Y+1, r25	; 0x01
     552:	88 83       	st	Y, r24
	}
	
	return TRUE;
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	05 c0       	rjmp	.+10     	; 0x562 <GetDirection+0x1de>
bool
GetDirection(double CompassHeading, char *Direction, unsigned char Length)
{
	if (Length < 3 || CompassHeading < 0 || CompassHeading > 360)
	{
		return FALSE;
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	03 c0       	rjmp	.+6      	; 0x562 <GetDirection+0x1de>
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	01 c0       	rjmp	.+2      	; 0x562 <GetDirection+0x1de>
     560:	80 e0       	ldi	r24, 0x00	; 0
	{
		strcpy(Direction, "N");
	}
	
	return TRUE;
}
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	ff 90       	pop	r15
     568:	ef 90       	pop	r14
     56a:	df 90       	pop	r13
     56c:	cf 90       	pop	r12
     56e:	08 95       	ret

00000570 <UpdateLCD>:
	}
}

void
UpdateLCD()
{
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	00 d0       	rcall	.+0      	; 0x576 <UpdateLCD+0x6>
     576:	1f 92       	push	r1
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
	char Direction[3];
	
	LCDClearDisplay();
     57c:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <LCDClearDisplay>
	
	LCDSetCursorPosition(0, 0);
     580:	60 e0       	ldi	r22, 0x00	; 0
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	0e 94 94 0b 	call	0x1728	; 0x1728 <LCDSetCursorPosition>
	
	GetDirection(gCompassHeading, &Direction[0], 3);
     588:	60 91 66 0b 	lds	r22, 0x0B66
     58c:	70 91 67 0b 	lds	r23, 0x0B67
     590:	80 91 68 0b 	lds	r24, 0x0B68
     594:	90 91 69 0b 	lds	r25, 0x0B69
     598:	23 e0       	ldi	r18, 0x03	; 3
     59a:	ae 01       	movw	r20, r28
     59c:	4f 5f       	subi	r20, 0xFF	; 255
     59e:	5f 4f       	sbci	r21, 0xFF	; 255
     5a0:	f1 de       	rcall	.-542    	; 0x384 <GetDirection>
	
	SendTrace(INFO_LEVEL, "Compass Heading = %f.\r\n", gCompassHeading);
     5a2:	80 91 69 0b 	lds	r24, 0x0B69
     5a6:	8f 93       	push	r24
     5a8:	80 91 68 0b 	lds	r24, 0x0B68
     5ac:	8f 93       	push	r24
     5ae:	80 91 67 0b 	lds	r24, 0x0B67
     5b2:	8f 93       	push	r24
     5b4:	80 91 66 0b 	lds	r24, 0x0B66
     5b8:	8f 93       	push	r24
     5ba:	8b e0       	ldi	r24, 0x0B	; 11
     5bc:	92 e0       	ldi	r25, 0x02	; 2
     5be:	9f 93       	push	r25
     5c0:	8f 93       	push	r24
     5c2:	84 e0       	ldi	r24, 0x04	; 4
     5c4:	8f 93       	push	r24
     5c6:	73 d6       	rcall	.+3302   	; 0x12ae <SendTrace>
	
	LCDPrint("Direction");
     5c8:	83 e2       	ldi	r24, 0x23	; 35
     5ca:	92 e0       	ldi	r25, 0x02	; 2
     5cc:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCDPrint>
	
	LCDSetCursorPosition(1, 0);
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	0e 94 94 0b 	call	0x1728	; 0x1728 <LCDSetCursorPosition>
	
	LCDPrint(&Direction[0]);
     5d8:	ce 01       	movw	r24, r28
     5da:	01 96       	adiw	r24, 0x01	; 1
     5dc:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCDPrint>
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	f8 94       	cli
     5e4:	de bf       	out	0x3e, r29	; 62
     5e6:	0f be       	out	0x3f, r0	; 63
     5e8:	cd bf       	out	0x3d, r28	; 61
}
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	08 95       	ret

000005f6 <FlyCopter>:
	return Status;
}

void
FlyCopter()
{
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	cd b7       	in	r28, 0x3d	; 61
     5fc:	de b7       	in	r29, 0x3e	; 62
     5fe:	a9 97       	sbiw	r28, 0x29	; 41
     600:	0f b6       	in	r0, 0x3f	; 63
     602:	f8 94       	cli
     604:	de bf       	out	0x3e, r29	; 62
     606:	0f be       	out	0x3f, r0	; 63
     608:	cd bf       	out	0x3d, r28	; 61
	
	double CompassHeadingBuffer[8];
	
	Length.AsUINT8 = 0;
	
	Length.PayloadLength = NUM_INPUT_VALUES * sizeof(unsigned int);
     60a:	88 e0       	ldi	r24, 0x08	; 8
     60c:	89 83       	std	Y+1, r24	; 0x01
	
	//
	// Input Value 3 is just padding. So set it to 0.
	//
	
	InputValue[3] = 0;
     60e:	19 86       	std	Y+9, r1	; 0x09
     610:	18 86       	std	Y+8, r1	; 0x08
		
		//
		// Read Throttle Value
		//
			
		ADCRead(ADC_CHANNEL_0, &InputValue[0]);
     612:	8e 01       	movw	r16, r28
     614:	0e 5f       	subi	r16, 0xFE	; 254
     616:	1f 4f       	sbci	r17, 0xFF	; 255
     618:	a0 2e       	mov	r10, r16
     61a:	b1 2e       	mov	r11, r17
		
		//
		// Read X-axis Value
		//
			
		ADCRead(ADC_CHANNEL_1, &InputValue[1]);
     61c:	0e 5f       	subi	r16, 0xFE	; 254
     61e:	1f 4f       	sbci	r17, 0xFF	; 255
			
			Status = TCReceivePayload(&CompassHeadingBuffer[0], &Length);
			
			if (!Status)
			{
				SendTrace(ERROR_LEVEL, "ConnectToCopter - Receive Data Failed\r\n");
     620:	0f 2e       	mov	r0, r31
     622:	f8 e2       	ldi	r31, 0x28	; 40
     624:	cf 2e       	mov	r12, r31
     626:	f1 e0       	ldi	r31, 0x01	; 1
     628:	df 2e       	mov	r13, r31
     62a:	f0 2d       	mov	r31, r0
			
			TCGetReceivedPayloadLength(&Length);
			
			if ((Length.PayloadLength % sizeof(double)) != 0)
			{
				SendTrace(ERROR_LEVEL, "ConnectToCopter - Invalid Data Length\r\n");
     62c:	0f 2e       	mov	r0, r31
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	ef 2e       	mov	r14, r31
     632:	f1 e0       	ldi	r31, 0x01	; 1
     634:	ff 2e       	mov	r15, r31
     636:	f0 2d       	mov	r31, r0
		
		//
		// Read Throttle Value
		//
			
		ADCRead(ADC_CHANNEL_0, &InputValue[0]);
     638:	6a 2d       	mov	r22, r10
     63a:	7b 2d       	mov	r23, r11
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	a0 d7       	rcall	.+3904   	; 0x1580 <ADCRead>
			
		ADCRead(ADC_CHANNEL_0, &InputValue[0]);
     640:	6a 2d       	mov	r22, r10
     642:	7b 2d       	mov	r23, r11
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	9c d7       	rcall	.+3896   	; 0x1580 <ADCRead>
		
		//
		// Read X-axis Value
		//
			
		ADCRead(ADC_CHANNEL_1, &InputValue[1]);
     648:	b8 01       	movw	r22, r16
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	99 d7       	rcall	.+3890   	; 0x1580 <ADCRead>
			
		ADCRead(ADC_CHANNEL_1, &InputValue[1]);
     64e:	b8 01       	movw	r22, r16
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	96 d7       	rcall	.+3884   	; 0x1580 <ADCRead>
			
		//
		// Read Y-axis Value
		//
			
		ADCRead(ADC_CHANNEL_2, &InputValue[2]);
     654:	be 01       	movw	r22, r28
     656:	6a 5f       	subi	r22, 0xFA	; 250
     658:	7f 4f       	sbci	r23, 0xFF	; 255
     65a:	82 e0       	ldi	r24, 0x02	; 2
     65c:	91 d7       	rcall	.+3874   	; 0x1580 <ADCRead>
			
		ADCRead(ADC_CHANNEL_2, &InputValue[2]);
     65e:	be 01       	movw	r22, r28
     660:	6a 5f       	subi	r22, 0xFA	; 250
     662:	7f 4f       	sbci	r23, 0xFF	; 255
     664:	82 e0       	ldi	r24, 0x02	; 2
     666:	8c d7       	rcall	.+3864   	; 0x1580 <ADCRead>
		
		//
		// Transmit Data
		//
		
		TCTransmitPayload((PVOID) &InputValue[0], &Length); 
     668:	be 01       	movw	r22, r28
     66a:	6f 5f       	subi	r22, 0xFF	; 255
     66c:	7f 4f       	sbci	r23, 0xFF	; 255
     66e:	8a 2d       	mov	r24, r10
     670:	9b 2d       	mov	r25, r11
     672:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <TCTransmitPayload>
		
		//
		// Check if we have got Mag and GPS data
		//
		
		if(TCIsReceivePayloadAvailable())
     676:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <TCIsReceivePayloadAvailable>
     67a:	88 23       	and	r24, r24
     67c:	e9 f2       	breq	.-70     	; 0x638 <FlyCopter+0x42>
		{
			
			TCGetReceivedPayloadLength(&Length);
     67e:	ce 01       	movw	r24, r28
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <TCGetReceivedPayloadLength>
			
			if ((Length.PayloadLength % sizeof(double)) != 0)
     686:	89 81       	ldd	r24, Y+1	; 0x01
     688:	83 70       	andi	r24, 0x03	; 3
     68a:	81 f0       	breq	.+32     	; 0x6ac <FlyCopter+0xb6>
			{
				SendTrace(ERROR_LEVEL, "ConnectToCopter - Invalid Data Length\r\n");
     68c:	ff 92       	push	r15
     68e:	ef 92       	push	r14
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	8f 93       	push	r24
     694:	0c d6       	rcall	.+3096   	; 0x12ae <SendTrace>
				
				TCReceivePayload(&CompassHeadingBuffer[0], &Length);
     696:	be 01       	movw	r22, r28
     698:	6f 5f       	subi	r22, 0xFF	; 255
     69a:	7f 4f       	sbci	r23, 0xFF	; 255
     69c:	ce 01       	movw	r24, r28
     69e:	0a 96       	adiw	r24, 0x0a	; 10
     6a0:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <TCReceivePayload>
				
				continue;
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	c6 cf       	rjmp	.-116    	; 0x638 <FlyCopter+0x42>
			
			//
			// Now receive the data
			//
			
			Status = TCReceivePayload(&CompassHeadingBuffer[0], &Length);
     6ac:	be 01       	movw	r22, r28
     6ae:	6f 5f       	subi	r22, 0xFF	; 255
     6b0:	7f 4f       	sbci	r23, 0xFF	; 255
     6b2:	ce 01       	movw	r24, r28
     6b4:	0a 96       	adiw	r24, 0x0a	; 10
     6b6:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <TCReceivePayload>
			
			if (!Status)
     6ba:	81 11       	cpse	r24, r1
     6bc:	09 c0       	rjmp	.+18     	; 0x6d0 <FlyCopter+0xda>
			{
				SendTrace(ERROR_LEVEL, "ConnectToCopter - Receive Data Failed\r\n");
     6be:	df 92       	push	r13
     6c0:	cf 92       	push	r12
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	8f 93       	push	r24
     6c6:	f3 d5       	rcall	.+3046   	; 0x12ae <SendTrace>
				
				continue;
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	b4 cf       	rjmp	.-152    	; 0x638 <FlyCopter+0x42>
			}
			
			gCompassHeading = CompassHeadingBuffer[0];
     6d0:	4a 85       	ldd	r20, Y+10	; 0x0a
     6d2:	5b 85       	ldd	r21, Y+11	; 0x0b
     6d4:	6c 85       	ldd	r22, Y+12	; 0x0c
     6d6:	7d 85       	ldd	r23, Y+13	; 0x0d
     6d8:	40 93 66 0b 	sts	0x0B66, r20
     6dc:	50 93 67 0b 	sts	0x0B67, r21
     6e0:	60 93 68 0b 	sts	0x0B68, r22
     6e4:	70 93 69 0b 	sts	0x0B69, r23
			
			UpdateLCD();
     6e8:	43 df       	rcall	.-378    	; 0x570 <UpdateLCD>
     6ea:	a6 cf       	rjmp	.-180    	; 0x638 <FlyCopter+0x42>

000006ec <main>:
bool gIsEnterPressed = FALSE;

double gCompassHeading;

int main(void)
{
     6ec:	cf 93       	push	r28
	
	//
	// First Initialize Tracing
	//
	
	InitTrace(F_CPU, ERROR_LEVEL | INFO_LEVEL);
     6ee:	45 e0       	ldi	r20, 0x05	; 5
     6f0:	60 e0       	ldi	r22, 0x00	; 0
     6f2:	72 e1       	ldi	r23, 0x12	; 18
     6f4:	8a e7       	ldi	r24, 0x7A	; 122
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	c8 d2       	rcall	.+1424   	; 0xc8a <InitTrace>
	
	SendTrace(INFO_LEVEL, "Remote Controller\r\n");
     6fa:	8d e2       	ldi	r24, 0x2D	; 45
     6fc:	92 e0       	ldi	r25, 0x02	; 2
     6fe:	9f 93       	push	r25
     700:	8f 93       	push	r24
     702:	c4 e0       	ldi	r28, 0x04	; 4
     704:	cf 93       	push	r28
     706:	d3 d5       	rcall	.+2982   	; 0x12ae <SendTrace>
	
	SendTrace(INFO_LEVEL, "-----------------\r\n");
     708:	81 e4       	ldi	r24, 0x41	; 65
     70a:	92 e0       	ldi	r25, 0x02	; 2
     70c:	9f 93       	push	r25
     70e:	8f 93       	push	r24
     710:	cf 93       	push	r28
     712:	cd d5       	rcall	.+2970   	; 0x12ae <SendTrace>
	
	//
	// Initialize Interrupts
	//
	
	InitExtInt();
     714:	0e 94 c7 10 	call	0x218e	; 0x218e <InitExtInt>
	
	//
	// Initialize TWI
	//
	
	Status = InitTWI(TWI_MASTER, NULL, NULL);
     718:	40 e0       	ldi	r20, 0x00	; 0
     71a:	50 e0       	ldi	r21, 0x00	; 0
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	f1 d0       	rcall	.+482    	; 0x906 <InitTWI>
	
	if (!Status)
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
     72c:	0f 90       	pop	r0
     72e:	0f 90       	pop	r0
     730:	81 11       	cpse	r24, r1
     732:	0b c0       	rjmp	.+22     	; 0x74a <main+0x5e>
	{
		SendTrace(ERROR_LEVEL,"main - TWI Initialization Failed\r\n");
     734:	85 e5       	ldi	r24, 0x55	; 85
     736:	92 e0       	ldi	r25, 0x02	; 2
     738:	9f 93       	push	r25
     73a:	8f 93       	push	r24
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	8f 93       	push	r24
     740:	b6 d5       	rcall	.+2924   	; 0x12ae <SendTrace>
		
		goto Exit;
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	ae c0       	rjmp	.+348    	; 0x8a6 <main+0x1ba>
	
	//
	// Initialize Display
	//
	
	Status = InitDisplay();
     74a:	d9 dc       	rcall	.-1614   	; 0xfe <InitDisplay>
	
	if (!Status)
     74c:	81 11       	cpse	r24, r1
     74e:	0b c0       	rjmp	.+22     	; 0x766 <main+0x7a>
	{
		SendTrace(ERROR_LEVEL,"main - Display Initialization Failed\r\n");
     750:	88 e7       	ldi	r24, 0x78	; 120
     752:	92 e0       	ldi	r25, 0x02	; 2
     754:	9f 93       	push	r25
     756:	8f 93       	push	r24
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	8f 93       	push	r24
     75c:	a8 d5       	rcall	.+2896   	; 0x12ae <SendTrace>
		
		goto Exit;
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	a0 c0       	rjmp	.+320    	; 0x8a6 <main+0x1ba>
	}
	
	LCDClearDisplay();
     766:	c7 d7       	rcall	.+3982   	; 0x16f6 <LCDClearDisplay>
	
	LCDSetCursorPosition(0, 0);
     768:	60 e0       	ldi	r22, 0x00	; 0
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	dd d7       	rcall	.+4026   	; 0x1728 <LCDSetCursorPosition>
	
	LCDPrint("Welcome!!");
     76e:	8f e9       	ldi	r24, 0x9F	; 159
     770:	92 e0       	ldi	r25, 0x02	; 2
     772:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCDPrint>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     776:	2f ef       	ldi	r18, 0xFF	; 255
     778:	89 e6       	ldi	r24, 0x69	; 105
     77a:	98 e1       	ldi	r25, 0x18	; 24
     77c:	21 50       	subi	r18, 0x01	; 1
     77e:	80 40       	sbci	r24, 0x00	; 0
     780:	90 40       	sbci	r25, 0x00	; 0
     782:	e1 f7       	brne	.-8      	; 0x77c <main+0x90>
     784:	00 c0       	rjmp	.+0      	; 0x786 <main+0x9a>
     786:	00 00       	nop
	
	_delay_ms(1000);
	
	LCDClearDisplay();
     788:	b6 d7       	rcall	.+3948   	; 0x16f6 <LCDClearDisplay>
	
	LCDSetCursorPosition(0, 0);
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	cc d7       	rcall	.+3992   	; 0x1728 <LCDSetCursorPosition>
	
	LCDPrint("Initializing...");
     790:	89 ea       	ldi	r24, 0xA9	; 169
     792:	92 e0       	ldi	r25, 0x02	; 2
     794:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <LCDPrint>
	
	//
	// Initialize Input Control
	//
	
	Status = InitInputControl();
     798:	d0 dc       	rcall	.-1632   	; 0x13a <InitInputControl>
	
	if (!Status)
     79a:	81 11       	cpse	r24, r1
     79c:	12 c0       	rjmp	.+36     	; 0x7c2 <main+0xd6>
	{
		SendTrace(ERROR_LEVEL, "main - Input Controller Initialization Failed\r\n");
     79e:	89 eb       	ldi	r24, 0xB9	; 185
     7a0:	92 e0       	ldi	r25, 0x02	; 2
     7a2:	9f 93       	push	r25
     7a4:	8f 93       	push	r24
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	8f 93       	push	r24
     7aa:	81 d5       	rcall	.+2818   	; 0x12ae <SendTrace>
		
		LCDClearDisplay();
     7ac:	a4 d7       	rcall	.+3912   	; 0x16f6 <LCDClearDisplay>
		
		LCDSetCursorPosition(0, 0);
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	ba d7       	rcall	.+3956   	; 0x1728 <LCDSetCursorPosition>
		
		LCDPrint("Operation Failed");
     7b4:	89 ee       	ldi	r24, 0xE9	; 233
     7b6:	92 e0       	ldi	r25, 0x02	; 2
     7b8:	fd d7       	rcall	.+4090   	; 0x17b4 <LCDPrint>
		
		goto Exit;
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
     7c0:	72 c0       	rjmp	.+228    	; 0x8a6 <main+0x1ba>
	
	//
	// Now Initialize Transmitter
	//
	
	InitTransmitter();
     7c2:	de dc       	rcall	.-1604   	; 0x180 <InitTransmitter>
		LCDPrint("Operation Failed");
		
		goto Exit;
	}
	
	SendTrace(INFO_LEVEL,"Initialization Completed\r\n");
     7c4:	8a ef       	ldi	r24, 0xFA	; 250
     7c6:	92 e0       	ldi	r25, 0x02	; 2
     7c8:	9f 93       	push	r25
     7ca:	8f 93       	push	r24
     7cc:	c4 e0       	ldi	r28, 0x04	; 4
     7ce:	cf 93       	push	r28
     7d0:	6e d5       	rcall	.+2780   	; 0x12ae <SendTrace>
	
	//
	// Now wait for the throttle to be set to low (for flying) or high (for programming)
	//
	
	LCDClearDisplay();
     7d2:	91 d7       	rcall	.+3874   	; 0x16f6 <LCDClearDisplay>
	
	LCDSetCursorPosition(0, 0);
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	a7 d7       	rcall	.+3918   	; 0x1728 <LCDSetCursorPosition>
	
	LCDPrint("Fly: Set TH Low");
     7da:	85 e1       	ldi	r24, 0x15	; 21
     7dc:	93 e0       	ldi	r25, 0x03	; 3
     7de:	ea d7       	rcall	.+4052   	; 0x17b4 <LCDPrint>
	
	LCDSetCursorPosition(1, 0);
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	a1 d7       	rcall	.+3906   	; 0x1728 <LCDSetCursorPosition>
	
	LCDPrint("Prg: Set TH High");
     7e6:	85 e2       	ldi	r24, 0x25	; 37
     7e8:	93 e0       	ldi	r25, 0x03	; 3
     7ea:	e4 d7       	rcall	.+4040   	; 0x17b4 <LCDPrint>
	
	WaitForThrottle();
     7ec:	0a dd       	rcall	.-1516   	; 0x202 <WaitForThrottle>
	
	//
	// Now wait for Enter to be pressed to connect with the Copter
	//
	
	LCDClearDisplay();
     7ee:	83 d7       	rcall	.+3846   	; 0x16f6 <LCDClearDisplay>
	
	LCDSetCursorPosition(0, 0);
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	99 d7       	rcall	.+3890   	; 0x1728 <LCDSetCursorPosition>
	
	LCDPrint("Press Enter To");
     7f6:	86 e3       	ldi	r24, 0x36	; 54
     7f8:	93 e0       	ldi	r25, 0x03	; 3
     7fa:	dc d7       	rcall	.+4024   	; 0x17b4 <LCDPrint>
	
	LCDSetCursorPosition(1, 0);
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	93 d7       	rcall	.+3878   	; 0x1728 <LCDSetCursorPosition>
	
	LCDPrint("Connect");
     802:	85 e4       	ldi	r24, 0x45	; 69
     804:	93 e0       	ldi	r25, 0x03	; 3
     806:	d6 d7       	rcall	.+4012   	; 0x17b4 <LCDPrint>
	
	SendTrace(INFO_LEVEL, "Flag = %d\r\n", gIsEnterPressed);
     808:	80 91 3c 0b 	lds	r24, 0x0B3C
     80c:	1f 92       	push	r1
     80e:	8f 93       	push	r24
     810:	8d e4       	ldi	r24, 0x4D	; 77
     812:	93 e0       	ldi	r25, 0x03	; 3
     814:	9f 93       	push	r25
     816:	8f 93       	push	r24
     818:	cf 93       	push	r28
     81a:	49 d5       	rcall	.+2706   	; 0x12ae <SendTrace>
	
	WaitForEvent(gIsEnterPressed);
     81c:	8d b7       	in	r24, 0x3d	; 61
     81e:	9e b7       	in	r25, 0x3e	; 62
     820:	08 96       	adiw	r24, 0x08	; 8
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	f8 94       	cli
     826:	9e bf       	out	0x3e, r25	; 62
     828:	0f be       	out	0x3f, r0	; 63
     82a:	8d bf       	out	0x3d, r24	; 61
     82c:	80 91 3c 0b 	lds	r24, 0x0B3C
     830:	81 11       	cpse	r24, r1
     832:	0a c0       	rjmp	.+20     	; 0x848 <main+0x15c>
     834:	8f e1       	ldi	r24, 0x1F	; 31
     836:	9e e4       	ldi	r25, 0x4E	; 78
     838:	01 97       	sbiw	r24, 0x01	; 1
     83a:	f1 f7       	brne	.-4      	; 0x838 <main+0x14c>
     83c:	00 c0       	rjmp	.+0      	; 0x83e <main+0x152>
     83e:	00 00       	nop
     840:	80 91 3c 0b 	lds	r24, 0x0B3C
     844:	88 23       	and	r24, r24
     846:	b1 f3       	breq	.-20     	; 0x834 <main+0x148>
     848:	10 92 3c 0b 	sts	0x0B3C, r1
	
	//
	// Now connect to Copter
	//
	
	LCDClearDisplay();
     84c:	54 d7       	rcall	.+3752   	; 0x16f6 <LCDClearDisplay>
	
	LCDSetCursorPosition(0, 0);
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	6a d7       	rcall	.+3796   	; 0x1728 <LCDSetCursorPosition>
	
	LCDPrint("Connecting...");
     854:	89 e5       	ldi	r24, 0x59	; 89
     856:	93 e0       	ldi	r25, 0x03	; 3
     858:	ad d7       	rcall	.+3930   	; 0x17b4 <LCDPrint>
	
	Status = ConnectToCopter();
     85a:	54 dd       	rcall	.-1368   	; 0x304 <ConnectToCopter>
	
	if (!Status)
     85c:	81 11       	cpse	r24, r1
     85e:	12 c0       	rjmp	.+36     	; 0x884 <main+0x198>
	{
		SendTrace(ERROR_LEVEL, "main - Failed to Connect\r\n");
     860:	87 e6       	ldi	r24, 0x67	; 103
     862:	93 e0       	ldi	r25, 0x03	; 3
     864:	9f 93       	push	r25
     866:	8f 93       	push	r24
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	8f 93       	push	r24
     86c:	20 d5       	rcall	.+2624   	; 0x12ae <SendTrace>
		
		LCDClearDisplay();
     86e:	43 d7       	rcall	.+3718   	; 0x16f6 <LCDClearDisplay>
		
		LCDSetCursorPosition(0, 0);
     870:	60 e0       	ldi	r22, 0x00	; 0
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	59 d7       	rcall	.+3762   	; 0x1728 <LCDSetCursorPosition>
		
		LCDPrint("Operation Failed");
     876:	89 ee       	ldi	r24, 0xE9	; 233
     878:	92 e0       	ldi	r25, 0x02	; 2
     87a:	9c d7       	rcall	.+3896   	; 0x17b4 <LCDPrint>
		
		goto Exit;
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	0f 90       	pop	r0
     882:	11 c0       	rjmp	.+34     	; 0x8a6 <main+0x1ba>
     884:	9f ef       	ldi	r25, 0xFF	; 255
     886:	29 e6       	ldi	r18, 0x69	; 105
     888:	88 e1       	ldi	r24, 0x18	; 24
     88a:	91 50       	subi	r25, 0x01	; 1
     88c:	20 40       	sbci	r18, 0x00	; 0
     88e:	80 40       	sbci	r24, 0x00	; 0
     890:	e1 f7       	brne	.-8      	; 0x88a <main+0x19e>
     892:	00 c0       	rjmp	.+0      	; 0x894 <main+0x1a8>
     894:	00 00       	nop
	// Now fly copter
	//
    
	_delay_ms(1000);
	
	LCDClearDisplay();
     896:	2f d7       	rcall	.+3678   	; 0x16f6 <LCDClearDisplay>
	
	LCDSetCursorPosition(0, 0);
     898:	60 e0       	ldi	r22, 0x00	; 0
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	45 d7       	rcall	.+3722   	; 0x1728 <LCDSetCursorPosition>
	
	LCDPrint("Connected");
     89e:	82 e8       	ldi	r24, 0x82	; 130
     8a0:	93 e0       	ldi	r25, 0x03	; 3
     8a2:	88 d7       	rcall	.+3856   	; 0x17b4 <LCDPrint>
	
	FlyCopter();     
     8a4:	a8 de       	rcall	.-688    	; 0x5f6 <FlyCopter>
	Status = TRUE;
	
Exit:

	return Status;
}
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	cf 91       	pop	r28
     8ac:	08 95       	ret

000008ae <__cmpsf2>:
     8ae:	03 d0       	rcall	.+6      	; 0x8b6 <__fp_cmp>
     8b0:	08 f4       	brcc	.+2      	; 0x8b4 <__cmpsf2+0x6>
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	08 95       	ret

000008b6 <__fp_cmp>:
     8b6:	99 0f       	add	r25, r25
     8b8:	00 08       	sbc	r0, r0
     8ba:	55 0f       	add	r21, r21
     8bc:	aa 0b       	sbc	r26, r26
     8be:	e0 e8       	ldi	r30, 0x80	; 128
     8c0:	fe ef       	ldi	r31, 0xFE	; 254
     8c2:	16 16       	cp	r1, r22
     8c4:	17 06       	cpc	r1, r23
     8c6:	e8 07       	cpc	r30, r24
     8c8:	f9 07       	cpc	r31, r25
     8ca:	c0 f0       	brcs	.+48     	; 0x8fc <__fp_cmp+0x46>
     8cc:	12 16       	cp	r1, r18
     8ce:	13 06       	cpc	r1, r19
     8d0:	e4 07       	cpc	r30, r20
     8d2:	f5 07       	cpc	r31, r21
     8d4:	98 f0       	brcs	.+38     	; 0x8fc <__fp_cmp+0x46>
     8d6:	62 1b       	sub	r22, r18
     8d8:	73 0b       	sbc	r23, r19
     8da:	84 0b       	sbc	r24, r20
     8dc:	95 0b       	sbc	r25, r21
     8de:	39 f4       	brne	.+14     	; 0x8ee <__fp_cmp+0x38>
     8e0:	0a 26       	eor	r0, r26
     8e2:	61 f0       	breq	.+24     	; 0x8fc <__fp_cmp+0x46>
     8e4:	23 2b       	or	r18, r19
     8e6:	24 2b       	or	r18, r20
     8e8:	25 2b       	or	r18, r21
     8ea:	21 f4       	brne	.+8      	; 0x8f4 <__fp_cmp+0x3e>
     8ec:	08 95       	ret
     8ee:	0a 26       	eor	r0, r26
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <__fp_cmp+0x3e>
     8f2:	a1 40       	sbci	r26, 0x01	; 1
     8f4:	a6 95       	lsr	r26
     8f6:	8f ef       	ldi	r24, 0xFF	; 255
     8f8:	81 1d       	adc	r24, r1
     8fa:	81 1d       	adc	r24, r1
     8fc:	08 95       	ret

000008fe <__gesf2>:
     8fe:	db df       	rcall	.-74     	; 0x8b6 <__fp_cmp>
     900:	08 f4       	brcc	.+2      	; 0x904 <__gesf2+0x6>
     902:	8f ef       	ldi	r24, 0xFF	; 255
     904:	08 95       	ret

00000906 <InitTWI>:
bool
InitTWI(TWI_MODE Mode, PTWI_ADDRESS Address, PTWI_ADDRESS_MASK AddressMask)
{	
	bool Status = TRUE;
	
	if (Mode == TWI_SLAVE)
     906:	81 11       	cpse	r24, r1
     908:	20 c0       	rjmp	.+64     	; 0x94a <InitTWI+0x44>
	{
		if (Address != NULL && AddressMask != NULL)
     90a:	61 15       	cp	r22, r1
     90c:	71 05       	cpc	r23, r1
     90e:	89 f0       	breq	.+34     	; 0x932 <InitTWI+0x2c>
     910:	41 15       	cp	r20, r1
     912:	51 05       	cpc	r21, r1
     914:	71 f0       	breq	.+28     	; 0x932 <InitTWI+0x2c>
		{
			//
			// Set Slave Address and Mask
			//
				
			TWAR = Address->AsUINT8;
     916:	fb 01       	movw	r30, r22
     918:	80 81       	ld	r24, Z
     91a:	80 93 ba 00 	sts	0x00BA, r24
				
			TWAMR = AddressMask->AsUINT8;
     91e:	fa 01       	movw	r30, r20
     920:	80 81       	ld	r24, Z
     922:	80 93 bd 00 	sts	0x00BD, r24
			
			//
			// Set Data and Clock to IN
			//
			
			DDRC &= ~((0x1 << PORTC0) | (0x1 << PORTC1));
     926:	87 b1       	in	r24, 0x07	; 7
     928:	8c 7f       	andi	r24, 0xFC	; 252
     92a:	87 b9       	out	0x07, r24	; 7
			
			gMode = TWI_SLAVE;
     92c:	10 92 6a 0b 	sts	0x0B6A, r1
     930:	12 c0       	rjmp	.+36     	; 0x956 <InitTWI+0x50>
		}
		else
		{
			SendTrace(ERROR_LEVEL, "InitTWI - Invalid Parameters\r\n");
     932:	8c e8       	ldi	r24, 0x8C	; 140
     934:	93 e0       	ldi	r25, 0x03	; 3
     936:	9f 93       	push	r25
     938:	8f 93       	push	r24
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	8f 93       	push	r24
     93e:	b7 d4       	rcall	.+2414   	; 0x12ae <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
     940:	0f 90       	pop	r0
     942:	0f 90       	pop	r0
     944:	0f 90       	pop	r0
		}
		else
		{
			SendTrace(ERROR_LEVEL, "InitTWI - Invalid Parameters\r\n");
			
			Status = FALSE;
     946:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
     948:	08 95       	ret
		}
	}
	else
	{
		gMode = TWI_MASTER;
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	80 93 6a 0b 	sts	0x0B6A, r24
		
		//
		// Set Data and Clock to Out
		//
		
		DDRC |= ((0x1 << PORTC0) | (0x1 << PORTC1));
     950:	87 b1       	in	r24, 0x07	; 7
     952:	83 60       	ori	r24, 0x03	; 3
     954:	87 b9       	out	0x07, r24	; 7
	//
	// Set TWI Bit Rate Register to 8 so that
	// SCL is set to 100 KHz.
	//

	TWBR = BIT_RATE_VALUE;
     956:	80 e2       	ldi	r24, 0x20	; 32
     958:	80 93 b8 00 	sts	0x00B8, r24
	
	//
	// Set Pre-scalar value to 1
	//

	TWSR = 0;
     95c:	10 92 b9 00 	sts	0x00B9, r1
	
	//
	// Set TWI Control Register
	//
	
	TWCR = (0x1 << TWEN) | (0x1 << TWEA);
     960:	84 e4       	ldi	r24, 0x44	; 68
     962:	80 93 bc 00 	sts	0x00BC, r24
     966:	ff ef       	ldi	r31, 0xFF	; 255
     968:	20 e7       	ldi	r18, 0x70	; 112
     96a:	82 e0       	ldi	r24, 0x02	; 2
     96c:	f1 50       	subi	r31, 0x01	; 1
     96e:	20 40       	sbci	r18, 0x00	; 0
     970:	80 40       	sbci	r24, 0x00	; 0
     972:	e1 f7       	brne	.-8      	; 0x96c <InitTWI+0x66>
     974:	00 c0       	rjmp	.+0      	; 0x976 <InitTWI+0x70>
     976:	00 00       	nop
	// Wait for 100 ms for bus to settle down
	//
	
	_delay_ms(100);
	
	gIsRepeatedStart = FALSE;
     978:	10 92 3d 0b 	sts	0x0B3D, r1
	
	gIsTWIInitialized = TRUE;
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	80 93 3e 0b 	sts	0x0B3E, r24

Exit:

	return Status;
}
     982:	08 95       	ret

00000984 <SendStartCondition>:
	
	//
	// Send Start Condition
	//
	
	ENABLE_START();
     984:	ec eb       	ldi	r30, 0xBC	; 188
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	80 81       	ld	r24, Z
     98a:	8f 75       	andi	r24, 0x5F	; 95
     98c:	80 62       	ori	r24, 0x20	; 32
     98e:	80 83       	st	Z, r24
	
	WAIT_FOR_OP_COMPLETION();
     990:	80 81       	ld	r24, Z
     992:	80 68       	ori	r24, 0x80	; 128
     994:	80 83       	st	Z, r24
     996:	80 81       	ld	r24, Z
     998:	88 23       	and	r24, r24
     99a:	ec f7       	brge	.-6      	; 0x996 <SendStartCondition+0x12>
	
	DISABLE_START();
     99c:	ec eb       	ldi	r30, 0xBC	; 188
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	80 81       	ld	r24, Z
     9a2:	8f 75       	andi	r24, 0x5F	; 95
     9a4:	80 83       	st	Z, r24
	
	if (gIsRepeatedStart)
     9a6:	80 91 3d 0b 	lds	r24, 0x0B3D
     9aa:	88 23       	and	r24, r24
     9ac:	41 f0       	breq	.+16     	; 0x9be <SendStartCondition+0x3a>
	{
		Status = ProcessTwiStatus(REPEATED_START_TRANSMITTED);
     9ae:	90 91 b9 00 	lds	r25, 0x00B9
     9b2:	98 7f       	andi	r25, 0xF8	; 248
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	90 31       	cpi	r25, 0x10	; 16
     9b8:	49 f0       	breq	.+18     	; 0x9cc <SendStartCondition+0x48>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	08 95       	ret
	}
	else
	{
		Status = ProcessTwiStatus(START_TRANSMITTED);
     9be:	90 91 b9 00 	lds	r25, 0x00B9
     9c2:	98 7f       	andi	r25, 0xF8	; 248
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	98 30       	cpi	r25, 0x08	; 8
     9c8:	09 f0       	breq	.+2      	; 0x9cc <SendStartCondition+0x48>
     9ca:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return Status;
}
     9cc:	08 95       	ret

000009ce <SendStopCondition>:

void
SendStopCondition()
{	
	ENABLE_STOP();
     9ce:	ec eb       	ldi	r30, 0xBC	; 188
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	80 81       	ld	r24, Z
     9d4:	8f 76       	andi	r24, 0x6F	; 111
     9d6:	80 61       	ori	r24, 0x10	; 16
     9d8:	80 83       	st	Z, r24
	
	//
	// Send the Stop condition by clearing the TWINT flag
	//
	
	TWCR |= (1 << TWINT);
     9da:	80 81       	ld	r24, Z
     9dc:	80 68       	ori	r24, 0x80	; 128
     9de:	80 83       	st	Z, r24
	//
	// TWINT is not set after stop condition.
	// Instead TWSTO bit in TWCR is cleared.
	//
	
	while (!(TWCR & (0x1 << TWSTO)));
     9e0:	80 81       	ld	r24, Z
     9e2:	84 ff       	sbrs	r24, 4
     9e4:	fd cf       	rjmp	.-6      	; 0x9e0 <SendStopCondition+0x12>
}
     9e6:	08 95       	ret

000009e8 <Transmit>:

bool
Transmit(PVOID Buffer, unsigned long Length)
{
     9e8:	8f 92       	push	r8
     9ea:	9f 92       	push	r9
     9ec:	af 92       	push	r10
     9ee:	bf 92       	push	r11
     9f0:	df 92       	push	r13
     9f2:	ef 92       	push	r14
     9f4:	ff 92       	push	r15
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
	
	unsigned char *BytePtr;
	
	TWI_STATUS TransmitStatus;
	
	if (gMode == TWI_MASTER)
     9fe:	20 91 6a 0b 	lds	r18, 0x0B6A
     a02:	21 30       	cpi	r18, 0x01	; 1
     a04:	29 f4       	brne	.+10     	; 0xa10 <Transmit+0x28>
	{
		TransmitStatus = DATA_TRANSMITTED_ACK;
     a06:	0f 2e       	mov	r0, r31
     a08:	f8 e2       	ldi	r31, 0x28	; 40
     a0a:	df 2e       	mov	r13, r31
     a0c:	f0 2d       	mov	r31, r0
     a0e:	04 c0       	rjmp	.+8      	; 0xa18 <Transmit+0x30>
	}
	else
	{
		TransmitStatus = SLA_R_DATA_TRANSMITTED_ACK;
     a10:	0f 2e       	mov	r0, r31
     a12:	f8 eb       	ldi	r31, 0xB8	; 184
     a14:	df 2e       	mov	r13, r31
     a16:	f0 2d       	mov	r31, r0
	// Now transmit the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
     a18:	4a 01       	movw	r8, r20
     a1a:	5b 01       	movw	r10, r22
     a1c:	21 e0       	ldi	r18, 0x01	; 1
     a1e:	82 1a       	sub	r8, r18
     a20:	91 08       	sbc	r9, r1
     a22:	a1 08       	sbc	r10, r1
     a24:	b1 08       	sbc	r11, r1
     a26:	81 14       	cp	r8, r1
     a28:	91 04       	cpc	r9, r1
     a2a:	a1 04       	cpc	r10, r1
     a2c:	b1 04       	cpc	r11, r1
     a2e:	e1 f1       	breq	.+120    	; 0xaa8 <Transmit+0xc0>
     a30:	dc 01       	movw	r26, r24
     a32:	00 e0       	ldi	r16, 0x00	; 0
     a34:	10 e0       	ldi	r17, 0x00	; 0
     a36:	98 01       	movw	r18, r16
	{
		TWDR = *BytePtr;
     a38:	4b eb       	ldi	r20, 0xBB	; 187
     a3a:	50 e0       	ldi	r21, 0x00	; 0
		
		WAIT_FOR_OP_COMPLETION();
     a3c:	ec eb       	ldi	r30, 0xBC	; 188
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
		
		if (!ProcessTwiStatus(TransmitStatus))
     a40:	0f 2e       	mov	r0, r31
     a42:	f9 eb       	ldi	r31, 0xB9	; 185
     a44:	ef 2e       	mov	r14, r31
     a46:	f1 2c       	mov	r15, r1
     a48:	f0 2d       	mov	r31, r0
     a4a:	6d 2d       	mov	r22, r13
     a4c:	70 e0       	ldi	r23, 0x00	; 0
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
	{
		TWDR = *BytePtr;
     a4e:	8d 91       	ld	r24, X+
     a50:	ea 01       	movw	r28, r20
     a52:	88 83       	st	Y, r24
		
		WAIT_FOR_OP_COMPLETION();
     a54:	80 81       	ld	r24, Z
     a56:	80 68       	ori	r24, 0x80	; 128
     a58:	80 83       	st	Z, r24
     a5a:	80 81       	ld	r24, Z
     a5c:	88 23       	and	r24, r24
     a5e:	ec f7       	brge	.-6      	; 0xa5a <Transmit+0x72>
		
		if (!ProcessTwiStatus(TransmitStatus))
     a60:	e7 01       	movw	r28, r14
     a62:	88 81       	ld	r24, Y
     a64:	88 7f       	andi	r24, 0xF8	; 248
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	86 17       	cp	r24, r22
     a6a:	97 07       	cpc	r25, r23
     a6c:	99 f0       	breq	.+38     	; 0xa94 <Transmit+0xac>
		{
			SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     a6e:	80 91 b9 00 	lds	r24, 0x00B9
     a72:	88 7f       	andi	r24, 0xF8	; 248
     a74:	1f 92       	push	r1
     a76:	8f 93       	push	r24
     a78:	8b ea       	ldi	r24, 0xAB	; 171
     a7a:	93 e0       	ldi	r25, 0x03	; 3
     a7c:	9f 93       	push	r25
     a7e:	8f 93       	push	r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	8f 93       	push	r24
     a84:	14 d4       	rcall	.+2088   	; 0x12ae <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
     a86:	0f 90       	pop	r0
     a88:	0f 90       	pop	r0
     a8a:	0f 90       	pop	r0
     a8c:	0f 90       	pop	r0
     a8e:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(TransmitStatus))
		{
			SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
			
			Status = FALSE;
     a90:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
     a92:	3b c0       	rjmp	.+118    	; 0xb0a <Transmit+0x122>
		}
		
		BytePtr++;
     a94:	cd 01       	movw	r24, r26
	// Now transmit the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
     a96:	0f 5f       	subi	r16, 0xFF	; 255
     a98:	1f 4f       	sbci	r17, 0xFF	; 255
     a9a:	2f 4f       	sbci	r18, 0xFF	; 255
     a9c:	3f 4f       	sbci	r19, 0xFF	; 255
     a9e:	08 15       	cp	r16, r8
     aa0:	19 05       	cpc	r17, r9
     aa2:	2a 05       	cpc	r18, r10
     aa4:	3b 05       	cpc	r19, r11
     aa6:	98 f2       	brcs	.-90     	; 0xa4e <Transmit+0x66>
	
	//
	// In slave mode after transmitting the last byte we will get a NACK from the Master
	//
	
	if (gMode == TWI_SLAVE)
     aa8:	20 91 6a 0b 	lds	r18, 0x0B6A
     aac:	21 11       	cpse	r18, r1
     aae:	04 c0       	rjmp	.+8      	; 0xab8 <Transmit+0xd0>
	{
		TransmitStatus = SLA_R_DATA_TRANSMITTED_NACK;
     ab0:	0f 2e       	mov	r0, r31
     ab2:	f0 ec       	ldi	r31, 0xC0	; 192
     ab4:	df 2e       	mov	r13, r31
     ab6:	f0 2d       	mov	r31, r0
	}
	
	TWDR = *BytePtr;
     ab8:	fc 01       	movw	r30, r24
     aba:	80 81       	ld	r24, Z
     abc:	80 93 bb 00 	sts	0x00BB, r24
	
	WAIT_FOR_OP_COMPLETION();
     ac0:	ec eb       	ldi	r30, 0xBC	; 188
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	80 81       	ld	r24, Z
     ac6:	80 68       	ori	r24, 0x80	; 128
     ac8:	80 83       	st	Z, r24
     aca:	80 81       	ld	r24, Z
     acc:	88 23       	and	r24, r24
     ace:	ec f7       	brge	.-6      	; 0xaca <Transmit+0xe2>
	
	if (!ProcessTwiStatus(TransmitStatus))
     ad0:	20 91 b9 00 	lds	r18, 0x00B9
     ad4:	28 7f       	andi	r18, 0xF8	; 248
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	8d 2d       	mov	r24, r13
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	28 17       	cp	r18, r24
     ade:	39 07       	cpc	r19, r25
     ae0:	99 f0       	breq	.+38     	; 0xb08 <Transmit+0x120>
	{
		SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     ae2:	80 91 b9 00 	lds	r24, 0x00B9
     ae6:	88 7f       	andi	r24, 0xF8	; 248
     ae8:	1f 92       	push	r1
     aea:	8f 93       	push	r24
     aec:	8b ea       	ldi	r24, 0xAB	; 171
     aee:	93 e0       	ldi	r25, 0x03	; 3
     af0:	9f 93       	push	r25
     af2:	8f 93       	push	r24
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	8f 93       	push	r24
     af8:	da d3       	rcall	.+1972   	; 0x12ae <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	0f 90       	pop	r0
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
	
	if (!ProcessTwiStatus(TransmitStatus))
	{
		SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     b04:	80 e0       	ldi	r24, 0x00	; 0
		
		goto Exit;
     b06:	01 c0       	rjmp	.+2      	; 0xb0a <Transmit+0x122>
}

bool
Transmit(PVOID Buffer, unsigned long Length)
{
	bool Status = TRUE;
     b08:	81 e0       	ldi	r24, 0x01	; 1
	}
	
Exit:

	return Status;	
}
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	ff 90       	pop	r15
     b14:	ef 90       	pop	r14
     b16:	df 90       	pop	r13
     b18:	bf 90       	pop	r11
     b1a:	af 90       	pop	r10
     b1c:	9f 90       	pop	r9
     b1e:	8f 90       	pop	r8
     b20:	08 95       	ret

00000b22 <TwiMasterTransmit>:
bool
TwiMasterTransmit(PVOID Buffer, 
				  unsigned long Length, 
				  PTWI_ADDRESS Address,
				  bool SendStop)
{
     b22:	af 92       	push	r10
     b24:	bf 92       	push	r11
     b26:	cf 92       	push	r12
     b28:	df 92       	push	r13
     b2a:	ef 92       	push	r14
     b2c:	ff 92       	push	r15
     b2e:	0f 93       	push	r16
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	5c 01       	movw	r10, r24
     b36:	6a 01       	movw	r12, r20
     b38:	7b 01       	movw	r14, r22
     b3a:	e9 01       	movw	r28, r18
	bool Status = TRUE;
	
	if (!SendStartCondition())
     b3c:	23 df       	rcall	.-442    	; 0x984 <SendStartCondition>
     b3e:	81 11       	cpse	r24, r1
     b40:	13 c0       	rjmp	.+38     	; 0xb68 <TwiMasterTransmit+0x46>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     b42:	80 91 b9 00 	lds	r24, 0x00B9
     b46:	88 7f       	andi	r24, 0xF8	; 248
     b48:	1f 92       	push	r1
     b4a:	8f 93       	push	r24
     b4c:	81 ee       	ldi	r24, 0xE1	; 225
     b4e:	93 e0       	ldi	r25, 0x03	; 3
     b50:	9f 93       	push	r25
     b52:	8f 93       	push	r24
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	8f 93       	push	r24
     b58:	aa d3       	rcall	.+1876   	; 0x12ae <SendTrace>
		
		Status = FALSE;
			
		goto Exit;
     b5a:	0f 90       	pop	r0
     b5c:	0f 90       	pop	r0
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
	
	if (!SendStartCondition())
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     b64:	c0 e0       	ldi	r28, 0x00	; 0
			
		goto Exit;
     b66:	33 c0       	rjmp	.+102    	; 0xbce <TwiMasterTransmit+0xac>
	}
	
	gIsRepeatedStart = FALSE;
     b68:	10 92 3d 0b 	sts	0x0B3D, r1
	//
	// Set Address->ReadWrite = 0 indicating a write operation.
	// Then transmit SLA+W
	//
	
	Address->RW_EnGenCall = 0;
     b6c:	88 81       	ld	r24, Y
     b6e:	8e 7f       	andi	r24, 0xFE	; 254
     b70:	88 83       	st	Y, r24
	
	TWDR = Address->AsUINT8;
     b72:	80 93 bb 00 	sts	0x00BB, r24
		
	WAIT_FOR_OP_COMPLETION();
     b76:	ec eb       	ldi	r30, 0xBC	; 188
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	80 68       	ori	r24, 0x80	; 128
     b7e:	80 83       	st	Z, r24
     b80:	80 81       	ld	r24, Z
     b82:	88 23       	and	r24, r24
     b84:	ec f7       	brge	.-6      	; 0xb80 <TwiMasterTransmit+0x5e>
		
	if (!ProcessTwiStatus(SLA_W_TRANSMITTED_ACK))
     b86:	80 91 b9 00 	lds	r24, 0x00B9
     b8a:	88 7f       	andi	r24, 0xF8	; 248
     b8c:	88 31       	cpi	r24, 0x18	; 24
     b8e:	99 f0       	breq	.+38     	; 0xbb6 <TwiMasterTransmit+0x94>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Slave Address and Write Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     b90:	80 91 b9 00 	lds	r24, 0x00B9
     b94:	88 7f       	andi	r24, 0xF8	; 248
     b96:	1f 92       	push	r1
     b98:	8f 93       	push	r24
     b9a:	8b e2       	ldi	r24, 0x2B	; 43
     b9c:	94 e0       	ldi	r25, 0x04	; 4
     b9e:	9f 93       	push	r25
     ba0:	8f 93       	push	r24
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	8f 93       	push	r24
     ba6:	83 d3       	rcall	.+1798   	; 0x12ae <SendTrace>
		
		Status = FALSE;
			
		goto Exit;
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
		
	if (!ProcessTwiStatus(SLA_W_TRANSMITTED_ACK))
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Slave Address and Write Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     bb2:	c0 e0       	ldi	r28, 0x00	; 0
			
		goto Exit;
     bb4:	0c c0       	rjmp	.+24     	; 0xbce <TwiMasterTransmit+0xac>
	}
	
	Status = Transmit(Buffer, Length);
     bb6:	b7 01       	movw	r22, r14
     bb8:	a6 01       	movw	r20, r12
     bba:	c5 01       	movw	r24, r10
     bbc:	15 df       	rcall	.-470    	; 0x9e8 <Transmit>
     bbe:	c8 2f       	mov	r28, r24
	
	//
	// Send stop condition
	//
	
	if (SendStop)
     bc0:	00 23       	and	r16, r16
     bc2:	11 f0       	breq	.+4      	; 0xbc8 <TwiMasterTransmit+0xa6>
	{
		SendStopCondition();
     bc4:	04 df       	rcall	.-504    	; 0x9ce <SendStopCondition>
     bc6:	03 c0       	rjmp	.+6      	; 0xbce <TwiMasterTransmit+0xac>
	}
	else
	{
		gIsRepeatedStart = TRUE;
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	80 93 3d 0b 	sts	0x0B3D, r24
	}
	
Exit:

	return Status;
}
     bce:	8c 2f       	mov	r24, r28
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	0f 91       	pop	r16
     bd6:	ff 90       	pop	r15
     bd8:	ef 90       	pop	r14
     bda:	df 90       	pop	r13
     bdc:	cf 90       	pop	r12
     bde:	bf 90       	pop	r11
     be0:	af 90       	pop	r10
     be2:	08 95       	ret

00000be4 <TwiTransmit>:
bool 
TwiTransmit(PVOID Buffer, 
			unsigned long Length,
			PTWI_ADDRESS Address,
			bool SendStop)
{
     be4:	0f 93       	push	r16
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
     be6:	e0 91 3e 0b 	lds	r30, 0x0B3E
     bea:	ee 23       	and	r30, r30
     bec:	09 f4       	brne	.+2      	; 0xbf0 <TwiTransmit+0xc>
     bee:	48 c0       	rjmp	.+144    	; 0xc80 <TwiTransmit+0x9c>
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <TwiTransmit+0x12>
     bf4:	47 c0       	rjmp	.+142    	; 0xc84 <TwiTransmit+0xa0>
		Status = FALSE;
		
		goto Exit;
	}
	
	if (gMode == TWI_MASTER)
     bf6:	e0 91 6a 0b 	lds	r30, 0x0B6A
     bfa:	e1 30       	cpi	r30, 0x01	; 1
     bfc:	89 f4       	brne	.+34     	; 0xc20 <TwiTransmit+0x3c>
	{
		if (Address == NULL)
     bfe:	21 15       	cp	r18, r1
     c00:	31 05       	cpc	r19, r1
     c02:	61 f4       	brne	.+24     	; 0xc1c <TwiTransmit+0x38>
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Invalid Parameters\r\n");
     c04:	82 e8       	ldi	r24, 0x82	; 130
     c06:	94 e0       	ldi	r25, 0x04	; 4
     c08:	9f 93       	push	r25
     c0a:	8f 93       	push	r24
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	8f 93       	push	r24
     c10:	4e d3       	rcall	.+1692   	; 0x12ae <SendTrace>
			
			Status = FALSE;
		
			goto Exit;
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
	{
		if (Address == NULL)
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Invalid Parameters\r\n");
			
			Status = FALSE;
     c18:	80 e0       	ldi	r24, 0x00	; 0
		
			goto Exit;
     c1a:	35 c0       	rjmp	.+106    	; 0xc86 <TwiTransmit+0xa2>
		}
		else
		{
			Status = TwiMasterTransmit(Buffer, Length, Address, SendStop);	
     c1c:	82 df       	rcall	.-252    	; 0xb22 <TwiMasterTransmit>
     c1e:	33 c0       	rjmp	.+102    	; 0xc86 <TwiTransmit+0xa2>
		}
	}
	else
	{
		WAIT_FOR_OP_COMPLETION();
     c20:	ec eb       	ldi	r30, 0xBC	; 188
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	20 81       	ld	r18, Z
     c26:	20 68       	ori	r18, 0x80	; 128
     c28:	20 83       	st	Z, r18
     c2a:	20 81       	ld	r18, Z
     c2c:	22 23       	and	r18, r18
     c2e:	ec f7       	brge	.-6      	; 0xc2a <TwiTransmit+0x46>
		
		if (ProcessTwiStatus(STOP_REPEATED_START_RECEIVED))
     c30:	20 91 b9 00 	lds	r18, 0x00B9
     c34:	28 7f       	andi	r18, 0xF8	; 248
     c36:	20 3a       	cpi	r18, 0xA0	; 160
     c38:	41 f4       	brne	.+16     	; 0xc4a <TwiTransmit+0x66>
		{
			WAIT_FOR_OP_COMPLETION();	
     c3a:	ec eb       	ldi	r30, 0xBC	; 188
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	20 81       	ld	r18, Z
     c40:	20 68       	ori	r18, 0x80	; 128
     c42:	20 83       	st	Z, r18
     c44:	20 81       	ld	r18, Z
     c46:	22 23       	and	r18, r18
     c48:	ec f7       	brge	.-6      	; 0xc44 <TwiTransmit+0x60>
		}
		
		if (!ProcessTwiStatus(SLA_R_RECEIVED_ACK))
     c4a:	20 91 b9 00 	lds	r18, 0x00B9
     c4e:	28 7f       	andi	r18, 0xF8	; 248
     c50:	28 3a       	cpi	r18, 0xA8	; 168
     c52:	91 f0       	breq	.+36     	; 0xc78 <TwiTransmit+0x94>
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Slave Read Not Requested by Master - 0x%x\r\n", TWSR);
     c54:	80 91 b9 00 	lds	r24, 0x00B9
     c58:	1f 92       	push	r1
     c5a:	8f 93       	push	r24
     c5c:	85 ea       	ldi	r24, 0xA5	; 165
     c5e:	94 e0       	ldi	r25, 0x04	; 4
     c60:	9f 93       	push	r25
     c62:	8f 93       	push	r24
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	8f 93       	push	r24
     c68:	22 d3       	rcall	.+1604   	; 0x12ae <SendTrace>
			
			Status = FALSE;
		
			goto Exit;
     c6a:	0f 90       	pop	r0
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(SLA_R_RECEIVED_ACK))
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Slave Read Not Requested by Master - 0x%x\r\n", TWSR);
			
			Status = FALSE;
     c74:	80 e0       	ldi	r24, 0x00	; 0
		
			goto Exit;
     c76:	07 c0       	rjmp	.+14     	; 0xc86 <TwiTransmit+0xa2>
		}
		else
		{	
			DATA_OUT();
     c78:	39 9a       	sbi	0x07, 1	; 7
		
			Status = Transmit(Buffer, Length);
     c7a:	b6 de       	rcall	.-660    	; 0x9e8 <Transmit>
		
			DATA_IN();
     c7c:	39 98       	cbi	0x07, 1	; 7
     c7e:	03 c0       	rjmp	.+6      	; 0xc86 <TwiTransmit+0xa2>
{
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
	{
		Status = FALSE;
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	01 c0       	rjmp	.+2      	; 0xc86 <TwiTransmit+0xa2>
     c84:	80 e0       	ldi	r24, 0x00	; 0
	}
	
Exit:

	return Status;
}
     c86:	0f 91       	pop	r16
     c88:	08 95       	ret

00000c8a <InitTrace>:
#ifdef DEBUG

void
InitTrace(unsigned long ProcFrequency, unsigned char TraceLevel)
{
	if (!gTraceInitialized)
     c8a:	80 91 3f 0b 	lds	r24, 0x0B3F
     c8e:	81 11       	cpse	r24, r1
     c90:	0a c0       	rjmp	.+20     	; 0xca6 <InitTrace+0x1c>
	{

		gTraceLevel = TraceLevel;
     c92:	40 93 6b 0b 	sts	0x0B6B, r20

		InitUARTSync(UART_ZERO, BR_9600, NORMAL_MODE);	
     c96:	40 e0       	ldi	r20, 0x00	; 0
     c98:	63 e3       	ldi	r22, 0x33	; 51
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	0e 94 30 14 	call	0x2860	; 0x2860 <InitUARTSync>
		
		gTraceInitialized = TRUE;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	80 93 3f 0b 	sts	0x0B3F, r24
     ca6:	08 95       	ret

00000ca8 <SendStringValue>:
SendStringValue(char *String)
{

	unsigned long Length = 0;
	
	Length = strlen(String);
     ca8:	fc 01       	movw	r30, r24
     caa:	01 90       	ld	r0, Z+
     cac:	00 20       	and	r0, r0
     cae:	e9 f7       	brne	.-6      	; 0xcaa <SendStringValue+0x2>
     cb0:	31 97       	sbiw	r30, 0x01	; 1
     cb2:	9f 01       	movw	r18, r30
     cb4:	28 1b       	sub	r18, r24
     cb6:	39 0b       	sbc	r19, r25
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	50 e0       	ldi	r21, 0x00	; 0
	
	UARTTransmitSync(UART_ZERO, (PVOID) String, Length);
     cbc:	bc 01       	movw	r22, r24
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <UARTTransmitSync>
     cc4:	08 95       	ret

00000cc6 <SendHexValue>:
	
}

void
SendHexValue(unsigned long long Value)
{
     cc6:	8f 92       	push	r8
     cc8:	9f 92       	push	r9
     cca:	af 92       	push	r10
     ccc:	bf 92       	push	r11
     cce:	cf 92       	push	r12
     cd0:	df 92       	push	r13
     cd2:	ef 92       	push	r14
     cd4:	ff 92       	push	r15
     cd6:	0f 93       	push	r16
     cd8:	1f 93       	push	r17
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	da 95       	dec	r29
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	cd bf       	out	0x3d, r28	; 61
     cee:	02 2f       	mov	r16, r18
     cf0:	93 2e       	mov	r9, r19
     cf2:	a4 2e       	mov	r10, r20
     cf4:	b5 2e       	mov	r11, r21
     cf6:	c6 2e       	mov	r12, r22
     cf8:	d7 2e       	mov	r13, r23
     cfa:	e8 2e       	mov	r14, r24
     cfc:	f9 2e       	mov	r15, r25

	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
     cfe:	10 e0       	ldi	r17, 0x00	; 0

		if (Value < 16)
		{
			TransmitChar[Count] = Value;

			Value = 0;
     d00:	81 2c       	mov	r8, r1


	do
	{

		if (Value < 16)
     d02:	20 2f       	mov	r18, r16
     d04:	39 2d       	mov	r19, r9
     d06:	4a 2d       	mov	r20, r10
     d08:	5b 2d       	mov	r21, r11
     d0a:	6c 2d       	mov	r22, r12
     d0c:	7d 2d       	mov	r23, r13
     d0e:	8e 2d       	mov	r24, r14
     d10:	9f 2d       	mov	r25, r15
     d12:	af e0       	ldi	r26, 0x0F	; 15
     d14:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__cmpdi2_s8>
     d18:	09 f0       	breq	.+2      	; 0xd1c <SendHexValue+0x56>
     d1a:	80 f4       	brcc	.+32     	; 0xd3c <SendHexValue+0x76>
		{
			TransmitChar[Count] = Value;
     d1c:	e1 e0       	ldi	r30, 0x01	; 1
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	ec 0f       	add	r30, r28
     d22:	fd 1f       	adc	r31, r29
     d24:	e1 0f       	add	r30, r17
     d26:	f1 1d       	adc	r31, r1
     d28:	00 83       	st	Z, r16

			Value = 0;
     d2a:	08 2d       	mov	r16, r8
     d2c:	98 2c       	mov	r9, r8
     d2e:	a8 2c       	mov	r10, r8
     d30:	b8 2c       	mov	r11, r8
     d32:	c8 2c       	mov	r12, r8
     d34:	d8 2c       	mov	r13, r8
     d36:	e8 2c       	mov	r14, r8
     d38:	f8 2c       	mov	r15, r8
     d3a:	1c c0       	rjmp	.+56     	; 0xd74 <SendHexValue+0xae>
		}
		else
		{
			TransmitChar[Count] = Value % 16;
     d3c:	e1 e0       	ldi	r30, 0x01	; 1
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	ec 0f       	add	r30, r28
     d42:	fd 1f       	adc	r31, r29
     d44:	e1 0f       	add	r30, r17
     d46:	f1 1d       	adc	r31, r1
     d48:	80 2f       	mov	r24, r16
     d4a:	8f 70       	andi	r24, 0x0F	; 15
     d4c:	80 83       	st	Z, r24

			Value = Value / 16;
     d4e:	20 2f       	mov	r18, r16
     d50:	39 2d       	mov	r19, r9
     d52:	4a 2d       	mov	r20, r10
     d54:	5b 2d       	mov	r21, r11
     d56:	6c 2d       	mov	r22, r12
     d58:	7d 2d       	mov	r23, r13
     d5a:	8e 2d       	mov	r24, r14
     d5c:	9f 2d       	mov	r25, r15
     d5e:	04 e0       	ldi	r16, 0x04	; 4
     d60:	0e 94 56 17 	call	0x2eac	; 0x2eac <__lshrdi3>
     d64:	02 2f       	mov	r16, r18
     d66:	93 2e       	mov	r9, r19
     d68:	a4 2e       	mov	r10, r20
     d6a:	b5 2e       	mov	r11, r21
     d6c:	c6 2e       	mov	r12, r22
     d6e:	d7 2e       	mov	r13, r23
     d70:	e8 2e       	mov	r14, r24
     d72:	f9 2e       	mov	r15, r25

		}
		
		if (TransmitChar[Count] > 9)
     d74:	e1 2f       	mov	r30, r17
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	a1 e0       	ldi	r26, 0x01	; 1
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	ac 0f       	add	r26, r28
     d7e:	bd 1f       	adc	r27, r29
     d80:	ae 0f       	add	r26, r30
     d82:	bf 1f       	adc	r27, r31
     d84:	8c 91       	ld	r24, X
     d86:	8a 30       	cpi	r24, 0x0A	; 10
     d88:	20 f0       	brcs	.+8      	; 0xd92 <SendHexValue+0xcc>
		{
			TransmitChar[Count] = TransmitChar[Count] + ASCII_HEX_CONVERSION;
     d8a:	fd 01       	movw	r30, r26
     d8c:	89 5a       	subi	r24, 0xA9	; 169
     d8e:	80 83       	st	Z, r24
     d90:	08 c0       	rjmp	.+16     	; 0xda2 <SendHexValue+0xdc>
		}
		else
		{
			TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     d92:	21 e0       	ldi	r18, 0x01	; 1
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	2c 0f       	add	r18, r28
     d98:	3d 1f       	adc	r19, r29
     d9a:	e2 0f       	add	r30, r18
     d9c:	f3 1f       	adc	r31, r19
     d9e:	80 5d       	subi	r24, 0xD0	; 208
     da0:	80 83       	st	Z, r24
		}
		
		Count++;
     da2:	1f 5f       	subi	r17, 0xFF	; 255

	} while (Value != 0);
     da4:	20 2f       	mov	r18, r16
     da6:	39 2d       	mov	r19, r9
     da8:	4a 2d       	mov	r20, r10
     daa:	5b 2d       	mov	r21, r11
     dac:	6c 2d       	mov	r22, r12
     dae:	7d 2d       	mov	r23, r13
     db0:	8e 2d       	mov	r24, r14
     db2:	9f 2d       	mov	r25, r15
     db4:	a8 2d       	mov	r26, r8
     db6:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__cmpdi2_s8>
     dba:	09 f0       	breq	.+2      	; 0xdbe <SendHexValue+0xf8>
     dbc:	a2 cf       	rjmp	.-188    	; 0xd02 <SendHexValue+0x3c>

	while (Count != 0)
     dbe:	11 23       	and	r17, r17
     dc0:	99 f0       	breq	.+38     	; 0xde8 <SendHexValue+0x122>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     dc2:	61 2f       	mov	r22, r17
     dc4:	70 e0       	ldi	r23, 0x00	; 0
     dc6:	61 50       	subi	r22, 0x01	; 1
     dc8:	71 09       	sbc	r23, r1
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	8c 0f       	add	r24, r28
     dd0:	9d 1f       	adc	r25, r29
     dd2:	68 0f       	add	r22, r24
     dd4:	79 1f       	adc	r23, r25
     dd6:	21 e0       	ldi	r18, 0x01	; 1
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	40 e0       	ldi	r20, 0x00	; 0
     ddc:	50 e0       	ldi	r21, 0x00	; 0
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	0e 94 fd 14 	call	0x29fa	; 0x29fa <UARTTransmitSync>
		
		Count--;
     de4:	11 50       	subi	r17, 0x01	; 1
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
     de6:	69 f7       	brne	.-38     	; 0xdc2 <SendHexValue+0xfc>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}
}
     de8:	d3 95       	inc	r29
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	ff 90       	pop	r15
     dfe:	ef 90       	pop	r14
     e00:	df 90       	pop	r13
     e02:	cf 90       	pop	r12
     e04:	bf 90       	pop	r11
     e06:	af 90       	pop	r10
     e08:	9f 90       	pop	r9
     e0a:	8f 90       	pop	r8
     e0c:	08 95       	ret

00000e0e <SendDecimalValue>:


void
SendDecimalValue(unsigned long long Value)
{
     e0e:	2f 92       	push	r2
     e10:	3f 92       	push	r3
     e12:	4f 92       	push	r4
     e14:	5f 92       	push	r5
     e16:	6f 92       	push	r6
     e18:	7f 92       	push	r7
     e1a:	8f 92       	push	r8
     e1c:	9f 92       	push	r9
     e1e:	af 92       	push	r10
     e20:	bf 92       	push	r11
     e22:	cf 92       	push	r12
     e24:	df 92       	push	r13
     e26:	ef 92       	push	r14
     e28:	ff 92       	push	r15
     e2a:	0f 93       	push	r16
     e2c:	1f 93       	push	r17
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	c2 50       	subi	r28, 0x02	; 2
     e38:	d1 40       	sbci	r29, 0x01	; 1
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	cf 5f       	subi	r28, 0xFF	; 255
     e46:	de 4f       	sbci	r29, 0xFE	; 254
     e48:	28 83       	st	Y, r18
     e4a:	c1 50       	subi	r28, 0x01	; 1
     e4c:	d1 40       	sbci	r29, 0x01	; 1
     e4e:	23 2e       	mov	r2, r19
     e50:	34 2e       	mov	r3, r20
     e52:	45 2e       	mov	r4, r21
     e54:	56 2e       	mov	r5, r22
     e56:	67 2e       	mov	r6, r23
     e58:	78 2e       	mov	r7, r24
     e5a:	89 2e       	mov	r8, r25

	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
     e5c:	91 2c       	mov	r9, r1


	do
	{

		if (Value < 10)
     e5e:	cf 5f       	subi	r28, 0xFF	; 255
     e60:	de 4f       	sbci	r29, 0xFE	; 254
     e62:	28 81       	ld	r18, Y
     e64:	c1 50       	subi	r28, 0x01	; 1
     e66:	d1 40       	sbci	r29, 0x01	; 1
     e68:	32 2d       	mov	r19, r2
     e6a:	43 2d       	mov	r20, r3
     e6c:	54 2d       	mov	r21, r4
     e6e:	65 2d       	mov	r22, r5
     e70:	76 2d       	mov	r23, r6
     e72:	87 2d       	mov	r24, r7
     e74:	98 2d       	mov	r25, r8
     e76:	a9 e0       	ldi	r26, 0x09	; 9
     e78:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__cmpdi2_s8>
     e7c:	09 f0       	breq	.+2      	; 0xe80 <SendDecimalValue+0x72>
     e7e:	40 f4       	brcc	.+16     	; 0xe90 <SendDecimalValue+0x82>

			Value = Value / 10;

		}
		
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     e80:	fe 01       	movw	r30, r28
     e82:	e9 0d       	add	r30, r9
     e84:	f1 1d       	adc	r31, r1
     e86:	82 2f       	mov	r24, r18
     e88:	80 5d       	subi	r24, 0xD0	; 208
     e8a:	81 83       	std	Z+1, r24	; 0x01
		
		Count++;
     e8c:	93 94       	inc	r9
     e8e:	4b c0       	rjmp	.+150    	; 0xf26 <SendDecimalValue+0x118>

			Value = 0;
		}
		else
		{
			TransmitChar[Count] = Value % 10;
     e90:	0f 2e       	mov	r0, r31
     e92:	fa e0       	ldi	r31, 0x0A	; 10
     e94:	af 2e       	mov	r10, r31
     e96:	f0 2d       	mov	r31, r0
     e98:	b1 2c       	mov	r11, r1
     e9a:	c1 2c       	mov	r12, r1
     e9c:	d1 2c       	mov	r13, r1
     e9e:	e1 2c       	mov	r14, r1
     ea0:	f1 2c       	mov	r15, r1
     ea2:	00 e0       	ldi	r16, 0x00	; 0
     ea4:	10 e0       	ldi	r17, 0x00	; 0
     ea6:	cf 5f       	subi	r28, 0xFF	; 255
     ea8:	de 4f       	sbci	r29, 0xFE	; 254
     eaa:	28 81       	ld	r18, Y
     eac:	c1 50       	subi	r28, 0x01	; 1
     eae:	d1 40       	sbci	r29, 0x01	; 1
     eb0:	32 2d       	mov	r19, r2
     eb2:	43 2d       	mov	r20, r3
     eb4:	54 2d       	mov	r21, r4
     eb6:	65 2d       	mov	r22, r5
     eb8:	76 2d       	mov	r23, r6
     eba:	87 2d       	mov	r24, r7
     ebc:	98 2d       	mov	r25, r8
     ebe:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__umoddi3>
     ec2:	ce 5f       	subi	r28, 0xFE	; 254
     ec4:	de 4f       	sbci	r29, 0xFE	; 254
     ec6:	28 83       	st	Y, r18
     ec8:	c2 50       	subi	r28, 0x02	; 2
     eca:	d1 40       	sbci	r29, 0x01	; 1

			Value = Value / 10;
     ecc:	cf 5f       	subi	r28, 0xFF	; 255
     ece:	de 4f       	sbci	r29, 0xFE	; 254
     ed0:	28 81       	ld	r18, Y
     ed2:	c1 50       	subi	r28, 0x01	; 1
     ed4:	d1 40       	sbci	r29, 0x01	; 1
     ed6:	32 2d       	mov	r19, r2
     ed8:	43 2d       	mov	r20, r3
     eda:	54 2d       	mov	r21, r4
     edc:	65 2d       	mov	r22, r5
     ede:	76 2d       	mov	r23, r6
     ee0:	87 2d       	mov	r24, r7
     ee2:	98 2d       	mov	r25, r8
     ee4:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__udivdi3>
     ee8:	cf 5f       	subi	r28, 0xFF	; 255
     eea:	de 4f       	sbci	r29, 0xFE	; 254
     eec:	28 83       	st	Y, r18
     eee:	c1 50       	subi	r28, 0x01	; 1
     ef0:	d1 40       	sbci	r29, 0x01	; 1
     ef2:	23 2e       	mov	r2, r19
     ef4:	34 2e       	mov	r3, r20
     ef6:	45 2e       	mov	r4, r21
     ef8:	56 2e       	mov	r5, r22
     efa:	67 2e       	mov	r6, r23
     efc:	78 2e       	mov	r7, r24
     efe:	89 2e       	mov	r8, r25

		}
		
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     f00:	e1 e0       	ldi	r30, 0x01	; 1
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	ec 0f       	add	r30, r28
     f06:	fd 1f       	adc	r31, r29
     f08:	e9 0d       	add	r30, r9
     f0a:	f1 1d       	adc	r31, r1
     f0c:	ce 5f       	subi	r28, 0xFE	; 254
     f0e:	de 4f       	sbci	r29, 0xFE	; 254
     f10:	a8 81       	ld	r26, Y
     f12:	c2 50       	subi	r28, 0x02	; 2
     f14:	d1 40       	sbci	r29, 0x01	; 1
     f16:	a0 5d       	subi	r26, 0xD0	; 208
     f18:	a0 83       	st	Z, r26
		
		Count++;
     f1a:	93 94       	inc	r9

	} while (Value != 0);
     f1c:	a0 e0       	ldi	r26, 0x00	; 0
     f1e:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__cmpdi2_s8>
     f22:	09 f0       	breq	.+2      	; 0xf26 <SendDecimalValue+0x118>
     f24:	9c cf       	rjmp	.-200    	; 0xe5e <SendDecimalValue+0x50>

	while (Count != 0)
     f26:	99 20       	and	r9, r9
     f28:	99 f0       	breq	.+38     	; 0xf50 <SendDecimalValue+0x142>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     f2a:	69 2d       	mov	r22, r9
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	61 50       	subi	r22, 0x01	; 1
     f30:	71 09       	sbc	r23, r1
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	8c 0f       	add	r24, r28
     f38:	9d 1f       	adc	r25, r29
     f3a:	68 0f       	add	r22, r24
     f3c:	79 1f       	adc	r23, r25
     f3e:	21 e0       	ldi	r18, 0x01	; 1
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	40 e0       	ldi	r20, 0x00	; 0
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	0e 94 fd 14 	call	0x29fa	; 0x29fa <UARTTransmitSync>
		
		Count--;
     f4c:	9a 94       	dec	r9
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
     f4e:	69 f7       	brne	.-38     	; 0xf2a <SendDecimalValue+0x11c>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}	
}
     f50:	ce 5f       	subi	r28, 0xFE	; 254
     f52:	de 4f       	sbci	r29, 0xFE	; 254
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	cd bf       	out	0x3d, r28	; 61
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	ff 90       	pop	r15
     f68:	ef 90       	pop	r14
     f6a:	df 90       	pop	r13
     f6c:	cf 90       	pop	r12
     f6e:	bf 90       	pop	r11
     f70:	af 90       	pop	r10
     f72:	9f 90       	pop	r9
     f74:	8f 90       	pop	r8
     f76:	7f 90       	pop	r7
     f78:	6f 90       	pop	r6
     f7a:	5f 90       	pop	r5
     f7c:	4f 90       	pop	r4
     f7e:	3f 90       	pop	r3
     f80:	2f 90       	pop	r2
     f82:	08 95       	ret

00000f84 <SendDoubleValue>:

void
SendDoubleValue(double Value)
{
     f84:	6f 92       	push	r6
     f86:	7f 92       	push	r7
     f88:	8f 92       	push	r8
     f8a:	9f 92       	push	r9
     f8c:	af 92       	push	r10
     f8e:	bf 92       	push	r11
     f90:	cf 92       	push	r12
     f92:	df 92       	push	r13
     f94:	ef 92       	push	r14
     f96:	ff 92       	push	r15
     f98:	0f 93       	push	r16
     f9a:	1f 93       	push	r17
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <SendDoubleValue+0x1e>
     fa2:	1f 92       	push	r1
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
     fa8:	6b 01       	movw	r12, r22
     faa:	7c 01       	movw	r14, r24
	
	long long IntPart;
	
	unsigned char FracPart;
	
	unsigned char Dot = '.';
     fac:	8e e2       	ldi	r24, 0x2E	; 46
     fae:	8a 83       	std	Y+2, r24	; 0x02
	
	unsigned char Minus = '-';
     fb0:	8d e2       	ldi	r24, 0x2D	; 45
     fb2:	8b 83       	std	Y+3, r24	; 0x03
	
	if (Value < 0)
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	a9 01       	movw	r20, r18
     fba:	c7 01       	movw	r24, r14
     fbc:	b6 01       	movw	r22, r12
     fbe:	77 dc       	rcall	.-1810   	; 0x8ae <__cmpsf2>
     fc0:	88 23       	and	r24, r24
     fc2:	74 f4       	brge	.+28     	; 0xfe0 <SendDoubleValue+0x5c>
	{
		
		UARTTransmitSync(UART_ZERO, (PVOID) &Minus, 1);
     fc4:	21 e0       	ldi	r18, 0x01	; 1
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	40 e0       	ldi	r20, 0x00	; 0
     fca:	50 e0       	ldi	r21, 0x00	; 0
     fcc:	be 01       	movw	r22, r28
     fce:	6d 5f       	subi	r22, 0xFD	; 253
     fd0:	7f 4f       	sbci	r23, 0xFF	; 255
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	0e 94 fd 14 	call	0x29fa	; 0x29fa <UARTTransmitSync>
		
		Value = Value * -1;
     fd8:	f7 fa       	bst	r15, 7
     fda:	f0 94       	com	r15
     fdc:	f7 f8       	bld	r15, 7
     fde:	f0 94       	com	r15
	}
	
	IntPart = (long long) Value;
     fe0:	c7 01       	movw	r24, r14
     fe2:	b6 01       	movw	r22, r12
     fe4:	0e 94 7e 12 	call	0x24fc	; 0x24fc <__fixsfdi>
     fe8:	62 2e       	mov	r6, r18
     fea:	73 2e       	mov	r7, r19
     fec:	84 2e       	mov	r8, r20
     fee:	95 2e       	mov	r9, r21
     ff0:	a6 2e       	mov	r10, r22
     ff2:	b7 2e       	mov	r11, r23
     ff4:	08 2f       	mov	r16, r24
     ff6:	19 2f       	mov	r17, r25
		
	Value = Value - IntPart;
     ff8:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__floatdisf>
     ffc:	9b 01       	movw	r18, r22
     ffe:	ac 01       	movw	r20, r24
    1000:	c7 01       	movw	r24, r14
    1002:	b6 01       	movw	r22, r12
    1004:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1008:	6b 01       	movw	r12, r22
    100a:	7c 01       	movw	r14, r24
	
	SendDecimalValue(IntPart);
    100c:	26 2d       	mov	r18, r6
    100e:	37 2d       	mov	r19, r7
    1010:	48 2d       	mov	r20, r8
    1012:	59 2d       	mov	r21, r9
    1014:	6a 2d       	mov	r22, r10
    1016:	7b 2d       	mov	r23, r11
    1018:	80 2f       	mov	r24, r16
    101a:	91 2f       	mov	r25, r17
    101c:	f8 de       	rcall	.-528    	; 0xe0e <SendDecimalValue>
	
	UARTTransmitSync(UART_ZERO, (PVOID) &Dot, 1);
    101e:	21 e0       	ldi	r18, 0x01	; 1
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	40 e0       	ldi	r20, 0x00	; 0
    1024:	50 e0       	ldi	r21, 0x00	; 0
    1026:	be 01       	movw	r22, r28
    1028:	6e 5f       	subi	r22, 0xFE	; 254
    102a:	7f 4f       	sbci	r23, 0xFF	; 255
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	0e 94 fd 14 	call	0x29fa	; 0x29fa <UARTTransmitSync>
	
	while (Value != 0)
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	a9 01       	movw	r20, r18
    1038:	c7 01       	movw	r24, r14
    103a:	b6 01       	movw	r22, r12
    103c:	38 dc       	rcall	.-1936   	; 0x8ae <__cmpsf2>
    103e:	88 23       	and	r24, r24
    1040:	71 f1       	breq	.+92     	; 0x109e <SendDoubleValue+0x11a>
	{
		FracPart = (Value * 10);
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	40 e2       	ldi	r20, 0x20	; 32
    1048:	51 e4       	ldi	r21, 0x41	; 65
    104a:	c7 01       	movw	r24, r14
    104c:	b6 01       	movw	r22, r12
    104e:	0e 94 c4 13 	call	0x2788	; 0x2788 <__mulsf3>
    1052:	6b 01       	movw	r12, r22
    1054:	7c 01       	movw	r14, r24
    1056:	0e 94 b8 12 	call	0x2570	; 0x2570 <__fixunssfsi>
    105a:	16 2f       	mov	r17, r22
		
		Value = (Value * 10) - FracPart;
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__floatsisf>
    1066:	9b 01       	movw	r18, r22
    1068:	ac 01       	movw	r20, r24
    106a:	c7 01       	movw	r24, r14
    106c:	b6 01       	movw	r22, r12
    106e:	0e 94 19 12 	call	0x2432	; 0x2432 <__subsf3>
    1072:	6b 01       	movw	r12, r22
    1074:	7c 01       	movw	r14, r24
		
		FracPart = FracPart + ASCII_DECIMAL_CONVERSION;
    1076:	10 5d       	subi	r17, 0xD0	; 208
    1078:	19 83       	std	Y+1, r17	; 0x01
		
		UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
    107a:	21 e0       	ldi	r18, 0x01	; 1
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	40 e0       	ldi	r20, 0x00	; 0
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	be 01       	movw	r22, r28
    1084:	6f 5f       	subi	r22, 0xFF	; 255
    1086:	7f 4f       	sbci	r23, 0xFF	; 255
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	0e 94 fd 14 	call	0x29fa	; 0x29fa <UARTTransmitSync>
	
	SendDecimalValue(IntPart);
	
	UARTTransmitSync(UART_ZERO, (PVOID) &Dot, 1);
	
	while (Value != 0)
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	a9 01       	movw	r20, r18
    1094:	c7 01       	movw	r24, r14
    1096:	b6 01       	movw	r22, r12
    1098:	0a dc       	rcall	.-2028   	; 0x8ae <__cmpsf2>
    109a:	81 11       	cpse	r24, r1
    109c:	d2 cf       	rjmp	.-92     	; 0x1042 <SendDoubleValue+0xbe>
	
	//
	// Print 0
	//
	
	FracPart = ASCII_DECIMAL_CONVERSION;
    109e:	80 e3       	ldi	r24, 0x30	; 48
    10a0:	89 83       	std	Y+1, r24	; 0x01
	
	UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
    10a2:	21 e0       	ldi	r18, 0x01	; 1
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	be 01       	movw	r22, r28
    10ac:	6f 5f       	subi	r22, 0xFF	; 255
    10ae:	7f 4f       	sbci	r23, 0xFF	; 255
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	0e 94 fd 14 	call	0x29fa	; 0x29fa <UARTTransmitSync>
}
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	ff 90       	pop	r15
    10c6:	ef 90       	pop	r14
    10c8:	df 90       	pop	r13
    10ca:	cf 90       	pop	r12
    10cc:	bf 90       	pop	r11
    10ce:	af 90       	pop	r10
    10d0:	9f 90       	pop	r9
    10d2:	8f 90       	pop	r8
    10d4:	7f 90       	pop	r7
    10d6:	6f 90       	pop	r6
    10d8:	08 95       	ret

000010da <SendSignedDecimalValue>:

void
SendSignedDecimalValue(long long Value)
{
    10da:	2f 92       	push	r2
    10dc:	3f 92       	push	r3
    10de:	4f 92       	push	r4
    10e0:	5f 92       	push	r5
    10e2:	6f 92       	push	r6
    10e4:	7f 92       	push	r7
    10e6:	8f 92       	push	r8
    10e8:	9f 92       	push	r9
    10ea:	af 92       	push	r10
    10ec:	bf 92       	push	r11
    10ee:	cf 92       	push	r12
    10f0:	df 92       	push	r13
    10f2:	ef 92       	push	r14
    10f4:	ff 92       	push	r15
    10f6:	0f 93       	push	r16
    10f8:	1f 93       	push	r17
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	c3 50       	subi	r28, 0x03	; 3
    1104:	d1 40       	sbci	r29, 0x01	; 1
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	de bf       	out	0x3e, r29	; 62
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	cd bf       	out	0x3d, r28	; 61
    1110:	ce 5f       	subi	r28, 0xFE	; 254
    1112:	de 4f       	sbci	r29, 0xFE	; 254
    1114:	28 83       	st	Y, r18
    1116:	c2 50       	subi	r28, 0x02	; 2
    1118:	d1 40       	sbci	r29, 0x01	; 1
    111a:	83 2e       	mov	r8, r19
    111c:	74 2e       	mov	r7, r20
    111e:	65 2e       	mov	r6, r21
    1120:	56 2e       	mov	r5, r22
    1122:	47 2e       	mov	r4, r23
    1124:	38 2e       	mov	r3, r24
    1126:	29 2e       	mov	r2, r25
	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
	
	unsigned char Minus = '-';
    1128:	8d e2       	ldi	r24, 0x2D	; 45
    112a:	cf 5f       	subi	r28, 0xFF	; 255
    112c:	de 4f       	sbci	r29, 0xFE	; 254
    112e:	88 83       	st	Y, r24
    1130:	c1 50       	subi	r28, 0x01	; 1
    1132:	d1 40       	sbci	r29, 0x01	; 1

	//
	// If the value is negative, print - sign and make the value positive.
	//

	if (Value < 0)
    1134:	83 2d       	mov	r24, r3
    1136:	a0 e0       	ldi	r26, 0x00	; 0
    1138:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__cmpdi2_s8>
    113c:	24 f5       	brge	.+72     	; 0x1186 <SendSignedDecimalValue+0xac>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &Minus, 1);
    113e:	21 e0       	ldi	r18, 0x01	; 1
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	40 e0       	ldi	r20, 0x00	; 0
    1144:	50 e0       	ldi	r21, 0x00	; 0
    1146:	be 01       	movw	r22, r28
    1148:	6f 5f       	subi	r22, 0xFF	; 255
    114a:	7e 4f       	sbci	r23, 0xFE	; 254
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	0e 94 fd 14 	call	0x29fa	; 0x29fa <UARTTransmitSync>

		Value *= -1;
    1152:	ce 5f       	subi	r28, 0xFE	; 254
    1154:	de 4f       	sbci	r29, 0xFE	; 254
    1156:	28 81       	ld	r18, Y
    1158:	c2 50       	subi	r28, 0x02	; 2
    115a:	d1 40       	sbci	r29, 0x01	; 1
    115c:	38 2d       	mov	r19, r8
    115e:	47 2d       	mov	r20, r7
    1160:	56 2d       	mov	r21, r6
    1162:	65 2d       	mov	r22, r5
    1164:	74 2d       	mov	r23, r4
    1166:	83 2d       	mov	r24, r3
    1168:	92 2d       	mov	r25, r2
    116a:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <__negdi2>
    116e:	ce 5f       	subi	r28, 0xFE	; 254
    1170:	de 4f       	sbci	r29, 0xFE	; 254
    1172:	28 83       	st	Y, r18
    1174:	c2 50       	subi	r28, 0x02	; 2
    1176:	d1 40       	sbci	r29, 0x01	; 1
    1178:	83 2e       	mov	r8, r19
    117a:	74 2e       	mov	r7, r20
    117c:	65 2e       	mov	r6, r21
    117e:	56 2e       	mov	r5, r22
    1180:	47 2e       	mov	r4, r23
    1182:	38 2e       	mov	r3, r24
    1184:	29 2e       	mov	r2, r25
	UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
}

void
SendSignedDecimalValue(long long Value)
{
    1186:	91 2c       	mov	r9, r1
	}

	do
	{

		if (Value < 10)
    1188:	ce 5f       	subi	r28, 0xFE	; 254
    118a:	de 4f       	sbci	r29, 0xFE	; 254
    118c:	28 81       	ld	r18, Y
    118e:	c2 50       	subi	r28, 0x02	; 2
    1190:	d1 40       	sbci	r29, 0x01	; 1
    1192:	38 2d       	mov	r19, r8
    1194:	47 2d       	mov	r20, r7
    1196:	56 2d       	mov	r21, r6
    1198:	65 2d       	mov	r22, r5
    119a:	74 2d       	mov	r23, r4
    119c:	83 2d       	mov	r24, r3
    119e:	92 2d       	mov	r25, r2
    11a0:	a9 e0       	ldi	r26, 0x09	; 9
    11a2:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__cmpdi2_s8>
    11a6:	09 f0       	breq	.+2      	; 0x11aa <SendSignedDecimalValue+0xd0>
    11a8:	44 f4       	brge	.+16     	; 0x11ba <SendSignedDecimalValue+0xe0>

			Value = Value / 10;

		}
	
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
    11aa:	fe 01       	movw	r30, r28
    11ac:	e9 0d       	add	r30, r9
    11ae:	f1 1d       	adc	r31, r1
    11b0:	82 2f       	mov	r24, r18
    11b2:	80 5d       	subi	r24, 0xD0	; 208
    11b4:	81 83       	std	Z+1, r24	; 0x01
		
		Count++;
    11b6:	93 94       	inc	r9
    11b8:	4b c0       	rjmp	.+150    	; 0x1250 <SendSignedDecimalValue+0x176>

			Value = 0;
		}
		else
		{
			TransmitChar[Count] = Value % 10;
    11ba:	0f 2e       	mov	r0, r31
    11bc:	fa e0       	ldi	r31, 0x0A	; 10
    11be:	af 2e       	mov	r10, r31
    11c0:	f0 2d       	mov	r31, r0
    11c2:	b1 2c       	mov	r11, r1
    11c4:	c1 2c       	mov	r12, r1
    11c6:	d1 2c       	mov	r13, r1
    11c8:	e1 2c       	mov	r14, r1
    11ca:	f1 2c       	mov	r15, r1
    11cc:	00 e0       	ldi	r16, 0x00	; 0
    11ce:	10 e0       	ldi	r17, 0x00	; 0
    11d0:	ce 5f       	subi	r28, 0xFE	; 254
    11d2:	de 4f       	sbci	r29, 0xFE	; 254
    11d4:	28 81       	ld	r18, Y
    11d6:	c2 50       	subi	r28, 0x02	; 2
    11d8:	d1 40       	sbci	r29, 0x01	; 1
    11da:	38 2d       	mov	r19, r8
    11dc:	47 2d       	mov	r20, r7
    11de:	56 2d       	mov	r21, r6
    11e0:	65 2d       	mov	r22, r5
    11e2:	74 2d       	mov	r23, r4
    11e4:	83 2d       	mov	r24, r3
    11e6:	92 2d       	mov	r25, r2
    11e8:	0e 94 84 16 	call	0x2d08	; 0x2d08 <__moddi3>
    11ec:	cd 5f       	subi	r28, 0xFD	; 253
    11ee:	de 4f       	sbci	r29, 0xFE	; 254
    11f0:	28 83       	st	Y, r18
    11f2:	c3 50       	subi	r28, 0x03	; 3
    11f4:	d1 40       	sbci	r29, 0x01	; 1

			Value = Value / 10;
    11f6:	ce 5f       	subi	r28, 0xFE	; 254
    11f8:	de 4f       	sbci	r29, 0xFE	; 254
    11fa:	28 81       	ld	r18, Y
    11fc:	c2 50       	subi	r28, 0x02	; 2
    11fe:	d1 40       	sbci	r29, 0x01	; 1
    1200:	38 2d       	mov	r19, r8
    1202:	47 2d       	mov	r20, r7
    1204:	56 2d       	mov	r21, r6
    1206:	65 2d       	mov	r22, r5
    1208:	74 2d       	mov	r23, r4
    120a:	83 2d       	mov	r24, r3
    120c:	92 2d       	mov	r25, r2
    120e:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <__divdi3>
    1212:	ce 5f       	subi	r28, 0xFE	; 254
    1214:	de 4f       	sbci	r29, 0xFE	; 254
    1216:	28 83       	st	Y, r18
    1218:	c2 50       	subi	r28, 0x02	; 2
    121a:	d1 40       	sbci	r29, 0x01	; 1
    121c:	83 2e       	mov	r8, r19
    121e:	74 2e       	mov	r7, r20
    1220:	65 2e       	mov	r6, r21
    1222:	56 2e       	mov	r5, r22
    1224:	47 2e       	mov	r4, r23
    1226:	38 2e       	mov	r3, r24
    1228:	29 2e       	mov	r2, r25

		}
	
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
    122a:	e1 e0       	ldi	r30, 0x01	; 1
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	ec 0f       	add	r30, r28
    1230:	fd 1f       	adc	r31, r29
    1232:	e9 0d       	add	r30, r9
    1234:	f1 1d       	adc	r31, r1
    1236:	cd 5f       	subi	r28, 0xFD	; 253
    1238:	de 4f       	sbci	r29, 0xFE	; 254
    123a:	a8 81       	ld	r26, Y
    123c:	c3 50       	subi	r28, 0x03	; 3
    123e:	d1 40       	sbci	r29, 0x01	; 1
    1240:	a0 5d       	subi	r26, 0xD0	; 208
    1242:	a0 83       	st	Z, r26
		
		Count++;
    1244:	93 94       	inc	r9

	} while (Value != 0);
    1246:	a0 e0       	ldi	r26, 0x00	; 0
    1248:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <__cmpdi2_s8>
    124c:	09 f0       	breq	.+2      	; 0x1250 <SendSignedDecimalValue+0x176>
    124e:	9c cf       	rjmp	.-200    	; 0x1188 <SendSignedDecimalValue+0xae>

	while (Count != 0)
    1250:	99 20       	and	r9, r9
    1252:	99 f0       	breq	.+38     	; 0x127a <SendSignedDecimalValue+0x1a0>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
    1254:	69 2d       	mov	r22, r9
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	61 50       	subi	r22, 0x01	; 1
    125a:	71 09       	sbc	r23, r1
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	8c 0f       	add	r24, r28
    1262:	9d 1f       	adc	r25, r29
    1264:	68 0f       	add	r22, r24
    1266:	79 1f       	adc	r23, r25
    1268:	21 e0       	ldi	r18, 0x01	; 1
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	40 e0       	ldi	r20, 0x00	; 0
    126e:	50 e0       	ldi	r21, 0x00	; 0
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	0e 94 fd 14 	call	0x29fa	; 0x29fa <UARTTransmitSync>
		
		Count--;
    1276:	9a 94       	dec	r9
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
    1278:	69 f7       	brne	.-38     	; 0x1254 <SendSignedDecimalValue+0x17a>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}
}
    127a:	cd 5f       	subi	r28, 0xFD	; 253
    127c:	de 4f       	sbci	r29, 0xFE	; 254
    127e:	0f b6       	in	r0, 0x3f	; 63
    1280:	f8 94       	cli
    1282:	de bf       	out	0x3e, r29	; 62
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	cd bf       	out	0x3d, r28	; 61
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	1f 91       	pop	r17
    128e:	0f 91       	pop	r16
    1290:	ff 90       	pop	r15
    1292:	ef 90       	pop	r14
    1294:	df 90       	pop	r13
    1296:	cf 90       	pop	r12
    1298:	bf 90       	pop	r11
    129a:	af 90       	pop	r10
    129c:	9f 90       	pop	r9
    129e:	8f 90       	pop	r8
    12a0:	7f 90       	pop	r7
    12a2:	6f 90       	pop	r6
    12a4:	5f 90       	pop	r5
    12a6:	4f 90       	pop	r4
    12a8:	3f 90       	pop	r3
    12aa:	2f 90       	pop	r2
    12ac:	08 95       	ret

000012ae <SendTrace>:
	}
}

void
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{
    12ae:	3f 92       	push	r3
    12b0:	4f 92       	push	r4
    12b2:	5f 92       	push	r5
    12b4:	6f 92       	push	r6
    12b6:	7f 92       	push	r7
    12b8:	8f 92       	push	r8
    12ba:	9f 92       	push	r9
    12bc:	af 92       	push	r10
    12be:	bf 92       	push	r11
    12c0:	cf 92       	push	r12
    12c2:	df 92       	push	r13
    12c4:	ef 92       	push	r14
    12c6:	ff 92       	push	r15
    12c8:	0f 93       	push	r16
    12ca:	1f 93       	push	r17
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	1f 92       	push	r1
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	0e 89       	ldd	r16, Y+22	; 0x16
    12d8:	1f 89       	ldd	r17, Y+23	; 0x17
	
	char Character;

	va_list ArgList;

	if (!gTraceInitialized || !(TraceLevel & gTraceLevel))
    12da:	80 91 3f 0b 	lds	r24, 0x0B3F
    12de:	88 23       	and	r24, r24
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <SendTrace+0x36>
    12e2:	1e c1       	rjmp	.+572    	; 0x1520 <SendTrace+0x272>
    12e4:	80 91 6b 0b 	lds	r24, 0x0B6B
    12e8:	9d 89       	ldd	r25, Y+21	; 0x15
    12ea:	89 23       	and	r24, r25
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <SendTrace+0x42>
    12ee:	18 c1       	rjmp	.+560    	; 0x1520 <SendTrace+0x272>
	{
		return;
	}

	va_start(ArgList, String);
    12f0:	7e 01       	movw	r14, r28
    12f2:	28 e1       	ldi	r18, 0x18	; 24
    12f4:	e2 0e       	add	r14, r18
    12f6:	f1 1c       	adc	r15, r1

	while (*String != '\0')
    12f8:	f8 01       	movw	r30, r16
    12fa:	20 81       	ld	r18, Z
    12fc:	22 23       	and	r18, r18
    12fe:	09 f4       	brne	.+2      	; 0x1302 <SendTrace+0x54>
    1300:	0f c1       	rjmp	.+542    	; 0x1520 <SendTrace+0x272>
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{

	bool IsLong = FALSE;
	
	bool IsLongLong = FALSE;
    1302:	41 2c       	mov	r4, r1

void
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{

	bool IsLong = FALSE;
    1304:	d1 2c       	mov	r13, r1
						IsLong = FALSE;
					}
					
					SendDoubleValue(va_arg(ArgList, double));
					
					break;
    1306:	51 2c       	mov	r5, r1
						
						IsLong = FALSE;
					}
					else
					{
						IsLong = TRUE;
    1308:	33 24       	eor	r3, r3
    130a:	33 94       	inc	r3
	va_start(ArgList, String);

	while (*String != '\0')
	{

		if (*String == '%' || IsLong || IsLongLong)
    130c:	25 32       	cpi	r18, 0x25	; 37
    130e:	29 f0       	breq	.+10     	; 0x131a <SendTrace+0x6c>
    1310:	d1 10       	cpse	r13, r1
    1312:	05 c0       	rjmp	.+10     	; 0x131e <SendTrace+0x70>
    1314:	41 10       	cpse	r4, r1
    1316:	03 c0       	rjmp	.+6      	; 0x131e <SendTrace+0x70>
    1318:	f1 c0       	rjmp	.+482    	; 0x14fc <SendTrace+0x24e>
		{

			if (*String == '%')
			{
				String++;
    131a:	0f 5f       	subi	r16, 0xFF	; 255
    131c:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			switch (*String)
    131e:	f8 01       	movw	r30, r16
    1320:	80 81       	ld	r24, Z
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	fc 01       	movw	r30, r24
    1326:	e3 56       	subi	r30, 0x63	; 99
    1328:	f1 09       	sbc	r31, r1
    132a:	e6 31       	cpi	r30, 0x16	; 22
    132c:	f1 05       	cpc	r31, r1
    132e:	08 f0       	brcs	.+2      	; 0x1332 <SendTrace+0x84>
    1330:	ef c0       	rjmp	.+478    	; 0x1510 <SendTrace+0x262>
    1332:	ea 5b       	subi	r30, 0xBA	; 186
    1334:	ff 4f       	sbci	r31, 0xFF	; 255
    1336:	0c 94 7e 16 	jmp	0x2cfc	; 0x2cfc <__tablejump2__>
			{
				case 'c':
				{

					Character = va_arg(ArgList, int);
    133a:	57 01       	movw	r10, r14
    133c:	f2 e0       	ldi	r31, 0x02	; 2
    133e:	af 0e       	add	r10, r31
    1340:	b1 1c       	adc	r11, r1
    1342:	f7 01       	movw	r30, r14
    1344:	80 81       	ld	r24, Z
    1346:	89 83       	std	Y+1, r24	; 0x01
					
					UARTTransmitSync(UART_ZERO, (PVOID) &Character, 1);
    1348:	21 e0       	ldi	r18, 0x01	; 1
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	40 e0       	ldi	r20, 0x00	; 0
    134e:	50 e0       	ldi	r21, 0x00	; 0
    1350:	be 01       	movw	r22, r28
    1352:	6f 5f       	subi	r22, 0xFF	; 255
    1354:	7f 4f       	sbci	r23, 0xFF	; 255
    1356:	85 2d       	mov	r24, r5
    1358:	0e 94 fd 14 	call	0x29fa	; 0x29fa <UARTTransmitSync>
			switch (*String)
			{
				case 'c':
				{

					Character = va_arg(ArgList, int);
    135c:	75 01       	movw	r14, r10
					
					UARTTransmitSync(UART_ZERO, (PVOID) &Character, 1);

					break;
    135e:	d8 c0       	rjmp	.+432    	; 0x1510 <SendTrace+0x262>

				}
				case 'd':
				{

					if (IsLong)
    1360:	dd 20       	and	r13, r13
    1362:	d9 f0       	breq	.+54     	; 0x139a <SendTrace+0xec>
					{

						SendSignedDecimalValue(va_arg(ArgList, long));
    1364:	67 01       	movw	r12, r14
    1366:	f4 e0       	ldi	r31, 0x04	; 4
    1368:	cf 0e       	add	r12, r31
    136a:	d1 1c       	adc	r13, r1
    136c:	f7 01       	movw	r30, r14
    136e:	80 81       	ld	r24, Z
    1370:	91 81       	ldd	r25, Z+1	; 0x01
    1372:	a2 81       	ldd	r26, Z+2	; 0x02
    1374:	b3 81       	ldd	r27, Z+3	; 0x03
    1376:	4c 01       	movw	r8, r24
    1378:	5d 01       	movw	r10, r26
    137a:	bb 0c       	add	r11, r11
    137c:	88 08       	sbc	r8, r8
    137e:	98 2c       	mov	r9, r8
    1380:	54 01       	movw	r10, r8
    1382:	28 2f       	mov	r18, r24
    1384:	39 2f       	mov	r19, r25
    1386:	4a 2f       	mov	r20, r26
    1388:	5b 2f       	mov	r21, r27
    138a:	68 2d       	mov	r22, r8
    138c:	78 2d       	mov	r23, r8
    138e:	88 2d       	mov	r24, r8
    1390:	98 2d       	mov	r25, r8
    1392:	a3 de       	rcall	.-698    	; 0x10da <SendSignedDecimalValue>
    1394:	76 01       	movw	r14, r12

						IsLong = FALSE;
    1396:	d5 2c       	mov	r13, r5
    1398:	bb c0       	rjmp	.+374    	; 0x1510 <SendTrace+0x262>

					}
					else if (IsLongLong)
    139a:	44 20       	and	r4, r4
    139c:	89 f0       	breq	.+34     	; 0x13c0 <SendTrace+0x112>
					{
						SendSignedDecimalValue(va_arg(ArgList, long long));
    139e:	57 01       	movw	r10, r14
    13a0:	f8 e0       	ldi	r31, 0x08	; 8
    13a2:	af 0e       	add	r10, r31
    13a4:	b1 1c       	adc	r11, r1
    13a6:	f7 01       	movw	r30, r14
    13a8:	20 81       	ld	r18, Z
    13aa:	31 81       	ldd	r19, Z+1	; 0x01
    13ac:	42 81       	ldd	r20, Z+2	; 0x02
    13ae:	53 81       	ldd	r21, Z+3	; 0x03
    13b0:	64 81       	ldd	r22, Z+4	; 0x04
    13b2:	75 81       	ldd	r23, Z+5	; 0x05
    13b4:	86 81       	ldd	r24, Z+6	; 0x06
    13b6:	97 81       	ldd	r25, Z+7	; 0x07
    13b8:	90 de       	rcall	.-736    	; 0x10da <SendSignedDecimalValue>
    13ba:	75 01       	movw	r14, r10

						IsLongLong = FALSE;
    13bc:	45 2c       	mov	r4, r5
    13be:	a8 c0       	rjmp	.+336    	; 0x1510 <SendTrace+0x262>
					}
					else
					{

						SendSignedDecimalValue(va_arg(ArgList, int));
    13c0:	57 01       	movw	r10, r14
    13c2:	f2 e0       	ldi	r31, 0x02	; 2
    13c4:	af 0e       	add	r10, r31
    13c6:	b1 1c       	adc	r11, r1
    13c8:	f7 01       	movw	r30, r14
    13ca:	31 81       	ldd	r19, Z+1	; 0x01
    13cc:	20 81       	ld	r18, Z
    13ce:	93 2f       	mov	r25, r19
    13d0:	99 0f       	add	r25, r25
    13d2:	99 0b       	sbc	r25, r25
    13d4:	49 2f       	mov	r20, r25
    13d6:	59 2f       	mov	r21, r25
    13d8:	69 2f       	mov	r22, r25
    13da:	79 2f       	mov	r23, r25
    13dc:	89 2f       	mov	r24, r25
    13de:	7d de       	rcall	.-774    	; 0x10da <SendSignedDecimalValue>
    13e0:	75 01       	movw	r14, r10
    13e2:	96 c0       	rjmp	.+300    	; 0x1510 <SendTrace+0x262>
					break;
				}
				case 'u':
				{

					if(IsLong)
    13e4:	dd 20       	and	r13, r13
    13e6:	b9 f0       	breq	.+46     	; 0x1416 <SendTrace+0x168>
					{

						SendDecimalValue(va_arg(ArgList, unsigned long));
    13e8:	37 01       	movw	r6, r14
    13ea:	f4 e0       	ldi	r31, 0x04	; 4
    13ec:	6f 0e       	add	r6, r31
    13ee:	71 1c       	adc	r7, r1
    13f0:	f7 01       	movw	r30, r14
    13f2:	80 81       	ld	r24, Z
    13f4:	91 81       	ldd	r25, Z+1	; 0x01
    13f6:	a2 81       	ldd	r26, Z+2	; 0x02
    13f8:	b3 81       	ldd	r27, Z+3	; 0x03
    13fa:	4c 01       	movw	r8, r24
    13fc:	5d 01       	movw	r10, r26
    13fe:	28 2f       	mov	r18, r24
    1400:	39 2d       	mov	r19, r9
    1402:	4a 2d       	mov	r20, r10
    1404:	5b 2d       	mov	r21, r11
    1406:	65 2d       	mov	r22, r5
    1408:	75 2d       	mov	r23, r5
    140a:	85 2d       	mov	r24, r5
    140c:	95 2d       	mov	r25, r5
    140e:	ff dc       	rcall	.-1538   	; 0xe0e <SendDecimalValue>
    1410:	73 01       	movw	r14, r6
						
						IsLong = FALSE;
    1412:	d5 2c       	mov	r13, r5
    1414:	7d c0       	rjmp	.+250    	; 0x1510 <SendTrace+0x262>
					
					}
					else if(IsLongLong)
    1416:	44 20       	and	r4, r4
    1418:	89 f0       	breq	.+34     	; 0x143c <SendTrace+0x18e>
					{
						SendDecimalValue(va_arg(ArgList, unsigned long long));
    141a:	57 01       	movw	r10, r14
    141c:	f8 e0       	ldi	r31, 0x08	; 8
    141e:	af 0e       	add	r10, r31
    1420:	b1 1c       	adc	r11, r1
    1422:	f7 01       	movw	r30, r14
    1424:	20 81       	ld	r18, Z
    1426:	31 81       	ldd	r19, Z+1	; 0x01
    1428:	42 81       	ldd	r20, Z+2	; 0x02
    142a:	53 81       	ldd	r21, Z+3	; 0x03
    142c:	64 81       	ldd	r22, Z+4	; 0x04
    142e:	75 81       	ldd	r23, Z+5	; 0x05
    1430:	86 81       	ldd	r24, Z+6	; 0x06
    1432:	97 81       	ldd	r25, Z+7	; 0x07
    1434:	ec dc       	rcall	.-1576   	; 0xe0e <SendDecimalValue>
    1436:	75 01       	movw	r14, r10
						
						IsLongLong = FALSE;
    1438:	45 2c       	mov	r4, r5
    143a:	6a c0       	rjmp	.+212    	; 0x1510 <SendTrace+0x262>
					}
					else
					{

						SendDecimalValue(va_arg(ArgList, unsigned int));
    143c:	f7 01       	movw	r30, r14
    143e:	40 81       	ld	r20, Z
    1440:	51 81       	ldd	r21, Z+1	; 0x01
    1442:	f2 e0       	ldi	r31, 0x02	; 2
    1444:	ef 0e       	add	r14, r31
    1446:	f1 1c       	adc	r15, r1
    1448:	24 2f       	mov	r18, r20
    144a:	35 2f       	mov	r19, r21
    144c:	45 2d       	mov	r20, r5
    144e:	55 2d       	mov	r21, r5
    1450:	65 2d       	mov	r22, r5
    1452:	75 2d       	mov	r23, r5
    1454:	85 2d       	mov	r24, r5
    1456:	95 2d       	mov	r25, r5
    1458:	da dc       	rcall	.-1612   	; 0xe0e <SendDecimalValue>
    145a:	5a c0       	rjmp	.+180    	; 0x1510 <SendTrace+0x262>
					break;
				}
				case 'x':
				{

					if (IsLong)
    145c:	dd 20       	and	r13, r13
    145e:	a9 f0       	breq	.+42     	; 0x148a <SendTrace+0x1dc>
					{

						SendHexValue(va_arg(ArgList, unsigned long));
    1460:	f7 01       	movw	r30, r14
    1462:	80 81       	ld	r24, Z
    1464:	91 81       	ldd	r25, Z+1	; 0x01
    1466:	a2 81       	ldd	r26, Z+2	; 0x02
    1468:	b3 81       	ldd	r27, Z+3	; 0x03
    146a:	24 e0       	ldi	r18, 0x04	; 4
    146c:	e2 0e       	add	r14, r18
    146e:	f1 1c       	adc	r15, r1
    1470:	3c 01       	movw	r6, r24
    1472:	4d 01       	movw	r8, r26
    1474:	28 2f       	mov	r18, r24
    1476:	37 2d       	mov	r19, r7
    1478:	48 2d       	mov	r20, r8
    147a:	59 2d       	mov	r21, r9
    147c:	65 2d       	mov	r22, r5
    147e:	75 2d       	mov	r23, r5
    1480:	85 2d       	mov	r24, r5
    1482:	95 2d       	mov	r25, r5
    1484:	20 dc       	rcall	.-1984   	; 0xcc6 <SendHexValue>

						IsLong = FALSE;
    1486:	d5 2c       	mov	r13, r5
    1488:	43 c0       	rjmp	.+134    	; 0x1510 <SendTrace+0x262>

					}
					else if (IsLongLong)
    148a:	44 20       	and	r4, r4
    148c:	79 f0       	breq	.+30     	; 0x14ac <SendTrace+0x1fe>
					{
						SendHexValue(va_arg(ArgList, unsigned long long));
    148e:	f7 01       	movw	r30, r14
    1490:	20 81       	ld	r18, Z
    1492:	88 e0       	ldi	r24, 0x08	; 8
    1494:	e8 0e       	add	r14, r24
    1496:	f1 1c       	adc	r15, r1
    1498:	31 81       	ldd	r19, Z+1	; 0x01
    149a:	42 81       	ldd	r20, Z+2	; 0x02
    149c:	53 81       	ldd	r21, Z+3	; 0x03
    149e:	64 81       	ldd	r22, Z+4	; 0x04
    14a0:	75 81       	ldd	r23, Z+5	; 0x05
    14a2:	86 81       	ldd	r24, Z+6	; 0x06
    14a4:	97 81       	ldd	r25, Z+7	; 0x07
    14a6:	0f dc       	rcall	.-2018   	; 0xcc6 <SendHexValue>
						
						IsLongLong = FALSE;
    14a8:	45 2c       	mov	r4, r5
    14aa:	32 c0       	rjmp	.+100    	; 0x1510 <SendTrace+0x262>
					}
					else
					{

						SendHexValue(va_arg(ArgList, unsigned int));
    14ac:	f7 01       	movw	r30, r14
    14ae:	40 81       	ld	r20, Z
    14b0:	51 81       	ldd	r21, Z+1	; 0x01
    14b2:	e2 e0       	ldi	r30, 0x02	; 2
    14b4:	ee 0e       	add	r14, r30
    14b6:	f1 1c       	adc	r15, r1
    14b8:	24 2f       	mov	r18, r20
    14ba:	35 2f       	mov	r19, r21
    14bc:	45 2d       	mov	r20, r5
    14be:	55 2d       	mov	r21, r5
    14c0:	65 2d       	mov	r22, r5
    14c2:	75 2d       	mov	r23, r5
    14c4:	85 2d       	mov	r24, r5
    14c6:	95 2d       	mov	r25, r5
    14c8:	fe db       	rcall	.-2052   	; 0xcc6 <SendHexValue>
    14ca:	22 c0       	rjmp	.+68     	; 0x1510 <SendTrace+0x262>
					break;
				}
				case 'l':
				{

					if (IsLong)
    14cc:	dd 20       	and	r13, r13
    14ce:	f9 f0       	breq	.+62     	; 0x150e <SendTrace+0x260>
					{
						IsLongLong = TRUE;
    14d0:	43 2c       	mov	r4, r3
						
						IsLong = FALSE;
    14d2:	d5 2c       	mov	r13, r5
    14d4:	1d c0       	rjmp	.+58     	; 0x1510 <SendTrace+0x262>
					break;
				}
				case 's':
				{
					
					SendStringValue(va_arg(ArgList, char *)); 
    14d6:	f7 01       	movw	r30, r14
    14d8:	80 81       	ld	r24, Z
    14da:	91 81       	ldd	r25, Z+1	; 0x01
    14dc:	f2 e0       	ldi	r31, 0x02	; 2
    14de:	ef 0e       	add	r14, r31
    14e0:	f1 1c       	adc	r15, r1
    14e2:	e2 db       	rcall	.-2108   	; 0xca8 <SendStringValue>

					break;
    14e4:	15 c0       	rjmp	.+42     	; 0x1510 <SendTrace+0x262>
					if(IsLong)
					{
						IsLong = FALSE;
					}
					
					SendDoubleValue(va_arg(ArgList, double));
    14e6:	f7 01       	movw	r30, r14
    14e8:	60 81       	ld	r22, Z
    14ea:	71 81       	ldd	r23, Z+1	; 0x01
    14ec:	82 81       	ldd	r24, Z+2	; 0x02
    14ee:	93 81       	ldd	r25, Z+3	; 0x03
    14f0:	24 e0       	ldi	r18, 0x04	; 4
    14f2:	e2 0e       	add	r14, r18
    14f4:	f1 1c       	adc	r15, r1
    14f6:	46 dd       	rcall	.-1396   	; 0xf84 <SendDoubleValue>
					
					break;
    14f8:	d5 2c       	mov	r13, r5
    14fa:	0a c0       	rjmp	.+20     	; 0x1510 <SendTrace+0x262>

		}
		else
		{

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
    14fc:	21 e0       	ldi	r18, 0x01	; 1
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e0       	ldi	r20, 0x00	; 0
    1502:	50 e0       	ldi	r21, 0x00	; 0
    1504:	b8 01       	movw	r22, r16
    1506:	85 2d       	mov	r24, r5
    1508:	0e 94 fd 14 	call	0x29fa	; 0x29fa <UARTTransmitSync>
    150c:	01 c0       	rjmp	.+2      	; 0x1510 <SendTrace+0x262>
						
						IsLong = FALSE;
					}
					else
					{
						IsLong = TRUE;
    150e:	d3 2c       	mov	r13, r3

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
				
		}

		String++;
    1510:	c8 01       	movw	r24, r16
    1512:	01 96       	adiw	r24, 0x01	; 1
		return;
	}

	va_start(ArgList, String);

	while (*String != '\0')
    1514:	f8 01       	movw	r30, r16
    1516:	21 81       	ldd	r18, Z+1	; 0x01
    1518:	22 23       	and	r18, r18
    151a:	11 f0       	breq	.+4      	; 0x1520 <SendTrace+0x272>

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
				
		}

		String++;
    151c:	8c 01       	movw	r16, r24
    151e:	f6 ce       	rjmp	.-532    	; 0x130c <SendTrace+0x5e>
		
	}
	
	va_end(ArgList);
	
}
    1520:	0f 90       	pop	r0
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	ff 90       	pop	r15
    152c:	ef 90       	pop	r14
    152e:	df 90       	pop	r13
    1530:	cf 90       	pop	r12
    1532:	bf 90       	pop	r11
    1534:	af 90       	pop	r10
    1536:	9f 90       	pop	r9
    1538:	8f 90       	pop	r8
    153a:	7f 90       	pop	r7
    153c:	6f 90       	pop	r6
    153e:	5f 90       	pop	r5
    1540:	4f 90       	pop	r4
    1542:	3f 90       	pop	r3
    1544:	08 95       	ret

00001546 <InitADC>:

bool gADCInitialized = FALSE;

bool
InitADC(PADC_INIT_PARAMS InitParams)
{
    1546:	fc 01       	movw	r30, r24
	
	//
	// Check to see if the init params is set to NULL
	//
	
	if (InitParams == NULL)
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	b9 f0       	breq	.+46     	; 0x157a <InitADC+0x34>
	// Initialize ADC Mux register
	//
	
	AdcMux.AsUINT8 = 0;
	
	AdcMux.RefVoltSelect = InitParams->RefVoltSelect;
    154c:	81 81       	ldd	r24, Z+1	; 0x01
    154e:	82 95       	swap	r24
    1550:	88 0f       	add	r24, r24
    1552:	88 0f       	add	r24, r24
    1554:	80 7c       	andi	r24, 0xC0	; 192
	
	AdcMux.Adlar = InitParams->Flags.IsLeftAdjustResult;
    1556:	90 81       	ld	r25, Z
    1558:	90 fb       	bst	r25, 0
    155a:	85 f9       	bld	r24, 5
	
	ADMUX = AdcMux.AsUINT8;
    155c:	80 93 7c 00 	sts	0x007C, r24
	// Initialize Control and Status A Register
	//
	
	AdcCtrlStatusA.AsUINT8 = 0;
	
	AdcCtrlStatusA.Prescalar = InitParams->Prescalar;
    1560:	82 81       	ldd	r24, Z+2	; 0x02
    1562:	87 70       	andi	r24, 0x07	; 7
	
	AdcCtrlStatusA.ADCEnable = 1;
    1564:	80 68       	ori	r24, 0x80	; 128
	
	ADCSRA = AdcCtrlStatusA.AsUINT8;
    1566:	80 93 7a 00 	sts	0x007A, r24
	
	//
	// Initialize Control and Status Register B
	//
	
	ADCSRB = 0;
    156a:	10 92 7b 00 	sts	0x007B, r1
	
	//
	// Initialize Digital Input Disable Register 0
	//
	
	DIDR0 = InitParams->EnabledChannelsBitVector;
    156e:	83 81       	ldd	r24, Z+3	; 0x03
    1570:	80 93 7e 00 	sts	0x007E, r24
	
	
	gADCInitialized = TRUE;
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	80 93 40 0b 	sts	0x0B40, r24
	
	Exit:

	return gADCInitialized;
}
    157a:	80 91 40 0b 	lds	r24, 0x0B40
    157e:	08 95       	ret

00001580 <ADCRead>:
	
	//
	// Read DIDR0 register to check enabled channels
	//
	
	if (!(DIDR0 & (0x1 << AdcChannel)))
    1580:	20 91 7e 00 	lds	r18, 0x007E
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	08 2e       	mov	r0, r24
    1588:	02 c0       	rjmp	.+4      	; 0x158e <ADCRead+0xe>
    158a:	35 95       	asr	r19
    158c:	27 95       	ror	r18
    158e:	0a 94       	dec	r0
    1590:	e2 f7       	brpl	.-8      	; 0x158a <ADCRead+0xa>
    1592:	20 fd       	sbrc	r18, 0
    1594:	0c c0       	rjmp	.+24     	; 0x15ae <ADCRead+0x2e>
	{
		Status = FALSE;
		
		SendTrace(ERROR_LEVEL, "ADC Channel Not Enabled\r\n");
    1596:	82 e1       	ldi	r24, 0x12	; 18
    1598:	96 e0       	ldi	r25, 0x06	; 6
    159a:	9f 93       	push	r25
    159c:	8f 93       	push	r24
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	8f 93       	push	r24
    15a2:	85 de       	rcall	.-758    	; 0x12ae <SendTrace>
		
		goto Exit;
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
	// Read DIDR0 register to check enabled channels
	//
	
	if (!(DIDR0 & (0x1 << AdcChannel)))
	{
		Status = FALSE;
    15aa:	80 e0       	ldi	r24, 0x00	; 0
		
		SendTrace(ERROR_LEVEL, "ADC Channel Not Enabled\r\n");
		
		goto Exit;
    15ac:	08 95       	ret
	
	//
	// Write the ADC Channel in ADCMUX
	//
	
	AdcMux.AsUINT8 = ADMUX;
    15ae:	ec e7       	ldi	r30, 0x7C	; 124
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	90 81       	ld	r25, Z
	
	AdcMux.Mux = AdcChannel;
    15b4:	8f 71       	andi	r24, 0x1F	; 31
    15b6:	90 7e       	andi	r25, 0xE0	; 224
    15b8:	89 2b       	or	r24, r25
	
	ADMUX = AdcMux.AsUINT8; 
    15ba:	80 83       	st	Z, r24
	
	//
	// Start Conversion
	//
	
	START_CONVERSION();
    15bc:	ea e7       	ldi	r30, 0x7A	; 122
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	80 64       	ori	r24, 0x40	; 64
    15c4:	80 83       	st	Z, r24
	
	//
	// Wait for Conversion to complete
	//
	
	WAIT_FOR_CONVERSION();
    15c6:	80 81       	ld	r24, Z
    15c8:	84 ff       	sbrs	r24, 4
    15ca:	fd cf       	rjmp	.-6      	; 0x15c6 <ADCRead+0x46>
	
	//
	// Read the data
	//
	
	*Value = ADCL;
    15cc:	80 91 78 00 	lds	r24, 0x0078
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	fb 01       	movw	r30, r22
    15d4:	91 83       	std	Z+1, r25	; 0x01
    15d6:	80 83       	st	Z, r24
	
	*Value |= (ADCH << 8);
    15d8:	20 91 79 00 	lds	r18, 0x0079
    15dc:	92 2b       	or	r25, r18
	
	if (*Value >= ADC_MAX_VALUE)
    15de:	8c 3f       	cpi	r24, 0xFC	; 252
    15e0:	f3 e0       	ldi	r31, 0x03	; 3
    15e2:	9f 07       	cpc	r25, r31
    15e4:	28 f4       	brcc	.+10     	; 0x15f0 <ADCRead+0x70>
	// Read the data
	//
	
	*Value = ADCL;
	
	*Value |= (ADCH << 8);
    15e6:	fb 01       	movw	r30, r22
    15e8:	91 83       	std	Z+1, r25	; 0x01
    15ea:	80 83       	st	Z, r24
}

bool
ADCRead(ADC_CHANNEL AdcChannel, unsigned int *Value)
{
	bool Status = TRUE;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	08 95       	ret
	
	*Value |= (ADCH << 8);
	
	if (*Value >= ADC_MAX_VALUE)
	{
		*Value = ADC_MAX_VALUE - 1;
    15f0:	8b ef       	ldi	r24, 0xFB	; 251
    15f2:	93 e0       	ldi	r25, 0x03	; 3
    15f4:	fb 01       	movw	r30, r22
    15f6:	91 83       	std	Z+1, r25	; 0x01
    15f8:	80 83       	st	Z, r24
}

bool
ADCRead(ADC_CHANNEL AdcChannel, unsigned int *Value)
{
	bool Status = TRUE;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
	}
	
Exit:

	return Status;
    15fc:	08 95       	ret

000015fe <LCDWrite>:
	return Status;
}

bool
LCDWrite(PLCD_TWI_DATA TwiData, bool IsEndOfTransfer)
{
    15fe:	ff 92       	push	r15
    1600:	0f 93       	push	r16
    1602:	1f 93       	push	r17
    1604:	cf 93       	push	r28
    1606:	df 93       	push	r29
    1608:	ec 01       	movw	r28, r24
    160a:	f6 2e       	mov	r15, r22
	bool Status = FALSE;
	
	gSlaveAddress.RW_EnGenCall = 0;
    160c:	80 91 6c 0b 	lds	r24, 0x0B6C
    1610:	8e 7f       	andi	r24, 0xFE	; 254
    1612:	80 93 6c 0b 	sts	0x0B6C, r24
	
	//
	// Send the value using TWI Transmit.
	//
	
	TwiData->Enable = 1;
    1616:	88 81       	ld	r24, Y
    1618:	84 60       	ori	r24, 0x04	; 4
    161a:	88 83       	st	Y, r24
	
	Status = TwiTransmit(&TwiData->AsUINT8, 1, &gSlaveAddress, FALSE);
    161c:	00 e0       	ldi	r16, 0x00	; 0
    161e:	2c e6       	ldi	r18, 0x6C	; 108
    1620:	3b e0       	ldi	r19, 0x0B	; 11
    1622:	41 e0       	ldi	r20, 0x01	; 1
    1624:	50 e0       	ldi	r21, 0x00	; 0
    1626:	60 e0       	ldi	r22, 0x00	; 0
    1628:	70 e0       	ldi	r23, 0x00	; 0
    162a:	ce 01       	movw	r24, r28
    162c:	db da       	rcall	.-2634   	; 0xbe4 <TwiTransmit>
    162e:	18 2f       	mov	r17, r24
	
	if (!Status)
    1630:	81 11       	cpse	r24, r1
    1632:	0b c0       	rjmp	.+22     	; 0x164a <LCDWrite+0x4c>
	{
		SendTrace(ERROR_LEVEL, "Transmit - Twi Transmit Failed\r\n");
    1634:	2c e2       	ldi	r18, 0x2C	; 44
    1636:	36 e0       	ldi	r19, 0x06	; 6
    1638:	3f 93       	push	r19
    163a:	2f 93       	push	r18
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	8f 93       	push	r24
    1640:	36 de       	rcall	.-916    	; 0x12ae <SendTrace>
		
		goto Exit;
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	19 c0       	rjmp	.+50     	; 0x167c <LCDWrite+0x7e>
	
	//
	// Now pulse the enable bit.
	//
	
	TwiData->Enable = 0;
    164a:	88 81       	ld	r24, Y
    164c:	8b 7f       	andi	r24, 0xFB	; 251
    164e:	88 83       	st	Y, r24

	Status = TwiTransmit(&TwiData->AsUINT8, 1, &gSlaveAddress, IsEndOfTransfer);
    1650:	0f 2d       	mov	r16, r15
    1652:	2c e6       	ldi	r18, 0x6C	; 108
    1654:	3b e0       	ldi	r19, 0x0B	; 11
    1656:	41 e0       	ldi	r20, 0x01	; 1
    1658:	50 e0       	ldi	r21, 0x00	; 0
    165a:	60 e0       	ldi	r22, 0x00	; 0
    165c:	70 e0       	ldi	r23, 0x00	; 0
    165e:	ce 01       	movw	r24, r28
    1660:	c1 da       	rcall	.-2686   	; 0xbe4 <TwiTransmit>
    1662:	18 2f       	mov	r17, r24
	
	if (!Status)
    1664:	81 11       	cpse	r24, r1
    1666:	0a c0       	rjmp	.+20     	; 0x167c <LCDWrite+0x7e>
	{
		SendTrace(ERROR_LEVEL, "Transmit - Twi Transmit Failed\r\n");
    1668:	2c e2       	ldi	r18, 0x2C	; 44
    166a:	36 e0       	ldi	r19, 0x06	; 6
    166c:	3f 93       	push	r19
    166e:	2f 93       	push	r18
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	8f 93       	push	r24
    1674:	1c de       	rcall	.-968    	; 0x12ae <SendTrace>
		
		goto Exit;
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
	
	
Exit:

	return Status;
    167c:	81 2f       	mov	r24, r17
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	ff 90       	pop	r15
    1688:	08 95       	ret

0000168a <LCDTransmit>:
	return Status;
}

bool
LCDTransmit(unsigned char Value, LCD_REG_SELECT RegSelect, bool IsEndOfTransfer)
{
    168a:	0f 93       	push	r16
    168c:	1f 93       	push	r17
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	1f 92       	push	r1
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	18 2f       	mov	r17, r24
    169a:	04 2f       	mov	r16, r20
	bool Status;
	
	LCD_TWI_DATA TwiData;
	
	
	TwiData.RegSelect = RegSelect;
    169c:	99 81       	ldd	r25, Y+1	; 0x01
    169e:	60 fb       	bst	r22, 0
    16a0:	90 f9       	bld	r25, 0
	
	TwiData.BackLight = gBackLight;
    16a2:	80 91 46 0b 	lds	r24, 0x0B46
    16a6:	80 fb       	bst	r24, 0
    16a8:	93 f9       	bld	r25, 3
	//
	// We send upper nibble first and then the lower nibble of the Value
	// First four bits E, RS, BL, RW stays the same in both the transfers.
	//
	
	TwiData.Data = Value >> UPPER_NIBBLE_SHIFT;
    16aa:	81 2f       	mov	r24, r17
    16ac:	80 7f       	andi	r24, 0xF0	; 240
    16ae:	9d 70       	andi	r25, 0x0D	; 13
    16b0:	98 2b       	or	r25, r24
    16b2:	99 83       	std	Y+1, r25	; 0x01
	
	Status = LCDWrite(&TwiData, FALSE);
    16b4:	60 e0       	ldi	r22, 0x00	; 0
    16b6:	ce 01       	movw	r24, r28
    16b8:	01 96       	adiw	r24, 0x01	; 1
    16ba:	a1 df       	rcall	.-190    	; 0x15fe <LCDWrite>
	
	if (!Status)
    16bc:	88 23       	and	r24, r24
    16be:	51 f0       	breq	.+20     	; 0x16d4 <LCDTransmit+0x4a>
	
	//
	// Send the Lower Nibble
	//
	
	TwiData.Data = Value & LOWER_NIBBLE_MASK;
    16c0:	12 95       	swap	r17
    16c2:	10 7f       	andi	r17, 0xF0	; 240
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	8f 70       	andi	r24, 0x0F	; 15
    16c8:	18 2b       	or	r17, r24
    16ca:	19 83       	std	Y+1, r17	; 0x01
	
	Status = LCDWrite(&TwiData, IsEndOfTransfer);
    16cc:	60 2f       	mov	r22, r16
    16ce:	ce 01       	movw	r24, r28
    16d0:	01 96       	adiw	r24, 0x01	; 1
    16d2:	95 df       	rcall	.-214    	; 0x15fe <LCDWrite>
	}
	
Exit:
	
	return Status;
}
    16d4:	0f 90       	pop	r0
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	1f 91       	pop	r17
    16dc:	0f 91       	pop	r16
    16de:	08 95       	ret

000016e0 <LCDSetCursorToHomePos>:
bool
LCDSetCursorToHomePos()
{
	bool Status;
	
	Status = LCDTransmit(RETURN_HOME_CTRL, LCD_IR_REG, TRUE);
    16e0:	41 e0       	ldi	r20, 0x01	; 1
    16e2:	60 e0       	ldi	r22, 0x00	; 0
    16e4:	82 e0       	ldi	r24, 0x02	; 2
    16e6:	d1 df       	rcall	.-94     	; 0x168a <LCDTransmit>
    16e8:	ef e9       	ldi	r30, 0x9F	; 159
    16ea:	ff e0       	ldi	r31, 0x0F	; 15
    16ec:	31 97       	sbiw	r30, 0x01	; 1
    16ee:	f1 f7       	brne	.-4      	; 0x16ec <LCDSetCursorToHomePos+0xc>
    16f0:	00 c0       	rjmp	.+0      	; 0x16f2 <LCDSetCursorToHomePos+0x12>
    16f2:	00 00       	nop
	
	_delay_ms(2);

	return Status;
}
    16f4:	08 95       	ret

000016f6 <LCDClearDisplay>:

}

bool
LCDClearDisplay()
{	
    16f6:	cf 93       	push	r28
	bool Status;
	
	Status = LCDTransmit(CLEAR_DISPLAY_CTRL, LCD_IR_REG, TRUE);
    16f8:	41 e0       	ldi	r20, 0x01	; 1
    16fa:	60 e0       	ldi	r22, 0x00	; 0
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	c5 df       	rcall	.-118    	; 0x168a <LCDTransmit>
    1700:	c8 2f       	mov	r28, r24
	
	LCDSetCursorToHomePos();
    1702:	ee df       	rcall	.-36     	; 0x16e0 <LCDSetCursorToHomePos>

	return Status;
}
    1704:	8c 2f       	mov	r24, r28
    1706:	cf 91       	pop	r28
    1708:	08 95       	ret

0000170a <LCDSetDisplayControl>:
	
	//
	// Set Display On Flag
	//
	
	if (IsDisplayOn)
    170a:	81 11       	cpse	r24, r1
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <LCDSetDisplayControl+0x8>
bool
LCDSetDisplayControl(bool IsDisplayOn, bool IsCursorOn, bool IsCursorBlinkOn, bool IsBackLightOn)
{
	bool Status = FALSE;
	
	unsigned char Value = DISPLAY_CTRL;
    170e:	88 e0       	ldi	r24, 0x08	; 8
    1710:	01 c0       	rjmp	.+2      	; 0x1714 <LCDSetDisplayControl+0xa>
	// Set Display On Flag
	//
	
	if (IsDisplayOn)
	{
		Value |= DISPLAY_ON;
    1712:	8c e0       	ldi	r24, 0x0C	; 12
	
	//
	// Set Cursor On Flag
	//
	
	if (IsCursorOn)
    1714:	61 11       	cpse	r22, r1
	{
		Value |= CURSOR_ON;
    1716:	82 60       	ori	r24, 0x02	; 2
	
	//
	// Set Cursor Blink On Flag
	//
	
	if (IsCursorBlinkOn)
    1718:	41 11       	cpse	r20, r1
	{
		Value |= BLINK_ON;
    171a:	81 60       	ori	r24, 0x01	; 1
	
	//
	// Set Back Light On
	//
	
	gBackLight = IsBackLightOn;
    171c:	20 93 46 0b 	sts	0x0B46, r18
	
	Status = LCDTransmit(Value, LCD_IR_REG, TRUE);
    1720:	41 e0       	ldi	r20, 0x01	; 1
    1722:	60 e0       	ldi	r22, 0x00	; 0
    1724:	b2 cf       	rjmp	.-156    	; 0x168a <LCDTransmit>

	return Status;
}
    1726:	08 95       	ret

00001728 <LCDSetCursorPosition>:

bool
LCDSetCursorPosition(unsigned char LineNumber, unsigned char Position)
{
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	c8 2f       	mov	r28, r24
    172e:	d6 2f       	mov	r29, r22
	bool Status = FALSE;
	
	unsigned char Value = DDRAM_CTRL;
	
	if (!gLCDInitialized)
    1730:	80 91 47 0b 	lds	r24, 0x0B47
    1734:	81 11       	cpse	r24, r1
    1736:	0c c0       	rjmp	.+24     	; 0x1750 <LCDSetCursorPosition+0x28>
	{
		SendTrace(ERROR_LEVEL, "LCDSetCursorPosition - LCD Not Initialized\r\n");
    1738:	8d e4       	ldi	r24, 0x4D	; 77
    173a:	96 e0       	ldi	r25, 0x06	; 6
    173c:	9f 93       	push	r25
    173e:	8f 93       	push	r24
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	8f 93       	push	r24
    1744:	b4 dd       	rcall	.-1176   	; 0x12ae <SendTrace>
		
		goto Exit;
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
}

bool
LCDSetCursorPosition(unsigned char LineNumber, unsigned char Position)
{
	bool Status = FALSE;
    174c:	80 e0       	ldi	r24, 0x00	; 0
	
	if (!gLCDInitialized)
	{
		SendTrace(ERROR_LEVEL, "LCDSetCursorPosition - LCD Not Initialized\r\n");
		
		goto Exit;
    174e:	19 c0       	rjmp	.+50     	; 0x1782 <LCDSetCursorPosition+0x5a>
	}
	
	if (LineNumber >= gMaxLines)
    1750:	80 91 41 0b 	lds	r24, 0x0B41
    1754:	c8 17       	cp	r28, r24
    1756:	90 f4       	brcc	.+36     	; 0x177c <LCDSetCursorPosition+0x54>
	{
		goto Exit;
	}
	
	if (Position >= MAX_BUFFER_SIZE)
    1758:	60 34       	cpi	r22, 0x40	; 64
    175a:	90 f4       	brcc	.+36     	; 0x1780 <LCDSetCursorPosition+0x58>
	// Set DDRAM Address
	//
	
	Value |= (LineNumber * DDRAM_ADDRESS_INTERLEAVING) + Position;
	
	Status = LCDTransmit(Value, LCD_IR_REG, TRUE);
    175c:	41 e0       	ldi	r20, 0x01	; 1
    175e:	60 e0       	ldi	r22, 0x00	; 0
    1760:	8d 2f       	mov	r24, r29
    1762:	90 e4       	ldi	r25, 0x40	; 64
    1764:	c9 9f       	mul	r28, r25
    1766:	80 0d       	add	r24, r0
    1768:	11 24       	eor	r1, r1
    176a:	80 68       	ori	r24, 0x80	; 128
    176c:	8e df       	rcall	.-228    	; 0x168a <LCDTransmit>
	
	if (Status)
    176e:	88 23       	and	r24, r24
    1770:	41 f0       	breq	.+16     	; 0x1782 <LCDSetCursorPosition+0x5a>
	{
		gLineNumber = LineNumber;
    1772:	c0 93 43 0b 	sts	0x0B43, r28
		
		gCursorPosition = Position;
    1776:	d0 93 44 0b 	sts	0x0B44, r29
    177a:	03 c0       	rjmp	.+6      	; 0x1782 <LCDSetCursorPosition+0x5a>
}

bool
LCDSetCursorPosition(unsigned char LineNumber, unsigned char Position)
{
	bool Status = FALSE;
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	01 c0       	rjmp	.+2      	; 0x1782 <LCDSetCursorPosition+0x5a>
    1780:	80 e0       	ldi	r24, 0x00	; 0
	}
	
Exit:

	return Status;
}
    1782:	df 91       	pop	r29
    1784:	cf 91       	pop	r28
    1786:	08 95       	ret

00001788 <LCDSetEntryMode>:
	
	//
	// Set Display Shift Flag
	//
	
	if (IsDisplayShift)
    1788:	81 11       	cpse	r24, r1
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <LCDSetEntryMode+0x8>
bool
LCDSetEntryMode(bool IsDisplayShift, bool IsIncrement)
{
	bool Status; 
	
	unsigned char Value = ENTRY_MODE_CTRL;
    178c:	84 e0       	ldi	r24, 0x04	; 4
    178e:	01 c0       	rjmp	.+2      	; 0x1792 <LCDSetEntryMode+0xa>
	// Set Display Shift Flag
	//
	
	if (IsDisplayShift)
	{
		Value |= EM_DISPLAY_SHIFT;
    1790:	85 e0       	ldi	r24, 0x05	; 5
	
	//
	// Set Increment Position Flag
	//
	
	if (IsIncrement)
    1792:	61 11       	cpse	r22, r1
	{
		Value |= INCREMENT_POS;
    1794:	82 60       	ori	r24, 0x02	; 2
	}
	
	Status = LCDTransmit(Value, LCD_IR_REG, TRUE);
    1796:	41 e0       	ldi	r20, 0x01	; 1
    1798:	60 e0       	ldi	r22, 0x00	; 0
    179a:	77 cf       	rjmp	.-274    	; 0x168a <LCDTransmit>

	return Status;

}
    179c:	08 95       	ret

0000179e <LCDShiftCursorOrDisplay>:
	
	//
	// Set Display Shift Flag
	//
	
	if (IsDisplayShift)
    179e:	81 11       	cpse	r24, r1
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <LCDShiftCursorOrDisplay+0x8>
bool
LCDShiftCursorOrDisplay(bool IsDisplayShift, bool IsIncrement)
{
	bool Status;
	
	unsigned char Value = CURSOR_DISPLAY_SHIFT_CTRL;
    17a2:	80 e1       	ldi	r24, 0x10	; 16
    17a4:	01 c0       	rjmp	.+2      	; 0x17a8 <LCDShiftCursorOrDisplay+0xa>
	// Set Display Shift Flag
	//
	
	if (IsDisplayShift)
	{
		Value |= CD_DISPLAY_SHIFT;
    17a6:	88 e1       	ldi	r24, 0x18	; 24
	
	//
	// Set Increment Flag
	//
	
	if (IsIncrement)
    17a8:	61 11       	cpse	r22, r1
	{
		Value |= MOVE_RIGHT;
    17aa:	84 60       	ori	r24, 0x04	; 4
	}
	
	Status = LCDTransmit(Value, LCD_IR_REG, TRUE);
    17ac:	41 e0       	ldi	r20, 0x01	; 1
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	6c cf       	rjmp	.-296    	; 0x168a <LCDTransmit>

	return Status;
}
    17b2:	08 95       	ret

000017b4 <LCDPrint>:
	return Status;
}

bool
LCDPrint(char *String)
{
    17b4:	7f 92       	push	r7
    17b6:	8f 92       	push	r8
    17b8:	9f 92       	push	r9
    17ba:	af 92       	push	r10
    17bc:	bf 92       	push	r11
    17be:	cf 92       	push	r12
    17c0:	df 92       	push	r13
    17c2:	ef 92       	push	r14
    17c4:	ff 92       	push	r15
    17c6:	0f 93       	push	r16
    17c8:	1f 93       	push	r17
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
	
	unsigned long Len;
	
	unsigned long IndexI;
	
	if (!gLCDInitialized)
    17ce:	20 91 47 0b 	lds	r18, 0x0B47
    17d2:	21 11       	cpse	r18, r1
    17d4:	0c c0       	rjmp	.+24     	; 0x17ee <LCDPrint+0x3a>
	{
		SendTrace(ERROR_LEVEL, "LCDPrint - LCD Not Initialized\r\n");
    17d6:	8a e7       	ldi	r24, 0x7A	; 122
    17d8:	96 e0       	ldi	r25, 0x06	; 6
    17da:	9f 93       	push	r25
    17dc:	8f 93       	push	r24
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	8f 93       	push	r24
    17e2:	65 dd       	rcall	.-1334   	; 0x12ae <SendTrace>
		
		goto Exit;
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
}

bool
LCDPrint(char *String)
{
	bool Status = FALSE;
    17ea:	80 e0       	ldi	r24, 0x00	; 0
	
	if (!gLCDInitialized)
	{
		SendTrace(ERROR_LEVEL, "LCDPrint - LCD Not Initialized\r\n");
		
		goto Exit;
    17ec:	66 c0       	rjmp	.+204    	; 0x18ba <LCDPrint+0x106>
	}
	
	Len = strlen(String);
    17ee:	fc 01       	movw	r30, r24
    17f0:	01 90       	ld	r0, Z+
    17f2:	00 20       	and	r0, r0
    17f4:	e9 f7       	brne	.-6      	; 0x17f0 <LCDPrint+0x3c>
    17f6:	31 97       	sbiw	r30, 0x01	; 1
    17f8:	4f 01       	movw	r8, r30
    17fa:	88 1a       	sub	r8, r24
    17fc:	99 0a       	sbc	r9, r25
    17fe:	a1 2c       	mov	r10, r1
    1800:	b1 2c       	mov	r11, r1
	
	//
	// Loop through each character and send it to Data Register
	//
	
	for(IndexI = 0; IndexI < Len; IndexI++)
    1802:	81 14       	cp	r8, r1
    1804:	91 04       	cpc	r9, r1
    1806:	a1 04       	cpc	r10, r1
    1808:	b1 04       	cpc	r11, r1
    180a:	09 f4       	brne	.+2      	; 0x180e <LCDPrint+0x5a>
    180c:	55 c0       	rjmp	.+170    	; 0x18b8 <LCDPrint+0x104>
    180e:	ec 01       	movw	r28, r24
    1810:	c1 2c       	mov	r12, r1
    1812:	d1 2c       	mov	r13, r1
    1814:	76 01       	movw	r14, r12
			
				gLineNumber = (gLineNumber + 1) % gMaxLines;
			
				gCursorPosition = 0;
				
				SendTrace(INFO_LEVEL, "Exceeded Max Chars - %d, %d\r\n", gLineNumber, gCursorPosition);
    1816:	0b e9       	ldi	r16, 0x9B	; 155
    1818:	16 e0       	ldi	r17, 0x06	; 6
    181a:	68 94       	set
    181c:	77 24       	eor	r7, r7
    181e:	72 f8       	bld	r7, 2
	// Loop through each character and send it to Data Register
	//
	
	for(IndexI = 0; IndexI < Len; IndexI++)
	{
		if (gCursorPosition >= gMaxCharacters)
    1820:	90 91 44 0b 	lds	r25, 0x0B44
    1824:	80 91 42 0b 	lds	r24, 0x0B42
    1828:	98 17       	cp	r25, r24
    182a:	58 f1       	brcs	.+86     	; 0x1882 <LCDPrint+0xce>
		{

			if (gIsAutoScroll)
    182c:	80 91 45 0b 	lds	r24, 0x0B45
    1830:	88 23       	and	r24, r24
    1832:	21 f0       	breq	.+8      	; 0x183c <LCDPrint+0x88>
			{
				//
				// If Auto scroll is enabled shit the display
				//
			
				LCDShiftCursorOrDisplay(TRUE, FALSE);
    1834:	60 e0       	ldi	r22, 0x00	; 0
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	b2 df       	rcall	.-156    	; 0x179e <LCDShiftCursorOrDisplay>
    183a:	23 c0       	rjmp	.+70     	; 0x1882 <LCDPrint+0xce>
			{
				//
				// Do word wrap
				//
			
				gLineNumber = (gLineNumber + 1) % gMaxLines;
    183c:	80 91 43 0b 	lds	r24, 0x0B43
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	01 96       	adiw	r24, 0x01	; 1
    1844:	60 91 41 0b 	lds	r22, 0x0B41
    1848:	70 e0       	ldi	r23, 0x00	; 0
    184a:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <__divmodhi4>
    184e:	80 93 43 0b 	sts	0x0B43, r24
			
				gCursorPosition = 0;
    1852:	10 92 44 0b 	sts	0x0B44, r1
				
				SendTrace(INFO_LEVEL, "Exceeded Max Chars - %d, %d\r\n", gLineNumber, gCursorPosition);
    1856:	1f 92       	push	r1
    1858:	1f 92       	push	r1
    185a:	99 27       	eor	r25, r25
    185c:	9f 93       	push	r25
    185e:	8f 93       	push	r24
    1860:	1f 93       	push	r17
    1862:	0f 93       	push	r16
    1864:	7f 92       	push	r7
    1866:	23 dd       	rcall	.-1466   	; 0x12ae <SendTrace>
			
				LCDSetCursorPosition(gLineNumber, gCursorPosition);
    1868:	60 91 44 0b 	lds	r22, 0x0B44
    186c:	80 91 43 0b 	lds	r24, 0x0B43
    1870:	5b df       	rcall	.-330    	; 0x1728 <LCDSetCursorPosition>
    1872:	8d b7       	in	r24, 0x3d	; 61
    1874:	9e b7       	in	r25, 0x3e	; 62
    1876:	07 96       	adiw	r24, 0x07	; 7
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	f8 94       	cli
    187c:	9e bf       	out	0x3e, r25	; 62
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	8d bf       	out	0x3d, r24	; 61
			}
		}
		
		Status = LCDTransmit(*String, LCD_DR_REG, TRUE);
    1882:	41 e0       	ldi	r20, 0x01	; 1
    1884:	61 e0       	ldi	r22, 0x01	; 1
    1886:	89 91       	ld	r24, Y+
    1888:	00 df       	rcall	.-512    	; 0x168a <LCDTransmit>
		
		if (!Status)
    188a:	88 23       	and	r24, r24
    188c:	b1 f0       	breq	.+44     	; 0x18ba <LCDPrint+0x106>
		{
			goto Exit;
		}
		
		gCursorPosition = (gCursorPosition + 1) % MAX_BUFFER_SIZE;
    188e:	20 91 44 0b 	lds	r18, 0x0B44
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	2f 5f       	subi	r18, 0xFF	; 255
    1896:	3f 4f       	sbci	r19, 0xFF	; 255
    1898:	2f 73       	andi	r18, 0x3F	; 63
    189a:	30 78       	andi	r19, 0x80	; 128
    189c:	20 93 44 0b 	sts	0x0B44, r18
	
	//
	// Loop through each character and send it to Data Register
	//
	
	for(IndexI = 0; IndexI < Len; IndexI++)
    18a0:	9f ef       	ldi	r25, 0xFF	; 255
    18a2:	c9 1a       	sub	r12, r25
    18a4:	d9 0a       	sbc	r13, r25
    18a6:	e9 0a       	sbc	r14, r25
    18a8:	f9 0a       	sbc	r15, r25
    18aa:	c8 14       	cp	r12, r8
    18ac:	d9 04       	cpc	r13, r9
    18ae:	ea 04       	cpc	r14, r10
    18b0:	fb 04       	cpc	r15, r11
    18b2:	08 f4       	brcc	.+2      	; 0x18b6 <LCDPrint+0x102>
    18b4:	b5 cf       	rjmp	.-150    	; 0x1820 <LCDPrint+0x6c>
    18b6:	01 c0       	rjmp	.+2      	; 0x18ba <LCDPrint+0x106>
}

bool
LCDPrint(char *String)
{
	bool Status = FALSE;
    18b8:	80 e0       	ldi	r24, 0x00	; 0
	}
	
Exit:

	return Status;
}
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	1f 91       	pop	r17
    18c0:	0f 91       	pop	r16
    18c2:	ff 90       	pop	r15
    18c4:	ef 90       	pop	r14
    18c6:	df 90       	pop	r13
    18c8:	cf 90       	pop	r12
    18ca:	bf 90       	pop	r11
    18cc:	af 90       	pop	r10
    18ce:	9f 90       	pop	r9
    18d0:	8f 90       	pop	r8
    18d2:	7f 90       	pop	r7
    18d4:	08 95       	ret

000018d6 <LCDSetFunctionControl>:
	
	//
	// Set Two Line Display Flag
	//
	
	if(IsTwoLineDisplay)
    18d6:	81 11       	cpse	r24, r1
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <LCDSetFunctionControl+0x8>
bool
LCDSetFunctionControl(bool IsTwoLineDisplay, bool Is5X10Font)
{
	bool Status;
	
	unsigned char Value = FUNC_SET_CTRL;
    18da:	80 e2       	ldi	r24, 0x20	; 32
    18dc:	01 c0       	rjmp	.+2      	; 0x18e0 <LCDSetFunctionControl+0xa>
	// Set Two Line Display Flag
	//
	
	if(IsTwoLineDisplay)
	{	
		Value |= TWO_LINES;
    18de:	88 e2       	ldi	r24, 0x28	; 40
	
	//
	// Set 5X10 Font Flag
	//
	
	if(Is5X10Font)
    18e0:	61 11       	cpse	r22, r1
	{
		Value |= FONT_5X10;
    18e2:	84 60       	ori	r24, 0x04	; 4
	}
	
	Status = LCDTransmit(Value, LCD_IR_REG, TRUE);
    18e4:	41 e0       	ldi	r20, 0x01	; 1
    18e6:	60 e0       	ldi	r22, 0x00	; 0
    18e8:	d0 ce       	rjmp	.-608    	; 0x168a <LCDTransmit>

	return Status;
}
    18ea:	08 95       	ret

000018ec <InitLCD>:
// Public Functions
//

bool
InitLCD(PLCD_INIT_PARAMS InitParams)
{
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	ec 01       	movw	r28, r24
	bool IsTwoLineDisplay = FALSE;
		
	if (InitParams->MaxCharacters == 0 || InitParams->MaxLines == 0)
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	88 23       	and	r24, r24
    18f6:	b9 f1       	breq	.+110    	; 0x1966 <InitLCD+0x7a>
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	88 23       	and	r24, r24
    18fc:	a1 f1       	breq	.+104    	; 0x1966 <InitLCD+0x7a>
	
	//
	// Set Slave Address
	//
	
	gSlaveAddress.AsUINT8 = InitParams->SlaveAddress.AsUINT8;
    18fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1900:	80 93 6c 0b 	sts	0x0B6C, r24
	
	//
	// Clear Display
	//
		
	LCDClearDisplay();
    1904:	f8 de       	rcall	.-528    	; 0x16f6 <LCDClearDisplay>
	
	//
	// Set Function Set Control
	//
	
	gMaxLines = InitParams->MaxLines;
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	80 93 41 0b 	sts	0x0B41, r24
	
	gMaxCharacters = InitParams->MaxCharacters;
    190c:	9b 81       	ldd	r25, Y+3	; 0x03
    190e:	90 93 42 0b 	sts	0x0B42, r25
	
	if (gMaxLines > 1)
    1912:	82 30       	cpi	r24, 0x02	; 2
    1914:	28 f0       	brcs	.+10     	; 0x1920 <InitLCD+0x34>
	{
		InitParams->Flags.Is5X10Font = 0;
    1916:	88 81       	ld	r24, Y
    1918:	8f 7d       	andi	r24, 0xDF	; 223
    191a:	88 83       	st	Y, r24
		
		IsTwoLineDisplay = TRUE;
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	01 c0       	rjmp	.+2      	; 0x1922 <InitLCD+0x36>
//

bool
InitLCD(PLCD_INIT_PARAMS InitParams)
{
	bool IsTwoLineDisplay = FALSE;
    1920:	80 e0       	ldi	r24, 0x00	; 0
		InitParams->Flags.Is5X10Font = 0;
		
		IsTwoLineDisplay = TRUE;
	}
	
	LCDSetFunctionControl(IsTwoLineDisplay, InitParams->Flags.Is5X10Font);
    1922:	68 81       	ld	r22, Y
    1924:	65 fb       	bst	r22, 5
    1926:	66 27       	eor	r22, r22
    1928:	60 f9       	bld	r22, 0
    192a:	d5 df       	rcall	.-86     	; 0x18d6 <LCDSetFunctionControl>
	//
	
	LCDSetDisplayControl(InitParams->Flags.IsDisplayOn, 
						 InitParams->Flags.IsCursorOn, 
						 InitParams->Flags.IsCursorBlinkOn,
						 InitParams->Flags.IsBackLightOn);
    192c:	88 81       	ld	r24, Y
    192e:	86 fb       	bst	r24, 6
    1930:	22 27       	eor	r18, r18
    1932:	20 f9       	bld	r18, 0
	// Set Display ON/OFF Control
	//
	
	LCDSetDisplayControl(InitParams->Flags.IsDisplayOn, 
						 InitParams->Flags.IsCursorOn, 
						 InitParams->Flags.IsCursorBlinkOn,
    1934:	84 fb       	bst	r24, 4
    1936:	44 27       	eor	r20, r20
    1938:	40 f9       	bld	r20, 0
	//
	// Set Display ON/OFF Control
	//
	
	LCDSetDisplayControl(InitParams->Flags.IsDisplayOn, 
						 InitParams->Flags.IsCursorOn, 
    193a:	83 fb       	bst	r24, 3
    193c:	66 27       	eor	r22, r22
    193e:	60 f9       	bld	r22, 0
	
	//
	// Set Display ON/OFF Control
	//
	
	LCDSetDisplayControl(InitParams->Flags.IsDisplayOn, 
    1940:	82 fb       	bst	r24, 2
    1942:	88 27       	eor	r24, r24
    1944:	80 f9       	bld	r24, 0
    1946:	e1 de       	rcall	.-574    	; 0x170a <LCDSetDisplayControl>
	
	//
	// Set Entry Mode
	//
	
	LCDSetEntryMode(InitParams->Flags.IsIncrementPos, InitParams->Flags.IsDisplayShift);
    1948:	88 81       	ld	r24, Y
    194a:	68 2f       	mov	r22, r24
    194c:	61 70       	andi	r22, 0x01	; 1
    194e:	86 95       	lsr	r24
    1950:	81 70       	andi	r24, 0x01	; 1
    1952:	1a df       	rcall	.-460    	; 0x1788 <LCDSetEntryMode>
	
	//
	// Set Auto Scroll Flag
	//
	
	gIsAutoScroll = InitParams->Flags.IsAutoScroll;
    1954:	88 81       	ld	r24, Y
    1956:	87 fb       	bst	r24, 7
    1958:	88 27       	eor	r24, r24
    195a:	80 f9       	bld	r24, 0
    195c:	80 93 45 0b 	sts	0x0B45, r24
	
	gLCDInitialized = TRUE;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	80 93 47 0b 	sts	0x0B47, r24
	
Exit:

	return gLCDInitialized;

}
    1966:	80 91 47 0b 	lds	r24, 0x0B47
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	08 95       	ret

00001970 <TCFlushFIFO>:
	{
		SendTrace(ERROR_LEVEL, "GetRetransmitPacketCount - Read ObserveTx Register Failed\r\n");
	}
	
	return Value;	
}
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	1f 92       	push	r1
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	81 11       	cpse	r24, r1
    197c:	03 c0       	rjmp	.+6      	; 0x1984 <TCFlushFIFO+0x14>
    197e:	82 ee       	ldi	r24, 0xE2	; 226
    1980:	89 83       	std	Y+1, r24	; 0x01
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <TCFlushFIFO+0x18>
    1984:	81 ee       	ldi	r24, 0xE1	; 225
    1986:	89 83       	std	Y+1, r24	; 0x01
    1988:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SPIBeginTransfer>
    198c:	21 e0       	ldi	r18, 0x01	; 1
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	40 e0       	ldi	r20, 0x00	; 0
    1992:	50 e0       	ldi	r21, 0x00	; 0
    1994:	be 01       	movw	r22, r28
    1996:	6f 5f       	subi	r22, 0xFF	; 255
    1998:	7f 4f       	sbci	r23, 0xFF	; 255
    199a:	cb 01       	movw	r24, r22
    199c:	0e 94 13 16 	call	0x2c26	; 0x2c26 <SPIMasterTransfer>
    19a0:	0e 94 11 16 	call	0x2c22	; 0x2c22 <SPIEndTransfer>
    19a4:	0f 90       	pop	r0
    19a6:	df 91       	pop	r29
    19a8:	cf 91       	pop	r28
    19aa:	08 95       	ret

000019ac <TCTransmit>:
    19ac:	cf 92       	push	r12
    19ae:	df 92       	push	r13
    19b0:	ef 92       	push	r14
    19b2:	ff 92       	push	r15
    19b4:	0f 93       	push	r16
    19b6:	1f 93       	push	r17
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	a0 97       	sbiw	r28, 0x20	; 32
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	cd bf       	out	0x3d, r28	; 61
    19cc:	8c 01       	movw	r16, r24
    19ce:	7b 01       	movw	r14, r22
    19d0:	d4 2e       	mov	r13, r20
    19d2:	fc 01       	movw	r30, r24
    19d4:	80 81       	ld	r24, Z
    19d6:	80 3a       	cpi	r24, 0xA0	; 160
    19d8:	c1 f4       	brne	.+48     	; 0x1a0a <TCTransmit+0x5e>
    19da:	80 91 8d 0b 	lds	r24, 0x0B8D
    19de:	81 11       	cpse	r24, r1
    19e0:	16 c0       	rjmp	.+44     	; 0x1a0e <TCTransmit+0x62>
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	ff e1       	ldi	r31, 0x1F	; 31
    19e6:	f4 17       	cp	r31, r20
    19e8:	08 f4       	brcc	.+2      	; 0x19ec <TCTransmit+0x40>
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	c8 2e       	mov	r12, r24
    19ee:	88 23       	and	r24, r24
    19f0:	79 f0       	breq	.+30     	; 0x1a10 <TCTransmit+0x64>
    19f2:	8d 2d       	mov	r24, r13
    19f4:	e1 e0       	ldi	r30, 0x01	; 1
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	ec 0f       	add	r30, r28
    19fa:	fd 1f       	adc	r31, r29
    19fc:	e8 0f       	add	r30, r24
    19fe:	f1 1d       	adc	r31, r1
    1a00:	10 82       	st	Z, r1
    1a02:	8f 5f       	subi	r24, 0xFF	; 255
    1a04:	80 32       	cpi	r24, 0x20	; 32
    1a06:	b1 f7       	brne	.-20     	; 0x19f4 <TCTransmit+0x48>
    1a08:	03 c0       	rjmp	.+6      	; 0x1a10 <TCTransmit+0x64>
    1a0a:	c1 2c       	mov	r12, r1
    1a0c:	01 c0       	rjmp	.+2      	; 0x1a10 <TCTransmit+0x64>
    1a0e:	c1 2c       	mov	r12, r1
    1a10:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SPIBeginTransfer>
    1a14:	21 e0       	ldi	r18, 0x01	; 1
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e0       	ldi	r20, 0x00	; 0
    1a1a:	50 e0       	ldi	r21, 0x00	; 0
    1a1c:	b8 01       	movw	r22, r16
    1a1e:	c8 01       	movw	r24, r16
    1a20:	0e 94 13 16 	call	0x2c26	; 0x2c26 <SPIMasterTransfer>
    1a24:	18 2f       	mov	r17, r24
    1a26:	81 11       	cpse	r24, r1
    1a28:	0b c0       	rjmp	.+22     	; 0x1a40 <TCTransmit+0x94>
    1a2a:	29 eb       	ldi	r18, 0xB9	; 185
    1a2c:	36 e0       	ldi	r19, 0x06	; 6
    1a2e:	3f 93       	push	r19
    1a30:	2f 93       	push	r18
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	8f 93       	push	r24
    1a36:	3b dc       	rcall	.-1930   	; 0x12ae <SendTrace>
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	3a c0       	rjmp	.+116    	; 0x1ab4 <TCTransmit+0x108>
    1a40:	2d 2d       	mov	r18, r13
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e0       	ldi	r20, 0x00	; 0
    1a46:	50 e0       	ldi	r21, 0x00	; 0
    1a48:	be 01       	movw	r22, r28
    1a4a:	6f 5f       	subi	r22, 0xFF	; 255
    1a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4e:	c7 01       	movw	r24, r14
    1a50:	0e 94 13 16 	call	0x2c26	; 0x2c26 <SPIMasterTransfer>
    1a54:	18 2f       	mov	r17, r24
    1a56:	81 11       	cpse	r24, r1
    1a58:	0b c0       	rjmp	.+22     	; 0x1a70 <TCTransmit+0xc4>
    1a5a:	29 eb       	ldi	r18, 0xB9	; 185
    1a5c:	36 e0       	ldi	r19, 0x06	; 6
    1a5e:	3f 93       	push	r19
    1a60:	2f 93       	push	r18
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	8f 93       	push	r24
    1a66:	23 dc       	rcall	.-1978   	; 0x12ae <SendTrace>
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	22 c0       	rjmp	.+68     	; 0x1ab4 <TCTransmit+0x108>
    1a70:	cc 20       	and	r12, r12
    1a72:	01 f1       	breq	.+64     	; 0x1ab4 <TCTransmit+0x108>
    1a74:	4d 2d       	mov	r20, r13
    1a76:	50 e0       	ldi	r21, 0x00	; 0
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	8c 0f       	add	r24, r28
    1a7e:	9d 1f       	adc	r25, r29
    1a80:	84 0f       	add	r24, r20
    1a82:	95 1f       	adc	r25, r21
    1a84:	20 e2       	ldi	r18, 0x20	; 32
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	24 1b       	sub	r18, r20
    1a8a:	35 0b       	sbc	r19, r21
    1a8c:	44 27       	eor	r20, r20
    1a8e:	37 fd       	sbrc	r19, 7
    1a90:	40 95       	com	r20
    1a92:	54 2f       	mov	r21, r20
    1a94:	bc 01       	movw	r22, r24
    1a96:	0e 94 13 16 	call	0x2c26	; 0x2c26 <SPIMasterTransfer>
    1a9a:	18 2f       	mov	r17, r24
    1a9c:	81 11       	cpse	r24, r1
    1a9e:	0a c0       	rjmp	.+20     	; 0x1ab4 <TCTransmit+0x108>
    1aa0:	29 eb       	ldi	r18, 0xB9	; 185
    1aa2:	36 e0       	ldi	r19, 0x06	; 6
    1aa4:	3f 93       	push	r19
    1aa6:	2f 93       	push	r18
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	8f 93       	push	r24
    1aac:	00 dc       	rcall	.-2048   	; 0x12ae <SendTrace>
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	0e 94 11 16 	call	0x2c22	; 0x2c22 <SPIEndTransfer>
    1ab8:	81 2f       	mov	r24, r17
    1aba:	a0 96       	adiw	r28, 0x20	; 32
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	cd bf       	out	0x3d, r28	; 61
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	1f 91       	pop	r17
    1acc:	0f 91       	pop	r16
    1ace:	ff 90       	pop	r15
    1ad0:	ef 90       	pop	r14
    1ad2:	df 90       	pop	r13
    1ad4:	cf 90       	pop	r12
    1ad6:	08 95       	ret

00001ad8 <TCReceive>:
    1ad8:	ff 92       	push	r15
    1ada:	0f 93       	push	r16
    1adc:	1f 93       	push	r17
    1ade:	cf 93       	push	r28
    1ae0:	df 93       	push	r29
    1ae2:	ec 01       	movw	r28, r24
    1ae4:	8b 01       	movw	r16, r22
    1ae6:	f4 2e       	mov	r15, r20
    1ae8:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <SPIBeginTransfer>
    1aec:	21 e0       	ldi	r18, 0x01	; 1
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	40 e0       	ldi	r20, 0x00	; 0
    1af2:	50 e0       	ldi	r21, 0x00	; 0
    1af4:	be 01       	movw	r22, r28
    1af6:	ce 01       	movw	r24, r28
    1af8:	0e 94 13 16 	call	0x2c26	; 0x2c26 <SPIMasterTransfer>
    1afc:	c8 2f       	mov	r28, r24
    1afe:	81 11       	cpse	r24, r1
    1b00:	0b c0       	rjmp	.+22     	; 0x1b18 <TCReceive+0x40>
    1b02:	20 e4       	ldi	r18, 0x40	; 64
    1b04:	37 e0       	ldi	r19, 0x07	; 7
    1b06:	3f 93       	push	r19
    1b08:	2f 93       	push	r18
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	8f 93       	push	r24
    1b0e:	cf db       	rcall	.-2146   	; 0x12ae <SendTrace>
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	16 c0       	rjmp	.+44     	; 0x1b44 <TCReceive+0x6c>
    1b18:	2f 2d       	mov	r18, r15
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e0       	ldi	r20, 0x00	; 0
    1b1e:	50 e0       	ldi	r21, 0x00	; 0
    1b20:	b8 01       	movw	r22, r16
    1b22:	8d e6       	ldi	r24, 0x6D	; 109
    1b24:	9b e0       	ldi	r25, 0x0B	; 11
    1b26:	0e 94 13 16 	call	0x2c26	; 0x2c26 <SPIMasterTransfer>
    1b2a:	c8 2f       	mov	r28, r24
    1b2c:	81 11       	cpse	r24, r1
    1b2e:	0a c0       	rjmp	.+20     	; 0x1b44 <TCReceive+0x6c>
    1b30:	20 e4       	ldi	r18, 0x40	; 64
    1b32:	37 e0       	ldi	r19, 0x07	; 7
    1b34:	3f 93       	push	r19
    1b36:	2f 93       	push	r18
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	8f 93       	push	r24
    1b3c:	b8 db       	rcall	.-2192   	; 0x12ae <SendTrace>
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	0e 94 11 16 	call	0x2c22	; 0x2c22 <SPIEndTransfer>
    1b48:	8c 2f       	mov	r24, r28
    1b4a:	df 91       	pop	r29
    1b4c:	cf 91       	pop	r28
    1b4e:	1f 91       	pop	r17
    1b50:	0f 91       	pop	r16
    1b52:	ff 90       	pop	r15
    1b54:	08 95       	ret

00001b56 <TCGetReceivedPayloadLength>:
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	1f 92       	push	r1
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	8c 01       	movw	r16, r24
    1b66:	80 91 54 0b 	lds	r24, 0x0B54
    1b6a:	81 11       	cpse	r24, r1
    1b6c:	0b c0       	rjmp	.+22     	; 0x1b84 <TCGetReceivedPayloadLength+0x2e>
    1b6e:	8c e5       	ldi	r24, 0x5C	; 92
    1b70:	97 e0       	ldi	r25, 0x07	; 7
    1b72:	9f 93       	push	r25
    1b74:	8f 93       	push	r24
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	8f 93       	push	r24
    1b7a:	99 db       	rcall	.-2254   	; 0x12ae <SendTrace>
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	27 c0       	rjmp	.+78     	; 0x1bd2 <TCGetReceivedPayloadLength+0x7c>
    1b84:	f8 01       	movw	r30, r16
    1b86:	10 82       	st	Z, r1
    1b88:	80 91 8d 0b 	lds	r24, 0x0B8D
    1b8c:	88 23       	and	r24, r24
    1b8e:	e1 f0       	breq	.+56     	; 0x1bc8 <TCGetReceivedPayloadLength+0x72>
    1b90:	80 e6       	ldi	r24, 0x60	; 96
    1b92:	89 83       	std	Y+1, r24	; 0x01
    1b94:	41 e0       	ldi	r20, 0x01	; 1
    1b96:	b8 01       	movw	r22, r16
    1b98:	ce 01       	movw	r24, r28
    1b9a:	01 96       	adiw	r24, 0x01	; 1
    1b9c:	9d df       	rcall	.-198    	; 0x1ad8 <TCReceive>
    1b9e:	88 23       	and	r24, r24
    1ba0:	21 f0       	breq	.+8      	; 0x1baa <TCGetReceivedPayloadLength+0x54>
    1ba2:	f8 01       	movw	r30, r16
    1ba4:	80 81       	ld	r24, Z
    1ba6:	81 32       	cpi	r24, 0x21	; 33
    1ba8:	a0 f0       	brcs	.+40     	; 0x1bd2 <TCGetReceivedPayloadLength+0x7c>
    1baa:	f8 01       	movw	r30, r16
    1bac:	10 82       	st	Z, r1
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	df de       	rcall	.-578    	; 0x1970 <TCFlushFIFO>
    1bb2:	85 e9       	ldi	r24, 0x95	; 149
    1bb4:	97 e0       	ldi	r25, 0x07	; 7
    1bb6:	9f 93       	push	r25
    1bb8:	8f 93       	push	r24
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	8f 93       	push	r24
    1bbe:	77 db       	rcall	.-2322   	; 0x12ae <SendTrace>
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	05 c0       	rjmp	.+10     	; 0x1bd2 <TCGetReceivedPayloadLength+0x7c>
    1bc8:	f8 01       	movw	r30, r16
    1bca:	80 81       	ld	r24, Z
    1bcc:	80 7c       	andi	r24, 0xC0	; 192
    1bce:	80 62       	ori	r24, 0x20	; 32
    1bd0:	80 83       	st	Z, r24
    1bd2:	0f 90       	pop	r0
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	1f 91       	pop	r17
    1bda:	0f 91       	pop	r16
    1bdc:	08 95       	ret

00001bde <TCReceivePayload>:
    1bde:	ef 92       	push	r14
    1be0:	ff 92       	push	r15
    1be2:	0f 93       	push	r16
    1be4:	1f 93       	push	r17
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <TCReceivePayload+0xe>
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	7c 01       	movw	r14, r24
    1bf2:	8b 01       	movw	r16, r22
    1bf4:	80 91 54 0b 	lds	r24, 0x0B54
    1bf8:	81 11       	cpse	r24, r1
    1bfa:	0c c0       	rjmp	.+24     	; 0x1c14 <TCReceivePayload+0x36>
    1bfc:	89 ed       	ldi	r24, 0xD9	; 217
    1bfe:	97 e0       	ldi	r25, 0x07	; 7
    1c00:	9f 93       	push	r25
    1c02:	8f 93       	push	r24
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	8f 93       	push	r24
    1c08:	52 db       	rcall	.-2396   	; 0x12ae <SendTrace>
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	27 c0       	rjmp	.+78     	; 0x1c62 <TCReceivePayload+0x84>
    1c14:	19 82       	std	Y+1, r1	; 0x01
    1c16:	ce 01       	movw	r24, r28
    1c18:	01 96       	adiw	r24, 0x01	; 1
    1c1a:	9d df       	rcall	.-198    	; 0x1b56 <TCGetReceivedPayloadLength>
    1c1c:	f8 01       	movw	r30, r16
    1c1e:	20 81       	ld	r18, Z
    1c20:	2f 73       	andi	r18, 0x3F	; 63
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	8f 73       	andi	r24, 0x3F	; 63
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	82 17       	cp	r24, r18
    1c2c:	93 07       	cpc	r25, r19
    1c2e:	8c f4       	brge	.+34     	; 0x1c52 <TCReceivePayload+0x74>
    1c30:	88 e0       	ldi	r24, 0x08	; 8
    1c32:	98 e0       	ldi	r25, 0x08	; 8
    1c34:	9f 93       	push	r25
    1c36:	8f 93       	push	r24
    1c38:	84 e0       	ldi	r24, 0x04	; 4
    1c3a:	8f 93       	push	r24
    1c3c:	38 db       	rcall	.-2448   	; 0x12ae <SendTrace>
    1c3e:	99 81       	ldd	r25, Y+1	; 0x01
    1c40:	9f 73       	andi	r25, 0x3F	; 63
    1c42:	f8 01       	movw	r30, r16
    1c44:	80 81       	ld	r24, Z
    1c46:	80 7c       	andi	r24, 0xC0	; 192
    1c48:	89 2b       	or	r24, r25
    1c4a:	80 83       	st	Z, r24
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	81 e6       	ldi	r24, 0x61	; 97
    1c54:	8a 83       	std	Y+2, r24	; 0x02
    1c56:	f8 01       	movw	r30, r16
    1c58:	40 81       	ld	r20, Z
    1c5a:	b7 01       	movw	r22, r14
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	02 96       	adiw	r24, 0x02	; 2
    1c60:	3b df       	rcall	.-394    	; 0x1ad8 <TCReceive>
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	df 91       	pop	r29
    1c68:	cf 91       	pop	r28
    1c6a:	1f 91       	pop	r17
    1c6c:	0f 91       	pop	r16
    1c6e:	ff 90       	pop	r15
    1c70:	ef 90       	pop	r14
    1c72:	08 95       	ret

00001c74 <TCReadReg>:
    1c74:	cf 93       	push	r28
    1c76:	df 93       	push	r29
    1c78:	1f 92       	push	r1
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	89 83       	std	Y+1, r24	; 0x01
    1c80:	ce 01       	movw	r24, r28
    1c82:	01 96       	adiw	r24, 0x01	; 1
    1c84:	29 df       	rcall	.-430    	; 0x1ad8 <TCReceive>
    1c86:	0f 90       	pop	r0
    1c88:	df 91       	pop	r29
    1c8a:	cf 91       	pop	r28
    1c8c:	08 95       	ret

00001c8e <TCWriteReg>:
	TCEndTransfer();
}

bool
TCWriteReg(unsigned char RegOffset, PVOID Value, unsigned char Length)
{	
    1c8e:	0f 93       	push	r16
    1c90:	1f 93       	push	r17
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	00 d0       	rcall	.+0      	; 0x1c98 <TCWriteReg+0xa>
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	18 2f       	mov	r17, r24
	unsigned char CommandStatus;
	
	unsigned char ReadValue = 0;
    1c9e:	1a 82       	std	Y+2, r1	; 0x02
	
	//
	// Initialize Command Register
	//
	
	CommandStatus = W_REGISTER | RegOffset;
    1ca0:	80 62       	ori	r24, 0x20	; 32
    1ca2:	89 83       	std	Y+1, r24	; 0x01
	
	Status = TCTransmit(&CommandStatus, Value, Length);
    1ca4:	ce 01       	movw	r24, r28
    1ca6:	01 96       	adiw	r24, 0x01	; 1
    1ca8:	81 de       	rcall	.-766    	; 0x19ac <TCTransmit>
    1caa:	08 2f       	mov	r16, r24
	
	TCReadReg(RegOffset, &ReadValue, 1);
    1cac:	41 e0       	ldi	r20, 0x01	; 1
    1cae:	be 01       	movw	r22, r28
    1cb0:	6e 5f       	subi	r22, 0xFE	; 254
    1cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb4:	81 2f       	mov	r24, r17
    1cb6:	de df       	rcall	.-68     	; 0x1c74 <TCReadReg>
	
	SendTrace(INFO_LEVEL, "Reg Offset = 0x%x Value = 0x%x\r\n", RegOffset, ReadValue);
    1cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cba:	1f 92       	push	r1
    1cbc:	8f 93       	push	r24
    1cbe:	1f 92       	push	r1
    1cc0:	1f 93       	push	r17
    1cc2:	26 e2       	ldi	r18, 0x26	; 38
    1cc4:	39 e0       	ldi	r19, 0x09	; 9
    1cc6:	3f 93       	push	r19
    1cc8:	2f 93       	push	r18
    1cca:	84 e0       	ldi	r24, 0x04	; 4
    1ccc:	8f 93       	push	r24
    1cce:	ef da       	rcall	.-2594   	; 0x12ae <SendTrace>
	
	return Status;
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
}
    1cda:	80 2f       	mov	r24, r16
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	df 91       	pop	r29
    1ce2:	cf 91       	pop	r28
    1ce4:	1f 91       	pop	r17
    1ce6:	0f 91       	pop	r16
    1ce8:	08 95       	ret

00001cea <InitTransceiver>:
// Public Functions
//

bool
InitTransceiver (PTRANSCEIVER_INIT_PARAMS InitParams)
{	
    1cea:	ef 92       	push	r14
    1cec:	ff 92       	push	r15
    1cee:	0f 93       	push	r16
    1cf0:	1f 93       	push	r17
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	28 97       	sbiw	r28, 0x08	; 8
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	7c 01       	movw	r14, r24
	
	FEATURE FeatureReg;
	
	unsigned char IndexI;
	
	if (InitParams == NULL)
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	59 f4       	brne	.+22     	; 0x1d22 <InitTransceiver+0x38>
	{
		SendTrace(ERROR_LEVEL, "InitTransceiver - Incorrect Initialization Parameters\r\n");
    1d0c:	87 e4       	ldi	r24, 0x47	; 71
    1d0e:	99 e0       	ldi	r25, 0x09	; 9
    1d10:	9f 93       	push	r25
    1d12:	8f 93       	push	r24
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	8f 93       	push	r24
    1d18:	ca da       	rcall	.-2668   	; 0x12ae <SendTrace>
		
		goto Exit;
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	30 c1       	rjmp	.+608    	; 0x1f82 <InitTransceiver+0x298>
	}
	
	if (gTransceiverInitialized)
    1d22:	80 91 54 0b 	lds	r24, 0x0B54
    1d26:	88 23       	and	r24, r24
    1d28:	59 f0       	breq	.+22     	; 0x1d40 <InitTransceiver+0x56>
	{
		SendTrace(ERROR_LEVEL, "InitTransceiver - Transceiver Already Initialized\r\n");
    1d2a:	8f e7       	ldi	r24, 0x7F	; 127
    1d2c:	99 e0       	ldi	r25, 0x09	; 9
    1d2e:	9f 93       	push	r25
    1d30:	8f 93       	push	r24
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	8f 93       	push	r24
    1d36:	bb da       	rcall	.-2698   	; 0x12ae <SendTrace>
		
		goto Exit;
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	0f 90       	pop	r0
    1d3e:	21 c1       	rjmp	.+578    	; 0x1f82 <InitTransceiver+0x298>
    1d40:	ed e6       	ldi	r30, 0x6D	; 109
    1d42:	fb e0       	ldi	r31, 0x0B	; 11
    1d44:	2d e8       	ldi	r18, 0x8D	; 141
    1d46:	3b e0       	ldi	r19, 0x0B	; 11
	// Initialize NOP Buffer. The is required for all Receive operations.
	//
	
	for (IndexI = 0; IndexI < MAX_PAYLOAD_LENGTH; IndexI++)
	{
		gNOPBuffer[IndexI] = NOP;
    1d48:	8f ef       	ldi	r24, 0xFF	; 255
    1d4a:	81 93       	st	Z+, r24
	
	//
	// Initialize NOP Buffer. The is required for all Receive operations.
	//
	
	for (IndexI = 0; IndexI < MAX_PAYLOAD_LENGTH; IndexI++)
    1d4c:	e2 17       	cp	r30, r18
    1d4e:	f3 07       	cpc	r31, r19
    1d50:	e1 f7       	brne	.-8      	; 0x1d4a <InitTransceiver+0x60>
	//
	// Initialize Data Direction Registers
	// Make CE (PC7) output.
	// 
	
	DDRC |= (1 << PORTC7);
    1d52:	3f 9a       	sbi	0x07, 7	; 7
	
	//
	// Enable Interrupts
	//
	
	if (InitParams->MaxRTCallback &&
    1d54:	f7 01       	movw	r30, r14
    1d56:	84 89       	ldd	r24, Z+20	; 0x14
    1d58:	95 89       	ldd	r25, Z+21	; 0x15
    1d5a:	89 2b       	or	r24, r25
    1d5c:	99 f0       	breq	.+38     	; 0x1d84 <InitTransceiver+0x9a>
    1d5e:	80 8d       	ldd	r24, Z+24	; 0x18
    1d60:	91 8d       	ldd	r25, Z+25	; 0x19
    1d62:	89 2b       	or	r24, r25
    1d64:	79 f0       	breq	.+30     	; 0x1d84 <InitTransceiver+0x9a>
		InitParams->RxDRCallback &&
    1d66:	84 8d       	ldd	r24, Z+28	; 0x1c
    1d68:	95 8d       	ldd	r25, Z+29	; 0x1d
    1d6a:	89 2b       	or	r24, r25
    1d6c:	59 f0       	breq	.+22     	; 0x1d84 <InitTransceiver+0x9a>
		InitParams->TxDSCallback)
	{
		if (!RegisterExtInterrupt(EXTINT_INT2, 
    1d6e:	01 e0       	ldi	r16, 0x01	; 1
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	46 e5       	ldi	r20, 0x56	; 86
    1d76:	50 e1       	ldi	r21, 0x10	; 16
    1d78:	62 e0       	ldi	r22, 0x02	; 2
    1d7a:	82 e0       	ldi	r24, 0x02	; 2
    1d7c:	1f d2       	rcall	.+1086   	; 0x21bc <RegisterExtInterrupt>
    1d7e:	88 23       	and	r24, r24
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <InitTransceiver+0x9a>
    1d82:	ff c0       	rjmp	.+510    	; 0x1f82 <InitTransceiver+0x298>
	
	//
	// Wait for Transceiver to Settle
	//
	
	CE_LOW();
    1d84:	47 98       	cbi	0x08, 7	; 8
    1d86:	ff ef       	ldi	r31, 0xFF	; 255
    1d88:	20 e7       	ldi	r18, 0x70	; 112
    1d8a:	82 e0       	ldi	r24, 0x02	; 2
    1d8c:	f1 50       	subi	r31, 0x01	; 1
    1d8e:	20 40       	sbci	r18, 0x00	; 0
    1d90:	80 40       	sbci	r24, 0x00	; 0
    1d92:	e1 f7       	brne	.-8      	; 0x1d8c <InitTransceiver+0xa2>
    1d94:	00 c0       	rjmp	.+0      	; 0x1d96 <InitTransceiver+0xac>
    1d96:	00 00       	nop
	
	//
	// Initialize Global Variables
	//
	
	gIsAutoAcknowledgeEnabled = InitParams->IsAutoAcknowledgeEnabled;
    1d98:	f7 01       	movw	r30, r14
    1d9a:	80 a1       	ldd	r24, Z+32	; 0x20
    1d9c:	80 93 8d 0b 	sts	0x0B8D, r24
	
	//
	// Initialize Callbacks
	//
	
	gMaxRTCallback			= InitParams->MaxRTCallback;
    1da0:	84 89       	ldd	r24, Z+20	; 0x14
    1da2:	95 89       	ldd	r25, Z+21	; 0x15
    1da4:	90 93 53 0b 	sts	0x0B53, r25
    1da8:	80 93 52 0b 	sts	0x0B52, r24
	
	gMaxRTCallbackContext	= InitParams->MaxRTCallbackContext;
    1dac:	86 89       	ldd	r24, Z+22	; 0x16
    1dae:	97 89       	ldd	r25, Z+23	; 0x17
    1db0:	90 93 51 0b 	sts	0x0B51, r25
    1db4:	80 93 50 0b 	sts	0x0B50, r24
	
	gRxDRCallback			= InitParams->RxDRCallback;
    1db8:	80 8d       	ldd	r24, Z+24	; 0x18
    1dba:	91 8d       	ldd	r25, Z+25	; 0x19
    1dbc:	90 93 4f 0b 	sts	0x0B4F, r25
    1dc0:	80 93 4e 0b 	sts	0x0B4E, r24
	
	gRxDRCallbackContext	= InitParams->RxDRCallbackContext;
    1dc4:	82 8d       	ldd	r24, Z+26	; 0x1a
    1dc6:	93 8d       	ldd	r25, Z+27	; 0x1b
    1dc8:	90 93 4d 0b 	sts	0x0B4D, r25
    1dcc:	80 93 4c 0b 	sts	0x0B4C, r24
	
	gTxDSCallback			= InitParams->TxDSCallback;
    1dd0:	84 8d       	ldd	r24, Z+28	; 0x1c
    1dd2:	95 8d       	ldd	r25, Z+29	; 0x1d
    1dd4:	90 93 4b 0b 	sts	0x0B4B, r25
    1dd8:	80 93 4a 0b 	sts	0x0B4A, r24
	
	gTxDSCallbackContext	= InitParams->TxDSCallbackContext;
    1ddc:	86 8d       	ldd	r24, Z+30	; 0x1e
    1dde:	97 8d       	ldd	r25, Z+31	; 0x1f
    1de0:	90 93 49 0b 	sts	0x0B49, r25
    1de4:	80 93 48 0b 	sts	0x0B48, r24
	
	//
	// Initialize SPI Transfer
	//

	TCInitTransfer();
    1de8:	ba d1       	rcall	.+884    	; 0x215e <TCInitTransfer>
	
	//
	// Initialize values of Config Register
	//
	
	ConfigReg.AsUINT8	= 0;
    1dea:	19 82       	std	Y+1, r1	; 0x01
	
	if (InitParams->Mode == RECEIVER)
    1dec:	f7 01       	movw	r30, r14
    1dee:	80 81       	ld	r24, Z
    1df0:	81 11       	cpse	r24, r1
    1df2:	02 c0       	rjmp	.+4      	; 0x1df8 <InitTransceiver+0x10e>
	{	
		ConfigReg.PRIM_RX	= 1;
    1df4:	81 60       	ori	r24, 0x01	; 1
    1df6:	89 83       	std	Y+1, r24	; 0x01
	}
	
	ConfigReg.PWR_UP	= 1;
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
	
	ConfigReg.EN_CRC	= 1;
    1dfa:	82 60       	ori	r24, 0x02	; 2
    1dfc:	88 60       	ori	r24, 0x08	; 8
    1dfe:	89 83       	std	Y+1, r24	; 0x01
	
	
	TCWriteReg(CONFIG_OFFSET, &ConfigReg.AsUINT8, 1);
    1e00:	41 e0       	ldi	r20, 0x01	; 1
    1e02:	be 01       	movw	r22, r28
    1e04:	6f 5f       	subi	r22, 0xFF	; 255
    1e06:	7f 4f       	sbci	r23, 0xFF	; 255
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	41 df       	rcall	.-382    	; 0x1c8e <TCWriteReg>
	
	ConfigReg.AsUINT8 = 0;
    1e0c:	19 82       	std	Y+1, r1	; 0x01
	
	//
	// Initialize EN_AA Register
	//
		
	EnAA.AsUINT8 = 0;
    1e0e:	1a 82       	std	Y+2, r1	; 0x02
	
	if (InitParams->IsAutoAcknowledgeEnabled)
    1e10:	f7 01       	movw	r30, r14
    1e12:	80 a1       	ldd	r24, Z+32	; 0x20
    1e14:	88 23       	and	r24, r24
    1e16:	21 f0       	breq	.+8      	; 0x1e20 <InitTransceiver+0x136>
	{
		EnAA.DATA_PIPE = 0x1 << DATA_PIPE_0;
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	80 7c       	andi	r24, 0xC0	; 192
    1e1c:	81 60       	ori	r24, 0x01	; 1
    1e1e:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	TCWriteReg(EN_AA_OFFSET, &EnAA.AsUINT8, 1);
    1e20:	41 e0       	ldi	r20, 0x01	; 1
    1e22:	be 01       	movw	r22, r28
    1e24:	6e 5f       	subi	r22, 0xFE	; 254
    1e26:	7f 4f       	sbci	r23, 0xFF	; 255
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	31 df       	rcall	.-414    	; 0x1c8e <TCWriteReg>
	// Initialize EN_RXADDR Register
	//
		
	EnRxAddr.AsUINT8 = 0;
		
	EnRxAddr.DATA_PIPE = 0x1 << DATA_PIPE_0;
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	8b 83       	std	Y+3, r24	; 0x03

	TCWriteReg(EN_RX_ADDR_OFFSET, &EnRxAddr.AsUINT8, 1);
    1e30:	41 e0       	ldi	r20, 0x01	; 1
    1e32:	be 01       	movw	r22, r28
    1e34:	6d 5f       	subi	r22, 0xFD	; 253
    1e36:	7f 4f       	sbci	r23, 0xFF	; 255
    1e38:	82 e0       	ldi	r24, 0x02	; 2
    1e3a:	29 df       	rcall	.-430    	; 0x1c8e <TCWriteReg>
		
	//
	// Initialize SETUP_RETR
	//
		
	SetupRetr.ARD = InitParams->AutoRetryDelay;
    1e3c:	f7 01       	movw	r30, r14
    1e3e:	82 89       	ldd	r24, Z+18	; 0x12
		
	SetupRetr.ARC = InitParams->AutoRetryCount;
    1e40:	91 89       	ldd	r25, Z+17	; 0x11
    1e42:	9f 70       	andi	r25, 0x0F	; 15
    1e44:	82 95       	swap	r24
    1e46:	80 7f       	andi	r24, 0xF0	; 240
    1e48:	89 2b       	or	r24, r25
    1e4a:	8c 83       	std	Y+4, r24	; 0x04
		
	TCWriteReg(SETUP_RETR_OFFSET, &SetupRetr.AsUINT8, 1);
    1e4c:	41 e0       	ldi	r20, 0x01	; 1
    1e4e:	be 01       	movw	r22, r28
    1e50:	6c 5f       	subi	r22, 0xFC	; 252
    1e52:	7f 4f       	sbci	r23, 0xFF	; 255
    1e54:	84 e0       	ldi	r24, 0x04	; 4
    1e56:	1b df       	rcall	.-458    	; 0x1c8e <TCWriteReg>
	
	//
	// Initialize RF Channel
	//
	
	TCWriteReg(RF_CH_OFFSET, &InitParams->RFChannel.AsUINT8, 1);
    1e58:	41 e0       	ldi	r20, 0x01	; 1
    1e5a:	b7 01       	movw	r22, r14
    1e5c:	6d 5e       	subi	r22, 0xED	; 237
    1e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e60:	85 e0       	ldi	r24, 0x05	; 5
    1e62:	15 df       	rcall	.-470    	; 0x1c8e <TCWriteReg>
	
	RfSetup.RF_DR_LOW = 0;
	
	RfSetup.RF_DR_HIGH = 1;
	
	RfSetup.RF_PWR = ZerodBm;
    1e64:	8e e0       	ldi	r24, 0x0E	; 14
    1e66:	8d 83       	std	Y+5, r24	; 0x05
	
	TCWriteReg(RF_SETUP_OFFSET, &RfSetup.AsUINT8, 1);
    1e68:	41 e0       	ldi	r20, 0x01	; 1
    1e6a:	be 01       	movw	r22, r28
    1e6c:	6b 5f       	subi	r22, 0xFB	; 251
    1e6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e70:	86 e0       	ldi	r24, 0x06	; 6
    1e72:	0d df       	rcall	.-486    	; 0x1c8e <TCWriteReg>
	
	//
	// Initialize Address
	//
	
	gMyAddress.AsULongLong = InitParams->MyAddress.AsULongLong;
    1e74:	f7 01       	movw	r30, r14
    1e76:	71 81       	ldd	r23, Z+1	; 0x01
    1e78:	62 81       	ldd	r22, Z+2	; 0x02
    1e7a:	53 81       	ldd	r21, Z+3	; 0x03
    1e7c:	44 81       	ldd	r20, Z+4	; 0x04
    1e7e:	35 81       	ldd	r19, Z+5	; 0x05
    1e80:	26 81       	ldd	r18, Z+6	; 0x06
    1e82:	97 81       	ldd	r25, Z+7	; 0x07
    1e84:	80 85       	ldd	r24, Z+8	; 0x08
    1e86:	ee e8       	ldi	r30, 0x8E	; 142
    1e88:	fb e0       	ldi	r31, 0x0B	; 11
    1e8a:	70 83       	st	Z, r23
    1e8c:	61 83       	std	Z+1, r22	; 0x01
    1e8e:	52 83       	std	Z+2, r21	; 0x02
    1e90:	43 83       	std	Z+3, r20	; 0x03
    1e92:	34 83       	std	Z+4, r19	; 0x04
    1e94:	25 83       	std	Z+5, r18	; 0x05
    1e96:	96 83       	std	Z+6, r25	; 0x06
    1e98:	87 83       	std	Z+7, r24	; 0x07
	
	gDestAddress.AsULongLong = InitParams->MyAddress.AsULongLong;
    1e9a:	f7 01       	movw	r30, r14
    1e9c:	71 81       	ldd	r23, Z+1	; 0x01
    1e9e:	62 81       	ldd	r22, Z+2	; 0x02
    1ea0:	53 81       	ldd	r21, Z+3	; 0x03
    1ea2:	44 81       	ldd	r20, Z+4	; 0x04
    1ea4:	35 81       	ldd	r19, Z+5	; 0x05
    1ea6:	26 81       	ldd	r18, Z+6	; 0x06
    1ea8:	97 81       	ldd	r25, Z+7	; 0x07
    1eaa:	80 85       	ldd	r24, Z+8	; 0x08
    1eac:	e6 e9       	ldi	r30, 0x96	; 150
    1eae:	fb e0       	ldi	r31, 0x0B	; 11
    1eb0:	70 83       	st	Z, r23
    1eb2:	61 83       	std	Z+1, r22	; 0x01
    1eb4:	52 83       	std	Z+2, r21	; 0x02
    1eb6:	43 83       	std	Z+3, r20	; 0x03
    1eb8:	34 83       	std	Z+4, r19	; 0x04
    1eba:	25 83       	std	Z+5, r18	; 0x05
    1ebc:	96 83       	std	Z+6, r25	; 0x06
    1ebe:	87 83       	std	Z+7, r24	; 0x07
	
	if (InitParams->IsAutoAcknowledgeEnabled)
    1ec0:	f7 01       	movw	r30, r14
    1ec2:	80 a1       	ldd	r24, Z+32	; 0x20
    1ec4:	88 23       	and	r24, r24
    1ec6:	b1 f0       	breq	.+44     	; 0x1ef4 <InitTransceiver+0x20a>
	{	
		if (InitParams->Mode == RECEIVER)
    1ec8:	80 81       	ld	r24, Z
    1eca:	81 11       	cpse	r24, r1
    1ecc:	07 c0       	rjmp	.+14     	; 0x1edc <InitTransceiver+0x1f2>
		{
			//
			// Initialize RX_ADDR_P0
			//
			
			TCWriteReg(RX_ADDR_P0_OFFSET, &InitParams->MyAddress.AsULongLong, TRANSCEIVER_ADDR_LENGTH);
    1ece:	45 e0       	ldi	r20, 0x05	; 5
    1ed0:	b7 01       	movw	r22, r14
    1ed2:	6f 5f       	subi	r22, 0xFF	; 255
    1ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed6:	8a e0       	ldi	r24, 0x0A	; 10
    1ed8:	da de       	rcall	.-588    	; 0x1c8e <TCWriteReg>
    1eda:	18 c0       	rjmp	.+48     	; 0x1f0c <InitTransceiver+0x222>
		{
			//
			// Initialize RX_ADDR_P0
			//
			
			TCWriteReg(RX_ADDR_P0_OFFSET, &InitParams->DestAddress.AsULongLong, TRANSCEIVER_ADDR_LENGTH);
    1edc:	45 e0       	ldi	r20, 0x05	; 5
    1ede:	87 01       	movw	r16, r14
    1ee0:	07 5f       	subi	r16, 0xF7	; 247
    1ee2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee4:	b8 01       	movw	r22, r16
    1ee6:	8a e0       	ldi	r24, 0x0A	; 10
    1ee8:	d2 de       	rcall	.-604    	; 0x1c8e <TCWriteReg>
			
			//
			// Initialize TX_ADDR
			//
			
			TCWriteReg(TX_ADDR_OFFSET, &InitParams->DestAddress.AsULongLong, TRANSCEIVER_ADDR_LENGTH);
    1eea:	45 e0       	ldi	r20, 0x05	; 5
    1eec:	b8 01       	movw	r22, r16
    1eee:	80 e1       	ldi	r24, 0x10	; 16
    1ef0:	ce de       	rcall	.-612    	; 0x1c8e <TCWriteReg>
    1ef2:	0c c0       	rjmp	.+24     	; 0x1f0c <InitTransceiver+0x222>
	{
		//
		// Initialize RX_ADDR_P0
		//
		
		TCWriteReg(RX_ADDR_P0_OFFSET, &InitParams->MyAddress.AsULongLong, TRANSCEIVER_ADDR_LENGTH);
    1ef4:	45 e0       	ldi	r20, 0x05	; 5
    1ef6:	b7 01       	movw	r22, r14
    1ef8:	6f 5f       	subi	r22, 0xFF	; 255
    1efa:	7f 4f       	sbci	r23, 0xFF	; 255
    1efc:	8a e0       	ldi	r24, 0x0A	; 10
    1efe:	c7 de       	rcall	.-626    	; 0x1c8e <TCWriteReg>
		
		//
		// Initialize TX_ADDR
		//
		
		TCWriteReg(TX_ADDR_OFFSET, &InitParams->DestAddress.AsULongLong, TRANSCEIVER_ADDR_LENGTH);
    1f00:	45 e0       	ldi	r20, 0x05	; 5
    1f02:	b7 01       	movw	r22, r14
    1f04:	67 5f       	subi	r22, 0xF7	; 247
    1f06:	7f 4f       	sbci	r23, 0xFF	; 255
    1f08:	80 e1       	ldi	r24, 0x10	; 16
    1f0a:	c1 de       	rcall	.-638    	; 0x1c8e <TCWriteReg>
	
	//
	// Initialize Payload Length to MAX PAYLOAD LENGTH if Auto Acknowledgment is not enabled
	//
	
	if (!InitParams->IsAutoAcknowledgeEnabled)
    1f0c:	f7 01       	movw	r30, r14
    1f0e:	80 a1       	ldd	r24, Z+32	; 0x20
    1f10:	81 11       	cpse	r24, r1
    1f12:	0e c0       	rjmp	.+28     	; 0x1f30 <InitTransceiver+0x246>
	{
		Length.PayloadLength = MAX_PAYLOAD_LENGTH;
    1f14:	8f 81       	ldd	r24, Y+7	; 0x07
    1f16:	80 7c       	andi	r24, 0xC0	; 192
    1f18:	80 62       	ori	r24, 0x20	; 32
    1f1a:	8f 83       	std	Y+7, r24	; 0x07
		
		TCWriteReg(RX_PW_P0_OFFSET, &Length, 1);
    1f1c:	41 e0       	ldi	r20, 0x01	; 1
    1f1e:	be 01       	movw	r22, r28
    1f20:	69 5f       	subi	r22, 0xF9	; 249
    1f22:	7f 4f       	sbci	r23, 0xFF	; 255
    1f24:	81 e1       	ldi	r24, 0x11	; 17
    1f26:	b3 de       	rcall	.-666    	; 0x1c8e <TCWriteReg>
	}
	//
	// Initialize Dynamic Payload Length	
	//
	
	if (InitParams->IsAutoAcknowledgeEnabled)
    1f28:	f7 01       	movw	r30, r14
    1f2a:	80 a1       	ldd	r24, Z+32	; 0x20
    1f2c:	88 23       	and	r24, r24
    1f2e:	41 f0       	breq	.+16     	; 0x1f40 <InitTransceiver+0x256>
	{
		DynpdReg.AsUINT8 = 0;
	
		DynpdReg.DPL_P0 = 0x1 << DATA_PIPE_0;
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	8e 83       	std	Y+6, r24	; 0x06
	
		TCWriteReg(DYNPD_OFFSET, &DynpdReg.AsUINT8, 1);
    1f34:	41 e0       	ldi	r20, 0x01	; 1
    1f36:	be 01       	movw	r22, r28
    1f38:	6a 5f       	subi	r22, 0xFA	; 250
    1f3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3c:	8c e1       	ldi	r24, 0x1C	; 28
    1f3e:	a7 de       	rcall	.-690    	; 0x1c8e <TCWriteReg>
	// Initialize Feature
	//
	
	FeatureReg.AsUINT8 = 0;
		
	FeatureReg.EN_ACK_PAY = 1;
    1f40:	82 e0       	ldi	r24, 0x02	; 2
    1f42:	88 87       	std	Y+8, r24	; 0x08
	
	if (InitParams->IsAutoAcknowledgeEnabled)
    1f44:	f7 01       	movw	r30, r14
    1f46:	80 a1       	ldd	r24, Z+32	; 0x20
    1f48:	88 23       	and	r24, r24
    1f4a:	19 f0       	breq	.+6      	; 0x1f52 <InitTransceiver+0x268>
	{
		FeatureReg.EN_DPL = 1;
    1f4c:	82 e0       	ldi	r24, 0x02	; 2
    1f4e:	84 60       	ori	r24, 0x04	; 4
    1f50:	88 87       	std	Y+8, r24	; 0x08
	}
	
	TCWriteReg(FEATURE_OFFSET, &FeatureReg.AsUINT8, 1);
    1f52:	41 e0       	ldi	r20, 0x01	; 1
    1f54:	be 01       	movw	r22, r28
    1f56:	68 5f       	subi	r22, 0xF8	; 248
    1f58:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5a:	8d e1       	ldi	r24, 0x1D	; 29
    1f5c:	98 de       	rcall	.-720    	; 0x1c8e <TCWriteReg>
	
	//
	// Flush RX and TX FIFO
	//
	
	TCFlushFIFO(RX_FIFO);
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	07 dd       	rcall	.-1522   	; 0x1970 <TCFlushFIFO>
	
	TCFlushFIFO(TX_FIFO);
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	05 dd       	rcall	.-1526   	; 0x1970 <TCFlushFIFO>
	
	//
	// If Receiver start monitoring for packets.
	//
	
	if (InitParams->Mode == RECEIVER)
    1f66:	f7 01       	movw	r30, r14
    1f68:	80 81       	ld	r24, Z
    1f6a:	81 11       	cpse	r24, r1
    1f6c:	07 c0       	rjmp	.+14     	; 0x1f7c <InitTransceiver+0x292>
	{
		CE_HIGH();
    1f6e:	47 9a       	sbi	0x08, 7	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f70:	83 e0       	ldi	r24, 0x03	; 3
    1f72:	91 e0       	ldi	r25, 0x01	; 1
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <InitTransceiver+0x28a>
    1f78:	00 c0       	rjmp	.+0      	; 0x1f7a <InitTransceiver+0x290>
    1f7a:	00 00       	nop
		
		_delay_us(130);
	}
	
	gTransceiverInitialized = TRUE;
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	80 93 54 0b 	sts	0x0B54, r24
	
Exit:

	return gTransceiverInitialized;
}
    1f82:	80 91 54 0b 	lds	r24, 0x0B54
    1f86:	28 96       	adiw	r28, 0x08	; 8
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	f8 94       	cli
    1f8c:	de bf       	out	0x3e, r29	; 62
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	cd bf       	out	0x3d, r28	; 61
    1f92:	df 91       	pop	r29
    1f94:	cf 91       	pop	r28
    1f96:	1f 91       	pop	r17
    1f98:	0f 91       	pop	r16
    1f9a:	ff 90       	pop	r15
    1f9c:	ef 90       	pop	r14
    1f9e:	08 95       	ret

00001fa0 <TCIsReceivePayloadAvailable>:
	}
}

bool
TCIsReceivePayloadAvailable()
{
    1fa0:	cf 93       	push	r28
    1fa2:	df 93       	push	r29
    1fa4:	1f 92       	push	r1
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
	bool Status = FALSE;
	
	STATUS_REG StatusReg;
	
	TCReadReg(STATUS_OFFSET, &StatusReg.AsUINT8, 1);
    1faa:	41 e0       	ldi	r20, 0x01	; 1
    1fac:	be 01       	movw	r22, r28
    1fae:	6f 5f       	subi	r22, 0xFF	; 255
    1fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb2:	87 e0       	ldi	r24, 0x07	; 7
    1fb4:	5f de       	rcall	.-834    	; 0x1c74 <TCReadReg>
	
	if (StatusReg.RX_DR)
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	86 ff       	sbrs	r24, 6
    1fba:	14 c0       	rjmp	.+40     	; 0x1fe4 <TCIsReceivePayloadAvailable+0x44>
		// Clear StatusReg RX_DR
		//
		
		StatusReg.AsUINT8 = 0;
		
		StatusReg.RX_DR = 1;
    1fbc:	80 e4       	ldi	r24, 0x40	; 64
    1fbe:	89 83       	std	Y+1, r24	; 0x01
		
		TCWriteReg(STATUS_OFFSET, &StatusReg.AsUINT8, 1);
    1fc0:	41 e0       	ldi	r20, 0x01	; 1
    1fc2:	be 01       	movw	r22, r28
    1fc4:	6f 5f       	subi	r22, 0xFF	; 255
    1fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc8:	87 e0       	ldi	r24, 0x07	; 7
    1fca:	61 de       	rcall	.-830    	; 0x1c8e <TCWriteReg>
		
		SendTrace(INFO_LEVEL, "Data Received\r\n");
    1fcc:	83 eb       	ldi	r24, 0xB3	; 179
    1fce:	99 e0       	ldi	r25, 0x09	; 9
    1fd0:	9f 93       	push	r25
    1fd2:	8f 93       	push	r24
    1fd4:	84 e0       	ldi	r24, 0x04	; 4
    1fd6:	8f 93       	push	r24
    1fd8:	6a d9       	rcall	.-3372   	; 0x12ae <SendTrace>
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
		
		Status = TRUE;
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	01 c0       	rjmp	.+2      	; 0x1fe6 <TCIsReceivePayloadAvailable+0x46>
}

bool
TCIsReceivePayloadAvailable()
{
	bool Status = FALSE;
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
		
		Status = TRUE;
	}
	
	return Status;
}
    1fe6:	0f 90       	pop	r0
    1fe8:	df 91       	pop	r29
    1fea:	cf 91       	pop	r28
    1fec:	08 95       	ret

00001fee <TCTransmitPayload>:

}

bool
TCTransmitPayload(PVOID Payload, PPAYLOAD_LENGTH Length)
{
    1fee:	1f 93       	push	r17
    1ff0:	cf 93       	push	r28
    1ff2:	df 93       	push	r29
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <TCTransmitPayload+0x8>
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
	
	//
	// Check if Transceiver is initialized;
	//
	
	if (!gTransceiverInitialized)
    1ffa:	20 91 54 0b 	lds	r18, 0x0B54
    1ffe:	21 11       	cpse	r18, r1
    2000:	0c c0       	rjmp	.+24     	; 0x201a <TCTransmitPayload+0x2c>
	{
		SendTrace(ERROR_LEVEL, "TransmitPayload - Transceiver Not Initialized\r\n");
    2002:	83 ec       	ldi	r24, 0xC3	; 195
    2004:	99 e0       	ldi	r25, 0x09	; 9
    2006:	9f 93       	push	r25
    2008:	8f 93       	push	r24
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	8f 93       	push	r24
    200e:	4f d9       	rcall	.-3426   	; 0x12ae <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
	
	if (!gTransceiverInitialized)
	{
		SendTrace(ERROR_LEVEL, "TransmitPayload - Transceiver Not Initialized\r\n");
		
		Status = FALSE;
    2016:	10 e0       	ldi	r17, 0x00	; 0
		
		goto Exit;
    2018:	42 c0       	rjmp	.+132    	; 0x209e <TCTransmitPayload+0xb0>
	
	//
	// Initialize Command Register
	//
	
	CommandStatus = W_TX_PAYLOAD;
    201a:	20 ea       	ldi	r18, 0xA0	; 160
    201c:	29 83       	std	Y+1, r18	; 0x01
	
	Status = TCTransmit(&CommandStatus, Payload, Length->AsUINT8);
    201e:	fb 01       	movw	r30, r22
    2020:	40 81       	ld	r20, Z
    2022:	bc 01       	movw	r22, r24
    2024:	ce 01       	movw	r24, r28
    2026:	01 96       	adiw	r24, 0x01	; 1
    2028:	c1 dc       	rcall	.-1662   	; 0x19ac <TCTransmit>
    202a:	18 2f       	mov	r17, r24
	
	//
	// Now kick of the transmission.
	//
	
	CE_HIGH();
    202c:	47 9a       	sbi	0x08, 7	; 8
	
	//_delay_us(130);
	
	//CE_LOW();
	
	if (gTxDSCallback == NULL)
    202e:	20 91 4a 0b 	lds	r18, 0x0B4A
    2032:	30 91 4b 0b 	lds	r19, 0x0B4B
    2036:	23 2b       	or	r18, r19
    2038:	89 f5       	brne	.+98     	; 0x209c <TCTransmitPayload+0xae>
		// So wait till data is transmitted.
		//
		
		while(1)
		{
			TCReadReg(STATUS_OFFSET, &StatusReg.AsUINT8, 1);
    203a:	41 e0       	ldi	r20, 0x01	; 1
    203c:	be 01       	movw	r22, r28
    203e:	6e 5f       	subi	r22, 0xFE	; 254
    2040:	7f 4f       	sbci	r23, 0xFF	; 255
    2042:	87 e0       	ldi	r24, 0x07	; 7
    2044:	17 de       	rcall	.-978    	; 0x1c74 <TCReadReg>
			
			if (StatusReg.TX_DS)
    2046:	9a 81       	ldd	r25, Y+2	; 0x02
    2048:	95 ff       	sbrs	r25, 5
    204a:	13 c0       	rjmp	.+38     	; 0x2072 <TCTransmitPayload+0x84>
				// Clear the TX_DS bit
				//
				
				StatusReg.AsUINT8 = 0;
				
				StatusReg.TX_DS = 1;
    204c:	80 e2       	ldi	r24, 0x20	; 32
    204e:	8a 83       	std	Y+2, r24	; 0x02
				
				TCWriteReg(STATUS_OFFSET, &StatusReg.AsUINT8, 1);
    2050:	41 e0       	ldi	r20, 0x01	; 1
    2052:	be 01       	movw	r22, r28
    2054:	6e 5f       	subi	r22, 0xFE	; 254
    2056:	7f 4f       	sbci	r23, 0xFF	; 255
    2058:	87 e0       	ldi	r24, 0x07	; 7
    205a:	19 de       	rcall	.-974    	; 0x1c8e <TCWriteReg>
					
				SendTrace(INFO_LEVEL, "TransmitPayload - Data Transmitted\r\n");
    205c:	23 ef       	ldi	r18, 0xF3	; 243
    205e:	39 e0       	ldi	r19, 0x09	; 9
    2060:	3f 93       	push	r19
    2062:	2f 93       	push	r18
    2064:	84 e0       	ldi	r24, 0x04	; 4
    2066:	8f 93       	push	r24
    2068:	22 d9       	rcall	.-3516   	; 0x12ae <SendTrace>
			
				break;
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	15 c0       	rjmp	.+42     	; 0x209c <TCTransmitPayload+0xae>
			}
			else if (StatusReg.MAX_RT)
    2072:	94 ff       	sbrs	r25, 4
    2074:	e2 cf       	rjmp	.-60     	; 0x203a <TCTransmitPayload+0x4c>
				// Clear the MAX_RT bit
				//
				
				StatusReg.AsUINT8 = 0;
				
				StatusReg.MAX_RT = 1;
    2076:	80 e1       	ldi	r24, 0x10	; 16
    2078:	8a 83       	std	Y+2, r24	; 0x02
				
				TCWriteReg(STATUS_OFFSET, &StatusReg.AsUINT8, 1);
    207a:	41 e0       	ldi	r20, 0x01	; 1
    207c:	be 01       	movw	r22, r28
    207e:	6e 5f       	subi	r22, 0xFE	; 254
    2080:	7f 4f       	sbci	r23, 0xFF	; 255
    2082:	87 e0       	ldi	r24, 0x07	; 7
    2084:	04 de       	rcall	.-1016   	; 0x1c8e <TCWriteReg>
				
				SendTrace(ERROR_LEVEL,"TransmitPayload - Max Re-transmit Reached\r\n");
    2086:	88 e1       	ldi	r24, 0x18	; 24
    2088:	9a e0       	ldi	r25, 0x0A	; 10
    208a:	9f 93       	push	r25
    208c:	8f 93       	push	r24
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	8f 93       	push	r24
    2092:	0d d9       	rcall	.-3558   	; 0x12ae <SendTrace>
				
				Status = FALSE;
				
				break;
    2094:	0f 90       	pop	r0
    2096:	0f 90       	pop	r0
    2098:	0f 90       	pop	r0
				
				TCWriteReg(STATUS_OFFSET, &StatusReg.AsUINT8, 1);
				
				SendTrace(ERROR_LEVEL,"TransmitPayload - Max Re-transmit Reached\r\n");
				
				Status = FALSE;
    209a:	10 e0       	ldi	r17, 0x00	; 0
				break;
			}
		}
	}
	
	CE_LOW();
    209c:	47 98       	cbi	0x08, 7	; 8
	
Exit:
	
	return Status;

}
    209e:	81 2f       	mov	r24, r17
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	df 91       	pop	r29
    20a6:	cf 91       	pop	r28
    20a8:	1f 91       	pop	r17
    20aa:	08 95       	ret

000020ac <TCIntCallback>:
// Interrupt Callback
//

void
TCIntCallback(PVOID CallbackContext)
{
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <TCIntCallback+0x6>
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
	
	//
	// Read STATUS Register to find the cause of interrupt
	//
	
	TCReadReg(STATUS_OFFSET, &StatusReg.AsUINT8, 1);
    20b6:	41 e0       	ldi	r20, 0x01	; 1
    20b8:	be 01       	movw	r22, r28
    20ba:	6f 5f       	subi	r22, 0xFF	; 255
    20bc:	7f 4f       	sbci	r23, 0xFF	; 255
    20be:	87 e0       	ldi	r24, 0x07	; 7
    20c0:	d9 dd       	rcall	.-1102   	; 0x1c74 <TCReadReg>
	
	SendTrace(INFO_LEVEL, "ISR - Status Reg = 0x%x\r\n", StatusReg.AsUINT8);
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	1f 92       	push	r1
    20c6:	8f 93       	push	r24
    20c8:	84 e4       	ldi	r24, 0x44	; 68
    20ca:	9a e0       	ldi	r25, 0x0A	; 10
    20cc:	9f 93       	push	r25
    20ce:	8f 93       	push	r24
    20d0:	84 e0       	ldi	r24, 0x04	; 4
    20d2:	8f 93       	push	r24
    20d4:	ec d8       	rcall	.-3624   	; 0x12ae <SendTrace>
	
	ClearInt.AsUINT8 = 0;
    20d6:	1a 82       	std	Y+2, r1	; 0x02
	
	if (StatusReg.MAX_RT && gMaxRTCallback != NULL)
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	84 ff       	sbrs	r24, 4
    20e6:	0e c0       	rjmp	.+28     	; 0x2104 <TCIntCallback+0x58>
    20e8:	e0 91 52 0b 	lds	r30, 0x0B52
    20ec:	f0 91 53 0b 	lds	r31, 0x0B53
    20f0:	30 97       	sbiw	r30, 0x00	; 0
    20f2:	41 f0       	breq	.+16     	; 0x2104 <TCIntCallback+0x58>
	{
		gMaxRTCallback(gMaxRTCallbackContext);
    20f4:	80 91 50 0b 	lds	r24, 0x0B50
    20f8:	90 91 51 0b 	lds	r25, 0x0B51
    20fc:	09 95       	icall
		
		ClearInt.MAX_RT = 1;
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	80 61       	ori	r24, 0x10	; 16
    2102:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	if (StatusReg.RX_DR && gRxDRCallback != NULL)
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	86 ff       	sbrs	r24, 6
    2108:	0e c0       	rjmp	.+28     	; 0x2126 <TCIntCallback+0x7a>
    210a:	e0 91 4e 0b 	lds	r30, 0x0B4E
    210e:	f0 91 4f 0b 	lds	r31, 0x0B4F
    2112:	30 97       	sbiw	r30, 0x00	; 0
    2114:	41 f0       	breq	.+16     	; 0x2126 <TCIntCallback+0x7a>
	{
		gRxDRCallback(gRxDRCallbackContext);
    2116:	80 91 4c 0b 	lds	r24, 0x0B4C
    211a:	90 91 4d 0b 	lds	r25, 0x0B4D
    211e:	09 95       	icall
		
		ClearInt.RX_DR = 1;
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	80 64       	ori	r24, 0x40	; 64
    2124:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	if (StatusReg.TX_DS && gTxDSCallback != NULL)
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	85 ff       	sbrs	r24, 5
    212a:	0e c0       	rjmp	.+28     	; 0x2148 <TCIntCallback+0x9c>
    212c:	e0 91 4a 0b 	lds	r30, 0x0B4A
    2130:	f0 91 4b 0b 	lds	r31, 0x0B4B
    2134:	30 97       	sbiw	r30, 0x00	; 0
    2136:	41 f0       	breq	.+16     	; 0x2148 <TCIntCallback+0x9c>
	{
		gTxDSCallback(gTxDSCallbackContext);
    2138:	80 91 48 0b 	lds	r24, 0x0B48
    213c:	90 91 49 0b 	lds	r25, 0x0B49
    2140:	09 95       	icall
		
		ClearInt.TX_DS = 1;
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
    2144:	80 62       	ori	r24, 0x20	; 32
    2146:	8a 83       	std	Y+2, r24	; 0x02
	
	//
	// Clear the interrupts
	//
	
	TCWriteReg(STATUS_OFFSET, &ClearInt.AsUINT8, 1);
    2148:	41 e0       	ldi	r20, 0x01	; 1
    214a:	be 01       	movw	r22, r28
    214c:	6e 5f       	subi	r22, 0xFE	; 254
    214e:	7f 4f       	sbci	r23, 0xFF	; 255
    2150:	87 e0       	ldi	r24, 0x07	; 7
    2152:	9d dd       	rcall	.-1222   	; 0x1c8e <TCWriteReg>
} 
    2154:	0f 90       	pop	r0
    2156:	0f 90       	pop	r0
    2158:	df 91       	pop	r29
    215a:	cf 91       	pop	r28
    215c:	08 95       	ret

0000215e <TCInitTransfer>:

#include "Trace.h"

void
TCInitTransfer ()
{
    215e:	cf 93       	push	r28
    2160:	df 93       	push	r29
    2162:	00 d0       	rcall	.+0      	; 0x2164 <TCInitTransfer+0x6>
    2164:	00 d0       	rcall	.+0      	; 0x2166 <TCInitTransfer+0x8>
    2166:	1f 92       	push	r1
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
	//
	// SPI Initialization Code for ATMega 1284P
	
	SPI_MODE SPIMode;
	
	SPIMode.IsMaster		= TRUE;
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	89 83       	std	Y+1, r24	; 0x01

	SPIMode.ClockPolarity	= CLK_POL_0;
    2170:	1a 82       	std	Y+2, r1	; 0x02
	
	SPIMode.ClockPulse		= CLK_PUL_0;
    2172:	1b 82       	std	Y+3, r1	; 0x03
	
	SPIMode.DataOrder		= DATA_ORDER_MSB;
    2174:	1c 82       	std	Y+4, r1	; 0x04
	
	SPIMode.ClockRate		= FRE_OSC_BY_4;
    2176:	1d 82       	std	Y+5, r1	; 0x05
	
	InitSPI(&SPIMode);
    2178:	ce 01       	movw	r24, r28
    217a:	01 96       	adiw	r24, 0x01	; 1
    217c:	1a d5       	rcall	.+2612   	; 0x2bb2 <InitSPI>
	//
	// SPI Initialization Code for Galileo
	//

#endif
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	df 91       	pop	r29
    218a:	cf 91       	pop	r28
    218c:	08 95       	ret

0000218e <InitExtInt>:
	
	Exit:

	return Status;

}
    218e:	f8 94       	cli
    2190:	10 92 69 00 	sts	0x0069, r1
    2194:	1d ba       	out	0x1d, r1	; 29
    2196:	87 e0       	ldi	r24, 0x07	; 7
    2198:	8c bb       	out	0x1c, r24	; 28
    219a:	10 92 68 00 	sts	0x0068, r1
    219e:	8f e0       	ldi	r24, 0x0F	; 15
    21a0:	8b bb       	out	0x1b, r24	; 27
    21a2:	10 92 6b 00 	sts	0x006B, r1
    21a6:	10 92 6c 00 	sts	0x006C, r1
    21aa:	10 92 6d 00 	sts	0x006D, r1
    21ae:	10 92 73 00 	sts	0x0073, r1
    21b2:	78 94       	sei
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	80 93 61 0b 	sts	0x0B61, r24
    21ba:	08 95       	ret

000021bc <RegisterExtInterrupt>:
    21bc:	bf 92       	push	r11
    21be:	cf 92       	push	r12
    21c0:	df 92       	push	r13
    21c2:	ef 92       	push	r14
    21c4:	ff 92       	push	r15
    21c6:	0f 93       	push	r16
    21c8:	1f 93       	push	r17
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
    21ce:	18 2f       	mov	r17, r24
    21d0:	b6 2e       	mov	r11, r22
    21d2:	ea 01       	movw	r28, r20
    21d4:	69 01       	movw	r12, r18
    21d6:	80 91 61 0b 	lds	r24, 0x0B61
    21da:	81 11       	cpse	r24, r1
    21dc:	0c c0       	rjmp	.+24     	; 0x21f6 <RegisterExtInterrupt+0x3a>
    21de:	8e e5       	ldi	r24, 0x5E	; 94
    21e0:	9a e0       	ldi	r25, 0x0A	; 10
    21e2:	9f 93       	push	r25
    21e4:	8f 93       	push	r24
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	8f 93       	push	r24
    21ea:	61 d8       	rcall	.-3902   	; 0x12ae <SendTrace>
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	7b c0       	rjmp	.+246    	; 0x22ec <RegisterExtInterrupt+0x130>
    21f6:	20 97       	sbiw	r28, 0x00	; 0
    21f8:	61 f4       	brne	.+24     	; 0x2212 <RegisterExtInterrupt+0x56>
    21fa:	83 e8       	ldi	r24, 0x83	; 131
    21fc:	9a e0       	ldi	r25, 0x0A	; 10
    21fe:	9f 93       	push	r25
    2200:	8f 93       	push	r24
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	8f 93       	push	r24
    2206:	53 d8       	rcall	.-3930   	; 0x12ae <SendTrace>
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	0f 90       	pop	r0
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	6d c0       	rjmp	.+218    	; 0x22ec <RegisterExtInterrupt+0x130>
    2212:	e1 2e       	mov	r14, r17
    2214:	f1 2c       	mov	r15, r1
    2216:	f7 01       	movw	r30, r14
    2218:	ee 0f       	add	r30, r30
    221a:	ff 1f       	adc	r31, r31
    221c:	e5 5a       	subi	r30, 0xA5	; 165
    221e:	f4 4f       	sbci	r31, 0xF4	; 244
    2220:	40 81       	ld	r20, Z
    2222:	51 81       	ldd	r21, Z+1	; 0x01
    2224:	45 2b       	or	r20, r21
    2226:	61 f0       	breq	.+24     	; 0x2240 <RegisterExtInterrupt+0x84>
    2228:	8e e9       	ldi	r24, 0x9E	; 158
    222a:	9a e0       	ldi	r25, 0x0A	; 10
    222c:	9f 93       	push	r25
    222e:	8f 93       	push	r24
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	8f 93       	push	r24
    2234:	3c d8       	rcall	.-3976   	; 0x12ae <SendTrace>
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	56 c0       	rjmp	.+172    	; 0x22ec <RegisterExtInterrupt+0x130>
    2240:	1f 92       	push	r1
    2242:	1f 93       	push	r17
    2244:	8d eb       	ldi	r24, 0xBD	; 189
    2246:	9a e0       	ldi	r25, 0x0A	; 10
    2248:	9f 93       	push	r25
    224a:	8f 93       	push	r24
    224c:	84 e0       	ldi	r24, 0x04	; 4
    224e:	8f 93       	push	r24
    2250:	2e d8       	rcall	.-4004   	; 0x12ae <SendTrace>
    2252:	97 01       	movw	r18, r14
    2254:	22 0f       	add	r18, r18
    2256:	33 1f       	adc	r19, r19
    2258:	f9 01       	movw	r30, r18
    225a:	e5 5a       	subi	r30, 0xA5	; 165
    225c:	f4 4f       	sbci	r31, 0xF4	; 244
    225e:	d1 83       	std	Z+1, r29	; 0x01
    2260:	c0 83       	st	Z, r28
    2262:	f9 01       	movw	r30, r18
    2264:	eb 5a       	subi	r30, 0xAB	; 171
    2266:	f4 4f       	sbci	r31, 0xF4	; 244
    2268:	d1 82       	std	Z+1, r13	; 0x01
    226a:	c0 82       	st	Z, r12
    226c:	e9 e6       	ldi	r30, 0x69	; 105
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	e0 80       	ld	r14, Z
    2272:	8b 2d       	mov	r24, r11
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	ac 01       	movw	r20, r24
    2278:	02 c0       	rjmp	.+4      	; 0x227e <RegisterExtInterrupt+0xc2>
    227a:	44 0f       	add	r20, r20
    227c:	55 1f       	adc	r21, r21
    227e:	2a 95       	dec	r18
    2280:	e2 f7       	brpl	.-8      	; 0x227a <RegisterExtInterrupt+0xbe>
    2282:	9a 01       	movw	r18, r20
    2284:	2e 29       	or	r18, r14
    2286:	20 83       	st	Z, r18
    2288:	8d b3       	in	r24, 0x1d	; 29
    228a:	21 e0       	ldi	r18, 0x01	; 1
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	01 2e       	mov	r0, r17
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <RegisterExtInterrupt+0xda>
    2292:	22 0f       	add	r18, r18
    2294:	33 1f       	adc	r19, r19
    2296:	0a 94       	dec	r0
    2298:	e2 f7       	brpl	.-8      	; 0x2292 <RegisterExtInterrupt+0xd6>
    229a:	82 2b       	or	r24, r18
    229c:	8d bb       	out	0x1d, r24	; 29
    229e:	8c b3       	in	r24, 0x1c	; 28
    22a0:	28 2b       	or	r18, r24
    22a2:	2c bb       	out	0x1c, r18	; 28
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	11 30       	cpi	r17, 0x01	; 1
    22b0:	51 f0       	breq	.+20     	; 0x22c6 <RegisterExtInterrupt+0x10a>
    22b2:	18 f0       	brcs	.+6      	; 0x22ba <RegisterExtInterrupt+0xfe>
    22b4:	12 30       	cpi	r17, 0x02	; 2
    22b6:	69 f0       	breq	.+26     	; 0x22d2 <RegisterExtInterrupt+0x116>
    22b8:	12 c0       	rjmp	.+36     	; 0x22de <RegisterExtInterrupt+0x122>
    22ba:	52 98       	cbi	0x0a, 2	; 10
    22bc:	00 23       	and	r16, r16
    22be:	89 f0       	breq	.+34     	; 0x22e2 <RegisterExtInterrupt+0x126>
    22c0:	5a 9a       	sbi	0x0b, 2	; 11
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	13 c0       	rjmp	.+38     	; 0x22ec <RegisterExtInterrupt+0x130>
    22c6:	53 98       	cbi	0x0a, 3	; 10
    22c8:	00 23       	and	r16, r16
    22ca:	69 f0       	breq	.+26     	; 0x22e6 <RegisterExtInterrupt+0x12a>
    22cc:	5b 9a       	sbi	0x0b, 3	; 11
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	0d c0       	rjmp	.+26     	; 0x22ec <RegisterExtInterrupt+0x130>
    22d2:	52 98       	cbi	0x0a, 2	; 10
    22d4:	00 23       	and	r16, r16
    22d6:	49 f0       	breq	.+18     	; 0x22ea <RegisterExtInterrupt+0x12e>
    22d8:	2a 9a       	sbi	0x05, 2	; 5
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	07 c0       	rjmp	.+14     	; 0x22ec <RegisterExtInterrupt+0x130>
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	05 c0       	rjmp	.+10     	; 0x22ec <RegisterExtInterrupt+0x130>
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	03 c0       	rjmp	.+6      	; 0x22ec <RegisterExtInterrupt+0x130>
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	01 c0       	rjmp	.+2      	; 0x22ec <RegisterExtInterrupt+0x130>
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	df 91       	pop	r29
    22ee:	cf 91       	pop	r28
    22f0:	1f 91       	pop	r17
    22f2:	0f 91       	pop	r16
    22f4:	ff 90       	pop	r15
    22f6:	ef 90       	pop	r14
    22f8:	df 90       	pop	r13
    22fa:	cf 90       	pop	r12
    22fc:	bf 90       	pop	r11
    22fe:	08 95       	ret

00002300 <__vector_1>:

ISR(INT0_vect)
{
    2300:	1f 92       	push	r1
    2302:	0f 92       	push	r0
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	0f 92       	push	r0
    2308:	11 24       	eor	r1, r1
    230a:	0b b6       	in	r0, 0x3b	; 59
    230c:	0f 92       	push	r0
    230e:	2f 93       	push	r18
    2310:	3f 93       	push	r19
    2312:	4f 93       	push	r20
    2314:	5f 93       	push	r21
    2316:	6f 93       	push	r22
    2318:	7f 93       	push	r23
    231a:	8f 93       	push	r24
    231c:	9f 93       	push	r25
    231e:	af 93       	push	r26
    2320:	bf 93       	push	r27
    2322:	ef 93       	push	r30
    2324:	ff 93       	push	r31
	//
	// Disable Interrupt while we process this.
	//
	
	cli();
    2326:	f8 94       	cli
	
	if (gExtIntCallback[0] != NULL)
    2328:	e0 91 5b 0b 	lds	r30, 0x0B5B
    232c:	f0 91 5c 0b 	lds	r31, 0x0B5C
    2330:	30 97       	sbiw	r30, 0x00	; 0
    2332:	29 f0       	breq	.+10     	; 0x233e <__vector_1+0x3e>
	{
		(*gExtIntCallback[0])(gExtIntCallbackContext[0]);
    2334:	80 91 55 0b 	lds	r24, 0x0B55
    2338:	90 91 56 0b 	lds	r25, 0x0B56
    233c:	09 95       	icall
	
	//
	// Enable Interrupt
	//
	
	sei();
    233e:	78 94       	sei
}
    2340:	ff 91       	pop	r31
    2342:	ef 91       	pop	r30
    2344:	bf 91       	pop	r27
    2346:	af 91       	pop	r26
    2348:	9f 91       	pop	r25
    234a:	8f 91       	pop	r24
    234c:	7f 91       	pop	r23
    234e:	6f 91       	pop	r22
    2350:	5f 91       	pop	r21
    2352:	4f 91       	pop	r20
    2354:	3f 91       	pop	r19
    2356:	2f 91       	pop	r18
    2358:	0f 90       	pop	r0
    235a:	0b be       	out	0x3b, r0	; 59
    235c:	0f 90       	pop	r0
    235e:	0f be       	out	0x3f, r0	; 63
    2360:	0f 90       	pop	r0
    2362:	1f 90       	pop	r1
    2364:	18 95       	reti

00002366 <__vector_2>:

ISR(INT1_vect)
{
    2366:	1f 92       	push	r1
    2368:	0f 92       	push	r0
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	0f 92       	push	r0
    236e:	11 24       	eor	r1, r1
    2370:	0b b6       	in	r0, 0x3b	; 59
    2372:	0f 92       	push	r0
    2374:	2f 93       	push	r18
    2376:	3f 93       	push	r19
    2378:	4f 93       	push	r20
    237a:	5f 93       	push	r21
    237c:	6f 93       	push	r22
    237e:	7f 93       	push	r23
    2380:	8f 93       	push	r24
    2382:	9f 93       	push	r25
    2384:	af 93       	push	r26
    2386:	bf 93       	push	r27
    2388:	ef 93       	push	r30
    238a:	ff 93       	push	r31
	//
	// Disable Interrupt while we process this.
	//
	
	cli();
    238c:	f8 94       	cli
	
	if (gExtIntCallback[1] != NULL)
    238e:	e0 91 5d 0b 	lds	r30, 0x0B5D
    2392:	f0 91 5e 0b 	lds	r31, 0x0B5E
    2396:	30 97       	sbiw	r30, 0x00	; 0
    2398:	29 f0       	breq	.+10     	; 0x23a4 <__vector_2+0x3e>
	{
		(*gExtIntCallback[1])(gExtIntCallbackContext[1]);
    239a:	80 91 57 0b 	lds	r24, 0x0B57
    239e:	90 91 58 0b 	lds	r25, 0x0B58
    23a2:	09 95       	icall
	
	//
	// Enable Interrupt
	//
	
	sei();
    23a4:	78 94       	sei
}
    23a6:	ff 91       	pop	r31
    23a8:	ef 91       	pop	r30
    23aa:	bf 91       	pop	r27
    23ac:	af 91       	pop	r26
    23ae:	9f 91       	pop	r25
    23b0:	8f 91       	pop	r24
    23b2:	7f 91       	pop	r23
    23b4:	6f 91       	pop	r22
    23b6:	5f 91       	pop	r21
    23b8:	4f 91       	pop	r20
    23ba:	3f 91       	pop	r19
    23bc:	2f 91       	pop	r18
    23be:	0f 90       	pop	r0
    23c0:	0b be       	out	0x3b, r0	; 59
    23c2:	0f 90       	pop	r0
    23c4:	0f be       	out	0x3f, r0	; 63
    23c6:	0f 90       	pop	r0
    23c8:	1f 90       	pop	r1
    23ca:	18 95       	reti

000023cc <__vector_3>:

ISR(INT2_vect)
{
    23cc:	1f 92       	push	r1
    23ce:	0f 92       	push	r0
    23d0:	0f b6       	in	r0, 0x3f	; 63
    23d2:	0f 92       	push	r0
    23d4:	11 24       	eor	r1, r1
    23d6:	0b b6       	in	r0, 0x3b	; 59
    23d8:	0f 92       	push	r0
    23da:	2f 93       	push	r18
    23dc:	3f 93       	push	r19
    23de:	4f 93       	push	r20
    23e0:	5f 93       	push	r21
    23e2:	6f 93       	push	r22
    23e4:	7f 93       	push	r23
    23e6:	8f 93       	push	r24
    23e8:	9f 93       	push	r25
    23ea:	af 93       	push	r26
    23ec:	bf 93       	push	r27
    23ee:	ef 93       	push	r30
    23f0:	ff 93       	push	r31
	//
	// Disable Interrupt while we process this.
	//
	
	cli();
    23f2:	f8 94       	cli
	
	if (gExtIntCallback[2] != NULL)
    23f4:	e0 91 5f 0b 	lds	r30, 0x0B5F
    23f8:	f0 91 60 0b 	lds	r31, 0x0B60
    23fc:	30 97       	sbiw	r30, 0x00	; 0
    23fe:	29 f0       	breq	.+10     	; 0x240a <__vector_3+0x3e>
	{
		(*gExtIntCallback[2])(gExtIntCallbackContext[2]);
    2400:	80 91 59 0b 	lds	r24, 0x0B59
    2404:	90 91 5a 0b 	lds	r25, 0x0B5A
    2408:	09 95       	icall
	
	//
	// Enable Interrupt
	//
	
	sei();
    240a:	78 94       	sei
    240c:	ff 91       	pop	r31
    240e:	ef 91       	pop	r30
    2410:	bf 91       	pop	r27
    2412:	af 91       	pop	r26
    2414:	9f 91       	pop	r25
    2416:	8f 91       	pop	r24
    2418:	7f 91       	pop	r23
    241a:	6f 91       	pop	r22
    241c:	5f 91       	pop	r21
    241e:	4f 91       	pop	r20
    2420:	3f 91       	pop	r19
    2422:	2f 91       	pop	r18
    2424:	0f 90       	pop	r0
    2426:	0b be       	out	0x3b, r0	; 59
    2428:	0f 90       	pop	r0
    242a:	0f be       	out	0x3f, r0	; 63
    242c:	0f 90       	pop	r0
    242e:	1f 90       	pop	r1
    2430:	18 95       	reti

00002432 <__subsf3>:
    2432:	50 58       	subi	r21, 0x80	; 128

00002434 <__addsf3>:
    2434:	bb 27       	eor	r27, r27
    2436:	aa 27       	eor	r26, r26
    2438:	0e d0       	rcall	.+28     	; 0x2456 <__addsf3x>
    243a:	6c c1       	rjmp	.+728    	; 0x2714 <__fp_round>
    243c:	5d d1       	rcall	.+698    	; 0x26f8 <__fp_pscA>
    243e:	30 f0       	brcs	.+12     	; 0x244c <__addsf3+0x18>
    2440:	62 d1       	rcall	.+708    	; 0x2706 <__fp_pscB>
    2442:	20 f0       	brcs	.+8      	; 0x244c <__addsf3+0x18>
    2444:	31 f4       	brne	.+12     	; 0x2452 <__addsf3+0x1e>
    2446:	9f 3f       	cpi	r25, 0xFF	; 255
    2448:	11 f4       	brne	.+4      	; 0x244e <__addsf3+0x1a>
    244a:	1e f4       	brtc	.+6      	; 0x2452 <__addsf3+0x1e>
    244c:	42 c1       	rjmp	.+644    	; 0x26d2 <__fp_nan>
    244e:	0e f4       	brtc	.+2      	; 0x2452 <__addsf3+0x1e>
    2450:	e0 95       	com	r30
    2452:	e7 fb       	bst	r30, 7
    2454:	38 c1       	rjmp	.+624    	; 0x26c6 <__fp_inf>

00002456 <__addsf3x>:
    2456:	e9 2f       	mov	r30, r25
    2458:	6e d1       	rcall	.+732    	; 0x2736 <__fp_split3>
    245a:	80 f3       	brcs	.-32     	; 0x243c <__addsf3+0x8>
    245c:	ba 17       	cp	r27, r26
    245e:	62 07       	cpc	r22, r18
    2460:	73 07       	cpc	r23, r19
    2462:	84 07       	cpc	r24, r20
    2464:	95 07       	cpc	r25, r21
    2466:	18 f0       	brcs	.+6      	; 0x246e <__addsf3x+0x18>
    2468:	71 f4       	brne	.+28     	; 0x2486 <__addsf3x+0x30>
    246a:	9e f5       	brtc	.+102    	; 0x24d2 <__addsf3x+0x7c>
    246c:	86 c1       	rjmp	.+780    	; 0x277a <__fp_zero>
    246e:	0e f4       	brtc	.+2      	; 0x2472 <__addsf3x+0x1c>
    2470:	e0 95       	com	r30
    2472:	0b 2e       	mov	r0, r27
    2474:	ba 2f       	mov	r27, r26
    2476:	a0 2d       	mov	r26, r0
    2478:	0b 01       	movw	r0, r22
    247a:	b9 01       	movw	r22, r18
    247c:	90 01       	movw	r18, r0
    247e:	0c 01       	movw	r0, r24
    2480:	ca 01       	movw	r24, r20
    2482:	a0 01       	movw	r20, r0
    2484:	11 24       	eor	r1, r1
    2486:	ff 27       	eor	r31, r31
    2488:	59 1b       	sub	r21, r25
    248a:	99 f0       	breq	.+38     	; 0x24b2 <__addsf3x+0x5c>
    248c:	59 3f       	cpi	r21, 0xF9	; 249
    248e:	50 f4       	brcc	.+20     	; 0x24a4 <__addsf3x+0x4e>
    2490:	50 3e       	cpi	r21, 0xE0	; 224
    2492:	68 f1       	brcs	.+90     	; 0x24ee <__addsf3x+0x98>
    2494:	1a 16       	cp	r1, r26
    2496:	f0 40       	sbci	r31, 0x00	; 0
    2498:	a2 2f       	mov	r26, r18
    249a:	23 2f       	mov	r18, r19
    249c:	34 2f       	mov	r19, r20
    249e:	44 27       	eor	r20, r20
    24a0:	58 5f       	subi	r21, 0xF8	; 248
    24a2:	f3 cf       	rjmp	.-26     	; 0x248a <__addsf3x+0x34>
    24a4:	46 95       	lsr	r20
    24a6:	37 95       	ror	r19
    24a8:	27 95       	ror	r18
    24aa:	a7 95       	ror	r26
    24ac:	f0 40       	sbci	r31, 0x00	; 0
    24ae:	53 95       	inc	r21
    24b0:	c9 f7       	brne	.-14     	; 0x24a4 <__addsf3x+0x4e>
    24b2:	7e f4       	brtc	.+30     	; 0x24d2 <__addsf3x+0x7c>
    24b4:	1f 16       	cp	r1, r31
    24b6:	ba 0b       	sbc	r27, r26
    24b8:	62 0b       	sbc	r22, r18
    24ba:	73 0b       	sbc	r23, r19
    24bc:	84 0b       	sbc	r24, r20
    24be:	ba f0       	brmi	.+46     	; 0x24ee <__addsf3x+0x98>
    24c0:	91 50       	subi	r25, 0x01	; 1
    24c2:	a1 f0       	breq	.+40     	; 0x24ec <__addsf3x+0x96>
    24c4:	ff 0f       	add	r31, r31
    24c6:	bb 1f       	adc	r27, r27
    24c8:	66 1f       	adc	r22, r22
    24ca:	77 1f       	adc	r23, r23
    24cc:	88 1f       	adc	r24, r24
    24ce:	c2 f7       	brpl	.-16     	; 0x24c0 <__addsf3x+0x6a>
    24d0:	0e c0       	rjmp	.+28     	; 0x24ee <__addsf3x+0x98>
    24d2:	ba 0f       	add	r27, r26
    24d4:	62 1f       	adc	r22, r18
    24d6:	73 1f       	adc	r23, r19
    24d8:	84 1f       	adc	r24, r20
    24da:	48 f4       	brcc	.+18     	; 0x24ee <__addsf3x+0x98>
    24dc:	87 95       	ror	r24
    24de:	77 95       	ror	r23
    24e0:	67 95       	ror	r22
    24e2:	b7 95       	ror	r27
    24e4:	f7 95       	ror	r31
    24e6:	9e 3f       	cpi	r25, 0xFE	; 254
    24e8:	08 f0       	brcs	.+2      	; 0x24ec <__addsf3x+0x96>
    24ea:	b3 cf       	rjmp	.-154    	; 0x2452 <__addsf3+0x1e>
    24ec:	93 95       	inc	r25
    24ee:	88 0f       	add	r24, r24
    24f0:	08 f0       	brcs	.+2      	; 0x24f4 <__addsf3x+0x9e>
    24f2:	99 27       	eor	r25, r25
    24f4:	ee 0f       	add	r30, r30
    24f6:	97 95       	ror	r25
    24f8:	87 95       	ror	r24
    24fa:	08 95       	ret

000024fc <__fixsfdi>:
    24fc:	be e3       	ldi	r27, 0x3E	; 62
    24fe:	04 d0       	rcall	.+8      	; 0x2508 <__fixunssfdi+0x2>
    2500:	08 f4       	brcc	.+2      	; 0x2504 <__fixsfdi+0x8>
    2502:	90 e8       	ldi	r25, 0x80	; 128
    2504:	08 95       	ret

00002506 <__fixunssfdi>:
    2506:	bf e3       	ldi	r27, 0x3F	; 63
    2508:	22 27       	eor	r18, r18
    250a:	33 27       	eor	r19, r19
    250c:	a9 01       	movw	r20, r18
    250e:	1b d1       	rcall	.+566    	; 0x2746 <__fp_splitA>
    2510:	58 f1       	brcs	.+86     	; 0x2568 <__fixunssfdi+0x62>
    2512:	9f 57       	subi	r25, 0x7F	; 127
    2514:	40 f1       	brcs	.+80     	; 0x2566 <__fixunssfdi+0x60>
    2516:	b9 17       	cp	r27, r25
    2518:	38 f1       	brcs	.+78     	; 0x2568 <__fixunssfdi+0x62>
    251a:	bf e3       	ldi	r27, 0x3F	; 63
    251c:	b9 1b       	sub	r27, r25
    251e:	99 27       	eor	r25, r25
    2520:	b8 50       	subi	r27, 0x08	; 8
    2522:	3a f4       	brpl	.+14     	; 0x2532 <__fixunssfdi+0x2c>
    2524:	66 0f       	add	r22, r22
    2526:	77 1f       	adc	r23, r23
    2528:	88 1f       	adc	r24, r24
    252a:	99 1f       	adc	r25, r25
    252c:	b3 95       	inc	r27
    252e:	d2 f3       	brmi	.-12     	; 0x2524 <__fixunssfdi+0x1e>
    2530:	16 c0       	rjmp	.+44     	; 0x255e <__fixunssfdi+0x58>
    2532:	b8 50       	subi	r27, 0x08	; 8
    2534:	4a f0       	brmi	.+18     	; 0x2548 <__fixunssfdi+0x42>
    2536:	23 2f       	mov	r18, r19
    2538:	34 2f       	mov	r19, r20
    253a:	45 2f       	mov	r20, r21
    253c:	56 2f       	mov	r21, r22
    253e:	67 2f       	mov	r22, r23
    2540:	78 2f       	mov	r23, r24
    2542:	88 27       	eor	r24, r24
    2544:	b8 50       	subi	r27, 0x08	; 8
    2546:	ba f7       	brpl	.-18     	; 0x2536 <__fixunssfdi+0x30>
    2548:	b8 5f       	subi	r27, 0xF8	; 248
    254a:	49 f0       	breq	.+18     	; 0x255e <__fixunssfdi+0x58>
    254c:	86 95       	lsr	r24
    254e:	77 95       	ror	r23
    2550:	67 95       	ror	r22
    2552:	57 95       	ror	r21
    2554:	47 95       	ror	r20
    2556:	37 95       	ror	r19
    2558:	27 95       	ror	r18
    255a:	ba 95       	dec	r27
    255c:	b9 f7       	brne	.-18     	; 0x254c <__fixunssfdi+0x46>
    255e:	0e f4       	brtc	.+2      	; 0x2562 <__fixunssfdi+0x5c>
    2560:	bb d0       	rcall	.+374    	; 0x26d8 <__fp_negdi>
    2562:	88 94       	clc
    2564:	08 95       	ret
    2566:	88 94       	clc
    2568:	60 e0       	ldi	r22, 0x00	; 0
    256a:	70 e0       	ldi	r23, 0x00	; 0
    256c:	cb 01       	movw	r24, r22
    256e:	08 95       	ret

00002570 <__fixunssfsi>:
    2570:	ea d0       	rcall	.+468    	; 0x2746 <__fp_splitA>
    2572:	88 f0       	brcs	.+34     	; 0x2596 <__fixunssfsi+0x26>
    2574:	9f 57       	subi	r25, 0x7F	; 127
    2576:	90 f0       	brcs	.+36     	; 0x259c <__fixunssfsi+0x2c>
    2578:	b9 2f       	mov	r27, r25
    257a:	99 27       	eor	r25, r25
    257c:	b7 51       	subi	r27, 0x17	; 23
    257e:	a0 f0       	brcs	.+40     	; 0x25a8 <__fixunssfsi+0x38>
    2580:	d1 f0       	breq	.+52     	; 0x25b6 <__fixunssfsi+0x46>
    2582:	66 0f       	add	r22, r22
    2584:	77 1f       	adc	r23, r23
    2586:	88 1f       	adc	r24, r24
    2588:	99 1f       	adc	r25, r25
    258a:	1a f0       	brmi	.+6      	; 0x2592 <__fixunssfsi+0x22>
    258c:	ba 95       	dec	r27
    258e:	c9 f7       	brne	.-14     	; 0x2582 <__fixunssfsi+0x12>
    2590:	12 c0       	rjmp	.+36     	; 0x25b6 <__fixunssfsi+0x46>
    2592:	b1 30       	cpi	r27, 0x01	; 1
    2594:	81 f0       	breq	.+32     	; 0x25b6 <__fixunssfsi+0x46>
    2596:	f1 d0       	rcall	.+482    	; 0x277a <__fp_zero>
    2598:	b1 e0       	ldi	r27, 0x01	; 1
    259a:	08 95       	ret
    259c:	ee c0       	rjmp	.+476    	; 0x277a <__fp_zero>
    259e:	67 2f       	mov	r22, r23
    25a0:	78 2f       	mov	r23, r24
    25a2:	88 27       	eor	r24, r24
    25a4:	b8 5f       	subi	r27, 0xF8	; 248
    25a6:	39 f0       	breq	.+14     	; 0x25b6 <__fixunssfsi+0x46>
    25a8:	b9 3f       	cpi	r27, 0xF9	; 249
    25aa:	cc f3       	brlt	.-14     	; 0x259e <__fixunssfsi+0x2e>
    25ac:	86 95       	lsr	r24
    25ae:	77 95       	ror	r23
    25b0:	67 95       	ror	r22
    25b2:	b3 95       	inc	r27
    25b4:	d9 f7       	brne	.-10     	; 0x25ac <__fixunssfsi+0x3c>
    25b6:	3e f4       	brtc	.+14     	; 0x25c6 <__fixunssfsi+0x56>
    25b8:	90 95       	com	r25
    25ba:	80 95       	com	r24
    25bc:	70 95       	com	r23
    25be:	61 95       	neg	r22
    25c0:	7f 4f       	sbci	r23, 0xFF	; 255
    25c2:	8f 4f       	sbci	r24, 0xFF	; 255
    25c4:	9f 4f       	sbci	r25, 0xFF	; 255
    25c6:	08 95       	ret

000025c8 <__floatdisf>:
    25c8:	97 fb       	bst	r25, 7
    25ca:	0e f4       	brtc	.+2      	; 0x25ce <__floatdisf+0x6>
    25cc:	85 d0       	rcall	.+266    	; 0x26d8 <__fp_negdi>
    25ce:	3e c0       	rjmp	.+124    	; 0x264c <__fp_di2sf>

000025d0 <__floatunsisf>:
    25d0:	e8 94       	clt
    25d2:	09 c0       	rjmp	.+18     	; 0x25e6 <__floatsisf+0x12>

000025d4 <__floatsisf>:
    25d4:	97 fb       	bst	r25, 7
    25d6:	3e f4       	brtc	.+14     	; 0x25e6 <__floatsisf+0x12>
    25d8:	90 95       	com	r25
    25da:	80 95       	com	r24
    25dc:	70 95       	com	r23
    25de:	61 95       	neg	r22
    25e0:	7f 4f       	sbci	r23, 0xFF	; 255
    25e2:	8f 4f       	sbci	r24, 0xFF	; 255
    25e4:	9f 4f       	sbci	r25, 0xFF	; 255
    25e6:	99 23       	and	r25, r25
    25e8:	a9 f0       	breq	.+42     	; 0x2614 <__floatsisf+0x40>
    25ea:	f9 2f       	mov	r31, r25
    25ec:	96 e9       	ldi	r25, 0x96	; 150
    25ee:	bb 27       	eor	r27, r27
    25f0:	93 95       	inc	r25
    25f2:	f6 95       	lsr	r31
    25f4:	87 95       	ror	r24
    25f6:	77 95       	ror	r23
    25f8:	67 95       	ror	r22
    25fa:	b7 95       	ror	r27
    25fc:	f1 11       	cpse	r31, r1
    25fe:	f8 cf       	rjmp	.-16     	; 0x25f0 <__floatsisf+0x1c>
    2600:	fa f4       	brpl	.+62     	; 0x2640 <__floatsisf+0x6c>
    2602:	bb 0f       	add	r27, r27
    2604:	11 f4       	brne	.+4      	; 0x260a <__floatsisf+0x36>
    2606:	60 ff       	sbrs	r22, 0
    2608:	1b c0       	rjmp	.+54     	; 0x2640 <__floatsisf+0x6c>
    260a:	6f 5f       	subi	r22, 0xFF	; 255
    260c:	7f 4f       	sbci	r23, 0xFF	; 255
    260e:	8f 4f       	sbci	r24, 0xFF	; 255
    2610:	9f 4f       	sbci	r25, 0xFF	; 255
    2612:	16 c0       	rjmp	.+44     	; 0x2640 <__floatsisf+0x6c>
    2614:	88 23       	and	r24, r24
    2616:	11 f0       	breq	.+4      	; 0x261c <__floatsisf+0x48>
    2618:	96 e9       	ldi	r25, 0x96	; 150
    261a:	11 c0       	rjmp	.+34     	; 0x263e <__floatsisf+0x6a>
    261c:	77 23       	and	r23, r23
    261e:	21 f0       	breq	.+8      	; 0x2628 <__floatsisf+0x54>
    2620:	9e e8       	ldi	r25, 0x8E	; 142
    2622:	87 2f       	mov	r24, r23
    2624:	76 2f       	mov	r23, r22
    2626:	05 c0       	rjmp	.+10     	; 0x2632 <__floatsisf+0x5e>
    2628:	66 23       	and	r22, r22
    262a:	71 f0       	breq	.+28     	; 0x2648 <__floatsisf+0x74>
    262c:	96 e8       	ldi	r25, 0x86	; 134
    262e:	86 2f       	mov	r24, r22
    2630:	70 e0       	ldi	r23, 0x00	; 0
    2632:	60 e0       	ldi	r22, 0x00	; 0
    2634:	2a f0       	brmi	.+10     	; 0x2640 <__floatsisf+0x6c>
    2636:	9a 95       	dec	r25
    2638:	66 0f       	add	r22, r22
    263a:	77 1f       	adc	r23, r23
    263c:	88 1f       	adc	r24, r24
    263e:	da f7       	brpl	.-10     	; 0x2636 <__floatsisf+0x62>
    2640:	88 0f       	add	r24, r24
    2642:	96 95       	lsr	r25
    2644:	87 95       	ror	r24
    2646:	97 f9       	bld	r25, 7
    2648:	08 95       	ret

0000264a <__floatundisf>:
    264a:	e8 94       	clt

0000264c <__fp_di2sf>:
    264c:	f9 2f       	mov	r31, r25
    264e:	96 eb       	ldi	r25, 0xB6	; 182
    2650:	ff 23       	and	r31, r31
    2652:	81 f0       	breq	.+32     	; 0x2674 <__fp_di2sf+0x28>
    2654:	12 16       	cp	r1, r18
    2656:	13 06       	cpc	r1, r19
    2658:	14 06       	cpc	r1, r20
    265a:	44 0b       	sbc	r20, r20
    265c:	93 95       	inc	r25
    265e:	f6 95       	lsr	r31
    2660:	87 95       	ror	r24
    2662:	77 95       	ror	r23
    2664:	67 95       	ror	r22
    2666:	57 95       	ror	r21
    2668:	40 40       	sbci	r20, 0x00	; 0
    266a:	ff 23       	and	r31, r31
    266c:	b9 f7       	brne	.-18     	; 0x265c <__fp_di2sf+0x10>
    266e:	1b c0       	rjmp	.+54     	; 0x26a6 <__fp_di2sf+0x5a>
    2670:	99 27       	eor	r25, r25
    2672:	08 95       	ret
    2674:	88 23       	and	r24, r24
    2676:	51 f4       	brne	.+20     	; 0x268c <__fp_di2sf+0x40>
    2678:	98 50       	subi	r25, 0x08	; 8
    267a:	d2 f7       	brpl	.-12     	; 0x2670 <__fp_di2sf+0x24>
    267c:	87 2b       	or	r24, r23
    267e:	76 2f       	mov	r23, r22
    2680:	65 2f       	mov	r22, r21
    2682:	54 2f       	mov	r21, r20
    2684:	43 2f       	mov	r20, r19
    2686:	32 2f       	mov	r19, r18
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	b1 f3       	breq	.-20     	; 0x2678 <__fp_di2sf+0x2c>
    268c:	12 16       	cp	r1, r18
    268e:	13 06       	cpc	r1, r19
    2690:	14 06       	cpc	r1, r20
    2692:	44 0b       	sbc	r20, r20
    2694:	88 23       	and	r24, r24
    2696:	3a f0       	brmi	.+14     	; 0x26a6 <__fp_di2sf+0x5a>
    2698:	9a 95       	dec	r25
    269a:	44 0f       	add	r20, r20
    269c:	55 1f       	adc	r21, r21
    269e:	66 1f       	adc	r22, r22
    26a0:	77 1f       	adc	r23, r23
    26a2:	88 1f       	adc	r24, r24
    26a4:	ca f7       	brpl	.-14     	; 0x2698 <__fp_di2sf+0x4c>
    26a6:	55 23       	and	r21, r21
    26a8:	4a f4       	brpl	.+18     	; 0x26bc <__fp_di2sf+0x70>
    26aa:	44 0f       	add	r20, r20
    26ac:	55 1f       	adc	r21, r21
    26ae:	11 f4       	brne	.+4      	; 0x26b4 <__fp_di2sf+0x68>
    26b0:	60 ff       	sbrs	r22, 0
    26b2:	04 c0       	rjmp	.+8      	; 0x26bc <__fp_di2sf+0x70>
    26b4:	6f 5f       	subi	r22, 0xFF	; 255
    26b6:	7f 4f       	sbci	r23, 0xFF	; 255
    26b8:	8f 4f       	sbci	r24, 0xFF	; 255
    26ba:	9f 4f       	sbci	r25, 0xFF	; 255
    26bc:	88 0f       	add	r24, r24
    26be:	96 95       	lsr	r25
    26c0:	87 95       	ror	r24
    26c2:	97 f9       	bld	r25, 7
    26c4:	08 95       	ret

000026c6 <__fp_inf>:
    26c6:	97 f9       	bld	r25, 7
    26c8:	9f 67       	ori	r25, 0x7F	; 127
    26ca:	80 e8       	ldi	r24, 0x80	; 128
    26cc:	70 e0       	ldi	r23, 0x00	; 0
    26ce:	60 e0       	ldi	r22, 0x00	; 0
    26d0:	08 95       	ret

000026d2 <__fp_nan>:
    26d2:	9f ef       	ldi	r25, 0xFF	; 255
    26d4:	80 ec       	ldi	r24, 0xC0	; 192
    26d6:	08 95       	ret

000026d8 <__fp_negdi>:
    26d8:	90 95       	com	r25
    26da:	80 95       	com	r24
    26dc:	70 95       	com	r23
    26de:	60 95       	com	r22
    26e0:	50 95       	com	r21
    26e2:	40 95       	com	r20
    26e4:	30 95       	com	r19
    26e6:	21 95       	neg	r18
    26e8:	3f 4f       	sbci	r19, 0xFF	; 255
    26ea:	4f 4f       	sbci	r20, 0xFF	; 255
    26ec:	5f 4f       	sbci	r21, 0xFF	; 255
    26ee:	6f 4f       	sbci	r22, 0xFF	; 255
    26f0:	7f 4f       	sbci	r23, 0xFF	; 255
    26f2:	8f 4f       	sbci	r24, 0xFF	; 255
    26f4:	9f 4f       	sbci	r25, 0xFF	; 255
    26f6:	08 95       	ret

000026f8 <__fp_pscA>:
    26f8:	00 24       	eor	r0, r0
    26fa:	0a 94       	dec	r0
    26fc:	16 16       	cp	r1, r22
    26fe:	17 06       	cpc	r1, r23
    2700:	18 06       	cpc	r1, r24
    2702:	09 06       	cpc	r0, r25
    2704:	08 95       	ret

00002706 <__fp_pscB>:
    2706:	00 24       	eor	r0, r0
    2708:	0a 94       	dec	r0
    270a:	12 16       	cp	r1, r18
    270c:	13 06       	cpc	r1, r19
    270e:	14 06       	cpc	r1, r20
    2710:	05 06       	cpc	r0, r21
    2712:	08 95       	ret

00002714 <__fp_round>:
    2714:	09 2e       	mov	r0, r25
    2716:	03 94       	inc	r0
    2718:	00 0c       	add	r0, r0
    271a:	11 f4       	brne	.+4      	; 0x2720 <__fp_round+0xc>
    271c:	88 23       	and	r24, r24
    271e:	52 f0       	brmi	.+20     	; 0x2734 <__fp_round+0x20>
    2720:	bb 0f       	add	r27, r27
    2722:	40 f4       	brcc	.+16     	; 0x2734 <__fp_round+0x20>
    2724:	bf 2b       	or	r27, r31
    2726:	11 f4       	brne	.+4      	; 0x272c <__fp_round+0x18>
    2728:	60 ff       	sbrs	r22, 0
    272a:	04 c0       	rjmp	.+8      	; 0x2734 <__fp_round+0x20>
    272c:	6f 5f       	subi	r22, 0xFF	; 255
    272e:	7f 4f       	sbci	r23, 0xFF	; 255
    2730:	8f 4f       	sbci	r24, 0xFF	; 255
    2732:	9f 4f       	sbci	r25, 0xFF	; 255
    2734:	08 95       	ret

00002736 <__fp_split3>:
    2736:	57 fd       	sbrc	r21, 7
    2738:	90 58       	subi	r25, 0x80	; 128
    273a:	44 0f       	add	r20, r20
    273c:	55 1f       	adc	r21, r21
    273e:	59 f0       	breq	.+22     	; 0x2756 <__fp_splitA+0x10>
    2740:	5f 3f       	cpi	r21, 0xFF	; 255
    2742:	71 f0       	breq	.+28     	; 0x2760 <__fp_splitA+0x1a>
    2744:	47 95       	ror	r20

00002746 <__fp_splitA>:
    2746:	88 0f       	add	r24, r24
    2748:	97 fb       	bst	r25, 7
    274a:	99 1f       	adc	r25, r25
    274c:	61 f0       	breq	.+24     	; 0x2766 <__fp_splitA+0x20>
    274e:	9f 3f       	cpi	r25, 0xFF	; 255
    2750:	79 f0       	breq	.+30     	; 0x2770 <__fp_splitA+0x2a>
    2752:	87 95       	ror	r24
    2754:	08 95       	ret
    2756:	12 16       	cp	r1, r18
    2758:	13 06       	cpc	r1, r19
    275a:	14 06       	cpc	r1, r20
    275c:	55 1f       	adc	r21, r21
    275e:	f2 cf       	rjmp	.-28     	; 0x2744 <__fp_split3+0xe>
    2760:	46 95       	lsr	r20
    2762:	f1 df       	rcall	.-30     	; 0x2746 <__fp_splitA>
    2764:	08 c0       	rjmp	.+16     	; 0x2776 <__fp_splitA+0x30>
    2766:	16 16       	cp	r1, r22
    2768:	17 06       	cpc	r1, r23
    276a:	18 06       	cpc	r1, r24
    276c:	99 1f       	adc	r25, r25
    276e:	f1 cf       	rjmp	.-30     	; 0x2752 <__fp_splitA+0xc>
    2770:	86 95       	lsr	r24
    2772:	71 05       	cpc	r23, r1
    2774:	61 05       	cpc	r22, r1
    2776:	08 94       	sec
    2778:	08 95       	ret

0000277a <__fp_zero>:
    277a:	e8 94       	clt

0000277c <__fp_szero>:
    277c:	bb 27       	eor	r27, r27
    277e:	66 27       	eor	r22, r22
    2780:	77 27       	eor	r23, r23
    2782:	cb 01       	movw	r24, r22
    2784:	97 f9       	bld	r25, 7
    2786:	08 95       	ret

00002788 <__mulsf3>:
    2788:	0b d0       	rcall	.+22     	; 0x27a0 <__mulsf3x>
    278a:	c4 cf       	rjmp	.-120    	; 0x2714 <__fp_round>
    278c:	b5 df       	rcall	.-150    	; 0x26f8 <__fp_pscA>
    278e:	28 f0       	brcs	.+10     	; 0x279a <__mulsf3+0x12>
    2790:	ba df       	rcall	.-140    	; 0x2706 <__fp_pscB>
    2792:	18 f0       	brcs	.+6      	; 0x279a <__mulsf3+0x12>
    2794:	95 23       	and	r25, r21
    2796:	09 f0       	breq	.+2      	; 0x279a <__mulsf3+0x12>
    2798:	96 cf       	rjmp	.-212    	; 0x26c6 <__fp_inf>
    279a:	9b cf       	rjmp	.-202    	; 0x26d2 <__fp_nan>
    279c:	11 24       	eor	r1, r1
    279e:	ee cf       	rjmp	.-36     	; 0x277c <__fp_szero>

000027a0 <__mulsf3x>:
    27a0:	ca df       	rcall	.-108    	; 0x2736 <__fp_split3>
    27a2:	a0 f3       	brcs	.-24     	; 0x278c <__mulsf3+0x4>

000027a4 <__mulsf3_pse>:
    27a4:	95 9f       	mul	r25, r21
    27a6:	d1 f3       	breq	.-12     	; 0x279c <__mulsf3+0x14>
    27a8:	95 0f       	add	r25, r21
    27aa:	50 e0       	ldi	r21, 0x00	; 0
    27ac:	55 1f       	adc	r21, r21
    27ae:	62 9f       	mul	r22, r18
    27b0:	f0 01       	movw	r30, r0
    27b2:	72 9f       	mul	r23, r18
    27b4:	bb 27       	eor	r27, r27
    27b6:	f0 0d       	add	r31, r0
    27b8:	b1 1d       	adc	r27, r1
    27ba:	63 9f       	mul	r22, r19
    27bc:	aa 27       	eor	r26, r26
    27be:	f0 0d       	add	r31, r0
    27c0:	b1 1d       	adc	r27, r1
    27c2:	aa 1f       	adc	r26, r26
    27c4:	64 9f       	mul	r22, r20
    27c6:	66 27       	eor	r22, r22
    27c8:	b0 0d       	add	r27, r0
    27ca:	a1 1d       	adc	r26, r1
    27cc:	66 1f       	adc	r22, r22
    27ce:	82 9f       	mul	r24, r18
    27d0:	22 27       	eor	r18, r18
    27d2:	b0 0d       	add	r27, r0
    27d4:	a1 1d       	adc	r26, r1
    27d6:	62 1f       	adc	r22, r18
    27d8:	73 9f       	mul	r23, r19
    27da:	b0 0d       	add	r27, r0
    27dc:	a1 1d       	adc	r26, r1
    27de:	62 1f       	adc	r22, r18
    27e0:	83 9f       	mul	r24, r19
    27e2:	a0 0d       	add	r26, r0
    27e4:	61 1d       	adc	r22, r1
    27e6:	22 1f       	adc	r18, r18
    27e8:	74 9f       	mul	r23, r20
    27ea:	33 27       	eor	r19, r19
    27ec:	a0 0d       	add	r26, r0
    27ee:	61 1d       	adc	r22, r1
    27f0:	23 1f       	adc	r18, r19
    27f2:	84 9f       	mul	r24, r20
    27f4:	60 0d       	add	r22, r0
    27f6:	21 1d       	adc	r18, r1
    27f8:	82 2f       	mov	r24, r18
    27fa:	76 2f       	mov	r23, r22
    27fc:	6a 2f       	mov	r22, r26
    27fe:	11 24       	eor	r1, r1
    2800:	9f 57       	subi	r25, 0x7F	; 127
    2802:	50 40       	sbci	r21, 0x00	; 0
    2804:	8a f0       	brmi	.+34     	; 0x2828 <__mulsf3_pse+0x84>
    2806:	e1 f0       	breq	.+56     	; 0x2840 <__mulsf3_pse+0x9c>
    2808:	88 23       	and	r24, r24
    280a:	4a f0       	brmi	.+18     	; 0x281e <__mulsf3_pse+0x7a>
    280c:	ee 0f       	add	r30, r30
    280e:	ff 1f       	adc	r31, r31
    2810:	bb 1f       	adc	r27, r27
    2812:	66 1f       	adc	r22, r22
    2814:	77 1f       	adc	r23, r23
    2816:	88 1f       	adc	r24, r24
    2818:	91 50       	subi	r25, 0x01	; 1
    281a:	50 40       	sbci	r21, 0x00	; 0
    281c:	a9 f7       	brne	.-22     	; 0x2808 <__mulsf3_pse+0x64>
    281e:	9e 3f       	cpi	r25, 0xFE	; 254
    2820:	51 05       	cpc	r21, r1
    2822:	70 f0       	brcs	.+28     	; 0x2840 <__mulsf3_pse+0x9c>
    2824:	50 cf       	rjmp	.-352    	; 0x26c6 <__fp_inf>
    2826:	aa cf       	rjmp	.-172    	; 0x277c <__fp_szero>
    2828:	5f 3f       	cpi	r21, 0xFF	; 255
    282a:	ec f3       	brlt	.-6      	; 0x2826 <__mulsf3_pse+0x82>
    282c:	98 3e       	cpi	r25, 0xE8	; 232
    282e:	dc f3       	brlt	.-10     	; 0x2826 <__mulsf3_pse+0x82>
    2830:	86 95       	lsr	r24
    2832:	77 95       	ror	r23
    2834:	67 95       	ror	r22
    2836:	b7 95       	ror	r27
    2838:	f7 95       	ror	r31
    283a:	e7 95       	ror	r30
    283c:	9f 5f       	subi	r25, 0xFF	; 255
    283e:	c1 f7       	brne	.-16     	; 0x2830 <__mulsf3_pse+0x8c>
    2840:	fe 2b       	or	r31, r30
    2842:	88 0f       	add	r24, r24
    2844:	91 1d       	adc	r25, r1
    2846:	96 95       	lsr	r25
    2848:	87 95       	ror	r24
    284a:	97 f9       	bld	r25, 7
    284c:	08 95       	ret

0000284e <InitializeUARTTimer>:

unsigned long
UARTReceiveSync(UART_NUMBER UARTNumber, PVOID ReceiveValue, unsigned long Length)
{
	return UARTReceive(UARTNumber, ReceiveValue, Length, 0);
}
    284e:	82 e0       	ldi	r24, 0x02	; 2
    2850:	84 bd       	out	0x24, r24	; 36
    2852:	15 bc       	out	0x25, r1	; 37
    2854:	16 bc       	out	0x26, r1	; 38
    2856:	17 bc       	out	0x27, r1	; 39
    2858:	18 bc       	out	0x28, r1	; 40
    285a:	80 93 6e 00 	sts	0x006E, r24
    285e:	08 95       	ret

00002860 <InitUARTSync>:
    2860:	cf 93       	push	r28
    2862:	40 93 ac 0b 	sts	0x0BAC, r20
    2866:	88 23       	and	r24, r24
    2868:	19 f0       	breq	.+6      	; 0x2870 <InitUARTSync+0x10>
    286a:	81 30       	cpi	r24, 0x01	; 1
    286c:	c9 f0       	breq	.+50     	; 0x28a0 <InitUARTSync+0x40>
    286e:	30 c0       	rjmp	.+96     	; 0x28d0 <InitUARTSync+0x70>
    2870:	70 93 c5 00 	sts	0x00C5, r23
    2874:	60 93 c4 00 	sts	0x00C4, r22
    2878:	88 e9       	ldi	r24, 0x98	; 152
    287a:	80 93 c1 00 	sts	0x00C1, r24
    287e:	41 30       	cpi	r20, 0x01	; 1
    2880:	39 f4       	brne	.+14     	; 0x2890 <InitUARTSync+0x30>
    2882:	86 e0       	ldi	r24, 0x06	; 6
    2884:	80 93 c2 00 	sts	0x00C2, r24
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	80 93 c0 00 	sts	0x00C0, r24
    288e:	03 c0       	rjmp	.+6      	; 0x2896 <InitUARTSync+0x36>
    2890:	86 e0       	ldi	r24, 0x06	; 6
    2892:	80 93 c2 00 	sts	0x00C2, r24
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	80 93 62 0b 	sts	0x0B62, r24
    289c:	c1 e0       	ldi	r28, 0x01	; 1
    289e:	19 c0       	rjmp	.+50     	; 0x28d2 <InitUARTSync+0x72>
    28a0:	70 93 cd 00 	sts	0x00CD, r23
    28a4:	60 93 cc 00 	sts	0x00CC, r22
    28a8:	88 e9       	ldi	r24, 0x98	; 152
    28aa:	80 93 c9 00 	sts	0x00C9, r24
    28ae:	41 30       	cpi	r20, 0x01	; 1
    28b0:	39 f4       	brne	.+14     	; 0x28c0 <InitUARTSync+0x60>
    28b2:	86 e0       	ldi	r24, 0x06	; 6
    28b4:	80 93 ca 00 	sts	0x00CA, r24
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	80 93 c8 00 	sts	0x00C8, r24
    28be:	03 c0       	rjmp	.+6      	; 0x28c6 <InitUARTSync+0x66>
    28c0:	86 e0       	ldi	r24, 0x06	; 6
    28c2:	80 93 ca 00 	sts	0x00CA, r24
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	80 93 63 0b 	sts	0x0B63, r24
    28cc:	c1 e0       	ldi	r28, 0x01	; 1
    28ce:	01 c0       	rjmp	.+2      	; 0x28d2 <InitUARTSync+0x72>
    28d0:	c0 e0       	ldi	r28, 0x00	; 0
    28d2:	bd df       	rcall	.-134    	; 0x284e <InitializeUARTTimer>
    28d4:	8c 2f       	mov	r24, r28
    28d6:	cf 91       	pop	r28
    28d8:	08 95       	ret

000028da <UARTTransmit>:
    28da:	cf 92       	push	r12
    28dc:	df 92       	push	r13
    28de:	ef 92       	push	r14
    28e0:	ff 92       	push	r15
    28e2:	0f 93       	push	r16
    28e4:	1f 93       	push	r17
    28e6:	cf 93       	push	r28
    28e8:	df 93       	push	r29
    28ea:	6b 01       	movw	r12, r22
    28ec:	88 23       	and	r24, r24
    28ee:	19 f0       	breq	.+6      	; 0x28f6 <UARTTransmit+0x1c>
    28f0:	81 30       	cpi	r24, 0x01	; 1
    28f2:	c1 f1       	breq	.+112    	; 0x2964 <UARTTransmit+0x8a>
    28f4:	6c c0       	rjmp	.+216    	; 0x29ce <UARTTransmit+0xf4>
    28f6:	80 91 62 0b 	lds	r24, 0x0B62
    28fa:	88 23       	and	r24, r24
    28fc:	09 f4       	brne	.+2      	; 0x2900 <UARTTransmit+0x26>
    28fe:	6b c0       	rjmp	.+214    	; 0x29d6 <UARTTransmit+0xfc>
    2900:	21 15       	cp	r18, r1
    2902:	31 05       	cpc	r19, r1
    2904:	41 05       	cpc	r20, r1
    2906:	51 05       	cpc	r21, r1
    2908:	09 f4       	brne	.+2      	; 0x290c <UARTTransmit+0x32>
    290a:	6c c0       	rjmp	.+216    	; 0x29e4 <UARTTransmit+0x10a>
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	dc 01       	movw	r26, r24
    2912:	c0 ec       	ldi	r28, 0xC0	; 192
    2914:	d0 e0       	ldi	r29, 0x00	; 0
    2916:	0f 2e       	mov	r0, r31
    2918:	f1 ec       	ldi	r31, 0xC1	; 193
    291a:	ef 2e       	mov	r14, r31
    291c:	f1 2c       	mov	r15, r1
    291e:	f0 2d       	mov	r31, r0
    2920:	66 ec       	ldi	r22, 0xC6	; 198
    2922:	70 e0       	ldi	r23, 0x00	; 0
    2924:	18 81       	ld	r17, Y
    2926:	15 ff       	sbrs	r17, 5
    2928:	fd cf       	rjmp	.-6      	; 0x2924 <UARTTransmit+0x4a>
    292a:	10 91 ac 0b 	lds	r17, 0x0BAC
    292e:	11 23       	and	r17, r17
    2930:	59 f0       	breq	.+22     	; 0x2948 <UARTTransmit+0x6e>
    2932:	00 23       	and	r16, r16
    2934:	29 f0       	breq	.+10     	; 0x2940 <UARTTransmit+0x66>
    2936:	f7 01       	movw	r30, r14
    2938:	10 81       	ld	r17, Z
    293a:	11 60       	ori	r17, 0x01	; 1
    293c:	10 83       	st	Z, r17
    293e:	04 c0       	rjmp	.+8      	; 0x2948 <UARTTransmit+0x6e>
    2940:	f7 01       	movw	r30, r14
    2942:	10 81       	ld	r17, Z
    2944:	1e 7f       	andi	r17, 0xFE	; 254
    2946:	10 83       	st	Z, r17
    2948:	f6 01       	movw	r30, r12
    294a:	11 91       	ld	r17, Z+
    294c:	6f 01       	movw	r12, r30
    294e:	fb 01       	movw	r30, r22
    2950:	10 83       	st	Z, r17
    2952:	01 96       	adiw	r24, 0x01	; 1
    2954:	a1 1d       	adc	r26, r1
    2956:	b1 1d       	adc	r27, r1
    2958:	82 17       	cp	r24, r18
    295a:	93 07       	cpc	r25, r19
    295c:	a4 07       	cpc	r26, r20
    295e:	b5 07       	cpc	r27, r21
    2960:	09 f7       	brne	.-62     	; 0x2924 <UARTTransmit+0x4a>
    2962:	40 c0       	rjmp	.+128    	; 0x29e4 <UARTTransmit+0x10a>
    2964:	80 91 63 0b 	lds	r24, 0x0B63
    2968:	88 23       	and	r24, r24
    296a:	c9 f1       	breq	.+114    	; 0x29de <UARTTransmit+0x104>
    296c:	21 15       	cp	r18, r1
    296e:	31 05       	cpc	r19, r1
    2970:	41 05       	cpc	r20, r1
    2972:	51 05       	cpc	r21, r1
    2974:	b9 f1       	breq	.+110    	; 0x29e4 <UARTTransmit+0x10a>
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	dc 01       	movw	r26, r24
    297c:	c8 ec       	ldi	r28, 0xC8	; 200
    297e:	d0 e0       	ldi	r29, 0x00	; 0
    2980:	0f 2e       	mov	r0, r31
    2982:	f9 ec       	ldi	r31, 0xC9	; 201
    2984:	ef 2e       	mov	r14, r31
    2986:	f1 2c       	mov	r15, r1
    2988:	f0 2d       	mov	r31, r0
    298a:	6e ec       	ldi	r22, 0xCE	; 206
    298c:	70 e0       	ldi	r23, 0x00	; 0
    298e:	18 81       	ld	r17, Y
    2990:	15 ff       	sbrs	r17, 5
    2992:	fd cf       	rjmp	.-6      	; 0x298e <UARTTransmit+0xb4>
    2994:	10 91 ac 0b 	lds	r17, 0x0BAC
    2998:	11 23       	and	r17, r17
    299a:	59 f0       	breq	.+22     	; 0x29b2 <UARTTransmit+0xd8>
    299c:	00 23       	and	r16, r16
    299e:	29 f0       	breq	.+10     	; 0x29aa <UARTTransmit+0xd0>
    29a0:	f7 01       	movw	r30, r14
    29a2:	10 81       	ld	r17, Z
    29a4:	11 60       	ori	r17, 0x01	; 1
    29a6:	10 83       	st	Z, r17
    29a8:	04 c0       	rjmp	.+8      	; 0x29b2 <UARTTransmit+0xd8>
    29aa:	f7 01       	movw	r30, r14
    29ac:	10 81       	ld	r17, Z
    29ae:	1e 7f       	andi	r17, 0xFE	; 254
    29b0:	10 83       	st	Z, r17
    29b2:	f6 01       	movw	r30, r12
    29b4:	11 91       	ld	r17, Z+
    29b6:	6f 01       	movw	r12, r30
    29b8:	fb 01       	movw	r30, r22
    29ba:	10 83       	st	Z, r17
    29bc:	01 96       	adiw	r24, 0x01	; 1
    29be:	a1 1d       	adc	r26, r1
    29c0:	b1 1d       	adc	r27, r1
    29c2:	82 17       	cp	r24, r18
    29c4:	93 07       	cpc	r25, r19
    29c6:	a4 07       	cpc	r26, r20
    29c8:	b5 07       	cpc	r27, r21
    29ca:	09 f7       	brne	.-62     	; 0x298e <UARTTransmit+0xb4>
    29cc:	0b c0       	rjmp	.+22     	; 0x29e4 <UARTTransmit+0x10a>
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	a9 01       	movw	r20, r18
    29d4:	07 c0       	rjmp	.+14     	; 0x29e4 <UARTTransmit+0x10a>
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	a9 01       	movw	r20, r18
    29dc:	03 c0       	rjmp	.+6      	; 0x29e4 <UARTTransmit+0x10a>
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	a9 01       	movw	r20, r18
    29e4:	ca 01       	movw	r24, r20
    29e6:	b9 01       	movw	r22, r18
    29e8:	df 91       	pop	r29
    29ea:	cf 91       	pop	r28
    29ec:	1f 91       	pop	r17
    29ee:	0f 91       	pop	r16
    29f0:	ff 90       	pop	r15
    29f2:	ef 90       	pop	r14
    29f4:	df 90       	pop	r13
    29f6:	cf 90       	pop	r12
    29f8:	08 95       	ret

000029fa <UARTTransmitSync>:
    29fa:	0f 93       	push	r16
    29fc:	00 e0       	ldi	r16, 0x00	; 0
    29fe:	6d df       	rcall	.-294    	; 0x28da <UARTTransmit>
    2a00:	0f 91       	pop	r16
    2a02:	08 95       	ret

00002a04 <__vector_16>:
	return IndexI;

}

ISR(TIMER0_COMPA_vect)
{
    2a04:	1f 92       	push	r1
    2a06:	0f 92       	push	r0
    2a08:	0f b6       	in	r0, 0x3f	; 63
    2a0a:	0f 92       	push	r0
    2a0c:	11 24       	eor	r1, r1
    2a0e:	8f 93       	push	r24
	gUARTTimerTriggered = TRUE;
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	80 93 af 0b 	sts	0x0BAF, r24
}
    2a16:	8f 91       	pop	r24
    2a18:	0f 90       	pop	r0
    2a1a:	0f be       	out	0x3f, r0	; 63
    2a1c:	0f 90       	pop	r0
    2a1e:	1f 90       	pop	r1
    2a20:	18 95       	reti

00002a22 <__vector_20>:

ISR(USART0_RX_vect)
{
    2a22:	1f 92       	push	r1
    2a24:	0f 92       	push	r0
    2a26:	0f b6       	in	r0, 0x3f	; 63
    2a28:	0f 92       	push	r0
    2a2a:	11 24       	eor	r1, r1
    2a2c:	0b b6       	in	r0, 0x3b	; 59
    2a2e:	0f 92       	push	r0
    2a30:	2f 93       	push	r18
    2a32:	3f 93       	push	r19
    2a34:	4f 93       	push	r20
    2a36:	5f 93       	push	r21
    2a38:	6f 93       	push	r22
    2a3a:	7f 93       	push	r23
    2a3c:	8f 93       	push	r24
    2a3e:	9f 93       	push	r25
    2a40:	af 93       	push	r26
    2a42:	bf 93       	push	r27
    2a44:	ef 93       	push	r30
    2a46:	ff 93       	push	r31
	if(gRCICallback0 != NULL)
    2a48:	e0 91 9e 0b 	lds	r30, 0x0B9E
    2a4c:	f0 91 9f 0b 	lds	r31, 0x0B9F
    2a50:	30 97       	sbiw	r30, 0x00	; 0
    2a52:	31 f0       	breq	.+12     	; 0x2a60 <__vector_20+0x3e>
	{
		gRCICallback0(UART_ZERO, gRCICallbackContext0);
    2a54:	60 91 aa 0b 	lds	r22, 0x0BAA
    2a58:	70 91 ab 0b 	lds	r23, 0x0BAB
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	09 95       	icall
	}
}
    2a60:	ff 91       	pop	r31
    2a62:	ef 91       	pop	r30
    2a64:	bf 91       	pop	r27
    2a66:	af 91       	pop	r26
    2a68:	9f 91       	pop	r25
    2a6a:	8f 91       	pop	r24
    2a6c:	7f 91       	pop	r23
    2a6e:	6f 91       	pop	r22
    2a70:	5f 91       	pop	r21
    2a72:	4f 91       	pop	r20
    2a74:	3f 91       	pop	r19
    2a76:	2f 91       	pop	r18
    2a78:	0f 90       	pop	r0
    2a7a:	0b be       	out	0x3b, r0	; 59
    2a7c:	0f 90       	pop	r0
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	0f 90       	pop	r0
    2a82:	1f 90       	pop	r1
    2a84:	18 95       	reti

00002a86 <__vector_28>:

ISR(USART1_RX_vect)
{
    2a86:	1f 92       	push	r1
    2a88:	0f 92       	push	r0
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	0f 92       	push	r0
    2a8e:	11 24       	eor	r1, r1
    2a90:	0b b6       	in	r0, 0x3b	; 59
    2a92:	0f 92       	push	r0
    2a94:	2f 93       	push	r18
    2a96:	3f 93       	push	r19
    2a98:	4f 93       	push	r20
    2a9a:	5f 93       	push	r21
    2a9c:	6f 93       	push	r22
    2a9e:	7f 93       	push	r23
    2aa0:	8f 93       	push	r24
    2aa2:	9f 93       	push	r25
    2aa4:	af 93       	push	r26
    2aa6:	bf 93       	push	r27
    2aa8:	ef 93       	push	r30
    2aaa:	ff 93       	push	r31
	if(gRCICallback1 != NULL)
    2aac:	e0 91 a4 0b 	lds	r30, 0x0BA4
    2ab0:	f0 91 a5 0b 	lds	r31, 0x0BA5
    2ab4:	30 97       	sbiw	r30, 0x00	; 0
    2ab6:	31 f0       	breq	.+12     	; 0x2ac4 <__vector_28+0x3e>
	{
		gRCICallback1(UART_ONE, gRCICallbackContext1);
    2ab8:	60 91 a2 0b 	lds	r22, 0x0BA2
    2abc:	70 91 a3 0b 	lds	r23, 0x0BA3
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	09 95       	icall
	}
}
    2ac4:	ff 91       	pop	r31
    2ac6:	ef 91       	pop	r30
    2ac8:	bf 91       	pop	r27
    2aca:	af 91       	pop	r26
    2acc:	9f 91       	pop	r25
    2ace:	8f 91       	pop	r24
    2ad0:	7f 91       	pop	r23
    2ad2:	6f 91       	pop	r22
    2ad4:	5f 91       	pop	r21
    2ad6:	4f 91       	pop	r20
    2ad8:	3f 91       	pop	r19
    2ada:	2f 91       	pop	r18
    2adc:	0f 90       	pop	r0
    2ade:	0b be       	out	0x3b, r0	; 59
    2ae0:	0f 90       	pop	r0
    2ae2:	0f be       	out	0x3f, r0	; 63
    2ae4:	0f 90       	pop	r0
    2ae6:	1f 90       	pop	r1
    2ae8:	18 95       	reti

00002aea <__vector_22>:

ISR(USART0_TX_vect)
{
    2aea:	1f 92       	push	r1
    2aec:	0f 92       	push	r0
    2aee:	0f b6       	in	r0, 0x3f	; 63
    2af0:	0f 92       	push	r0
    2af2:	11 24       	eor	r1, r1
    2af4:	0b b6       	in	r0, 0x3b	; 59
    2af6:	0f 92       	push	r0
    2af8:	2f 93       	push	r18
    2afa:	3f 93       	push	r19
    2afc:	4f 93       	push	r20
    2afe:	5f 93       	push	r21
    2b00:	6f 93       	push	r22
    2b02:	7f 93       	push	r23
    2b04:	8f 93       	push	r24
    2b06:	9f 93       	push	r25
    2b08:	af 93       	push	r26
    2b0a:	bf 93       	push	r27
    2b0c:	ef 93       	push	r30
    2b0e:	ff 93       	push	r31
	if(gTCICallback0 != NULL)
    2b10:	e0 91 a0 0b 	lds	r30, 0x0BA0
    2b14:	f0 91 a1 0b 	lds	r31, 0x0BA1
    2b18:	30 97       	sbiw	r30, 0x00	; 0
    2b1a:	31 f0       	breq	.+12     	; 0x2b28 <__vector_22+0x3e>
	{
		gTCICallback0(UART_ZERO, gTCICallbackContext0);
    2b1c:	60 91 a8 0b 	lds	r22, 0x0BA8
    2b20:	70 91 a9 0b 	lds	r23, 0x0BA9
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	09 95       	icall
	}
}
    2b28:	ff 91       	pop	r31
    2b2a:	ef 91       	pop	r30
    2b2c:	bf 91       	pop	r27
    2b2e:	af 91       	pop	r26
    2b30:	9f 91       	pop	r25
    2b32:	8f 91       	pop	r24
    2b34:	7f 91       	pop	r23
    2b36:	6f 91       	pop	r22
    2b38:	5f 91       	pop	r21
    2b3a:	4f 91       	pop	r20
    2b3c:	3f 91       	pop	r19
    2b3e:	2f 91       	pop	r18
    2b40:	0f 90       	pop	r0
    2b42:	0b be       	out	0x3b, r0	; 59
    2b44:	0f 90       	pop	r0
    2b46:	0f be       	out	0x3f, r0	; 63
    2b48:	0f 90       	pop	r0
    2b4a:	1f 90       	pop	r1
    2b4c:	18 95       	reti

00002b4e <__vector_30>:

ISR(USART1_TX_vect)
{
    2b4e:	1f 92       	push	r1
    2b50:	0f 92       	push	r0
    2b52:	0f b6       	in	r0, 0x3f	; 63
    2b54:	0f 92       	push	r0
    2b56:	11 24       	eor	r1, r1
    2b58:	0b b6       	in	r0, 0x3b	; 59
    2b5a:	0f 92       	push	r0
    2b5c:	2f 93       	push	r18
    2b5e:	3f 93       	push	r19
    2b60:	4f 93       	push	r20
    2b62:	5f 93       	push	r21
    2b64:	6f 93       	push	r22
    2b66:	7f 93       	push	r23
    2b68:	8f 93       	push	r24
    2b6a:	9f 93       	push	r25
    2b6c:	af 93       	push	r26
    2b6e:	bf 93       	push	r27
    2b70:	ef 93       	push	r30
    2b72:	ff 93       	push	r31
	if(gTCICallback1 != NULL)
    2b74:	e0 91 a6 0b 	lds	r30, 0x0BA6
    2b78:	f0 91 a7 0b 	lds	r31, 0x0BA7
    2b7c:	30 97       	sbiw	r30, 0x00	; 0
    2b7e:	31 f0       	breq	.+12     	; 0x2b8c <__vector_30+0x3e>
	{
		gTCICallback1(UART_ONE, gTCICallbackContext1);
    2b80:	60 91 ad 0b 	lds	r22, 0x0BAD
    2b84:	70 91 ae 0b 	lds	r23, 0x0BAE
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	09 95       	icall
	}
    2b8c:	ff 91       	pop	r31
    2b8e:	ef 91       	pop	r30
    2b90:	bf 91       	pop	r27
    2b92:	af 91       	pop	r26
    2b94:	9f 91       	pop	r25
    2b96:	8f 91       	pop	r24
    2b98:	7f 91       	pop	r23
    2b9a:	6f 91       	pop	r22
    2b9c:	5f 91       	pop	r21
    2b9e:	4f 91       	pop	r20
    2ba0:	3f 91       	pop	r19
    2ba2:	2f 91       	pop	r18
    2ba4:	0f 90       	pop	r0
    2ba6:	0b be       	out	0x3b, r0	; 59
    2ba8:	0f 90       	pop	r0
    2baa:	0f be       	out	0x3f, r0	; 63
    2bac:	0f 90       	pop	r0
    2bae:	1f 90       	pop	r1
    2bb0:	18 95       	reti

00002bb2 <InitSPI>:

bool gIsMaster				= FALSE;

void
InitSPI (PSPI_MODE SPIMode)
{	
    2bb2:	fc 01       	movw	r30, r24
	
	//
	// Disable SPI
	//

	SPCR = 0;
    2bb4:	1c bc       	out	0x2c, r1	; 44

	//
	// Reset Data Direction Register of SPI
	//

	DDRB &= ~((1 << PORTB4) | (1 << PORTB5) | (1 << PORTB6) | (1 << PORTB7));
    2bb6:	84 b1       	in	r24, 0x04	; 4
    2bb8:	8f 70       	andi	r24, 0x0F	; 15
    2bba:	84 b9       	out	0x04, r24	; 4

	//
	// Set Clock Rate
	//

	SPCR = SPIMode->ClockRate & SPCR_CLOCK_RATE_MASK;
    2bbc:	84 81       	ldd	r24, Z+4	; 0x04
    2bbe:	83 70       	andi	r24, 0x03	; 3
    2bc0:	8c bd       	out	0x2c, r24	; 44

	if (SPIMode->ClockRate & SPSR_CLOCK_RATE_MASK)
    2bc2:	84 81       	ldd	r24, Z+4	; 0x04
    2bc4:	82 ff       	sbrs	r24, 2
    2bc6:	02 c0       	rjmp	.+4      	; 0x2bcc <InitSPI+0x1a>
	{
		SPSR = (1 << SPI2X);
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	8d bd       	out	0x2d, r24	; 45
	}

	if (SPIMode->ClockPulse)
    2bcc:	82 81       	ldd	r24, Z+2	; 0x02
    2bce:	88 23       	and	r24, r24
    2bd0:	19 f0       	breq	.+6      	; 0x2bd8 <InitSPI+0x26>
	{
		SPCR |= (1 << CPHA);
    2bd2:	8c b5       	in	r24, 0x2c	; 44
    2bd4:	84 60       	ori	r24, 0x04	; 4
    2bd6:	8c bd       	out	0x2c, r24	; 44

	//
	// Set Clock Polarity
	//

	if (SPIMode->ClockPolarity)
    2bd8:	81 81       	ldd	r24, Z+1	; 0x01
    2bda:	88 23       	and	r24, r24
    2bdc:	19 f0       	breq	.+6      	; 0x2be4 <InitSPI+0x32>
	{
		SPCR |= (1 << CPOL);
    2bde:	8c b5       	in	r24, 0x2c	; 44
    2be0:	88 60       	ori	r24, 0x08	; 8
    2be2:	8c bd       	out	0x2c, r24	; 44

	//
	// Set Clock Pulse
	//

	if (SPIMode->DataOrder)
    2be4:	83 81       	ldd	r24, Z+3	; 0x03
    2be6:	88 23       	and	r24, r24
    2be8:	19 f0       	breq	.+6      	; 0x2bf0 <InitSPI+0x3e>
	{
		SPCR |= (1 << DORD);
    2bea:	8c b5       	in	r24, 0x2c	; 44
    2bec:	80 62       	ori	r24, 0x20	; 32
    2bee:	8c bd       	out	0x2c, r24	; 44

	//
	// Set Direction Registers Accordingly.
	//
		
	if (SPIMode->IsMaster)
    2bf0:	80 81       	ld	r24, Z
    2bf2:	88 23       	and	r24, r24
    2bf4:	59 f0       	breq	.+22     	; 0x2c0c <InitSPI+0x5a>
	{
		//
		// Master Mode
		//

		DDRB |= ((1 << PORTB4) | (1 << PORTB5) | (1 << PORTB7));
    2bf6:	84 b1       	in	r24, 0x04	; 4
    2bf8:	80 6b       	ori	r24, 0xB0	; 176
    2bfa:	84 b9       	out	0x04, r24	; 4

		SPCR |= (1 << MSTR);
    2bfc:	8c b5       	in	r24, 0x2c	; 44
    2bfe:	80 61       	ori	r24, 0x10	; 16
    2c00:	8c bd       	out	0x2c, r24	; 44
			
		SS_HIGH();
    2c02:	2c 9a       	sbi	0x05, 4	; 5

		gIsMaster = TRUE;
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	80 93 64 0b 	sts	0x0B64, r24
    2c0a:	01 c0       	rjmp	.+2      	; 0x2c0e <InitSPI+0x5c>
	{
		//
		// Slave Mode
		//

		DDRB |= (1 << PORTB6);
    2c0c:	26 9a       	sbi	0x04, 6	; 4

	//
	// Clear SPDR
	//
	
	SPDR = 0;
    2c0e:	1e bc       	out	0x2e, r1	; 46

	//
	// Enable SPI
	//

	SPCR |= (1 << SPE);
    2c10:	8c b5       	in	r24, 0x2c	; 44
    2c12:	80 64       	ori	r24, 0x40	; 64
    2c14:	8c bd       	out	0x2c, r24	; 44
	
	gSPIInitialized = TRUE;
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	80 93 65 0b 	sts	0x0B65, r24
    2c1c:	08 95       	ret

00002c1e <SPIBeginTransfer>:
}

void
SPIBeginTransfer()
{
	SS_LOW();
    2c1e:	2c 98       	cbi	0x05, 4	; 5
    2c20:	08 95       	ret

00002c22 <SPIEndTransfer>:

void
SPIEndTransfer()
{

	SS_HIGH();
    2c22:	2c 9a       	sbi	0x05, 4	; 5
    2c24:	08 95       	ret

00002c26 <SPIMasterTransfer>:
}

bool
SPIMasterTransfer(PVOID TransmitBuffer, PVOID ReceiveBuffer, unsigned long Length) 
{
    2c26:	cf 92       	push	r12
    2c28:	df 92       	push	r13
    2c2a:	ef 92       	push	r14
    2c2c:	ff 92       	push	r15
    2c2e:	fb 01       	movw	r30, r22
	unsigned char *TxBytePtr = (unsigned char *) TransmitBuffer;
	
	unsigned char *RxBytePtr = (unsigned char *) ReceiveBuffer;
	

	if (!gSPIInitialized)
    2c30:	60 91 65 0b 	lds	r22, 0x0B65
    2c34:	61 11       	cpse	r22, r1
    2c36:	0d c0       	rjmp	.+26     	; 0x2c52 <SPIMasterTransfer+0x2c>
	{

		SendTrace(ERROR_LEVEL, "SPITransfer - SPI Not Initialized\r\n");
    2c38:	80 ed       	ldi	r24, 0xD0	; 208
    2c3a:	9a e0       	ldi	r25, 0x0A	; 10
    2c3c:	9f 93       	push	r25
    2c3e:	8f 93       	push	r24
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	8f 93       	push	r24
    2c44:	0e 94 57 09 	call	0x12ae	; 0x12ae <SendTrace>

		Status = FALSE;

		goto Exit;
    2c48:	0f 90       	pop	r0
    2c4a:	0f 90       	pop	r0
    2c4c:	0f 90       	pop	r0
	if (!gSPIInitialized)
	{

		SendTrace(ERROR_LEVEL, "SPITransfer - SPI Not Initialized\r\n");

		Status = FALSE;
    2c4e:	80 e0       	ldi	r24, 0x00	; 0

		goto Exit;
    2c50:	3d c0       	rjmp	.+122    	; 0x2ccc <SPIMasterTransfer+0xa6>
	}
	
	if (!gIsMaster)
    2c52:	60 91 64 0b 	lds	r22, 0x0B64
    2c56:	61 11       	cpse	r22, r1
    2c58:	0d c0       	rjmp	.+26     	; 0x2c74 <SPIMasterTransfer+0x4e>
	{

		SendTrace(ERROR_LEVEL, "SPITransfer - SPI Not In Master Mode\r\n");
    2c5a:	84 ef       	ldi	r24, 0xF4	; 244
    2c5c:	9a e0       	ldi	r25, 0x0A	; 10
    2c5e:	9f 93       	push	r25
    2c60:	8f 93       	push	r24
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	8f 93       	push	r24
    2c66:	0e 94 57 09 	call	0x12ae	; 0x12ae <SendTrace>

		Status = FALSE;

		goto Exit;
    2c6a:	0f 90       	pop	r0
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
	if (!gIsMaster)
	{

		SendTrace(ERROR_LEVEL, "SPITransfer - SPI Not In Master Mode\r\n");

		Status = FALSE;
    2c70:	80 e0       	ldi	r24, 0x00	; 0

		goto Exit;
    2c72:	2c c0       	rjmp	.+88     	; 0x2ccc <SPIMasterTransfer+0xa6>
	}
	
	if (Length == 0 || TransmitBuffer == NULL || ReceiveBuffer == NULL) 
    2c74:	21 15       	cp	r18, r1
    2c76:	31 05       	cpc	r19, r1
    2c78:	41 05       	cpc	r20, r1
    2c7a:	51 05       	cpc	r21, r1
    2c7c:	21 f0       	breq	.+8      	; 0x2c86 <SPIMasterTransfer+0x60>
    2c7e:	00 97       	sbiw	r24, 0x00	; 0
    2c80:	11 f0       	breq	.+4      	; 0x2c86 <SPIMasterTransfer+0x60>
    2c82:	30 97       	sbiw	r30, 0x00	; 0
    2c84:	69 f4       	brne	.+26     	; 0x2ca0 <SPIMasterTransfer+0x7a>
	{
		SendTrace(ERROR_LEVEL, "SPITransfer - SPI Buffer Error\r\n");
    2c86:	8b e1       	ldi	r24, 0x1B	; 27
    2c88:	9b e0       	ldi	r25, 0x0B	; 11
    2c8a:	9f 93       	push	r25
    2c8c:	8f 93       	push	r24
    2c8e:	81 e0       	ldi	r24, 0x01	; 1
    2c90:	8f 93       	push	r24
    2c92:	0e 94 57 09 	call	0x12ae	; 0x12ae <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
    2c96:	0f 90       	pop	r0
    2c98:	0f 90       	pop	r0
    2c9a:	0f 90       	pop	r0
	
	if (Length == 0 || TransmitBuffer == NULL || ReceiveBuffer == NULL) 
	{
		SendTrace(ERROR_LEVEL, "SPITransfer - SPI Buffer Error\r\n");
		
		Status = FALSE;
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
		
		goto Exit;
    2c9e:	16 c0       	rjmp	.+44     	; 0x2ccc <SPIMasterTransfer+0xa6>
    2ca0:	dc 01       	movw	r26, r24
		Status = FALSE;

		goto Exit;
	}
	
	if (Length == 0 || TransmitBuffer == NULL || ReceiveBuffer == NULL) 
    2ca2:	c1 2c       	mov	r12, r1
    2ca4:	d1 2c       	mov	r13, r1
    2ca6:	76 01       	movw	r14, r12
		goto Exit;
	}
	
	for (IndexI = 0; IndexI < Length; IndexI++)
	{
		SPDR = *TxBytePtr;
    2ca8:	8d 91       	ld	r24, X+
    2caa:	8e bd       	out	0x2e, r24	; 46
		
		//
		// Wait for transmission to complete
		//
		
		while (!(SPSR & (1 << SPIF)));
    2cac:	0d b4       	in	r0, 0x2d	; 45
    2cae:	07 fe       	sbrs	r0, 7
    2cb0:	fd cf       	rjmp	.-6      	; 0x2cac <SPIMasterTransfer+0x86>
		
		//
		// Receive the data
		//
		
		*RxBytePtr = SPDR;
    2cb2:	8e b5       	in	r24, 0x2e	; 46
    2cb4:	81 93       	st	Z+, r24
		Status = FALSE;
		
		goto Exit;
	}
	
	for (IndexI = 0; IndexI < Length; IndexI++)
    2cb6:	8f ef       	ldi	r24, 0xFF	; 255
    2cb8:	c8 1a       	sub	r12, r24
    2cba:	d8 0a       	sbc	r13, r24
    2cbc:	e8 0a       	sbc	r14, r24
    2cbe:	f8 0a       	sbc	r15, r24
    2cc0:	c2 16       	cp	r12, r18
    2cc2:	d3 06       	cpc	r13, r19
    2cc4:	e4 06       	cpc	r14, r20
    2cc6:	f5 06       	cpc	r15, r21
    2cc8:	79 f7       	brne	.-34     	; 0x2ca8 <SPIMasterTransfer+0x82>
}

bool
SPIMasterTransfer(PVOID TransmitBuffer, PVOID ReceiveBuffer, unsigned long Length) 
{
	bool Status = TRUE;
    2cca:	81 e0       	ldi	r24, 0x01	; 1
	
Exit:

	return Status;
	
}
    2ccc:	ff 90       	pop	r15
    2cce:	ef 90       	pop	r14
    2cd0:	df 90       	pop	r13
    2cd2:	cf 90       	pop	r12
    2cd4:	08 95       	ret

00002cd6 <__divmodhi4>:
    2cd6:	97 fb       	bst	r25, 7
    2cd8:	07 2e       	mov	r0, r23
    2cda:	16 f4       	brtc	.+4      	; 0x2ce0 <__divmodhi4+0xa>
    2cdc:	00 94       	com	r0
    2cde:	06 d0       	rcall	.+12     	; 0x2cec <__divmodhi4_neg1>
    2ce0:	77 fd       	sbrc	r23, 7
    2ce2:	08 d0       	rcall	.+16     	; 0x2cf4 <__divmodhi4_neg2>
    2ce4:	0b d1       	rcall	.+534    	; 0x2efc <__udivmodhi4>
    2ce6:	07 fc       	sbrc	r0, 7
    2ce8:	05 d0       	rcall	.+10     	; 0x2cf4 <__divmodhi4_neg2>
    2cea:	3e f4       	brtc	.+14     	; 0x2cfa <__divmodhi4_exit>

00002cec <__divmodhi4_neg1>:
    2cec:	90 95       	com	r25
    2cee:	81 95       	neg	r24
    2cf0:	9f 4f       	sbci	r25, 0xFF	; 255
    2cf2:	08 95       	ret

00002cf4 <__divmodhi4_neg2>:
    2cf4:	70 95       	com	r23
    2cf6:	61 95       	neg	r22
    2cf8:	7f 4f       	sbci	r23, 0xFF	; 255

00002cfa <__divmodhi4_exit>:
    2cfa:	08 95       	ret

00002cfc <__tablejump2__>:
    2cfc:	ee 0f       	add	r30, r30
    2cfe:	ff 1f       	adc	r31, r31

00002d00 <__tablejump__>:
    2d00:	05 90       	lpm	r0, Z+
    2d02:	f4 91       	lpm	r31, Z
    2d04:	e0 2d       	mov	r30, r0
    2d06:	09 94       	ijmp

00002d08 <__moddi3>:
    2d08:	68 94       	set
    2d0a:	01 c0       	rjmp	.+2      	; 0x2d0e <__divdi3_moddi3>

00002d0c <__divdi3>:
    2d0c:	e8 94       	clt

00002d0e <__divdi3_moddi3>:
    2d0e:	f9 2f       	mov	r31, r25
    2d10:	f1 2b       	or	r31, r17
    2d12:	0a f0       	brmi	.+2      	; 0x2d16 <__divdi3_moddi3+0x8>
    2d14:	27 c0       	rjmp	.+78     	; 0x2d64 <__udivdi3_umoddi3>
    2d16:	a0 e0       	ldi	r26, 0x00	; 0
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	e0 e9       	ldi	r30, 0x90	; 144
    2d1c:	f6 e1       	ldi	r31, 0x16	; 22
    2d1e:	93 c0       	rjmp	.+294    	; 0x2e46 <__prologue_saves__+0xc>
    2d20:	09 2e       	mov	r0, r25
    2d22:	05 94       	asr	r0
    2d24:	1a f4       	brpl	.+6      	; 0x2d2c <__divdi3_moddi3+0x1e>
    2d26:	79 d0       	rcall	.+242    	; 0x2e1a <__negdi2>
    2d28:	11 23       	and	r17, r17
    2d2a:	92 f4       	brpl	.+36     	; 0x2d50 <__divdi3_moddi3+0x42>
    2d2c:	f0 e8       	ldi	r31, 0x80	; 128
    2d2e:	0f 26       	eor	r0, r31
    2d30:	ff ef       	ldi	r31, 0xFF	; 255
    2d32:	e0 94       	com	r14
    2d34:	f0 94       	com	r15
    2d36:	00 95       	com	r16
    2d38:	10 95       	com	r17
    2d3a:	b0 94       	com	r11
    2d3c:	c0 94       	com	r12
    2d3e:	d0 94       	com	r13
    2d40:	a1 94       	neg	r10
    2d42:	bf 0a       	sbc	r11, r31
    2d44:	cf 0a       	sbc	r12, r31
    2d46:	df 0a       	sbc	r13, r31
    2d48:	ef 0a       	sbc	r14, r31
    2d4a:	ff 0a       	sbc	r15, r31
    2d4c:	0f 0b       	sbc	r16, r31
    2d4e:	1f 0b       	sbc	r17, r31
    2d50:	13 d0       	rcall	.+38     	; 0x2d78 <__udivmod64>
    2d52:	07 fc       	sbrc	r0, 7
    2d54:	62 d0       	rcall	.+196    	; 0x2e1a <__negdi2>
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
    2d5a:	ec e0       	ldi	r30, 0x0C	; 12
    2d5c:	90 c0       	rjmp	.+288    	; 0x2e7e <__epilogue_restores__+0xc>

00002d5e <__umoddi3>:
    2d5e:	68 94       	set
    2d60:	01 c0       	rjmp	.+2      	; 0x2d64 <__udivdi3_umoddi3>

00002d62 <__udivdi3>:
    2d62:	e8 94       	clt

00002d64 <__udivdi3_umoddi3>:
    2d64:	8f 92       	push	r8
    2d66:	9f 92       	push	r9
    2d68:	cf 93       	push	r28
    2d6a:	df 93       	push	r29
    2d6c:	05 d0       	rcall	.+10     	; 0x2d78 <__udivmod64>
    2d6e:	df 91       	pop	r29
    2d70:	cf 91       	pop	r28
    2d72:	9f 90       	pop	r9
    2d74:	8f 90       	pop	r8
    2d76:	08 95       	ret

00002d78 <__udivmod64>:
    2d78:	88 24       	eor	r8, r8
    2d7a:	99 24       	eor	r9, r9
    2d7c:	f4 01       	movw	r30, r8
    2d7e:	e4 01       	movw	r28, r8
    2d80:	b0 e4       	ldi	r27, 0x40	; 64
    2d82:	9f 93       	push	r25
    2d84:	aa 27       	eor	r26, r26
    2d86:	9a 15       	cp	r25, r10
    2d88:	8b 04       	cpc	r8, r11
    2d8a:	9c 04       	cpc	r9, r12
    2d8c:	ed 05       	cpc	r30, r13
    2d8e:	fe 05       	cpc	r31, r14
    2d90:	cf 05       	cpc	r28, r15
    2d92:	d0 07       	cpc	r29, r16
    2d94:	a1 07       	cpc	r26, r17
    2d96:	98 f4       	brcc	.+38     	; 0x2dbe <__udivmod64+0x46>
    2d98:	ad 2f       	mov	r26, r29
    2d9a:	dc 2f       	mov	r29, r28
    2d9c:	cf 2f       	mov	r28, r31
    2d9e:	fe 2f       	mov	r31, r30
    2da0:	e9 2d       	mov	r30, r9
    2da2:	98 2c       	mov	r9, r8
    2da4:	89 2e       	mov	r8, r25
    2da6:	98 2f       	mov	r25, r24
    2da8:	87 2f       	mov	r24, r23
    2daa:	76 2f       	mov	r23, r22
    2dac:	65 2f       	mov	r22, r21
    2dae:	54 2f       	mov	r21, r20
    2db0:	43 2f       	mov	r20, r19
    2db2:	32 2f       	mov	r19, r18
    2db4:	22 27       	eor	r18, r18
    2db6:	b8 50       	subi	r27, 0x08	; 8
    2db8:	31 f7       	brne	.-52     	; 0x2d86 <__udivmod64+0xe>
    2dba:	bf 91       	pop	r27
    2dbc:	27 c0       	rjmp	.+78     	; 0x2e0c <__udivmod64+0x94>
    2dbe:	1b 2e       	mov	r1, r27
    2dc0:	bf 91       	pop	r27
    2dc2:	bb 27       	eor	r27, r27
    2dc4:	22 0f       	add	r18, r18
    2dc6:	33 1f       	adc	r19, r19
    2dc8:	44 1f       	adc	r20, r20
    2dca:	55 1f       	adc	r21, r21
    2dcc:	66 1f       	adc	r22, r22
    2dce:	77 1f       	adc	r23, r23
    2dd0:	88 1f       	adc	r24, r24
    2dd2:	99 1f       	adc	r25, r25
    2dd4:	88 1c       	adc	r8, r8
    2dd6:	99 1c       	adc	r9, r9
    2dd8:	ee 1f       	adc	r30, r30
    2dda:	ff 1f       	adc	r31, r31
    2ddc:	cc 1f       	adc	r28, r28
    2dde:	dd 1f       	adc	r29, r29
    2de0:	aa 1f       	adc	r26, r26
    2de2:	bb 1f       	adc	r27, r27
    2de4:	8a 14       	cp	r8, r10
    2de6:	9b 04       	cpc	r9, r11
    2de8:	ec 05       	cpc	r30, r12
    2dea:	fd 05       	cpc	r31, r13
    2dec:	ce 05       	cpc	r28, r14
    2dee:	df 05       	cpc	r29, r15
    2df0:	a0 07       	cpc	r26, r16
    2df2:	b1 07       	cpc	r27, r17
    2df4:	48 f0       	brcs	.+18     	; 0x2e08 <__udivmod64+0x90>
    2df6:	8a 18       	sub	r8, r10
    2df8:	9b 08       	sbc	r9, r11
    2dfa:	ec 09       	sbc	r30, r12
    2dfc:	fd 09       	sbc	r31, r13
    2dfe:	ce 09       	sbc	r28, r14
    2e00:	df 09       	sbc	r29, r15
    2e02:	a0 0b       	sbc	r26, r16
    2e04:	b1 0b       	sbc	r27, r17
    2e06:	21 60       	ori	r18, 0x01	; 1
    2e08:	1a 94       	dec	r1
    2e0a:	e1 f6       	brne	.-72     	; 0x2dc4 <__udivmod64+0x4c>
    2e0c:	2e f4       	brtc	.+10     	; 0x2e18 <__udivmod64+0xa0>
    2e0e:	94 01       	movw	r18, r8
    2e10:	af 01       	movw	r20, r30
    2e12:	be 01       	movw	r22, r28
    2e14:	cd 01       	movw	r24, r26
    2e16:	00 0c       	add	r0, r0
    2e18:	08 95       	ret

00002e1a <__negdi2>:
    2e1a:	60 95       	com	r22
    2e1c:	70 95       	com	r23
    2e1e:	80 95       	com	r24
    2e20:	90 95       	com	r25
    2e22:	30 95       	com	r19
    2e24:	40 95       	com	r20
    2e26:	50 95       	com	r21
    2e28:	21 95       	neg	r18
    2e2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e2c:	4f 4f       	sbci	r20, 0xFF	; 255
    2e2e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e30:	6f 4f       	sbci	r22, 0xFF	; 255
    2e32:	7f 4f       	sbci	r23, 0xFF	; 255
    2e34:	8f 4f       	sbci	r24, 0xFF	; 255
    2e36:	9f 4f       	sbci	r25, 0xFF	; 255
    2e38:	08 95       	ret

00002e3a <__prologue_saves__>:
    2e3a:	2f 92       	push	r2
    2e3c:	3f 92       	push	r3
    2e3e:	4f 92       	push	r4
    2e40:	5f 92       	push	r5
    2e42:	6f 92       	push	r6
    2e44:	7f 92       	push	r7
    2e46:	8f 92       	push	r8
    2e48:	9f 92       	push	r9
    2e4a:	af 92       	push	r10
    2e4c:	bf 92       	push	r11
    2e4e:	cf 92       	push	r12
    2e50:	df 92       	push	r13
    2e52:	ef 92       	push	r14
    2e54:	ff 92       	push	r15
    2e56:	0f 93       	push	r16
    2e58:	1f 93       	push	r17
    2e5a:	cf 93       	push	r28
    2e5c:	df 93       	push	r29
    2e5e:	cd b7       	in	r28, 0x3d	; 61
    2e60:	de b7       	in	r29, 0x3e	; 62
    2e62:	ca 1b       	sub	r28, r26
    2e64:	db 0b       	sbc	r29, r27
    2e66:	0f b6       	in	r0, 0x3f	; 63
    2e68:	f8 94       	cli
    2e6a:	de bf       	out	0x3e, r29	; 62
    2e6c:	0f be       	out	0x3f, r0	; 63
    2e6e:	cd bf       	out	0x3d, r28	; 61
    2e70:	09 94       	ijmp

00002e72 <__epilogue_restores__>:
    2e72:	2a 88       	ldd	r2, Y+18	; 0x12
    2e74:	39 88       	ldd	r3, Y+17	; 0x11
    2e76:	48 88       	ldd	r4, Y+16	; 0x10
    2e78:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e7a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e7c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e7e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e80:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e82:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e84:	b9 84       	ldd	r11, Y+9	; 0x09
    2e86:	c8 84       	ldd	r12, Y+8	; 0x08
    2e88:	df 80       	ldd	r13, Y+7	; 0x07
    2e8a:	ee 80       	ldd	r14, Y+6	; 0x06
    2e8c:	fd 80       	ldd	r15, Y+5	; 0x05
    2e8e:	0c 81       	ldd	r16, Y+4	; 0x04
    2e90:	1b 81       	ldd	r17, Y+3	; 0x03
    2e92:	aa 81       	ldd	r26, Y+2	; 0x02
    2e94:	b9 81       	ldd	r27, Y+1	; 0x01
    2e96:	ce 0f       	add	r28, r30
    2e98:	d1 1d       	adc	r29, r1
    2e9a:	0f b6       	in	r0, 0x3f	; 63
    2e9c:	f8 94       	cli
    2e9e:	de bf       	out	0x3e, r29	; 62
    2ea0:	0f be       	out	0x3f, r0	; 63
    2ea2:	cd bf       	out	0x3d, r28	; 61
    2ea4:	ed 01       	movw	r28, r26
    2ea6:	08 95       	ret

00002ea8 <__ashrdi3>:
    2ea8:	97 fb       	bst	r25, 7
    2eaa:	10 f8       	bld	r1, 0

00002eac <__lshrdi3>:
    2eac:	16 94       	lsr	r1
    2eae:	00 08       	sbc	r0, r0
    2eb0:	0f 93       	push	r16
    2eb2:	08 30       	cpi	r16, 0x08	; 8
    2eb4:	98 f0       	brcs	.+38     	; 0x2edc <__lshrdi3+0x30>
    2eb6:	08 50       	subi	r16, 0x08	; 8
    2eb8:	23 2f       	mov	r18, r19
    2eba:	34 2f       	mov	r19, r20
    2ebc:	45 2f       	mov	r20, r21
    2ebe:	56 2f       	mov	r21, r22
    2ec0:	67 2f       	mov	r22, r23
    2ec2:	78 2f       	mov	r23, r24
    2ec4:	89 2f       	mov	r24, r25
    2ec6:	90 2d       	mov	r25, r0
    2ec8:	f4 cf       	rjmp	.-24     	; 0x2eb2 <__lshrdi3+0x6>
    2eca:	05 94       	asr	r0
    2ecc:	97 95       	ror	r25
    2ece:	87 95       	ror	r24
    2ed0:	77 95       	ror	r23
    2ed2:	67 95       	ror	r22
    2ed4:	57 95       	ror	r21
    2ed6:	47 95       	ror	r20
    2ed8:	37 95       	ror	r19
    2eda:	27 95       	ror	r18
    2edc:	0a 95       	dec	r16
    2ede:	aa f7       	brpl	.-22     	; 0x2eca <__lshrdi3+0x1e>
    2ee0:	0f 91       	pop	r16
    2ee2:	08 95       	ret

00002ee4 <__cmpdi2_s8>:
    2ee4:	00 24       	eor	r0, r0
    2ee6:	a7 fd       	sbrc	r26, 7
    2ee8:	00 94       	com	r0
    2eea:	2a 17       	cp	r18, r26
    2eec:	30 05       	cpc	r19, r0
    2eee:	40 05       	cpc	r20, r0
    2ef0:	50 05       	cpc	r21, r0
    2ef2:	60 05       	cpc	r22, r0
    2ef4:	70 05       	cpc	r23, r0
    2ef6:	80 05       	cpc	r24, r0
    2ef8:	90 05       	cpc	r25, r0
    2efa:	08 95       	ret

00002efc <__udivmodhi4>:
    2efc:	aa 1b       	sub	r26, r26
    2efe:	bb 1b       	sub	r27, r27
    2f00:	51 e1       	ldi	r21, 0x11	; 17
    2f02:	07 c0       	rjmp	.+14     	; 0x2f12 <__udivmodhi4_ep>

00002f04 <__udivmodhi4_loop>:
    2f04:	aa 1f       	adc	r26, r26
    2f06:	bb 1f       	adc	r27, r27
    2f08:	a6 17       	cp	r26, r22
    2f0a:	b7 07       	cpc	r27, r23
    2f0c:	10 f0       	brcs	.+4      	; 0x2f12 <__udivmodhi4_ep>
    2f0e:	a6 1b       	sub	r26, r22
    2f10:	b7 0b       	sbc	r27, r23

00002f12 <__udivmodhi4_ep>:
    2f12:	88 1f       	adc	r24, r24
    2f14:	99 1f       	adc	r25, r25
    2f16:	5a 95       	dec	r21
    2f18:	a9 f7       	brne	.-22     	; 0x2f04 <__udivmodhi4_loop>
    2f1a:	80 95       	com	r24
    2f1c:	90 95       	com	r25
    2f1e:	bc 01       	movw	r22, r24
    2f20:	cd 01       	movw	r24, r26
    2f22:	08 95       	ret

00002f24 <_exit>:
    2f24:	f8 94       	cli

00002f26 <__stop_program>:
    2f26:	ff cf       	rjmp	.-2      	; 0x2f26 <__stop_program>
