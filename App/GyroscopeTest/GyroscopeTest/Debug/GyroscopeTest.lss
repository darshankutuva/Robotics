
GyroscopeTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000632  00800100  000021f2  00002286  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800732  00800732  000028b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000028b8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f8  00000000  00000000  000028e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002b6e  00000000  00000000  00002ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a02  00000000  00000000  0000564e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000174a  00000000  00000000  00006050  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ab4  00000000  00000000  0000779c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000f50  00000000  00000000  00008250  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003b42  00000000  00000000  000091a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a8  00000000  00000000  0000cce2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5b c0       	rjmp	.+182    	; 0xb8 <__ctors_end>
       2:	00 00       	nop
       4:	77 c0       	rjmp	.+238    	; 0xf4 <__bad_interrupt>
       6:	00 00       	nop
       8:	75 c0       	rjmp	.+234    	; 0xf4 <__bad_interrupt>
       a:	00 00       	nop
       c:	73 c0       	rjmp	.+230    	; 0xf4 <__bad_interrupt>
       e:	00 00       	nop
      10:	71 c0       	rjmp	.+226    	; 0xf4 <__bad_interrupt>
      12:	00 00       	nop
      14:	6f c0       	rjmp	.+222    	; 0xf4 <__bad_interrupt>
      16:	00 00       	nop
      18:	6d c0       	rjmp	.+218    	; 0xf4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6b c0       	rjmp	.+214    	; 0xf4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	69 c0       	rjmp	.+210    	; 0xf4 <__bad_interrupt>
      22:	00 00       	nop
      24:	67 c0       	rjmp	.+206    	; 0xf4 <__bad_interrupt>
      26:	00 00       	nop
      28:	65 c0       	rjmp	.+202    	; 0xf4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	63 c0       	rjmp	.+198    	; 0xf4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	61 c0       	rjmp	.+194    	; 0xf4 <__bad_interrupt>
      32:	00 00       	nop
      34:	5f c0       	rjmp	.+190    	; 0xf4 <__bad_interrupt>
      36:	00 00       	nop
      38:	5d c0       	rjmp	.+186    	; 0xf4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5b c0       	rjmp	.+182    	; 0xf4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <__vector_16>
      44:	57 c0       	rjmp	.+174    	; 0xf4 <__bad_interrupt>
      46:	00 00       	nop
      48:	55 c0       	rjmp	.+170    	; 0xf4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	53 c0       	rjmp	.+166    	; 0xf4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__vector_20>
      54:	4f c0       	rjmp	.+158    	; 0xf4 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <__vector_22>
      5c:	4b c0       	rjmp	.+150    	; 0xf4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	49 c0       	rjmp	.+146    	; 0xf4 <__bad_interrupt>
      62:	00 00       	nop
      64:	47 c0       	rjmp	.+142    	; 0xf4 <__bad_interrupt>
      66:	00 00       	nop
      68:	45 c0       	rjmp	.+138    	; 0xf4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	43 c0       	rjmp	.+134    	; 0xf4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <__vector_28>
      74:	3f c0       	rjmp	.+126    	; 0xf4 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <__vector_30>
      7c:	3b c0       	rjmp	.+118    	; 0xf4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	39 c0       	rjmp	.+114    	; 0xf4 <__bad_interrupt>
      82:	00 00       	nop
      84:	37 c0       	rjmp	.+110    	; 0xf4 <__bad_interrupt>
      86:	00 00       	nop
      88:	35 c0       	rjmp	.+106    	; 0xf4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a3 0a       	sbc	r10, r19
      8e:	b5 0a       	sbc	r11, r21
      90:	8c 0b       	sbc	r24, r28
      92:	78 0b       	sbc	r23, r24
      94:	8c 0b       	sbc	r24, r28
      96:	8c 0b       	sbc	r24, r28
      98:	8c 0b       	sbc	r24, r28
      9a:	8c 0b       	sbc	r24, r28
      9c:	8c 0b       	sbc	r24, r28
      9e:	6b 0b       	sbc	r22, r27
      a0:	8c 0b       	sbc	r24, r28
      a2:	8c 0b       	sbc	r24, r28
      a4:	8c 0b       	sbc	r24, r28
      a6:	8c 0b       	sbc	r24, r28
      a8:	8c 0b       	sbc	r24, r28
      aa:	8c 0b       	sbc	r24, r28
      ac:	70 0b       	sbc	r23, r16
      ae:	8c 0b       	sbc	r24, r28
      b0:	f7 0a       	sbc	r15, r23
      b2:	8c 0b       	sbc	r24, r28
      b4:	8c 0b       	sbc	r24, r28
      b6:	33 0b       	sbc	r19, r19

000000b8 <__ctors_end>:
      b8:	11 24       	eor	r1, r1
      ba:	1f be       	out	0x3f, r1	; 63
      bc:	cf ef       	ldi	r28, 0xFF	; 255
      be:	d0 e4       	ldi	r29, 0x40	; 64
      c0:	de bf       	out	0x3e, r29	; 62
      c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
      c4:	17 e0       	ldi	r17, 0x07	; 7
      c6:	a0 e0       	ldi	r26, 0x00	; 0
      c8:	b1 e0       	ldi	r27, 0x01	; 1
      ca:	e2 ef       	ldi	r30, 0xF2	; 242
      cc:	f1 e2       	ldi	r31, 0x21	; 33
      ce:	00 e0       	ldi	r16, 0x00	; 0
      d0:	0b bf       	out	0x3b, r16	; 59
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x14>
      d4:	07 90       	elpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	a2 33       	cpi	r26, 0x32	; 50
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0x10>

000000de <__do_clear_bss>:
      de:	27 e0       	ldi	r18, 0x07	; 7
      e0:	a2 e3       	ldi	r26, 0x32	; 50
      e2:	b7 e0       	ldi	r27, 0x07	; 7
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	ad 34       	cpi	r26, 0x4D	; 77
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>
      ee:	03 d0       	rcall	.+6      	; 0xf6 <main>
      f0:	0c 94 f7 10 	jmp	0x21ee	; 0x21ee <_exit>

000000f4 <__bad_interrupt>:
      f4:	85 cf       	rjmp	.-246    	; 0x0 <__vectors>

000000f6 <main>:
#include "Twi.h"

#include "ITG3205.h"

int main(void)
{
      f6:	9f 92       	push	r9
      f8:	af 92       	push	r10
      fa:	bf 92       	push	r11
      fc:	cf 92       	push	r12
      fe:	df 92       	push	r13
     100:	ef 92       	push	r14
     102:	ff 92       	push	r15
     104:	0f 93       	push	r16
     106:	1f 93       	push	r17
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
     110:	61 97       	sbiw	r28, 0x11	; 17
     112:	0f b6       	in	r0, 0x3f	; 63
     114:	f8 94       	cli
     116:	de bf       	out	0x3e, r29	; 62
     118:	0f be       	out	0x3f, r0	; 63
     11a:	cd bf       	out	0x3d, r28	; 61
	
	//
	// Initialize Tracing
	//
	
	InitTrace(F_CPU, ERROR_LEVEL | INFO_LEVEL);
     11c:	45 e0       	ldi	r20, 0x05	; 5
     11e:	60 e0       	ldi	r22, 0x00	; 0
     120:	72 e1       	ldi	r23, 0x12	; 18
     122:	8a e7       	ldi	r24, 0x7A	; 122
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	d1 d6       	rcall	.+3490   	; 0xeca <InitTrace>
	
	//
	// Initialize TWI
	//

	if(!InitTWI(TWI_MASTER, NULL, NULL))
     128:	40 e0       	ldi	r20, 0x00	; 0
     12a:	50 e0       	ldi	r21, 0x00	; 0
     12c:	60 e0       	ldi	r22, 0x00	; 0
     12e:	70 e0       	ldi	r23, 0x00	; 0
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	bd d3       	rcall	.+1914   	; 0x8ae <InitTWI>
     134:	88 23       	and	r24, r24
     136:	09 f4       	brne	.+2      	; 0x13a <main+0x44>
     138:	79 c0       	rjmp	.+242    	; 0x22c <main+0x136>
	
	InterruptConfig.ItgReadyEn = 1;
	
	InterruptConfig.LatchIntEn = 1;
	
	InterruptConfig.ActiveLowEn = 1;
     13a:	85 ea       	ldi	r24, 0xA5	; 165
     13c:	89 83       	std	Y+1, r24	; 0x01
	
	
	Status = InitItg3205(TWO_FIVE_SIX_HZ, 0, &InterruptConfig, INTERNAL_OSCILLATOR, TRUE);
     13e:	01 e0       	ldi	r16, 0x01	; 1
     140:	20 e0       	ldi	r18, 0x00	; 0
     142:	ae 01       	movw	r20, r28
     144:	4f 5f       	subi	r20, 0xFF	; 255
     146:	5f 4f       	sbci	r21, 0xFF	; 255
     148:	60 e0       	ldi	r22, 0x00	; 0
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	63 d3       	rcall	.+1734   	; 0x814 <InitItg3205>
	
	if (!Status)
     14e:	81 11       	cpse	r24, r1
     150:	0c c0       	rjmp	.+24     	; 0x16a <main+0x74>
	{
		SendTrace(ERROR_LEVEL, "Failed to initialize ITG3205 Gyro.\r\n");
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	91 e0       	ldi	r25, 0x01	; 1
     156:	9f 93       	push	r25
     158:	8f 93       	push	r24
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	8f 93       	push	r24
     15e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <SendTrace>
		
		goto Exit;
     162:	0f 90       	pop	r0
     164:	0f 90       	pop	r0
     166:	0f 90       	pop	r0
     168:	61 c0       	rjmp	.+194    	; 0x22c <main+0x136>
	}
	
	SendTrace(INFO_LEVEL, "Gyroscope Initialized.\r\n");
     16a:	85 e2       	ldi	r24, 0x25	; 37
     16c:	91 e0       	ldi	r25, 0x01	; 1
     16e:	9f 93       	push	r25
     170:	8f 93       	push	r24
     172:	84 e0       	ldi	r24, 0x04	; 4
     174:	8f 93       	push	r24
     176:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <SendTrace>
     17a:	0f 90       	pop	r0
     17c:	0f 90       	pop	r0
     17e:	0f 90       	pop	r0
    {
        Status = ReadItg3205GyroData(&GyroData);
		
		if (Status)
		{
			SendTrace(INFO_LEVEL, "Temperature = %f degrees C.\r\n", GyroData.Temperature);
     180:	0f 2e       	mov	r0, r31
     182:	fe e3       	ldi	r31, 0x3E	; 62
     184:	af 2e       	mov	r10, r31
     186:	f1 e0       	ldi	r31, 0x01	; 1
     188:	bf 2e       	mov	r11, r31
     18a:	f0 2d       	mov	r31, r0
     18c:	68 94       	set
     18e:	99 24       	eor	r9, r9
     190:	92 f8       	bld	r9, 2
			
			SendTrace(INFO_LEVEL, "Gyro X Axis = %f degrees per second.\r\n", GyroData.GyroXAxis);
     192:	0f 2e       	mov	r0, r31
     194:	fc e5       	ldi	r31, 0x5C	; 92
     196:	cf 2e       	mov	r12, r31
     198:	f1 e0       	ldi	r31, 0x01	; 1
     19a:	df 2e       	mov	r13, r31
     19c:	f0 2d       	mov	r31, r0

			SendTrace(INFO_LEVEL, "Gyro Y Axis = %f degrees per second.\r\n", GyroData.GyroYAxis);
     19e:	0f 2e       	mov	r0, r31
     1a0:	f3 e8       	ldi	r31, 0x83	; 131
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f1 e0       	ldi	r31, 0x01	; 1
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
			
			SendTrace(INFO_LEVEL, "Gyro Z Axis = %f degrees per second.\r\n", GyroData.GyroZAxis);			
     1aa:	0a ea       	ldi	r16, 0xAA	; 170
     1ac:	11 e0       	ldi	r17, 0x01	; 1
	
	SendTrace(INFO_LEVEL, "Gyroscope Initialized.\r\n");
	
    while(1)
    {
        Status = ReadItg3205GyroData(&GyroData);
     1ae:	ce 01       	movw	r24, r28
     1b0:	02 96       	adiw	r24, 0x02	; 2
     1b2:	9c d0       	rcall	.+312    	; 0x2ec <ReadItg3205GyroData>
		
		if (Status)
     1b4:	88 23       	and	r24, r24
     1b6:	d9 f3       	breq	.-10     	; 0x1ae <main+0xb8>
		{
			SendTrace(INFO_LEVEL, "Temperature = %f degrees C.\r\n", GyroData.Temperature);
     1b8:	8d 81       	ldd	r24, Y+5	; 0x05
     1ba:	8f 93       	push	r24
     1bc:	8c 81       	ldd	r24, Y+4	; 0x04
     1be:	8f 93       	push	r24
     1c0:	8b 81       	ldd	r24, Y+3	; 0x03
     1c2:	8f 93       	push	r24
     1c4:	8a 81       	ldd	r24, Y+2	; 0x02
     1c6:	8f 93       	push	r24
     1c8:	bf 92       	push	r11
     1ca:	af 92       	push	r10
     1cc:	9f 92       	push	r9
     1ce:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <SendTrace>
			
			SendTrace(INFO_LEVEL, "Gyro X Axis = %f degrees per second.\r\n", GyroData.GyroXAxis);
     1d2:	89 85       	ldd	r24, Y+9	; 0x09
     1d4:	8f 93       	push	r24
     1d6:	88 85       	ldd	r24, Y+8	; 0x08
     1d8:	8f 93       	push	r24
     1da:	8f 81       	ldd	r24, Y+7	; 0x07
     1dc:	8f 93       	push	r24
     1de:	8e 81       	ldd	r24, Y+6	; 0x06
     1e0:	8f 93       	push	r24
     1e2:	df 92       	push	r13
     1e4:	cf 92       	push	r12
     1e6:	9f 92       	push	r9
     1e8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <SendTrace>

			SendTrace(INFO_LEVEL, "Gyro Y Axis = %f degrees per second.\r\n", GyroData.GyroYAxis);
     1ec:	8d 85       	ldd	r24, Y+13	; 0x0d
     1ee:	8f 93       	push	r24
     1f0:	8c 85       	ldd	r24, Y+12	; 0x0c
     1f2:	8f 93       	push	r24
     1f4:	8b 85       	ldd	r24, Y+11	; 0x0b
     1f6:	8f 93       	push	r24
     1f8:	8a 85       	ldd	r24, Y+10	; 0x0a
     1fa:	8f 93       	push	r24
     1fc:	ff 92       	push	r15
     1fe:	ef 92       	push	r14
     200:	9f 92       	push	r9
     202:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <SendTrace>
			
			SendTrace(INFO_LEVEL, "Gyro Z Axis = %f degrees per second.\r\n", GyroData.GyroZAxis);			
     206:	89 89       	ldd	r24, Y+17	; 0x11
     208:	8f 93       	push	r24
     20a:	88 89       	ldd	r24, Y+16	; 0x10
     20c:	8f 93       	push	r24
     20e:	8f 85       	ldd	r24, Y+15	; 0x0f
     210:	8f 93       	push	r24
     212:	8e 85       	ldd	r24, Y+14	; 0x0e
     214:	8f 93       	push	r24
     216:	1f 93       	push	r17
     218:	0f 93       	push	r16
     21a:	9f 92       	push	r9
     21c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <SendTrace>
     220:	0f b6       	in	r0, 0x3f	; 63
     222:	f8 94       	cli
     224:	de bf       	out	0x3e, r29	; 62
     226:	0f be       	out	0x3f, r0	; 63
     228:	cd bf       	out	0x3d, r28	; 61
     22a:	c1 cf       	rjmp	.-126    	; 0x1ae <main+0xb8>
    }
	
Exit:

	return 1;
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	61 96       	adiw	r28, 0x11	; 17
     232:	0f b6       	in	r0, 0x3f	; 63
     234:	f8 94       	cli
     236:	de bf       	out	0x3e, r29	; 62
     238:	0f be       	out	0x3f, r0	; 63
     23a:	cd bf       	out	0x3d, r28	; 61
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	1f 91       	pop	r17
     242:	0f 91       	pop	r16
     244:	ff 90       	pop	r15
     246:	ef 90       	pop	r14
     248:	df 90       	pop	r13
     24a:	cf 90       	pop	r12
     24c:	bf 90       	pop	r11
     24e:	af 90       	pop	r10
     250:	9f 90       	pop	r9
     252:	08 95       	ret

00000254 <ReadItg3205Register>:
	}
	
	Exit:

	return Status;
}
     254:	af 92       	push	r10
     256:	bf 92       	push	r11
     258:	cf 92       	push	r12
     25a:	df 92       	push	r13
     25c:	ef 92       	push	r14
     25e:	ff 92       	push	r15
     260:	0f 93       	push	r16
     262:	1f 93       	push	r17
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	1f 92       	push	r1
     26a:	cd b7       	in	r28, 0x3d	; 61
     26c:	de b7       	in	r29, 0x3e	; 62
     26e:	89 83       	std	Y+1, r24	; 0x01
     270:	5b 01       	movw	r10, r22
     272:	69 01       	movw	r12, r18
     274:	7a 01       	movw	r14, r20
     276:	00 e0       	ldi	r16, 0x00	; 0
     278:	28 e3       	ldi	r18, 0x38	; 56
     27a:	37 e0       	ldi	r19, 0x07	; 7
     27c:	41 e0       	ldi	r20, 0x01	; 1
     27e:	50 e0       	ldi	r21, 0x00	; 0
     280:	60 e0       	ldi	r22, 0x00	; 0
     282:	70 e0       	ldi	r23, 0x00	; 0
     284:	ce 01       	movw	r24, r28
     286:	01 96       	adiw	r24, 0x01	; 1
     288:	81 d4       	rcall	.+2306   	; 0xb8c <TwiTransmit>
     28a:	18 2f       	mov	r17, r24
     28c:	81 11       	cpse	r24, r1
     28e:	0c c0       	rjmp	.+24     	; 0x2a8 <ReadItg3205Register+0x54>
     290:	21 ed       	ldi	r18, 0xD1	; 209
     292:	31 e0       	ldi	r19, 0x01	; 1
     294:	3f 93       	push	r19
     296:	2f 93       	push	r18
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	8f 93       	push	r24
     29c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <SendTrace>
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	15 c0       	rjmp	.+42     	; 0x2d2 <ReadItg3205Register+0x7e>
     2a8:	01 e0       	ldi	r16, 0x01	; 1
     2aa:	28 e3       	ldi	r18, 0x38	; 56
     2ac:	37 e0       	ldi	r19, 0x07	; 7
     2ae:	b7 01       	movw	r22, r14
     2b0:	a6 01       	movw	r20, r12
     2b2:	c5 01       	movw	r24, r10
     2b4:	c6 d5       	rcall	.+2956   	; 0xe42 <TwiReceive>
     2b6:	18 2f       	mov	r17, r24
     2b8:	81 11       	cpse	r24, r1
     2ba:	0b c0       	rjmp	.+22     	; 0x2d2 <ReadItg3205Register+0x7e>
     2bc:	29 ef       	ldi	r18, 0xF9	; 249
     2be:	31 e0       	ldi	r19, 0x01	; 1
     2c0:	3f 93       	push	r19
     2c2:	2f 93       	push	r18
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	8f 93       	push	r24
     2c8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <SendTrace>
     2cc:	0f 90       	pop	r0
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	81 2f       	mov	r24, r17
     2d4:	0f 90       	pop	r0
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	1f 91       	pop	r17
     2dc:	0f 91       	pop	r16
     2de:	ff 90       	pop	r15
     2e0:	ef 90       	pop	r14
     2e2:	df 90       	pop	r13
     2e4:	cf 90       	pop	r12
     2e6:	bf 90       	pop	r11
     2e8:	af 90       	pop	r10
     2ea:	08 95       	ret

000002ec <ReadItg3205GyroData>:
     2ec:	ff 92       	push	r15
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
     2fa:	29 97       	sbiw	r28, 0x09	; 9
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	f8 94       	cli
     300:	de bf       	out	0x3e, r29	; 62
     302:	0f be       	out	0x3f, r0	; 63
     304:	cd bf       	out	0x3d, r28	; 61
     306:	8c 01       	movw	r16, r24
     308:	80 91 32 07 	lds	r24, 0x0732
     30c:	88 23       	and	r24, r24
     30e:	09 f4       	brne	.+2      	; 0x312 <ReadItg3205GyroData+0x26>
     310:	9c c0       	rjmp	.+312    	; 0x44a <ReadItg3205GyroData+0x15e>
     312:	21 e0       	ldi	r18, 0x01	; 1
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	40 e0       	ldi	r20, 0x00	; 0
     318:	50 e0       	ldi	r21, 0x00	; 0
     31a:	be 01       	movw	r22, r28
     31c:	6f 5f       	subi	r22, 0xFF	; 255
     31e:	7f 4f       	sbci	r23, 0xFF	; 255
     320:	8a e1       	ldi	r24, 0x1A	; 26
     322:	98 df       	rcall	.-208    	; 0x254 <ReadItg3205Register>
     324:	f8 2e       	mov	r15, r24
     326:	81 11       	cpse	r24, r1
     328:	0c c0       	rjmp	.+24     	; 0x342 <ReadItg3205GyroData+0x56>
     32a:	8f e1       	ldi	r24, 0x1F	; 31
     32c:	92 e0       	ldi	r25, 0x02	; 2
     32e:	9f 93       	push	r25
     330:	8f 93       	push	r24
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	8f 93       	push	r24
     336:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <SendTrace>
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	87 c0       	rjmp	.+270    	; 0x450 <ReadItg3205GyroData+0x164>
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	80 ff       	sbrs	r24, 0
     346:	83 c0       	rjmp	.+262    	; 0x44e <ReadItg3205GyroData+0x162>
     348:	28 e0       	ldi	r18, 0x08	; 8
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	40 e0       	ldi	r20, 0x00	; 0
     34e:	50 e0       	ldi	r21, 0x00	; 0
     350:	be 01       	movw	r22, r28
     352:	6e 5f       	subi	r22, 0xFE	; 254
     354:	7f 4f       	sbci	r23, 0xFF	; 255
     356:	8b e1       	ldi	r24, 0x1B	; 27
     358:	7d df       	rcall	.-262    	; 0x254 <ReadItg3205Register>
     35a:	f8 2e       	mov	r15, r24
     35c:	81 11       	cpse	r24, r1
     35e:	0c c0       	rjmp	.+24     	; 0x378 <ReadItg3205GyroData+0x8c>
     360:	8b e4       	ldi	r24, 0x4B	; 75
     362:	92 e0       	ldi	r25, 0x02	; 2
     364:	9f 93       	push	r25
     366:	8f 93       	push	r24
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	8f 93       	push	r24
     36c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <SendTrace>
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	6c c0       	rjmp	.+216    	; 0x450 <ReadItg3205GyroData+0x164>
     378:	6a 81       	ldd	r22, Y+2	; 0x02
     37a:	70 e0       	ldi	r23, 0x00	; 0
     37c:	76 2f       	mov	r23, r22
     37e:	66 27       	eor	r22, r22
     380:	8b 81       	ldd	r24, Y+3	; 0x03
     382:	68 2b       	or	r22, r24
     384:	88 27       	eor	r24, r24
     386:	77 fd       	sbrc	r23, 7
     388:	80 95       	com	r24
     38a:	98 2f       	mov	r25, r24
     38c:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__floatsisf>
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	30 e4       	ldi	r19, 0x40	; 64
     394:	4e e4       	ldi	r20, 0x4E	; 78
     396:	56 e4       	ldi	r21, 0x46	; 70
     398:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__addsf3>
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	4c e8       	ldi	r20, 0x8C	; 140
     3a2:	53 e4       	ldi	r21, 0x43	; 67
     3a4:	0e 94 10 0c 	call	0x1820	; 0x1820 <__divsf3>
     3a8:	20 e0       	ldi	r18, 0x00	; 0
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	4c e0       	ldi	r20, 0x0C	; 12
     3ae:	52 e4       	ldi	r21, 0x42	; 66
     3b0:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__addsf3>
     3b4:	f8 01       	movw	r30, r16
     3b6:	60 83       	st	Z, r22
     3b8:	71 83       	std	Z+1, r23	; 0x01
     3ba:	82 83       	std	Z+2, r24	; 0x02
     3bc:	93 83       	std	Z+3, r25	; 0x03
     3be:	6c 81       	ldd	r22, Y+4	; 0x04
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	76 2f       	mov	r23, r22
     3c4:	66 27       	eor	r22, r22
     3c6:	8d 81       	ldd	r24, Y+5	; 0x05
     3c8:	68 2b       	or	r22, r24
     3ca:	88 27       	eor	r24, r24
     3cc:	77 fd       	sbrc	r23, 7
     3ce:	80 95       	com	r24
     3d0:	98 2f       	mov	r25, r24
     3d2:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__floatsisf>
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	46 e6       	ldi	r20, 0x66	; 102
     3dc:	51 e4       	ldi	r21, 0x41	; 65
     3de:	0e 94 10 0c 	call	0x1820	; 0x1820 <__divsf3>
     3e2:	f8 01       	movw	r30, r16
     3e4:	64 83       	std	Z+4, r22	; 0x04
     3e6:	75 83       	std	Z+5, r23	; 0x05
     3e8:	86 83       	std	Z+6, r24	; 0x06
     3ea:	97 83       	std	Z+7, r25	; 0x07
     3ec:	6e 81       	ldd	r22, Y+6	; 0x06
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	76 2f       	mov	r23, r22
     3f2:	66 27       	eor	r22, r22
     3f4:	8f 81       	ldd	r24, Y+7	; 0x07
     3f6:	68 2b       	or	r22, r24
     3f8:	88 27       	eor	r24, r24
     3fa:	77 fd       	sbrc	r23, 7
     3fc:	80 95       	com	r24
     3fe:	98 2f       	mov	r25, r24
     400:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__floatsisf>
     404:	20 e0       	ldi	r18, 0x00	; 0
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	46 e6       	ldi	r20, 0x66	; 102
     40a:	51 e4       	ldi	r21, 0x41	; 65
     40c:	0e 94 10 0c 	call	0x1820	; 0x1820 <__divsf3>
     410:	f8 01       	movw	r30, r16
     412:	60 87       	std	Z+8, r22	; 0x08
     414:	71 87       	std	Z+9, r23	; 0x09
     416:	82 87       	std	Z+10, r24	; 0x0a
     418:	93 87       	std	Z+11, r25	; 0x0b
     41a:	68 85       	ldd	r22, Y+8	; 0x08
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	76 2f       	mov	r23, r22
     420:	66 27       	eor	r22, r22
     422:	89 85       	ldd	r24, Y+9	; 0x09
     424:	68 2b       	or	r22, r24
     426:	88 27       	eor	r24, r24
     428:	77 fd       	sbrc	r23, 7
     42a:	80 95       	com	r24
     42c:	98 2f       	mov	r25, r24
     42e:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__floatsisf>
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	46 e6       	ldi	r20, 0x66	; 102
     438:	51 e4       	ldi	r21, 0x41	; 65
     43a:	0e 94 10 0c 	call	0x1820	; 0x1820 <__divsf3>
     43e:	f8 01       	movw	r30, r16
     440:	64 87       	std	Z+12, r22	; 0x0c
     442:	75 87       	std	Z+13, r23	; 0x0d
     444:	86 87       	std	Z+14, r24	; 0x0e
     446:	97 87       	std	Z+15, r25	; 0x0f
     448:	03 c0       	rjmp	.+6      	; 0x450 <ReadItg3205GyroData+0x164>
     44a:	f1 2c       	mov	r15, r1
     44c:	01 c0       	rjmp	.+2      	; 0x450 <ReadItg3205GyroData+0x164>
     44e:	f1 2c       	mov	r15, r1
     450:	8f 2d       	mov	r24, r15
     452:	29 96       	adiw	r28, 0x09	; 9
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	ff 90       	pop	r15
     468:	08 95       	ret

0000046a <CheckItg3205Id>:
     46a:	1f 93       	push	r17
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	1f 92       	push	r1
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	21 e0       	ldi	r18, 0x01	; 1
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	40 e0       	ldi	r20, 0x00	; 0
     47c:	50 e0       	ldi	r21, 0x00	; 0
     47e:	be 01       	movw	r22, r28
     480:	6f 5f       	subi	r22, 0xFF	; 255
     482:	7f 4f       	sbci	r23, 0xFF	; 255
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	e6 de       	rcall	.-564    	; 0x254 <ReadItg3205Register>
     488:	18 2f       	mov	r17, r24
     48a:	81 11       	cpse	r24, r1
     48c:	0c c0       	rjmp	.+24     	; 0x4a6 <CheckItg3205Id+0x3c>
     48e:	22 e7       	ldi	r18, 0x72	; 114
     490:	32 e0       	ldi	r19, 0x02	; 2
     492:	3f 93       	push	r19
     494:	2f 93       	push	r18
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	8f 93       	push	r24
     49a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <SendTrace>
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
     4a2:	0f 90       	pop	r0
     4a4:	16 c0       	rjmp	.+44     	; 0x4d2 <CheckItg3205Id+0x68>
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	8e 77       	andi	r24, 0x7E	; 126
     4aa:	88 36       	cpi	r24, 0x68	; 104
     4ac:	91 f0       	breq	.+36     	; 0x4d2 <CheckItg3205Id+0x68>
     4ae:	89 81       	ldd	r24, Y+1	; 0x01
     4b0:	86 95       	lsr	r24
     4b2:	8f 73       	andi	r24, 0x3F	; 63
     4b4:	1f 92       	push	r1
     4b6:	8f 93       	push	r24
     4b8:	86 e9       	ldi	r24, 0x96	; 150
     4ba:	92 e0       	ldi	r25, 0x02	; 2
     4bc:	9f 93       	push	r25
     4be:	8f 93       	push	r24
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	8f 93       	push	r24
     4c4:	fb d7       	rcall	.+4086   	; 0x14bc <SendTrace>
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	10 e0       	ldi	r17, 0x00	; 0
     4d2:	81 2f       	mov	r24, r17
     4d4:	0f 90       	pop	r0
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	1f 91       	pop	r17
     4dc:	08 95       	ret

000004de <PrintItg3205ConfigRegisters>:
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	00 d0       	rcall	.+0      	; 0x4e6 <PrintItg3205ConfigRegisters+0x8>
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <PrintItg3205ConfigRegisters+0xa>
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
     4ec:	21 e0       	ldi	r18, 0x01	; 1
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	40 e0       	ldi	r20, 0x00	; 0
     4f2:	50 e0       	ldi	r21, 0x00	; 0
     4f4:	be 01       	movw	r22, r28
     4f6:	6f 5f       	subi	r22, 0xFF	; 255
     4f8:	7f 4f       	sbci	r23, 0xFF	; 255
     4fa:	86 e1       	ldi	r24, 0x16	; 22
     4fc:	ab de       	rcall	.-682    	; 0x254 <ReadItg3205Register>
     4fe:	18 2f       	mov	r17, r24
     500:	81 11       	cpse	r24, r1
     502:	0b c0       	rjmp	.+22     	; 0x51a <PrintItg3205ConfigRegisters+0x3c>
     504:	2f eb       	ldi	r18, 0xBF	; 191
     506:	32 e0       	ldi	r19, 0x02	; 2
     508:	3f 93       	push	r19
     50a:	2f 93       	push	r18
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	8f 93       	push	r24
     510:	d5 d7       	rcall	.+4010   	; 0x14bc <SendTrace>
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	81 c0       	rjmp	.+258    	; 0x61c <PrintItg3205ConfigRegisters+0x13e>
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	1f 92       	push	r1
     51e:	8f 93       	push	r24
     520:	8f ed       	ldi	r24, 0xDF	; 223
     522:	92 e0       	ldi	r25, 0x02	; 2
     524:	9f 93       	push	r25
     526:	8f 93       	push	r24
     528:	84 e0       	ldi	r24, 0x04	; 4
     52a:	8f 93       	push	r24
     52c:	c7 d7       	rcall	.+3982   	; 0x14bc <SendTrace>
     52e:	21 e0       	ldi	r18, 0x01	; 1
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	40 e0       	ldi	r20, 0x00	; 0
     534:	50 e0       	ldi	r21, 0x00	; 0
     536:	be 01       	movw	r22, r28
     538:	6e 5f       	subi	r22, 0xFE	; 254
     53a:	7f 4f       	sbci	r23, 0xFF	; 255
     53c:	8e e3       	ldi	r24, 0x3E	; 62
     53e:	8a de       	rcall	.-748    	; 0x254 <ReadItg3205Register>
     540:	18 2f       	mov	r17, r24
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	81 11       	cpse	r24, r1
     54e:	0b c0       	rjmp	.+22     	; 0x566 <PrintItg3205ConfigRegisters+0x88>
     550:	21 ef       	ldi	r18, 0xF1	; 241
     552:	32 e0       	ldi	r19, 0x02	; 2
     554:	3f 93       	push	r19
     556:	2f 93       	push	r18
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	8f 93       	push	r24
     55c:	af d7       	rcall	.+3934   	; 0x14bc <SendTrace>
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	5b c0       	rjmp	.+182    	; 0x61c <PrintItg3205ConfigRegisters+0x13e>
     566:	8a 81       	ldd	r24, Y+2	; 0x02
     568:	1f 92       	push	r1
     56a:	8f 93       	push	r24
     56c:	85 e1       	ldi	r24, 0x15	; 21
     56e:	93 e0       	ldi	r25, 0x03	; 3
     570:	9f 93       	push	r25
     572:	8f 93       	push	r24
     574:	84 e0       	ldi	r24, 0x04	; 4
     576:	8f 93       	push	r24
     578:	a1 d7       	rcall	.+3906   	; 0x14bc <SendTrace>
     57a:	21 e0       	ldi	r18, 0x01	; 1
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	40 e0       	ldi	r20, 0x00	; 0
     580:	50 e0       	ldi	r21, 0x00	; 0
     582:	be 01       	movw	r22, r28
     584:	6d 5f       	subi	r22, 0xFD	; 253
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	87 e1       	ldi	r24, 0x17	; 23
     58a:	64 de       	rcall	.-824    	; 0x254 <ReadItg3205Register>
     58c:	18 2f       	mov	r17, r24
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	81 11       	cpse	r24, r1
     59a:	0b c0       	rjmp	.+22     	; 0x5b2 <PrintItg3205ConfigRegisters+0xd4>
     59c:	2b e2       	ldi	r18, 0x2B	; 43
     59e:	33 e0       	ldi	r19, 0x03	; 3
     5a0:	3f 93       	push	r19
     5a2:	2f 93       	push	r18
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	8f 93       	push	r24
     5a8:	89 d7       	rcall	.+3858   	; 0x14bc <SendTrace>
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	35 c0       	rjmp	.+106    	; 0x61c <PrintItg3205ConfigRegisters+0x13e>
     5b2:	8b 81       	ldd	r24, Y+3	; 0x03
     5b4:	1f 92       	push	r1
     5b6:	8f 93       	push	r24
     5b8:	87 e5       	ldi	r24, 0x57	; 87
     5ba:	93 e0       	ldi	r25, 0x03	; 3
     5bc:	9f 93       	push	r25
     5be:	8f 93       	push	r24
     5c0:	84 e0       	ldi	r24, 0x04	; 4
     5c2:	8f 93       	push	r24
     5c4:	7b d7       	rcall	.+3830   	; 0x14bc <SendTrace>
     5c6:	21 e0       	ldi	r18, 0x01	; 1
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	40 e0       	ldi	r20, 0x00	; 0
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	be 01       	movw	r22, r28
     5d0:	6c 5f       	subi	r22, 0xFC	; 252
     5d2:	7f 4f       	sbci	r23, 0xFF	; 255
     5d4:	85 e1       	ldi	r24, 0x15	; 21
     5d6:	3e de       	rcall	.-900    	; 0x254 <ReadItg3205Register>
     5d8:	18 2f       	mov	r17, r24
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	81 11       	cpse	r24, r1
     5e6:	0b c0       	rjmp	.+22     	; 0x5fe <PrintItg3205ConfigRegisters+0x120>
     5e8:	25 e7       	ldi	r18, 0x75	; 117
     5ea:	33 e0       	ldi	r19, 0x03	; 3
     5ec:	3f 93       	push	r19
     5ee:	2f 93       	push	r18
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	8f 93       	push	r24
     5f4:	63 d7       	rcall	.+3782   	; 0x14bc <SendTrace>
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	0f c0       	rjmp	.+30     	; 0x61c <PrintItg3205ConfigRegisters+0x13e>
     5fe:	8c 81       	ldd	r24, Y+4	; 0x04
     600:	1f 92       	push	r1
     602:	8f 93       	push	r24
     604:	24 ea       	ldi	r18, 0xA4	; 164
     606:	33 e0       	ldi	r19, 0x03	; 3
     608:	3f 93       	push	r19
     60a:	2f 93       	push	r18
     60c:	84 e0       	ldi	r24, 0x04	; 4
     60e:	8f 93       	push	r24
     610:	55 d7       	rcall	.+3754   	; 0x14bc <SendTrace>
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	81 2f       	mov	r24, r17
     61e:	0f 90       	pop	r0
     620:	0f 90       	pop	r0
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	1f 91       	pop	r17
     62c:	08 95       	ret

0000062e <SetItg3205Register>:
     62e:	4f 92       	push	r4
     630:	5f 92       	push	r5
     632:	6f 92       	push	r6
     634:	7f 92       	push	r7
     636:	af 92       	push	r10
     638:	bf 92       	push	r11
     63a:	cf 92       	push	r12
     63c:	df 92       	push	r13
     63e:	ef 92       	push	r14
     640:	ff 92       	push	r15
     642:	0f 93       	push	r16
     644:	1f 93       	push	r17
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	cd b7       	in	r28, 0x3d	; 61
     64c:	de b7       	in	r29, 0x3e	; 62
     64e:	96 2f       	mov	r25, r22
     650:	a7 2f       	mov	r26, r23
     652:	29 01       	movw	r4, r18
     654:	3a 01       	movw	r6, r20
     656:	ed b6       	in	r14, 0x3d	; 61
     658:	fe b6       	in	r15, 0x3e	; 62
     65a:	ba 01       	movw	r22, r20
     65c:	a9 01       	movw	r20, r18
     65e:	4f 5f       	subi	r20, 0xFF	; 255
     660:	5f 4f       	sbci	r21, 0xFF	; 255
     662:	6f 4f       	sbci	r22, 0xFF	; 255
     664:	7f 4f       	sbci	r23, 0xFF	; 255
     666:	2d b7       	in	r18, 0x3d	; 61
     668:	3e b7       	in	r19, 0x3e	; 62
     66a:	24 1b       	sub	r18, r20
     66c:	35 0b       	sbc	r19, r21
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	f8 94       	cli
     672:	3e bf       	out	0x3e, r19	; 62
     674:	0f be       	out	0x3f, r0	; 63
     676:	2d bf       	out	0x3d, r18	; 61
     678:	ed b7       	in	r30, 0x3d	; 61
     67a:	fe b7       	in	r31, 0x3e	; 62
     67c:	31 96       	adiw	r30, 0x01	; 1
     67e:	6f 01       	movw	r12, r30
     680:	5f 01       	movw	r10, r30
     682:	ed b7       	in	r30, 0x3d	; 61
     684:	fe b7       	in	r31, 0x3e	; 62
     686:	81 83       	std	Z+1, r24	; 0x01
     688:	41 14       	cp	r4, r1
     68a:	51 04       	cpc	r5, r1
     68c:	61 04       	cpc	r6, r1
     68e:	71 04       	cpc	r7, r1
     690:	99 f0       	breq	.+38     	; 0x6b8 <SetItg3205Register+0x8a>
     692:	e9 2f       	mov	r30, r25
     694:	fa 2f       	mov	r31, r26
     696:	00 e0       	ldi	r16, 0x00	; 0
     698:	10 e0       	ldi	r17, 0x00	; 0
     69a:	98 01       	movw	r18, r16
     69c:	0f 5f       	subi	r16, 0xFF	; 255
     69e:	1f 4f       	sbci	r17, 0xFF	; 255
     6a0:	2f 4f       	sbci	r18, 0xFF	; 255
     6a2:	3f 4f       	sbci	r19, 0xFF	; 255
     6a4:	81 91       	ld	r24, Z+
     6a6:	d5 01       	movw	r26, r10
     6a8:	a0 0f       	add	r26, r16
     6aa:	b1 1f       	adc	r27, r17
     6ac:	8c 93       	st	X, r24
     6ae:	04 15       	cp	r16, r4
     6b0:	15 05       	cpc	r17, r5
     6b2:	26 05       	cpc	r18, r6
     6b4:	37 05       	cpc	r19, r7
     6b6:	91 f7       	brne	.-28     	; 0x69c <SetItg3205Register+0x6e>
     6b8:	01 e0       	ldi	r16, 0x01	; 1
     6ba:	28 e3       	ldi	r18, 0x38	; 56
     6bc:	37 e0       	ldi	r19, 0x07	; 7
     6be:	c6 01       	movw	r24, r12
     6c0:	65 d2       	rcall	.+1226   	; 0xb8c <TwiTransmit>
     6c2:	18 2f       	mov	r17, r24
     6c4:	81 11       	cpse	r24, r1
     6c6:	0a c0       	rjmp	.+20     	; 0x6dc <SetItg3205Register+0xae>
     6c8:	21 ed       	ldi	r18, 0xD1	; 209
     6ca:	31 e0       	ldi	r19, 0x01	; 1
     6cc:	3f 93       	push	r19
     6ce:	2f 93       	push	r18
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	8f 93       	push	r24
     6d4:	f3 d6       	rcall	.+3558   	; 0x14bc <SendTrace>
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	81 2f       	mov	r24, r17
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	f8 94       	cli
     6e2:	fe be       	out	0x3e, r15	; 62
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	ed be       	out	0x3d, r14	; 61
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	ff 90       	pop	r15
     6f2:	ef 90       	pop	r14
     6f4:	df 90       	pop	r13
     6f6:	cf 90       	pop	r12
     6f8:	bf 90       	pop	r11
     6fa:	af 90       	pop	r10
     6fc:	7f 90       	pop	r7
     6fe:	6f 90       	pop	r6
     700:	5f 90       	pop	r5
     702:	4f 90       	pop	r4
     704:	08 95       	ret

00000706 <ConfigureItg3205Interrupt>:
     706:	cf 93       	push	r28
     708:	21 e0       	ldi	r18, 0x01	; 1
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	40 e0       	ldi	r20, 0x00	; 0
     70e:	50 e0       	ldi	r21, 0x00	; 0
     710:	bc 01       	movw	r22, r24
     712:	87 e1       	ldi	r24, 0x17	; 23
     714:	8c df       	rcall	.-232    	; 0x62e <SetItg3205Register>
     716:	c8 2f       	mov	r28, r24
     718:	81 11       	cpse	r24, r1
     71a:	0a c0       	rjmp	.+20     	; 0x730 <ConfigureItg3205Interrupt+0x2a>
     71c:	25 ec       	ldi	r18, 0xC5	; 197
     71e:	33 e0       	ldi	r19, 0x03	; 3
     720:	3f 93       	push	r19
     722:	2f 93       	push	r18
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	8f 93       	push	r24
     728:	c9 d6       	rcall	.+3474   	; 0x14bc <SendTrace>
     72a:	0f 90       	pop	r0
     72c:	0f 90       	pop	r0
     72e:	0f 90       	pop	r0
     730:	8c 2f       	mov	r24, r28
     732:	cf 91       	pop	r28
     734:	08 95       	ret

00000736 <ConfigureItg3205DigitalLowPassFilter>:
//
// Private Functions
//

bool ConfigureItg3205DigitalLowPassFilter(ITG3205_DLPF_CFG DlpfCfg)
{
     736:	1f 93       	push	r17
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	1f 92       	push	r1
     73e:	cd b7       	in	r28, 0x3d	; 61
     740:	de b7       	in	r29, 0x3e	; 62
	
	ITG3205_DLPF_REG DlpfReg;
	
	
	
	DlpfReg.DlpfCfg = DlpfCfg;
     742:	87 70       	andi	r24, 0x07	; 7
     744:	99 81       	ldd	r25, Y+1	; 0x01
     746:	98 7f       	andi	r25, 0xF8	; 248
     748:	89 2b       	or	r24, r25
	
	DlpfReg.FsSel = FS_SEL;
     74a:	88 61       	ori	r24, 0x18	; 24
     74c:	89 83       	std	Y+1, r24	; 0x01
	
	Status = SetItg3205Register(ADR_DLPF, &DlpfReg, sizeof(ITG3205_DLPF_REG));
     74e:	21 e0       	ldi	r18, 0x01	; 1
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	40 e0       	ldi	r20, 0x00	; 0
     754:	50 e0       	ldi	r21, 0x00	; 0
     756:	be 01       	movw	r22, r28
     758:	6f 5f       	subi	r22, 0xFF	; 255
     75a:	7f 4f       	sbci	r23, 0xFF	; 255
     75c:	86 e1       	ldi	r24, 0x16	; 22
     75e:	67 df       	rcall	.-306    	; 0x62e <SetItg3205Register>
     760:	18 2f       	mov	r17, r24
	
	if(!Status)
     762:	81 11       	cpse	r24, r1
     764:	0a c0       	rjmp	.+20     	; 0x77a <ConfigureItg3205DigitalLowPassFilter+0x44>
	{
		SendTrace(ERROR_LEVEL, "Failed to program DLPF Register. \r\n");
     766:	2c e3       	ldi	r18, 0x3C	; 60
     768:	34 e0       	ldi	r19, 0x04	; 4
     76a:	3f 93       	push	r19
     76c:	2f 93       	push	r18
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	8f 93       	push	r24
     772:	a4 d6       	rcall	.+3400   	; 0x14bc <SendTrace>
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
	}

	return Status;
}
     77a:	81 2f       	mov	r24, r17
     77c:	0f 90       	pop	r0
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	1f 91       	pop	r17
     784:	08 95       	ret

00000786 <ConfigureItg3205SampleRateDivider>:

bool ConfigureItg3205SampleRateDivider(unsigned char SmplrtDiv)
{
     786:	1f 93       	push	r17
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	1f 92       	push	r1
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
     792:	89 83       	std	Y+1, r24	; 0x01
	bool Status = FALSE;
	
	
	Status = SetItg3205Register(ADR_SAMPLE_RATE_DIVIDER, &SmplrtDiv, sizeof(unsigned char));
     794:	21 e0       	ldi	r18, 0x01	; 1
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	40 e0       	ldi	r20, 0x00	; 0
     79a:	50 e0       	ldi	r21, 0x00	; 0
     79c:	be 01       	movw	r22, r28
     79e:	6f 5f       	subi	r22, 0xFF	; 255
     7a0:	7f 4f       	sbci	r23, 0xFF	; 255
     7a2:	85 e1       	ldi	r24, 0x15	; 21
     7a4:	44 df       	rcall	.-376    	; 0x62e <SetItg3205Register>
     7a6:	18 2f       	mov	r17, r24
	
	if(!Status)
     7a8:	81 11       	cpse	r24, r1
     7aa:	0a c0       	rjmp	.+20     	; 0x7c0 <ConfigureItg3205SampleRateDivider+0x3a>
	{
		SendTrace(ERROR_LEVEL, "Failed to program Sample Rate Divider Register. \r\n");
     7ac:	20 e6       	ldi	r18, 0x60	; 96
     7ae:	34 e0       	ldi	r19, 0x04	; 4
     7b0:	3f 93       	push	r19
     7b2:	2f 93       	push	r18
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	8f 93       	push	r24
     7b8:	81 d6       	rcall	.+3330   	; 0x14bc <SendTrace>
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
	}

	return Status;
}
     7c0:	81 2f       	mov	r24, r17
     7c2:	0f 90       	pop	r0
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	1f 91       	pop	r17
     7ca:	08 95       	ret

000007cc <ConfigureItg3205Clock>:

bool ConfigureItg3205Clock(ITG3205_CLK_SEL ClkSel)
{
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	1f 92       	push	r1
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
	ITG3205_PWR_MGMT PwrMgmt;
	
	
	PwrMgmt.AsUINT8 = 0;
	
	PwrMgmt.ClkSel = ClkSel;
     7d8:	87 70       	andi	r24, 0x07	; 7
     7da:	89 83       	std	Y+1, r24	; 0x01
	
	Status = SetItg3205Register(ADR_PWR_MGMT, &PwrMgmt, sizeof(ITG3205_PWR_MGMT));
     7dc:	21 e0       	ldi	r18, 0x01	; 1
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	40 e0       	ldi	r20, 0x00	; 0
     7e2:	50 e0       	ldi	r21, 0x00	; 0
     7e4:	be 01       	movw	r22, r28
     7e6:	6f 5f       	subi	r22, 0xFF	; 255
     7e8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ea:	8e e3       	ldi	r24, 0x3E	; 62
     7ec:	20 df       	rcall	.-448    	; 0x62e <SetItg3205Register>
     7ee:	18 2f       	mov	r17, r24
	
	if(!Status)
     7f0:	81 11       	cpse	r24, r1
     7f2:	0a c0       	rjmp	.+20     	; 0x808 <ConfigureItg3205Clock+0x3c>
	{
		SendTrace(ERROR_LEVEL, "Failed to program Power Register. \r\n");
     7f4:	25 ef       	ldi	r18, 0xF5	; 245
     7f6:	33 e0       	ldi	r19, 0x03	; 3
     7f8:	3f 93       	push	r19
     7fa:	2f 93       	push	r18
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	8f 93       	push	r24
     800:	5d d6       	rcall	.+3258   	; 0x14bc <SendTrace>
     802:	0f 90       	pop	r0
     804:	0f 90       	pop	r0
     806:	0f 90       	pop	r0
	}

	return Status;
}
     808:	81 2f       	mov	r24, r17
     80a:	0f 90       	pop	r0
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	08 95       	ret

00000814 <InitItg3205>:
bool InitItg3205(ITG3205_DLPF_CFG DlpfCfg, 
				 unsigned char SmplrtDiv, 
				 PITG3205_INTERRUPT_CONFIG pInterruptConfig, 
				 ITG3205_CLK_SEL ClkSel,
				 bool IsPin9Gnd)
{
     814:	ef 92       	push	r14
     816:	ff 92       	push	r15
     818:	0f 93       	push	r16
     81a:	1f 93       	push	r17
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	18 2f       	mov	r17, r24
     822:	f6 2e       	mov	r15, r22
     824:	ea 01       	movw	r28, r20
     826:	e2 2e       	mov	r14, r18
	bool Status = FALSE;
	
	
	gItg3205DeviceAddress.Address = GET_ITG3205_DEVICE_ADDRESS(IsPin9Gnd);
     828:	00 23       	and	r16, r16
     82a:	11 f0       	breq	.+4      	; 0x830 <InitItg3205+0x1c>
     82c:	98 e6       	ldi	r25, 0x68	; 104
     82e:	01 c0       	rjmp	.+2      	; 0x832 <InitItg3205+0x1e>
     830:	99 e6       	ldi	r25, 0x69	; 105
     832:	49 2f       	mov	r20, r25
     834:	44 0f       	add	r20, r20
     836:	30 91 38 07 	lds	r19, 0x0738
     83a:	31 70       	andi	r19, 0x01	; 1
     83c:	34 2b       	or	r19, r20
     83e:	30 93 38 07 	sts	0x0738, r19
	
	SendTrace(INFO_LEVEL, "Device Address = 0x%x\r\n", gItg3205DeviceAddress.Address);
     842:	1f 92       	push	r1
     844:	9f 93       	push	r25
     846:	e3 e9       	ldi	r30, 0x93	; 147
     848:	f4 e0       	ldi	r31, 0x04	; 4
     84a:	ff 93       	push	r31
     84c:	ef 93       	push	r30
     84e:	94 e0       	ldi	r25, 0x04	; 4
     850:	9f 93       	push	r25
     852:	34 d6       	rcall	.+3176   	; 0x14bc <SendTrace>
	
	if (!CheckItg3205Id())
     854:	0a de       	rcall	.-1004   	; 0x46a <CheckItg3205Id>
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	88 23       	and	r24, r24
     862:	a9 f0       	breq	.+42     	; 0x88e <InitItg3205+0x7a>
	{
		goto Exit;
	}
	
	if(!ConfigureItg3205DigitalLowPassFilter(DlpfCfg))
     864:	81 2f       	mov	r24, r17
     866:	67 df       	rcall	.-306    	; 0x736 <ConfigureItg3205DigitalLowPassFilter>
     868:	88 23       	and	r24, r24
     86a:	99 f0       	breq	.+38     	; 0x892 <InitItg3205+0x7e>
	{
		goto Exit;
	}
	
	if(!ConfigureItg3205SampleRateDivider(SmplrtDiv))
     86c:	8f 2d       	mov	r24, r15
     86e:	8b df       	rcall	.-234    	; 0x786 <ConfigureItg3205SampleRateDivider>
     870:	88 23       	and	r24, r24
     872:	89 f0       	breq	.+34     	; 0x896 <InitItg3205+0x82>
	{
		goto Exit;
	}
	
	if(!ConfigureItg3205Interrupt(pInterruptConfig))	
     874:	ce 01       	movw	r24, r28
     876:	47 df       	rcall	.-370    	; 0x706 <ConfigureItg3205Interrupt>
     878:	88 23       	and	r24, r24
     87a:	79 f0       	breq	.+30     	; 0x89a <InitItg3205+0x86>
	{
		goto Exit;
	}
	
	if(!ConfigureItg3205Clock(ClkSel))
     87c:	8e 2d       	mov	r24, r14
     87e:	a6 df       	rcall	.-180    	; 0x7cc <ConfigureItg3205Clock>
     880:	88 23       	and	r24, r24
     882:	69 f0       	breq	.+26     	; 0x89e <InitItg3205+0x8a>
	{
		goto Exit;
	}
	
	PrintItg3205ConfigRegisters();
     884:	2c de       	rcall	.-936    	; 0x4de <PrintItg3205ConfigRegisters>
	
	Status = TRUE;
	
	gIsItg3205Initialized = TRUE;
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	80 93 32 07 	sts	0x0732, r24
     88c:	09 c0       	rjmp	.+18     	; 0x8a0 <InitItg3205+0x8c>
				 unsigned char SmplrtDiv, 
				 PITG3205_INTERRUPT_CONFIG pInterruptConfig, 
				 ITG3205_CLK_SEL ClkSel,
				 bool IsPin9Gnd)
{
	bool Status = FALSE;
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	07 c0       	rjmp	.+14     	; 0x8a0 <InitItg3205+0x8c>
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	05 c0       	rjmp	.+10     	; 0x8a0 <InitItg3205+0x8c>
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	03 c0       	rjmp	.+6      	; 0x8a0 <InitItg3205+0x8c>
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	01 c0       	rjmp	.+2      	; 0x8a0 <InitItg3205+0x8c>
     89e:	80 e0       	ldi	r24, 0x00	; 0
	gIsItg3205Initialized = TRUE;
	
Exit:

	return Status;
}
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	ff 90       	pop	r15
     8aa:	ef 90       	pop	r14
     8ac:	08 95       	ret

000008ae <InitTWI>:
bool
InitTWI(TWI_MODE Mode, PTWI_ADDRESS Address, PTWI_ADDRESS_MASK AddressMask)
{	
	bool Status = TRUE;
	
	if (Mode == TWI_SLAVE)
     8ae:	81 11       	cpse	r24, r1
     8b0:	20 c0       	rjmp	.+64     	; 0x8f2 <InitTWI+0x44>
	{
		if (Address != NULL && AddressMask != NULL)
     8b2:	61 15       	cp	r22, r1
     8b4:	71 05       	cpc	r23, r1
     8b6:	89 f0       	breq	.+34     	; 0x8da <InitTWI+0x2c>
     8b8:	41 15       	cp	r20, r1
     8ba:	51 05       	cpc	r21, r1
     8bc:	71 f0       	breq	.+28     	; 0x8da <InitTWI+0x2c>
		{
			//
			// Set Slave Address and Mask
			//
				
			TWAR = Address->AsUINT8;
     8be:	fb 01       	movw	r30, r22
     8c0:	80 81       	ld	r24, Z
     8c2:	80 93 ba 00 	sts	0x00BA, r24
				
			TWAMR = AddressMask->AsUINT8;
     8c6:	fa 01       	movw	r30, r20
     8c8:	80 81       	ld	r24, Z
     8ca:	80 93 bd 00 	sts	0x00BD, r24
			
			//
			// Set Data and Clock to IN
			//
			
			DDRC &= ~((0x1 << PORTC0) | (0x1 << PORTC1));
     8ce:	87 b1       	in	r24, 0x07	; 7
     8d0:	8c 7f       	andi	r24, 0xFC	; 252
     8d2:	87 b9       	out	0x07, r24	; 7
			
			gMode = TWI_SLAVE;
     8d4:	10 92 39 07 	sts	0x0739, r1
     8d8:	12 c0       	rjmp	.+36     	; 0x8fe <InitTWI+0x50>
		}
		else
		{
			SendTrace(ERROR_LEVEL, "InitTWI - Invalid Parameters\r\n");
     8da:	8b ea       	ldi	r24, 0xAB	; 171
     8dc:	94 e0       	ldi	r25, 0x04	; 4
     8de:	9f 93       	push	r25
     8e0:	8f 93       	push	r24
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	8f 93       	push	r24
     8e6:	ea d5       	rcall	.+3028   	; 0x14bc <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
     8e8:	0f 90       	pop	r0
     8ea:	0f 90       	pop	r0
     8ec:	0f 90       	pop	r0
		}
		else
		{
			SendTrace(ERROR_LEVEL, "InitTWI - Invalid Parameters\r\n");
			
			Status = FALSE;
     8ee:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
     8f0:	08 95       	ret
		}
	}
	else
	{
		gMode = TWI_MASTER;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	80 93 39 07 	sts	0x0739, r24
		
		//
		// Set Data and Clock to Out
		//
		
		DDRC |= ((0x1 << PORTC0) | (0x1 << PORTC1));
     8f8:	87 b1       	in	r24, 0x07	; 7
     8fa:	83 60       	ori	r24, 0x03	; 3
     8fc:	87 b9       	out	0x07, r24	; 7
	//
	// Set TWI Bit Rate Register to 8 so that
	// SCL is set to 100 KHz.
	//

	TWBR = BIT_RATE_VALUE;
     8fe:	80 e2       	ldi	r24, 0x20	; 32
     900:	80 93 b8 00 	sts	0x00B8, r24
	
	//
	// Set Pre-scalar value to 1
	//

	TWSR = 0;
     904:	10 92 b9 00 	sts	0x00B9, r1
	
	//
	// Set TWI Control Register
	//
	
	TWCR = (0x1 << TWEN) | (0x1 << TWEA);
     908:	84 e4       	ldi	r24, 0x44	; 68
     90a:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     90e:	ff ef       	ldi	r31, 0xFF	; 255
     910:	20 e7       	ldi	r18, 0x70	; 112
     912:	82 e0       	ldi	r24, 0x02	; 2
     914:	f1 50       	subi	r31, 0x01	; 1
     916:	20 40       	sbci	r18, 0x00	; 0
     918:	80 40       	sbci	r24, 0x00	; 0
     91a:	e1 f7       	brne	.-8      	; 0x914 <InitTWI+0x66>
     91c:	00 c0       	rjmp	.+0      	; 0x91e <InitTWI+0x70>
     91e:	00 00       	nop
	// Wait for 100 ms for bus to settle down
	//
	
	_delay_ms(100);
	
	gIsRepeatedStart = FALSE;
     920:	10 92 33 07 	sts	0x0733, r1
	
	gIsTWIInitialized = TRUE;
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	80 93 34 07 	sts	0x0734, r24

Exit:

	return Status;
}
     92a:	08 95       	ret

0000092c <SendStartCondition>:
	
	//
	// Send Start Condition
	//
	
	ENABLE_START();
     92c:	ec eb       	ldi	r30, 0xBC	; 188
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	80 81       	ld	r24, Z
     932:	8f 75       	andi	r24, 0x5F	; 95
     934:	80 62       	ori	r24, 0x20	; 32
     936:	80 83       	st	Z, r24
	
	WAIT_FOR_OP_COMPLETION();
     938:	80 81       	ld	r24, Z
     93a:	80 68       	ori	r24, 0x80	; 128
     93c:	80 83       	st	Z, r24
     93e:	80 81       	ld	r24, Z
     940:	88 23       	and	r24, r24
     942:	ec f7       	brge	.-6      	; 0x93e <SendStartCondition+0x12>
	
	DISABLE_START();
     944:	ec eb       	ldi	r30, 0xBC	; 188
     946:	f0 e0       	ldi	r31, 0x00	; 0
     948:	80 81       	ld	r24, Z
     94a:	8f 75       	andi	r24, 0x5F	; 95
     94c:	80 83       	st	Z, r24
	
	if (gIsRepeatedStart)
     94e:	80 91 33 07 	lds	r24, 0x0733
     952:	88 23       	and	r24, r24
     954:	41 f0       	breq	.+16     	; 0x966 <SendStartCondition+0x3a>
	{
		Status = ProcessTwiStatus(REPEATED_START_TRANSMITTED);
     956:	90 91 b9 00 	lds	r25, 0x00B9
     95a:	98 7f       	andi	r25, 0xF8	; 248
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	90 31       	cpi	r25, 0x10	; 16
     960:	49 f0       	breq	.+18     	; 0x974 <SendStartCondition+0x48>
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	08 95       	ret
	}
	else
	{
		Status = ProcessTwiStatus(START_TRANSMITTED);
     966:	90 91 b9 00 	lds	r25, 0x00B9
     96a:	98 7f       	andi	r25, 0xF8	; 248
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	98 30       	cpi	r25, 0x08	; 8
     970:	09 f0       	breq	.+2      	; 0x974 <SendStartCondition+0x48>
     972:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return Status;
}
     974:	08 95       	ret

00000976 <SendStopCondition>:

void
SendStopCondition()
{	
	ENABLE_STOP();
     976:	ec eb       	ldi	r30, 0xBC	; 188
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	80 81       	ld	r24, Z
     97c:	8f 76       	andi	r24, 0x6F	; 111
     97e:	80 61       	ori	r24, 0x10	; 16
     980:	80 83       	st	Z, r24
	
	//
	// Send the Stop condition by clearing the TWINT flag
	//
	
	TWCR |= (1 << TWINT);
     982:	80 81       	ld	r24, Z
     984:	80 68       	ori	r24, 0x80	; 128
     986:	80 83       	st	Z, r24
	//
	// TWINT is not set after stop condition.
	// Instead TWSTO bit in TWCR is cleared.
	//
	
	while (!(TWCR & (0x1 << TWSTO)));
     988:	80 81       	ld	r24, Z
     98a:	84 ff       	sbrs	r24, 4
     98c:	fd cf       	rjmp	.-6      	; 0x988 <SendStopCondition+0x12>
}
     98e:	08 95       	ret

00000990 <Transmit>:

bool
Transmit(PVOID Buffer, unsigned long Length)
{
     990:	8f 92       	push	r8
     992:	9f 92       	push	r9
     994:	af 92       	push	r10
     996:	bf 92       	push	r11
     998:	df 92       	push	r13
     99a:	ef 92       	push	r14
     99c:	ff 92       	push	r15
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
	
	unsigned char *BytePtr;
	
	TWI_STATUS TransmitStatus;
	
	if (gMode == TWI_MASTER)
     9a6:	20 91 39 07 	lds	r18, 0x0739
     9aa:	21 30       	cpi	r18, 0x01	; 1
     9ac:	29 f4       	brne	.+10     	; 0x9b8 <Transmit+0x28>
	{
		TransmitStatus = DATA_TRANSMITTED_ACK;
     9ae:	0f 2e       	mov	r0, r31
     9b0:	f8 e2       	ldi	r31, 0x28	; 40
     9b2:	df 2e       	mov	r13, r31
     9b4:	f0 2d       	mov	r31, r0
     9b6:	04 c0       	rjmp	.+8      	; 0x9c0 <Transmit+0x30>
	}
	else
	{
		TransmitStatus = SLA_R_DATA_TRANSMITTED_ACK;
     9b8:	0f 2e       	mov	r0, r31
     9ba:	f8 eb       	ldi	r31, 0xB8	; 184
     9bc:	df 2e       	mov	r13, r31
     9be:	f0 2d       	mov	r31, r0
	// Now transmit the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
     9c0:	4a 01       	movw	r8, r20
     9c2:	5b 01       	movw	r10, r22
     9c4:	21 e0       	ldi	r18, 0x01	; 1
     9c6:	82 1a       	sub	r8, r18
     9c8:	91 08       	sbc	r9, r1
     9ca:	a1 08       	sbc	r10, r1
     9cc:	b1 08       	sbc	r11, r1
     9ce:	81 14       	cp	r8, r1
     9d0:	91 04       	cpc	r9, r1
     9d2:	a1 04       	cpc	r10, r1
     9d4:	b1 04       	cpc	r11, r1
     9d6:	e1 f1       	breq	.+120    	; 0xa50 <Transmit+0xc0>
     9d8:	dc 01       	movw	r26, r24
     9da:	00 e0       	ldi	r16, 0x00	; 0
     9dc:	10 e0       	ldi	r17, 0x00	; 0
     9de:	98 01       	movw	r18, r16
	{
		TWDR = *BytePtr;
     9e0:	4b eb       	ldi	r20, 0xBB	; 187
     9e2:	50 e0       	ldi	r21, 0x00	; 0
		
		WAIT_FOR_OP_COMPLETION();
     9e4:	ec eb       	ldi	r30, 0xBC	; 188
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
		
		if (!ProcessTwiStatus(TransmitStatus))
     9e8:	0f 2e       	mov	r0, r31
     9ea:	f9 eb       	ldi	r31, 0xB9	; 185
     9ec:	ef 2e       	mov	r14, r31
     9ee:	f1 2c       	mov	r15, r1
     9f0:	f0 2d       	mov	r31, r0
     9f2:	6d 2d       	mov	r22, r13
     9f4:	70 e0       	ldi	r23, 0x00	; 0
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
	{
		TWDR = *BytePtr;
     9f6:	8d 91       	ld	r24, X+
     9f8:	ea 01       	movw	r28, r20
     9fa:	88 83       	st	Y, r24
		
		WAIT_FOR_OP_COMPLETION();
     9fc:	80 81       	ld	r24, Z
     9fe:	80 68       	ori	r24, 0x80	; 128
     a00:	80 83       	st	Z, r24
     a02:	80 81       	ld	r24, Z
     a04:	88 23       	and	r24, r24
     a06:	ec f7       	brge	.-6      	; 0xa02 <Transmit+0x72>
		
		if (!ProcessTwiStatus(TransmitStatus))
     a08:	e7 01       	movw	r28, r14
     a0a:	88 81       	ld	r24, Y
     a0c:	88 7f       	andi	r24, 0xF8	; 248
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	86 17       	cp	r24, r22
     a12:	97 07       	cpc	r25, r23
     a14:	99 f0       	breq	.+38     	; 0xa3c <Transmit+0xac>
		{
			SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     a16:	80 91 b9 00 	lds	r24, 0x00B9
     a1a:	88 7f       	andi	r24, 0xF8	; 248
     a1c:	1f 92       	push	r1
     a1e:	8f 93       	push	r24
     a20:	8a ec       	ldi	r24, 0xCA	; 202
     a22:	94 e0       	ldi	r25, 0x04	; 4
     a24:	9f 93       	push	r25
     a26:	8f 93       	push	r24
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	8f 93       	push	r24
     a2c:	47 d5       	rcall	.+2702   	; 0x14bc <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
     a2e:	0f 90       	pop	r0
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(TransmitStatus))
		{
			SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
			
			Status = FALSE;
     a38:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
     a3a:	3b c0       	rjmp	.+118    	; 0xab2 <Transmit+0x122>
		}
		
		BytePtr++;
     a3c:	cd 01       	movw	r24, r26
	// Now transmit the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
     a3e:	0f 5f       	subi	r16, 0xFF	; 255
     a40:	1f 4f       	sbci	r17, 0xFF	; 255
     a42:	2f 4f       	sbci	r18, 0xFF	; 255
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	08 15       	cp	r16, r8
     a48:	19 05       	cpc	r17, r9
     a4a:	2a 05       	cpc	r18, r10
     a4c:	3b 05       	cpc	r19, r11
     a4e:	98 f2       	brcs	.-90     	; 0x9f6 <Transmit+0x66>
	
	//
	// In slave mode after transmitting the last byte we will get a NACK from the Master
	//
	
	if (gMode == TWI_SLAVE)
     a50:	20 91 39 07 	lds	r18, 0x0739
     a54:	21 11       	cpse	r18, r1
     a56:	04 c0       	rjmp	.+8      	; 0xa60 <Transmit+0xd0>
	{
		TransmitStatus = SLA_R_DATA_TRANSMITTED_NACK;
     a58:	0f 2e       	mov	r0, r31
     a5a:	f0 ec       	ldi	r31, 0xC0	; 192
     a5c:	df 2e       	mov	r13, r31
     a5e:	f0 2d       	mov	r31, r0
	}
	
	TWDR = *BytePtr;
     a60:	fc 01       	movw	r30, r24
     a62:	80 81       	ld	r24, Z
     a64:	80 93 bb 00 	sts	0x00BB, r24
	
	WAIT_FOR_OP_COMPLETION();
     a68:	ec eb       	ldi	r30, 0xBC	; 188
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	80 81       	ld	r24, Z
     a6e:	80 68       	ori	r24, 0x80	; 128
     a70:	80 83       	st	Z, r24
     a72:	80 81       	ld	r24, Z
     a74:	88 23       	and	r24, r24
     a76:	ec f7       	brge	.-6      	; 0xa72 <Transmit+0xe2>
	
	if (!ProcessTwiStatus(TransmitStatus))
     a78:	20 91 b9 00 	lds	r18, 0x00B9
     a7c:	28 7f       	andi	r18, 0xF8	; 248
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	8d 2d       	mov	r24, r13
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	28 17       	cp	r18, r24
     a86:	39 07       	cpc	r19, r25
     a88:	99 f0       	breq	.+38     	; 0xab0 <Transmit+0x120>
	{
		SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     a8a:	80 91 b9 00 	lds	r24, 0x00B9
     a8e:	88 7f       	andi	r24, 0xF8	; 248
     a90:	1f 92       	push	r1
     a92:	8f 93       	push	r24
     a94:	8a ec       	ldi	r24, 0xCA	; 202
     a96:	94 e0       	ldi	r25, 0x04	; 4
     a98:	9f 93       	push	r25
     a9a:	8f 93       	push	r24
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	8f 93       	push	r24
     aa0:	0d d5       	rcall	.+2586   	; 0x14bc <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
	
	if (!ProcessTwiStatus(TransmitStatus))
	{
		SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     aac:	80 e0       	ldi	r24, 0x00	; 0
		
		goto Exit;
     aae:	01 c0       	rjmp	.+2      	; 0xab2 <Transmit+0x122>
}

bool
Transmit(PVOID Buffer, unsigned long Length)
{
	bool Status = TRUE;
     ab0:	81 e0       	ldi	r24, 0x01	; 1
	}
	
Exit:

	return Status;	
}
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	ff 90       	pop	r15
     abc:	ef 90       	pop	r14
     abe:	df 90       	pop	r13
     ac0:	bf 90       	pop	r11
     ac2:	af 90       	pop	r10
     ac4:	9f 90       	pop	r9
     ac6:	8f 90       	pop	r8
     ac8:	08 95       	ret

00000aca <TwiMasterTransmit>:
bool
TwiMasterTransmit(PVOID Buffer, 
				  unsigned long Length, 
				  PTWI_ADDRESS Address,
				  bool SendStop)
{
     aca:	af 92       	push	r10
     acc:	bf 92       	push	r11
     ace:	cf 92       	push	r12
     ad0:	df 92       	push	r13
     ad2:	ef 92       	push	r14
     ad4:	ff 92       	push	r15
     ad6:	0f 93       	push	r16
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	5c 01       	movw	r10, r24
     ade:	6a 01       	movw	r12, r20
     ae0:	7b 01       	movw	r14, r22
     ae2:	e9 01       	movw	r28, r18
	bool Status = TRUE;
	
	if (!SendStartCondition())
     ae4:	23 df       	rcall	.-442    	; 0x92c <SendStartCondition>
     ae6:	81 11       	cpse	r24, r1
     ae8:	13 c0       	rjmp	.+38     	; 0xb10 <TwiMasterTransmit+0x46>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     aea:	80 91 b9 00 	lds	r24, 0x00B9
     aee:	88 7f       	andi	r24, 0xF8	; 248
     af0:	1f 92       	push	r1
     af2:	8f 93       	push	r24
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	95 e0       	ldi	r25, 0x05	; 5
     af8:	9f 93       	push	r25
     afa:	8f 93       	push	r24
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	8f 93       	push	r24
     b00:	dd d4       	rcall	.+2490   	; 0x14bc <SendTrace>
		
		Status = FALSE;
			
		goto Exit;
     b02:	0f 90       	pop	r0
     b04:	0f 90       	pop	r0
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
	
	if (!SendStartCondition())
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     b0c:	c0 e0       	ldi	r28, 0x00	; 0
			
		goto Exit;
     b0e:	33 c0       	rjmp	.+102    	; 0xb76 <TwiMasterTransmit+0xac>
	}
	
	gIsRepeatedStart = FALSE;
     b10:	10 92 33 07 	sts	0x0733, r1
	//
	// Set Address->ReadWrite = 0 indicating a write operation.
	// Then transmit SLA+W
	//
	
	Address->RW_EnGenCall = 0;
     b14:	88 81       	ld	r24, Y
     b16:	8e 7f       	andi	r24, 0xFE	; 254
     b18:	88 83       	st	Y, r24
	
	TWDR = Address->AsUINT8;
     b1a:	80 93 bb 00 	sts	0x00BB, r24
		
	WAIT_FOR_OP_COMPLETION();
     b1e:	ec eb       	ldi	r30, 0xBC	; 188
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	80 81       	ld	r24, Z
     b24:	80 68       	ori	r24, 0x80	; 128
     b26:	80 83       	st	Z, r24
     b28:	80 81       	ld	r24, Z
     b2a:	88 23       	and	r24, r24
     b2c:	ec f7       	brge	.-6      	; 0xb28 <TwiMasterTransmit+0x5e>
		
	if (!ProcessTwiStatus(SLA_W_TRANSMITTED_ACK))
     b2e:	80 91 b9 00 	lds	r24, 0x00B9
     b32:	88 7f       	andi	r24, 0xF8	; 248
     b34:	88 31       	cpi	r24, 0x18	; 24
     b36:	99 f0       	breq	.+38     	; 0xb5e <TwiMasterTransmit+0x94>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Slave Address and Write Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     b38:	80 91 b9 00 	lds	r24, 0x00B9
     b3c:	88 7f       	andi	r24, 0xF8	; 248
     b3e:	1f 92       	push	r1
     b40:	8f 93       	push	r24
     b42:	8a e4       	ldi	r24, 0x4A	; 74
     b44:	95 e0       	ldi	r25, 0x05	; 5
     b46:	9f 93       	push	r25
     b48:	8f 93       	push	r24
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	8f 93       	push	r24
     b4e:	b6 d4       	rcall	.+2412   	; 0x14bc <SendTrace>
		
		Status = FALSE;
			
		goto Exit;
     b50:	0f 90       	pop	r0
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
		
	if (!ProcessTwiStatus(SLA_W_TRANSMITTED_ACK))
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Slave Address and Write Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     b5a:	c0 e0       	ldi	r28, 0x00	; 0
			
		goto Exit;
     b5c:	0c c0       	rjmp	.+24     	; 0xb76 <TwiMasterTransmit+0xac>
	}
	
	Status = Transmit(Buffer, Length);
     b5e:	b7 01       	movw	r22, r14
     b60:	a6 01       	movw	r20, r12
     b62:	c5 01       	movw	r24, r10
     b64:	15 df       	rcall	.-470    	; 0x990 <Transmit>
     b66:	c8 2f       	mov	r28, r24
	
	//
	// Send stop condition
	//
	
	if (SendStop)
     b68:	00 23       	and	r16, r16
     b6a:	11 f0       	breq	.+4      	; 0xb70 <TwiMasterTransmit+0xa6>
	{
		SendStopCondition();
     b6c:	04 df       	rcall	.-504    	; 0x976 <SendStopCondition>
     b6e:	03 c0       	rjmp	.+6      	; 0xb76 <TwiMasterTransmit+0xac>
	}
	else
	{
		gIsRepeatedStart = TRUE;
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	80 93 33 07 	sts	0x0733, r24
	}
	
Exit:

	return Status;
}
     b76:	8c 2f       	mov	r24, r28
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	0f 91       	pop	r16
     b7e:	ff 90       	pop	r15
     b80:	ef 90       	pop	r14
     b82:	df 90       	pop	r13
     b84:	cf 90       	pop	r12
     b86:	bf 90       	pop	r11
     b88:	af 90       	pop	r10
     b8a:	08 95       	ret

00000b8c <TwiTransmit>:
bool 
TwiTransmit(PVOID Buffer, 
			unsigned long Length,
			PTWI_ADDRESS Address,
			bool SendStop)
{
     b8c:	0f 93       	push	r16
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
     b8e:	e0 91 34 07 	lds	r30, 0x0734
     b92:	ee 23       	and	r30, r30
     b94:	09 f4       	brne	.+2      	; 0xb98 <TwiTransmit+0xc>
     b96:	48 c0       	rjmp	.+144    	; 0xc28 <TwiTransmit+0x9c>
     b98:	00 97       	sbiw	r24, 0x00	; 0
     b9a:	09 f4       	brne	.+2      	; 0xb9e <TwiTransmit+0x12>
     b9c:	47 c0       	rjmp	.+142    	; 0xc2c <TwiTransmit+0xa0>
		Status = FALSE;
		
		goto Exit;
	}
	
	if (gMode == TWI_MASTER)
     b9e:	e0 91 39 07 	lds	r30, 0x0739
     ba2:	e1 30       	cpi	r30, 0x01	; 1
     ba4:	89 f4       	brne	.+34     	; 0xbc8 <TwiTransmit+0x3c>
	{
		if (Address == NULL)
     ba6:	21 15       	cp	r18, r1
     ba8:	31 05       	cpc	r19, r1
     baa:	61 f4       	brne	.+24     	; 0xbc4 <TwiTransmit+0x38>
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Invalid Parameters\r\n");
     bac:	81 ea       	ldi	r24, 0xA1	; 161
     bae:	95 e0       	ldi	r25, 0x05	; 5
     bb0:	9f 93       	push	r25
     bb2:	8f 93       	push	r24
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8f 93       	push	r24
     bb8:	81 d4       	rcall	.+2306   	; 0x14bc <SendTrace>
			
			Status = FALSE;
		
			goto Exit;
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
	{
		if (Address == NULL)
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Invalid Parameters\r\n");
			
			Status = FALSE;
     bc0:	80 e0       	ldi	r24, 0x00	; 0
		
			goto Exit;
     bc2:	35 c0       	rjmp	.+106    	; 0xc2e <TwiTransmit+0xa2>
		}
		else
		{
			Status = TwiMasterTransmit(Buffer, Length, Address, SendStop);	
     bc4:	82 df       	rcall	.-252    	; 0xaca <TwiMasterTransmit>
     bc6:	33 c0       	rjmp	.+102    	; 0xc2e <TwiTransmit+0xa2>
		}
	}
	else
	{
		WAIT_FOR_OP_COMPLETION();
     bc8:	ec eb       	ldi	r30, 0xBC	; 188
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 81       	ld	r18, Z
     bce:	20 68       	ori	r18, 0x80	; 128
     bd0:	20 83       	st	Z, r18
     bd2:	20 81       	ld	r18, Z
     bd4:	22 23       	and	r18, r18
     bd6:	ec f7       	brge	.-6      	; 0xbd2 <TwiTransmit+0x46>
		
		if (ProcessTwiStatus(STOP_REPEATED_START_RECEIVED))
     bd8:	20 91 b9 00 	lds	r18, 0x00B9
     bdc:	28 7f       	andi	r18, 0xF8	; 248
     bde:	20 3a       	cpi	r18, 0xA0	; 160
     be0:	41 f4       	brne	.+16     	; 0xbf2 <TwiTransmit+0x66>
		{
			WAIT_FOR_OP_COMPLETION();	
     be2:	ec eb       	ldi	r30, 0xBC	; 188
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	20 81       	ld	r18, Z
     be8:	20 68       	ori	r18, 0x80	; 128
     bea:	20 83       	st	Z, r18
     bec:	20 81       	ld	r18, Z
     bee:	22 23       	and	r18, r18
     bf0:	ec f7       	brge	.-6      	; 0xbec <TwiTransmit+0x60>
		}
		
		if (!ProcessTwiStatus(SLA_R_RECEIVED_ACK))
     bf2:	20 91 b9 00 	lds	r18, 0x00B9
     bf6:	28 7f       	andi	r18, 0xF8	; 248
     bf8:	28 3a       	cpi	r18, 0xA8	; 168
     bfa:	91 f0       	breq	.+36     	; 0xc20 <TwiTransmit+0x94>
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Slave Read Not Requested by Master - 0x%x\r\n", TWSR);
     bfc:	80 91 b9 00 	lds	r24, 0x00B9
     c00:	1f 92       	push	r1
     c02:	8f 93       	push	r24
     c04:	84 ec       	ldi	r24, 0xC4	; 196
     c06:	95 e0       	ldi	r25, 0x05	; 5
     c08:	9f 93       	push	r25
     c0a:	8f 93       	push	r24
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	8f 93       	push	r24
     c10:	55 d4       	rcall	.+2218   	; 0x14bc <SendTrace>
			
			Status = FALSE;
		
			goto Exit;
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(SLA_R_RECEIVED_ACK))
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Slave Read Not Requested by Master - 0x%x\r\n", TWSR);
			
			Status = FALSE;
     c1c:	80 e0       	ldi	r24, 0x00	; 0
		
			goto Exit;
     c1e:	07 c0       	rjmp	.+14     	; 0xc2e <TwiTransmit+0xa2>
		}
		else
		{	
			DATA_OUT();
     c20:	39 9a       	sbi	0x07, 1	; 7
		
			Status = Transmit(Buffer, Length);
     c22:	b6 de       	rcall	.-660    	; 0x990 <Transmit>
		
			DATA_IN();
     c24:	39 98       	cbi	0x07, 1	; 7
     c26:	03 c0       	rjmp	.+6      	; 0xc2e <TwiTransmit+0xa2>
{
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
	{
		Status = FALSE;
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	01 c0       	rjmp	.+2      	; 0xc2e <TwiTransmit+0xa2>
     c2c:	80 e0       	ldi	r24, 0x00	; 0
	}
	
Exit:

	return Status;
}
     c2e:	0f 91       	pop	r16
     c30:	08 95       	ret

00000c32 <Receive>:
	return Status;	
}

bool
Receive(PVOID Buffer, unsigned long Length)
{
     c32:	8f 92       	push	r8
     c34:	9f 92       	push	r9
     c36:	af 92       	push	r10
     c38:	bf 92       	push	r11
     c3a:	df 92       	push	r13
     c3c:	ef 92       	push	r14
     c3e:	ff 92       	push	r15
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
	
	unsigned char *BytePtr;
	
	TWI_STATUS ReceiveStatus;
	
	if (gMode == TWI_MASTER)
     c48:	20 91 39 07 	lds	r18, 0x0739
     c4c:	21 30       	cpi	r18, 0x01	; 1
     c4e:	29 f4       	brne	.+10     	; 0xc5a <Receive+0x28>
	{
		ReceiveStatus = DATA_RECEIVED_ACK;
     c50:	0f 2e       	mov	r0, r31
     c52:	f0 e5       	ldi	r31, 0x50	; 80
     c54:	df 2e       	mov	r13, r31
     c56:	f0 2d       	mov	r31, r0
     c58:	03 c0       	rjmp	.+6      	; 0xc60 <Receive+0x2e>
	}
	else
	{
		ReceiveStatus = SLA_W_DATA_RECEIVED_ACK;
     c5a:	68 94       	set
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 f8       	bld	r13, 7
	// Now receive the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
     c60:	4a 01       	movw	r8, r20
     c62:	5b 01       	movw	r10, r22
     c64:	21 e0       	ldi	r18, 0x01	; 1
     c66:	82 1a       	sub	r8, r18
     c68:	91 08       	sbc	r9, r1
     c6a:	a1 08       	sbc	r10, r1
     c6c:	b1 08       	sbc	r11, r1
     c6e:	81 14       	cp	r8, r1
     c70:	91 04       	cpc	r9, r1
     c72:	a1 04       	cpc	r10, r1
     c74:	b1 04       	cpc	r11, r1
     c76:	e1 f1       	breq	.+120    	; 0xcf0 <Receive+0xbe>
     c78:	dc 01       	movw	r26, r24
     c7a:	00 e0       	ldi	r16, 0x00	; 0
     c7c:	10 e0       	ldi	r17, 0x00	; 0
     c7e:	98 01       	movw	r18, r16
	{
			
		WAIT_FOR_OP_COMPLETION();
     c80:	ec eb       	ldi	r30, 0xBC	; 188
     c82:	f0 e0       	ldi	r31, 0x00	; 0
		
		if (!ProcessTwiStatus(ReceiveStatus))
     c84:	0f 2e       	mov	r0, r31
     c86:	f9 eb       	ldi	r31, 0xB9	; 185
     c88:	ef 2e       	mov	r14, r31
     c8a:	f1 2c       	mov	r15, r1
     c8c:	f0 2d       	mov	r31, r0
     c8e:	6d 2d       	mov	r22, r13
     c90:	70 e0       	ldi	r23, 0x00	; 0
			Status = FALSE;
			
			goto Exit;
		}
		
		*BytePtr = TWDR;
     c92:	4b eb       	ldi	r20, 0xBB	; 187
     c94:	50 e0       	ldi	r21, 0x00	; 0
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
	{
			
		WAIT_FOR_OP_COMPLETION();
     c96:	80 81       	ld	r24, Z
     c98:	80 68       	ori	r24, 0x80	; 128
     c9a:	80 83       	st	Z, r24
     c9c:	80 81       	ld	r24, Z
     c9e:	88 23       	and	r24, r24
     ca0:	ec f7       	brge	.-6      	; 0xc9c <Receive+0x6a>
		
		if (!ProcessTwiStatus(ReceiveStatus))
     ca2:	e7 01       	movw	r28, r14
     ca4:	88 81       	ld	r24, Y
     ca6:	88 7f       	andi	r24, 0xF8	; 248
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	86 17       	cp	r24, r22
     cac:	97 07       	cpc	r25, r23
     cae:	99 f0       	breq	.+38     	; 0xcd6 <Receive+0xa4>
		{
			SendTrace(ERROR_LEVEL, "Receive - Data Reception Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     cb0:	80 91 b9 00 	lds	r24, 0x00B9
     cb4:	88 7f       	andi	r24, 0xF8	; 248
     cb6:	1f 92       	push	r1
     cb8:	8f 93       	push	r24
     cba:	8e ef       	ldi	r24, 0xFE	; 254
     cbc:	95 e0       	ldi	r25, 0x05	; 5
     cbe:	9f 93       	push	r25
     cc0:	8f 93       	push	r24
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	8f 93       	push	r24
     cc6:	fa d3       	rcall	.+2036   	; 0x14bc <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(ReceiveStatus))
		{
			SendTrace(ERROR_LEVEL, "Receive - Data Reception Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
			
			Status = FALSE;
     cd2:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
     cd4:	43 c0       	rjmp	.+134    	; 0xd5c <Receive+0x12a>
		}
		
		*BytePtr = TWDR;
     cd6:	ea 01       	movw	r28, r20
     cd8:	88 81       	ld	r24, Y
     cda:	8d 93       	st	X+, r24
		
		BytePtr++;
     cdc:	cd 01       	movw	r24, r26
	// Now receive the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
     cde:	0f 5f       	subi	r16, 0xFF	; 255
     ce0:	1f 4f       	sbci	r17, 0xFF	; 255
     ce2:	2f 4f       	sbci	r18, 0xFF	; 255
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	08 15       	cp	r16, r8
     ce8:	19 05       	cpc	r17, r9
     cea:	2a 05       	cpc	r18, r10
     cec:	3b 05       	cpc	r19, r11
     cee:	98 f2       	brcs	.-90     	; 0xc96 <Receive+0x64>
	//
	// When receiving the last byte if the receiver is a master then we need to transmit a NACK.
	// If the receiver is a slave we need to transmit a ACK.
	//
	
	if (gMode == TWI_MASTER)
     cf0:	20 91 39 07 	lds	r18, 0x0739
     cf4:	21 30       	cpi	r18, 0x01	; 1
     cf6:	49 f4       	brne	.+18     	; 0xd0a <Receive+0xd8>
	{
		ENABLE_NACK();
     cf8:	ec eb       	ldi	r30, 0xBC	; 188
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	20 81       	ld	r18, Z
     cfe:	2f 73       	andi	r18, 0x3F	; 63
     d00:	20 83       	st	Z, r18
		
		ReceiveStatus = DATA_RECEIVED_NACK;
     d02:	0f 2e       	mov	r0, r31
     d04:	f8 e5       	ldi	r31, 0x58	; 88
     d06:	df 2e       	mov	r13, r31
     d08:	f0 2d       	mov	r31, r0
	}
	
	WAIT_FOR_OP_COMPLETION();
     d0a:	ec eb       	ldi	r30, 0xBC	; 188
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	20 81       	ld	r18, Z
     d10:	20 68       	ori	r18, 0x80	; 128
     d12:	20 83       	st	Z, r18
     d14:	20 81       	ld	r18, Z
     d16:	22 23       	and	r18, r18
     d18:	ec f7       	brge	.-6      	; 0xd14 <Receive+0xe2>
	
	if (!ProcessTwiStatus(ReceiveStatus))
     d1a:	40 91 b9 00 	lds	r20, 0x00B9
     d1e:	48 7f       	andi	r20, 0xF8	; 248
     d20:	50 e0       	ldi	r21, 0x00	; 0
     d22:	2d 2d       	mov	r18, r13
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	42 17       	cp	r20, r18
     d28:	53 07       	cpc	r21, r19
     d2a:	99 f0       	breq	.+38     	; 0xd52 <Receive+0x120>
	{
		SendTrace(ERROR_LEVEL, "Receive - Data Reception Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     d2c:	80 91 b9 00 	lds	r24, 0x00B9
     d30:	88 7f       	andi	r24, 0xF8	; 248
     d32:	1f 92       	push	r1
     d34:	8f 93       	push	r24
     d36:	8e ef       	ldi	r24, 0xFE	; 254
     d38:	95 e0       	ldi	r25, 0x05	; 5
     d3a:	9f 93       	push	r25
     d3c:	8f 93       	push	r24
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	8f 93       	push	r24
     d42:	bc d3       	rcall	.+1912   	; 0x14bc <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
	
	if (!ProcessTwiStatus(ReceiveStatus))
	{
		SendTrace(ERROR_LEVEL, "Receive - Data Reception Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     d4e:	80 e0       	ldi	r24, 0x00	; 0
		
		goto Exit;
     d50:	05 c0       	rjmp	.+10     	; 0xd5c <Receive+0x12a>
	}
	
	*BytePtr = TWDR;
     d52:	20 91 bb 00 	lds	r18, 0x00BB
     d56:	fc 01       	movw	r30, r24
     d58:	20 83       	st	Z, r18
}

bool
Receive(PVOID Buffer, unsigned long Length)
{
	bool Status = TRUE;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
	
	*BytePtr = TWDR;
	
Exit:

	ENABLE_ACK();
     d5c:	ec eb       	ldi	r30, 0xBC	; 188
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	90 81       	ld	r25, Z
     d62:	9f 73       	andi	r25, 0x3F	; 63
     d64:	90 64       	ori	r25, 0x40	; 64
     d66:	90 83       	st	Z, r25

	return Status;
}
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	ff 90       	pop	r15
     d72:	ef 90       	pop	r14
     d74:	df 90       	pop	r13
     d76:	bf 90       	pop	r11
     d78:	af 90       	pop	r10
     d7a:	9f 90       	pop	r9
     d7c:	8f 90       	pop	r8
     d7e:	08 95       	ret

00000d80 <TwiMasterReceive>:
bool
TwiMasterReceive(PVOID Buffer, 
				 unsigned long Length, 
				 PTWI_ADDRESS Address,
				 bool SendStop)
{
     d80:	af 92       	push	r10
     d82:	bf 92       	push	r11
     d84:	cf 92       	push	r12
     d86:	df 92       	push	r13
     d88:	ef 92       	push	r14
     d8a:	ff 92       	push	r15
     d8c:	0f 93       	push	r16
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	5c 01       	movw	r10, r24
     d94:	6a 01       	movw	r12, r20
     d96:	7b 01       	movw	r14, r22
     d98:	e9 01       	movw	r28, r18
	bool Status = TRUE;
	
	if (!SendStartCondition())
     d9a:	c8 dd       	rcall	.-1136   	; 0x92c <SendStartCondition>
     d9c:	81 11       	cpse	r24, r1
     d9e:	13 c0       	rjmp	.+38     	; 0xdc6 <TwiMasterReceive+0x46>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterReceive - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     da0:	80 91 b9 00 	lds	r24, 0x00B9
     da4:	88 7f       	andi	r24, 0xF8	; 248
     da6:	1f 92       	push	r1
     da8:	8f 93       	push	r24
     daa:	80 e3       	ldi	r24, 0x30	; 48
     dac:	96 e0       	ldi	r25, 0x06	; 6
     dae:	9f 93       	push	r25
     db0:	8f 93       	push	r24
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	8f 93       	push	r24
     db6:	82 d3       	rcall	.+1796   	; 0x14bc <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
	
	if (!SendStartCondition())
	{
		SendTrace(ERROR_LEVEL, "TwiMasterReceive - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     dc2:	c0 e0       	ldi	r28, 0x00	; 0
		
		goto Exit;
     dc4:	33 c0       	rjmp	.+102    	; 0xe2c <TwiMasterReceive+0xac>
	}
	
	gIsRepeatedStart = FALSE;
     dc6:	10 92 33 07 	sts	0x0733, r1
	//
	// Set Address->ReadWrite = 1 indicating a read operation.
	// Then transmit SLA+R
	//
	
	Address->RW_EnGenCall = 1;
     dca:	88 81       	ld	r24, Y
     dcc:	81 60       	ori	r24, 0x01	; 1
     dce:	88 83       	st	Y, r24
	
	TWDR = Address->AsUINT8;
     dd0:	80 93 bb 00 	sts	0x00BB, r24
	
	WAIT_FOR_OP_COMPLETION();
     dd4:	ec eb       	ldi	r30, 0xBC	; 188
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	80 68       	ori	r24, 0x80	; 128
     ddc:	80 83       	st	Z, r24
     dde:	80 81       	ld	r24, Z
     de0:	88 23       	and	r24, r24
     de2:	ec f7       	brge	.-6      	; 0xdde <TwiMasterReceive+0x5e>
	
	if (!ProcessTwiStatus(SLA_R_TRANSMITTED_ACK))
     de4:	80 91 b9 00 	lds	r24, 0x00B9
     de8:	88 7f       	andi	r24, 0xF8	; 248
     dea:	80 34       	cpi	r24, 0x40	; 64
     dec:	99 f0       	breq	.+38     	; 0xe14 <TwiMasterReceive+0x94>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterReceive - Slave Address and Read Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     dee:	80 91 b9 00 	lds	r24, 0x00B9
     df2:	88 7f       	andi	r24, 0xF8	; 248
     df4:	1f 92       	push	r1
     df6:	8f 93       	push	r24
     df8:	89 e7       	ldi	r24, 0x79	; 121
     dfa:	96 e0       	ldi	r25, 0x06	; 6
     dfc:	9f 93       	push	r25
     dfe:	8f 93       	push	r24
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8f 93       	push	r24
     e04:	5b d3       	rcall	.+1718   	; 0x14bc <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
	
	if (!ProcessTwiStatus(SLA_R_TRANSMITTED_ACK))
	{
		SendTrace(ERROR_LEVEL, "TwiMasterReceive - Slave Address and Read Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     e10:	c0 e0       	ldi	r28, 0x00	; 0
		
		goto Exit;
     e12:	0c c0       	rjmp	.+24     	; 0xe2c <TwiMasterReceive+0xac>
	}
	
	Status = Receive(Buffer, Length);
     e14:	b7 01       	movw	r22, r14
     e16:	a6 01       	movw	r20, r12
     e18:	c5 01       	movw	r24, r10
     e1a:	0b df       	rcall	.-490    	; 0xc32 <Receive>
     e1c:	c8 2f       	mov	r28, r24
	
	//
	// Send stop condition
	//
	
	if (SendStop)
     e1e:	00 23       	and	r16, r16
     e20:	11 f0       	breq	.+4      	; 0xe26 <TwiMasterReceive+0xa6>
	{
		SendStopCondition();
     e22:	a9 dd       	rcall	.-1198   	; 0x976 <SendStopCondition>
     e24:	03 c0       	rjmp	.+6      	; 0xe2c <TwiMasterReceive+0xac>
	}
	else
	{
		gIsRepeatedStart = TRUE;
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	80 93 33 07 	sts	0x0733, r24
	}
	
Exit:

	return Status;
}
     e2c:	8c 2f       	mov	r24, r28
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	0f 91       	pop	r16
     e34:	ff 90       	pop	r15
     e36:	ef 90       	pop	r14
     e38:	df 90       	pop	r13
     e3a:	cf 90       	pop	r12
     e3c:	bf 90       	pop	r11
     e3e:	af 90       	pop	r10
     e40:	08 95       	ret

00000e42 <TwiReceive>:
bool
TwiReceive(PVOID Buffer,
		   unsigned long Length,
		   PTWI_ADDRESS Address,
		   bool SendStop)
{
     e42:	0f 93       	push	r16
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
     e44:	e0 91 34 07 	lds	r30, 0x0734
     e48:	ee 23       	and	r30, r30
     e4a:	d1 f1       	breq	.+116    	; 0xec0 <TwiReceive+0x7e>
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	d1 f1       	breq	.+116    	; 0xec4 <TwiReceive+0x82>
		Status = FALSE;
		
		goto Exit;
	}
	
	if (gMode == TWI_MASTER)
     e50:	e0 91 39 07 	lds	r30, 0x0739
     e54:	e1 30       	cpi	r30, 0x01	; 1
     e56:	99 f4       	brne	.+38     	; 0xe7e <TwiReceive+0x3c>
	{
		if (Address == NULL)
     e58:	21 15       	cp	r18, r1
     e5a:	31 05       	cpc	r19, r1
     e5c:	61 f4       	brne	.+24     	; 0xe76 <TwiReceive+0x34>
		{
			SendTrace(ERROR_LEVEL, "TwiReceive - Invalid Parameters\r\n");
     e5e:	8e ec       	ldi	r24, 0xCE	; 206
     e60:	96 e0       	ldi	r25, 0x06	; 6
     e62:	9f 93       	push	r25
     e64:	8f 93       	push	r24
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	8f 93       	push	r24
     e6a:	28 d3       	rcall	.+1616   	; 0x14bc <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
	{
		if (Address == NULL)
		{
			SendTrace(ERROR_LEVEL, "TwiReceive - Invalid Parameters\r\n");
			
			Status = FALSE;
     e72:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
     e74:	28 c0       	rjmp	.+80     	; 0xec6 <TwiReceive+0x84>
		}
		else
		{
			DATA_IN();
     e76:	39 98       	cbi	0x07, 1	; 7
			
			Status = TwiMasterReceive(Buffer, Length, Address, SendStop);
     e78:	83 df       	rcall	.-250    	; 0xd80 <TwiMasterReceive>
			
			DATA_OUT();
     e7a:	39 9a       	sbi	0x07, 1	; 7
     e7c:	24 c0       	rjmp	.+72     	; 0xec6 <TwiReceive+0x84>
		}
	}
	else
	{
		WAIT_FOR_OP_COMPLETION();
     e7e:	ec eb       	ldi	r30, 0xBC	; 188
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	20 81       	ld	r18, Z
     e84:	20 68       	ori	r18, 0x80	; 128
     e86:	20 83       	st	Z, r18
     e88:	20 81       	ld	r18, Z
     e8a:	22 23       	and	r18, r18
     e8c:	ec f7       	brge	.-6      	; 0xe88 <TwiReceive+0x46>
		
		if (!ProcessTwiStatus(SLA_W_RECEIVED_ACK))
     e8e:	20 91 b9 00 	lds	r18, 0x00B9
     e92:	28 7f       	andi	r18, 0xF8	; 248
     e94:	20 36       	cpi	r18, 0x60	; 96
     e96:	91 f0       	breq	.+36     	; 0xebc <TwiReceive+0x7a>
		{
			SendTrace(ERROR_LEVEL, "TwiReceive - Slave Write Not Requested by Master - Status 0x%x\r\n", TWSR);
     e98:	80 91 b9 00 	lds	r24, 0x00B9
     e9c:	1f 92       	push	r1
     e9e:	8f 93       	push	r24
     ea0:	80 ef       	ldi	r24, 0xF0	; 240
     ea2:	96 e0       	ldi	r25, 0x06	; 6
     ea4:	9f 93       	push	r25
     ea6:	8f 93       	push	r24
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	8f 93       	push	r24
     eac:	07 d3       	rcall	.+1550   	; 0x14bc <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(SLA_W_RECEIVED_ACK))
		{
			SendTrace(ERROR_LEVEL, "TwiReceive - Slave Write Not Requested by Master - Status 0x%x\r\n", TWSR);
			
			Status = FALSE;
     eb8:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
     eba:	05 c0       	rjmp	.+10     	; 0xec6 <TwiReceive+0x84>
		}
		else
		{	
			Status = Receive(Buffer, Length);
     ebc:	ba de       	rcall	.-652    	; 0xc32 <Receive>
     ebe:	03 c0       	rjmp	.+6      	; 0xec6 <TwiReceive+0x84>
{
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
	{
		Status = FALSE;
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	01 c0       	rjmp	.+2      	; 0xec6 <TwiReceive+0x84>
     ec4:	80 e0       	ldi	r24, 0x00	; 0
	}
	
Exit:

	return Status;		   
}
     ec6:	0f 91       	pop	r16
     ec8:	08 95       	ret

00000eca <InitTrace>:
#ifdef DEBUG

void
InitTrace(unsigned long ProcFrequency, unsigned char TraceLevel)
{
	if (!gTraceInitialized)
     eca:	80 91 35 07 	lds	r24, 0x0735
     ece:	81 11       	cpse	r24, r1
     ed0:	09 c0       	rjmp	.+18     	; 0xee4 <InitTrace+0x1a>
	{

		gTraceLevel = TraceLevel;
     ed2:	40 93 3a 07 	sts	0x073A, r20

		InitUARTSync(UART_ZERO, BR_9600, NORMAL_MODE);	
     ed6:	40 e0       	ldi	r20, 0x00	; 0
     ed8:	63 e3       	ldi	r22, 0x33	; 51
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	df d6       	rcall	.+3518   	; 0x1c9c <InitUARTSync>
		
		gTraceInitialized = TRUE;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	80 93 35 07 	sts	0x0735, r24
     ee4:	08 95       	ret

00000ee6 <SendStringValue>:
SendStringValue(char *String)
{

	unsigned long Length = 0;
	
	Length = strlen(String);
     ee6:	fc 01       	movw	r30, r24
     ee8:	01 90       	ld	r0, Z+
     eea:	00 20       	and	r0, r0
     eec:	e9 f7       	brne	.-6      	; 0xee8 <SendStringValue+0x2>
     eee:	31 97       	sbiw	r30, 0x01	; 1
     ef0:	9f 01       	movw	r18, r30
     ef2:	28 1b       	sub	r18, r24
     ef4:	39 0b       	sbc	r19, r25
     ef6:	40 e0       	ldi	r20, 0x00	; 0
     ef8:	50 e0       	ldi	r21, 0x00	; 0
	
	UARTTransmitSync(UART_ZERO, (PVOID) String, Length);
     efa:	bc 01       	movw	r22, r24
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	9b c7       	rjmp	.+3894   	; 0x1e36 <UARTTransmitSync>
     f00:	08 95       	ret

00000f02 <SendHexValue>:
	
}

void
SendHexValue(unsigned long long Value)
{
     f02:	8f 92       	push	r8
     f04:	9f 92       	push	r9
     f06:	af 92       	push	r10
     f08:	bf 92       	push	r11
     f0a:	cf 92       	push	r12
     f0c:	df 92       	push	r13
     f0e:	ef 92       	push	r14
     f10:	ff 92       	push	r15
     f12:	0f 93       	push	r16
     f14:	1f 93       	push	r17
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	da 95       	dec	r29
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	f8 94       	cli
     f24:	de bf       	out	0x3e, r29	; 62
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	cd bf       	out	0x3d, r28	; 61
     f2a:	02 2f       	mov	r16, r18
     f2c:	93 2e       	mov	r9, r19
     f2e:	a4 2e       	mov	r10, r20
     f30:	b5 2e       	mov	r11, r21
     f32:	c6 2e       	mov	r12, r22
     f34:	d7 2e       	mov	r13, r23
     f36:	e8 2e       	mov	r14, r24
     f38:	f9 2e       	mov	r15, r25

	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
     f3a:	10 e0       	ldi	r17, 0x00	; 0

		if (Value < 16)
		{
			TransmitChar[Count] = Value;

			Value = 0;
     f3c:	81 2c       	mov	r8, r1


	do
	{

		if (Value < 16)
     f3e:	20 2f       	mov	r18, r16
     f40:	39 2d       	mov	r19, r9
     f42:	4a 2d       	mov	r20, r10
     f44:	5b 2d       	mov	r21, r11
     f46:	6c 2d       	mov	r22, r12
     f48:	7d 2d       	mov	r23, r13
     f4a:	8e 2d       	mov	r24, r14
     f4c:	9f 2d       	mov	r25, r15
     f4e:	af e0       	ldi	r26, 0x0F	; 15
     f50:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__cmpdi2_s8>
     f54:	09 f0       	breq	.+2      	; 0xf58 <SendHexValue+0x56>
     f56:	80 f4       	brcc	.+32     	; 0xf78 <SendHexValue+0x76>
		{
			TransmitChar[Count] = Value;
     f58:	e1 e0       	ldi	r30, 0x01	; 1
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	ec 0f       	add	r30, r28
     f5e:	fd 1f       	adc	r31, r29
     f60:	e1 0f       	add	r30, r17
     f62:	f1 1d       	adc	r31, r1
     f64:	00 83       	st	Z, r16

			Value = 0;
     f66:	08 2d       	mov	r16, r8
     f68:	98 2c       	mov	r9, r8
     f6a:	a8 2c       	mov	r10, r8
     f6c:	b8 2c       	mov	r11, r8
     f6e:	c8 2c       	mov	r12, r8
     f70:	d8 2c       	mov	r13, r8
     f72:	e8 2c       	mov	r14, r8
     f74:	f8 2c       	mov	r15, r8
     f76:	1c c0       	rjmp	.+56     	; 0xfb0 <SendHexValue+0xae>
		}
		else
		{
			TransmitChar[Count] = Value % 16;
     f78:	e1 e0       	ldi	r30, 0x01	; 1
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	ec 0f       	add	r30, r28
     f7e:	fd 1f       	adc	r31, r29
     f80:	e1 0f       	add	r30, r17
     f82:	f1 1d       	adc	r31, r1
     f84:	80 2f       	mov	r24, r16
     f86:	8f 70       	andi	r24, 0x0F	; 15
     f88:	80 83       	st	Z, r24

			Value = Value / 16;
     f8a:	20 2f       	mov	r18, r16
     f8c:	39 2d       	mov	r19, r9
     f8e:	4a 2d       	mov	r20, r10
     f90:	5b 2d       	mov	r21, r11
     f92:	6c 2d       	mov	r22, r12
     f94:	7d 2d       	mov	r23, r13
     f96:	8e 2d       	mov	r24, r14
     f98:	9f 2d       	mov	r25, r15
     f9a:	04 e0       	ldi	r16, 0x04	; 4
     f9c:	0e 94 cf 10 	call	0x219e	; 0x219e <__lshrdi3>
     fa0:	02 2f       	mov	r16, r18
     fa2:	93 2e       	mov	r9, r19
     fa4:	a4 2e       	mov	r10, r20
     fa6:	b5 2e       	mov	r11, r21
     fa8:	c6 2e       	mov	r12, r22
     faa:	d7 2e       	mov	r13, r23
     fac:	e8 2e       	mov	r14, r24
     fae:	f9 2e       	mov	r15, r25

		}
		
		if (TransmitChar[Count] > 9)
     fb0:	e1 2f       	mov	r30, r17
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	a1 e0       	ldi	r26, 0x01	; 1
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	ac 0f       	add	r26, r28
     fba:	bd 1f       	adc	r27, r29
     fbc:	ae 0f       	add	r26, r30
     fbe:	bf 1f       	adc	r27, r31
     fc0:	8c 91       	ld	r24, X
     fc2:	8a 30       	cpi	r24, 0x0A	; 10
     fc4:	20 f0       	brcs	.+8      	; 0xfce <SendHexValue+0xcc>
		{
			TransmitChar[Count] = TransmitChar[Count] + ASCII_HEX_CONVERSION;
     fc6:	fd 01       	movw	r30, r26
     fc8:	89 5a       	subi	r24, 0xA9	; 169
     fca:	80 83       	st	Z, r24
     fcc:	08 c0       	rjmp	.+16     	; 0xfde <SendHexValue+0xdc>
		}
		else
		{
			TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     fce:	21 e0       	ldi	r18, 0x01	; 1
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	2c 0f       	add	r18, r28
     fd4:	3d 1f       	adc	r19, r29
     fd6:	e2 0f       	add	r30, r18
     fd8:	f3 1f       	adc	r31, r19
     fda:	80 5d       	subi	r24, 0xD0	; 208
     fdc:	80 83       	st	Z, r24
		}
		
		Count++;
     fde:	1f 5f       	subi	r17, 0xFF	; 255

	} while (Value != 0);
     fe0:	20 2f       	mov	r18, r16
     fe2:	39 2d       	mov	r19, r9
     fe4:	4a 2d       	mov	r20, r10
     fe6:	5b 2d       	mov	r21, r11
     fe8:	6c 2d       	mov	r22, r12
     fea:	7d 2d       	mov	r23, r13
     fec:	8e 2d       	mov	r24, r14
     fee:	9f 2d       	mov	r25, r15
     ff0:	a8 2d       	mov	r26, r8
     ff2:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__cmpdi2_s8>
     ff6:	09 f0       	breq	.+2      	; 0xffa <SendHexValue+0xf8>
     ff8:	a2 cf       	rjmp	.-188    	; 0xf3e <SendHexValue+0x3c>

	while (Count != 0)
     ffa:	11 23       	and	r17, r17
     ffc:	91 f0       	breq	.+36     	; 0x1022 <SendHexValue+0x120>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     ffe:	61 2f       	mov	r22, r17
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	61 50       	subi	r22, 0x01	; 1
    1004:	71 09       	sbc	r23, r1
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	8c 0f       	add	r24, r28
    100c:	9d 1f       	adc	r25, r29
    100e:	68 0f       	add	r22, r24
    1010:	79 1f       	adc	r23, r25
    1012:	21 e0       	ldi	r18, 0x01	; 1
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	40 e0       	ldi	r20, 0x00	; 0
    1018:	50 e0       	ldi	r21, 0x00	; 0
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	0c d7       	rcall	.+3608   	; 0x1e36 <UARTTransmitSync>
		
		Count--;
    101e:	11 50       	subi	r17, 0x01	; 1
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
    1020:	71 f7       	brne	.-36     	; 0xffe <SendHexValue+0xfc>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}
}
    1022:	d3 95       	inc	r29
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	de bf       	out	0x3e, r29	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	cd bf       	out	0x3d, r28	; 61
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	1f 91       	pop	r17
    1034:	0f 91       	pop	r16
    1036:	ff 90       	pop	r15
    1038:	ef 90       	pop	r14
    103a:	df 90       	pop	r13
    103c:	cf 90       	pop	r12
    103e:	bf 90       	pop	r11
    1040:	af 90       	pop	r10
    1042:	9f 90       	pop	r9
    1044:	8f 90       	pop	r8
    1046:	08 95       	ret

00001048 <SendDecimalValue>:


void
SendDecimalValue(unsigned long long Value)
{
    1048:	2f 92       	push	r2
    104a:	3f 92       	push	r3
    104c:	4f 92       	push	r4
    104e:	5f 92       	push	r5
    1050:	6f 92       	push	r6
    1052:	7f 92       	push	r7
    1054:	8f 92       	push	r8
    1056:	9f 92       	push	r9
    1058:	af 92       	push	r10
    105a:	bf 92       	push	r11
    105c:	cf 92       	push	r12
    105e:	df 92       	push	r13
    1060:	ef 92       	push	r14
    1062:	ff 92       	push	r15
    1064:	0f 93       	push	r16
    1066:	1f 93       	push	r17
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
    1070:	c2 50       	subi	r28, 0x02	; 2
    1072:	d1 40       	sbci	r29, 0x01	; 1
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	cf 5f       	subi	r28, 0xFF	; 255
    1080:	de 4f       	sbci	r29, 0xFE	; 254
    1082:	28 83       	st	Y, r18
    1084:	c1 50       	subi	r28, 0x01	; 1
    1086:	d1 40       	sbci	r29, 0x01	; 1
    1088:	23 2e       	mov	r2, r19
    108a:	34 2e       	mov	r3, r20
    108c:	45 2e       	mov	r4, r21
    108e:	56 2e       	mov	r5, r22
    1090:	67 2e       	mov	r6, r23
    1092:	78 2e       	mov	r7, r24
    1094:	89 2e       	mov	r8, r25

	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
    1096:	91 2c       	mov	r9, r1


	do
	{

		if (Value < 10)
    1098:	cf 5f       	subi	r28, 0xFF	; 255
    109a:	de 4f       	sbci	r29, 0xFE	; 254
    109c:	28 81       	ld	r18, Y
    109e:	c1 50       	subi	r28, 0x01	; 1
    10a0:	d1 40       	sbci	r29, 0x01	; 1
    10a2:	32 2d       	mov	r19, r2
    10a4:	43 2d       	mov	r20, r3
    10a6:	54 2d       	mov	r21, r4
    10a8:	65 2d       	mov	r22, r5
    10aa:	76 2d       	mov	r23, r6
    10ac:	87 2d       	mov	r24, r7
    10ae:	98 2d       	mov	r25, r8
    10b0:	a9 e0       	ldi	r26, 0x09	; 9
    10b2:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__cmpdi2_s8>
    10b6:	09 f0       	breq	.+2      	; 0x10ba <SendDecimalValue+0x72>
    10b8:	40 f4       	brcc	.+16     	; 0x10ca <SendDecimalValue+0x82>

			Value = Value / 10;

		}
		
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
    10ba:	fe 01       	movw	r30, r28
    10bc:	e9 0d       	add	r30, r9
    10be:	f1 1d       	adc	r31, r1
    10c0:	82 2f       	mov	r24, r18
    10c2:	80 5d       	subi	r24, 0xD0	; 208
    10c4:	81 83       	std	Z+1, r24	; 0x01
		
		Count++;
    10c6:	93 94       	inc	r9
    10c8:	49 c0       	rjmp	.+146    	; 0x115c <SendDecimalValue+0x114>

			Value = 0;
		}
		else
		{
			TransmitChar[Count] = Value % 10;
    10ca:	0f 2e       	mov	r0, r31
    10cc:	fa e0       	ldi	r31, 0x0A	; 10
    10ce:	af 2e       	mov	r10, r31
    10d0:	f0 2d       	mov	r31, r0
    10d2:	b1 2c       	mov	r11, r1
    10d4:	c1 2c       	mov	r12, r1
    10d6:	d1 2c       	mov	r13, r1
    10d8:	e1 2c       	mov	r14, r1
    10da:	f1 2c       	mov	r15, r1
    10dc:	00 e0       	ldi	r16, 0x00	; 0
    10de:	10 e0       	ldi	r17, 0x00	; 0
    10e0:	cf 5f       	subi	r28, 0xFF	; 255
    10e2:	de 4f       	sbci	r29, 0xFE	; 254
    10e4:	28 81       	ld	r18, Y
    10e6:	c1 50       	subi	r28, 0x01	; 1
    10e8:	d1 40       	sbci	r29, 0x01	; 1
    10ea:	32 2d       	mov	r19, r2
    10ec:	43 2d       	mov	r20, r3
    10ee:	54 2d       	mov	r21, r4
    10f0:	65 2d       	mov	r22, r5
    10f2:	76 2d       	mov	r23, r6
    10f4:	87 2d       	mov	r24, r7
    10f6:	98 2d       	mov	r25, r8
    10f8:	ab d7       	rcall	.+3926   	; 0x2050 <__umoddi3>
    10fa:	ce 5f       	subi	r28, 0xFE	; 254
    10fc:	de 4f       	sbci	r29, 0xFE	; 254
    10fe:	28 83       	st	Y, r18
    1100:	c2 50       	subi	r28, 0x02	; 2
    1102:	d1 40       	sbci	r29, 0x01	; 1

			Value = Value / 10;
    1104:	cf 5f       	subi	r28, 0xFF	; 255
    1106:	de 4f       	sbci	r29, 0xFE	; 254
    1108:	28 81       	ld	r18, Y
    110a:	c1 50       	subi	r28, 0x01	; 1
    110c:	d1 40       	sbci	r29, 0x01	; 1
    110e:	32 2d       	mov	r19, r2
    1110:	43 2d       	mov	r20, r3
    1112:	54 2d       	mov	r21, r4
    1114:	65 2d       	mov	r22, r5
    1116:	76 2d       	mov	r23, r6
    1118:	87 2d       	mov	r24, r7
    111a:	98 2d       	mov	r25, r8
    111c:	9b d7       	rcall	.+3894   	; 0x2054 <__udivdi3>
    111e:	cf 5f       	subi	r28, 0xFF	; 255
    1120:	de 4f       	sbci	r29, 0xFE	; 254
    1122:	28 83       	st	Y, r18
    1124:	c1 50       	subi	r28, 0x01	; 1
    1126:	d1 40       	sbci	r29, 0x01	; 1
    1128:	23 2e       	mov	r2, r19
    112a:	34 2e       	mov	r3, r20
    112c:	45 2e       	mov	r4, r21
    112e:	56 2e       	mov	r5, r22
    1130:	67 2e       	mov	r6, r23
    1132:	78 2e       	mov	r7, r24
    1134:	89 2e       	mov	r8, r25

		}
		
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
    1136:	e1 e0       	ldi	r30, 0x01	; 1
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	ec 0f       	add	r30, r28
    113c:	fd 1f       	adc	r31, r29
    113e:	e9 0d       	add	r30, r9
    1140:	f1 1d       	adc	r31, r1
    1142:	ce 5f       	subi	r28, 0xFE	; 254
    1144:	de 4f       	sbci	r29, 0xFE	; 254
    1146:	a8 81       	ld	r26, Y
    1148:	c2 50       	subi	r28, 0x02	; 2
    114a:	d1 40       	sbci	r29, 0x01	; 1
    114c:	a0 5d       	subi	r26, 0xD0	; 208
    114e:	a0 83       	st	Z, r26
		
		Count++;
    1150:	93 94       	inc	r9

	} while (Value != 0);
    1152:	a0 e0       	ldi	r26, 0x00	; 0
    1154:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__cmpdi2_s8>
    1158:	09 f0       	breq	.+2      	; 0x115c <SendDecimalValue+0x114>
    115a:	9e cf       	rjmp	.-196    	; 0x1098 <SendDecimalValue+0x50>

	while (Count != 0)
    115c:	99 20       	and	r9, r9
    115e:	91 f0       	breq	.+36     	; 0x1184 <SendDecimalValue+0x13c>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
    1160:	69 2d       	mov	r22, r9
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	61 50       	subi	r22, 0x01	; 1
    1166:	71 09       	sbc	r23, r1
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	8c 0f       	add	r24, r28
    116e:	9d 1f       	adc	r25, r29
    1170:	68 0f       	add	r22, r24
    1172:	79 1f       	adc	r23, r25
    1174:	21 e0       	ldi	r18, 0x01	; 1
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	40 e0       	ldi	r20, 0x00	; 0
    117a:	50 e0       	ldi	r21, 0x00	; 0
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	5b d6       	rcall	.+3254   	; 0x1e36 <UARTTransmitSync>
		
		Count--;
    1180:	9a 94       	dec	r9
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
    1182:	71 f7       	brne	.-36     	; 0x1160 <SendDecimalValue+0x118>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}	
}
    1184:	ce 5f       	subi	r28, 0xFE	; 254
    1186:	de 4f       	sbci	r29, 0xFE	; 254
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16
    119a:	ff 90       	pop	r15
    119c:	ef 90       	pop	r14
    119e:	df 90       	pop	r13
    11a0:	cf 90       	pop	r12
    11a2:	bf 90       	pop	r11
    11a4:	af 90       	pop	r10
    11a6:	9f 90       	pop	r9
    11a8:	8f 90       	pop	r8
    11aa:	7f 90       	pop	r7
    11ac:	6f 90       	pop	r6
    11ae:	5f 90       	pop	r5
    11b0:	4f 90       	pop	r4
    11b2:	3f 90       	pop	r3
    11b4:	2f 90       	pop	r2
    11b6:	08 95       	ret

000011b8 <SendDoubleValue>:

void
SendDoubleValue(double Value)
{
    11b8:	6f 92       	push	r6
    11ba:	7f 92       	push	r7
    11bc:	8f 92       	push	r8
    11be:	9f 92       	push	r9
    11c0:	af 92       	push	r10
    11c2:	bf 92       	push	r11
    11c4:	cf 92       	push	r12
    11c6:	df 92       	push	r13
    11c8:	ef 92       	push	r14
    11ca:	ff 92       	push	r15
    11cc:	0f 93       	push	r16
    11ce:	1f 93       	push	r17
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <SendDoubleValue+0x1e>
    11d6:	1f 92       	push	r1
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	6b 01       	movw	r12, r22
    11de:	7c 01       	movw	r14, r24
	
	long long IntPart;
	
	unsigned char FracPart;
	
	unsigned char Dot = '.';
    11e0:	8e e2       	ldi	r24, 0x2E	; 46
    11e2:	8a 83       	std	Y+2, r24	; 0x02
	
	unsigned char Minus = '-';
    11e4:	8d e2       	ldi	r24, 0x2D	; 45
    11e6:	8b 83       	std	Y+3, r24	; 0x03
	
	if (Value < 0)
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	a9 01       	movw	r20, r18
    11ee:	c7 01       	movw	r24, r14
    11f0:	b6 01       	movw	r22, r12
    11f2:	12 d3       	rcall	.+1572   	; 0x1818 <__cmpsf2>
    11f4:	88 23       	and	r24, r24
    11f6:	6c f4       	brge	.+26     	; 0x1212 <SendDoubleValue+0x5a>
	{
		
		UARTTransmitSync(UART_ZERO, (PVOID) &Minus, 1);
    11f8:	21 e0       	ldi	r18, 0x01	; 1
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	be 01       	movw	r22, r28
    1202:	6d 5f       	subi	r22, 0xFD	; 253
    1204:	7f 4f       	sbci	r23, 0xFF	; 255
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	16 d6       	rcall	.+3116   	; 0x1e36 <UARTTransmitSync>
		
		Value = Value * -1;
    120a:	f7 fa       	bst	r15, 7
    120c:	f0 94       	com	r15
    120e:	f7 f8       	bld	r15, 7
    1210:	f0 94       	com	r15
	}
	
	IntPart = (long long) Value;
    1212:	c7 01       	movw	r24, r14
    1214:	b6 01       	movw	r22, r12
    1216:	6c d3       	rcall	.+1752   	; 0x18f0 <__fixsfdi>
    1218:	62 2e       	mov	r6, r18
    121a:	73 2e       	mov	r7, r19
    121c:	84 2e       	mov	r8, r20
    121e:	95 2e       	mov	r9, r21
    1220:	a6 2e       	mov	r10, r22
    1222:	b7 2e       	mov	r11, r23
    1224:	08 2f       	mov	r16, r24
    1226:	19 2f       	mov	r17, r25
		
	Value = Value - IntPart;
    1228:	c9 d3       	rcall	.+1938   	; 0x19bc <__floatdisf>
    122a:	9b 01       	movw	r18, r22
    122c:	ac 01       	movw	r20, r24
    122e:	c7 01       	movw	r24, r14
    1230:	b6 01       	movw	r22, r12
    1232:	8d d2       	rcall	.+1306   	; 0x174e <__subsf3>
    1234:	6b 01       	movw	r12, r22
    1236:	7c 01       	movw	r14, r24
	
	SendDecimalValue(IntPart);
    1238:	26 2d       	mov	r18, r6
    123a:	37 2d       	mov	r19, r7
    123c:	48 2d       	mov	r20, r8
    123e:	59 2d       	mov	r21, r9
    1240:	6a 2d       	mov	r22, r10
    1242:	7b 2d       	mov	r23, r11
    1244:	80 2f       	mov	r24, r16
    1246:	91 2f       	mov	r25, r17
    1248:	ff de       	rcall	.-514    	; 0x1048 <SendDecimalValue>
	
	UARTTransmitSync(UART_ZERO, (PVOID) &Dot, 1);
    124a:	21 e0       	ldi	r18, 0x01	; 1
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	be 01       	movw	r22, r28
    1254:	6e 5f       	subi	r22, 0xFE	; 254
    1256:	7f 4f       	sbci	r23, 0xFF	; 255
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	ed d5       	rcall	.+3034   	; 0x1e36 <UARTTransmitSync>
	
	while (Value != 0)
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	a9 01       	movw	r20, r18
    1262:	c7 01       	movw	r24, r14
    1264:	b6 01       	movw	r22, r12
    1266:	d8 d2       	rcall	.+1456   	; 0x1818 <__cmpsf2>
    1268:	88 23       	and	r24, r24
    126a:	49 f1       	breq	.+82     	; 0x12be <SendDoubleValue+0x106>
	{
		FracPart = (Value * 10);
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e2       	ldi	r20, 0x20	; 32
    1272:	51 e4       	ldi	r21, 0x41	; 65
    1274:	c7 01       	movw	r24, r14
    1276:	b6 01       	movw	r22, r12
    1278:	a5 d4       	rcall	.+2378   	; 0x1bc4 <__mulsf3>
    127a:	6b 01       	movw	r12, r22
    127c:	7c 01       	movw	r14, r24
    127e:	72 d3       	rcall	.+1764   	; 0x1964 <__fixunssfsi>
    1280:	16 2f       	mov	r17, r22
		
		Value = (Value * 10) - FracPart;
    1282:	70 e0       	ldi	r23, 0x00	; 0
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	9f d3       	rcall	.+1854   	; 0x19c8 <__floatsisf>
    128a:	9b 01       	movw	r18, r22
    128c:	ac 01       	movw	r20, r24
    128e:	c7 01       	movw	r24, r14
    1290:	b6 01       	movw	r22, r12
    1292:	5d d2       	rcall	.+1210   	; 0x174e <__subsf3>
    1294:	6b 01       	movw	r12, r22
    1296:	7c 01       	movw	r14, r24
		
		FracPart = FracPart + ASCII_DECIMAL_CONVERSION;
    1298:	10 5d       	subi	r17, 0xD0	; 208
    129a:	19 83       	std	Y+1, r17	; 0x01
		
		UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
    129c:	21 e0       	ldi	r18, 0x01	; 1
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	40 e0       	ldi	r20, 0x00	; 0
    12a2:	50 e0       	ldi	r21, 0x00	; 0
    12a4:	be 01       	movw	r22, r28
    12a6:	6f 5f       	subi	r22, 0xFF	; 255
    12a8:	7f 4f       	sbci	r23, 0xFF	; 255
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	c4 d5       	rcall	.+2952   	; 0x1e36 <UARTTransmitSync>
	
	SendDecimalValue(IntPart);
	
	UARTTransmitSync(UART_ZERO, (PVOID) &Dot, 1);
	
	while (Value != 0)
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	a9 01       	movw	r20, r18
    12b4:	c7 01       	movw	r24, r14
    12b6:	b6 01       	movw	r22, r12
    12b8:	af d2       	rcall	.+1374   	; 0x1818 <__cmpsf2>
    12ba:	81 11       	cpse	r24, r1
    12bc:	d7 cf       	rjmp	.-82     	; 0x126c <SendDoubleValue+0xb4>
	
	//
	// Print 0
	//
	
	FracPart = ASCII_DECIMAL_CONVERSION;
    12be:	80 e3       	ldi	r24, 0x30	; 48
    12c0:	89 83       	std	Y+1, r24	; 0x01
	
	UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
    12c2:	21 e0       	ldi	r18, 0x01	; 1
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	40 e0       	ldi	r20, 0x00	; 0
    12c8:	50 e0       	ldi	r21, 0x00	; 0
    12ca:	be 01       	movw	r22, r28
    12cc:	6f 5f       	subi	r22, 0xFF	; 255
    12ce:	7f 4f       	sbci	r23, 0xFF	; 255
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	b1 d5       	rcall	.+2914   	; 0x1e36 <UARTTransmitSync>
}
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	1f 91       	pop	r17
    12e0:	0f 91       	pop	r16
    12e2:	ff 90       	pop	r15
    12e4:	ef 90       	pop	r14
    12e6:	df 90       	pop	r13
    12e8:	cf 90       	pop	r12
    12ea:	bf 90       	pop	r11
    12ec:	af 90       	pop	r10
    12ee:	9f 90       	pop	r9
    12f0:	8f 90       	pop	r8
    12f2:	7f 90       	pop	r7
    12f4:	6f 90       	pop	r6
    12f6:	08 95       	ret

000012f8 <SendSignedDecimalValue>:

void
SendSignedDecimalValue(long long Value)
{
    12f8:	2f 92       	push	r2
    12fa:	3f 92       	push	r3
    12fc:	4f 92       	push	r4
    12fe:	5f 92       	push	r5
    1300:	6f 92       	push	r6
    1302:	7f 92       	push	r7
    1304:	8f 92       	push	r8
    1306:	9f 92       	push	r9
    1308:	af 92       	push	r10
    130a:	bf 92       	push	r11
    130c:	cf 92       	push	r12
    130e:	df 92       	push	r13
    1310:	ef 92       	push	r14
    1312:	ff 92       	push	r15
    1314:	0f 93       	push	r16
    1316:	1f 93       	push	r17
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	c3 50       	subi	r28, 0x03	; 3
    1322:	d1 40       	sbci	r29, 0x01	; 1
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	cd bf       	out	0x3d, r28	; 61
    132e:	ce 5f       	subi	r28, 0xFE	; 254
    1330:	de 4f       	sbci	r29, 0xFE	; 254
    1332:	28 83       	st	Y, r18
    1334:	c2 50       	subi	r28, 0x02	; 2
    1336:	d1 40       	sbci	r29, 0x01	; 1
    1338:	83 2e       	mov	r8, r19
    133a:	74 2e       	mov	r7, r20
    133c:	65 2e       	mov	r6, r21
    133e:	56 2e       	mov	r5, r22
    1340:	47 2e       	mov	r4, r23
    1342:	38 2e       	mov	r3, r24
    1344:	29 2e       	mov	r2, r25
	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
	
	unsigned char Minus = '-';
    1346:	8d e2       	ldi	r24, 0x2D	; 45
    1348:	cf 5f       	subi	r28, 0xFF	; 255
    134a:	de 4f       	sbci	r29, 0xFE	; 254
    134c:	88 83       	st	Y, r24
    134e:	c1 50       	subi	r28, 0x01	; 1
    1350:	d1 40       	sbci	r29, 0x01	; 1

	//
	// If the value is negative, print - sign and make the value positive.
	//

	if (Value < 0)
    1352:	83 2d       	mov	r24, r3
    1354:	a0 e0       	ldi	r26, 0x00	; 0
    1356:	3f d7       	rcall	.+3710   	; 0x21d6 <__cmpdi2_s8>
    1358:	14 f5       	brge	.+68     	; 0x139e <SendSignedDecimalValue+0xa6>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &Minus, 1);
    135a:	21 e0       	ldi	r18, 0x01	; 1
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	40 e0       	ldi	r20, 0x00	; 0
    1360:	50 e0       	ldi	r21, 0x00	; 0
    1362:	be 01       	movw	r22, r28
    1364:	6f 5f       	subi	r22, 0xFF	; 255
    1366:	7e 4f       	sbci	r23, 0xFE	; 254
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	65 d5       	rcall	.+2762   	; 0x1e36 <UARTTransmitSync>

		Value *= -1;
    136c:	ce 5f       	subi	r28, 0xFE	; 254
    136e:	de 4f       	sbci	r29, 0xFE	; 254
    1370:	28 81       	ld	r18, Y
    1372:	c2 50       	subi	r28, 0x02	; 2
    1374:	d1 40       	sbci	r29, 0x01	; 1
    1376:	38 2d       	mov	r19, r8
    1378:	47 2d       	mov	r20, r7
    137a:	56 2d       	mov	r21, r6
    137c:	65 2d       	mov	r22, r5
    137e:	74 2d       	mov	r23, r4
    1380:	83 2d       	mov	r24, r3
    1382:	92 2d       	mov	r25, r2
    1384:	c3 d6       	rcall	.+3462   	; 0x210c <__negdi2>
    1386:	ce 5f       	subi	r28, 0xFE	; 254
    1388:	de 4f       	sbci	r29, 0xFE	; 254
    138a:	28 83       	st	Y, r18
    138c:	c2 50       	subi	r28, 0x02	; 2
    138e:	d1 40       	sbci	r29, 0x01	; 1
    1390:	83 2e       	mov	r8, r19
    1392:	74 2e       	mov	r7, r20
    1394:	65 2e       	mov	r6, r21
    1396:	56 2e       	mov	r5, r22
    1398:	47 2e       	mov	r4, r23
    139a:	38 2e       	mov	r3, r24
    139c:	29 2e       	mov	r2, r25
	UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
}

void
SendSignedDecimalValue(long long Value)
{
    139e:	91 2c       	mov	r9, r1
	}

	do
	{

		if (Value < 10)
    13a0:	ce 5f       	subi	r28, 0xFE	; 254
    13a2:	de 4f       	sbci	r29, 0xFE	; 254
    13a4:	28 81       	ld	r18, Y
    13a6:	c2 50       	subi	r28, 0x02	; 2
    13a8:	d1 40       	sbci	r29, 0x01	; 1
    13aa:	38 2d       	mov	r19, r8
    13ac:	47 2d       	mov	r20, r7
    13ae:	56 2d       	mov	r21, r6
    13b0:	65 2d       	mov	r22, r5
    13b2:	74 2d       	mov	r23, r4
    13b4:	83 2d       	mov	r24, r3
    13b6:	92 2d       	mov	r25, r2
    13b8:	a9 e0       	ldi	r26, 0x09	; 9
    13ba:	0d d7       	rcall	.+3610   	; 0x21d6 <__cmpdi2_s8>
    13bc:	09 f0       	breq	.+2      	; 0x13c0 <SendSignedDecimalValue+0xc8>
    13be:	44 f4       	brge	.+16     	; 0x13d0 <SendSignedDecimalValue+0xd8>

			Value = Value / 10;

		}
	
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
    13c0:	fe 01       	movw	r30, r28
    13c2:	e9 0d       	add	r30, r9
    13c4:	f1 1d       	adc	r31, r1
    13c6:	82 2f       	mov	r24, r18
    13c8:	80 5d       	subi	r24, 0xD0	; 208
    13ca:	81 83       	std	Z+1, r24	; 0x01
		
		Count++;
    13cc:	93 94       	inc	r9
    13ce:	48 c0       	rjmp	.+144    	; 0x1460 <SendSignedDecimalValue+0x168>

			Value = 0;
		}
		else
		{
			TransmitChar[Count] = Value % 10;
    13d0:	0f 2e       	mov	r0, r31
    13d2:	fa e0       	ldi	r31, 0x0A	; 10
    13d4:	af 2e       	mov	r10, r31
    13d6:	f0 2d       	mov	r31, r0
    13d8:	b1 2c       	mov	r11, r1
    13da:	c1 2c       	mov	r12, r1
    13dc:	d1 2c       	mov	r13, r1
    13de:	e1 2c       	mov	r14, r1
    13e0:	f1 2c       	mov	r15, r1
    13e2:	00 e0       	ldi	r16, 0x00	; 0
    13e4:	10 e0       	ldi	r17, 0x00	; 0
    13e6:	ce 5f       	subi	r28, 0xFE	; 254
    13e8:	de 4f       	sbci	r29, 0xFE	; 254
    13ea:	28 81       	ld	r18, Y
    13ec:	c2 50       	subi	r28, 0x02	; 2
    13ee:	d1 40       	sbci	r29, 0x01	; 1
    13f0:	38 2d       	mov	r19, r8
    13f2:	47 2d       	mov	r20, r7
    13f4:	56 2d       	mov	r21, r6
    13f6:	65 2d       	mov	r22, r5
    13f8:	74 2d       	mov	r23, r4
    13fa:	83 2d       	mov	r24, r3
    13fc:	92 2d       	mov	r25, r2
    13fe:	fd d5       	rcall	.+3066   	; 0x1ffa <__moddi3>
    1400:	cd 5f       	subi	r28, 0xFD	; 253
    1402:	de 4f       	sbci	r29, 0xFE	; 254
    1404:	28 83       	st	Y, r18
    1406:	c3 50       	subi	r28, 0x03	; 3
    1408:	d1 40       	sbci	r29, 0x01	; 1

			Value = Value / 10;
    140a:	ce 5f       	subi	r28, 0xFE	; 254
    140c:	de 4f       	sbci	r29, 0xFE	; 254
    140e:	28 81       	ld	r18, Y
    1410:	c2 50       	subi	r28, 0x02	; 2
    1412:	d1 40       	sbci	r29, 0x01	; 1
    1414:	38 2d       	mov	r19, r8
    1416:	47 2d       	mov	r20, r7
    1418:	56 2d       	mov	r21, r6
    141a:	65 2d       	mov	r22, r5
    141c:	74 2d       	mov	r23, r4
    141e:	83 2d       	mov	r24, r3
    1420:	92 2d       	mov	r25, r2
    1422:	ed d5       	rcall	.+3034   	; 0x1ffe <__divdi3>
    1424:	ce 5f       	subi	r28, 0xFE	; 254
    1426:	de 4f       	sbci	r29, 0xFE	; 254
    1428:	28 83       	st	Y, r18
    142a:	c2 50       	subi	r28, 0x02	; 2
    142c:	d1 40       	sbci	r29, 0x01	; 1
    142e:	83 2e       	mov	r8, r19
    1430:	74 2e       	mov	r7, r20
    1432:	65 2e       	mov	r6, r21
    1434:	56 2e       	mov	r5, r22
    1436:	47 2e       	mov	r4, r23
    1438:	38 2e       	mov	r3, r24
    143a:	29 2e       	mov	r2, r25

		}
	
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
    143c:	e1 e0       	ldi	r30, 0x01	; 1
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	ec 0f       	add	r30, r28
    1442:	fd 1f       	adc	r31, r29
    1444:	e9 0d       	add	r30, r9
    1446:	f1 1d       	adc	r31, r1
    1448:	cd 5f       	subi	r28, 0xFD	; 253
    144a:	de 4f       	sbci	r29, 0xFE	; 254
    144c:	a8 81       	ld	r26, Y
    144e:	c3 50       	subi	r28, 0x03	; 3
    1450:	d1 40       	sbci	r29, 0x01	; 1
    1452:	a0 5d       	subi	r26, 0xD0	; 208
    1454:	a0 83       	st	Z, r26
		
		Count++;
    1456:	93 94       	inc	r9

	} while (Value != 0);
    1458:	a0 e0       	ldi	r26, 0x00	; 0
    145a:	bd d6       	rcall	.+3450   	; 0x21d6 <__cmpdi2_s8>
    145c:	09 f0       	breq	.+2      	; 0x1460 <SendSignedDecimalValue+0x168>
    145e:	a0 cf       	rjmp	.-192    	; 0x13a0 <SendSignedDecimalValue+0xa8>

	while (Count != 0)
    1460:	99 20       	and	r9, r9
    1462:	91 f0       	breq	.+36     	; 0x1488 <SendSignedDecimalValue+0x190>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
    1464:	69 2d       	mov	r22, r9
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	61 50       	subi	r22, 0x01	; 1
    146a:	71 09       	sbc	r23, r1
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	8c 0f       	add	r24, r28
    1472:	9d 1f       	adc	r25, r29
    1474:	68 0f       	add	r22, r24
    1476:	79 1f       	adc	r23, r25
    1478:	21 e0       	ldi	r18, 0x01	; 1
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	40 e0       	ldi	r20, 0x00	; 0
    147e:	50 e0       	ldi	r21, 0x00	; 0
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	d9 d4       	rcall	.+2482   	; 0x1e36 <UARTTransmitSync>
		
		Count--;
    1484:	9a 94       	dec	r9
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
    1486:	71 f7       	brne	.-36     	; 0x1464 <SendSignedDecimalValue+0x16c>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}
}
    1488:	cd 5f       	subi	r28, 0xFD	; 253
    148a:	de 4f       	sbci	r29, 0xFE	; 254
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	1f 91       	pop	r17
    149c:	0f 91       	pop	r16
    149e:	ff 90       	pop	r15
    14a0:	ef 90       	pop	r14
    14a2:	df 90       	pop	r13
    14a4:	cf 90       	pop	r12
    14a6:	bf 90       	pop	r11
    14a8:	af 90       	pop	r10
    14aa:	9f 90       	pop	r9
    14ac:	8f 90       	pop	r8
    14ae:	7f 90       	pop	r7
    14b0:	6f 90       	pop	r6
    14b2:	5f 90       	pop	r5
    14b4:	4f 90       	pop	r4
    14b6:	3f 90       	pop	r3
    14b8:	2f 90       	pop	r2
    14ba:	08 95       	ret

000014bc <SendTrace>:
	}
}

void
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{
    14bc:	3f 92       	push	r3
    14be:	4f 92       	push	r4
    14c0:	5f 92       	push	r5
    14c2:	6f 92       	push	r6
    14c4:	7f 92       	push	r7
    14c6:	8f 92       	push	r8
    14c8:	9f 92       	push	r9
    14ca:	af 92       	push	r10
    14cc:	bf 92       	push	r11
    14ce:	cf 92       	push	r12
    14d0:	df 92       	push	r13
    14d2:	ef 92       	push	r14
    14d4:	ff 92       	push	r15
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	1f 92       	push	r1
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	0e 89       	ldd	r16, Y+22	; 0x16
    14e6:	1f 89       	ldd	r17, Y+23	; 0x17
	
	char Character;

	va_list ArgList;

	if (!gTraceInitialized || !(TraceLevel & gTraceLevel))
    14e8:	80 91 35 07 	lds	r24, 0x0735
    14ec:	88 23       	and	r24, r24
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <SendTrace+0x36>
    14f0:	1b c1       	rjmp	.+566    	; 0x1728 <SendTrace+0x26c>
    14f2:	80 91 3a 07 	lds	r24, 0x073A
    14f6:	9d 89       	ldd	r25, Y+21	; 0x15
    14f8:	89 23       	and	r24, r25
    14fa:	09 f4       	brne	.+2      	; 0x14fe <SendTrace+0x42>
    14fc:	15 c1       	rjmp	.+554    	; 0x1728 <SendTrace+0x26c>
	{
		return;
	}

	va_start(ArgList, String);
    14fe:	7e 01       	movw	r14, r28
    1500:	28 e1       	ldi	r18, 0x18	; 24
    1502:	e2 0e       	add	r14, r18
    1504:	f1 1c       	adc	r15, r1

	while (*String != '\0')
    1506:	f8 01       	movw	r30, r16
    1508:	20 81       	ld	r18, Z
    150a:	22 23       	and	r18, r18
    150c:	09 f4       	brne	.+2      	; 0x1510 <SendTrace+0x54>
    150e:	0c c1       	rjmp	.+536    	; 0x1728 <SendTrace+0x26c>
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{

	bool IsLong = FALSE;
	
	bool IsLongLong = FALSE;
    1510:	41 2c       	mov	r4, r1

void
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{

	bool IsLong = FALSE;
    1512:	d1 2c       	mov	r13, r1
						IsLong = FALSE;
					}
					
					SendDoubleValue(va_arg(ArgList, double));
					
					break;
    1514:	51 2c       	mov	r5, r1
						
						IsLong = FALSE;
					}
					else
					{
						IsLong = TRUE;
    1516:	33 24       	eor	r3, r3
    1518:	33 94       	inc	r3
	va_start(ArgList, String);

	while (*String != '\0')
	{

		if (*String == '%' || IsLong || IsLongLong)
    151a:	25 32       	cpi	r18, 0x25	; 37
    151c:	29 f0       	breq	.+10     	; 0x1528 <SendTrace+0x6c>
    151e:	d1 10       	cpse	r13, r1
    1520:	05 c0       	rjmp	.+10     	; 0x152c <SendTrace+0x70>
    1522:	41 10       	cpse	r4, r1
    1524:	03 c0       	rjmp	.+6      	; 0x152c <SendTrace+0x70>
    1526:	ef c0       	rjmp	.+478    	; 0x1706 <SendTrace+0x24a>
		{

			if (*String == '%')
			{
				String++;
    1528:	0f 5f       	subi	r16, 0xFF	; 255
    152a:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			switch (*String)
    152c:	f8 01       	movw	r30, r16
    152e:	80 81       	ld	r24, Z
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	fc 01       	movw	r30, r24
    1534:	e3 56       	subi	r30, 0x63	; 99
    1536:	f1 09       	sbc	r31, r1
    1538:	e6 31       	cpi	r30, 0x16	; 22
    153a:	f1 05       	cpc	r31, r1
    153c:	08 f0       	brcs	.+2      	; 0x1540 <SendTrace+0x84>
    153e:	ec c0       	rjmp	.+472    	; 0x1718 <SendTrace+0x25c>
    1540:	ea 5b       	subi	r30, 0xBA	; 186
    1542:	ff 4f       	sbci	r31, 0xFF	; 255
    1544:	54 c5       	rjmp	.+2728   	; 0x1fee <__tablejump2__>
			{
				case 'c':
				{

					Character = va_arg(ArgList, int);
    1546:	57 01       	movw	r10, r14
    1548:	f2 e0       	ldi	r31, 0x02	; 2
    154a:	af 0e       	add	r10, r31
    154c:	b1 1c       	adc	r11, r1
    154e:	f7 01       	movw	r30, r14
    1550:	80 81       	ld	r24, Z
    1552:	89 83       	std	Y+1, r24	; 0x01
					
					UARTTransmitSync(UART_ZERO, (PVOID) &Character, 1);
    1554:	21 e0       	ldi	r18, 0x01	; 1
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	40 e0       	ldi	r20, 0x00	; 0
    155a:	50 e0       	ldi	r21, 0x00	; 0
    155c:	be 01       	movw	r22, r28
    155e:	6f 5f       	subi	r22, 0xFF	; 255
    1560:	7f 4f       	sbci	r23, 0xFF	; 255
    1562:	85 2d       	mov	r24, r5
    1564:	68 d4       	rcall	.+2256   	; 0x1e36 <UARTTransmitSync>
			switch (*String)
			{
				case 'c':
				{

					Character = va_arg(ArgList, int);
    1566:	75 01       	movw	r14, r10
					
					UARTTransmitSync(UART_ZERO, (PVOID) &Character, 1);

					break;
    1568:	d7 c0       	rjmp	.+430    	; 0x1718 <SendTrace+0x25c>

				}
				case 'd':
				{

					if (IsLong)
    156a:	dd 20       	and	r13, r13
    156c:	d9 f0       	breq	.+54     	; 0x15a4 <SendTrace+0xe8>
					{

						SendSignedDecimalValue(va_arg(ArgList, long));
    156e:	67 01       	movw	r12, r14
    1570:	f4 e0       	ldi	r31, 0x04	; 4
    1572:	cf 0e       	add	r12, r31
    1574:	d1 1c       	adc	r13, r1
    1576:	f7 01       	movw	r30, r14
    1578:	80 81       	ld	r24, Z
    157a:	91 81       	ldd	r25, Z+1	; 0x01
    157c:	a2 81       	ldd	r26, Z+2	; 0x02
    157e:	b3 81       	ldd	r27, Z+3	; 0x03
    1580:	4c 01       	movw	r8, r24
    1582:	5d 01       	movw	r10, r26
    1584:	bb 0c       	add	r11, r11
    1586:	88 08       	sbc	r8, r8
    1588:	98 2c       	mov	r9, r8
    158a:	54 01       	movw	r10, r8
    158c:	28 2f       	mov	r18, r24
    158e:	39 2f       	mov	r19, r25
    1590:	4a 2f       	mov	r20, r26
    1592:	5b 2f       	mov	r21, r27
    1594:	68 2d       	mov	r22, r8
    1596:	78 2d       	mov	r23, r8
    1598:	88 2d       	mov	r24, r8
    159a:	98 2d       	mov	r25, r8
    159c:	ad de       	rcall	.-678    	; 0x12f8 <SendSignedDecimalValue>
    159e:	76 01       	movw	r14, r12

						IsLong = FALSE;
    15a0:	d5 2c       	mov	r13, r5
    15a2:	ba c0       	rjmp	.+372    	; 0x1718 <SendTrace+0x25c>

					}
					else if (IsLongLong)
    15a4:	44 20       	and	r4, r4
    15a6:	89 f0       	breq	.+34     	; 0x15ca <SendTrace+0x10e>
					{
						SendSignedDecimalValue(va_arg(ArgList, long long));
    15a8:	57 01       	movw	r10, r14
    15aa:	f8 e0       	ldi	r31, 0x08	; 8
    15ac:	af 0e       	add	r10, r31
    15ae:	b1 1c       	adc	r11, r1
    15b0:	f7 01       	movw	r30, r14
    15b2:	20 81       	ld	r18, Z
    15b4:	31 81       	ldd	r19, Z+1	; 0x01
    15b6:	42 81       	ldd	r20, Z+2	; 0x02
    15b8:	53 81       	ldd	r21, Z+3	; 0x03
    15ba:	64 81       	ldd	r22, Z+4	; 0x04
    15bc:	75 81       	ldd	r23, Z+5	; 0x05
    15be:	86 81       	ldd	r24, Z+6	; 0x06
    15c0:	97 81       	ldd	r25, Z+7	; 0x07
    15c2:	9a de       	rcall	.-716    	; 0x12f8 <SendSignedDecimalValue>
    15c4:	75 01       	movw	r14, r10

						IsLongLong = FALSE;
    15c6:	45 2c       	mov	r4, r5
    15c8:	a7 c0       	rjmp	.+334    	; 0x1718 <SendTrace+0x25c>
					}
					else
					{

						SendSignedDecimalValue(va_arg(ArgList, int));
    15ca:	57 01       	movw	r10, r14
    15cc:	f2 e0       	ldi	r31, 0x02	; 2
    15ce:	af 0e       	add	r10, r31
    15d0:	b1 1c       	adc	r11, r1
    15d2:	f7 01       	movw	r30, r14
    15d4:	31 81       	ldd	r19, Z+1	; 0x01
    15d6:	20 81       	ld	r18, Z
    15d8:	93 2f       	mov	r25, r19
    15da:	99 0f       	add	r25, r25
    15dc:	99 0b       	sbc	r25, r25
    15de:	49 2f       	mov	r20, r25
    15e0:	59 2f       	mov	r21, r25
    15e2:	69 2f       	mov	r22, r25
    15e4:	79 2f       	mov	r23, r25
    15e6:	89 2f       	mov	r24, r25
    15e8:	87 de       	rcall	.-754    	; 0x12f8 <SendSignedDecimalValue>
    15ea:	75 01       	movw	r14, r10
    15ec:	95 c0       	rjmp	.+298    	; 0x1718 <SendTrace+0x25c>
					break;
				}
				case 'u':
				{

					if(IsLong)
    15ee:	dd 20       	and	r13, r13
    15f0:	b9 f0       	breq	.+46     	; 0x1620 <SendTrace+0x164>
					{

						SendDecimalValue(va_arg(ArgList, unsigned long));
    15f2:	37 01       	movw	r6, r14
    15f4:	f4 e0       	ldi	r31, 0x04	; 4
    15f6:	6f 0e       	add	r6, r31
    15f8:	71 1c       	adc	r7, r1
    15fa:	f7 01       	movw	r30, r14
    15fc:	80 81       	ld	r24, Z
    15fe:	91 81       	ldd	r25, Z+1	; 0x01
    1600:	a2 81       	ldd	r26, Z+2	; 0x02
    1602:	b3 81       	ldd	r27, Z+3	; 0x03
    1604:	4c 01       	movw	r8, r24
    1606:	5d 01       	movw	r10, r26
    1608:	28 2f       	mov	r18, r24
    160a:	39 2d       	mov	r19, r9
    160c:	4a 2d       	mov	r20, r10
    160e:	5b 2d       	mov	r21, r11
    1610:	65 2d       	mov	r22, r5
    1612:	75 2d       	mov	r23, r5
    1614:	85 2d       	mov	r24, r5
    1616:	95 2d       	mov	r25, r5
    1618:	17 dd       	rcall	.-1490   	; 0x1048 <SendDecimalValue>
    161a:	73 01       	movw	r14, r6
						
						IsLong = FALSE;
    161c:	d5 2c       	mov	r13, r5
    161e:	7c c0       	rjmp	.+248    	; 0x1718 <SendTrace+0x25c>
					
					}
					else if(IsLongLong)
    1620:	44 20       	and	r4, r4
    1622:	89 f0       	breq	.+34     	; 0x1646 <SendTrace+0x18a>
					{
						SendDecimalValue(va_arg(ArgList, unsigned long long));
    1624:	57 01       	movw	r10, r14
    1626:	f8 e0       	ldi	r31, 0x08	; 8
    1628:	af 0e       	add	r10, r31
    162a:	b1 1c       	adc	r11, r1
    162c:	f7 01       	movw	r30, r14
    162e:	20 81       	ld	r18, Z
    1630:	31 81       	ldd	r19, Z+1	; 0x01
    1632:	42 81       	ldd	r20, Z+2	; 0x02
    1634:	53 81       	ldd	r21, Z+3	; 0x03
    1636:	64 81       	ldd	r22, Z+4	; 0x04
    1638:	75 81       	ldd	r23, Z+5	; 0x05
    163a:	86 81       	ldd	r24, Z+6	; 0x06
    163c:	97 81       	ldd	r25, Z+7	; 0x07
    163e:	04 dd       	rcall	.-1528   	; 0x1048 <SendDecimalValue>
    1640:	75 01       	movw	r14, r10
						
						IsLongLong = FALSE;
    1642:	45 2c       	mov	r4, r5
    1644:	69 c0       	rjmp	.+210    	; 0x1718 <SendTrace+0x25c>
					}
					else
					{

						SendDecimalValue(va_arg(ArgList, unsigned int));
    1646:	f7 01       	movw	r30, r14
    1648:	40 81       	ld	r20, Z
    164a:	51 81       	ldd	r21, Z+1	; 0x01
    164c:	f2 e0       	ldi	r31, 0x02	; 2
    164e:	ef 0e       	add	r14, r31
    1650:	f1 1c       	adc	r15, r1
    1652:	24 2f       	mov	r18, r20
    1654:	35 2f       	mov	r19, r21
    1656:	45 2d       	mov	r20, r5
    1658:	55 2d       	mov	r21, r5
    165a:	65 2d       	mov	r22, r5
    165c:	75 2d       	mov	r23, r5
    165e:	85 2d       	mov	r24, r5
    1660:	95 2d       	mov	r25, r5
    1662:	f2 dc       	rcall	.-1564   	; 0x1048 <SendDecimalValue>
    1664:	59 c0       	rjmp	.+178    	; 0x1718 <SendTrace+0x25c>
					break;
				}
				case 'x':
				{

					if (IsLong)
    1666:	dd 20       	and	r13, r13
    1668:	a9 f0       	breq	.+42     	; 0x1694 <SendTrace+0x1d8>
					{

						SendHexValue(va_arg(ArgList, unsigned long));
    166a:	f7 01       	movw	r30, r14
    166c:	80 81       	ld	r24, Z
    166e:	91 81       	ldd	r25, Z+1	; 0x01
    1670:	a2 81       	ldd	r26, Z+2	; 0x02
    1672:	b3 81       	ldd	r27, Z+3	; 0x03
    1674:	24 e0       	ldi	r18, 0x04	; 4
    1676:	e2 0e       	add	r14, r18
    1678:	f1 1c       	adc	r15, r1
    167a:	3c 01       	movw	r6, r24
    167c:	4d 01       	movw	r8, r26
    167e:	28 2f       	mov	r18, r24
    1680:	37 2d       	mov	r19, r7
    1682:	48 2d       	mov	r20, r8
    1684:	59 2d       	mov	r21, r9
    1686:	65 2d       	mov	r22, r5
    1688:	75 2d       	mov	r23, r5
    168a:	85 2d       	mov	r24, r5
    168c:	95 2d       	mov	r25, r5
    168e:	39 dc       	rcall	.-1934   	; 0xf02 <SendHexValue>

						IsLong = FALSE;
    1690:	d5 2c       	mov	r13, r5
    1692:	42 c0       	rjmp	.+132    	; 0x1718 <SendTrace+0x25c>

					}
					else if (IsLongLong)
    1694:	44 20       	and	r4, r4
    1696:	79 f0       	breq	.+30     	; 0x16b6 <SendTrace+0x1fa>
					{
						SendHexValue(va_arg(ArgList, unsigned long long));
    1698:	f7 01       	movw	r30, r14
    169a:	20 81       	ld	r18, Z
    169c:	88 e0       	ldi	r24, 0x08	; 8
    169e:	e8 0e       	add	r14, r24
    16a0:	f1 1c       	adc	r15, r1
    16a2:	31 81       	ldd	r19, Z+1	; 0x01
    16a4:	42 81       	ldd	r20, Z+2	; 0x02
    16a6:	53 81       	ldd	r21, Z+3	; 0x03
    16a8:	64 81       	ldd	r22, Z+4	; 0x04
    16aa:	75 81       	ldd	r23, Z+5	; 0x05
    16ac:	86 81       	ldd	r24, Z+6	; 0x06
    16ae:	97 81       	ldd	r25, Z+7	; 0x07
    16b0:	28 dc       	rcall	.-1968   	; 0xf02 <SendHexValue>
						
						IsLongLong = FALSE;
    16b2:	45 2c       	mov	r4, r5
    16b4:	31 c0       	rjmp	.+98     	; 0x1718 <SendTrace+0x25c>
					}
					else
					{

						SendHexValue(va_arg(ArgList, unsigned int));
    16b6:	f7 01       	movw	r30, r14
    16b8:	40 81       	ld	r20, Z
    16ba:	51 81       	ldd	r21, Z+1	; 0x01
    16bc:	e2 e0       	ldi	r30, 0x02	; 2
    16be:	ee 0e       	add	r14, r30
    16c0:	f1 1c       	adc	r15, r1
    16c2:	24 2f       	mov	r18, r20
    16c4:	35 2f       	mov	r19, r21
    16c6:	45 2d       	mov	r20, r5
    16c8:	55 2d       	mov	r21, r5
    16ca:	65 2d       	mov	r22, r5
    16cc:	75 2d       	mov	r23, r5
    16ce:	85 2d       	mov	r24, r5
    16d0:	95 2d       	mov	r25, r5
    16d2:	17 dc       	rcall	.-2002   	; 0xf02 <SendHexValue>
    16d4:	21 c0       	rjmp	.+66     	; 0x1718 <SendTrace+0x25c>
					break;
				}
				case 'l':
				{

					if (IsLong)
    16d6:	dd 20       	and	r13, r13
    16d8:	f1 f0       	breq	.+60     	; 0x1716 <SendTrace+0x25a>
					{
						IsLongLong = TRUE;
    16da:	43 2c       	mov	r4, r3
						
						IsLong = FALSE;
    16dc:	d5 2c       	mov	r13, r5
    16de:	1c c0       	rjmp	.+56     	; 0x1718 <SendTrace+0x25c>
					break;
				}
				case 's':
				{
					
					SendStringValue(va_arg(ArgList, char *)); 
    16e0:	f7 01       	movw	r30, r14
    16e2:	80 81       	ld	r24, Z
    16e4:	91 81       	ldd	r25, Z+1	; 0x01
    16e6:	f2 e0       	ldi	r31, 0x02	; 2
    16e8:	ef 0e       	add	r14, r31
    16ea:	f1 1c       	adc	r15, r1
    16ec:	fc db       	rcall	.-2056   	; 0xee6 <SendStringValue>

					break;
    16ee:	14 c0       	rjmp	.+40     	; 0x1718 <SendTrace+0x25c>
					if(IsLong)
					{
						IsLong = FALSE;
					}
					
					SendDoubleValue(va_arg(ArgList, double));
    16f0:	f7 01       	movw	r30, r14
    16f2:	60 81       	ld	r22, Z
    16f4:	71 81       	ldd	r23, Z+1	; 0x01
    16f6:	82 81       	ldd	r24, Z+2	; 0x02
    16f8:	93 81       	ldd	r25, Z+3	; 0x03
    16fa:	24 e0       	ldi	r18, 0x04	; 4
    16fc:	e2 0e       	add	r14, r18
    16fe:	f1 1c       	adc	r15, r1
    1700:	5b dd       	rcall	.-1354   	; 0x11b8 <SendDoubleValue>
					
					break;
    1702:	d5 2c       	mov	r13, r5
    1704:	09 c0       	rjmp	.+18     	; 0x1718 <SendTrace+0x25c>

		}
		else
		{

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
    1706:	21 e0       	ldi	r18, 0x01	; 1
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	40 e0       	ldi	r20, 0x00	; 0
    170c:	50 e0       	ldi	r21, 0x00	; 0
    170e:	b8 01       	movw	r22, r16
    1710:	85 2d       	mov	r24, r5
    1712:	91 d3       	rcall	.+1826   	; 0x1e36 <UARTTransmitSync>
    1714:	01 c0       	rjmp	.+2      	; 0x1718 <SendTrace+0x25c>
						
						IsLong = FALSE;
					}
					else
					{
						IsLong = TRUE;
    1716:	d3 2c       	mov	r13, r3

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
				
		}

		String++;
    1718:	c8 01       	movw	r24, r16
    171a:	01 96       	adiw	r24, 0x01	; 1
		return;
	}

	va_start(ArgList, String);

	while (*String != '\0')
    171c:	f8 01       	movw	r30, r16
    171e:	21 81       	ldd	r18, Z+1	; 0x01
    1720:	22 23       	and	r18, r18
    1722:	11 f0       	breq	.+4      	; 0x1728 <SendTrace+0x26c>

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
				
		}

		String++;
    1724:	8c 01       	movw	r16, r24
    1726:	f9 ce       	rjmp	.-526    	; 0x151a <SendTrace+0x5e>
		
	}
	
	va_end(ArgList);
	
}
    1728:	0f 90       	pop	r0
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	1f 91       	pop	r17
    1730:	0f 91       	pop	r16
    1732:	ff 90       	pop	r15
    1734:	ef 90       	pop	r14
    1736:	df 90       	pop	r13
    1738:	cf 90       	pop	r12
    173a:	bf 90       	pop	r11
    173c:	af 90       	pop	r10
    173e:	9f 90       	pop	r9
    1740:	8f 90       	pop	r8
    1742:	7f 90       	pop	r7
    1744:	6f 90       	pop	r6
    1746:	5f 90       	pop	r5
    1748:	4f 90       	pop	r4
    174a:	3f 90       	pop	r3
    174c:	08 95       	ret

0000174e <__subsf3>:
    174e:	50 58       	subi	r21, 0x80	; 128

00001750 <__addsf3>:
    1750:	bb 27       	eor	r27, r27
    1752:	aa 27       	eor	r26, r26
    1754:	0e d0       	rcall	.+28     	; 0x1772 <__addsf3x>
    1756:	fc c1       	rjmp	.+1016   	; 0x1b50 <__fp_round>
    1758:	ed d1       	rcall	.+986    	; 0x1b34 <__fp_pscA>
    175a:	30 f0       	brcs	.+12     	; 0x1768 <__addsf3+0x18>
    175c:	f2 d1       	rcall	.+996    	; 0x1b42 <__fp_pscB>
    175e:	20 f0       	brcs	.+8      	; 0x1768 <__addsf3+0x18>
    1760:	31 f4       	brne	.+12     	; 0x176e <__addsf3+0x1e>
    1762:	9f 3f       	cpi	r25, 0xFF	; 255
    1764:	11 f4       	brne	.+4      	; 0x176a <__addsf3+0x1a>
    1766:	1e f4       	brtc	.+6      	; 0x176e <__addsf3+0x1e>
    1768:	d2 c1       	rjmp	.+932    	; 0x1b0e <__fp_nan>
    176a:	0e f4       	brtc	.+2      	; 0x176e <__addsf3+0x1e>
    176c:	e0 95       	com	r30
    176e:	e7 fb       	bst	r30, 7
    1770:	c8 c1       	rjmp	.+912    	; 0x1b02 <__fp_inf>

00001772 <__addsf3x>:
    1772:	e9 2f       	mov	r30, r25
    1774:	fe d1       	rcall	.+1020   	; 0x1b72 <__fp_split3>
    1776:	80 f3       	brcs	.-32     	; 0x1758 <__addsf3+0x8>
    1778:	ba 17       	cp	r27, r26
    177a:	62 07       	cpc	r22, r18
    177c:	73 07       	cpc	r23, r19
    177e:	84 07       	cpc	r24, r20
    1780:	95 07       	cpc	r25, r21
    1782:	18 f0       	brcs	.+6      	; 0x178a <__addsf3x+0x18>
    1784:	71 f4       	brne	.+28     	; 0x17a2 <__addsf3x+0x30>
    1786:	9e f5       	brtc	.+102    	; 0x17ee <__addsf3x+0x7c>
    1788:	16 c2       	rjmp	.+1068   	; 0x1bb6 <__fp_zero>
    178a:	0e f4       	brtc	.+2      	; 0x178e <__addsf3x+0x1c>
    178c:	e0 95       	com	r30
    178e:	0b 2e       	mov	r0, r27
    1790:	ba 2f       	mov	r27, r26
    1792:	a0 2d       	mov	r26, r0
    1794:	0b 01       	movw	r0, r22
    1796:	b9 01       	movw	r22, r18
    1798:	90 01       	movw	r18, r0
    179a:	0c 01       	movw	r0, r24
    179c:	ca 01       	movw	r24, r20
    179e:	a0 01       	movw	r20, r0
    17a0:	11 24       	eor	r1, r1
    17a2:	ff 27       	eor	r31, r31
    17a4:	59 1b       	sub	r21, r25
    17a6:	99 f0       	breq	.+38     	; 0x17ce <__addsf3x+0x5c>
    17a8:	59 3f       	cpi	r21, 0xF9	; 249
    17aa:	50 f4       	brcc	.+20     	; 0x17c0 <__addsf3x+0x4e>
    17ac:	50 3e       	cpi	r21, 0xE0	; 224
    17ae:	68 f1       	brcs	.+90     	; 0x180a <__addsf3x+0x98>
    17b0:	1a 16       	cp	r1, r26
    17b2:	f0 40       	sbci	r31, 0x00	; 0
    17b4:	a2 2f       	mov	r26, r18
    17b6:	23 2f       	mov	r18, r19
    17b8:	34 2f       	mov	r19, r20
    17ba:	44 27       	eor	r20, r20
    17bc:	58 5f       	subi	r21, 0xF8	; 248
    17be:	f3 cf       	rjmp	.-26     	; 0x17a6 <__addsf3x+0x34>
    17c0:	46 95       	lsr	r20
    17c2:	37 95       	ror	r19
    17c4:	27 95       	ror	r18
    17c6:	a7 95       	ror	r26
    17c8:	f0 40       	sbci	r31, 0x00	; 0
    17ca:	53 95       	inc	r21
    17cc:	c9 f7       	brne	.-14     	; 0x17c0 <__addsf3x+0x4e>
    17ce:	7e f4       	brtc	.+30     	; 0x17ee <__addsf3x+0x7c>
    17d0:	1f 16       	cp	r1, r31
    17d2:	ba 0b       	sbc	r27, r26
    17d4:	62 0b       	sbc	r22, r18
    17d6:	73 0b       	sbc	r23, r19
    17d8:	84 0b       	sbc	r24, r20
    17da:	ba f0       	brmi	.+46     	; 0x180a <__addsf3x+0x98>
    17dc:	91 50       	subi	r25, 0x01	; 1
    17de:	a1 f0       	breq	.+40     	; 0x1808 <__addsf3x+0x96>
    17e0:	ff 0f       	add	r31, r31
    17e2:	bb 1f       	adc	r27, r27
    17e4:	66 1f       	adc	r22, r22
    17e6:	77 1f       	adc	r23, r23
    17e8:	88 1f       	adc	r24, r24
    17ea:	c2 f7       	brpl	.-16     	; 0x17dc <__addsf3x+0x6a>
    17ec:	0e c0       	rjmp	.+28     	; 0x180a <__addsf3x+0x98>
    17ee:	ba 0f       	add	r27, r26
    17f0:	62 1f       	adc	r22, r18
    17f2:	73 1f       	adc	r23, r19
    17f4:	84 1f       	adc	r24, r20
    17f6:	48 f4       	brcc	.+18     	; 0x180a <__addsf3x+0x98>
    17f8:	87 95       	ror	r24
    17fa:	77 95       	ror	r23
    17fc:	67 95       	ror	r22
    17fe:	b7 95       	ror	r27
    1800:	f7 95       	ror	r31
    1802:	9e 3f       	cpi	r25, 0xFE	; 254
    1804:	08 f0       	brcs	.+2      	; 0x1808 <__addsf3x+0x96>
    1806:	b3 cf       	rjmp	.-154    	; 0x176e <__addsf3+0x1e>
    1808:	93 95       	inc	r25
    180a:	88 0f       	add	r24, r24
    180c:	08 f0       	brcs	.+2      	; 0x1810 <__addsf3x+0x9e>
    180e:	99 27       	eor	r25, r25
    1810:	ee 0f       	add	r30, r30
    1812:	97 95       	ror	r25
    1814:	87 95       	ror	r24
    1816:	08 95       	ret

00001818 <__cmpsf2>:
    1818:	50 d1       	rcall	.+672    	; 0x1aba <__fp_cmp>
    181a:	08 f4       	brcc	.+2      	; 0x181e <__cmpsf2+0x6>
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	08 95       	ret

00001820 <__divsf3>:
    1820:	0c d0       	rcall	.+24     	; 0x183a <__divsf3x>
    1822:	96 c1       	rjmp	.+812    	; 0x1b50 <__fp_round>
    1824:	8e d1       	rcall	.+796    	; 0x1b42 <__fp_pscB>
    1826:	40 f0       	brcs	.+16     	; 0x1838 <__divsf3+0x18>
    1828:	85 d1       	rcall	.+778    	; 0x1b34 <__fp_pscA>
    182a:	30 f0       	brcs	.+12     	; 0x1838 <__divsf3+0x18>
    182c:	21 f4       	brne	.+8      	; 0x1836 <__divsf3+0x16>
    182e:	5f 3f       	cpi	r21, 0xFF	; 255
    1830:	19 f0       	breq	.+6      	; 0x1838 <__divsf3+0x18>
    1832:	67 c1       	rjmp	.+718    	; 0x1b02 <__fp_inf>
    1834:	51 11       	cpse	r21, r1
    1836:	c0 c1       	rjmp	.+896    	; 0x1bb8 <__fp_szero>
    1838:	6a c1       	rjmp	.+724    	; 0x1b0e <__fp_nan>

0000183a <__divsf3x>:
    183a:	9b d1       	rcall	.+822    	; 0x1b72 <__fp_split3>
    183c:	98 f3       	brcs	.-26     	; 0x1824 <__divsf3+0x4>

0000183e <__divsf3_pse>:
    183e:	99 23       	and	r25, r25
    1840:	c9 f3       	breq	.-14     	; 0x1834 <__divsf3+0x14>
    1842:	55 23       	and	r21, r21
    1844:	b1 f3       	breq	.-20     	; 0x1832 <__divsf3+0x12>
    1846:	95 1b       	sub	r25, r21
    1848:	55 0b       	sbc	r21, r21
    184a:	bb 27       	eor	r27, r27
    184c:	aa 27       	eor	r26, r26
    184e:	62 17       	cp	r22, r18
    1850:	73 07       	cpc	r23, r19
    1852:	84 07       	cpc	r24, r20
    1854:	38 f0       	brcs	.+14     	; 0x1864 <__divsf3_pse+0x26>
    1856:	9f 5f       	subi	r25, 0xFF	; 255
    1858:	5f 4f       	sbci	r21, 0xFF	; 255
    185a:	22 0f       	add	r18, r18
    185c:	33 1f       	adc	r19, r19
    185e:	44 1f       	adc	r20, r20
    1860:	aa 1f       	adc	r26, r26
    1862:	a9 f3       	breq	.-22     	; 0x184e <__divsf3_pse+0x10>
    1864:	33 d0       	rcall	.+102    	; 0x18cc <__divsf3_pse+0x8e>
    1866:	0e 2e       	mov	r0, r30
    1868:	3a f0       	brmi	.+14     	; 0x1878 <__divsf3_pse+0x3a>
    186a:	e0 e8       	ldi	r30, 0x80	; 128
    186c:	30 d0       	rcall	.+96     	; 0x18ce <__divsf3_pse+0x90>
    186e:	91 50       	subi	r25, 0x01	; 1
    1870:	50 40       	sbci	r21, 0x00	; 0
    1872:	e6 95       	lsr	r30
    1874:	00 1c       	adc	r0, r0
    1876:	ca f7       	brpl	.-14     	; 0x186a <__divsf3_pse+0x2c>
    1878:	29 d0       	rcall	.+82     	; 0x18cc <__divsf3_pse+0x8e>
    187a:	fe 2f       	mov	r31, r30
    187c:	27 d0       	rcall	.+78     	; 0x18cc <__divsf3_pse+0x8e>
    187e:	66 0f       	add	r22, r22
    1880:	77 1f       	adc	r23, r23
    1882:	88 1f       	adc	r24, r24
    1884:	bb 1f       	adc	r27, r27
    1886:	26 17       	cp	r18, r22
    1888:	37 07       	cpc	r19, r23
    188a:	48 07       	cpc	r20, r24
    188c:	ab 07       	cpc	r26, r27
    188e:	b0 e8       	ldi	r27, 0x80	; 128
    1890:	09 f0       	breq	.+2      	; 0x1894 <__divsf3_pse+0x56>
    1892:	bb 0b       	sbc	r27, r27
    1894:	80 2d       	mov	r24, r0
    1896:	bf 01       	movw	r22, r30
    1898:	ff 27       	eor	r31, r31
    189a:	93 58       	subi	r25, 0x83	; 131
    189c:	5f 4f       	sbci	r21, 0xFF	; 255
    189e:	2a f0       	brmi	.+10     	; 0x18aa <__divsf3_pse+0x6c>
    18a0:	9e 3f       	cpi	r25, 0xFE	; 254
    18a2:	51 05       	cpc	r21, r1
    18a4:	68 f0       	brcs	.+26     	; 0x18c0 <__divsf3_pse+0x82>
    18a6:	2d c1       	rjmp	.+602    	; 0x1b02 <__fp_inf>
    18a8:	87 c1       	rjmp	.+782    	; 0x1bb8 <__fp_szero>
    18aa:	5f 3f       	cpi	r21, 0xFF	; 255
    18ac:	ec f3       	brlt	.-6      	; 0x18a8 <__divsf3_pse+0x6a>
    18ae:	98 3e       	cpi	r25, 0xE8	; 232
    18b0:	dc f3       	brlt	.-10     	; 0x18a8 <__divsf3_pse+0x6a>
    18b2:	86 95       	lsr	r24
    18b4:	77 95       	ror	r23
    18b6:	67 95       	ror	r22
    18b8:	b7 95       	ror	r27
    18ba:	f7 95       	ror	r31
    18bc:	9f 5f       	subi	r25, 0xFF	; 255
    18be:	c9 f7       	brne	.-14     	; 0x18b2 <__divsf3_pse+0x74>
    18c0:	88 0f       	add	r24, r24
    18c2:	91 1d       	adc	r25, r1
    18c4:	96 95       	lsr	r25
    18c6:	87 95       	ror	r24
    18c8:	97 f9       	bld	r25, 7
    18ca:	08 95       	ret
    18cc:	e1 e0       	ldi	r30, 0x01	; 1
    18ce:	66 0f       	add	r22, r22
    18d0:	77 1f       	adc	r23, r23
    18d2:	88 1f       	adc	r24, r24
    18d4:	bb 1f       	adc	r27, r27
    18d6:	62 17       	cp	r22, r18
    18d8:	73 07       	cpc	r23, r19
    18da:	84 07       	cpc	r24, r20
    18dc:	ba 07       	cpc	r27, r26
    18de:	20 f0       	brcs	.+8      	; 0x18e8 <__divsf3_pse+0xaa>
    18e0:	62 1b       	sub	r22, r18
    18e2:	73 0b       	sbc	r23, r19
    18e4:	84 0b       	sbc	r24, r20
    18e6:	ba 0b       	sbc	r27, r26
    18e8:	ee 1f       	adc	r30, r30
    18ea:	88 f7       	brcc	.-30     	; 0x18ce <__divsf3_pse+0x90>
    18ec:	e0 95       	com	r30
    18ee:	08 95       	ret

000018f0 <__fixsfdi>:
    18f0:	be e3       	ldi	r27, 0x3E	; 62
    18f2:	04 d0       	rcall	.+8      	; 0x18fc <__fixunssfdi+0x2>
    18f4:	08 f4       	brcc	.+2      	; 0x18f8 <__fixsfdi+0x8>
    18f6:	90 e8       	ldi	r25, 0x80	; 128
    18f8:	08 95       	ret

000018fa <__fixunssfdi>:
    18fa:	bf e3       	ldi	r27, 0x3F	; 63
    18fc:	22 27       	eor	r18, r18
    18fe:	33 27       	eor	r19, r19
    1900:	a9 01       	movw	r20, r18
    1902:	3f d1       	rcall	.+638    	; 0x1b82 <__fp_splitA>
    1904:	58 f1       	brcs	.+86     	; 0x195c <__fixunssfdi+0x62>
    1906:	9f 57       	subi	r25, 0x7F	; 127
    1908:	40 f1       	brcs	.+80     	; 0x195a <__fixunssfdi+0x60>
    190a:	b9 17       	cp	r27, r25
    190c:	38 f1       	brcs	.+78     	; 0x195c <__fixunssfdi+0x62>
    190e:	bf e3       	ldi	r27, 0x3F	; 63
    1910:	b9 1b       	sub	r27, r25
    1912:	99 27       	eor	r25, r25
    1914:	b8 50       	subi	r27, 0x08	; 8
    1916:	3a f4       	brpl	.+14     	; 0x1926 <__fixunssfdi+0x2c>
    1918:	66 0f       	add	r22, r22
    191a:	77 1f       	adc	r23, r23
    191c:	88 1f       	adc	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	b3 95       	inc	r27
    1922:	d2 f3       	brmi	.-12     	; 0x1918 <__fixunssfdi+0x1e>
    1924:	16 c0       	rjmp	.+44     	; 0x1952 <__fixunssfdi+0x58>
    1926:	b8 50       	subi	r27, 0x08	; 8
    1928:	4a f0       	brmi	.+18     	; 0x193c <__fixunssfdi+0x42>
    192a:	23 2f       	mov	r18, r19
    192c:	34 2f       	mov	r19, r20
    192e:	45 2f       	mov	r20, r21
    1930:	56 2f       	mov	r21, r22
    1932:	67 2f       	mov	r22, r23
    1934:	78 2f       	mov	r23, r24
    1936:	88 27       	eor	r24, r24
    1938:	b8 50       	subi	r27, 0x08	; 8
    193a:	ba f7       	brpl	.-18     	; 0x192a <__fixunssfdi+0x30>
    193c:	b8 5f       	subi	r27, 0xF8	; 248
    193e:	49 f0       	breq	.+18     	; 0x1952 <__fixunssfdi+0x58>
    1940:	86 95       	lsr	r24
    1942:	77 95       	ror	r23
    1944:	67 95       	ror	r22
    1946:	57 95       	ror	r21
    1948:	47 95       	ror	r20
    194a:	37 95       	ror	r19
    194c:	27 95       	ror	r18
    194e:	ba 95       	dec	r27
    1950:	b9 f7       	brne	.-18     	; 0x1940 <__fixunssfdi+0x46>
    1952:	0e f4       	brtc	.+2      	; 0x1956 <__fixunssfdi+0x5c>
    1954:	df d0       	rcall	.+446    	; 0x1b14 <__fp_negdi>
    1956:	88 94       	clc
    1958:	08 95       	ret
    195a:	88 94       	clc
    195c:	60 e0       	ldi	r22, 0x00	; 0
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	cb 01       	movw	r24, r22
    1962:	08 95       	ret

00001964 <__fixunssfsi>:
    1964:	0e d1       	rcall	.+540    	; 0x1b82 <__fp_splitA>
    1966:	88 f0       	brcs	.+34     	; 0x198a <__fixunssfsi+0x26>
    1968:	9f 57       	subi	r25, 0x7F	; 127
    196a:	90 f0       	brcs	.+36     	; 0x1990 <__fixunssfsi+0x2c>
    196c:	b9 2f       	mov	r27, r25
    196e:	99 27       	eor	r25, r25
    1970:	b7 51       	subi	r27, 0x17	; 23
    1972:	a0 f0       	brcs	.+40     	; 0x199c <__fixunssfsi+0x38>
    1974:	d1 f0       	breq	.+52     	; 0x19aa <__fixunssfsi+0x46>
    1976:	66 0f       	add	r22, r22
    1978:	77 1f       	adc	r23, r23
    197a:	88 1f       	adc	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	1a f0       	brmi	.+6      	; 0x1986 <__fixunssfsi+0x22>
    1980:	ba 95       	dec	r27
    1982:	c9 f7       	brne	.-14     	; 0x1976 <__fixunssfsi+0x12>
    1984:	12 c0       	rjmp	.+36     	; 0x19aa <__fixunssfsi+0x46>
    1986:	b1 30       	cpi	r27, 0x01	; 1
    1988:	81 f0       	breq	.+32     	; 0x19aa <__fixunssfsi+0x46>
    198a:	15 d1       	rcall	.+554    	; 0x1bb6 <__fp_zero>
    198c:	b1 e0       	ldi	r27, 0x01	; 1
    198e:	08 95       	ret
    1990:	12 c1       	rjmp	.+548    	; 0x1bb6 <__fp_zero>
    1992:	67 2f       	mov	r22, r23
    1994:	78 2f       	mov	r23, r24
    1996:	88 27       	eor	r24, r24
    1998:	b8 5f       	subi	r27, 0xF8	; 248
    199a:	39 f0       	breq	.+14     	; 0x19aa <__fixunssfsi+0x46>
    199c:	b9 3f       	cpi	r27, 0xF9	; 249
    199e:	cc f3       	brlt	.-14     	; 0x1992 <__fixunssfsi+0x2e>
    19a0:	86 95       	lsr	r24
    19a2:	77 95       	ror	r23
    19a4:	67 95       	ror	r22
    19a6:	b3 95       	inc	r27
    19a8:	d9 f7       	brne	.-10     	; 0x19a0 <__fixunssfsi+0x3c>
    19aa:	3e f4       	brtc	.+14     	; 0x19ba <__fixunssfsi+0x56>
    19ac:	90 95       	com	r25
    19ae:	80 95       	com	r24
    19b0:	70 95       	com	r23
    19b2:	61 95       	neg	r22
    19b4:	7f 4f       	sbci	r23, 0xFF	; 255
    19b6:	8f 4f       	sbci	r24, 0xFF	; 255
    19b8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ba:	08 95       	ret

000019bc <__floatdisf>:
    19bc:	97 fb       	bst	r25, 7
    19be:	0e f4       	brtc	.+2      	; 0x19c2 <__floatdisf+0x6>
    19c0:	a9 d0       	rcall	.+338    	; 0x1b14 <__fp_negdi>
    19c2:	3e c0       	rjmp	.+124    	; 0x1a40 <__fp_di2sf>

000019c4 <__floatunsisf>:
    19c4:	e8 94       	clt
    19c6:	09 c0       	rjmp	.+18     	; 0x19da <__floatsisf+0x12>

000019c8 <__floatsisf>:
    19c8:	97 fb       	bst	r25, 7
    19ca:	3e f4       	brtc	.+14     	; 0x19da <__floatsisf+0x12>
    19cc:	90 95       	com	r25
    19ce:	80 95       	com	r24
    19d0:	70 95       	com	r23
    19d2:	61 95       	neg	r22
    19d4:	7f 4f       	sbci	r23, 0xFF	; 255
    19d6:	8f 4f       	sbci	r24, 0xFF	; 255
    19d8:	9f 4f       	sbci	r25, 0xFF	; 255
    19da:	99 23       	and	r25, r25
    19dc:	a9 f0       	breq	.+42     	; 0x1a08 <__floatsisf+0x40>
    19de:	f9 2f       	mov	r31, r25
    19e0:	96 e9       	ldi	r25, 0x96	; 150
    19e2:	bb 27       	eor	r27, r27
    19e4:	93 95       	inc	r25
    19e6:	f6 95       	lsr	r31
    19e8:	87 95       	ror	r24
    19ea:	77 95       	ror	r23
    19ec:	67 95       	ror	r22
    19ee:	b7 95       	ror	r27
    19f0:	f1 11       	cpse	r31, r1
    19f2:	f8 cf       	rjmp	.-16     	; 0x19e4 <__floatsisf+0x1c>
    19f4:	fa f4       	brpl	.+62     	; 0x1a34 <__floatsisf+0x6c>
    19f6:	bb 0f       	add	r27, r27
    19f8:	11 f4       	brne	.+4      	; 0x19fe <__floatsisf+0x36>
    19fa:	60 ff       	sbrs	r22, 0
    19fc:	1b c0       	rjmp	.+54     	; 0x1a34 <__floatsisf+0x6c>
    19fe:	6f 5f       	subi	r22, 0xFF	; 255
    1a00:	7f 4f       	sbci	r23, 0xFF	; 255
    1a02:	8f 4f       	sbci	r24, 0xFF	; 255
    1a04:	9f 4f       	sbci	r25, 0xFF	; 255
    1a06:	16 c0       	rjmp	.+44     	; 0x1a34 <__floatsisf+0x6c>
    1a08:	88 23       	and	r24, r24
    1a0a:	11 f0       	breq	.+4      	; 0x1a10 <__floatsisf+0x48>
    1a0c:	96 e9       	ldi	r25, 0x96	; 150
    1a0e:	11 c0       	rjmp	.+34     	; 0x1a32 <__floatsisf+0x6a>
    1a10:	77 23       	and	r23, r23
    1a12:	21 f0       	breq	.+8      	; 0x1a1c <__floatsisf+0x54>
    1a14:	9e e8       	ldi	r25, 0x8E	; 142
    1a16:	87 2f       	mov	r24, r23
    1a18:	76 2f       	mov	r23, r22
    1a1a:	05 c0       	rjmp	.+10     	; 0x1a26 <__floatsisf+0x5e>
    1a1c:	66 23       	and	r22, r22
    1a1e:	71 f0       	breq	.+28     	; 0x1a3c <__floatsisf+0x74>
    1a20:	96 e8       	ldi	r25, 0x86	; 134
    1a22:	86 2f       	mov	r24, r22
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	60 e0       	ldi	r22, 0x00	; 0
    1a28:	2a f0       	brmi	.+10     	; 0x1a34 <__floatsisf+0x6c>
    1a2a:	9a 95       	dec	r25
    1a2c:	66 0f       	add	r22, r22
    1a2e:	77 1f       	adc	r23, r23
    1a30:	88 1f       	adc	r24, r24
    1a32:	da f7       	brpl	.-10     	; 0x1a2a <__floatsisf+0x62>
    1a34:	88 0f       	add	r24, r24
    1a36:	96 95       	lsr	r25
    1a38:	87 95       	ror	r24
    1a3a:	97 f9       	bld	r25, 7
    1a3c:	08 95       	ret

00001a3e <__floatundisf>:
    1a3e:	e8 94       	clt

00001a40 <__fp_di2sf>:
    1a40:	f9 2f       	mov	r31, r25
    1a42:	96 eb       	ldi	r25, 0xB6	; 182
    1a44:	ff 23       	and	r31, r31
    1a46:	81 f0       	breq	.+32     	; 0x1a68 <__fp_di2sf+0x28>
    1a48:	12 16       	cp	r1, r18
    1a4a:	13 06       	cpc	r1, r19
    1a4c:	14 06       	cpc	r1, r20
    1a4e:	44 0b       	sbc	r20, r20
    1a50:	93 95       	inc	r25
    1a52:	f6 95       	lsr	r31
    1a54:	87 95       	ror	r24
    1a56:	77 95       	ror	r23
    1a58:	67 95       	ror	r22
    1a5a:	57 95       	ror	r21
    1a5c:	40 40       	sbci	r20, 0x00	; 0
    1a5e:	ff 23       	and	r31, r31
    1a60:	b9 f7       	brne	.-18     	; 0x1a50 <__fp_di2sf+0x10>
    1a62:	1b c0       	rjmp	.+54     	; 0x1a9a <__fp_di2sf+0x5a>
    1a64:	99 27       	eor	r25, r25
    1a66:	08 95       	ret
    1a68:	88 23       	and	r24, r24
    1a6a:	51 f4       	brne	.+20     	; 0x1a80 <__fp_di2sf+0x40>
    1a6c:	98 50       	subi	r25, 0x08	; 8
    1a6e:	d2 f7       	brpl	.-12     	; 0x1a64 <__fp_di2sf+0x24>
    1a70:	87 2b       	or	r24, r23
    1a72:	76 2f       	mov	r23, r22
    1a74:	65 2f       	mov	r22, r21
    1a76:	54 2f       	mov	r21, r20
    1a78:	43 2f       	mov	r20, r19
    1a7a:	32 2f       	mov	r19, r18
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	b1 f3       	breq	.-20     	; 0x1a6c <__fp_di2sf+0x2c>
    1a80:	12 16       	cp	r1, r18
    1a82:	13 06       	cpc	r1, r19
    1a84:	14 06       	cpc	r1, r20
    1a86:	44 0b       	sbc	r20, r20
    1a88:	88 23       	and	r24, r24
    1a8a:	3a f0       	brmi	.+14     	; 0x1a9a <__fp_di2sf+0x5a>
    1a8c:	9a 95       	dec	r25
    1a8e:	44 0f       	add	r20, r20
    1a90:	55 1f       	adc	r21, r21
    1a92:	66 1f       	adc	r22, r22
    1a94:	77 1f       	adc	r23, r23
    1a96:	88 1f       	adc	r24, r24
    1a98:	ca f7       	brpl	.-14     	; 0x1a8c <__fp_di2sf+0x4c>
    1a9a:	55 23       	and	r21, r21
    1a9c:	4a f4       	brpl	.+18     	; 0x1ab0 <__fp_di2sf+0x70>
    1a9e:	44 0f       	add	r20, r20
    1aa0:	55 1f       	adc	r21, r21
    1aa2:	11 f4       	brne	.+4      	; 0x1aa8 <__fp_di2sf+0x68>
    1aa4:	60 ff       	sbrs	r22, 0
    1aa6:	04 c0       	rjmp	.+8      	; 0x1ab0 <__fp_di2sf+0x70>
    1aa8:	6f 5f       	subi	r22, 0xFF	; 255
    1aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    1aac:	8f 4f       	sbci	r24, 0xFF	; 255
    1aae:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab0:	88 0f       	add	r24, r24
    1ab2:	96 95       	lsr	r25
    1ab4:	87 95       	ror	r24
    1ab6:	97 f9       	bld	r25, 7
    1ab8:	08 95       	ret

00001aba <__fp_cmp>:
    1aba:	99 0f       	add	r25, r25
    1abc:	00 08       	sbc	r0, r0
    1abe:	55 0f       	add	r21, r21
    1ac0:	aa 0b       	sbc	r26, r26
    1ac2:	e0 e8       	ldi	r30, 0x80	; 128
    1ac4:	fe ef       	ldi	r31, 0xFE	; 254
    1ac6:	16 16       	cp	r1, r22
    1ac8:	17 06       	cpc	r1, r23
    1aca:	e8 07       	cpc	r30, r24
    1acc:	f9 07       	cpc	r31, r25
    1ace:	c0 f0       	brcs	.+48     	; 0x1b00 <__fp_cmp+0x46>
    1ad0:	12 16       	cp	r1, r18
    1ad2:	13 06       	cpc	r1, r19
    1ad4:	e4 07       	cpc	r30, r20
    1ad6:	f5 07       	cpc	r31, r21
    1ad8:	98 f0       	brcs	.+38     	; 0x1b00 <__fp_cmp+0x46>
    1ada:	62 1b       	sub	r22, r18
    1adc:	73 0b       	sbc	r23, r19
    1ade:	84 0b       	sbc	r24, r20
    1ae0:	95 0b       	sbc	r25, r21
    1ae2:	39 f4       	brne	.+14     	; 0x1af2 <__fp_cmp+0x38>
    1ae4:	0a 26       	eor	r0, r26
    1ae6:	61 f0       	breq	.+24     	; 0x1b00 <__fp_cmp+0x46>
    1ae8:	23 2b       	or	r18, r19
    1aea:	24 2b       	or	r18, r20
    1aec:	25 2b       	or	r18, r21
    1aee:	21 f4       	brne	.+8      	; 0x1af8 <__fp_cmp+0x3e>
    1af0:	08 95       	ret
    1af2:	0a 26       	eor	r0, r26
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <__fp_cmp+0x3e>
    1af6:	a1 40       	sbci	r26, 0x01	; 1
    1af8:	a6 95       	lsr	r26
    1afa:	8f ef       	ldi	r24, 0xFF	; 255
    1afc:	81 1d       	adc	r24, r1
    1afe:	81 1d       	adc	r24, r1
    1b00:	08 95       	ret

00001b02 <__fp_inf>:
    1b02:	97 f9       	bld	r25, 7
    1b04:	9f 67       	ori	r25, 0x7F	; 127
    1b06:	80 e8       	ldi	r24, 0x80	; 128
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	60 e0       	ldi	r22, 0x00	; 0
    1b0c:	08 95       	ret

00001b0e <__fp_nan>:
    1b0e:	9f ef       	ldi	r25, 0xFF	; 255
    1b10:	80 ec       	ldi	r24, 0xC0	; 192
    1b12:	08 95       	ret

00001b14 <__fp_negdi>:
    1b14:	90 95       	com	r25
    1b16:	80 95       	com	r24
    1b18:	70 95       	com	r23
    1b1a:	60 95       	com	r22
    1b1c:	50 95       	com	r21
    1b1e:	40 95       	com	r20
    1b20:	30 95       	com	r19
    1b22:	21 95       	neg	r18
    1b24:	3f 4f       	sbci	r19, 0xFF	; 255
    1b26:	4f 4f       	sbci	r20, 0xFF	; 255
    1b28:	5f 4f       	sbci	r21, 0xFF	; 255
    1b2a:	6f 4f       	sbci	r22, 0xFF	; 255
    1b2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b30:	9f 4f       	sbci	r25, 0xFF	; 255
    1b32:	08 95       	ret

00001b34 <__fp_pscA>:
    1b34:	00 24       	eor	r0, r0
    1b36:	0a 94       	dec	r0
    1b38:	16 16       	cp	r1, r22
    1b3a:	17 06       	cpc	r1, r23
    1b3c:	18 06       	cpc	r1, r24
    1b3e:	09 06       	cpc	r0, r25
    1b40:	08 95       	ret

00001b42 <__fp_pscB>:
    1b42:	00 24       	eor	r0, r0
    1b44:	0a 94       	dec	r0
    1b46:	12 16       	cp	r1, r18
    1b48:	13 06       	cpc	r1, r19
    1b4a:	14 06       	cpc	r1, r20
    1b4c:	05 06       	cpc	r0, r21
    1b4e:	08 95       	ret

00001b50 <__fp_round>:
    1b50:	09 2e       	mov	r0, r25
    1b52:	03 94       	inc	r0
    1b54:	00 0c       	add	r0, r0
    1b56:	11 f4       	brne	.+4      	; 0x1b5c <__fp_round+0xc>
    1b58:	88 23       	and	r24, r24
    1b5a:	52 f0       	brmi	.+20     	; 0x1b70 <__fp_round+0x20>
    1b5c:	bb 0f       	add	r27, r27
    1b5e:	40 f4       	brcc	.+16     	; 0x1b70 <__fp_round+0x20>
    1b60:	bf 2b       	or	r27, r31
    1b62:	11 f4       	brne	.+4      	; 0x1b68 <__fp_round+0x18>
    1b64:	60 ff       	sbrs	r22, 0
    1b66:	04 c0       	rjmp	.+8      	; 0x1b70 <__fp_round+0x20>
    1b68:	6f 5f       	subi	r22, 0xFF	; 255
    1b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b70:	08 95       	ret

00001b72 <__fp_split3>:
    1b72:	57 fd       	sbrc	r21, 7
    1b74:	90 58       	subi	r25, 0x80	; 128
    1b76:	44 0f       	add	r20, r20
    1b78:	55 1f       	adc	r21, r21
    1b7a:	59 f0       	breq	.+22     	; 0x1b92 <__fp_splitA+0x10>
    1b7c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b7e:	71 f0       	breq	.+28     	; 0x1b9c <__fp_splitA+0x1a>
    1b80:	47 95       	ror	r20

00001b82 <__fp_splitA>:
    1b82:	88 0f       	add	r24, r24
    1b84:	97 fb       	bst	r25, 7
    1b86:	99 1f       	adc	r25, r25
    1b88:	61 f0       	breq	.+24     	; 0x1ba2 <__fp_splitA+0x20>
    1b8a:	9f 3f       	cpi	r25, 0xFF	; 255
    1b8c:	79 f0       	breq	.+30     	; 0x1bac <__fp_splitA+0x2a>
    1b8e:	87 95       	ror	r24
    1b90:	08 95       	ret
    1b92:	12 16       	cp	r1, r18
    1b94:	13 06       	cpc	r1, r19
    1b96:	14 06       	cpc	r1, r20
    1b98:	55 1f       	adc	r21, r21
    1b9a:	f2 cf       	rjmp	.-28     	; 0x1b80 <__fp_split3+0xe>
    1b9c:	46 95       	lsr	r20
    1b9e:	f1 df       	rcall	.-30     	; 0x1b82 <__fp_splitA>
    1ba0:	08 c0       	rjmp	.+16     	; 0x1bb2 <__fp_splitA+0x30>
    1ba2:	16 16       	cp	r1, r22
    1ba4:	17 06       	cpc	r1, r23
    1ba6:	18 06       	cpc	r1, r24
    1ba8:	99 1f       	adc	r25, r25
    1baa:	f1 cf       	rjmp	.-30     	; 0x1b8e <__fp_splitA+0xc>
    1bac:	86 95       	lsr	r24
    1bae:	71 05       	cpc	r23, r1
    1bb0:	61 05       	cpc	r22, r1
    1bb2:	08 94       	sec
    1bb4:	08 95       	ret

00001bb6 <__fp_zero>:
    1bb6:	e8 94       	clt

00001bb8 <__fp_szero>:
    1bb8:	bb 27       	eor	r27, r27
    1bba:	66 27       	eor	r22, r22
    1bbc:	77 27       	eor	r23, r23
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	97 f9       	bld	r25, 7
    1bc2:	08 95       	ret

00001bc4 <__mulsf3>:
    1bc4:	0b d0       	rcall	.+22     	; 0x1bdc <__mulsf3x>
    1bc6:	c4 cf       	rjmp	.-120    	; 0x1b50 <__fp_round>
    1bc8:	b5 df       	rcall	.-150    	; 0x1b34 <__fp_pscA>
    1bca:	28 f0       	brcs	.+10     	; 0x1bd6 <__mulsf3+0x12>
    1bcc:	ba df       	rcall	.-140    	; 0x1b42 <__fp_pscB>
    1bce:	18 f0       	brcs	.+6      	; 0x1bd6 <__mulsf3+0x12>
    1bd0:	95 23       	and	r25, r21
    1bd2:	09 f0       	breq	.+2      	; 0x1bd6 <__mulsf3+0x12>
    1bd4:	96 cf       	rjmp	.-212    	; 0x1b02 <__fp_inf>
    1bd6:	9b cf       	rjmp	.-202    	; 0x1b0e <__fp_nan>
    1bd8:	11 24       	eor	r1, r1
    1bda:	ee cf       	rjmp	.-36     	; 0x1bb8 <__fp_szero>

00001bdc <__mulsf3x>:
    1bdc:	ca df       	rcall	.-108    	; 0x1b72 <__fp_split3>
    1bde:	a0 f3       	brcs	.-24     	; 0x1bc8 <__mulsf3+0x4>

00001be0 <__mulsf3_pse>:
    1be0:	95 9f       	mul	r25, r21
    1be2:	d1 f3       	breq	.-12     	; 0x1bd8 <__mulsf3+0x14>
    1be4:	95 0f       	add	r25, r21
    1be6:	50 e0       	ldi	r21, 0x00	; 0
    1be8:	55 1f       	adc	r21, r21
    1bea:	62 9f       	mul	r22, r18
    1bec:	f0 01       	movw	r30, r0
    1bee:	72 9f       	mul	r23, r18
    1bf0:	bb 27       	eor	r27, r27
    1bf2:	f0 0d       	add	r31, r0
    1bf4:	b1 1d       	adc	r27, r1
    1bf6:	63 9f       	mul	r22, r19
    1bf8:	aa 27       	eor	r26, r26
    1bfa:	f0 0d       	add	r31, r0
    1bfc:	b1 1d       	adc	r27, r1
    1bfe:	aa 1f       	adc	r26, r26
    1c00:	64 9f       	mul	r22, r20
    1c02:	66 27       	eor	r22, r22
    1c04:	b0 0d       	add	r27, r0
    1c06:	a1 1d       	adc	r26, r1
    1c08:	66 1f       	adc	r22, r22
    1c0a:	82 9f       	mul	r24, r18
    1c0c:	22 27       	eor	r18, r18
    1c0e:	b0 0d       	add	r27, r0
    1c10:	a1 1d       	adc	r26, r1
    1c12:	62 1f       	adc	r22, r18
    1c14:	73 9f       	mul	r23, r19
    1c16:	b0 0d       	add	r27, r0
    1c18:	a1 1d       	adc	r26, r1
    1c1a:	62 1f       	adc	r22, r18
    1c1c:	83 9f       	mul	r24, r19
    1c1e:	a0 0d       	add	r26, r0
    1c20:	61 1d       	adc	r22, r1
    1c22:	22 1f       	adc	r18, r18
    1c24:	74 9f       	mul	r23, r20
    1c26:	33 27       	eor	r19, r19
    1c28:	a0 0d       	add	r26, r0
    1c2a:	61 1d       	adc	r22, r1
    1c2c:	23 1f       	adc	r18, r19
    1c2e:	84 9f       	mul	r24, r20
    1c30:	60 0d       	add	r22, r0
    1c32:	21 1d       	adc	r18, r1
    1c34:	82 2f       	mov	r24, r18
    1c36:	76 2f       	mov	r23, r22
    1c38:	6a 2f       	mov	r22, r26
    1c3a:	11 24       	eor	r1, r1
    1c3c:	9f 57       	subi	r25, 0x7F	; 127
    1c3e:	50 40       	sbci	r21, 0x00	; 0
    1c40:	8a f0       	brmi	.+34     	; 0x1c64 <__mulsf3_pse+0x84>
    1c42:	e1 f0       	breq	.+56     	; 0x1c7c <__mulsf3_pse+0x9c>
    1c44:	88 23       	and	r24, r24
    1c46:	4a f0       	brmi	.+18     	; 0x1c5a <__mulsf3_pse+0x7a>
    1c48:	ee 0f       	add	r30, r30
    1c4a:	ff 1f       	adc	r31, r31
    1c4c:	bb 1f       	adc	r27, r27
    1c4e:	66 1f       	adc	r22, r22
    1c50:	77 1f       	adc	r23, r23
    1c52:	88 1f       	adc	r24, r24
    1c54:	91 50       	subi	r25, 0x01	; 1
    1c56:	50 40       	sbci	r21, 0x00	; 0
    1c58:	a9 f7       	brne	.-22     	; 0x1c44 <__mulsf3_pse+0x64>
    1c5a:	9e 3f       	cpi	r25, 0xFE	; 254
    1c5c:	51 05       	cpc	r21, r1
    1c5e:	70 f0       	brcs	.+28     	; 0x1c7c <__mulsf3_pse+0x9c>
    1c60:	50 cf       	rjmp	.-352    	; 0x1b02 <__fp_inf>
    1c62:	aa cf       	rjmp	.-172    	; 0x1bb8 <__fp_szero>
    1c64:	5f 3f       	cpi	r21, 0xFF	; 255
    1c66:	ec f3       	brlt	.-6      	; 0x1c62 <__mulsf3_pse+0x82>
    1c68:	98 3e       	cpi	r25, 0xE8	; 232
    1c6a:	dc f3       	brlt	.-10     	; 0x1c62 <__mulsf3_pse+0x82>
    1c6c:	86 95       	lsr	r24
    1c6e:	77 95       	ror	r23
    1c70:	67 95       	ror	r22
    1c72:	b7 95       	ror	r27
    1c74:	f7 95       	ror	r31
    1c76:	e7 95       	ror	r30
    1c78:	9f 5f       	subi	r25, 0xFF	; 255
    1c7a:	c1 f7       	brne	.-16     	; 0x1c6c <__mulsf3_pse+0x8c>
    1c7c:	fe 2b       	or	r31, r30
    1c7e:	88 0f       	add	r24, r24
    1c80:	91 1d       	adc	r25, r1
    1c82:	96 95       	lsr	r25
    1c84:	87 95       	ror	r24
    1c86:	97 f9       	bld	r25, 7
    1c88:	08 95       	ret

00001c8a <InitializeUARTTimer>:

unsigned long
UARTReceiveSync(UART_NUMBER UARTNumber, PVOID ReceiveValue, unsigned long Length)
{
	return UARTReceive(UARTNumber, ReceiveValue, Length, 0);
}
    1c8a:	82 e0       	ldi	r24, 0x02	; 2
    1c8c:	84 bd       	out	0x24, r24	; 36
    1c8e:	15 bc       	out	0x25, r1	; 37
    1c90:	16 bc       	out	0x26, r1	; 38
    1c92:	17 bc       	out	0x27, r1	; 39
    1c94:	18 bc       	out	0x28, r1	; 40
    1c96:	80 93 6e 00 	sts	0x006E, r24
    1c9a:	08 95       	ret

00001c9c <InitUARTSync>:
    1c9c:	cf 93       	push	r28
    1c9e:	40 93 49 07 	sts	0x0749, r20
    1ca2:	88 23       	and	r24, r24
    1ca4:	19 f0       	breq	.+6      	; 0x1cac <InitUARTSync+0x10>
    1ca6:	81 30       	cpi	r24, 0x01	; 1
    1ca8:	c9 f0       	breq	.+50     	; 0x1cdc <InitUARTSync+0x40>
    1caa:	30 c0       	rjmp	.+96     	; 0x1d0c <InitUARTSync+0x70>
    1cac:	70 93 c5 00 	sts	0x00C5, r23
    1cb0:	60 93 c4 00 	sts	0x00C4, r22
    1cb4:	88 e9       	ldi	r24, 0x98	; 152
    1cb6:	80 93 c1 00 	sts	0x00C1, r24
    1cba:	41 30       	cpi	r20, 0x01	; 1
    1cbc:	39 f4       	brne	.+14     	; 0x1ccc <InitUARTSync+0x30>
    1cbe:	86 e0       	ldi	r24, 0x06	; 6
    1cc0:	80 93 c2 00 	sts	0x00C2, r24
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	80 93 c0 00 	sts	0x00C0, r24
    1cca:	03 c0       	rjmp	.+6      	; 0x1cd2 <InitUARTSync+0x36>
    1ccc:	86 e0       	ldi	r24, 0x06	; 6
    1cce:	80 93 c2 00 	sts	0x00C2, r24
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	80 93 36 07 	sts	0x0736, r24
    1cd8:	c1 e0       	ldi	r28, 0x01	; 1
    1cda:	19 c0       	rjmp	.+50     	; 0x1d0e <InitUARTSync+0x72>
    1cdc:	70 93 cd 00 	sts	0x00CD, r23
    1ce0:	60 93 cc 00 	sts	0x00CC, r22
    1ce4:	88 e9       	ldi	r24, 0x98	; 152
    1ce6:	80 93 c9 00 	sts	0x00C9, r24
    1cea:	41 30       	cpi	r20, 0x01	; 1
    1cec:	39 f4       	brne	.+14     	; 0x1cfc <InitUARTSync+0x60>
    1cee:	86 e0       	ldi	r24, 0x06	; 6
    1cf0:	80 93 ca 00 	sts	0x00CA, r24
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	80 93 c8 00 	sts	0x00C8, r24
    1cfa:	03 c0       	rjmp	.+6      	; 0x1d02 <InitUARTSync+0x66>
    1cfc:	86 e0       	ldi	r24, 0x06	; 6
    1cfe:	80 93 ca 00 	sts	0x00CA, r24
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	80 93 37 07 	sts	0x0737, r24
    1d08:	c1 e0       	ldi	r28, 0x01	; 1
    1d0a:	01 c0       	rjmp	.+2      	; 0x1d0e <InitUARTSync+0x72>
    1d0c:	c0 e0       	ldi	r28, 0x00	; 0
    1d0e:	bd df       	rcall	.-134    	; 0x1c8a <InitializeUARTTimer>
    1d10:	8c 2f       	mov	r24, r28
    1d12:	cf 91       	pop	r28
    1d14:	08 95       	ret

00001d16 <UARTTransmit>:
    1d16:	cf 92       	push	r12
    1d18:	df 92       	push	r13
    1d1a:	ef 92       	push	r14
    1d1c:	ff 92       	push	r15
    1d1e:	0f 93       	push	r16
    1d20:	1f 93       	push	r17
    1d22:	cf 93       	push	r28
    1d24:	df 93       	push	r29
    1d26:	6b 01       	movw	r12, r22
    1d28:	88 23       	and	r24, r24
    1d2a:	19 f0       	breq	.+6      	; 0x1d32 <UARTTransmit+0x1c>
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	c1 f1       	breq	.+112    	; 0x1da0 <UARTTransmit+0x8a>
    1d30:	6c c0       	rjmp	.+216    	; 0x1e0a <UARTTransmit+0xf4>
    1d32:	80 91 36 07 	lds	r24, 0x0736
    1d36:	88 23       	and	r24, r24
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <UARTTransmit+0x26>
    1d3a:	6b c0       	rjmp	.+214    	; 0x1e12 <UARTTransmit+0xfc>
    1d3c:	21 15       	cp	r18, r1
    1d3e:	31 05       	cpc	r19, r1
    1d40:	41 05       	cpc	r20, r1
    1d42:	51 05       	cpc	r21, r1
    1d44:	09 f4       	brne	.+2      	; 0x1d48 <UARTTransmit+0x32>
    1d46:	6c c0       	rjmp	.+216    	; 0x1e20 <UARTTransmit+0x10a>
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	c0 ec       	ldi	r28, 0xC0	; 192
    1d50:	d0 e0       	ldi	r29, 0x00	; 0
    1d52:	0f 2e       	mov	r0, r31
    1d54:	f1 ec       	ldi	r31, 0xC1	; 193
    1d56:	ef 2e       	mov	r14, r31
    1d58:	f1 2c       	mov	r15, r1
    1d5a:	f0 2d       	mov	r31, r0
    1d5c:	66 ec       	ldi	r22, 0xC6	; 198
    1d5e:	70 e0       	ldi	r23, 0x00	; 0
    1d60:	18 81       	ld	r17, Y
    1d62:	15 ff       	sbrs	r17, 5
    1d64:	fd cf       	rjmp	.-6      	; 0x1d60 <UARTTransmit+0x4a>
    1d66:	10 91 49 07 	lds	r17, 0x0749
    1d6a:	11 23       	and	r17, r17
    1d6c:	59 f0       	breq	.+22     	; 0x1d84 <UARTTransmit+0x6e>
    1d6e:	00 23       	and	r16, r16
    1d70:	29 f0       	breq	.+10     	; 0x1d7c <UARTTransmit+0x66>
    1d72:	f7 01       	movw	r30, r14
    1d74:	10 81       	ld	r17, Z
    1d76:	11 60       	ori	r17, 0x01	; 1
    1d78:	10 83       	st	Z, r17
    1d7a:	04 c0       	rjmp	.+8      	; 0x1d84 <UARTTransmit+0x6e>
    1d7c:	f7 01       	movw	r30, r14
    1d7e:	10 81       	ld	r17, Z
    1d80:	1e 7f       	andi	r17, 0xFE	; 254
    1d82:	10 83       	st	Z, r17
    1d84:	f6 01       	movw	r30, r12
    1d86:	11 91       	ld	r17, Z+
    1d88:	6f 01       	movw	r12, r30
    1d8a:	fb 01       	movw	r30, r22
    1d8c:	10 83       	st	Z, r17
    1d8e:	01 96       	adiw	r24, 0x01	; 1
    1d90:	a1 1d       	adc	r26, r1
    1d92:	b1 1d       	adc	r27, r1
    1d94:	82 17       	cp	r24, r18
    1d96:	93 07       	cpc	r25, r19
    1d98:	a4 07       	cpc	r26, r20
    1d9a:	b5 07       	cpc	r27, r21
    1d9c:	09 f7       	brne	.-62     	; 0x1d60 <UARTTransmit+0x4a>
    1d9e:	40 c0       	rjmp	.+128    	; 0x1e20 <UARTTransmit+0x10a>
    1da0:	80 91 37 07 	lds	r24, 0x0737
    1da4:	88 23       	and	r24, r24
    1da6:	c9 f1       	breq	.+114    	; 0x1e1a <UARTTransmit+0x104>
    1da8:	21 15       	cp	r18, r1
    1daa:	31 05       	cpc	r19, r1
    1dac:	41 05       	cpc	r20, r1
    1dae:	51 05       	cpc	r21, r1
    1db0:	b9 f1       	breq	.+110    	; 0x1e20 <UARTTransmit+0x10a>
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	dc 01       	movw	r26, r24
    1db8:	c8 ec       	ldi	r28, 0xC8	; 200
    1dba:	d0 e0       	ldi	r29, 0x00	; 0
    1dbc:	0f 2e       	mov	r0, r31
    1dbe:	f9 ec       	ldi	r31, 0xC9	; 201
    1dc0:	ef 2e       	mov	r14, r31
    1dc2:	f1 2c       	mov	r15, r1
    1dc4:	f0 2d       	mov	r31, r0
    1dc6:	6e ec       	ldi	r22, 0xCE	; 206
    1dc8:	70 e0       	ldi	r23, 0x00	; 0
    1dca:	18 81       	ld	r17, Y
    1dcc:	15 ff       	sbrs	r17, 5
    1dce:	fd cf       	rjmp	.-6      	; 0x1dca <UARTTransmit+0xb4>
    1dd0:	10 91 49 07 	lds	r17, 0x0749
    1dd4:	11 23       	and	r17, r17
    1dd6:	59 f0       	breq	.+22     	; 0x1dee <UARTTransmit+0xd8>
    1dd8:	00 23       	and	r16, r16
    1dda:	29 f0       	breq	.+10     	; 0x1de6 <UARTTransmit+0xd0>
    1ddc:	f7 01       	movw	r30, r14
    1dde:	10 81       	ld	r17, Z
    1de0:	11 60       	ori	r17, 0x01	; 1
    1de2:	10 83       	st	Z, r17
    1de4:	04 c0       	rjmp	.+8      	; 0x1dee <UARTTransmit+0xd8>
    1de6:	f7 01       	movw	r30, r14
    1de8:	10 81       	ld	r17, Z
    1dea:	1e 7f       	andi	r17, 0xFE	; 254
    1dec:	10 83       	st	Z, r17
    1dee:	f6 01       	movw	r30, r12
    1df0:	11 91       	ld	r17, Z+
    1df2:	6f 01       	movw	r12, r30
    1df4:	fb 01       	movw	r30, r22
    1df6:	10 83       	st	Z, r17
    1df8:	01 96       	adiw	r24, 0x01	; 1
    1dfa:	a1 1d       	adc	r26, r1
    1dfc:	b1 1d       	adc	r27, r1
    1dfe:	82 17       	cp	r24, r18
    1e00:	93 07       	cpc	r25, r19
    1e02:	a4 07       	cpc	r26, r20
    1e04:	b5 07       	cpc	r27, r21
    1e06:	09 f7       	brne	.-62     	; 0x1dca <UARTTransmit+0xb4>
    1e08:	0b c0       	rjmp	.+22     	; 0x1e20 <UARTTransmit+0x10a>
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	a9 01       	movw	r20, r18
    1e10:	07 c0       	rjmp	.+14     	; 0x1e20 <UARTTransmit+0x10a>
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	a9 01       	movw	r20, r18
    1e18:	03 c0       	rjmp	.+6      	; 0x1e20 <UARTTransmit+0x10a>
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	a9 01       	movw	r20, r18
    1e20:	ca 01       	movw	r24, r20
    1e22:	b9 01       	movw	r22, r18
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	1f 91       	pop	r17
    1e2a:	0f 91       	pop	r16
    1e2c:	ff 90       	pop	r15
    1e2e:	ef 90       	pop	r14
    1e30:	df 90       	pop	r13
    1e32:	cf 90       	pop	r12
    1e34:	08 95       	ret

00001e36 <UARTTransmitSync>:
    1e36:	0f 93       	push	r16
    1e38:	00 e0       	ldi	r16, 0x00	; 0
    1e3a:	6d df       	rcall	.-294    	; 0x1d16 <UARTTransmit>
    1e3c:	0f 91       	pop	r16
    1e3e:	08 95       	ret

00001e40 <__vector_16>:
	return IndexI;

}

ISR(TIMER0_COMPA_vect)
{
    1e40:	1f 92       	push	r1
    1e42:	0f 92       	push	r0
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	0f 92       	push	r0
    1e48:	11 24       	eor	r1, r1
    1e4a:	8f 93       	push	r24
	gUARTTimerTriggered = TRUE;
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	80 93 4c 07 	sts	0x074C, r24
}
    1e52:	8f 91       	pop	r24
    1e54:	0f 90       	pop	r0
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	0f 90       	pop	r0
    1e5a:	1f 90       	pop	r1
    1e5c:	18 95       	reti

00001e5e <__vector_20>:

ISR(USART0_RX_vect)
{
    1e5e:	1f 92       	push	r1
    1e60:	0f 92       	push	r0
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	0f 92       	push	r0
    1e66:	11 24       	eor	r1, r1
    1e68:	0b b6       	in	r0, 0x3b	; 59
    1e6a:	0f 92       	push	r0
    1e6c:	2f 93       	push	r18
    1e6e:	3f 93       	push	r19
    1e70:	4f 93       	push	r20
    1e72:	5f 93       	push	r21
    1e74:	6f 93       	push	r22
    1e76:	7f 93       	push	r23
    1e78:	8f 93       	push	r24
    1e7a:	9f 93       	push	r25
    1e7c:	af 93       	push	r26
    1e7e:	bf 93       	push	r27
    1e80:	ef 93       	push	r30
    1e82:	ff 93       	push	r31
	if(gRCICallback0 != NULL)
    1e84:	e0 91 3b 07 	lds	r30, 0x073B
    1e88:	f0 91 3c 07 	lds	r31, 0x073C
    1e8c:	30 97       	sbiw	r30, 0x00	; 0
    1e8e:	31 f0       	breq	.+12     	; 0x1e9c <__vector_20+0x3e>
	{
		gRCICallback0(UART_ZERO, gRCICallbackContext0);
    1e90:	60 91 47 07 	lds	r22, 0x0747
    1e94:	70 91 48 07 	lds	r23, 0x0748
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	09 95       	icall
	}
}
    1e9c:	ff 91       	pop	r31
    1e9e:	ef 91       	pop	r30
    1ea0:	bf 91       	pop	r27
    1ea2:	af 91       	pop	r26
    1ea4:	9f 91       	pop	r25
    1ea6:	8f 91       	pop	r24
    1ea8:	7f 91       	pop	r23
    1eaa:	6f 91       	pop	r22
    1eac:	5f 91       	pop	r21
    1eae:	4f 91       	pop	r20
    1eb0:	3f 91       	pop	r19
    1eb2:	2f 91       	pop	r18
    1eb4:	0f 90       	pop	r0
    1eb6:	0b be       	out	0x3b, r0	; 59
    1eb8:	0f 90       	pop	r0
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	0f 90       	pop	r0
    1ebe:	1f 90       	pop	r1
    1ec0:	18 95       	reti

00001ec2 <__vector_28>:

ISR(USART1_RX_vect)
{
    1ec2:	1f 92       	push	r1
    1ec4:	0f 92       	push	r0
    1ec6:	0f b6       	in	r0, 0x3f	; 63
    1ec8:	0f 92       	push	r0
    1eca:	11 24       	eor	r1, r1
    1ecc:	0b b6       	in	r0, 0x3b	; 59
    1ece:	0f 92       	push	r0
    1ed0:	2f 93       	push	r18
    1ed2:	3f 93       	push	r19
    1ed4:	4f 93       	push	r20
    1ed6:	5f 93       	push	r21
    1ed8:	6f 93       	push	r22
    1eda:	7f 93       	push	r23
    1edc:	8f 93       	push	r24
    1ede:	9f 93       	push	r25
    1ee0:	af 93       	push	r26
    1ee2:	bf 93       	push	r27
    1ee4:	ef 93       	push	r30
    1ee6:	ff 93       	push	r31
	if(gRCICallback1 != NULL)
    1ee8:	e0 91 41 07 	lds	r30, 0x0741
    1eec:	f0 91 42 07 	lds	r31, 0x0742
    1ef0:	30 97       	sbiw	r30, 0x00	; 0
    1ef2:	31 f0       	breq	.+12     	; 0x1f00 <__vector_28+0x3e>
	{
		gRCICallback1(UART_ONE, gRCICallbackContext1);
    1ef4:	60 91 3f 07 	lds	r22, 0x073F
    1ef8:	70 91 40 07 	lds	r23, 0x0740
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	09 95       	icall
	}
}
    1f00:	ff 91       	pop	r31
    1f02:	ef 91       	pop	r30
    1f04:	bf 91       	pop	r27
    1f06:	af 91       	pop	r26
    1f08:	9f 91       	pop	r25
    1f0a:	8f 91       	pop	r24
    1f0c:	7f 91       	pop	r23
    1f0e:	6f 91       	pop	r22
    1f10:	5f 91       	pop	r21
    1f12:	4f 91       	pop	r20
    1f14:	3f 91       	pop	r19
    1f16:	2f 91       	pop	r18
    1f18:	0f 90       	pop	r0
    1f1a:	0b be       	out	0x3b, r0	; 59
    1f1c:	0f 90       	pop	r0
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	0f 90       	pop	r0
    1f22:	1f 90       	pop	r1
    1f24:	18 95       	reti

00001f26 <__vector_22>:

ISR(USART0_TX_vect)
{
    1f26:	1f 92       	push	r1
    1f28:	0f 92       	push	r0
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	0f 92       	push	r0
    1f2e:	11 24       	eor	r1, r1
    1f30:	0b b6       	in	r0, 0x3b	; 59
    1f32:	0f 92       	push	r0
    1f34:	2f 93       	push	r18
    1f36:	3f 93       	push	r19
    1f38:	4f 93       	push	r20
    1f3a:	5f 93       	push	r21
    1f3c:	6f 93       	push	r22
    1f3e:	7f 93       	push	r23
    1f40:	8f 93       	push	r24
    1f42:	9f 93       	push	r25
    1f44:	af 93       	push	r26
    1f46:	bf 93       	push	r27
    1f48:	ef 93       	push	r30
    1f4a:	ff 93       	push	r31
	if(gTCICallback0 != NULL)
    1f4c:	e0 91 3d 07 	lds	r30, 0x073D
    1f50:	f0 91 3e 07 	lds	r31, 0x073E
    1f54:	30 97       	sbiw	r30, 0x00	; 0
    1f56:	31 f0       	breq	.+12     	; 0x1f64 <__vector_22+0x3e>
	{
		gTCICallback0(UART_ZERO, gTCICallbackContext0);
    1f58:	60 91 45 07 	lds	r22, 0x0745
    1f5c:	70 91 46 07 	lds	r23, 0x0746
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	09 95       	icall
	}
}
    1f64:	ff 91       	pop	r31
    1f66:	ef 91       	pop	r30
    1f68:	bf 91       	pop	r27
    1f6a:	af 91       	pop	r26
    1f6c:	9f 91       	pop	r25
    1f6e:	8f 91       	pop	r24
    1f70:	7f 91       	pop	r23
    1f72:	6f 91       	pop	r22
    1f74:	5f 91       	pop	r21
    1f76:	4f 91       	pop	r20
    1f78:	3f 91       	pop	r19
    1f7a:	2f 91       	pop	r18
    1f7c:	0f 90       	pop	r0
    1f7e:	0b be       	out	0x3b, r0	; 59
    1f80:	0f 90       	pop	r0
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	0f 90       	pop	r0
    1f86:	1f 90       	pop	r1
    1f88:	18 95       	reti

00001f8a <__vector_30>:

ISR(USART1_TX_vect)
{
    1f8a:	1f 92       	push	r1
    1f8c:	0f 92       	push	r0
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	0f 92       	push	r0
    1f92:	11 24       	eor	r1, r1
    1f94:	0b b6       	in	r0, 0x3b	; 59
    1f96:	0f 92       	push	r0
    1f98:	2f 93       	push	r18
    1f9a:	3f 93       	push	r19
    1f9c:	4f 93       	push	r20
    1f9e:	5f 93       	push	r21
    1fa0:	6f 93       	push	r22
    1fa2:	7f 93       	push	r23
    1fa4:	8f 93       	push	r24
    1fa6:	9f 93       	push	r25
    1fa8:	af 93       	push	r26
    1faa:	bf 93       	push	r27
    1fac:	ef 93       	push	r30
    1fae:	ff 93       	push	r31
	if(gTCICallback1 != NULL)
    1fb0:	e0 91 43 07 	lds	r30, 0x0743
    1fb4:	f0 91 44 07 	lds	r31, 0x0744
    1fb8:	30 97       	sbiw	r30, 0x00	; 0
    1fba:	31 f0       	breq	.+12     	; 0x1fc8 <__vector_30+0x3e>
	{
		gTCICallback1(UART_ONE, gTCICallbackContext1);
    1fbc:	60 91 4a 07 	lds	r22, 0x074A
    1fc0:	70 91 4b 07 	lds	r23, 0x074B
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	09 95       	icall
	}
    1fc8:	ff 91       	pop	r31
    1fca:	ef 91       	pop	r30
    1fcc:	bf 91       	pop	r27
    1fce:	af 91       	pop	r26
    1fd0:	9f 91       	pop	r25
    1fd2:	8f 91       	pop	r24
    1fd4:	7f 91       	pop	r23
    1fd6:	6f 91       	pop	r22
    1fd8:	5f 91       	pop	r21
    1fda:	4f 91       	pop	r20
    1fdc:	3f 91       	pop	r19
    1fde:	2f 91       	pop	r18
    1fe0:	0f 90       	pop	r0
    1fe2:	0b be       	out	0x3b, r0	; 59
    1fe4:	0f 90       	pop	r0
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	0f 90       	pop	r0
    1fea:	1f 90       	pop	r1
    1fec:	18 95       	reti

00001fee <__tablejump2__>:
    1fee:	ee 0f       	add	r30, r30
    1ff0:	ff 1f       	adc	r31, r31

00001ff2 <__tablejump__>:
    1ff2:	05 90       	lpm	r0, Z+
    1ff4:	f4 91       	lpm	r31, Z
    1ff6:	e0 2d       	mov	r30, r0
    1ff8:	09 94       	ijmp

00001ffa <__moddi3>:
    1ffa:	68 94       	set
    1ffc:	01 c0       	rjmp	.+2      	; 0x2000 <__divdi3_moddi3>

00001ffe <__divdi3>:
    1ffe:	e8 94       	clt

00002000 <__divdi3_moddi3>:
    2000:	f9 2f       	mov	r31, r25
    2002:	f1 2b       	or	r31, r17
    2004:	0a f0       	brmi	.+2      	; 0x2008 <__divdi3_moddi3+0x8>
    2006:	27 c0       	rjmp	.+78     	; 0x2056 <__udivdi3_umoddi3>
    2008:	a0 e0       	ldi	r26, 0x00	; 0
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	e9 e0       	ldi	r30, 0x09	; 9
    200e:	f0 e1       	ldi	r31, 0x10	; 16
    2010:	93 c0       	rjmp	.+294    	; 0x2138 <__prologue_saves__+0xc>
    2012:	09 2e       	mov	r0, r25
    2014:	05 94       	asr	r0
    2016:	1a f4       	brpl	.+6      	; 0x201e <__divdi3_moddi3+0x1e>
    2018:	79 d0       	rcall	.+242    	; 0x210c <__negdi2>
    201a:	11 23       	and	r17, r17
    201c:	92 f4       	brpl	.+36     	; 0x2042 <__divdi3_moddi3+0x42>
    201e:	f0 e8       	ldi	r31, 0x80	; 128
    2020:	0f 26       	eor	r0, r31
    2022:	ff ef       	ldi	r31, 0xFF	; 255
    2024:	e0 94       	com	r14
    2026:	f0 94       	com	r15
    2028:	00 95       	com	r16
    202a:	10 95       	com	r17
    202c:	b0 94       	com	r11
    202e:	c0 94       	com	r12
    2030:	d0 94       	com	r13
    2032:	a1 94       	neg	r10
    2034:	bf 0a       	sbc	r11, r31
    2036:	cf 0a       	sbc	r12, r31
    2038:	df 0a       	sbc	r13, r31
    203a:	ef 0a       	sbc	r14, r31
    203c:	ff 0a       	sbc	r15, r31
    203e:	0f 0b       	sbc	r16, r31
    2040:	1f 0b       	sbc	r17, r31
    2042:	13 d0       	rcall	.+38     	; 0x206a <__udivmod64>
    2044:	07 fc       	sbrc	r0, 7
    2046:	62 d0       	rcall	.+196    	; 0x210c <__negdi2>
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	ec e0       	ldi	r30, 0x0C	; 12
    204e:	90 c0       	rjmp	.+288    	; 0x2170 <__epilogue_restores__+0xc>

00002050 <__umoddi3>:
    2050:	68 94       	set
    2052:	01 c0       	rjmp	.+2      	; 0x2056 <__udivdi3_umoddi3>

00002054 <__udivdi3>:
    2054:	e8 94       	clt

00002056 <__udivdi3_umoddi3>:
    2056:	8f 92       	push	r8
    2058:	9f 92       	push	r9
    205a:	cf 93       	push	r28
    205c:	df 93       	push	r29
    205e:	05 d0       	rcall	.+10     	; 0x206a <__udivmod64>
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	9f 90       	pop	r9
    2066:	8f 90       	pop	r8
    2068:	08 95       	ret

0000206a <__udivmod64>:
    206a:	88 24       	eor	r8, r8
    206c:	99 24       	eor	r9, r9
    206e:	f4 01       	movw	r30, r8
    2070:	e4 01       	movw	r28, r8
    2072:	b0 e4       	ldi	r27, 0x40	; 64
    2074:	9f 93       	push	r25
    2076:	aa 27       	eor	r26, r26
    2078:	9a 15       	cp	r25, r10
    207a:	8b 04       	cpc	r8, r11
    207c:	9c 04       	cpc	r9, r12
    207e:	ed 05       	cpc	r30, r13
    2080:	fe 05       	cpc	r31, r14
    2082:	cf 05       	cpc	r28, r15
    2084:	d0 07       	cpc	r29, r16
    2086:	a1 07       	cpc	r26, r17
    2088:	98 f4       	brcc	.+38     	; 0x20b0 <__udivmod64+0x46>
    208a:	ad 2f       	mov	r26, r29
    208c:	dc 2f       	mov	r29, r28
    208e:	cf 2f       	mov	r28, r31
    2090:	fe 2f       	mov	r31, r30
    2092:	e9 2d       	mov	r30, r9
    2094:	98 2c       	mov	r9, r8
    2096:	89 2e       	mov	r8, r25
    2098:	98 2f       	mov	r25, r24
    209a:	87 2f       	mov	r24, r23
    209c:	76 2f       	mov	r23, r22
    209e:	65 2f       	mov	r22, r21
    20a0:	54 2f       	mov	r21, r20
    20a2:	43 2f       	mov	r20, r19
    20a4:	32 2f       	mov	r19, r18
    20a6:	22 27       	eor	r18, r18
    20a8:	b8 50       	subi	r27, 0x08	; 8
    20aa:	31 f7       	brne	.-52     	; 0x2078 <__udivmod64+0xe>
    20ac:	bf 91       	pop	r27
    20ae:	27 c0       	rjmp	.+78     	; 0x20fe <__udivmod64+0x94>
    20b0:	1b 2e       	mov	r1, r27
    20b2:	bf 91       	pop	r27
    20b4:	bb 27       	eor	r27, r27
    20b6:	22 0f       	add	r18, r18
    20b8:	33 1f       	adc	r19, r19
    20ba:	44 1f       	adc	r20, r20
    20bc:	55 1f       	adc	r21, r21
    20be:	66 1f       	adc	r22, r22
    20c0:	77 1f       	adc	r23, r23
    20c2:	88 1f       	adc	r24, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	88 1c       	adc	r8, r8
    20c8:	99 1c       	adc	r9, r9
    20ca:	ee 1f       	adc	r30, r30
    20cc:	ff 1f       	adc	r31, r31
    20ce:	cc 1f       	adc	r28, r28
    20d0:	dd 1f       	adc	r29, r29
    20d2:	aa 1f       	adc	r26, r26
    20d4:	bb 1f       	adc	r27, r27
    20d6:	8a 14       	cp	r8, r10
    20d8:	9b 04       	cpc	r9, r11
    20da:	ec 05       	cpc	r30, r12
    20dc:	fd 05       	cpc	r31, r13
    20de:	ce 05       	cpc	r28, r14
    20e0:	df 05       	cpc	r29, r15
    20e2:	a0 07       	cpc	r26, r16
    20e4:	b1 07       	cpc	r27, r17
    20e6:	48 f0       	brcs	.+18     	; 0x20fa <__udivmod64+0x90>
    20e8:	8a 18       	sub	r8, r10
    20ea:	9b 08       	sbc	r9, r11
    20ec:	ec 09       	sbc	r30, r12
    20ee:	fd 09       	sbc	r31, r13
    20f0:	ce 09       	sbc	r28, r14
    20f2:	df 09       	sbc	r29, r15
    20f4:	a0 0b       	sbc	r26, r16
    20f6:	b1 0b       	sbc	r27, r17
    20f8:	21 60       	ori	r18, 0x01	; 1
    20fa:	1a 94       	dec	r1
    20fc:	e1 f6       	brne	.-72     	; 0x20b6 <__udivmod64+0x4c>
    20fe:	2e f4       	brtc	.+10     	; 0x210a <__udivmod64+0xa0>
    2100:	94 01       	movw	r18, r8
    2102:	af 01       	movw	r20, r30
    2104:	be 01       	movw	r22, r28
    2106:	cd 01       	movw	r24, r26
    2108:	00 0c       	add	r0, r0
    210a:	08 95       	ret

0000210c <__negdi2>:
    210c:	60 95       	com	r22
    210e:	70 95       	com	r23
    2110:	80 95       	com	r24
    2112:	90 95       	com	r25
    2114:	30 95       	com	r19
    2116:	40 95       	com	r20
    2118:	50 95       	com	r21
    211a:	21 95       	neg	r18
    211c:	3f 4f       	sbci	r19, 0xFF	; 255
    211e:	4f 4f       	sbci	r20, 0xFF	; 255
    2120:	5f 4f       	sbci	r21, 0xFF	; 255
    2122:	6f 4f       	sbci	r22, 0xFF	; 255
    2124:	7f 4f       	sbci	r23, 0xFF	; 255
    2126:	8f 4f       	sbci	r24, 0xFF	; 255
    2128:	9f 4f       	sbci	r25, 0xFF	; 255
    212a:	08 95       	ret

0000212c <__prologue_saves__>:
    212c:	2f 92       	push	r2
    212e:	3f 92       	push	r3
    2130:	4f 92       	push	r4
    2132:	5f 92       	push	r5
    2134:	6f 92       	push	r6
    2136:	7f 92       	push	r7
    2138:	8f 92       	push	r8
    213a:	9f 92       	push	r9
    213c:	af 92       	push	r10
    213e:	bf 92       	push	r11
    2140:	cf 92       	push	r12
    2142:	df 92       	push	r13
    2144:	ef 92       	push	r14
    2146:	ff 92       	push	r15
    2148:	0f 93       	push	r16
    214a:	1f 93       	push	r17
    214c:	cf 93       	push	r28
    214e:	df 93       	push	r29
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
    2154:	ca 1b       	sub	r28, r26
    2156:	db 0b       	sbc	r29, r27
    2158:	0f b6       	in	r0, 0x3f	; 63
    215a:	f8 94       	cli
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	cd bf       	out	0x3d, r28	; 61
    2162:	09 94       	ijmp

00002164 <__epilogue_restores__>:
    2164:	2a 88       	ldd	r2, Y+18	; 0x12
    2166:	39 88       	ldd	r3, Y+17	; 0x11
    2168:	48 88       	ldd	r4, Y+16	; 0x10
    216a:	5f 84       	ldd	r5, Y+15	; 0x0f
    216c:	6e 84       	ldd	r6, Y+14	; 0x0e
    216e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2170:	8c 84       	ldd	r8, Y+12	; 0x0c
    2172:	9b 84       	ldd	r9, Y+11	; 0x0b
    2174:	aa 84       	ldd	r10, Y+10	; 0x0a
    2176:	b9 84       	ldd	r11, Y+9	; 0x09
    2178:	c8 84       	ldd	r12, Y+8	; 0x08
    217a:	df 80       	ldd	r13, Y+7	; 0x07
    217c:	ee 80       	ldd	r14, Y+6	; 0x06
    217e:	fd 80       	ldd	r15, Y+5	; 0x05
    2180:	0c 81       	ldd	r16, Y+4	; 0x04
    2182:	1b 81       	ldd	r17, Y+3	; 0x03
    2184:	aa 81       	ldd	r26, Y+2	; 0x02
    2186:	b9 81       	ldd	r27, Y+1	; 0x01
    2188:	ce 0f       	add	r28, r30
    218a:	d1 1d       	adc	r29, r1
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	f8 94       	cli
    2190:	de bf       	out	0x3e, r29	; 62
    2192:	0f be       	out	0x3f, r0	; 63
    2194:	cd bf       	out	0x3d, r28	; 61
    2196:	ed 01       	movw	r28, r26
    2198:	08 95       	ret

0000219a <__ashrdi3>:
    219a:	97 fb       	bst	r25, 7
    219c:	10 f8       	bld	r1, 0

0000219e <__lshrdi3>:
    219e:	16 94       	lsr	r1
    21a0:	00 08       	sbc	r0, r0
    21a2:	0f 93       	push	r16
    21a4:	08 30       	cpi	r16, 0x08	; 8
    21a6:	98 f0       	brcs	.+38     	; 0x21ce <__lshrdi3+0x30>
    21a8:	08 50       	subi	r16, 0x08	; 8
    21aa:	23 2f       	mov	r18, r19
    21ac:	34 2f       	mov	r19, r20
    21ae:	45 2f       	mov	r20, r21
    21b0:	56 2f       	mov	r21, r22
    21b2:	67 2f       	mov	r22, r23
    21b4:	78 2f       	mov	r23, r24
    21b6:	89 2f       	mov	r24, r25
    21b8:	90 2d       	mov	r25, r0
    21ba:	f4 cf       	rjmp	.-24     	; 0x21a4 <__lshrdi3+0x6>
    21bc:	05 94       	asr	r0
    21be:	97 95       	ror	r25
    21c0:	87 95       	ror	r24
    21c2:	77 95       	ror	r23
    21c4:	67 95       	ror	r22
    21c6:	57 95       	ror	r21
    21c8:	47 95       	ror	r20
    21ca:	37 95       	ror	r19
    21cc:	27 95       	ror	r18
    21ce:	0a 95       	dec	r16
    21d0:	aa f7       	brpl	.-22     	; 0x21bc <__lshrdi3+0x1e>
    21d2:	0f 91       	pop	r16
    21d4:	08 95       	ret

000021d6 <__cmpdi2_s8>:
    21d6:	00 24       	eor	r0, r0
    21d8:	a7 fd       	sbrc	r26, 7
    21da:	00 94       	com	r0
    21dc:	2a 17       	cp	r18, r26
    21de:	30 05       	cpc	r19, r0
    21e0:	40 05       	cpc	r20, r0
    21e2:	50 05       	cpc	r21, r0
    21e4:	60 05       	cpc	r22, r0
    21e6:	70 05       	cpc	r23, r0
    21e8:	80 05       	cpc	r24, r0
    21ea:	90 05       	cpc	r25, r0
    21ec:	08 95       	ret

000021ee <_exit>:
    21ee:	f8 94       	cli

000021f0 <__stop_program>:
    21f0:	ff cf       	rjmp	.-2      	; 0x21f0 <__stop_program>
