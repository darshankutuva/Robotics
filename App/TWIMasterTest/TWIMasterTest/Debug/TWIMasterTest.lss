
TWIMasterTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002dc  00800100  00001a6a  00001afe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  008003dc  008003dc  00001dda  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001dda  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  00001e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001add  00000000  00000000  00001f82  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000751  00000000  00000000  00003a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001290  00000000  00000000  000041b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000808  00000000  00000000  00005440  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a96  00000000  00000000  00005c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002e6e  00000000  00000000  000066de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  0000954c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5b c0       	rjmp	.+182    	; 0xb8 <__ctors_end>
       2:	00 00       	nop
       4:	77 c0       	rjmp	.+238    	; 0xf4 <__bad_interrupt>
       6:	00 00       	nop
       8:	75 c0       	rjmp	.+234    	; 0xf4 <__bad_interrupt>
       a:	00 00       	nop
       c:	73 c0       	rjmp	.+230    	; 0xf4 <__bad_interrupt>
       e:	00 00       	nop
      10:	71 c0       	rjmp	.+226    	; 0xf4 <__bad_interrupt>
      12:	00 00       	nop
      14:	6f c0       	rjmp	.+222    	; 0xf4 <__bad_interrupt>
      16:	00 00       	nop
      18:	6d c0       	rjmp	.+218    	; 0xf4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6b c0       	rjmp	.+214    	; 0xf4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	69 c0       	rjmp	.+210    	; 0xf4 <__bad_interrupt>
      22:	00 00       	nop
      24:	67 c0       	rjmp	.+206    	; 0xf4 <__bad_interrupt>
      26:	00 00       	nop
      28:	65 c0       	rjmp	.+202    	; 0xf4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	63 c0       	rjmp	.+198    	; 0xf4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	61 c0       	rjmp	.+194    	; 0xf4 <__bad_interrupt>
      32:	00 00       	nop
      34:	5f c0       	rjmp	.+190    	; 0xf4 <__bad_interrupt>
      36:	00 00       	nop
      38:	5d c0       	rjmp	.+186    	; 0xf4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5b c0       	rjmp	.+182    	; 0xf4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 5c 0b 	jmp	0x16b8	; 0x16b8 <__vector_16>
      44:	57 c0       	rjmp	.+174    	; 0xf4 <__bad_interrupt>
      46:	00 00       	nop
      48:	55 c0       	rjmp	.+170    	; 0xf4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	53 c0       	rjmp	.+166    	; 0xf4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <__vector_20>
      54:	4f c0       	rjmp	.+158    	; 0xf4 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <__vector_22>
      5c:	4b c0       	rjmp	.+150    	; 0xf4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	49 c0       	rjmp	.+146    	; 0xf4 <__bad_interrupt>
      62:	00 00       	nop
      64:	47 c0       	rjmp	.+142    	; 0xf4 <__bad_interrupt>
      66:	00 00       	nop
      68:	45 c0       	rjmp	.+138    	; 0xf4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	43 c0       	rjmp	.+134    	; 0xf4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__vector_28>
      74:	3f c0       	rjmp	.+126    	; 0xf4 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__vector_30>
      7c:	3b c0       	rjmp	.+118    	; 0xf4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	39 c0       	rjmp	.+114    	; 0xf4 <__bad_interrupt>
      82:	00 00       	nop
      84:	37 c0       	rjmp	.+110    	; 0xf4 <__bad_interrupt>
      86:	00 00       	nop
      88:	35 c0       	rjmp	.+106    	; 0xf4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	47 07       	cpc	r20, r23
      8e:	59 07       	cpc	r21, r25
      90:	30 08       	sbc	r3, r0
      92:	1c 08       	sbc	r1, r12
      94:	30 08       	sbc	r3, r0
      96:	30 08       	sbc	r3, r0
      98:	30 08       	sbc	r3, r0
      9a:	30 08       	sbc	r3, r0
      9c:	30 08       	sbc	r3, r0
      9e:	0f 08       	sbc	r0, r15
      a0:	30 08       	sbc	r3, r0
      a2:	30 08       	sbc	r3, r0
      a4:	30 08       	sbc	r3, r0
      a6:	30 08       	sbc	r3, r0
      a8:	30 08       	sbc	r3, r0
      aa:	30 08       	sbc	r3, r0
      ac:	14 08       	sbc	r1, r4
      ae:	30 08       	sbc	r3, r0
      b0:	9b 07       	cpc	r25, r27
      b2:	30 08       	sbc	r3, r0
      b4:	30 08       	sbc	r3, r0
      b6:	d7 07       	cpc	r29, r23

000000b8 <__ctors_end>:
      b8:	11 24       	eor	r1, r1
      ba:	1f be       	out	0x3f, r1	; 63
      bc:	cf ef       	ldi	r28, 0xFF	; 255
      be:	d0 e4       	ldi	r29, 0x40	; 64
      c0:	de bf       	out	0x3e, r29	; 62
      c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
      c4:	13 e0       	ldi	r17, 0x03	; 3
      c6:	a0 e0       	ldi	r26, 0x00	; 0
      c8:	b1 e0       	ldi	r27, 0x01	; 1
      ca:	ea e6       	ldi	r30, 0x6A	; 106
      cc:	fa e1       	ldi	r31, 0x1A	; 26
      ce:	00 e0       	ldi	r16, 0x00	; 0
      d0:	0b bf       	out	0x3b, r16	; 59
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x14>
      d4:	07 90       	elpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	ac 3d       	cpi	r26, 0xDC	; 220
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0x10>

000000de <__do_clear_bss>:
      de:	23 e0       	ldi	r18, 0x03	; 3
      e0:	ac ed       	ldi	r26, 0xDC	; 220
      e2:	b3 e0       	ldi	r27, 0x03	; 3
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	a5 3f       	cpi	r26, 0xF5	; 245
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>
      ee:	03 d0       	rcall	.+6      	; 0xf6 <main>
      f0:	0c 94 33 0d 	jmp	0x1a66	; 0x1a66 <_exit>

000000f4 <__bad_interrupt>:
      f4:	85 cf       	rjmp	.-246    	; 0x0 <__vectors>

000000f6 <main>:
#include "TWI.h"

#define SLAVE_ADDRESS	0x27

int main(void)
{
      f6:	cf 92       	push	r12
      f8:	df 92       	push	r13
      fa:	ef 92       	push	r14
      fc:	ff 92       	push	r15
      fe:	0f 93       	push	r16
     100:	1f 93       	push	r17
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	00 d0       	rcall	.+0      	; 0x108 <main+0x12>
     108:	00 d0       	rcall	.+0      	; 0x10a <main+0x14>
     10a:	1f 92       	push	r1
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
	
	//
	// Init Tracing
	//
	
	InitTrace(F_CPU, ERROR_LEVEL | INFO_LEVEL);
     110:	45 e0       	ldi	r20, 0x05	; 5
     112:	60 e0       	ldi	r22, 0x00	; 0
     114:	72 e1       	ldi	r23, 0x12	; 18
     116:	8a e7       	ldi	r24, 0x7A	; 122
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	7c d3       	rcall	.+1784   	; 0x814 <InitTrace>
	
	SendTrace(INFO_LEVEL, "TWI Master Test\r\n");
     11c:	80 e0       	ldi	r24, 0x00	; 0
     11e:	91 e0       	ldi	r25, 0x01	; 1
     120:	9f 93       	push	r25
     122:	8f 93       	push	r24
     124:	14 e0       	ldi	r17, 0x04	; 4
     126:	1f 93       	push	r17
     128:	6d d6       	rcall	.+3290   	; 0xe04 <SendTrace>
	
	SendTrace(INFO_LEVEL, "---------------\r\n");
     12a:	82 e1       	ldi	r24, 0x12	; 18
     12c:	91 e0       	ldi	r25, 0x01	; 1
     12e:	9f 93       	push	r25
     130:	8f 93       	push	r24
     132:	1f 93       	push	r17
     134:	67 d6       	rcall	.+3278   	; 0xe04 <SendTrace>
	
	//
	// Initialize TWI in Master Mode
	//
	
	InitTWI(TWI_MASTER, NULL, NULL);
     136:	40 e0       	ldi	r20, 0x00	; 0
     138:	50 e0       	ldi	r21, 0x00	; 0
     13a:	60 e0       	ldi	r22, 0x00	; 0
     13c:	70 e0       	ldi	r23, 0x00	; 0
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	5b d0       	rcall	.+182    	; 0x1f8 <InitTWI>
	
	SlaveAddress.Address = SLAVE_ADDRESS;
     142:	8d 81       	ldd	r24, Y+5	; 0x05
     144:	81 70       	andi	r24, 0x01	; 1
     146:	8e 64       	ori	r24, 0x4E	; 78
     148:	8d 83       	std	Y+5, r24	; 0x05
	
	
	
	for (IndexI = 0; IndexI < 1000; IndexI++)
     14a:	1a 82       	std	Y+2, r1	; 0x02
     14c:	19 82       	std	Y+1, r1	; 0x01
     14e:	0f 90       	pop	r0
     150:	0f 90       	pop	r0
     152:	0f 90       	pop	r0
     154:	0f 90       	pop	r0
     156:	0f 90       	pop	r0
     158:	0f 90       	pop	r0
	{
		TwiTransmit(&IndexI, sizeof(unsigned int), &SlaveAddress, FALSE);
			
		SendTrace(INFO_LEVEL, "Data Transmitted = 0x%x\r\n", IndexI);
     15a:	0f 2e       	mov	r0, r31
     15c:	f4 e2       	ldi	r31, 0x24	; 36
     15e:	cf 2e       	mov	r12, r31
     160:	f1 e0       	ldi	r31, 0x01	; 1
     162:	df 2e       	mov	r13, r31
     164:	f0 2d       	mov	r31, r0
			
		TwiReceive(&Value, sizeof(unsigned int), &SlaveAddress, TRUE);
			
		SendTrace(INFO_LEVEL, "Data Received = 0x%x\r\n", Value);	
     166:	0f 2e       	mov	r0, r31
     168:	fe e3       	ldi	r31, 0x3E	; 62
     16a:	ef 2e       	mov	r14, r31
     16c:	f1 e0       	ldi	r31, 0x01	; 1
     16e:	ff 2e       	mov	r15, r31
     170:	f0 2d       	mov	r31, r0
	
	
	
	for (IndexI = 0; IndexI < 1000; IndexI++)
	{
		TwiTransmit(&IndexI, sizeof(unsigned int), &SlaveAddress, FALSE);
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	9e 01       	movw	r18, r28
     176:	2b 5f       	subi	r18, 0xFB	; 251
     178:	3f 4f       	sbci	r19, 0xFF	; 255
     17a:	42 e0       	ldi	r20, 0x02	; 2
     17c:	50 e0       	ldi	r21, 0x00	; 0
     17e:	60 e0       	ldi	r22, 0x00	; 0
     180:	70 e0       	ldi	r23, 0x00	; 0
     182:	ce 01       	movw	r24, r28
     184:	01 96       	adiw	r24, 0x01	; 1
     186:	a7 d1       	rcall	.+846    	; 0x4d6 <TwiTransmit>
			
		SendTrace(INFO_LEVEL, "Data Transmitted = 0x%x\r\n", IndexI);
     188:	8a 81       	ldd	r24, Y+2	; 0x02
     18a:	8f 93       	push	r24
     18c:	89 81       	ldd	r24, Y+1	; 0x01
     18e:	8f 93       	push	r24
     190:	df 92       	push	r13
     192:	cf 92       	push	r12
     194:	1f 93       	push	r17
     196:	36 d6       	rcall	.+3180   	; 0xe04 <SendTrace>
			
		TwiReceive(&Value, sizeof(unsigned int), &SlaveAddress, TRUE);
     198:	01 e0       	ldi	r16, 0x01	; 1
     19a:	9e 01       	movw	r18, r28
     19c:	2b 5f       	subi	r18, 0xFB	; 251
     19e:	3f 4f       	sbci	r19, 0xFF	; 255
     1a0:	42 e0       	ldi	r20, 0x02	; 2
     1a2:	50 e0       	ldi	r21, 0x00	; 0
     1a4:	60 e0       	ldi	r22, 0x00	; 0
     1a6:	70 e0       	ldi	r23, 0x00	; 0
     1a8:	ce 01       	movw	r24, r28
     1aa:	03 96       	adiw	r24, 0x03	; 3
     1ac:	ef d2       	rcall	.+1502   	; 0x78c <TwiReceive>
			
		SendTrace(INFO_LEVEL, "Data Received = 0x%x\r\n", Value);	
     1ae:	8c 81       	ldd	r24, Y+4	; 0x04
     1b0:	8f 93       	push	r24
     1b2:	8b 81       	ldd	r24, Y+3	; 0x03
     1b4:	8f 93       	push	r24
     1b6:	ff 92       	push	r15
     1b8:	ef 92       	push	r14
     1ba:	1f 93       	push	r17
     1bc:	23 d6       	rcall	.+3142   	; 0xe04 <SendTrace>
	
	SlaveAddress.Address = SLAVE_ADDRESS;
	
	
	
	for (IndexI = 0; IndexI < 1000; IndexI++)
     1be:	89 81       	ldd	r24, Y+1	; 0x01
     1c0:	9a 81       	ldd	r25, Y+2	; 0x02
     1c2:	01 96       	adiw	r24, 0x01	; 1
     1c4:	9a 83       	std	Y+2, r25	; 0x02
     1c6:	89 83       	std	Y+1, r24	; 0x01
     1c8:	0f b6       	in	r0, 0x3f	; 63
     1ca:	f8 94       	cli
     1cc:	de bf       	out	0x3e, r29	; 62
     1ce:	0f be       	out	0x3f, r0	; 63
     1d0:	cd bf       	out	0x3d, r28	; 61
     1d2:	88 3e       	cpi	r24, 0xE8	; 232
     1d4:	93 40       	sbci	r25, 0x03	; 3
     1d6:	68 f2       	brcs	.-102    	; 0x172 <main+0x7c>
			
		TwiReceive(&Value, sizeof(unsigned int), &SlaveAddress, TRUE);
			
		SendTrace(INFO_LEVEL, "Data Received = 0x%x\r\n", Value);	
	}
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	0f 90       	pop	r0
     1de:	0f 90       	pop	r0
     1e0:	0f 90       	pop	r0
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	df 91       	pop	r29
     1e8:	cf 91       	pop	r28
     1ea:	1f 91       	pop	r17
     1ec:	0f 91       	pop	r16
     1ee:	ff 90       	pop	r15
     1f0:	ef 90       	pop	r14
     1f2:	df 90       	pop	r13
     1f4:	cf 90       	pop	r12
     1f6:	08 95       	ret

000001f8 <InitTWI>:
bool
InitTWI(TWI_MODE Mode, PTWI_ADDRESS Address, PTWI_ADDRESS_MASK AddressMask)
{	
	bool Status = TRUE;
	
	if (Mode == TWI_SLAVE)
     1f8:	81 11       	cpse	r24, r1
     1fa:	20 c0       	rjmp	.+64     	; 0x23c <InitTWI+0x44>
	{
		if (Address != NULL && AddressMask != NULL)
     1fc:	61 15       	cp	r22, r1
     1fe:	71 05       	cpc	r23, r1
     200:	89 f0       	breq	.+34     	; 0x224 <InitTWI+0x2c>
     202:	41 15       	cp	r20, r1
     204:	51 05       	cpc	r21, r1
     206:	71 f0       	breq	.+28     	; 0x224 <InitTWI+0x2c>
		{
			//
			// Set Slave Address and Mask
			//
				
			TWAR = Address->AsUINT8;
     208:	fb 01       	movw	r30, r22
     20a:	80 81       	ld	r24, Z
     20c:	80 93 ba 00 	sts	0x00BA, r24
				
			TWAMR = AddressMask->AsUINT8;
     210:	fa 01       	movw	r30, r20
     212:	80 81       	ld	r24, Z
     214:	80 93 bd 00 	sts	0x00BD, r24
			
			//
			// Set Data and Clock to IN
			//
			
			DDRC &= ~((0x1 << PORTC0) | (0x1 << PORTC1));
     218:	87 b1       	in	r24, 0x07	; 7
     21a:	8c 7f       	andi	r24, 0xFC	; 252
     21c:	87 b9       	out	0x07, r24	; 7
			
			gMode = TWI_SLAVE;
     21e:	10 92 e1 03 	sts	0x03E1, r1
     222:	12 c0       	rjmp	.+36     	; 0x248 <InitTWI+0x50>
		}
		else
		{
			SendTrace(ERROR_LEVEL, "InitTWI - Invalid Parameters\r\n");
     224:	85 e5       	ldi	r24, 0x55	; 85
     226:	91 e0       	ldi	r25, 0x01	; 1
     228:	9f 93       	push	r25
     22a:	8f 93       	push	r24
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	8f 93       	push	r24
     230:	e9 d5       	rcall	.+3026   	; 0xe04 <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
     236:	0f 90       	pop	r0
		}
		else
		{
			SendTrace(ERROR_LEVEL, "InitTWI - Invalid Parameters\r\n");
			
			Status = FALSE;
     238:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
     23a:	08 95       	ret
		}
	}
	else
	{
		gMode = TWI_MASTER;
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	80 93 e1 03 	sts	0x03E1, r24
		
		//
		// Set Data and Clock to Out
		//
		
		DDRC |= ((0x1 << PORTC0) | (0x1 << PORTC1));
     242:	87 b1       	in	r24, 0x07	; 7
     244:	83 60       	ori	r24, 0x03	; 3
     246:	87 b9       	out	0x07, r24	; 7
	//
	// Set TWI Bit Rate Register to 8 so that
	// SCL is set to 100 KHz.
	//

	TWBR = BIT_RATE_VALUE;
     248:	80 e2       	ldi	r24, 0x20	; 32
     24a:	80 93 b8 00 	sts	0x00B8, r24
	
	//
	// Set Pre-scalar value to 1
	//

	TWSR = 0;
     24e:	10 92 b9 00 	sts	0x00B9, r1
	
	//
	// Set TWI Control Register
	//
	
	TWCR = (0x1 << TWEN) | (0x1 << TWEA);
     252:	84 e4       	ldi	r24, 0x44	; 68
     254:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     258:	ff ef       	ldi	r31, 0xFF	; 255
     25a:	20 e7       	ldi	r18, 0x70	; 112
     25c:	82 e0       	ldi	r24, 0x02	; 2
     25e:	f1 50       	subi	r31, 0x01	; 1
     260:	20 40       	sbci	r18, 0x00	; 0
     262:	80 40       	sbci	r24, 0x00	; 0
     264:	e1 f7       	brne	.-8      	; 0x25e <InitTWI+0x66>
     266:	00 c0       	rjmp	.+0      	; 0x268 <InitTWI+0x70>
     268:	00 00       	nop
	// Wait for 100 ms for bus to settle down
	//
	
	_delay_ms(100);
	
	gIsRepeatedStart = FALSE;
     26a:	10 92 dc 03 	sts	0x03DC, r1
	
	gIsTWIInitialized = TRUE;
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	80 93 dd 03 	sts	0x03DD, r24

Exit:

	return Status;
}
     274:	08 95       	ret

00000276 <SendStartCondition>:
	
	//
	// Send Start Condition
	//
	
	ENABLE_START();
     276:	ec eb       	ldi	r30, 0xBC	; 188
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	80 81       	ld	r24, Z
     27c:	8f 75       	andi	r24, 0x5F	; 95
     27e:	80 62       	ori	r24, 0x20	; 32
     280:	80 83       	st	Z, r24
	
	WAIT_FOR_OP_COMPLETION();
     282:	80 81       	ld	r24, Z
     284:	80 68       	ori	r24, 0x80	; 128
     286:	80 83       	st	Z, r24
     288:	80 81       	ld	r24, Z
     28a:	88 23       	and	r24, r24
     28c:	ec f7       	brge	.-6      	; 0x288 <SendStartCondition+0x12>
	
	DISABLE_START();
     28e:	ec eb       	ldi	r30, 0xBC	; 188
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	80 81       	ld	r24, Z
     294:	8f 75       	andi	r24, 0x5F	; 95
     296:	80 83       	st	Z, r24
	
	if (gIsRepeatedStart)
     298:	80 91 dc 03 	lds	r24, 0x03DC
     29c:	88 23       	and	r24, r24
     29e:	41 f0       	breq	.+16     	; 0x2b0 <SendStartCondition+0x3a>
	{
		Status = ProcessTwiStatus(REPEATED_START_TRANSMITTED);
     2a0:	90 91 b9 00 	lds	r25, 0x00B9
     2a4:	98 7f       	andi	r25, 0xF8	; 248
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	90 31       	cpi	r25, 0x10	; 16
     2aa:	49 f0       	breq	.+18     	; 0x2be <SendStartCondition+0x48>
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	08 95       	ret
	}
	else
	{
		Status = ProcessTwiStatus(START_TRANSMITTED);
     2b0:	90 91 b9 00 	lds	r25, 0x00B9
     2b4:	98 7f       	andi	r25, 0xF8	; 248
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	98 30       	cpi	r25, 0x08	; 8
     2ba:	09 f0       	breq	.+2      	; 0x2be <SendStartCondition+0x48>
     2bc:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return Status;
}
     2be:	08 95       	ret

000002c0 <SendStopCondition>:

void
SendStopCondition()
{	
	ENABLE_STOP();
     2c0:	ec eb       	ldi	r30, 0xBC	; 188
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	80 81       	ld	r24, Z
     2c6:	8f 76       	andi	r24, 0x6F	; 111
     2c8:	80 61       	ori	r24, 0x10	; 16
     2ca:	80 83       	st	Z, r24
	
	//
	// Send the Stop condition by clearing the TWINT flag
	//
	
	TWCR |= (1 << TWINT);
     2cc:	80 81       	ld	r24, Z
     2ce:	80 68       	ori	r24, 0x80	; 128
     2d0:	80 83       	st	Z, r24
	//
	// TWINT is not set after stop condition.
	// Instead TWSTO bit in TWCR is cleared.
	//
	
	while (!(TWCR & (0x1 << TWSTO)));
     2d2:	80 81       	ld	r24, Z
     2d4:	84 ff       	sbrs	r24, 4
     2d6:	fd cf       	rjmp	.-6      	; 0x2d2 <SendStopCondition+0x12>
}
     2d8:	08 95       	ret

000002da <Transmit>:

bool
Transmit(PVOID Buffer, unsigned long Length)
{
     2da:	8f 92       	push	r8
     2dc:	9f 92       	push	r9
     2de:	af 92       	push	r10
     2e0:	bf 92       	push	r11
     2e2:	df 92       	push	r13
     2e4:	ef 92       	push	r14
     2e6:	ff 92       	push	r15
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
	
	unsigned char *BytePtr;
	
	TWI_STATUS TransmitStatus;
	
	if (gMode == TWI_MASTER)
     2f0:	20 91 e1 03 	lds	r18, 0x03E1
     2f4:	21 30       	cpi	r18, 0x01	; 1
     2f6:	29 f4       	brne	.+10     	; 0x302 <Transmit+0x28>
	{
		TransmitStatus = DATA_TRANSMITTED_ACK;
     2f8:	0f 2e       	mov	r0, r31
     2fa:	f8 e2       	ldi	r31, 0x28	; 40
     2fc:	df 2e       	mov	r13, r31
     2fe:	f0 2d       	mov	r31, r0
     300:	04 c0       	rjmp	.+8      	; 0x30a <Transmit+0x30>
	}
	else
	{
		TransmitStatus = SLA_R_DATA_TRANSMITTED_ACK;
     302:	0f 2e       	mov	r0, r31
     304:	f8 eb       	ldi	r31, 0xB8	; 184
     306:	df 2e       	mov	r13, r31
     308:	f0 2d       	mov	r31, r0
	// Now transmit the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
     30a:	4a 01       	movw	r8, r20
     30c:	5b 01       	movw	r10, r22
     30e:	21 e0       	ldi	r18, 0x01	; 1
     310:	82 1a       	sub	r8, r18
     312:	91 08       	sbc	r9, r1
     314:	a1 08       	sbc	r10, r1
     316:	b1 08       	sbc	r11, r1
     318:	81 14       	cp	r8, r1
     31a:	91 04       	cpc	r9, r1
     31c:	a1 04       	cpc	r10, r1
     31e:	b1 04       	cpc	r11, r1
     320:	e1 f1       	breq	.+120    	; 0x39a <Transmit+0xc0>
     322:	dc 01       	movw	r26, r24
     324:	00 e0       	ldi	r16, 0x00	; 0
     326:	10 e0       	ldi	r17, 0x00	; 0
     328:	98 01       	movw	r18, r16
	{
		TWDR = *BytePtr;
     32a:	4b eb       	ldi	r20, 0xBB	; 187
     32c:	50 e0       	ldi	r21, 0x00	; 0
		
		WAIT_FOR_OP_COMPLETION();
     32e:	ec eb       	ldi	r30, 0xBC	; 188
     330:	f0 e0       	ldi	r31, 0x00	; 0
		
		if (!ProcessTwiStatus(TransmitStatus))
     332:	0f 2e       	mov	r0, r31
     334:	f9 eb       	ldi	r31, 0xB9	; 185
     336:	ef 2e       	mov	r14, r31
     338:	f1 2c       	mov	r15, r1
     33a:	f0 2d       	mov	r31, r0
     33c:	6d 2d       	mov	r22, r13
     33e:	70 e0       	ldi	r23, 0x00	; 0
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
	{
		TWDR = *BytePtr;
     340:	8d 91       	ld	r24, X+
     342:	ea 01       	movw	r28, r20
     344:	88 83       	st	Y, r24
		
		WAIT_FOR_OP_COMPLETION();
     346:	80 81       	ld	r24, Z
     348:	80 68       	ori	r24, 0x80	; 128
     34a:	80 83       	st	Z, r24
     34c:	80 81       	ld	r24, Z
     34e:	88 23       	and	r24, r24
     350:	ec f7       	brge	.-6      	; 0x34c <Transmit+0x72>
		
		if (!ProcessTwiStatus(TransmitStatus))
     352:	e7 01       	movw	r28, r14
     354:	88 81       	ld	r24, Y
     356:	88 7f       	andi	r24, 0xF8	; 248
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	86 17       	cp	r24, r22
     35c:	97 07       	cpc	r25, r23
     35e:	99 f0       	breq	.+38     	; 0x386 <Transmit+0xac>
		{
			SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     360:	80 91 b9 00 	lds	r24, 0x00B9
     364:	88 7f       	andi	r24, 0xF8	; 248
     366:	1f 92       	push	r1
     368:	8f 93       	push	r24
     36a:	84 e7       	ldi	r24, 0x74	; 116
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	9f 93       	push	r25
     370:	8f 93       	push	r24
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	8f 93       	push	r24
     376:	46 d5       	rcall	.+2700   	; 0xe04 <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
     378:	0f 90       	pop	r0
     37a:	0f 90       	pop	r0
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(TransmitStatus))
		{
			SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
			
			Status = FALSE;
     382:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
     384:	3b c0       	rjmp	.+118    	; 0x3fc <Transmit+0x122>
		}
		
		BytePtr++;
     386:	cd 01       	movw	r24, r26
	// Now transmit the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
     388:	0f 5f       	subi	r16, 0xFF	; 255
     38a:	1f 4f       	sbci	r17, 0xFF	; 255
     38c:	2f 4f       	sbci	r18, 0xFF	; 255
     38e:	3f 4f       	sbci	r19, 0xFF	; 255
     390:	08 15       	cp	r16, r8
     392:	19 05       	cpc	r17, r9
     394:	2a 05       	cpc	r18, r10
     396:	3b 05       	cpc	r19, r11
     398:	98 f2       	brcs	.-90     	; 0x340 <Transmit+0x66>
	
	//
	// In slave mode after transmitting the last byte we will get a NACK from the Master
	//
	
	if (gMode == TWI_SLAVE)
     39a:	20 91 e1 03 	lds	r18, 0x03E1
     39e:	21 11       	cpse	r18, r1
     3a0:	04 c0       	rjmp	.+8      	; 0x3aa <Transmit+0xd0>
	{
		TransmitStatus = SLA_R_DATA_TRANSMITTED_NACK;
     3a2:	0f 2e       	mov	r0, r31
     3a4:	f0 ec       	ldi	r31, 0xC0	; 192
     3a6:	df 2e       	mov	r13, r31
     3a8:	f0 2d       	mov	r31, r0
	}
	
	TWDR = *BytePtr;
     3aa:	fc 01       	movw	r30, r24
     3ac:	80 81       	ld	r24, Z
     3ae:	80 93 bb 00 	sts	0x00BB, r24
	
	WAIT_FOR_OP_COMPLETION();
     3b2:	ec eb       	ldi	r30, 0xBC	; 188
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	80 81       	ld	r24, Z
     3b8:	80 68       	ori	r24, 0x80	; 128
     3ba:	80 83       	st	Z, r24
     3bc:	80 81       	ld	r24, Z
     3be:	88 23       	and	r24, r24
     3c0:	ec f7       	brge	.-6      	; 0x3bc <Transmit+0xe2>
	
	if (!ProcessTwiStatus(TransmitStatus))
     3c2:	20 91 b9 00 	lds	r18, 0x00B9
     3c6:	28 7f       	andi	r18, 0xF8	; 248
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	8d 2d       	mov	r24, r13
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	28 17       	cp	r18, r24
     3d0:	39 07       	cpc	r19, r25
     3d2:	99 f0       	breq	.+38     	; 0x3fa <Transmit+0x120>
	{
		SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     3d4:	80 91 b9 00 	lds	r24, 0x00B9
     3d8:	88 7f       	andi	r24, 0xF8	; 248
     3da:	1f 92       	push	r1
     3dc:	8f 93       	push	r24
     3de:	84 e7       	ldi	r24, 0x74	; 116
     3e0:	91 e0       	ldi	r25, 0x01	; 1
     3e2:	9f 93       	push	r25
     3e4:	8f 93       	push	r24
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	8f 93       	push	r24
     3ea:	0c d5       	rcall	.+2584   	; 0xe04 <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	0f 90       	pop	r0
     3f2:	0f 90       	pop	r0
     3f4:	0f 90       	pop	r0
	
	if (!ProcessTwiStatus(TransmitStatus))
	{
		SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     3f6:	80 e0       	ldi	r24, 0x00	; 0
		
		goto Exit;
     3f8:	01 c0       	rjmp	.+2      	; 0x3fc <Transmit+0x122>
}

bool
Transmit(PVOID Buffer, unsigned long Length)
{
	bool Status = TRUE;
     3fa:	81 e0       	ldi	r24, 0x01	; 1
	}
	
Exit:

	return Status;	
}
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	ff 90       	pop	r15
     406:	ef 90       	pop	r14
     408:	df 90       	pop	r13
     40a:	bf 90       	pop	r11
     40c:	af 90       	pop	r10
     40e:	9f 90       	pop	r9
     410:	8f 90       	pop	r8
     412:	08 95       	ret

00000414 <TwiMasterTransmit>:
bool
TwiMasterTransmit(PVOID Buffer, 
				  unsigned long Length, 
				  PTWI_ADDRESS Address,
				  bool SendStop)
{
     414:	af 92       	push	r10
     416:	bf 92       	push	r11
     418:	cf 92       	push	r12
     41a:	df 92       	push	r13
     41c:	ef 92       	push	r14
     41e:	ff 92       	push	r15
     420:	0f 93       	push	r16
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	5c 01       	movw	r10, r24
     428:	6a 01       	movw	r12, r20
     42a:	7b 01       	movw	r14, r22
     42c:	e9 01       	movw	r28, r18
	bool Status = TRUE;
	
	if (!SendStartCondition())
     42e:	23 df       	rcall	.-442    	; 0x276 <SendStartCondition>
     430:	81 11       	cpse	r24, r1
     432:	13 c0       	rjmp	.+38     	; 0x45a <TwiMasterTransmit+0x46>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     434:	80 91 b9 00 	lds	r24, 0x00B9
     438:	88 7f       	andi	r24, 0xF8	; 248
     43a:	1f 92       	push	r1
     43c:	8f 93       	push	r24
     43e:	8a ea       	ldi	r24, 0xAA	; 170
     440:	91 e0       	ldi	r25, 0x01	; 1
     442:	9f 93       	push	r25
     444:	8f 93       	push	r24
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	8f 93       	push	r24
     44a:	dc d4       	rcall	.+2488   	; 0xe04 <SendTrace>
		
		Status = FALSE;
			
		goto Exit;
     44c:	0f 90       	pop	r0
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
	
	if (!SendStartCondition())
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     456:	c0 e0       	ldi	r28, 0x00	; 0
			
		goto Exit;
     458:	33 c0       	rjmp	.+102    	; 0x4c0 <TwiMasterTransmit+0xac>
	}
	
	gIsRepeatedStart = FALSE;
     45a:	10 92 dc 03 	sts	0x03DC, r1
	//
	// Set Address->ReadWrite = 0 indicating a write operation.
	// Then transmit SLA+W
	//
	
	Address->RW_EnGenCall = 0;
     45e:	88 81       	ld	r24, Y
     460:	8e 7f       	andi	r24, 0xFE	; 254
     462:	88 83       	st	Y, r24
	
	TWDR = Address->AsUINT8;
     464:	80 93 bb 00 	sts	0x00BB, r24
		
	WAIT_FOR_OP_COMPLETION();
     468:	ec eb       	ldi	r30, 0xBC	; 188
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	80 81       	ld	r24, Z
     46e:	80 68       	ori	r24, 0x80	; 128
     470:	80 83       	st	Z, r24
     472:	80 81       	ld	r24, Z
     474:	88 23       	and	r24, r24
     476:	ec f7       	brge	.-6      	; 0x472 <TwiMasterTransmit+0x5e>
		
	if (!ProcessTwiStatus(SLA_W_TRANSMITTED_ACK))
     478:	80 91 b9 00 	lds	r24, 0x00B9
     47c:	88 7f       	andi	r24, 0xF8	; 248
     47e:	88 31       	cpi	r24, 0x18	; 24
     480:	99 f0       	breq	.+38     	; 0x4a8 <TwiMasterTransmit+0x94>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Slave Address and Write Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     482:	80 91 b9 00 	lds	r24, 0x00B9
     486:	88 7f       	andi	r24, 0xF8	; 248
     488:	1f 92       	push	r1
     48a:	8f 93       	push	r24
     48c:	84 ef       	ldi	r24, 0xF4	; 244
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	9f 93       	push	r25
     492:	8f 93       	push	r24
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	8f 93       	push	r24
     498:	b5 d4       	rcall	.+2410   	; 0xe04 <SendTrace>
		
		Status = FALSE;
			
		goto Exit;
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
     4a2:	0f 90       	pop	r0
		
	if (!ProcessTwiStatus(SLA_W_TRANSMITTED_ACK))
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Slave Address and Write Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     4a4:	c0 e0       	ldi	r28, 0x00	; 0
			
		goto Exit;
     4a6:	0c c0       	rjmp	.+24     	; 0x4c0 <TwiMasterTransmit+0xac>
	}
	
	Status = Transmit(Buffer, Length);
     4a8:	b7 01       	movw	r22, r14
     4aa:	a6 01       	movw	r20, r12
     4ac:	c5 01       	movw	r24, r10
     4ae:	15 df       	rcall	.-470    	; 0x2da <Transmit>
     4b0:	c8 2f       	mov	r28, r24
	
	//
	// Send stop condition
	//
	
	if (SendStop)
     4b2:	00 23       	and	r16, r16
     4b4:	11 f0       	breq	.+4      	; 0x4ba <TwiMasterTransmit+0xa6>
	{
		SendStopCondition();
     4b6:	04 df       	rcall	.-504    	; 0x2c0 <SendStopCondition>
     4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <TwiMasterTransmit+0xac>
	}
	else
	{
		gIsRepeatedStart = TRUE;
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	80 93 dc 03 	sts	0x03DC, r24
	}
	
Exit:

	return Status;
}
     4c0:	8c 2f       	mov	r24, r28
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	0f 91       	pop	r16
     4c8:	ff 90       	pop	r15
     4ca:	ef 90       	pop	r14
     4cc:	df 90       	pop	r13
     4ce:	cf 90       	pop	r12
     4d0:	bf 90       	pop	r11
     4d2:	af 90       	pop	r10
     4d4:	08 95       	ret

000004d6 <TwiTransmit>:
bool 
TwiTransmit(PVOID Buffer, 
			unsigned long Length,
			PTWI_ADDRESS Address,
			bool SendStop)
{
     4d6:	0f 93       	push	r16
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
     4d8:	e0 91 dd 03 	lds	r30, 0x03DD
     4dc:	ee 23       	and	r30, r30
     4de:	09 f4       	brne	.+2      	; 0x4e2 <TwiTransmit+0xc>
     4e0:	48 c0       	rjmp	.+144    	; 0x572 <TwiTransmit+0x9c>
     4e2:	00 97       	sbiw	r24, 0x00	; 0
     4e4:	09 f4       	brne	.+2      	; 0x4e8 <TwiTransmit+0x12>
     4e6:	47 c0       	rjmp	.+142    	; 0x576 <TwiTransmit+0xa0>
		Status = FALSE;
		
		goto Exit;
	}
	
	if (gMode == TWI_MASTER)
     4e8:	e0 91 e1 03 	lds	r30, 0x03E1
     4ec:	e1 30       	cpi	r30, 0x01	; 1
     4ee:	89 f4       	brne	.+34     	; 0x512 <TwiTransmit+0x3c>
	{
		if (Address == NULL)
     4f0:	21 15       	cp	r18, r1
     4f2:	31 05       	cpc	r19, r1
     4f4:	61 f4       	brne	.+24     	; 0x50e <TwiTransmit+0x38>
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Invalid Parameters\r\n");
     4f6:	8b e4       	ldi	r24, 0x4B	; 75
     4f8:	92 e0       	ldi	r25, 0x02	; 2
     4fa:	9f 93       	push	r25
     4fc:	8f 93       	push	r24
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	8f 93       	push	r24
     502:	80 d4       	rcall	.+2304   	; 0xe04 <SendTrace>
			
			Status = FALSE;
		
			goto Exit;
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
	{
		if (Address == NULL)
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Invalid Parameters\r\n");
			
			Status = FALSE;
     50a:	80 e0       	ldi	r24, 0x00	; 0
		
			goto Exit;
     50c:	35 c0       	rjmp	.+106    	; 0x578 <TwiTransmit+0xa2>
		}
		else
		{
			Status = TwiMasterTransmit(Buffer, Length, Address, SendStop);	
     50e:	82 df       	rcall	.-252    	; 0x414 <TwiMasterTransmit>
     510:	33 c0       	rjmp	.+102    	; 0x578 <TwiTransmit+0xa2>
		}
	}
	else
	{
		WAIT_FOR_OP_COMPLETION();
     512:	ec eb       	ldi	r30, 0xBC	; 188
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	20 81       	ld	r18, Z
     518:	20 68       	ori	r18, 0x80	; 128
     51a:	20 83       	st	Z, r18
     51c:	20 81       	ld	r18, Z
     51e:	22 23       	and	r18, r18
     520:	ec f7       	brge	.-6      	; 0x51c <TwiTransmit+0x46>
		
		if (ProcessTwiStatus(STOP_REPEATED_START_RECEIVED))
     522:	20 91 b9 00 	lds	r18, 0x00B9
     526:	28 7f       	andi	r18, 0xF8	; 248
     528:	20 3a       	cpi	r18, 0xA0	; 160
     52a:	41 f4       	brne	.+16     	; 0x53c <TwiTransmit+0x66>
		{
			WAIT_FOR_OP_COMPLETION();	
     52c:	ec eb       	ldi	r30, 0xBC	; 188
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	20 81       	ld	r18, Z
     532:	20 68       	ori	r18, 0x80	; 128
     534:	20 83       	st	Z, r18
     536:	20 81       	ld	r18, Z
     538:	22 23       	and	r18, r18
     53a:	ec f7       	brge	.-6      	; 0x536 <TwiTransmit+0x60>
		}
		
		if (!ProcessTwiStatus(SLA_R_RECEIVED_ACK))
     53c:	20 91 b9 00 	lds	r18, 0x00B9
     540:	28 7f       	andi	r18, 0xF8	; 248
     542:	28 3a       	cpi	r18, 0xA8	; 168
     544:	91 f0       	breq	.+36     	; 0x56a <TwiTransmit+0x94>
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Slave Read Not Requested by Master - 0x%x\r\n", TWSR);
     546:	80 91 b9 00 	lds	r24, 0x00B9
     54a:	1f 92       	push	r1
     54c:	8f 93       	push	r24
     54e:	8e e6       	ldi	r24, 0x6E	; 110
     550:	92 e0       	ldi	r25, 0x02	; 2
     552:	9f 93       	push	r25
     554:	8f 93       	push	r24
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	8f 93       	push	r24
     55a:	54 d4       	rcall	.+2216   	; 0xe04 <SendTrace>
			
			Status = FALSE;
		
			goto Exit;
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(SLA_R_RECEIVED_ACK))
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Slave Read Not Requested by Master - 0x%x\r\n", TWSR);
			
			Status = FALSE;
     566:	80 e0       	ldi	r24, 0x00	; 0
		
			goto Exit;
     568:	07 c0       	rjmp	.+14     	; 0x578 <TwiTransmit+0xa2>
		}
		else
		{	
			DATA_OUT();
     56a:	39 9a       	sbi	0x07, 1	; 7
		
			Status = Transmit(Buffer, Length);
     56c:	b6 de       	rcall	.-660    	; 0x2da <Transmit>
		
			DATA_IN();
     56e:	39 98       	cbi	0x07, 1	; 7
     570:	03 c0       	rjmp	.+6      	; 0x578 <TwiTransmit+0xa2>
{
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
	{
		Status = FALSE;
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	01 c0       	rjmp	.+2      	; 0x578 <TwiTransmit+0xa2>
     576:	80 e0       	ldi	r24, 0x00	; 0
	}
	
Exit:

	return Status;
}
     578:	0f 91       	pop	r16
     57a:	08 95       	ret

0000057c <Receive>:
	return Status;	
}

bool
Receive(PVOID Buffer, unsigned long Length)
{
     57c:	8f 92       	push	r8
     57e:	9f 92       	push	r9
     580:	af 92       	push	r10
     582:	bf 92       	push	r11
     584:	df 92       	push	r13
     586:	ef 92       	push	r14
     588:	ff 92       	push	r15
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
	
	unsigned char *BytePtr;
	
	TWI_STATUS ReceiveStatus;
	
	if (gMode == TWI_MASTER)
     592:	20 91 e1 03 	lds	r18, 0x03E1
     596:	21 30       	cpi	r18, 0x01	; 1
     598:	29 f4       	brne	.+10     	; 0x5a4 <Receive+0x28>
	{
		ReceiveStatus = DATA_RECEIVED_ACK;
     59a:	0f 2e       	mov	r0, r31
     59c:	f0 e5       	ldi	r31, 0x50	; 80
     59e:	df 2e       	mov	r13, r31
     5a0:	f0 2d       	mov	r31, r0
     5a2:	03 c0       	rjmp	.+6      	; 0x5aa <Receive+0x2e>
	}
	else
	{
		ReceiveStatus = SLA_W_DATA_RECEIVED_ACK;
     5a4:	68 94       	set
     5a6:	dd 24       	eor	r13, r13
     5a8:	d7 f8       	bld	r13, 7
	// Now receive the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
     5aa:	4a 01       	movw	r8, r20
     5ac:	5b 01       	movw	r10, r22
     5ae:	21 e0       	ldi	r18, 0x01	; 1
     5b0:	82 1a       	sub	r8, r18
     5b2:	91 08       	sbc	r9, r1
     5b4:	a1 08       	sbc	r10, r1
     5b6:	b1 08       	sbc	r11, r1
     5b8:	81 14       	cp	r8, r1
     5ba:	91 04       	cpc	r9, r1
     5bc:	a1 04       	cpc	r10, r1
     5be:	b1 04       	cpc	r11, r1
     5c0:	e1 f1       	breq	.+120    	; 0x63a <Receive+0xbe>
     5c2:	dc 01       	movw	r26, r24
     5c4:	00 e0       	ldi	r16, 0x00	; 0
     5c6:	10 e0       	ldi	r17, 0x00	; 0
     5c8:	98 01       	movw	r18, r16
	{
			
		WAIT_FOR_OP_COMPLETION();
     5ca:	ec eb       	ldi	r30, 0xBC	; 188
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
		
		if (!ProcessTwiStatus(ReceiveStatus))
     5ce:	0f 2e       	mov	r0, r31
     5d0:	f9 eb       	ldi	r31, 0xB9	; 185
     5d2:	ef 2e       	mov	r14, r31
     5d4:	f1 2c       	mov	r15, r1
     5d6:	f0 2d       	mov	r31, r0
     5d8:	6d 2d       	mov	r22, r13
     5da:	70 e0       	ldi	r23, 0x00	; 0
			Status = FALSE;
			
			goto Exit;
		}
		
		*BytePtr = TWDR;
     5dc:	4b eb       	ldi	r20, 0xBB	; 187
     5de:	50 e0       	ldi	r21, 0x00	; 0
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
	{
			
		WAIT_FOR_OP_COMPLETION();
     5e0:	80 81       	ld	r24, Z
     5e2:	80 68       	ori	r24, 0x80	; 128
     5e4:	80 83       	st	Z, r24
     5e6:	80 81       	ld	r24, Z
     5e8:	88 23       	and	r24, r24
     5ea:	ec f7       	brge	.-6      	; 0x5e6 <Receive+0x6a>
		
		if (!ProcessTwiStatus(ReceiveStatus))
     5ec:	e7 01       	movw	r28, r14
     5ee:	88 81       	ld	r24, Y
     5f0:	88 7f       	andi	r24, 0xF8	; 248
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	86 17       	cp	r24, r22
     5f6:	97 07       	cpc	r25, r23
     5f8:	99 f0       	breq	.+38     	; 0x620 <Receive+0xa4>
		{
			SendTrace(ERROR_LEVEL, "Receive - Data Reception Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     5fa:	80 91 b9 00 	lds	r24, 0x00B9
     5fe:	88 7f       	andi	r24, 0xF8	; 248
     600:	1f 92       	push	r1
     602:	8f 93       	push	r24
     604:	88 ea       	ldi	r24, 0xA8	; 168
     606:	92 e0       	ldi	r25, 0x02	; 2
     608:	9f 93       	push	r25
     60a:	8f 93       	push	r24
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	8f 93       	push	r24
     610:	f9 d3       	rcall	.+2034   	; 0xe04 <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(ReceiveStatus))
		{
			SendTrace(ERROR_LEVEL, "Receive - Data Reception Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
			
			Status = FALSE;
     61c:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
     61e:	43 c0       	rjmp	.+134    	; 0x6a6 <Receive+0x12a>
		}
		
		*BytePtr = TWDR;
     620:	ea 01       	movw	r28, r20
     622:	88 81       	ld	r24, Y
     624:	8d 93       	st	X+, r24
		
		BytePtr++;
     626:	cd 01       	movw	r24, r26
	// Now receive the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
     628:	0f 5f       	subi	r16, 0xFF	; 255
     62a:	1f 4f       	sbci	r17, 0xFF	; 255
     62c:	2f 4f       	sbci	r18, 0xFF	; 255
     62e:	3f 4f       	sbci	r19, 0xFF	; 255
     630:	08 15       	cp	r16, r8
     632:	19 05       	cpc	r17, r9
     634:	2a 05       	cpc	r18, r10
     636:	3b 05       	cpc	r19, r11
     638:	98 f2       	brcs	.-90     	; 0x5e0 <Receive+0x64>
	//
	// When receiving the last byte if the receiver is a master then we need to transmit a NACK.
	// If the receiver is a slave we need to transmit a ACK.
	//
	
	if (gMode == TWI_MASTER)
     63a:	20 91 e1 03 	lds	r18, 0x03E1
     63e:	21 30       	cpi	r18, 0x01	; 1
     640:	49 f4       	brne	.+18     	; 0x654 <Receive+0xd8>
	{
		ENABLE_NACK();
     642:	ec eb       	ldi	r30, 0xBC	; 188
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	20 81       	ld	r18, Z
     648:	2f 73       	andi	r18, 0x3F	; 63
     64a:	20 83       	st	Z, r18
		
		ReceiveStatus = DATA_RECEIVED_NACK;
     64c:	0f 2e       	mov	r0, r31
     64e:	f8 e5       	ldi	r31, 0x58	; 88
     650:	df 2e       	mov	r13, r31
     652:	f0 2d       	mov	r31, r0
	}
	
	WAIT_FOR_OP_COMPLETION();
     654:	ec eb       	ldi	r30, 0xBC	; 188
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	20 81       	ld	r18, Z
     65a:	20 68       	ori	r18, 0x80	; 128
     65c:	20 83       	st	Z, r18
     65e:	20 81       	ld	r18, Z
     660:	22 23       	and	r18, r18
     662:	ec f7       	brge	.-6      	; 0x65e <Receive+0xe2>
	
	if (!ProcessTwiStatus(ReceiveStatus))
     664:	40 91 b9 00 	lds	r20, 0x00B9
     668:	48 7f       	andi	r20, 0xF8	; 248
     66a:	50 e0       	ldi	r21, 0x00	; 0
     66c:	2d 2d       	mov	r18, r13
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	42 17       	cp	r20, r18
     672:	53 07       	cpc	r21, r19
     674:	99 f0       	breq	.+38     	; 0x69c <Receive+0x120>
	{
		SendTrace(ERROR_LEVEL, "Receive - Data Reception Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     676:	80 91 b9 00 	lds	r24, 0x00B9
     67a:	88 7f       	andi	r24, 0xF8	; 248
     67c:	1f 92       	push	r1
     67e:	8f 93       	push	r24
     680:	88 ea       	ldi	r24, 0xA8	; 168
     682:	92 e0       	ldi	r25, 0x02	; 2
     684:	9f 93       	push	r25
     686:	8f 93       	push	r24
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	8f 93       	push	r24
     68c:	bb d3       	rcall	.+1910   	; 0xe04 <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
	
	if (!ProcessTwiStatus(ReceiveStatus))
	{
		SendTrace(ERROR_LEVEL, "Receive - Data Reception Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     698:	80 e0       	ldi	r24, 0x00	; 0
		
		goto Exit;
     69a:	05 c0       	rjmp	.+10     	; 0x6a6 <Receive+0x12a>
	}
	
	*BytePtr = TWDR;
     69c:	20 91 bb 00 	lds	r18, 0x00BB
     6a0:	fc 01       	movw	r30, r24
     6a2:	20 83       	st	Z, r18
}

bool
Receive(PVOID Buffer, unsigned long Length)
{
	bool Status = TRUE;
     6a4:	81 e0       	ldi	r24, 0x01	; 1
	
	*BytePtr = TWDR;
	
Exit:

	ENABLE_ACK();
     6a6:	ec eb       	ldi	r30, 0xBC	; 188
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	90 81       	ld	r25, Z
     6ac:	9f 73       	andi	r25, 0x3F	; 63
     6ae:	90 64       	ori	r25, 0x40	; 64
     6b0:	90 83       	st	Z, r25

	return Status;
}
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	ff 90       	pop	r15
     6bc:	ef 90       	pop	r14
     6be:	df 90       	pop	r13
     6c0:	bf 90       	pop	r11
     6c2:	af 90       	pop	r10
     6c4:	9f 90       	pop	r9
     6c6:	8f 90       	pop	r8
     6c8:	08 95       	ret

000006ca <TwiMasterReceive>:
bool
TwiMasterReceive(PVOID Buffer, 
				 unsigned long Length, 
				 PTWI_ADDRESS Address,
				 bool SendStop)
{
     6ca:	af 92       	push	r10
     6cc:	bf 92       	push	r11
     6ce:	cf 92       	push	r12
     6d0:	df 92       	push	r13
     6d2:	ef 92       	push	r14
     6d4:	ff 92       	push	r15
     6d6:	0f 93       	push	r16
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	5c 01       	movw	r10, r24
     6de:	6a 01       	movw	r12, r20
     6e0:	7b 01       	movw	r14, r22
     6e2:	e9 01       	movw	r28, r18
	bool Status = TRUE;
	
	if (!SendStartCondition())
     6e4:	c8 dd       	rcall	.-1136   	; 0x276 <SendStartCondition>
     6e6:	81 11       	cpse	r24, r1
     6e8:	13 c0       	rjmp	.+38     	; 0x710 <TwiMasterReceive+0x46>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterReceive - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     6ea:	80 91 b9 00 	lds	r24, 0x00B9
     6ee:	88 7f       	andi	r24, 0xF8	; 248
     6f0:	1f 92       	push	r1
     6f2:	8f 93       	push	r24
     6f4:	8a ed       	ldi	r24, 0xDA	; 218
     6f6:	92 e0       	ldi	r25, 0x02	; 2
     6f8:	9f 93       	push	r25
     6fa:	8f 93       	push	r24
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	8f 93       	push	r24
     700:	81 d3       	rcall	.+1794   	; 0xe04 <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
	
	if (!SendStartCondition())
	{
		SendTrace(ERROR_LEVEL, "TwiMasterReceive - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     70c:	c0 e0       	ldi	r28, 0x00	; 0
		
		goto Exit;
     70e:	33 c0       	rjmp	.+102    	; 0x776 <TwiMasterReceive+0xac>
	}
	
	gIsRepeatedStart = FALSE;
     710:	10 92 dc 03 	sts	0x03DC, r1
	//
	// Set Address->ReadWrite = 1 indicating a read operation.
	// Then transmit SLA+R
	//
	
	Address->RW_EnGenCall = 1;
     714:	88 81       	ld	r24, Y
     716:	81 60       	ori	r24, 0x01	; 1
     718:	88 83       	st	Y, r24
	
	TWDR = Address->AsUINT8;
     71a:	80 93 bb 00 	sts	0x00BB, r24
	
	WAIT_FOR_OP_COMPLETION();
     71e:	ec eb       	ldi	r30, 0xBC	; 188
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	80 81       	ld	r24, Z
     724:	80 68       	ori	r24, 0x80	; 128
     726:	80 83       	st	Z, r24
     728:	80 81       	ld	r24, Z
     72a:	88 23       	and	r24, r24
     72c:	ec f7       	brge	.-6      	; 0x728 <TwiMasterReceive+0x5e>
	
	if (!ProcessTwiStatus(SLA_R_TRANSMITTED_ACK))
     72e:	80 91 b9 00 	lds	r24, 0x00B9
     732:	88 7f       	andi	r24, 0xF8	; 248
     734:	80 34       	cpi	r24, 0x40	; 64
     736:	99 f0       	breq	.+38     	; 0x75e <TwiMasterReceive+0x94>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterReceive - Slave Address and Read Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     738:	80 91 b9 00 	lds	r24, 0x00B9
     73c:	88 7f       	andi	r24, 0xF8	; 248
     73e:	1f 92       	push	r1
     740:	8f 93       	push	r24
     742:	83 e2       	ldi	r24, 0x23	; 35
     744:	93 e0       	ldi	r25, 0x03	; 3
     746:	9f 93       	push	r25
     748:	8f 93       	push	r24
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	8f 93       	push	r24
     74e:	5a d3       	rcall	.+1716   	; 0xe04 <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	0f 90       	pop	r0
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
	
	if (!ProcessTwiStatus(SLA_R_TRANSMITTED_ACK))
	{
		SendTrace(ERROR_LEVEL, "TwiMasterReceive - Slave Address and Read Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     75a:	c0 e0       	ldi	r28, 0x00	; 0
		
		goto Exit;
     75c:	0c c0       	rjmp	.+24     	; 0x776 <TwiMasterReceive+0xac>
	}
	
	Status = Receive(Buffer, Length);
     75e:	b7 01       	movw	r22, r14
     760:	a6 01       	movw	r20, r12
     762:	c5 01       	movw	r24, r10
     764:	0b df       	rcall	.-490    	; 0x57c <Receive>
     766:	c8 2f       	mov	r28, r24
	
	//
	// Send stop condition
	//
	
	if (SendStop)
     768:	00 23       	and	r16, r16
     76a:	11 f0       	breq	.+4      	; 0x770 <TwiMasterReceive+0xa6>
	{
		SendStopCondition();
     76c:	a9 dd       	rcall	.-1198   	; 0x2c0 <SendStopCondition>
     76e:	03 c0       	rjmp	.+6      	; 0x776 <TwiMasterReceive+0xac>
	}
	else
	{
		gIsRepeatedStart = TRUE;
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	80 93 dc 03 	sts	0x03DC, r24
	}
	
Exit:

	return Status;
}
     776:	8c 2f       	mov	r24, r28
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	0f 91       	pop	r16
     77e:	ff 90       	pop	r15
     780:	ef 90       	pop	r14
     782:	df 90       	pop	r13
     784:	cf 90       	pop	r12
     786:	bf 90       	pop	r11
     788:	af 90       	pop	r10
     78a:	08 95       	ret

0000078c <TwiReceive>:
bool
TwiReceive(PVOID Buffer,
		   unsigned long Length,
		   PTWI_ADDRESS Address,
		   bool SendStop)
{
     78c:	0f 93       	push	r16
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
     78e:	e0 91 dd 03 	lds	r30, 0x03DD
     792:	ee 23       	and	r30, r30
     794:	d1 f1       	breq	.+116    	; 0x80a <TwiReceive+0x7e>
     796:	00 97       	sbiw	r24, 0x00	; 0
     798:	d1 f1       	breq	.+116    	; 0x80e <TwiReceive+0x82>
		Status = FALSE;
		
		goto Exit;
	}
	
	if (gMode == TWI_MASTER)
     79a:	e0 91 e1 03 	lds	r30, 0x03E1
     79e:	e1 30       	cpi	r30, 0x01	; 1
     7a0:	99 f4       	brne	.+38     	; 0x7c8 <TwiReceive+0x3c>
	{
		if (Address == NULL)
     7a2:	21 15       	cp	r18, r1
     7a4:	31 05       	cpc	r19, r1
     7a6:	61 f4       	brne	.+24     	; 0x7c0 <TwiReceive+0x34>
		{
			SendTrace(ERROR_LEVEL, "TwiReceive - Invalid Parameters\r\n");
     7a8:	88 e7       	ldi	r24, 0x78	; 120
     7aa:	93 e0       	ldi	r25, 0x03	; 3
     7ac:	9f 93       	push	r25
     7ae:	8f 93       	push	r24
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	8f 93       	push	r24
     7b4:	27 d3       	rcall	.+1614   	; 0xe04 <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
	{
		if (Address == NULL)
		{
			SendTrace(ERROR_LEVEL, "TwiReceive - Invalid Parameters\r\n");
			
			Status = FALSE;
     7bc:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
     7be:	28 c0       	rjmp	.+80     	; 0x810 <TwiReceive+0x84>
		}
		else
		{
			DATA_IN();
     7c0:	39 98       	cbi	0x07, 1	; 7
			
			Status = TwiMasterReceive(Buffer, Length, Address, SendStop);
     7c2:	83 df       	rcall	.-250    	; 0x6ca <TwiMasterReceive>
			
			DATA_OUT();
     7c4:	39 9a       	sbi	0x07, 1	; 7
     7c6:	24 c0       	rjmp	.+72     	; 0x810 <TwiReceive+0x84>
		}
	}
	else
	{
		WAIT_FOR_OP_COMPLETION();
     7c8:	ec eb       	ldi	r30, 0xBC	; 188
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	20 81       	ld	r18, Z
     7ce:	20 68       	ori	r18, 0x80	; 128
     7d0:	20 83       	st	Z, r18
     7d2:	20 81       	ld	r18, Z
     7d4:	22 23       	and	r18, r18
     7d6:	ec f7       	brge	.-6      	; 0x7d2 <TwiReceive+0x46>
		
		if (!ProcessTwiStatus(SLA_W_RECEIVED_ACK))
     7d8:	20 91 b9 00 	lds	r18, 0x00B9
     7dc:	28 7f       	andi	r18, 0xF8	; 248
     7de:	20 36       	cpi	r18, 0x60	; 96
     7e0:	91 f0       	breq	.+36     	; 0x806 <TwiReceive+0x7a>
		{
			SendTrace(ERROR_LEVEL, "TwiReceive - Slave Write Not Requested by Master - Status 0x%x\r\n", TWSR);
     7e2:	80 91 b9 00 	lds	r24, 0x00B9
     7e6:	1f 92       	push	r1
     7e8:	8f 93       	push	r24
     7ea:	8a e9       	ldi	r24, 0x9A	; 154
     7ec:	93 e0       	ldi	r25, 0x03	; 3
     7ee:	9f 93       	push	r25
     7f0:	8f 93       	push	r24
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	8f 93       	push	r24
     7f6:	06 d3       	rcall	.+1548   	; 0xe04 <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(SLA_W_RECEIVED_ACK))
		{
			SendTrace(ERROR_LEVEL, "TwiReceive - Slave Write Not Requested by Master - Status 0x%x\r\n", TWSR);
			
			Status = FALSE;
     802:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
     804:	05 c0       	rjmp	.+10     	; 0x810 <TwiReceive+0x84>
		}
		else
		{	
			Status = Receive(Buffer, Length);
     806:	ba de       	rcall	.-652    	; 0x57c <Receive>
     808:	03 c0       	rjmp	.+6      	; 0x810 <TwiReceive+0x84>
{
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
	{
		Status = FALSE;
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	01 c0       	rjmp	.+2      	; 0x810 <TwiReceive+0x84>
     80e:	80 e0       	ldi	r24, 0x00	; 0
	}
	
Exit:

	return Status;		   
}
     810:	0f 91       	pop	r16
     812:	08 95       	ret

00000814 <InitTrace>:
#ifdef DEBUG

void
InitTrace(unsigned long ProcFrequency, unsigned char TraceLevel)
{
	if (!gTraceInitialized)
     814:	80 91 de 03 	lds	r24, 0x03DE
     818:	81 11       	cpse	r24, r1
     81a:	09 c0       	rjmp	.+18     	; 0x82e <InitTrace+0x1a>
	{

		gTraceLevel = TraceLevel;
     81c:	40 93 e2 03 	sts	0x03E2, r20

		InitUARTSync(UART_ZERO, BR_9600, NORMAL_MODE);	
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	63 e3       	ldi	r22, 0x33	; 51
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	76 d6       	rcall	.+3308   	; 0x1514 <InitUARTSync>
		
		gTraceInitialized = TRUE;
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	80 93 de 03 	sts	0x03DE, r24
     82e:	08 95       	ret

00000830 <SendStringValue>:
SendStringValue(char *String)
{

	unsigned long Length = 0;
	
	Length = strlen(String);
     830:	fc 01       	movw	r30, r24
     832:	01 90       	ld	r0, Z+
     834:	00 20       	and	r0, r0
     836:	e9 f7       	brne	.-6      	; 0x832 <SendStringValue+0x2>
     838:	31 97       	sbiw	r30, 0x01	; 1
     83a:	9f 01       	movw	r18, r30
     83c:	28 1b       	sub	r18, r24
     83e:	39 0b       	sbc	r19, r25
     840:	40 e0       	ldi	r20, 0x00	; 0
     842:	50 e0       	ldi	r21, 0x00	; 0
	
	UARTTransmitSync(UART_ZERO, (PVOID) String, Length);
     844:	bc 01       	movw	r22, r24
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	32 c7       	rjmp	.+3684   	; 0x16ae <UARTTransmitSync>
     84a:	08 95       	ret

0000084c <SendHexValue>:
	
}

void
SendHexValue(unsigned long long Value)
{
     84c:	8f 92       	push	r8
     84e:	9f 92       	push	r9
     850:	af 92       	push	r10
     852:	bf 92       	push	r11
     854:	cf 92       	push	r12
     856:	df 92       	push	r13
     858:	ef 92       	push	r14
     85a:	ff 92       	push	r15
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
     868:	da 95       	dec	r29
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	f8 94       	cli
     86e:	de bf       	out	0x3e, r29	; 62
     870:	0f be       	out	0x3f, r0	; 63
     872:	cd bf       	out	0x3d, r28	; 61
     874:	02 2f       	mov	r16, r18
     876:	93 2e       	mov	r9, r19
     878:	a4 2e       	mov	r10, r20
     87a:	b5 2e       	mov	r11, r21
     87c:	c6 2e       	mov	r12, r22
     87e:	d7 2e       	mov	r13, r23
     880:	e8 2e       	mov	r14, r24
     882:	f9 2e       	mov	r15, r25

	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
     884:	10 e0       	ldi	r17, 0x00	; 0

		if (Value < 16)
		{
			TransmitChar[Count] = Value;

			Value = 0;
     886:	81 2c       	mov	r8, r1


	do
	{

		if (Value < 16)
     888:	20 2f       	mov	r18, r16
     88a:	39 2d       	mov	r19, r9
     88c:	4a 2d       	mov	r20, r10
     88e:	5b 2d       	mov	r21, r11
     890:	6c 2d       	mov	r22, r12
     892:	7d 2d       	mov	r23, r13
     894:	8e 2d       	mov	r24, r14
     896:	9f 2d       	mov	r25, r15
     898:	af e0       	ldi	r26, 0x0F	; 15
     89a:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__cmpdi2_s8>
     89e:	09 f0       	breq	.+2      	; 0x8a2 <SendHexValue+0x56>
     8a0:	80 f4       	brcc	.+32     	; 0x8c2 <SendHexValue+0x76>
		{
			TransmitChar[Count] = Value;
     8a2:	e1 e0       	ldi	r30, 0x01	; 1
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	ec 0f       	add	r30, r28
     8a8:	fd 1f       	adc	r31, r29
     8aa:	e1 0f       	add	r30, r17
     8ac:	f1 1d       	adc	r31, r1
     8ae:	00 83       	st	Z, r16

			Value = 0;
     8b0:	08 2d       	mov	r16, r8
     8b2:	98 2c       	mov	r9, r8
     8b4:	a8 2c       	mov	r10, r8
     8b6:	b8 2c       	mov	r11, r8
     8b8:	c8 2c       	mov	r12, r8
     8ba:	d8 2c       	mov	r13, r8
     8bc:	e8 2c       	mov	r14, r8
     8be:	f8 2c       	mov	r15, r8
     8c0:	1c c0       	rjmp	.+56     	; 0x8fa <SendHexValue+0xae>
		}
		else
		{
			TransmitChar[Count] = Value % 16;
     8c2:	e1 e0       	ldi	r30, 0x01	; 1
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	ec 0f       	add	r30, r28
     8c8:	fd 1f       	adc	r31, r29
     8ca:	e1 0f       	add	r30, r17
     8cc:	f1 1d       	adc	r31, r1
     8ce:	80 2f       	mov	r24, r16
     8d0:	8f 70       	andi	r24, 0x0F	; 15
     8d2:	80 83       	st	Z, r24

			Value = Value / 16;
     8d4:	20 2f       	mov	r18, r16
     8d6:	39 2d       	mov	r19, r9
     8d8:	4a 2d       	mov	r20, r10
     8da:	5b 2d       	mov	r21, r11
     8dc:	6c 2d       	mov	r22, r12
     8de:	7d 2d       	mov	r23, r13
     8e0:	8e 2d       	mov	r24, r14
     8e2:	9f 2d       	mov	r25, r15
     8e4:	04 e0       	ldi	r16, 0x04	; 4
     8e6:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__lshrdi3>
     8ea:	02 2f       	mov	r16, r18
     8ec:	93 2e       	mov	r9, r19
     8ee:	a4 2e       	mov	r10, r20
     8f0:	b5 2e       	mov	r11, r21
     8f2:	c6 2e       	mov	r12, r22
     8f4:	d7 2e       	mov	r13, r23
     8f6:	e8 2e       	mov	r14, r24
     8f8:	f9 2e       	mov	r15, r25

		}
		
		if (TransmitChar[Count] > 9)
     8fa:	e1 2f       	mov	r30, r17
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	a1 e0       	ldi	r26, 0x01	; 1
     900:	b0 e0       	ldi	r27, 0x00	; 0
     902:	ac 0f       	add	r26, r28
     904:	bd 1f       	adc	r27, r29
     906:	ae 0f       	add	r26, r30
     908:	bf 1f       	adc	r27, r31
     90a:	8c 91       	ld	r24, X
     90c:	8a 30       	cpi	r24, 0x0A	; 10
     90e:	20 f0       	brcs	.+8      	; 0x918 <SendHexValue+0xcc>
		{
			TransmitChar[Count] = TransmitChar[Count] + ASCII_HEX_CONVERSION;
     910:	fd 01       	movw	r30, r26
     912:	89 5a       	subi	r24, 0xA9	; 169
     914:	80 83       	st	Z, r24
     916:	08 c0       	rjmp	.+16     	; 0x928 <SendHexValue+0xdc>
		}
		else
		{
			TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     918:	21 e0       	ldi	r18, 0x01	; 1
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	2c 0f       	add	r18, r28
     91e:	3d 1f       	adc	r19, r29
     920:	e2 0f       	add	r30, r18
     922:	f3 1f       	adc	r31, r19
     924:	80 5d       	subi	r24, 0xD0	; 208
     926:	80 83       	st	Z, r24
		}
		
		Count++;
     928:	1f 5f       	subi	r17, 0xFF	; 255

	} while (Value != 0);
     92a:	20 2f       	mov	r18, r16
     92c:	39 2d       	mov	r19, r9
     92e:	4a 2d       	mov	r20, r10
     930:	5b 2d       	mov	r21, r11
     932:	6c 2d       	mov	r22, r12
     934:	7d 2d       	mov	r23, r13
     936:	8e 2d       	mov	r24, r14
     938:	9f 2d       	mov	r25, r15
     93a:	a8 2d       	mov	r26, r8
     93c:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__cmpdi2_s8>
     940:	09 f0       	breq	.+2      	; 0x944 <SendHexValue+0xf8>
     942:	a2 cf       	rjmp	.-188    	; 0x888 <SendHexValue+0x3c>

	while (Count != 0)
     944:	11 23       	and	r17, r17
     946:	91 f0       	breq	.+36     	; 0x96c <SendHexValue+0x120>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     948:	61 2f       	mov	r22, r17
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	61 50       	subi	r22, 0x01	; 1
     94e:	71 09       	sbc	r23, r1
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	8c 0f       	add	r24, r28
     956:	9d 1f       	adc	r25, r29
     958:	68 0f       	add	r22, r24
     95a:	79 1f       	adc	r23, r25
     95c:	21 e0       	ldi	r18, 0x01	; 1
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	40 e0       	ldi	r20, 0x00	; 0
     962:	50 e0       	ldi	r21, 0x00	; 0
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	a3 d6       	rcall	.+3398   	; 0x16ae <UARTTransmitSync>
		
		Count--;
     968:	11 50       	subi	r17, 0x01	; 1
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
     96a:	71 f7       	brne	.-36     	; 0x948 <SendHexValue+0xfc>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}
}
     96c:	d3 95       	inc	r29
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	de bf       	out	0x3e, r29	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	cd bf       	out	0x3d, r28	; 61
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	ff 90       	pop	r15
     982:	ef 90       	pop	r14
     984:	df 90       	pop	r13
     986:	cf 90       	pop	r12
     988:	bf 90       	pop	r11
     98a:	af 90       	pop	r10
     98c:	9f 90       	pop	r9
     98e:	8f 90       	pop	r8
     990:	08 95       	ret

00000992 <SendDecimalValue>:


void
SendDecimalValue(unsigned long long Value)
{
     992:	2f 92       	push	r2
     994:	3f 92       	push	r3
     996:	4f 92       	push	r4
     998:	5f 92       	push	r5
     99a:	6f 92       	push	r6
     99c:	7f 92       	push	r7
     99e:	8f 92       	push	r8
     9a0:	9f 92       	push	r9
     9a2:	af 92       	push	r10
     9a4:	bf 92       	push	r11
     9a6:	cf 92       	push	r12
     9a8:	df 92       	push	r13
     9aa:	ef 92       	push	r14
     9ac:	ff 92       	push	r15
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	cd b7       	in	r28, 0x3d	; 61
     9b8:	de b7       	in	r29, 0x3e	; 62
     9ba:	c2 50       	subi	r28, 0x02	; 2
     9bc:	d1 40       	sbci	r29, 0x01	; 1
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	f8 94       	cli
     9c2:	de bf       	out	0x3e, r29	; 62
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	cd bf       	out	0x3d, r28	; 61
     9c8:	cf 5f       	subi	r28, 0xFF	; 255
     9ca:	de 4f       	sbci	r29, 0xFE	; 254
     9cc:	28 83       	st	Y, r18
     9ce:	c1 50       	subi	r28, 0x01	; 1
     9d0:	d1 40       	sbci	r29, 0x01	; 1
     9d2:	23 2e       	mov	r2, r19
     9d4:	34 2e       	mov	r3, r20
     9d6:	45 2e       	mov	r4, r21
     9d8:	56 2e       	mov	r5, r22
     9da:	67 2e       	mov	r6, r23
     9dc:	78 2e       	mov	r7, r24
     9de:	89 2e       	mov	r8, r25

	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
     9e0:	91 2c       	mov	r9, r1


	do
	{

		if (Value < 10)
     9e2:	cf 5f       	subi	r28, 0xFF	; 255
     9e4:	de 4f       	sbci	r29, 0xFE	; 254
     9e6:	28 81       	ld	r18, Y
     9e8:	c1 50       	subi	r28, 0x01	; 1
     9ea:	d1 40       	sbci	r29, 0x01	; 1
     9ec:	32 2d       	mov	r19, r2
     9ee:	43 2d       	mov	r20, r3
     9f0:	54 2d       	mov	r21, r4
     9f2:	65 2d       	mov	r22, r5
     9f4:	76 2d       	mov	r23, r6
     9f6:	87 2d       	mov	r24, r7
     9f8:	98 2d       	mov	r25, r8
     9fa:	a9 e0       	ldi	r26, 0x09	; 9
     9fc:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__cmpdi2_s8>
     a00:	09 f0       	breq	.+2      	; 0xa04 <SendDecimalValue+0x72>
     a02:	40 f4       	brcc	.+16     	; 0xa14 <SendDecimalValue+0x82>

			Value = Value / 10;

		}
		
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     a04:	fe 01       	movw	r30, r28
     a06:	e9 0d       	add	r30, r9
     a08:	f1 1d       	adc	r31, r1
     a0a:	82 2f       	mov	r24, r18
     a0c:	80 5d       	subi	r24, 0xD0	; 208
     a0e:	81 83       	std	Z+1, r24	; 0x01
		
		Count++;
     a10:	93 94       	inc	r9
     a12:	48 c0       	rjmp	.+144    	; 0xaa4 <SendDecimalValue+0x112>

			Value = 0;
		}
		else
		{
			TransmitChar[Count] = Value % 10;
     a14:	0f 2e       	mov	r0, r31
     a16:	fa e0       	ldi	r31, 0x0A	; 10
     a18:	af 2e       	mov	r10, r31
     a1a:	f0 2d       	mov	r31, r0
     a1c:	b1 2c       	mov	r11, r1
     a1e:	c1 2c       	mov	r12, r1
     a20:	d1 2c       	mov	r13, r1
     a22:	e1 2c       	mov	r14, r1
     a24:	f1 2c       	mov	r15, r1
     a26:	00 e0       	ldi	r16, 0x00	; 0
     a28:	10 e0       	ldi	r17, 0x00	; 0
     a2a:	cf 5f       	subi	r28, 0xFF	; 255
     a2c:	de 4f       	sbci	r29, 0xFE	; 254
     a2e:	28 81       	ld	r18, Y
     a30:	c1 50       	subi	r28, 0x01	; 1
     a32:	d1 40       	sbci	r29, 0x01	; 1
     a34:	32 2d       	mov	r19, r2
     a36:	43 2d       	mov	r20, r3
     a38:	54 2d       	mov	r21, r4
     a3a:	65 2d       	mov	r22, r5
     a3c:	76 2d       	mov	r23, r6
     a3e:	87 2d       	mov	r24, r7
     a40:	98 2d       	mov	r25, r8
     a42:	42 d7       	rcall	.+3716   	; 0x18c8 <__umoddi3>
     a44:	ce 5f       	subi	r28, 0xFE	; 254
     a46:	de 4f       	sbci	r29, 0xFE	; 254
     a48:	28 83       	st	Y, r18
     a4a:	c2 50       	subi	r28, 0x02	; 2
     a4c:	d1 40       	sbci	r29, 0x01	; 1

			Value = Value / 10;
     a4e:	cf 5f       	subi	r28, 0xFF	; 255
     a50:	de 4f       	sbci	r29, 0xFE	; 254
     a52:	28 81       	ld	r18, Y
     a54:	c1 50       	subi	r28, 0x01	; 1
     a56:	d1 40       	sbci	r29, 0x01	; 1
     a58:	32 2d       	mov	r19, r2
     a5a:	43 2d       	mov	r20, r3
     a5c:	54 2d       	mov	r21, r4
     a5e:	65 2d       	mov	r22, r5
     a60:	76 2d       	mov	r23, r6
     a62:	87 2d       	mov	r24, r7
     a64:	98 2d       	mov	r25, r8
     a66:	32 d7       	rcall	.+3684   	; 0x18cc <__udivdi3>
     a68:	cf 5f       	subi	r28, 0xFF	; 255
     a6a:	de 4f       	sbci	r29, 0xFE	; 254
     a6c:	28 83       	st	Y, r18
     a6e:	c1 50       	subi	r28, 0x01	; 1
     a70:	d1 40       	sbci	r29, 0x01	; 1
     a72:	23 2e       	mov	r2, r19
     a74:	34 2e       	mov	r3, r20
     a76:	45 2e       	mov	r4, r21
     a78:	56 2e       	mov	r5, r22
     a7a:	67 2e       	mov	r6, r23
     a7c:	78 2e       	mov	r7, r24
     a7e:	89 2e       	mov	r8, r25

		}
		
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     a80:	e1 e0       	ldi	r30, 0x01	; 1
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	ec 0f       	add	r30, r28
     a86:	fd 1f       	adc	r31, r29
     a88:	e9 0d       	add	r30, r9
     a8a:	f1 1d       	adc	r31, r1
     a8c:	ce 5f       	subi	r28, 0xFE	; 254
     a8e:	de 4f       	sbci	r29, 0xFE	; 254
     a90:	a8 81       	ld	r26, Y
     a92:	c2 50       	subi	r28, 0x02	; 2
     a94:	d1 40       	sbci	r29, 0x01	; 1
     a96:	a0 5d       	subi	r26, 0xD0	; 208
     a98:	a0 83       	st	Z, r26
		
		Count++;
     a9a:	93 94       	inc	r9

	} while (Value != 0);
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	d7 d7       	rcall	.+4014   	; 0x1a4e <__cmpdi2_s8>
     aa0:	09 f0       	breq	.+2      	; 0xaa4 <SendDecimalValue+0x112>
     aa2:	9f cf       	rjmp	.-194    	; 0x9e2 <SendDecimalValue+0x50>

	while (Count != 0)
     aa4:	99 20       	and	r9, r9
     aa6:	91 f0       	breq	.+36     	; 0xacc <SendDecimalValue+0x13a>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     aa8:	69 2d       	mov	r22, r9
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 50       	subi	r22, 0x01	; 1
     aae:	71 09       	sbc	r23, r1
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	8c 0f       	add	r24, r28
     ab6:	9d 1f       	adc	r25, r29
     ab8:	68 0f       	add	r22, r24
     aba:	79 1f       	adc	r23, r25
     abc:	21 e0       	ldi	r18, 0x01	; 1
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	40 e0       	ldi	r20, 0x00	; 0
     ac2:	50 e0       	ldi	r21, 0x00	; 0
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	f3 d5       	rcall	.+3046   	; 0x16ae <UARTTransmitSync>
		
		Count--;
     ac8:	9a 94       	dec	r9
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
     aca:	71 f7       	brne	.-36     	; 0xaa8 <SendDecimalValue+0x116>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}	
}
     acc:	ce 5f       	subi	r28, 0xFE	; 254
     ace:	de 4f       	sbci	r29, 0xFE	; 254
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	f8 94       	cli
     ad4:	de bf       	out	0x3e, r29	; 62
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	cd bf       	out	0x3d, r28	; 61
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	cf 90       	pop	r12
     aea:	bf 90       	pop	r11
     aec:	af 90       	pop	r10
     aee:	9f 90       	pop	r9
     af0:	8f 90       	pop	r8
     af2:	7f 90       	pop	r7
     af4:	6f 90       	pop	r6
     af6:	5f 90       	pop	r5
     af8:	4f 90       	pop	r4
     afa:	3f 90       	pop	r3
     afc:	2f 90       	pop	r2
     afe:	08 95       	ret

00000b00 <SendDoubleValue>:

void
SendDoubleValue(double Value)
{
     b00:	6f 92       	push	r6
     b02:	7f 92       	push	r7
     b04:	8f 92       	push	r8
     b06:	9f 92       	push	r9
     b08:	af 92       	push	r10
     b0a:	bf 92       	push	r11
     b0c:	cf 92       	push	r12
     b0e:	df 92       	push	r13
     b10:	ef 92       	push	r14
     b12:	ff 92       	push	r15
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	00 d0       	rcall	.+0      	; 0xb1e <SendDoubleValue+0x1e>
     b1e:	1f 92       	push	r1
     b20:	cd b7       	in	r28, 0x3d	; 61
     b22:	de b7       	in	r29, 0x3e	; 62
     b24:	6b 01       	movw	r12, r22
     b26:	7c 01       	movw	r14, r24
	
	long long IntPart;
	
	unsigned char FracPart;
	
	unsigned char Dot = '.';
     b28:	8e e2       	ldi	r24, 0x2E	; 46
     b2a:	8a 83       	std	Y+2, r24	; 0x02
	
	unsigned char Minus = '-';
     b2c:	8d e2       	ldi	r24, 0x2D	; 45
     b2e:	8b 83       	std	Y+3, r24	; 0x03
	
	if (Value < 0)
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	a9 01       	movw	r20, r18
     b36:	c7 01       	movw	r24, r14
     b38:	b6 01       	movw	r22, r12
     b3a:	12 d3       	rcall	.+1572   	; 0x1160 <__cmpsf2>
     b3c:	88 23       	and	r24, r24
     b3e:	6c f4       	brge	.+26     	; 0xb5a <SendDoubleValue+0x5a>
	{
		
		UARTTransmitSync(UART_ZERO, (PVOID) &Minus, 1);
     b40:	21 e0       	ldi	r18, 0x01	; 1
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	be 01       	movw	r22, r28
     b4a:	6d 5f       	subi	r22, 0xFD	; 253
     b4c:	7f 4f       	sbci	r23, 0xFF	; 255
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	ae d5       	rcall	.+2908   	; 0x16ae <UARTTransmitSync>
		
		Value = Value * -1;
     b52:	f7 fa       	bst	r15, 7
     b54:	f0 94       	com	r15
     b56:	f7 f8       	bld	r15, 7
     b58:	f0 94       	com	r15
	}
	
	IntPart = (long long) Value;
     b5a:	c7 01       	movw	r24, r14
     b5c:	b6 01       	movw	r22, r12
     b5e:	04 d3       	rcall	.+1544   	; 0x1168 <__fixsfdi>
     b60:	62 2e       	mov	r6, r18
     b62:	73 2e       	mov	r7, r19
     b64:	84 2e       	mov	r8, r20
     b66:	95 2e       	mov	r9, r21
     b68:	a6 2e       	mov	r10, r22
     b6a:	b7 2e       	mov	r11, r23
     b6c:	08 2f       	mov	r16, r24
     b6e:	19 2f       	mov	r17, r25
		
	Value = Value - IntPart;
     b70:	61 d3       	rcall	.+1730   	; 0x1234 <__floatdisf>
     b72:	9b 01       	movw	r18, r22
     b74:	ac 01       	movw	r20, r24
     b76:	c7 01       	movw	r24, r14
     b78:	b6 01       	movw	r22, r12
     b7a:	8d d2       	rcall	.+1306   	; 0x1096 <__subsf3>
     b7c:	6b 01       	movw	r12, r22
     b7e:	7c 01       	movw	r14, r24
	
	SendDecimalValue(IntPart);
     b80:	26 2d       	mov	r18, r6
     b82:	37 2d       	mov	r19, r7
     b84:	48 2d       	mov	r20, r8
     b86:	59 2d       	mov	r21, r9
     b88:	6a 2d       	mov	r22, r10
     b8a:	7b 2d       	mov	r23, r11
     b8c:	80 2f       	mov	r24, r16
     b8e:	91 2f       	mov	r25, r17
     b90:	00 df       	rcall	.-512    	; 0x992 <SendDecimalValue>
	
	UARTTransmitSync(UART_ZERO, (PVOID) &Dot, 1);
     b92:	21 e0       	ldi	r18, 0x01	; 1
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	40 e0       	ldi	r20, 0x00	; 0
     b98:	50 e0       	ldi	r21, 0x00	; 0
     b9a:	be 01       	movw	r22, r28
     b9c:	6e 5f       	subi	r22, 0xFE	; 254
     b9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	85 d5       	rcall	.+2826   	; 0x16ae <UARTTransmitSync>
	
	while (Value != 0)
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	a9 01       	movw	r20, r18
     baa:	c7 01       	movw	r24, r14
     bac:	b6 01       	movw	r22, r12
     bae:	d8 d2       	rcall	.+1456   	; 0x1160 <__cmpsf2>
     bb0:	88 23       	and	r24, r24
     bb2:	49 f1       	breq	.+82     	; 0xc06 <SendDoubleValue+0x106>
	{
		FracPart = (Value * 10);
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	40 e2       	ldi	r20, 0x20	; 32
     bba:	51 e4       	ldi	r21, 0x41	; 65
     bbc:	c7 01       	movw	r24, r14
     bbe:	b6 01       	movw	r22, r12
     bc0:	3d d4       	rcall	.+2170   	; 0x143c <__mulsf3>
     bc2:	6b 01       	movw	r12, r22
     bc4:	7c 01       	movw	r14, r24
     bc6:	0a d3       	rcall	.+1556   	; 0x11dc <__fixunssfsi>
     bc8:	16 2f       	mov	r17, r22
		
		Value = (Value * 10) - FracPart;
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	37 d3       	rcall	.+1646   	; 0x1240 <__floatsisf>
     bd2:	9b 01       	movw	r18, r22
     bd4:	ac 01       	movw	r20, r24
     bd6:	c7 01       	movw	r24, r14
     bd8:	b6 01       	movw	r22, r12
     bda:	5d d2       	rcall	.+1210   	; 0x1096 <__subsf3>
     bdc:	6b 01       	movw	r12, r22
     bde:	7c 01       	movw	r14, r24
		
		FracPart = FracPart + ASCII_DECIMAL_CONVERSION;
     be0:	10 5d       	subi	r17, 0xD0	; 208
     be2:	19 83       	std	Y+1, r17	; 0x01
		
		UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
     be4:	21 e0       	ldi	r18, 0x01	; 1
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	50 e0       	ldi	r21, 0x00	; 0
     bec:	be 01       	movw	r22, r28
     bee:	6f 5f       	subi	r22, 0xFF	; 255
     bf0:	7f 4f       	sbci	r23, 0xFF	; 255
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	5c d5       	rcall	.+2744   	; 0x16ae <UARTTransmitSync>
	
	SendDecimalValue(IntPart);
	
	UARTTransmitSync(UART_ZERO, (PVOID) &Dot, 1);
	
	while (Value != 0)
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	a9 01       	movw	r20, r18
     bfc:	c7 01       	movw	r24, r14
     bfe:	b6 01       	movw	r22, r12
     c00:	af d2       	rcall	.+1374   	; 0x1160 <__cmpsf2>
     c02:	81 11       	cpse	r24, r1
     c04:	d7 cf       	rjmp	.-82     	; 0xbb4 <SendDoubleValue+0xb4>
	
	//
	// Print 0
	//
	
	FracPart = ASCII_DECIMAL_CONVERSION;
     c06:	80 e3       	ldi	r24, 0x30	; 48
     c08:	89 83       	std	Y+1, r24	; 0x01
	
	UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
     c0a:	21 e0       	ldi	r18, 0x01	; 1
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	be 01       	movw	r22, r28
     c14:	6f 5f       	subi	r22, 0xFF	; 255
     c16:	7f 4f       	sbci	r23, 0xFF	; 255
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	49 d5       	rcall	.+2706   	; 0x16ae <UARTTransmitSync>
}
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	1f 91       	pop	r17
     c28:	0f 91       	pop	r16
     c2a:	ff 90       	pop	r15
     c2c:	ef 90       	pop	r14
     c2e:	df 90       	pop	r13
     c30:	cf 90       	pop	r12
     c32:	bf 90       	pop	r11
     c34:	af 90       	pop	r10
     c36:	9f 90       	pop	r9
     c38:	8f 90       	pop	r8
     c3a:	7f 90       	pop	r7
     c3c:	6f 90       	pop	r6
     c3e:	08 95       	ret

00000c40 <SendSignedDecimalValue>:

void
SendSignedDecimalValue(long long Value)
{
     c40:	2f 92       	push	r2
     c42:	3f 92       	push	r3
     c44:	4f 92       	push	r4
     c46:	5f 92       	push	r5
     c48:	6f 92       	push	r6
     c4a:	7f 92       	push	r7
     c4c:	8f 92       	push	r8
     c4e:	9f 92       	push	r9
     c50:	af 92       	push	r10
     c52:	bf 92       	push	r11
     c54:	cf 92       	push	r12
     c56:	df 92       	push	r13
     c58:	ef 92       	push	r14
     c5a:	ff 92       	push	r15
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
     c68:	c3 50       	subi	r28, 0x03	; 3
     c6a:	d1 40       	sbci	r29, 0x01	; 1
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
     c76:	ce 5f       	subi	r28, 0xFE	; 254
     c78:	de 4f       	sbci	r29, 0xFE	; 254
     c7a:	28 83       	st	Y, r18
     c7c:	c2 50       	subi	r28, 0x02	; 2
     c7e:	d1 40       	sbci	r29, 0x01	; 1
     c80:	83 2e       	mov	r8, r19
     c82:	74 2e       	mov	r7, r20
     c84:	65 2e       	mov	r6, r21
     c86:	56 2e       	mov	r5, r22
     c88:	47 2e       	mov	r4, r23
     c8a:	38 2e       	mov	r3, r24
     c8c:	29 2e       	mov	r2, r25
	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
	
	unsigned char Minus = '-';
     c8e:	8d e2       	ldi	r24, 0x2D	; 45
     c90:	cf 5f       	subi	r28, 0xFF	; 255
     c92:	de 4f       	sbci	r29, 0xFE	; 254
     c94:	88 83       	st	Y, r24
     c96:	c1 50       	subi	r28, 0x01	; 1
     c98:	d1 40       	sbci	r29, 0x01	; 1

	//
	// If the value is negative, print - sign and make the value positive.
	//

	if (Value < 0)
     c9a:	83 2d       	mov	r24, r3
     c9c:	a0 e0       	ldi	r26, 0x00	; 0
     c9e:	d7 d6       	rcall	.+3502   	; 0x1a4e <__cmpdi2_s8>
     ca0:	14 f5       	brge	.+68     	; 0xce6 <SendSignedDecimalValue+0xa6>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &Minus, 1);
     ca2:	21 e0       	ldi	r18, 0x01	; 1
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	50 e0       	ldi	r21, 0x00	; 0
     caa:	be 01       	movw	r22, r28
     cac:	6f 5f       	subi	r22, 0xFF	; 255
     cae:	7e 4f       	sbci	r23, 0xFE	; 254
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	fd d4       	rcall	.+2554   	; 0x16ae <UARTTransmitSync>

		Value *= -1;
     cb4:	ce 5f       	subi	r28, 0xFE	; 254
     cb6:	de 4f       	sbci	r29, 0xFE	; 254
     cb8:	28 81       	ld	r18, Y
     cba:	c2 50       	subi	r28, 0x02	; 2
     cbc:	d1 40       	sbci	r29, 0x01	; 1
     cbe:	38 2d       	mov	r19, r8
     cc0:	47 2d       	mov	r20, r7
     cc2:	56 2d       	mov	r21, r6
     cc4:	65 2d       	mov	r22, r5
     cc6:	74 2d       	mov	r23, r4
     cc8:	83 2d       	mov	r24, r3
     cca:	92 2d       	mov	r25, r2
     ccc:	5b d6       	rcall	.+3254   	; 0x1984 <__negdi2>
     cce:	ce 5f       	subi	r28, 0xFE	; 254
     cd0:	de 4f       	sbci	r29, 0xFE	; 254
     cd2:	28 83       	st	Y, r18
     cd4:	c2 50       	subi	r28, 0x02	; 2
     cd6:	d1 40       	sbci	r29, 0x01	; 1
     cd8:	83 2e       	mov	r8, r19
     cda:	74 2e       	mov	r7, r20
     cdc:	65 2e       	mov	r6, r21
     cde:	56 2e       	mov	r5, r22
     ce0:	47 2e       	mov	r4, r23
     ce2:	38 2e       	mov	r3, r24
     ce4:	29 2e       	mov	r2, r25
	UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
}

void
SendSignedDecimalValue(long long Value)
{
     ce6:	91 2c       	mov	r9, r1
	}

	do
	{

		if (Value < 10)
     ce8:	ce 5f       	subi	r28, 0xFE	; 254
     cea:	de 4f       	sbci	r29, 0xFE	; 254
     cec:	28 81       	ld	r18, Y
     cee:	c2 50       	subi	r28, 0x02	; 2
     cf0:	d1 40       	sbci	r29, 0x01	; 1
     cf2:	38 2d       	mov	r19, r8
     cf4:	47 2d       	mov	r20, r7
     cf6:	56 2d       	mov	r21, r6
     cf8:	65 2d       	mov	r22, r5
     cfa:	74 2d       	mov	r23, r4
     cfc:	83 2d       	mov	r24, r3
     cfe:	92 2d       	mov	r25, r2
     d00:	a9 e0       	ldi	r26, 0x09	; 9
     d02:	a5 d6       	rcall	.+3402   	; 0x1a4e <__cmpdi2_s8>
     d04:	09 f0       	breq	.+2      	; 0xd08 <SendSignedDecimalValue+0xc8>
     d06:	44 f4       	brge	.+16     	; 0xd18 <SendSignedDecimalValue+0xd8>

			Value = Value / 10;

		}
	
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     d08:	fe 01       	movw	r30, r28
     d0a:	e9 0d       	add	r30, r9
     d0c:	f1 1d       	adc	r31, r1
     d0e:	82 2f       	mov	r24, r18
     d10:	80 5d       	subi	r24, 0xD0	; 208
     d12:	81 83       	std	Z+1, r24	; 0x01
		
		Count++;
     d14:	93 94       	inc	r9
     d16:	48 c0       	rjmp	.+144    	; 0xda8 <SendSignedDecimalValue+0x168>

			Value = 0;
		}
		else
		{
			TransmitChar[Count] = Value % 10;
     d18:	0f 2e       	mov	r0, r31
     d1a:	fa e0       	ldi	r31, 0x0A	; 10
     d1c:	af 2e       	mov	r10, r31
     d1e:	f0 2d       	mov	r31, r0
     d20:	b1 2c       	mov	r11, r1
     d22:	c1 2c       	mov	r12, r1
     d24:	d1 2c       	mov	r13, r1
     d26:	e1 2c       	mov	r14, r1
     d28:	f1 2c       	mov	r15, r1
     d2a:	00 e0       	ldi	r16, 0x00	; 0
     d2c:	10 e0       	ldi	r17, 0x00	; 0
     d2e:	ce 5f       	subi	r28, 0xFE	; 254
     d30:	de 4f       	sbci	r29, 0xFE	; 254
     d32:	28 81       	ld	r18, Y
     d34:	c2 50       	subi	r28, 0x02	; 2
     d36:	d1 40       	sbci	r29, 0x01	; 1
     d38:	38 2d       	mov	r19, r8
     d3a:	47 2d       	mov	r20, r7
     d3c:	56 2d       	mov	r21, r6
     d3e:	65 2d       	mov	r22, r5
     d40:	74 2d       	mov	r23, r4
     d42:	83 2d       	mov	r24, r3
     d44:	92 2d       	mov	r25, r2
     d46:	95 d5       	rcall	.+2858   	; 0x1872 <__moddi3>
     d48:	cd 5f       	subi	r28, 0xFD	; 253
     d4a:	de 4f       	sbci	r29, 0xFE	; 254
     d4c:	28 83       	st	Y, r18
     d4e:	c3 50       	subi	r28, 0x03	; 3
     d50:	d1 40       	sbci	r29, 0x01	; 1

			Value = Value / 10;
     d52:	ce 5f       	subi	r28, 0xFE	; 254
     d54:	de 4f       	sbci	r29, 0xFE	; 254
     d56:	28 81       	ld	r18, Y
     d58:	c2 50       	subi	r28, 0x02	; 2
     d5a:	d1 40       	sbci	r29, 0x01	; 1
     d5c:	38 2d       	mov	r19, r8
     d5e:	47 2d       	mov	r20, r7
     d60:	56 2d       	mov	r21, r6
     d62:	65 2d       	mov	r22, r5
     d64:	74 2d       	mov	r23, r4
     d66:	83 2d       	mov	r24, r3
     d68:	92 2d       	mov	r25, r2
     d6a:	85 d5       	rcall	.+2826   	; 0x1876 <__divdi3>
     d6c:	ce 5f       	subi	r28, 0xFE	; 254
     d6e:	de 4f       	sbci	r29, 0xFE	; 254
     d70:	28 83       	st	Y, r18
     d72:	c2 50       	subi	r28, 0x02	; 2
     d74:	d1 40       	sbci	r29, 0x01	; 1
     d76:	83 2e       	mov	r8, r19
     d78:	74 2e       	mov	r7, r20
     d7a:	65 2e       	mov	r6, r21
     d7c:	56 2e       	mov	r5, r22
     d7e:	47 2e       	mov	r4, r23
     d80:	38 2e       	mov	r3, r24
     d82:	29 2e       	mov	r2, r25

		}
	
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     d84:	e1 e0       	ldi	r30, 0x01	; 1
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	ec 0f       	add	r30, r28
     d8a:	fd 1f       	adc	r31, r29
     d8c:	e9 0d       	add	r30, r9
     d8e:	f1 1d       	adc	r31, r1
     d90:	cd 5f       	subi	r28, 0xFD	; 253
     d92:	de 4f       	sbci	r29, 0xFE	; 254
     d94:	a8 81       	ld	r26, Y
     d96:	c3 50       	subi	r28, 0x03	; 3
     d98:	d1 40       	sbci	r29, 0x01	; 1
     d9a:	a0 5d       	subi	r26, 0xD0	; 208
     d9c:	a0 83       	st	Z, r26
		
		Count++;
     d9e:	93 94       	inc	r9

	} while (Value != 0);
     da0:	a0 e0       	ldi	r26, 0x00	; 0
     da2:	55 d6       	rcall	.+3242   	; 0x1a4e <__cmpdi2_s8>
     da4:	09 f0       	breq	.+2      	; 0xda8 <SendSignedDecimalValue+0x168>
     da6:	a0 cf       	rjmp	.-192    	; 0xce8 <SendSignedDecimalValue+0xa8>

	while (Count != 0)
     da8:	99 20       	and	r9, r9
     daa:	91 f0       	breq	.+36     	; 0xdd0 <SendSignedDecimalValue+0x190>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     dac:	69 2d       	mov	r22, r9
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	61 50       	subi	r22, 0x01	; 1
     db2:	71 09       	sbc	r23, r1
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	8c 0f       	add	r24, r28
     dba:	9d 1f       	adc	r25, r29
     dbc:	68 0f       	add	r22, r24
     dbe:	79 1f       	adc	r23, r25
     dc0:	21 e0       	ldi	r18, 0x01	; 1
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	40 e0       	ldi	r20, 0x00	; 0
     dc6:	50 e0       	ldi	r21, 0x00	; 0
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	71 d4       	rcall	.+2274   	; 0x16ae <UARTTransmitSync>
		
		Count--;
     dcc:	9a 94       	dec	r9
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
     dce:	71 f7       	brne	.-36     	; 0xdac <SendSignedDecimalValue+0x16c>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}
}
     dd0:	cd 5f       	subi	r28, 0xFD	; 253
     dd2:	de 4f       	sbci	r29, 0xFE	; 254
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	cd bf       	out	0x3d, r28	; 61
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	1f 91       	pop	r17
     de4:	0f 91       	pop	r16
     de6:	ff 90       	pop	r15
     de8:	ef 90       	pop	r14
     dea:	df 90       	pop	r13
     dec:	cf 90       	pop	r12
     dee:	bf 90       	pop	r11
     df0:	af 90       	pop	r10
     df2:	9f 90       	pop	r9
     df4:	8f 90       	pop	r8
     df6:	7f 90       	pop	r7
     df8:	6f 90       	pop	r6
     dfa:	5f 90       	pop	r5
     dfc:	4f 90       	pop	r4
     dfe:	3f 90       	pop	r3
     e00:	2f 90       	pop	r2
     e02:	08 95       	ret

00000e04 <SendTrace>:
	}
}

void
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{
     e04:	3f 92       	push	r3
     e06:	4f 92       	push	r4
     e08:	5f 92       	push	r5
     e0a:	6f 92       	push	r6
     e0c:	7f 92       	push	r7
     e0e:	8f 92       	push	r8
     e10:	9f 92       	push	r9
     e12:	af 92       	push	r10
     e14:	bf 92       	push	r11
     e16:	cf 92       	push	r12
     e18:	df 92       	push	r13
     e1a:	ef 92       	push	r14
     e1c:	ff 92       	push	r15
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	1f 92       	push	r1
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	0e 89       	ldd	r16, Y+22	; 0x16
     e2e:	1f 89       	ldd	r17, Y+23	; 0x17
	
	char Character;

	va_list ArgList;

	if (!gTraceInitialized || !(TraceLevel & gTraceLevel))
     e30:	80 91 de 03 	lds	r24, 0x03DE
     e34:	88 23       	and	r24, r24
     e36:	09 f4       	brne	.+2      	; 0xe3a <SendTrace+0x36>
     e38:	1b c1       	rjmp	.+566    	; 0x1070 <SendTrace+0x26c>
     e3a:	80 91 e2 03 	lds	r24, 0x03E2
     e3e:	9d 89       	ldd	r25, Y+21	; 0x15
     e40:	89 23       	and	r24, r25
     e42:	09 f4       	brne	.+2      	; 0xe46 <SendTrace+0x42>
     e44:	15 c1       	rjmp	.+554    	; 0x1070 <SendTrace+0x26c>
	{
		return;
	}

	va_start(ArgList, String);
     e46:	7e 01       	movw	r14, r28
     e48:	28 e1       	ldi	r18, 0x18	; 24
     e4a:	e2 0e       	add	r14, r18
     e4c:	f1 1c       	adc	r15, r1

	while (*String != '\0')
     e4e:	f8 01       	movw	r30, r16
     e50:	20 81       	ld	r18, Z
     e52:	22 23       	and	r18, r18
     e54:	09 f4       	brne	.+2      	; 0xe58 <SendTrace+0x54>
     e56:	0c c1       	rjmp	.+536    	; 0x1070 <SendTrace+0x26c>
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{

	bool IsLong = FALSE;
	
	bool IsLongLong = FALSE;
     e58:	41 2c       	mov	r4, r1

void
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{

	bool IsLong = FALSE;
     e5a:	d1 2c       	mov	r13, r1
						IsLong = FALSE;
					}
					
					SendDoubleValue(va_arg(ArgList, double));
					
					break;
     e5c:	51 2c       	mov	r5, r1
						
						IsLong = FALSE;
					}
					else
					{
						IsLong = TRUE;
     e5e:	33 24       	eor	r3, r3
     e60:	33 94       	inc	r3
	va_start(ArgList, String);

	while (*String != '\0')
	{

		if (*String == '%' || IsLong || IsLongLong)
     e62:	25 32       	cpi	r18, 0x25	; 37
     e64:	29 f0       	breq	.+10     	; 0xe70 <SendTrace+0x6c>
     e66:	d1 10       	cpse	r13, r1
     e68:	05 c0       	rjmp	.+10     	; 0xe74 <SendTrace+0x70>
     e6a:	41 10       	cpse	r4, r1
     e6c:	03 c0       	rjmp	.+6      	; 0xe74 <SendTrace+0x70>
     e6e:	ef c0       	rjmp	.+478    	; 0x104e <SendTrace+0x24a>
		{

			if (*String == '%')
			{
				String++;
     e70:	0f 5f       	subi	r16, 0xFF	; 255
     e72:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			switch (*String)
     e74:	f8 01       	movw	r30, r16
     e76:	80 81       	ld	r24, Z
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	fc 01       	movw	r30, r24
     e7c:	e3 56       	subi	r30, 0x63	; 99
     e7e:	f1 09       	sbc	r31, r1
     e80:	e6 31       	cpi	r30, 0x16	; 22
     e82:	f1 05       	cpc	r31, r1
     e84:	08 f0       	brcs	.+2      	; 0xe88 <SendTrace+0x84>
     e86:	ec c0       	rjmp	.+472    	; 0x1060 <SendTrace+0x25c>
     e88:	ea 5b       	subi	r30, 0xBA	; 186
     e8a:	ff 4f       	sbci	r31, 0xFF	; 255
     e8c:	ec c4       	rjmp	.+2520   	; 0x1866 <__tablejump2__>
			{
				case 'c':
				{

					Character = va_arg(ArgList, int);
     e8e:	57 01       	movw	r10, r14
     e90:	f2 e0       	ldi	r31, 0x02	; 2
     e92:	af 0e       	add	r10, r31
     e94:	b1 1c       	adc	r11, r1
     e96:	f7 01       	movw	r30, r14
     e98:	80 81       	ld	r24, Z
     e9a:	89 83       	std	Y+1, r24	; 0x01
					
					UARTTransmitSync(UART_ZERO, (PVOID) &Character, 1);
     e9c:	21 e0       	ldi	r18, 0x01	; 1
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	40 e0       	ldi	r20, 0x00	; 0
     ea2:	50 e0       	ldi	r21, 0x00	; 0
     ea4:	be 01       	movw	r22, r28
     ea6:	6f 5f       	subi	r22, 0xFF	; 255
     ea8:	7f 4f       	sbci	r23, 0xFF	; 255
     eaa:	85 2d       	mov	r24, r5
     eac:	00 d4       	rcall	.+2048   	; 0x16ae <UARTTransmitSync>
			switch (*String)
			{
				case 'c':
				{

					Character = va_arg(ArgList, int);
     eae:	75 01       	movw	r14, r10
					
					UARTTransmitSync(UART_ZERO, (PVOID) &Character, 1);

					break;
     eb0:	d7 c0       	rjmp	.+430    	; 0x1060 <SendTrace+0x25c>

				}
				case 'd':
				{

					if (IsLong)
     eb2:	dd 20       	and	r13, r13
     eb4:	d9 f0       	breq	.+54     	; 0xeec <SendTrace+0xe8>
					{

						SendSignedDecimalValue(va_arg(ArgList, long));
     eb6:	67 01       	movw	r12, r14
     eb8:	f4 e0       	ldi	r31, 0x04	; 4
     eba:	cf 0e       	add	r12, r31
     ebc:	d1 1c       	adc	r13, r1
     ebe:	f7 01       	movw	r30, r14
     ec0:	80 81       	ld	r24, Z
     ec2:	91 81       	ldd	r25, Z+1	; 0x01
     ec4:	a2 81       	ldd	r26, Z+2	; 0x02
     ec6:	b3 81       	ldd	r27, Z+3	; 0x03
     ec8:	4c 01       	movw	r8, r24
     eca:	5d 01       	movw	r10, r26
     ecc:	bb 0c       	add	r11, r11
     ece:	88 08       	sbc	r8, r8
     ed0:	98 2c       	mov	r9, r8
     ed2:	54 01       	movw	r10, r8
     ed4:	28 2f       	mov	r18, r24
     ed6:	39 2f       	mov	r19, r25
     ed8:	4a 2f       	mov	r20, r26
     eda:	5b 2f       	mov	r21, r27
     edc:	68 2d       	mov	r22, r8
     ede:	78 2d       	mov	r23, r8
     ee0:	88 2d       	mov	r24, r8
     ee2:	98 2d       	mov	r25, r8
     ee4:	ad de       	rcall	.-678    	; 0xc40 <SendSignedDecimalValue>
     ee6:	76 01       	movw	r14, r12

						IsLong = FALSE;
     ee8:	d5 2c       	mov	r13, r5
     eea:	ba c0       	rjmp	.+372    	; 0x1060 <SendTrace+0x25c>

					}
					else if (IsLongLong)
     eec:	44 20       	and	r4, r4
     eee:	89 f0       	breq	.+34     	; 0xf12 <SendTrace+0x10e>
					{
						SendSignedDecimalValue(va_arg(ArgList, long long));
     ef0:	57 01       	movw	r10, r14
     ef2:	f8 e0       	ldi	r31, 0x08	; 8
     ef4:	af 0e       	add	r10, r31
     ef6:	b1 1c       	adc	r11, r1
     ef8:	f7 01       	movw	r30, r14
     efa:	20 81       	ld	r18, Z
     efc:	31 81       	ldd	r19, Z+1	; 0x01
     efe:	42 81       	ldd	r20, Z+2	; 0x02
     f00:	53 81       	ldd	r21, Z+3	; 0x03
     f02:	64 81       	ldd	r22, Z+4	; 0x04
     f04:	75 81       	ldd	r23, Z+5	; 0x05
     f06:	86 81       	ldd	r24, Z+6	; 0x06
     f08:	97 81       	ldd	r25, Z+7	; 0x07
     f0a:	9a de       	rcall	.-716    	; 0xc40 <SendSignedDecimalValue>
     f0c:	75 01       	movw	r14, r10

						IsLongLong = FALSE;
     f0e:	45 2c       	mov	r4, r5
     f10:	a7 c0       	rjmp	.+334    	; 0x1060 <SendTrace+0x25c>
					}
					else
					{

						SendSignedDecimalValue(va_arg(ArgList, int));
     f12:	57 01       	movw	r10, r14
     f14:	f2 e0       	ldi	r31, 0x02	; 2
     f16:	af 0e       	add	r10, r31
     f18:	b1 1c       	adc	r11, r1
     f1a:	f7 01       	movw	r30, r14
     f1c:	31 81       	ldd	r19, Z+1	; 0x01
     f1e:	20 81       	ld	r18, Z
     f20:	93 2f       	mov	r25, r19
     f22:	99 0f       	add	r25, r25
     f24:	99 0b       	sbc	r25, r25
     f26:	49 2f       	mov	r20, r25
     f28:	59 2f       	mov	r21, r25
     f2a:	69 2f       	mov	r22, r25
     f2c:	79 2f       	mov	r23, r25
     f2e:	89 2f       	mov	r24, r25
     f30:	87 de       	rcall	.-754    	; 0xc40 <SendSignedDecimalValue>
     f32:	75 01       	movw	r14, r10
     f34:	95 c0       	rjmp	.+298    	; 0x1060 <SendTrace+0x25c>
					break;
				}
				case 'u':
				{

					if(IsLong)
     f36:	dd 20       	and	r13, r13
     f38:	b9 f0       	breq	.+46     	; 0xf68 <SendTrace+0x164>
					{

						SendDecimalValue(va_arg(ArgList, unsigned long));
     f3a:	37 01       	movw	r6, r14
     f3c:	f4 e0       	ldi	r31, 0x04	; 4
     f3e:	6f 0e       	add	r6, r31
     f40:	71 1c       	adc	r7, r1
     f42:	f7 01       	movw	r30, r14
     f44:	80 81       	ld	r24, Z
     f46:	91 81       	ldd	r25, Z+1	; 0x01
     f48:	a2 81       	ldd	r26, Z+2	; 0x02
     f4a:	b3 81       	ldd	r27, Z+3	; 0x03
     f4c:	4c 01       	movw	r8, r24
     f4e:	5d 01       	movw	r10, r26
     f50:	28 2f       	mov	r18, r24
     f52:	39 2d       	mov	r19, r9
     f54:	4a 2d       	mov	r20, r10
     f56:	5b 2d       	mov	r21, r11
     f58:	65 2d       	mov	r22, r5
     f5a:	75 2d       	mov	r23, r5
     f5c:	85 2d       	mov	r24, r5
     f5e:	95 2d       	mov	r25, r5
     f60:	18 dd       	rcall	.-1488   	; 0x992 <SendDecimalValue>
     f62:	73 01       	movw	r14, r6
						
						IsLong = FALSE;
     f64:	d5 2c       	mov	r13, r5
     f66:	7c c0       	rjmp	.+248    	; 0x1060 <SendTrace+0x25c>
					
					}
					else if(IsLongLong)
     f68:	44 20       	and	r4, r4
     f6a:	89 f0       	breq	.+34     	; 0xf8e <SendTrace+0x18a>
					{
						SendDecimalValue(va_arg(ArgList, unsigned long long));
     f6c:	57 01       	movw	r10, r14
     f6e:	f8 e0       	ldi	r31, 0x08	; 8
     f70:	af 0e       	add	r10, r31
     f72:	b1 1c       	adc	r11, r1
     f74:	f7 01       	movw	r30, r14
     f76:	20 81       	ld	r18, Z
     f78:	31 81       	ldd	r19, Z+1	; 0x01
     f7a:	42 81       	ldd	r20, Z+2	; 0x02
     f7c:	53 81       	ldd	r21, Z+3	; 0x03
     f7e:	64 81       	ldd	r22, Z+4	; 0x04
     f80:	75 81       	ldd	r23, Z+5	; 0x05
     f82:	86 81       	ldd	r24, Z+6	; 0x06
     f84:	97 81       	ldd	r25, Z+7	; 0x07
     f86:	05 dd       	rcall	.-1526   	; 0x992 <SendDecimalValue>
     f88:	75 01       	movw	r14, r10
						
						IsLongLong = FALSE;
     f8a:	45 2c       	mov	r4, r5
     f8c:	69 c0       	rjmp	.+210    	; 0x1060 <SendTrace+0x25c>
					}
					else
					{

						SendDecimalValue(va_arg(ArgList, unsigned int));
     f8e:	f7 01       	movw	r30, r14
     f90:	40 81       	ld	r20, Z
     f92:	51 81       	ldd	r21, Z+1	; 0x01
     f94:	f2 e0       	ldi	r31, 0x02	; 2
     f96:	ef 0e       	add	r14, r31
     f98:	f1 1c       	adc	r15, r1
     f9a:	24 2f       	mov	r18, r20
     f9c:	35 2f       	mov	r19, r21
     f9e:	45 2d       	mov	r20, r5
     fa0:	55 2d       	mov	r21, r5
     fa2:	65 2d       	mov	r22, r5
     fa4:	75 2d       	mov	r23, r5
     fa6:	85 2d       	mov	r24, r5
     fa8:	95 2d       	mov	r25, r5
     faa:	f3 dc       	rcall	.-1562   	; 0x992 <SendDecimalValue>
     fac:	59 c0       	rjmp	.+178    	; 0x1060 <SendTrace+0x25c>
					break;
				}
				case 'x':
				{

					if (IsLong)
     fae:	dd 20       	and	r13, r13
     fb0:	a9 f0       	breq	.+42     	; 0xfdc <SendTrace+0x1d8>
					{

						SendHexValue(va_arg(ArgList, unsigned long));
     fb2:	f7 01       	movw	r30, r14
     fb4:	80 81       	ld	r24, Z
     fb6:	91 81       	ldd	r25, Z+1	; 0x01
     fb8:	a2 81       	ldd	r26, Z+2	; 0x02
     fba:	b3 81       	ldd	r27, Z+3	; 0x03
     fbc:	24 e0       	ldi	r18, 0x04	; 4
     fbe:	e2 0e       	add	r14, r18
     fc0:	f1 1c       	adc	r15, r1
     fc2:	3c 01       	movw	r6, r24
     fc4:	4d 01       	movw	r8, r26
     fc6:	28 2f       	mov	r18, r24
     fc8:	37 2d       	mov	r19, r7
     fca:	48 2d       	mov	r20, r8
     fcc:	59 2d       	mov	r21, r9
     fce:	65 2d       	mov	r22, r5
     fd0:	75 2d       	mov	r23, r5
     fd2:	85 2d       	mov	r24, r5
     fd4:	95 2d       	mov	r25, r5
     fd6:	3a dc       	rcall	.-1932   	; 0x84c <SendHexValue>

						IsLong = FALSE;
     fd8:	d5 2c       	mov	r13, r5
     fda:	42 c0       	rjmp	.+132    	; 0x1060 <SendTrace+0x25c>

					}
					else if (IsLongLong)
     fdc:	44 20       	and	r4, r4
     fde:	79 f0       	breq	.+30     	; 0xffe <SendTrace+0x1fa>
					{
						SendHexValue(va_arg(ArgList, unsigned long long));
     fe0:	f7 01       	movw	r30, r14
     fe2:	20 81       	ld	r18, Z
     fe4:	88 e0       	ldi	r24, 0x08	; 8
     fe6:	e8 0e       	add	r14, r24
     fe8:	f1 1c       	adc	r15, r1
     fea:	31 81       	ldd	r19, Z+1	; 0x01
     fec:	42 81       	ldd	r20, Z+2	; 0x02
     fee:	53 81       	ldd	r21, Z+3	; 0x03
     ff0:	64 81       	ldd	r22, Z+4	; 0x04
     ff2:	75 81       	ldd	r23, Z+5	; 0x05
     ff4:	86 81       	ldd	r24, Z+6	; 0x06
     ff6:	97 81       	ldd	r25, Z+7	; 0x07
     ff8:	29 dc       	rcall	.-1966   	; 0x84c <SendHexValue>
						
						IsLongLong = FALSE;
     ffa:	45 2c       	mov	r4, r5
     ffc:	31 c0       	rjmp	.+98     	; 0x1060 <SendTrace+0x25c>
					}
					else
					{

						SendHexValue(va_arg(ArgList, unsigned int));
     ffe:	f7 01       	movw	r30, r14
    1000:	40 81       	ld	r20, Z
    1002:	51 81       	ldd	r21, Z+1	; 0x01
    1004:	e2 e0       	ldi	r30, 0x02	; 2
    1006:	ee 0e       	add	r14, r30
    1008:	f1 1c       	adc	r15, r1
    100a:	24 2f       	mov	r18, r20
    100c:	35 2f       	mov	r19, r21
    100e:	45 2d       	mov	r20, r5
    1010:	55 2d       	mov	r21, r5
    1012:	65 2d       	mov	r22, r5
    1014:	75 2d       	mov	r23, r5
    1016:	85 2d       	mov	r24, r5
    1018:	95 2d       	mov	r25, r5
    101a:	18 dc       	rcall	.-2000   	; 0x84c <SendHexValue>
    101c:	21 c0       	rjmp	.+66     	; 0x1060 <SendTrace+0x25c>
					break;
				}
				case 'l':
				{

					if (IsLong)
    101e:	dd 20       	and	r13, r13
    1020:	f1 f0       	breq	.+60     	; 0x105e <SendTrace+0x25a>
					{
						IsLongLong = TRUE;
    1022:	43 2c       	mov	r4, r3
						
						IsLong = FALSE;
    1024:	d5 2c       	mov	r13, r5
    1026:	1c c0       	rjmp	.+56     	; 0x1060 <SendTrace+0x25c>
					break;
				}
				case 's':
				{
					
					SendStringValue(va_arg(ArgList, char *)); 
    1028:	f7 01       	movw	r30, r14
    102a:	80 81       	ld	r24, Z
    102c:	91 81       	ldd	r25, Z+1	; 0x01
    102e:	f2 e0       	ldi	r31, 0x02	; 2
    1030:	ef 0e       	add	r14, r31
    1032:	f1 1c       	adc	r15, r1
    1034:	fd db       	rcall	.-2054   	; 0x830 <SendStringValue>

					break;
    1036:	14 c0       	rjmp	.+40     	; 0x1060 <SendTrace+0x25c>
					if(IsLong)
					{
						IsLong = FALSE;
					}
					
					SendDoubleValue(va_arg(ArgList, double));
    1038:	f7 01       	movw	r30, r14
    103a:	60 81       	ld	r22, Z
    103c:	71 81       	ldd	r23, Z+1	; 0x01
    103e:	82 81       	ldd	r24, Z+2	; 0x02
    1040:	93 81       	ldd	r25, Z+3	; 0x03
    1042:	24 e0       	ldi	r18, 0x04	; 4
    1044:	e2 0e       	add	r14, r18
    1046:	f1 1c       	adc	r15, r1
    1048:	5b dd       	rcall	.-1354   	; 0xb00 <SendDoubleValue>
					
					break;
    104a:	d5 2c       	mov	r13, r5
    104c:	09 c0       	rjmp	.+18     	; 0x1060 <SendTrace+0x25c>

		}
		else
		{

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
    104e:	21 e0       	ldi	r18, 0x01	; 1
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	40 e0       	ldi	r20, 0x00	; 0
    1054:	50 e0       	ldi	r21, 0x00	; 0
    1056:	b8 01       	movw	r22, r16
    1058:	85 2d       	mov	r24, r5
    105a:	29 d3       	rcall	.+1618   	; 0x16ae <UARTTransmitSync>
    105c:	01 c0       	rjmp	.+2      	; 0x1060 <SendTrace+0x25c>
						
						IsLong = FALSE;
					}
					else
					{
						IsLong = TRUE;
    105e:	d3 2c       	mov	r13, r3

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
				
		}

		String++;
    1060:	c8 01       	movw	r24, r16
    1062:	01 96       	adiw	r24, 0x01	; 1
		return;
	}

	va_start(ArgList, String);

	while (*String != '\0')
    1064:	f8 01       	movw	r30, r16
    1066:	21 81       	ldd	r18, Z+1	; 0x01
    1068:	22 23       	and	r18, r18
    106a:	11 f0       	breq	.+4      	; 0x1070 <SendTrace+0x26c>

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
				
		}

		String++;
    106c:	8c 01       	movw	r16, r24
    106e:	f9 ce       	rjmp	.-526    	; 0xe62 <SendTrace+0x5e>
		
	}
	
	va_end(ArgList);
	
}
    1070:	0f 90       	pop	r0
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	1f 91       	pop	r17
    1078:	0f 91       	pop	r16
    107a:	ff 90       	pop	r15
    107c:	ef 90       	pop	r14
    107e:	df 90       	pop	r13
    1080:	cf 90       	pop	r12
    1082:	bf 90       	pop	r11
    1084:	af 90       	pop	r10
    1086:	9f 90       	pop	r9
    1088:	8f 90       	pop	r8
    108a:	7f 90       	pop	r7
    108c:	6f 90       	pop	r6
    108e:	5f 90       	pop	r5
    1090:	4f 90       	pop	r4
    1092:	3f 90       	pop	r3
    1094:	08 95       	ret

00001096 <__subsf3>:
    1096:	50 58       	subi	r21, 0x80	; 128

00001098 <__addsf3>:
    1098:	bb 27       	eor	r27, r27
    109a:	aa 27       	eor	r26, r26
    109c:	0e d0       	rcall	.+28     	; 0x10ba <__addsf3x>
    109e:	94 c1       	rjmp	.+808    	; 0x13c8 <__fp_round>
    10a0:	85 d1       	rcall	.+778    	; 0x13ac <__fp_pscA>
    10a2:	30 f0       	brcs	.+12     	; 0x10b0 <__addsf3+0x18>
    10a4:	8a d1       	rcall	.+788    	; 0x13ba <__fp_pscB>
    10a6:	20 f0       	brcs	.+8      	; 0x10b0 <__addsf3+0x18>
    10a8:	31 f4       	brne	.+12     	; 0x10b6 <__addsf3+0x1e>
    10aa:	9f 3f       	cpi	r25, 0xFF	; 255
    10ac:	11 f4       	brne	.+4      	; 0x10b2 <__addsf3+0x1a>
    10ae:	1e f4       	brtc	.+6      	; 0x10b6 <__addsf3+0x1e>
    10b0:	6a c1       	rjmp	.+724    	; 0x1386 <__fp_nan>
    10b2:	0e f4       	brtc	.+2      	; 0x10b6 <__addsf3+0x1e>
    10b4:	e0 95       	com	r30
    10b6:	e7 fb       	bst	r30, 7
    10b8:	60 c1       	rjmp	.+704    	; 0x137a <__fp_inf>

000010ba <__addsf3x>:
    10ba:	e9 2f       	mov	r30, r25
    10bc:	96 d1       	rcall	.+812    	; 0x13ea <__fp_split3>
    10be:	80 f3       	brcs	.-32     	; 0x10a0 <__addsf3+0x8>
    10c0:	ba 17       	cp	r27, r26
    10c2:	62 07       	cpc	r22, r18
    10c4:	73 07       	cpc	r23, r19
    10c6:	84 07       	cpc	r24, r20
    10c8:	95 07       	cpc	r25, r21
    10ca:	18 f0       	brcs	.+6      	; 0x10d2 <__addsf3x+0x18>
    10cc:	71 f4       	brne	.+28     	; 0x10ea <__addsf3x+0x30>
    10ce:	9e f5       	brtc	.+102    	; 0x1136 <__addsf3x+0x7c>
    10d0:	ae c1       	rjmp	.+860    	; 0x142e <__fp_zero>
    10d2:	0e f4       	brtc	.+2      	; 0x10d6 <__addsf3x+0x1c>
    10d4:	e0 95       	com	r30
    10d6:	0b 2e       	mov	r0, r27
    10d8:	ba 2f       	mov	r27, r26
    10da:	a0 2d       	mov	r26, r0
    10dc:	0b 01       	movw	r0, r22
    10de:	b9 01       	movw	r22, r18
    10e0:	90 01       	movw	r18, r0
    10e2:	0c 01       	movw	r0, r24
    10e4:	ca 01       	movw	r24, r20
    10e6:	a0 01       	movw	r20, r0
    10e8:	11 24       	eor	r1, r1
    10ea:	ff 27       	eor	r31, r31
    10ec:	59 1b       	sub	r21, r25
    10ee:	99 f0       	breq	.+38     	; 0x1116 <__addsf3x+0x5c>
    10f0:	59 3f       	cpi	r21, 0xF9	; 249
    10f2:	50 f4       	brcc	.+20     	; 0x1108 <__addsf3x+0x4e>
    10f4:	50 3e       	cpi	r21, 0xE0	; 224
    10f6:	68 f1       	brcs	.+90     	; 0x1152 <__addsf3x+0x98>
    10f8:	1a 16       	cp	r1, r26
    10fa:	f0 40       	sbci	r31, 0x00	; 0
    10fc:	a2 2f       	mov	r26, r18
    10fe:	23 2f       	mov	r18, r19
    1100:	34 2f       	mov	r19, r20
    1102:	44 27       	eor	r20, r20
    1104:	58 5f       	subi	r21, 0xF8	; 248
    1106:	f3 cf       	rjmp	.-26     	; 0x10ee <__addsf3x+0x34>
    1108:	46 95       	lsr	r20
    110a:	37 95       	ror	r19
    110c:	27 95       	ror	r18
    110e:	a7 95       	ror	r26
    1110:	f0 40       	sbci	r31, 0x00	; 0
    1112:	53 95       	inc	r21
    1114:	c9 f7       	brne	.-14     	; 0x1108 <__addsf3x+0x4e>
    1116:	7e f4       	brtc	.+30     	; 0x1136 <__addsf3x+0x7c>
    1118:	1f 16       	cp	r1, r31
    111a:	ba 0b       	sbc	r27, r26
    111c:	62 0b       	sbc	r22, r18
    111e:	73 0b       	sbc	r23, r19
    1120:	84 0b       	sbc	r24, r20
    1122:	ba f0       	brmi	.+46     	; 0x1152 <__addsf3x+0x98>
    1124:	91 50       	subi	r25, 0x01	; 1
    1126:	a1 f0       	breq	.+40     	; 0x1150 <__addsf3x+0x96>
    1128:	ff 0f       	add	r31, r31
    112a:	bb 1f       	adc	r27, r27
    112c:	66 1f       	adc	r22, r22
    112e:	77 1f       	adc	r23, r23
    1130:	88 1f       	adc	r24, r24
    1132:	c2 f7       	brpl	.-16     	; 0x1124 <__addsf3x+0x6a>
    1134:	0e c0       	rjmp	.+28     	; 0x1152 <__addsf3x+0x98>
    1136:	ba 0f       	add	r27, r26
    1138:	62 1f       	adc	r22, r18
    113a:	73 1f       	adc	r23, r19
    113c:	84 1f       	adc	r24, r20
    113e:	48 f4       	brcc	.+18     	; 0x1152 <__addsf3x+0x98>
    1140:	87 95       	ror	r24
    1142:	77 95       	ror	r23
    1144:	67 95       	ror	r22
    1146:	b7 95       	ror	r27
    1148:	f7 95       	ror	r31
    114a:	9e 3f       	cpi	r25, 0xFE	; 254
    114c:	08 f0       	brcs	.+2      	; 0x1150 <__addsf3x+0x96>
    114e:	b3 cf       	rjmp	.-154    	; 0x10b6 <__addsf3+0x1e>
    1150:	93 95       	inc	r25
    1152:	88 0f       	add	r24, r24
    1154:	08 f0       	brcs	.+2      	; 0x1158 <__addsf3x+0x9e>
    1156:	99 27       	eor	r25, r25
    1158:	ee 0f       	add	r30, r30
    115a:	97 95       	ror	r25
    115c:	87 95       	ror	r24
    115e:	08 95       	ret

00001160 <__cmpsf2>:
    1160:	e8 d0       	rcall	.+464    	; 0x1332 <__fp_cmp>
    1162:	08 f4       	brcc	.+2      	; 0x1166 <__cmpsf2+0x6>
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	08 95       	ret

00001168 <__fixsfdi>:
    1168:	be e3       	ldi	r27, 0x3E	; 62
    116a:	04 d0       	rcall	.+8      	; 0x1174 <__fixunssfdi+0x2>
    116c:	08 f4       	brcc	.+2      	; 0x1170 <__fixsfdi+0x8>
    116e:	90 e8       	ldi	r25, 0x80	; 128
    1170:	08 95       	ret

00001172 <__fixunssfdi>:
    1172:	bf e3       	ldi	r27, 0x3F	; 63
    1174:	22 27       	eor	r18, r18
    1176:	33 27       	eor	r19, r19
    1178:	a9 01       	movw	r20, r18
    117a:	3f d1       	rcall	.+638    	; 0x13fa <__fp_splitA>
    117c:	58 f1       	brcs	.+86     	; 0x11d4 <__fixunssfdi+0x62>
    117e:	9f 57       	subi	r25, 0x7F	; 127
    1180:	40 f1       	brcs	.+80     	; 0x11d2 <__fixunssfdi+0x60>
    1182:	b9 17       	cp	r27, r25
    1184:	38 f1       	brcs	.+78     	; 0x11d4 <__fixunssfdi+0x62>
    1186:	bf e3       	ldi	r27, 0x3F	; 63
    1188:	b9 1b       	sub	r27, r25
    118a:	99 27       	eor	r25, r25
    118c:	b8 50       	subi	r27, 0x08	; 8
    118e:	3a f4       	brpl	.+14     	; 0x119e <__fixunssfdi+0x2c>
    1190:	66 0f       	add	r22, r22
    1192:	77 1f       	adc	r23, r23
    1194:	88 1f       	adc	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	b3 95       	inc	r27
    119a:	d2 f3       	brmi	.-12     	; 0x1190 <__fixunssfdi+0x1e>
    119c:	16 c0       	rjmp	.+44     	; 0x11ca <__fixunssfdi+0x58>
    119e:	b8 50       	subi	r27, 0x08	; 8
    11a0:	4a f0       	brmi	.+18     	; 0x11b4 <__fixunssfdi+0x42>
    11a2:	23 2f       	mov	r18, r19
    11a4:	34 2f       	mov	r19, r20
    11a6:	45 2f       	mov	r20, r21
    11a8:	56 2f       	mov	r21, r22
    11aa:	67 2f       	mov	r22, r23
    11ac:	78 2f       	mov	r23, r24
    11ae:	88 27       	eor	r24, r24
    11b0:	b8 50       	subi	r27, 0x08	; 8
    11b2:	ba f7       	brpl	.-18     	; 0x11a2 <__fixunssfdi+0x30>
    11b4:	b8 5f       	subi	r27, 0xF8	; 248
    11b6:	49 f0       	breq	.+18     	; 0x11ca <__fixunssfdi+0x58>
    11b8:	86 95       	lsr	r24
    11ba:	77 95       	ror	r23
    11bc:	67 95       	ror	r22
    11be:	57 95       	ror	r21
    11c0:	47 95       	ror	r20
    11c2:	37 95       	ror	r19
    11c4:	27 95       	ror	r18
    11c6:	ba 95       	dec	r27
    11c8:	b9 f7       	brne	.-18     	; 0x11b8 <__fixunssfdi+0x46>
    11ca:	0e f4       	brtc	.+2      	; 0x11ce <__fixunssfdi+0x5c>
    11cc:	df d0       	rcall	.+446    	; 0x138c <__fp_negdi>
    11ce:	88 94       	clc
    11d0:	08 95       	ret
    11d2:	88 94       	clc
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	70 e0       	ldi	r23, 0x00	; 0
    11d8:	cb 01       	movw	r24, r22
    11da:	08 95       	ret

000011dc <__fixunssfsi>:
    11dc:	0e d1       	rcall	.+540    	; 0x13fa <__fp_splitA>
    11de:	88 f0       	brcs	.+34     	; 0x1202 <__fixunssfsi+0x26>
    11e0:	9f 57       	subi	r25, 0x7F	; 127
    11e2:	90 f0       	brcs	.+36     	; 0x1208 <__fixunssfsi+0x2c>
    11e4:	b9 2f       	mov	r27, r25
    11e6:	99 27       	eor	r25, r25
    11e8:	b7 51       	subi	r27, 0x17	; 23
    11ea:	a0 f0       	brcs	.+40     	; 0x1214 <__fixunssfsi+0x38>
    11ec:	d1 f0       	breq	.+52     	; 0x1222 <__fixunssfsi+0x46>
    11ee:	66 0f       	add	r22, r22
    11f0:	77 1f       	adc	r23, r23
    11f2:	88 1f       	adc	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	1a f0       	brmi	.+6      	; 0x11fe <__fixunssfsi+0x22>
    11f8:	ba 95       	dec	r27
    11fa:	c9 f7       	brne	.-14     	; 0x11ee <__fixunssfsi+0x12>
    11fc:	12 c0       	rjmp	.+36     	; 0x1222 <__fixunssfsi+0x46>
    11fe:	b1 30       	cpi	r27, 0x01	; 1
    1200:	81 f0       	breq	.+32     	; 0x1222 <__fixunssfsi+0x46>
    1202:	15 d1       	rcall	.+554    	; 0x142e <__fp_zero>
    1204:	b1 e0       	ldi	r27, 0x01	; 1
    1206:	08 95       	ret
    1208:	12 c1       	rjmp	.+548    	; 0x142e <__fp_zero>
    120a:	67 2f       	mov	r22, r23
    120c:	78 2f       	mov	r23, r24
    120e:	88 27       	eor	r24, r24
    1210:	b8 5f       	subi	r27, 0xF8	; 248
    1212:	39 f0       	breq	.+14     	; 0x1222 <__fixunssfsi+0x46>
    1214:	b9 3f       	cpi	r27, 0xF9	; 249
    1216:	cc f3       	brlt	.-14     	; 0x120a <__fixunssfsi+0x2e>
    1218:	86 95       	lsr	r24
    121a:	77 95       	ror	r23
    121c:	67 95       	ror	r22
    121e:	b3 95       	inc	r27
    1220:	d9 f7       	brne	.-10     	; 0x1218 <__fixunssfsi+0x3c>
    1222:	3e f4       	brtc	.+14     	; 0x1232 <__fixunssfsi+0x56>
    1224:	90 95       	com	r25
    1226:	80 95       	com	r24
    1228:	70 95       	com	r23
    122a:	61 95       	neg	r22
    122c:	7f 4f       	sbci	r23, 0xFF	; 255
    122e:	8f 4f       	sbci	r24, 0xFF	; 255
    1230:	9f 4f       	sbci	r25, 0xFF	; 255
    1232:	08 95       	ret

00001234 <__floatdisf>:
    1234:	97 fb       	bst	r25, 7
    1236:	0e f4       	brtc	.+2      	; 0x123a <__floatdisf+0x6>
    1238:	a9 d0       	rcall	.+338    	; 0x138c <__fp_negdi>
    123a:	3e c0       	rjmp	.+124    	; 0x12b8 <__fp_di2sf>

0000123c <__floatunsisf>:
    123c:	e8 94       	clt
    123e:	09 c0       	rjmp	.+18     	; 0x1252 <__floatsisf+0x12>

00001240 <__floatsisf>:
    1240:	97 fb       	bst	r25, 7
    1242:	3e f4       	brtc	.+14     	; 0x1252 <__floatsisf+0x12>
    1244:	90 95       	com	r25
    1246:	80 95       	com	r24
    1248:	70 95       	com	r23
    124a:	61 95       	neg	r22
    124c:	7f 4f       	sbci	r23, 0xFF	; 255
    124e:	8f 4f       	sbci	r24, 0xFF	; 255
    1250:	9f 4f       	sbci	r25, 0xFF	; 255
    1252:	99 23       	and	r25, r25
    1254:	a9 f0       	breq	.+42     	; 0x1280 <__floatsisf+0x40>
    1256:	f9 2f       	mov	r31, r25
    1258:	96 e9       	ldi	r25, 0x96	; 150
    125a:	bb 27       	eor	r27, r27
    125c:	93 95       	inc	r25
    125e:	f6 95       	lsr	r31
    1260:	87 95       	ror	r24
    1262:	77 95       	ror	r23
    1264:	67 95       	ror	r22
    1266:	b7 95       	ror	r27
    1268:	f1 11       	cpse	r31, r1
    126a:	f8 cf       	rjmp	.-16     	; 0x125c <__floatsisf+0x1c>
    126c:	fa f4       	brpl	.+62     	; 0x12ac <__floatsisf+0x6c>
    126e:	bb 0f       	add	r27, r27
    1270:	11 f4       	brne	.+4      	; 0x1276 <__floatsisf+0x36>
    1272:	60 ff       	sbrs	r22, 0
    1274:	1b c0       	rjmp	.+54     	; 0x12ac <__floatsisf+0x6c>
    1276:	6f 5f       	subi	r22, 0xFF	; 255
    1278:	7f 4f       	sbci	r23, 0xFF	; 255
    127a:	8f 4f       	sbci	r24, 0xFF	; 255
    127c:	9f 4f       	sbci	r25, 0xFF	; 255
    127e:	16 c0       	rjmp	.+44     	; 0x12ac <__floatsisf+0x6c>
    1280:	88 23       	and	r24, r24
    1282:	11 f0       	breq	.+4      	; 0x1288 <__floatsisf+0x48>
    1284:	96 e9       	ldi	r25, 0x96	; 150
    1286:	11 c0       	rjmp	.+34     	; 0x12aa <__floatsisf+0x6a>
    1288:	77 23       	and	r23, r23
    128a:	21 f0       	breq	.+8      	; 0x1294 <__floatsisf+0x54>
    128c:	9e e8       	ldi	r25, 0x8E	; 142
    128e:	87 2f       	mov	r24, r23
    1290:	76 2f       	mov	r23, r22
    1292:	05 c0       	rjmp	.+10     	; 0x129e <__floatsisf+0x5e>
    1294:	66 23       	and	r22, r22
    1296:	71 f0       	breq	.+28     	; 0x12b4 <__floatsisf+0x74>
    1298:	96 e8       	ldi	r25, 0x86	; 134
    129a:	86 2f       	mov	r24, r22
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	60 e0       	ldi	r22, 0x00	; 0
    12a0:	2a f0       	brmi	.+10     	; 0x12ac <__floatsisf+0x6c>
    12a2:	9a 95       	dec	r25
    12a4:	66 0f       	add	r22, r22
    12a6:	77 1f       	adc	r23, r23
    12a8:	88 1f       	adc	r24, r24
    12aa:	da f7       	brpl	.-10     	; 0x12a2 <__floatsisf+0x62>
    12ac:	88 0f       	add	r24, r24
    12ae:	96 95       	lsr	r25
    12b0:	87 95       	ror	r24
    12b2:	97 f9       	bld	r25, 7
    12b4:	08 95       	ret

000012b6 <__floatundisf>:
    12b6:	e8 94       	clt

000012b8 <__fp_di2sf>:
    12b8:	f9 2f       	mov	r31, r25
    12ba:	96 eb       	ldi	r25, 0xB6	; 182
    12bc:	ff 23       	and	r31, r31
    12be:	81 f0       	breq	.+32     	; 0x12e0 <__fp_di2sf+0x28>
    12c0:	12 16       	cp	r1, r18
    12c2:	13 06       	cpc	r1, r19
    12c4:	14 06       	cpc	r1, r20
    12c6:	44 0b       	sbc	r20, r20
    12c8:	93 95       	inc	r25
    12ca:	f6 95       	lsr	r31
    12cc:	87 95       	ror	r24
    12ce:	77 95       	ror	r23
    12d0:	67 95       	ror	r22
    12d2:	57 95       	ror	r21
    12d4:	40 40       	sbci	r20, 0x00	; 0
    12d6:	ff 23       	and	r31, r31
    12d8:	b9 f7       	brne	.-18     	; 0x12c8 <__fp_di2sf+0x10>
    12da:	1b c0       	rjmp	.+54     	; 0x1312 <__fp_di2sf+0x5a>
    12dc:	99 27       	eor	r25, r25
    12de:	08 95       	ret
    12e0:	88 23       	and	r24, r24
    12e2:	51 f4       	brne	.+20     	; 0x12f8 <__fp_di2sf+0x40>
    12e4:	98 50       	subi	r25, 0x08	; 8
    12e6:	d2 f7       	brpl	.-12     	; 0x12dc <__fp_di2sf+0x24>
    12e8:	87 2b       	or	r24, r23
    12ea:	76 2f       	mov	r23, r22
    12ec:	65 2f       	mov	r22, r21
    12ee:	54 2f       	mov	r21, r20
    12f0:	43 2f       	mov	r20, r19
    12f2:	32 2f       	mov	r19, r18
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	b1 f3       	breq	.-20     	; 0x12e4 <__fp_di2sf+0x2c>
    12f8:	12 16       	cp	r1, r18
    12fa:	13 06       	cpc	r1, r19
    12fc:	14 06       	cpc	r1, r20
    12fe:	44 0b       	sbc	r20, r20
    1300:	88 23       	and	r24, r24
    1302:	3a f0       	brmi	.+14     	; 0x1312 <__fp_di2sf+0x5a>
    1304:	9a 95       	dec	r25
    1306:	44 0f       	add	r20, r20
    1308:	55 1f       	adc	r21, r21
    130a:	66 1f       	adc	r22, r22
    130c:	77 1f       	adc	r23, r23
    130e:	88 1f       	adc	r24, r24
    1310:	ca f7       	brpl	.-14     	; 0x1304 <__fp_di2sf+0x4c>
    1312:	55 23       	and	r21, r21
    1314:	4a f4       	brpl	.+18     	; 0x1328 <__fp_di2sf+0x70>
    1316:	44 0f       	add	r20, r20
    1318:	55 1f       	adc	r21, r21
    131a:	11 f4       	brne	.+4      	; 0x1320 <__fp_di2sf+0x68>
    131c:	60 ff       	sbrs	r22, 0
    131e:	04 c0       	rjmp	.+8      	; 0x1328 <__fp_di2sf+0x70>
    1320:	6f 5f       	subi	r22, 0xFF	; 255
    1322:	7f 4f       	sbci	r23, 0xFF	; 255
    1324:	8f 4f       	sbci	r24, 0xFF	; 255
    1326:	9f 4f       	sbci	r25, 0xFF	; 255
    1328:	88 0f       	add	r24, r24
    132a:	96 95       	lsr	r25
    132c:	87 95       	ror	r24
    132e:	97 f9       	bld	r25, 7
    1330:	08 95       	ret

00001332 <__fp_cmp>:
    1332:	99 0f       	add	r25, r25
    1334:	00 08       	sbc	r0, r0
    1336:	55 0f       	add	r21, r21
    1338:	aa 0b       	sbc	r26, r26
    133a:	e0 e8       	ldi	r30, 0x80	; 128
    133c:	fe ef       	ldi	r31, 0xFE	; 254
    133e:	16 16       	cp	r1, r22
    1340:	17 06       	cpc	r1, r23
    1342:	e8 07       	cpc	r30, r24
    1344:	f9 07       	cpc	r31, r25
    1346:	c0 f0       	brcs	.+48     	; 0x1378 <__fp_cmp+0x46>
    1348:	12 16       	cp	r1, r18
    134a:	13 06       	cpc	r1, r19
    134c:	e4 07       	cpc	r30, r20
    134e:	f5 07       	cpc	r31, r21
    1350:	98 f0       	brcs	.+38     	; 0x1378 <__fp_cmp+0x46>
    1352:	62 1b       	sub	r22, r18
    1354:	73 0b       	sbc	r23, r19
    1356:	84 0b       	sbc	r24, r20
    1358:	95 0b       	sbc	r25, r21
    135a:	39 f4       	brne	.+14     	; 0x136a <__fp_cmp+0x38>
    135c:	0a 26       	eor	r0, r26
    135e:	61 f0       	breq	.+24     	; 0x1378 <__fp_cmp+0x46>
    1360:	23 2b       	or	r18, r19
    1362:	24 2b       	or	r18, r20
    1364:	25 2b       	or	r18, r21
    1366:	21 f4       	brne	.+8      	; 0x1370 <__fp_cmp+0x3e>
    1368:	08 95       	ret
    136a:	0a 26       	eor	r0, r26
    136c:	09 f4       	brne	.+2      	; 0x1370 <__fp_cmp+0x3e>
    136e:	a1 40       	sbci	r26, 0x01	; 1
    1370:	a6 95       	lsr	r26
    1372:	8f ef       	ldi	r24, 0xFF	; 255
    1374:	81 1d       	adc	r24, r1
    1376:	81 1d       	adc	r24, r1
    1378:	08 95       	ret

0000137a <__fp_inf>:
    137a:	97 f9       	bld	r25, 7
    137c:	9f 67       	ori	r25, 0x7F	; 127
    137e:	80 e8       	ldi	r24, 0x80	; 128
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	08 95       	ret

00001386 <__fp_nan>:
    1386:	9f ef       	ldi	r25, 0xFF	; 255
    1388:	80 ec       	ldi	r24, 0xC0	; 192
    138a:	08 95       	ret

0000138c <__fp_negdi>:
    138c:	90 95       	com	r25
    138e:	80 95       	com	r24
    1390:	70 95       	com	r23
    1392:	60 95       	com	r22
    1394:	50 95       	com	r21
    1396:	40 95       	com	r20
    1398:	30 95       	com	r19
    139a:	21 95       	neg	r18
    139c:	3f 4f       	sbci	r19, 0xFF	; 255
    139e:	4f 4f       	sbci	r20, 0xFF	; 255
    13a0:	5f 4f       	sbci	r21, 0xFF	; 255
    13a2:	6f 4f       	sbci	r22, 0xFF	; 255
    13a4:	7f 4f       	sbci	r23, 0xFF	; 255
    13a6:	8f 4f       	sbci	r24, 0xFF	; 255
    13a8:	9f 4f       	sbci	r25, 0xFF	; 255
    13aa:	08 95       	ret

000013ac <__fp_pscA>:
    13ac:	00 24       	eor	r0, r0
    13ae:	0a 94       	dec	r0
    13b0:	16 16       	cp	r1, r22
    13b2:	17 06       	cpc	r1, r23
    13b4:	18 06       	cpc	r1, r24
    13b6:	09 06       	cpc	r0, r25
    13b8:	08 95       	ret

000013ba <__fp_pscB>:
    13ba:	00 24       	eor	r0, r0
    13bc:	0a 94       	dec	r0
    13be:	12 16       	cp	r1, r18
    13c0:	13 06       	cpc	r1, r19
    13c2:	14 06       	cpc	r1, r20
    13c4:	05 06       	cpc	r0, r21
    13c6:	08 95       	ret

000013c8 <__fp_round>:
    13c8:	09 2e       	mov	r0, r25
    13ca:	03 94       	inc	r0
    13cc:	00 0c       	add	r0, r0
    13ce:	11 f4       	brne	.+4      	; 0x13d4 <__fp_round+0xc>
    13d0:	88 23       	and	r24, r24
    13d2:	52 f0       	brmi	.+20     	; 0x13e8 <__fp_round+0x20>
    13d4:	bb 0f       	add	r27, r27
    13d6:	40 f4       	brcc	.+16     	; 0x13e8 <__fp_round+0x20>
    13d8:	bf 2b       	or	r27, r31
    13da:	11 f4       	brne	.+4      	; 0x13e0 <__fp_round+0x18>
    13dc:	60 ff       	sbrs	r22, 0
    13de:	04 c0       	rjmp	.+8      	; 0x13e8 <__fp_round+0x20>
    13e0:	6f 5f       	subi	r22, 0xFF	; 255
    13e2:	7f 4f       	sbci	r23, 0xFF	; 255
    13e4:	8f 4f       	sbci	r24, 0xFF	; 255
    13e6:	9f 4f       	sbci	r25, 0xFF	; 255
    13e8:	08 95       	ret

000013ea <__fp_split3>:
    13ea:	57 fd       	sbrc	r21, 7
    13ec:	90 58       	subi	r25, 0x80	; 128
    13ee:	44 0f       	add	r20, r20
    13f0:	55 1f       	adc	r21, r21
    13f2:	59 f0       	breq	.+22     	; 0x140a <__fp_splitA+0x10>
    13f4:	5f 3f       	cpi	r21, 0xFF	; 255
    13f6:	71 f0       	breq	.+28     	; 0x1414 <__fp_splitA+0x1a>
    13f8:	47 95       	ror	r20

000013fa <__fp_splitA>:
    13fa:	88 0f       	add	r24, r24
    13fc:	97 fb       	bst	r25, 7
    13fe:	99 1f       	adc	r25, r25
    1400:	61 f0       	breq	.+24     	; 0x141a <__fp_splitA+0x20>
    1402:	9f 3f       	cpi	r25, 0xFF	; 255
    1404:	79 f0       	breq	.+30     	; 0x1424 <__fp_splitA+0x2a>
    1406:	87 95       	ror	r24
    1408:	08 95       	ret
    140a:	12 16       	cp	r1, r18
    140c:	13 06       	cpc	r1, r19
    140e:	14 06       	cpc	r1, r20
    1410:	55 1f       	adc	r21, r21
    1412:	f2 cf       	rjmp	.-28     	; 0x13f8 <__fp_split3+0xe>
    1414:	46 95       	lsr	r20
    1416:	f1 df       	rcall	.-30     	; 0x13fa <__fp_splitA>
    1418:	08 c0       	rjmp	.+16     	; 0x142a <__fp_splitA+0x30>
    141a:	16 16       	cp	r1, r22
    141c:	17 06       	cpc	r1, r23
    141e:	18 06       	cpc	r1, r24
    1420:	99 1f       	adc	r25, r25
    1422:	f1 cf       	rjmp	.-30     	; 0x1406 <__fp_splitA+0xc>
    1424:	86 95       	lsr	r24
    1426:	71 05       	cpc	r23, r1
    1428:	61 05       	cpc	r22, r1
    142a:	08 94       	sec
    142c:	08 95       	ret

0000142e <__fp_zero>:
    142e:	e8 94       	clt

00001430 <__fp_szero>:
    1430:	bb 27       	eor	r27, r27
    1432:	66 27       	eor	r22, r22
    1434:	77 27       	eor	r23, r23
    1436:	cb 01       	movw	r24, r22
    1438:	97 f9       	bld	r25, 7
    143a:	08 95       	ret

0000143c <__mulsf3>:
    143c:	0b d0       	rcall	.+22     	; 0x1454 <__mulsf3x>
    143e:	c4 cf       	rjmp	.-120    	; 0x13c8 <__fp_round>
    1440:	b5 df       	rcall	.-150    	; 0x13ac <__fp_pscA>
    1442:	28 f0       	brcs	.+10     	; 0x144e <__mulsf3+0x12>
    1444:	ba df       	rcall	.-140    	; 0x13ba <__fp_pscB>
    1446:	18 f0       	brcs	.+6      	; 0x144e <__mulsf3+0x12>
    1448:	95 23       	and	r25, r21
    144a:	09 f0       	breq	.+2      	; 0x144e <__mulsf3+0x12>
    144c:	96 cf       	rjmp	.-212    	; 0x137a <__fp_inf>
    144e:	9b cf       	rjmp	.-202    	; 0x1386 <__fp_nan>
    1450:	11 24       	eor	r1, r1
    1452:	ee cf       	rjmp	.-36     	; 0x1430 <__fp_szero>

00001454 <__mulsf3x>:
    1454:	ca df       	rcall	.-108    	; 0x13ea <__fp_split3>
    1456:	a0 f3       	brcs	.-24     	; 0x1440 <__mulsf3+0x4>

00001458 <__mulsf3_pse>:
    1458:	95 9f       	mul	r25, r21
    145a:	d1 f3       	breq	.-12     	; 0x1450 <__mulsf3+0x14>
    145c:	95 0f       	add	r25, r21
    145e:	50 e0       	ldi	r21, 0x00	; 0
    1460:	55 1f       	adc	r21, r21
    1462:	62 9f       	mul	r22, r18
    1464:	f0 01       	movw	r30, r0
    1466:	72 9f       	mul	r23, r18
    1468:	bb 27       	eor	r27, r27
    146a:	f0 0d       	add	r31, r0
    146c:	b1 1d       	adc	r27, r1
    146e:	63 9f       	mul	r22, r19
    1470:	aa 27       	eor	r26, r26
    1472:	f0 0d       	add	r31, r0
    1474:	b1 1d       	adc	r27, r1
    1476:	aa 1f       	adc	r26, r26
    1478:	64 9f       	mul	r22, r20
    147a:	66 27       	eor	r22, r22
    147c:	b0 0d       	add	r27, r0
    147e:	a1 1d       	adc	r26, r1
    1480:	66 1f       	adc	r22, r22
    1482:	82 9f       	mul	r24, r18
    1484:	22 27       	eor	r18, r18
    1486:	b0 0d       	add	r27, r0
    1488:	a1 1d       	adc	r26, r1
    148a:	62 1f       	adc	r22, r18
    148c:	73 9f       	mul	r23, r19
    148e:	b0 0d       	add	r27, r0
    1490:	a1 1d       	adc	r26, r1
    1492:	62 1f       	adc	r22, r18
    1494:	83 9f       	mul	r24, r19
    1496:	a0 0d       	add	r26, r0
    1498:	61 1d       	adc	r22, r1
    149a:	22 1f       	adc	r18, r18
    149c:	74 9f       	mul	r23, r20
    149e:	33 27       	eor	r19, r19
    14a0:	a0 0d       	add	r26, r0
    14a2:	61 1d       	adc	r22, r1
    14a4:	23 1f       	adc	r18, r19
    14a6:	84 9f       	mul	r24, r20
    14a8:	60 0d       	add	r22, r0
    14aa:	21 1d       	adc	r18, r1
    14ac:	82 2f       	mov	r24, r18
    14ae:	76 2f       	mov	r23, r22
    14b0:	6a 2f       	mov	r22, r26
    14b2:	11 24       	eor	r1, r1
    14b4:	9f 57       	subi	r25, 0x7F	; 127
    14b6:	50 40       	sbci	r21, 0x00	; 0
    14b8:	8a f0       	brmi	.+34     	; 0x14dc <__mulsf3_pse+0x84>
    14ba:	e1 f0       	breq	.+56     	; 0x14f4 <__mulsf3_pse+0x9c>
    14bc:	88 23       	and	r24, r24
    14be:	4a f0       	brmi	.+18     	; 0x14d2 <__mulsf3_pse+0x7a>
    14c0:	ee 0f       	add	r30, r30
    14c2:	ff 1f       	adc	r31, r31
    14c4:	bb 1f       	adc	r27, r27
    14c6:	66 1f       	adc	r22, r22
    14c8:	77 1f       	adc	r23, r23
    14ca:	88 1f       	adc	r24, r24
    14cc:	91 50       	subi	r25, 0x01	; 1
    14ce:	50 40       	sbci	r21, 0x00	; 0
    14d0:	a9 f7       	brne	.-22     	; 0x14bc <__mulsf3_pse+0x64>
    14d2:	9e 3f       	cpi	r25, 0xFE	; 254
    14d4:	51 05       	cpc	r21, r1
    14d6:	70 f0       	brcs	.+28     	; 0x14f4 <__mulsf3_pse+0x9c>
    14d8:	50 cf       	rjmp	.-352    	; 0x137a <__fp_inf>
    14da:	aa cf       	rjmp	.-172    	; 0x1430 <__fp_szero>
    14dc:	5f 3f       	cpi	r21, 0xFF	; 255
    14de:	ec f3       	brlt	.-6      	; 0x14da <__mulsf3_pse+0x82>
    14e0:	98 3e       	cpi	r25, 0xE8	; 232
    14e2:	dc f3       	brlt	.-10     	; 0x14da <__mulsf3_pse+0x82>
    14e4:	86 95       	lsr	r24
    14e6:	77 95       	ror	r23
    14e8:	67 95       	ror	r22
    14ea:	b7 95       	ror	r27
    14ec:	f7 95       	ror	r31
    14ee:	e7 95       	ror	r30
    14f0:	9f 5f       	subi	r25, 0xFF	; 255
    14f2:	c1 f7       	brne	.-16     	; 0x14e4 <__mulsf3_pse+0x8c>
    14f4:	fe 2b       	or	r31, r30
    14f6:	88 0f       	add	r24, r24
    14f8:	91 1d       	adc	r25, r1
    14fa:	96 95       	lsr	r25
    14fc:	87 95       	ror	r24
    14fe:	97 f9       	bld	r25, 7
    1500:	08 95       	ret

00001502 <InitializeUARTTimer>:

unsigned long
UARTReceiveSync(UART_NUMBER UARTNumber, PVOID ReceiveValue, unsigned long Length)
{
	return UARTReceive(UARTNumber, ReceiveValue, Length, 0);
}
    1502:	82 e0       	ldi	r24, 0x02	; 2
    1504:	84 bd       	out	0x24, r24	; 36
    1506:	15 bc       	out	0x25, r1	; 37
    1508:	16 bc       	out	0x26, r1	; 38
    150a:	17 bc       	out	0x27, r1	; 39
    150c:	18 bc       	out	0x28, r1	; 40
    150e:	80 93 6e 00 	sts	0x006E, r24
    1512:	08 95       	ret

00001514 <InitUARTSync>:
    1514:	cf 93       	push	r28
    1516:	40 93 f1 03 	sts	0x03F1, r20
    151a:	88 23       	and	r24, r24
    151c:	19 f0       	breq	.+6      	; 0x1524 <InitUARTSync+0x10>
    151e:	81 30       	cpi	r24, 0x01	; 1
    1520:	c9 f0       	breq	.+50     	; 0x1554 <InitUARTSync+0x40>
    1522:	30 c0       	rjmp	.+96     	; 0x1584 <InitUARTSync+0x70>
    1524:	70 93 c5 00 	sts	0x00C5, r23
    1528:	60 93 c4 00 	sts	0x00C4, r22
    152c:	88 e9       	ldi	r24, 0x98	; 152
    152e:	80 93 c1 00 	sts	0x00C1, r24
    1532:	41 30       	cpi	r20, 0x01	; 1
    1534:	39 f4       	brne	.+14     	; 0x1544 <InitUARTSync+0x30>
    1536:	86 e0       	ldi	r24, 0x06	; 6
    1538:	80 93 c2 00 	sts	0x00C2, r24
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	80 93 c0 00 	sts	0x00C0, r24
    1542:	03 c0       	rjmp	.+6      	; 0x154a <InitUARTSync+0x36>
    1544:	86 e0       	ldi	r24, 0x06	; 6
    1546:	80 93 c2 00 	sts	0x00C2, r24
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	80 93 df 03 	sts	0x03DF, r24
    1550:	c1 e0       	ldi	r28, 0x01	; 1
    1552:	19 c0       	rjmp	.+50     	; 0x1586 <InitUARTSync+0x72>
    1554:	70 93 cd 00 	sts	0x00CD, r23
    1558:	60 93 cc 00 	sts	0x00CC, r22
    155c:	88 e9       	ldi	r24, 0x98	; 152
    155e:	80 93 c9 00 	sts	0x00C9, r24
    1562:	41 30       	cpi	r20, 0x01	; 1
    1564:	39 f4       	brne	.+14     	; 0x1574 <InitUARTSync+0x60>
    1566:	86 e0       	ldi	r24, 0x06	; 6
    1568:	80 93 ca 00 	sts	0x00CA, r24
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	80 93 c8 00 	sts	0x00C8, r24
    1572:	03 c0       	rjmp	.+6      	; 0x157a <InitUARTSync+0x66>
    1574:	86 e0       	ldi	r24, 0x06	; 6
    1576:	80 93 ca 00 	sts	0x00CA, r24
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	80 93 e0 03 	sts	0x03E0, r24
    1580:	c1 e0       	ldi	r28, 0x01	; 1
    1582:	01 c0       	rjmp	.+2      	; 0x1586 <InitUARTSync+0x72>
    1584:	c0 e0       	ldi	r28, 0x00	; 0
    1586:	bd df       	rcall	.-134    	; 0x1502 <InitializeUARTTimer>
    1588:	8c 2f       	mov	r24, r28
    158a:	cf 91       	pop	r28
    158c:	08 95       	ret

0000158e <UARTTransmit>:
    158e:	cf 92       	push	r12
    1590:	df 92       	push	r13
    1592:	ef 92       	push	r14
    1594:	ff 92       	push	r15
    1596:	0f 93       	push	r16
    1598:	1f 93       	push	r17
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	6b 01       	movw	r12, r22
    15a0:	88 23       	and	r24, r24
    15a2:	19 f0       	breq	.+6      	; 0x15aa <UARTTransmit+0x1c>
    15a4:	81 30       	cpi	r24, 0x01	; 1
    15a6:	c1 f1       	breq	.+112    	; 0x1618 <UARTTransmit+0x8a>
    15a8:	6c c0       	rjmp	.+216    	; 0x1682 <UARTTransmit+0xf4>
    15aa:	80 91 df 03 	lds	r24, 0x03DF
    15ae:	88 23       	and	r24, r24
    15b0:	09 f4       	brne	.+2      	; 0x15b4 <UARTTransmit+0x26>
    15b2:	6b c0       	rjmp	.+214    	; 0x168a <UARTTransmit+0xfc>
    15b4:	21 15       	cp	r18, r1
    15b6:	31 05       	cpc	r19, r1
    15b8:	41 05       	cpc	r20, r1
    15ba:	51 05       	cpc	r21, r1
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <UARTTransmit+0x32>
    15be:	6c c0       	rjmp	.+216    	; 0x1698 <UARTTransmit+0x10a>
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	dc 01       	movw	r26, r24
    15c6:	c0 ec       	ldi	r28, 0xC0	; 192
    15c8:	d0 e0       	ldi	r29, 0x00	; 0
    15ca:	0f 2e       	mov	r0, r31
    15cc:	f1 ec       	ldi	r31, 0xC1	; 193
    15ce:	ef 2e       	mov	r14, r31
    15d0:	f1 2c       	mov	r15, r1
    15d2:	f0 2d       	mov	r31, r0
    15d4:	66 ec       	ldi	r22, 0xC6	; 198
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	18 81       	ld	r17, Y
    15da:	15 ff       	sbrs	r17, 5
    15dc:	fd cf       	rjmp	.-6      	; 0x15d8 <UARTTransmit+0x4a>
    15de:	10 91 f1 03 	lds	r17, 0x03F1
    15e2:	11 23       	and	r17, r17
    15e4:	59 f0       	breq	.+22     	; 0x15fc <UARTTransmit+0x6e>
    15e6:	00 23       	and	r16, r16
    15e8:	29 f0       	breq	.+10     	; 0x15f4 <UARTTransmit+0x66>
    15ea:	f7 01       	movw	r30, r14
    15ec:	10 81       	ld	r17, Z
    15ee:	11 60       	ori	r17, 0x01	; 1
    15f0:	10 83       	st	Z, r17
    15f2:	04 c0       	rjmp	.+8      	; 0x15fc <UARTTransmit+0x6e>
    15f4:	f7 01       	movw	r30, r14
    15f6:	10 81       	ld	r17, Z
    15f8:	1e 7f       	andi	r17, 0xFE	; 254
    15fa:	10 83       	st	Z, r17
    15fc:	f6 01       	movw	r30, r12
    15fe:	11 91       	ld	r17, Z+
    1600:	6f 01       	movw	r12, r30
    1602:	fb 01       	movw	r30, r22
    1604:	10 83       	st	Z, r17
    1606:	01 96       	adiw	r24, 0x01	; 1
    1608:	a1 1d       	adc	r26, r1
    160a:	b1 1d       	adc	r27, r1
    160c:	82 17       	cp	r24, r18
    160e:	93 07       	cpc	r25, r19
    1610:	a4 07       	cpc	r26, r20
    1612:	b5 07       	cpc	r27, r21
    1614:	09 f7       	brne	.-62     	; 0x15d8 <UARTTransmit+0x4a>
    1616:	40 c0       	rjmp	.+128    	; 0x1698 <UARTTransmit+0x10a>
    1618:	80 91 e0 03 	lds	r24, 0x03E0
    161c:	88 23       	and	r24, r24
    161e:	c9 f1       	breq	.+114    	; 0x1692 <UARTTransmit+0x104>
    1620:	21 15       	cp	r18, r1
    1622:	31 05       	cpc	r19, r1
    1624:	41 05       	cpc	r20, r1
    1626:	51 05       	cpc	r21, r1
    1628:	b9 f1       	breq	.+110    	; 0x1698 <UARTTransmit+0x10a>
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	dc 01       	movw	r26, r24
    1630:	c8 ec       	ldi	r28, 0xC8	; 200
    1632:	d0 e0       	ldi	r29, 0x00	; 0
    1634:	0f 2e       	mov	r0, r31
    1636:	f9 ec       	ldi	r31, 0xC9	; 201
    1638:	ef 2e       	mov	r14, r31
    163a:	f1 2c       	mov	r15, r1
    163c:	f0 2d       	mov	r31, r0
    163e:	6e ec       	ldi	r22, 0xCE	; 206
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	18 81       	ld	r17, Y
    1644:	15 ff       	sbrs	r17, 5
    1646:	fd cf       	rjmp	.-6      	; 0x1642 <UARTTransmit+0xb4>
    1648:	10 91 f1 03 	lds	r17, 0x03F1
    164c:	11 23       	and	r17, r17
    164e:	59 f0       	breq	.+22     	; 0x1666 <UARTTransmit+0xd8>
    1650:	00 23       	and	r16, r16
    1652:	29 f0       	breq	.+10     	; 0x165e <UARTTransmit+0xd0>
    1654:	f7 01       	movw	r30, r14
    1656:	10 81       	ld	r17, Z
    1658:	11 60       	ori	r17, 0x01	; 1
    165a:	10 83       	st	Z, r17
    165c:	04 c0       	rjmp	.+8      	; 0x1666 <UARTTransmit+0xd8>
    165e:	f7 01       	movw	r30, r14
    1660:	10 81       	ld	r17, Z
    1662:	1e 7f       	andi	r17, 0xFE	; 254
    1664:	10 83       	st	Z, r17
    1666:	f6 01       	movw	r30, r12
    1668:	11 91       	ld	r17, Z+
    166a:	6f 01       	movw	r12, r30
    166c:	fb 01       	movw	r30, r22
    166e:	10 83       	st	Z, r17
    1670:	01 96       	adiw	r24, 0x01	; 1
    1672:	a1 1d       	adc	r26, r1
    1674:	b1 1d       	adc	r27, r1
    1676:	82 17       	cp	r24, r18
    1678:	93 07       	cpc	r25, r19
    167a:	a4 07       	cpc	r26, r20
    167c:	b5 07       	cpc	r27, r21
    167e:	09 f7       	brne	.-62     	; 0x1642 <UARTTransmit+0xb4>
    1680:	0b c0       	rjmp	.+22     	; 0x1698 <UARTTransmit+0x10a>
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	a9 01       	movw	r20, r18
    1688:	07 c0       	rjmp	.+14     	; 0x1698 <UARTTransmit+0x10a>
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	a9 01       	movw	r20, r18
    1690:	03 c0       	rjmp	.+6      	; 0x1698 <UARTTransmit+0x10a>
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	a9 01       	movw	r20, r18
    1698:	ca 01       	movw	r24, r20
    169a:	b9 01       	movw	r22, r18
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	1f 91       	pop	r17
    16a2:	0f 91       	pop	r16
    16a4:	ff 90       	pop	r15
    16a6:	ef 90       	pop	r14
    16a8:	df 90       	pop	r13
    16aa:	cf 90       	pop	r12
    16ac:	08 95       	ret

000016ae <UARTTransmitSync>:
    16ae:	0f 93       	push	r16
    16b0:	00 e0       	ldi	r16, 0x00	; 0
    16b2:	6d df       	rcall	.-294    	; 0x158e <UARTTransmit>
    16b4:	0f 91       	pop	r16
    16b6:	08 95       	ret

000016b8 <__vector_16>:
	return IndexI;

}

ISR(TIMER0_COMPA_vect)
{
    16b8:	1f 92       	push	r1
    16ba:	0f 92       	push	r0
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	0f 92       	push	r0
    16c0:	11 24       	eor	r1, r1
    16c2:	8f 93       	push	r24
	gUARTTimerTriggered = TRUE;
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	80 93 f4 03 	sts	0x03F4, r24
}
    16ca:	8f 91       	pop	r24
    16cc:	0f 90       	pop	r0
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	0f 90       	pop	r0
    16d2:	1f 90       	pop	r1
    16d4:	18 95       	reti

000016d6 <__vector_20>:

ISR(USART0_RX_vect)
{
    16d6:	1f 92       	push	r1
    16d8:	0f 92       	push	r0
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	0f 92       	push	r0
    16de:	11 24       	eor	r1, r1
    16e0:	0b b6       	in	r0, 0x3b	; 59
    16e2:	0f 92       	push	r0
    16e4:	2f 93       	push	r18
    16e6:	3f 93       	push	r19
    16e8:	4f 93       	push	r20
    16ea:	5f 93       	push	r21
    16ec:	6f 93       	push	r22
    16ee:	7f 93       	push	r23
    16f0:	8f 93       	push	r24
    16f2:	9f 93       	push	r25
    16f4:	af 93       	push	r26
    16f6:	bf 93       	push	r27
    16f8:	ef 93       	push	r30
    16fa:	ff 93       	push	r31
	if(gRCICallback0 != NULL)
    16fc:	e0 91 e3 03 	lds	r30, 0x03E3
    1700:	f0 91 e4 03 	lds	r31, 0x03E4
    1704:	30 97       	sbiw	r30, 0x00	; 0
    1706:	31 f0       	breq	.+12     	; 0x1714 <__vector_20+0x3e>
	{
		gRCICallback0(UART_ZERO, gRCICallbackContext0);
    1708:	60 91 ef 03 	lds	r22, 0x03EF
    170c:	70 91 f0 03 	lds	r23, 0x03F0
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	09 95       	icall
	}
}
    1714:	ff 91       	pop	r31
    1716:	ef 91       	pop	r30
    1718:	bf 91       	pop	r27
    171a:	af 91       	pop	r26
    171c:	9f 91       	pop	r25
    171e:	8f 91       	pop	r24
    1720:	7f 91       	pop	r23
    1722:	6f 91       	pop	r22
    1724:	5f 91       	pop	r21
    1726:	4f 91       	pop	r20
    1728:	3f 91       	pop	r19
    172a:	2f 91       	pop	r18
    172c:	0f 90       	pop	r0
    172e:	0b be       	out	0x3b, r0	; 59
    1730:	0f 90       	pop	r0
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	0f 90       	pop	r0
    1736:	1f 90       	pop	r1
    1738:	18 95       	reti

0000173a <__vector_28>:

ISR(USART1_RX_vect)
{
    173a:	1f 92       	push	r1
    173c:	0f 92       	push	r0
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	0f 92       	push	r0
    1742:	11 24       	eor	r1, r1
    1744:	0b b6       	in	r0, 0x3b	; 59
    1746:	0f 92       	push	r0
    1748:	2f 93       	push	r18
    174a:	3f 93       	push	r19
    174c:	4f 93       	push	r20
    174e:	5f 93       	push	r21
    1750:	6f 93       	push	r22
    1752:	7f 93       	push	r23
    1754:	8f 93       	push	r24
    1756:	9f 93       	push	r25
    1758:	af 93       	push	r26
    175a:	bf 93       	push	r27
    175c:	ef 93       	push	r30
    175e:	ff 93       	push	r31
	if(gRCICallback1 != NULL)
    1760:	e0 91 e9 03 	lds	r30, 0x03E9
    1764:	f0 91 ea 03 	lds	r31, 0x03EA
    1768:	30 97       	sbiw	r30, 0x00	; 0
    176a:	31 f0       	breq	.+12     	; 0x1778 <__vector_28+0x3e>
	{
		gRCICallback1(UART_ONE, gRCICallbackContext1);
    176c:	60 91 e7 03 	lds	r22, 0x03E7
    1770:	70 91 e8 03 	lds	r23, 0x03E8
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	09 95       	icall
	}
}
    1778:	ff 91       	pop	r31
    177a:	ef 91       	pop	r30
    177c:	bf 91       	pop	r27
    177e:	af 91       	pop	r26
    1780:	9f 91       	pop	r25
    1782:	8f 91       	pop	r24
    1784:	7f 91       	pop	r23
    1786:	6f 91       	pop	r22
    1788:	5f 91       	pop	r21
    178a:	4f 91       	pop	r20
    178c:	3f 91       	pop	r19
    178e:	2f 91       	pop	r18
    1790:	0f 90       	pop	r0
    1792:	0b be       	out	0x3b, r0	; 59
    1794:	0f 90       	pop	r0
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	0f 90       	pop	r0
    179a:	1f 90       	pop	r1
    179c:	18 95       	reti

0000179e <__vector_22>:

ISR(USART0_TX_vect)
{
    179e:	1f 92       	push	r1
    17a0:	0f 92       	push	r0
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	0f 92       	push	r0
    17a6:	11 24       	eor	r1, r1
    17a8:	0b b6       	in	r0, 0x3b	; 59
    17aa:	0f 92       	push	r0
    17ac:	2f 93       	push	r18
    17ae:	3f 93       	push	r19
    17b0:	4f 93       	push	r20
    17b2:	5f 93       	push	r21
    17b4:	6f 93       	push	r22
    17b6:	7f 93       	push	r23
    17b8:	8f 93       	push	r24
    17ba:	9f 93       	push	r25
    17bc:	af 93       	push	r26
    17be:	bf 93       	push	r27
    17c0:	ef 93       	push	r30
    17c2:	ff 93       	push	r31
	if(gTCICallback0 != NULL)
    17c4:	e0 91 e5 03 	lds	r30, 0x03E5
    17c8:	f0 91 e6 03 	lds	r31, 0x03E6
    17cc:	30 97       	sbiw	r30, 0x00	; 0
    17ce:	31 f0       	breq	.+12     	; 0x17dc <__vector_22+0x3e>
	{
		gTCICallback0(UART_ZERO, gTCICallbackContext0);
    17d0:	60 91 ed 03 	lds	r22, 0x03ED
    17d4:	70 91 ee 03 	lds	r23, 0x03EE
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	09 95       	icall
	}
}
    17dc:	ff 91       	pop	r31
    17de:	ef 91       	pop	r30
    17e0:	bf 91       	pop	r27
    17e2:	af 91       	pop	r26
    17e4:	9f 91       	pop	r25
    17e6:	8f 91       	pop	r24
    17e8:	7f 91       	pop	r23
    17ea:	6f 91       	pop	r22
    17ec:	5f 91       	pop	r21
    17ee:	4f 91       	pop	r20
    17f0:	3f 91       	pop	r19
    17f2:	2f 91       	pop	r18
    17f4:	0f 90       	pop	r0
    17f6:	0b be       	out	0x3b, r0	; 59
    17f8:	0f 90       	pop	r0
    17fa:	0f be       	out	0x3f, r0	; 63
    17fc:	0f 90       	pop	r0
    17fe:	1f 90       	pop	r1
    1800:	18 95       	reti

00001802 <__vector_30>:

ISR(USART1_TX_vect)
{
    1802:	1f 92       	push	r1
    1804:	0f 92       	push	r0
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	0f 92       	push	r0
    180a:	11 24       	eor	r1, r1
    180c:	0b b6       	in	r0, 0x3b	; 59
    180e:	0f 92       	push	r0
    1810:	2f 93       	push	r18
    1812:	3f 93       	push	r19
    1814:	4f 93       	push	r20
    1816:	5f 93       	push	r21
    1818:	6f 93       	push	r22
    181a:	7f 93       	push	r23
    181c:	8f 93       	push	r24
    181e:	9f 93       	push	r25
    1820:	af 93       	push	r26
    1822:	bf 93       	push	r27
    1824:	ef 93       	push	r30
    1826:	ff 93       	push	r31
	if(gTCICallback1 != NULL)
    1828:	e0 91 eb 03 	lds	r30, 0x03EB
    182c:	f0 91 ec 03 	lds	r31, 0x03EC
    1830:	30 97       	sbiw	r30, 0x00	; 0
    1832:	31 f0       	breq	.+12     	; 0x1840 <__vector_30+0x3e>
	{
		gTCICallback1(UART_ONE, gTCICallbackContext1);
    1834:	60 91 f2 03 	lds	r22, 0x03F2
    1838:	70 91 f3 03 	lds	r23, 0x03F3
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	09 95       	icall
	}
    1840:	ff 91       	pop	r31
    1842:	ef 91       	pop	r30
    1844:	bf 91       	pop	r27
    1846:	af 91       	pop	r26
    1848:	9f 91       	pop	r25
    184a:	8f 91       	pop	r24
    184c:	7f 91       	pop	r23
    184e:	6f 91       	pop	r22
    1850:	5f 91       	pop	r21
    1852:	4f 91       	pop	r20
    1854:	3f 91       	pop	r19
    1856:	2f 91       	pop	r18
    1858:	0f 90       	pop	r0
    185a:	0b be       	out	0x3b, r0	; 59
    185c:	0f 90       	pop	r0
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	0f 90       	pop	r0
    1862:	1f 90       	pop	r1
    1864:	18 95       	reti

00001866 <__tablejump2__>:
    1866:	ee 0f       	add	r30, r30
    1868:	ff 1f       	adc	r31, r31

0000186a <__tablejump__>:
    186a:	05 90       	lpm	r0, Z+
    186c:	f4 91       	lpm	r31, Z
    186e:	e0 2d       	mov	r30, r0
    1870:	09 94       	ijmp

00001872 <__moddi3>:
    1872:	68 94       	set
    1874:	01 c0       	rjmp	.+2      	; 0x1878 <__divdi3_moddi3>

00001876 <__divdi3>:
    1876:	e8 94       	clt

00001878 <__divdi3_moddi3>:
    1878:	f9 2f       	mov	r31, r25
    187a:	f1 2b       	or	r31, r17
    187c:	0a f0       	brmi	.+2      	; 0x1880 <__divdi3_moddi3+0x8>
    187e:	27 c0       	rjmp	.+78     	; 0x18ce <__udivdi3_umoddi3>
    1880:	a0 e0       	ldi	r26, 0x00	; 0
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e5 e4       	ldi	r30, 0x45	; 69
    1886:	fc e0       	ldi	r31, 0x0C	; 12
    1888:	93 c0       	rjmp	.+294    	; 0x19b0 <__prologue_saves__+0xc>
    188a:	09 2e       	mov	r0, r25
    188c:	05 94       	asr	r0
    188e:	1a f4       	brpl	.+6      	; 0x1896 <__divdi3_moddi3+0x1e>
    1890:	79 d0       	rcall	.+242    	; 0x1984 <__negdi2>
    1892:	11 23       	and	r17, r17
    1894:	92 f4       	brpl	.+36     	; 0x18ba <__divdi3_moddi3+0x42>
    1896:	f0 e8       	ldi	r31, 0x80	; 128
    1898:	0f 26       	eor	r0, r31
    189a:	ff ef       	ldi	r31, 0xFF	; 255
    189c:	e0 94       	com	r14
    189e:	f0 94       	com	r15
    18a0:	00 95       	com	r16
    18a2:	10 95       	com	r17
    18a4:	b0 94       	com	r11
    18a6:	c0 94       	com	r12
    18a8:	d0 94       	com	r13
    18aa:	a1 94       	neg	r10
    18ac:	bf 0a       	sbc	r11, r31
    18ae:	cf 0a       	sbc	r12, r31
    18b0:	df 0a       	sbc	r13, r31
    18b2:	ef 0a       	sbc	r14, r31
    18b4:	ff 0a       	sbc	r15, r31
    18b6:	0f 0b       	sbc	r16, r31
    18b8:	1f 0b       	sbc	r17, r31
    18ba:	13 d0       	rcall	.+38     	; 0x18e2 <__udivmod64>
    18bc:	07 fc       	sbrc	r0, 7
    18be:	62 d0       	rcall	.+196    	; 0x1984 <__negdi2>
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	ec e0       	ldi	r30, 0x0C	; 12
    18c6:	90 c0       	rjmp	.+288    	; 0x19e8 <__epilogue_restores__+0xc>

000018c8 <__umoddi3>:
    18c8:	68 94       	set
    18ca:	01 c0       	rjmp	.+2      	; 0x18ce <__udivdi3_umoddi3>

000018cc <__udivdi3>:
    18cc:	e8 94       	clt

000018ce <__udivdi3_umoddi3>:
    18ce:	8f 92       	push	r8
    18d0:	9f 92       	push	r9
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	05 d0       	rcall	.+10     	; 0x18e2 <__udivmod64>
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
    18dc:	9f 90       	pop	r9
    18de:	8f 90       	pop	r8
    18e0:	08 95       	ret

000018e2 <__udivmod64>:
    18e2:	88 24       	eor	r8, r8
    18e4:	99 24       	eor	r9, r9
    18e6:	f4 01       	movw	r30, r8
    18e8:	e4 01       	movw	r28, r8
    18ea:	b0 e4       	ldi	r27, 0x40	; 64
    18ec:	9f 93       	push	r25
    18ee:	aa 27       	eor	r26, r26
    18f0:	9a 15       	cp	r25, r10
    18f2:	8b 04       	cpc	r8, r11
    18f4:	9c 04       	cpc	r9, r12
    18f6:	ed 05       	cpc	r30, r13
    18f8:	fe 05       	cpc	r31, r14
    18fa:	cf 05       	cpc	r28, r15
    18fc:	d0 07       	cpc	r29, r16
    18fe:	a1 07       	cpc	r26, r17
    1900:	98 f4       	brcc	.+38     	; 0x1928 <__udivmod64+0x46>
    1902:	ad 2f       	mov	r26, r29
    1904:	dc 2f       	mov	r29, r28
    1906:	cf 2f       	mov	r28, r31
    1908:	fe 2f       	mov	r31, r30
    190a:	e9 2d       	mov	r30, r9
    190c:	98 2c       	mov	r9, r8
    190e:	89 2e       	mov	r8, r25
    1910:	98 2f       	mov	r25, r24
    1912:	87 2f       	mov	r24, r23
    1914:	76 2f       	mov	r23, r22
    1916:	65 2f       	mov	r22, r21
    1918:	54 2f       	mov	r21, r20
    191a:	43 2f       	mov	r20, r19
    191c:	32 2f       	mov	r19, r18
    191e:	22 27       	eor	r18, r18
    1920:	b8 50       	subi	r27, 0x08	; 8
    1922:	31 f7       	brne	.-52     	; 0x18f0 <__udivmod64+0xe>
    1924:	bf 91       	pop	r27
    1926:	27 c0       	rjmp	.+78     	; 0x1976 <__udivmod64+0x94>
    1928:	1b 2e       	mov	r1, r27
    192a:	bf 91       	pop	r27
    192c:	bb 27       	eor	r27, r27
    192e:	22 0f       	add	r18, r18
    1930:	33 1f       	adc	r19, r19
    1932:	44 1f       	adc	r20, r20
    1934:	55 1f       	adc	r21, r21
    1936:	66 1f       	adc	r22, r22
    1938:	77 1f       	adc	r23, r23
    193a:	88 1f       	adc	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	88 1c       	adc	r8, r8
    1940:	99 1c       	adc	r9, r9
    1942:	ee 1f       	adc	r30, r30
    1944:	ff 1f       	adc	r31, r31
    1946:	cc 1f       	adc	r28, r28
    1948:	dd 1f       	adc	r29, r29
    194a:	aa 1f       	adc	r26, r26
    194c:	bb 1f       	adc	r27, r27
    194e:	8a 14       	cp	r8, r10
    1950:	9b 04       	cpc	r9, r11
    1952:	ec 05       	cpc	r30, r12
    1954:	fd 05       	cpc	r31, r13
    1956:	ce 05       	cpc	r28, r14
    1958:	df 05       	cpc	r29, r15
    195a:	a0 07       	cpc	r26, r16
    195c:	b1 07       	cpc	r27, r17
    195e:	48 f0       	brcs	.+18     	; 0x1972 <__udivmod64+0x90>
    1960:	8a 18       	sub	r8, r10
    1962:	9b 08       	sbc	r9, r11
    1964:	ec 09       	sbc	r30, r12
    1966:	fd 09       	sbc	r31, r13
    1968:	ce 09       	sbc	r28, r14
    196a:	df 09       	sbc	r29, r15
    196c:	a0 0b       	sbc	r26, r16
    196e:	b1 0b       	sbc	r27, r17
    1970:	21 60       	ori	r18, 0x01	; 1
    1972:	1a 94       	dec	r1
    1974:	e1 f6       	brne	.-72     	; 0x192e <__udivmod64+0x4c>
    1976:	2e f4       	brtc	.+10     	; 0x1982 <__udivmod64+0xa0>
    1978:	94 01       	movw	r18, r8
    197a:	af 01       	movw	r20, r30
    197c:	be 01       	movw	r22, r28
    197e:	cd 01       	movw	r24, r26
    1980:	00 0c       	add	r0, r0
    1982:	08 95       	ret

00001984 <__negdi2>:
    1984:	60 95       	com	r22
    1986:	70 95       	com	r23
    1988:	80 95       	com	r24
    198a:	90 95       	com	r25
    198c:	30 95       	com	r19
    198e:	40 95       	com	r20
    1990:	50 95       	com	r21
    1992:	21 95       	neg	r18
    1994:	3f 4f       	sbci	r19, 0xFF	; 255
    1996:	4f 4f       	sbci	r20, 0xFF	; 255
    1998:	5f 4f       	sbci	r21, 0xFF	; 255
    199a:	6f 4f       	sbci	r22, 0xFF	; 255
    199c:	7f 4f       	sbci	r23, 0xFF	; 255
    199e:	8f 4f       	sbci	r24, 0xFF	; 255
    19a0:	9f 4f       	sbci	r25, 0xFF	; 255
    19a2:	08 95       	ret

000019a4 <__prologue_saves__>:
    19a4:	2f 92       	push	r2
    19a6:	3f 92       	push	r3
    19a8:	4f 92       	push	r4
    19aa:	5f 92       	push	r5
    19ac:	6f 92       	push	r6
    19ae:	7f 92       	push	r7
    19b0:	8f 92       	push	r8
    19b2:	9f 92       	push	r9
    19b4:	af 92       	push	r10
    19b6:	bf 92       	push	r11
    19b8:	cf 92       	push	r12
    19ba:	df 92       	push	r13
    19bc:	ef 92       	push	r14
    19be:	ff 92       	push	r15
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	cf 93       	push	r28
    19c6:	df 93       	push	r29
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	ca 1b       	sub	r28, r26
    19ce:	db 0b       	sbc	r29, r27
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	09 94       	ijmp

000019dc <__epilogue_restores__>:
    19dc:	2a 88       	ldd	r2, Y+18	; 0x12
    19de:	39 88       	ldd	r3, Y+17	; 0x11
    19e0:	48 88       	ldd	r4, Y+16	; 0x10
    19e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    19e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    19e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    19e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    19ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    19ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    19ee:	b9 84       	ldd	r11, Y+9	; 0x09
    19f0:	c8 84       	ldd	r12, Y+8	; 0x08
    19f2:	df 80       	ldd	r13, Y+7	; 0x07
    19f4:	ee 80       	ldd	r14, Y+6	; 0x06
    19f6:	fd 80       	ldd	r15, Y+5	; 0x05
    19f8:	0c 81       	ldd	r16, Y+4	; 0x04
    19fa:	1b 81       	ldd	r17, Y+3	; 0x03
    19fc:	aa 81       	ldd	r26, Y+2	; 0x02
    19fe:	b9 81       	ldd	r27, Y+1	; 0x01
    1a00:	ce 0f       	add	r28, r30
    1a02:	d1 1d       	adc	r29, r1
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	cd bf       	out	0x3d, r28	; 61
    1a0e:	ed 01       	movw	r28, r26
    1a10:	08 95       	ret

00001a12 <__ashrdi3>:
    1a12:	97 fb       	bst	r25, 7
    1a14:	10 f8       	bld	r1, 0

00001a16 <__lshrdi3>:
    1a16:	16 94       	lsr	r1
    1a18:	00 08       	sbc	r0, r0
    1a1a:	0f 93       	push	r16
    1a1c:	08 30       	cpi	r16, 0x08	; 8
    1a1e:	98 f0       	brcs	.+38     	; 0x1a46 <__lshrdi3+0x30>
    1a20:	08 50       	subi	r16, 0x08	; 8
    1a22:	23 2f       	mov	r18, r19
    1a24:	34 2f       	mov	r19, r20
    1a26:	45 2f       	mov	r20, r21
    1a28:	56 2f       	mov	r21, r22
    1a2a:	67 2f       	mov	r22, r23
    1a2c:	78 2f       	mov	r23, r24
    1a2e:	89 2f       	mov	r24, r25
    1a30:	90 2d       	mov	r25, r0
    1a32:	f4 cf       	rjmp	.-24     	; 0x1a1c <__lshrdi3+0x6>
    1a34:	05 94       	asr	r0
    1a36:	97 95       	ror	r25
    1a38:	87 95       	ror	r24
    1a3a:	77 95       	ror	r23
    1a3c:	67 95       	ror	r22
    1a3e:	57 95       	ror	r21
    1a40:	47 95       	ror	r20
    1a42:	37 95       	ror	r19
    1a44:	27 95       	ror	r18
    1a46:	0a 95       	dec	r16
    1a48:	aa f7       	brpl	.-22     	; 0x1a34 <__lshrdi3+0x1e>
    1a4a:	0f 91       	pop	r16
    1a4c:	08 95       	ret

00001a4e <__cmpdi2_s8>:
    1a4e:	00 24       	eor	r0, r0
    1a50:	a7 fd       	sbrc	r26, 7
    1a52:	00 94       	com	r0
    1a54:	2a 17       	cp	r18, r26
    1a56:	30 05       	cpc	r19, r0
    1a58:	40 05       	cpc	r20, r0
    1a5a:	50 05       	cpc	r21, r0
    1a5c:	60 05       	cpc	r22, r0
    1a5e:	70 05       	cpc	r23, r0
    1a60:	80 05       	cpc	r24, r0
    1a62:	90 05       	cpc	r25, r0
    1a64:	08 95       	ret

00001a66 <_exit>:
    1a66:	f8 94       	cli

00001a68 <__stop_program>:
    1a68:	ff cf       	rjmp	.-2      	; 0x1a68 <__stop_program>
