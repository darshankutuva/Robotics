
TwiSlaveTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002da  00800100  00001a32  00001ac6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  008003da  008003da  00001da0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001da0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ae8  00000000  00000000  00001f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000751  00000000  00000000  00003a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001289  00000000  00000000  00004181  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007e8  00000000  00000000  0000540c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a92  00000000  00000000  00005bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002e20  00000000  00000000  00006686  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  000094a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5b c0       	rjmp	.+182    	; 0xb8 <__ctors_end>
       2:	00 00       	nop
       4:	77 c0       	rjmp	.+238    	; 0xf4 <__bad_interrupt>
       6:	00 00       	nop
       8:	75 c0       	rjmp	.+234    	; 0xf4 <__bad_interrupt>
       a:	00 00       	nop
       c:	73 c0       	rjmp	.+230    	; 0xf4 <__bad_interrupt>
       e:	00 00       	nop
      10:	71 c0       	rjmp	.+226    	; 0xf4 <__bad_interrupt>
      12:	00 00       	nop
      14:	6f c0       	rjmp	.+222    	; 0xf4 <__bad_interrupt>
      16:	00 00       	nop
      18:	6d c0       	rjmp	.+218    	; 0xf4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6b c0       	rjmp	.+214    	; 0xf4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	69 c0       	rjmp	.+210    	; 0xf4 <__bad_interrupt>
      22:	00 00       	nop
      24:	67 c0       	rjmp	.+206    	; 0xf4 <__bad_interrupt>
      26:	00 00       	nop
      28:	65 c0       	rjmp	.+202    	; 0xf4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	63 c0       	rjmp	.+198    	; 0xf4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	61 c0       	rjmp	.+194    	; 0xf4 <__bad_interrupt>
      32:	00 00       	nop
      34:	5f c0       	rjmp	.+190    	; 0xf4 <__bad_interrupt>
      36:	00 00       	nop
      38:	5d c0       	rjmp	.+186    	; 0xf4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5b c0       	rjmp	.+182    	; 0xf4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 40 0b 	jmp	0x1680	; 0x1680 <__vector_16>
      44:	57 c0       	rjmp	.+174    	; 0xf4 <__bad_interrupt>
      46:	00 00       	nop
      48:	55 c0       	rjmp	.+170    	; 0xf4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	53 c0       	rjmp	.+166    	; 0xf4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <__vector_20>
      54:	4f c0       	rjmp	.+158    	; 0xf4 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 b3 0b 	jmp	0x1766	; 0x1766 <__vector_22>
      5c:	4b c0       	rjmp	.+150    	; 0xf4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	49 c0       	rjmp	.+146    	; 0xf4 <__bad_interrupt>
      62:	00 00       	nop
      64:	47 c0       	rjmp	.+142    	; 0xf4 <__bad_interrupt>
      66:	00 00       	nop
      68:	45 c0       	rjmp	.+138    	; 0xf4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	43 c0       	rjmp	.+134    	; 0xf4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 81 0b 	jmp	0x1702	; 0x1702 <__vector_28>
      74:	3f c0       	rjmp	.+126    	; 0xf4 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 e5 0b 	jmp	0x17ca	; 0x17ca <__vector_30>
      7c:	3b c0       	rjmp	.+118    	; 0xf4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	39 c0       	rjmp	.+114    	; 0xf4 <__bad_interrupt>
      82:	00 00       	nop
      84:	37 c0       	rjmp	.+110    	; 0xf4 <__bad_interrupt>
      86:	00 00       	nop
      88:	35 c0       	rjmp	.+106    	; 0xf4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2b 07       	cpc	r18, r27
      8e:	3d 07       	cpc	r19, r29
      90:	14 08       	sbc	r1, r4
      92:	00 08       	sbc	r0, r0
      94:	14 08       	sbc	r1, r4
      96:	14 08       	sbc	r1, r4
      98:	14 08       	sbc	r1, r4
      9a:	14 08       	sbc	r1, r4
      9c:	14 08       	sbc	r1, r4
      9e:	f3 07       	cpc	r31, r19
      a0:	14 08       	sbc	r1, r4
      a2:	14 08       	sbc	r1, r4
      a4:	14 08       	sbc	r1, r4
      a6:	14 08       	sbc	r1, r4
      a8:	14 08       	sbc	r1, r4
      aa:	14 08       	sbc	r1, r4
      ac:	f8 07       	cpc	r31, r24
      ae:	14 08       	sbc	r1, r4
      b0:	7f 07       	cpc	r23, r31
      b2:	14 08       	sbc	r1, r4
      b4:	14 08       	sbc	r1, r4
      b6:	bb 07       	cpc	r27, r27

000000b8 <__ctors_end>:
      b8:	11 24       	eor	r1, r1
      ba:	1f be       	out	0x3f, r1	; 63
      bc:	cf ef       	ldi	r28, 0xFF	; 255
      be:	d0 e4       	ldi	r29, 0x40	; 64
      c0:	de bf       	out	0x3e, r29	; 62
      c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
      c4:	13 e0       	ldi	r17, 0x03	; 3
      c6:	a0 e0       	ldi	r26, 0x00	; 0
      c8:	b1 e0       	ldi	r27, 0x01	; 1
      ca:	e2 e3       	ldi	r30, 0x32	; 50
      cc:	fa e1       	ldi	r31, 0x1A	; 26
      ce:	00 e0       	ldi	r16, 0x00	; 0
      d0:	0b bf       	out	0x3b, r16	; 59
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x14>
      d4:	07 90       	elpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	aa 3d       	cpi	r26, 0xDA	; 218
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0x10>

000000de <__do_clear_bss>:
      de:	23 e0       	ldi	r18, 0x03	; 3
      e0:	aa ed       	ldi	r26, 0xDA	; 218
      e2:	b3 e0       	ldi	r27, 0x03	; 3
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	a3 3f       	cpi	r26, 0xF3	; 243
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>
      ee:	03 d0       	rcall	.+6      	; 0xf6 <main>
      f0:	0c 94 17 0d 	jmp	0x1a2e	; 0x1a2e <_exit>

000000f4 <__bad_interrupt>:
      f4:	85 cf       	rjmp	.-246    	; 0x0 <__vectors>

000000f6 <main>:
#define MY_ADDRESS			0x27

#define MY_ADDRESS_MASK		0xFE

int main(void)
{
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
      fa:	00 d0       	rcall	.+0      	; 0xfc <main+0x6>
      fc:	00 d0       	rcall	.+0      	; 0xfe <main+0x8>
      fe:	cd b7       	in	r28, 0x3d	; 61
     100:	de b7       	in	r29, 0x3e	; 62
	
	//
	// Init Tracing
	//
	
	InitTrace(F_CPU, ERROR_LEVEL | INFO_LEVEL);
     102:	45 e0       	ldi	r20, 0x05	; 5
     104:	60 e0       	ldi	r22, 0x00	; 0
     106:	72 e1       	ldi	r23, 0x12	; 18
     108:	8a e7       	ldi	r24, 0x7A	; 122
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	67 d3       	rcall	.+1742   	; 0x7dc <InitTrace>
	
	SendTrace(INFO_LEVEL, "TWI Slave Test\r\n");
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	91 e0       	ldi	r25, 0x01	; 1
     112:	9f 93       	push	r25
     114:	8f 93       	push	r24
     116:	14 e0       	ldi	r17, 0x04	; 4
     118:	1f 93       	push	r17
     11a:	58 d6       	rcall	.+3248   	; 0xdcc <SendTrace>
	
	SendTrace(INFO_LEVEL, "---------------\r\n");
     11c:	81 e1       	ldi	r24, 0x11	; 17
     11e:	91 e0       	ldi	r25, 0x01	; 1
     120:	9f 93       	push	r25
     122:	8f 93       	push	r24
     124:	1f 93       	push	r17
     126:	52 d6       	rcall	.+3236   	; 0xdcc <SendTrace>
	// Initialize TWI in Slave Mode
	//
	
	MyAddress.RW_EnGenCall = 1;
	
	MyAddress.Address = MY_ADDRESS;
     128:	8f e4       	ldi	r24, 0x4F	; 79
     12a:	8b 83       	std	Y+3, r24	; 0x03
	
	MyAddressMask.AsUINT8 = MY_ADDRESS_MASK;
     12c:	8e ef       	ldi	r24, 0xFE	; 254
     12e:	8c 83       	std	Y+4, r24	; 0x04
	
	InitTWI(TWI_SLAVE, &MyAddress, &MyAddressMask);
     130:	ae 01       	movw	r20, r28
     132:	4c 5f       	subi	r20, 0xFC	; 252
     134:	5f 4f       	sbci	r21, 0xFF	; 255
     136:	be 01       	movw	r22, r28
     138:	6d 5f       	subi	r22, 0xFD	; 253
     13a:	7f 4f       	sbci	r23, 0xFF	; 255
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	40 d0       	rcall	.+128    	; 0x1c0 <InitTWI>
     140:	0f 90       	pop	r0
     142:	0f 90       	pop	r0
     144:	0f 90       	pop	r0
     146:	0f 90       	pop	r0
     148:	0f 90       	pop	r0
     14a:	0f 90       	pop	r0
	
	while(1)
	{
		TwiReceive(&Value, sizeof(unsigned int), NULL, FALSE);
		
		SendTrace(INFO_LEVEL, "Data Received = 0x%x\r\n", Value);
     14c:	0f 2e       	mov	r0, r31
     14e:	f3 e2       	ldi	r31, 0x23	; 35
     150:	cf 2e       	mov	r12, r31
     152:	f1 e0       	ldi	r31, 0x01	; 1
     154:	df 2e       	mov	r13, r31
     156:	f0 2d       	mov	r31, r0
		
		Value = Value + 1;
		
		TwiTransmit(&Value, sizeof(unsigned int), NULL, FALSE);
		
		SendTrace(INFO_LEVEL, "Data Transmitted = 0x%x\r\n", Value);
     158:	0f 2e       	mov	r0, r31
     15a:	fa e3       	ldi	r31, 0x3A	; 58
     15c:	ef 2e       	mov	r14, r31
     15e:	f1 e0       	ldi	r31, 0x01	; 1
     160:	ff 2e       	mov	r15, r31
     162:	f0 2d       	mov	r31, r0
	
	
	
	while(1)
	{
		TwiReceive(&Value, sizeof(unsigned int), NULL, FALSE);
     164:	00 e0       	ldi	r16, 0x00	; 0
     166:	20 e0       	ldi	r18, 0x00	; 0
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	42 e0       	ldi	r20, 0x02	; 2
     16c:	50 e0       	ldi	r21, 0x00	; 0
     16e:	60 e0       	ldi	r22, 0x00	; 0
     170:	70 e0       	ldi	r23, 0x00	; 0
     172:	ce 01       	movw	r24, r28
     174:	01 96       	adiw	r24, 0x01	; 1
     176:	ee d2       	rcall	.+1500   	; 0x754 <TwiReceive>
		
		SendTrace(INFO_LEVEL, "Data Received = 0x%x\r\n", Value);
     178:	8a 81       	ldd	r24, Y+2	; 0x02
     17a:	8f 93       	push	r24
     17c:	89 81       	ldd	r24, Y+1	; 0x01
     17e:	8f 93       	push	r24
     180:	df 92       	push	r13
     182:	cf 92       	push	r12
     184:	1f 93       	push	r17
     186:	22 d6       	rcall	.+3140   	; 0xdcc <SendTrace>
		
		Value = Value + 1;
     188:	89 81       	ldd	r24, Y+1	; 0x01
     18a:	9a 81       	ldd	r25, Y+2	; 0x02
     18c:	01 96       	adiw	r24, 0x01	; 1
     18e:	9a 83       	std	Y+2, r25	; 0x02
     190:	89 83       	std	Y+1, r24	; 0x01
		
		TwiTransmit(&Value, sizeof(unsigned int), NULL, FALSE);
     192:	20 e0       	ldi	r18, 0x00	; 0
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	42 e0       	ldi	r20, 0x02	; 2
     198:	50 e0       	ldi	r21, 0x00	; 0
     19a:	60 e0       	ldi	r22, 0x00	; 0
     19c:	70 e0       	ldi	r23, 0x00	; 0
     19e:	ce 01       	movw	r24, r28
     1a0:	01 96       	adiw	r24, 0x01	; 1
     1a2:	7d d1       	rcall	.+762    	; 0x49e <TwiTransmit>
		
		SendTrace(INFO_LEVEL, "Data Transmitted = 0x%x\r\n", Value);
     1a4:	8a 81       	ldd	r24, Y+2	; 0x02
     1a6:	8f 93       	push	r24
     1a8:	89 81       	ldd	r24, Y+1	; 0x01
     1aa:	8f 93       	push	r24
     1ac:	ff 92       	push	r15
     1ae:	ef 92       	push	r14
     1b0:	1f 93       	push	r17
     1b2:	0c d6       	rcall	.+3096   	; 0xdcc <SendTrace>
     1b4:	0f b6       	in	r0, 0x3f	; 63
     1b6:	f8 94       	cli
     1b8:	de bf       	out	0x3e, r29	; 62
     1ba:	0f be       	out	0x3f, r0	; 63
     1bc:	cd bf       	out	0x3d, r28	; 61
     1be:	d2 cf       	rjmp	.-92     	; 0x164 <main+0x6e>

000001c0 <InitTWI>:
bool
InitTWI(TWI_MODE Mode, PTWI_ADDRESS Address, PTWI_ADDRESS_MASK AddressMask)
{	
	bool Status = TRUE;
	
	if (Mode == TWI_SLAVE)
     1c0:	81 11       	cpse	r24, r1
     1c2:	20 c0       	rjmp	.+64     	; 0x204 <InitTWI+0x44>
	{
		if (Address != NULL && AddressMask != NULL)
     1c4:	61 15       	cp	r22, r1
     1c6:	71 05       	cpc	r23, r1
     1c8:	89 f0       	breq	.+34     	; 0x1ec <InitTWI+0x2c>
     1ca:	41 15       	cp	r20, r1
     1cc:	51 05       	cpc	r21, r1
     1ce:	71 f0       	breq	.+28     	; 0x1ec <InitTWI+0x2c>
		{
			//
			// Set Slave Address and Mask
			//
				
			TWAR = Address->AsUINT8;
     1d0:	fb 01       	movw	r30, r22
     1d2:	80 81       	ld	r24, Z
     1d4:	80 93 ba 00 	sts	0x00BA, r24
				
			TWAMR = AddressMask->AsUINT8;
     1d8:	fa 01       	movw	r30, r20
     1da:	80 81       	ld	r24, Z
     1dc:	80 93 bd 00 	sts	0x00BD, r24
			
			//
			// Set Data and Clock to IN
			//
			
			DDRC &= ~((0x1 << PORTC0) | (0x1 << PORTC1));
     1e0:	87 b1       	in	r24, 0x07	; 7
     1e2:	8c 7f       	andi	r24, 0xFC	; 252
     1e4:	87 b9       	out	0x07, r24	; 7
			
			gMode = TWI_SLAVE;
     1e6:	10 92 df 03 	sts	0x03DF, r1
     1ea:	12 c0       	rjmp	.+36     	; 0x210 <InitTWI+0x50>
		}
		else
		{
			SendTrace(ERROR_LEVEL, "InitTWI - Invalid Parameters\r\n");
     1ec:	84 e5       	ldi	r24, 0x54	; 84
     1ee:	91 e0       	ldi	r25, 0x01	; 1
     1f0:	9f 93       	push	r25
     1f2:	8f 93       	push	r24
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	8f 93       	push	r24
     1f8:	e9 d5       	rcall	.+3026   	; 0xdcc <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
     1fa:	0f 90       	pop	r0
     1fc:	0f 90       	pop	r0
     1fe:	0f 90       	pop	r0
		}
		else
		{
			SendTrace(ERROR_LEVEL, "InitTWI - Invalid Parameters\r\n");
			
			Status = FALSE;
     200:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
     202:	08 95       	ret
		}
	}
	else
	{
		gMode = TWI_MASTER;
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	80 93 df 03 	sts	0x03DF, r24
		
		//
		// Set Data and Clock to Out
		//
		
		DDRC |= ((0x1 << PORTC0) | (0x1 << PORTC1));
     20a:	87 b1       	in	r24, 0x07	; 7
     20c:	83 60       	ori	r24, 0x03	; 3
     20e:	87 b9       	out	0x07, r24	; 7
	//
	// Set TWI Bit Rate Register to 8 so that
	// SCL is set to 100 KHz.
	//

	TWBR = BIT_RATE_VALUE;
     210:	80 e2       	ldi	r24, 0x20	; 32
     212:	80 93 b8 00 	sts	0x00B8, r24
	
	//
	// Set Pre-scalar value to 1
	//

	TWSR = 0;
     216:	10 92 b9 00 	sts	0x00B9, r1
	
	//
	// Set TWI Control Register
	//
	
	TWCR = (0x1 << TWEN) | (0x1 << TWEA);
     21a:	84 e4       	ldi	r24, 0x44	; 68
     21c:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     220:	ff ef       	ldi	r31, 0xFF	; 255
     222:	20 e7       	ldi	r18, 0x70	; 112
     224:	82 e0       	ldi	r24, 0x02	; 2
     226:	f1 50       	subi	r31, 0x01	; 1
     228:	20 40       	sbci	r18, 0x00	; 0
     22a:	80 40       	sbci	r24, 0x00	; 0
     22c:	e1 f7       	brne	.-8      	; 0x226 <InitTWI+0x66>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <InitTWI+0x70>
     230:	00 00       	nop
	// Wait for 100 ms for bus to settle down
	//
	
	_delay_ms(100);
	
	gIsRepeatedStart = FALSE;
     232:	10 92 da 03 	sts	0x03DA, r1
	
	gIsTWIInitialized = TRUE;
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	80 93 db 03 	sts	0x03DB, r24

Exit:

	return Status;
}
     23c:	08 95       	ret

0000023e <SendStartCondition>:
	
	//
	// Send Start Condition
	//
	
	ENABLE_START();
     23e:	ec eb       	ldi	r30, 0xBC	; 188
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	8f 75       	andi	r24, 0x5F	; 95
     246:	80 62       	ori	r24, 0x20	; 32
     248:	80 83       	st	Z, r24
	
	WAIT_FOR_OP_COMPLETION();
     24a:	80 81       	ld	r24, Z
     24c:	80 68       	ori	r24, 0x80	; 128
     24e:	80 83       	st	Z, r24
     250:	80 81       	ld	r24, Z
     252:	88 23       	and	r24, r24
     254:	ec f7       	brge	.-6      	; 0x250 <SendStartCondition+0x12>
	
	DISABLE_START();
     256:	ec eb       	ldi	r30, 0xBC	; 188
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	80 81       	ld	r24, Z
     25c:	8f 75       	andi	r24, 0x5F	; 95
     25e:	80 83       	st	Z, r24
	
	if (gIsRepeatedStart)
     260:	80 91 da 03 	lds	r24, 0x03DA
     264:	88 23       	and	r24, r24
     266:	41 f0       	breq	.+16     	; 0x278 <SendStartCondition+0x3a>
	{
		Status = ProcessTwiStatus(REPEATED_START_TRANSMITTED);
     268:	90 91 b9 00 	lds	r25, 0x00B9
     26c:	98 7f       	andi	r25, 0xF8	; 248
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	90 31       	cpi	r25, 0x10	; 16
     272:	49 f0       	breq	.+18     	; 0x286 <SendStartCondition+0x48>
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	08 95       	ret
	}
	else
	{
		Status = ProcessTwiStatus(START_TRANSMITTED);
     278:	90 91 b9 00 	lds	r25, 0x00B9
     27c:	98 7f       	andi	r25, 0xF8	; 248
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	98 30       	cpi	r25, 0x08	; 8
     282:	09 f0       	breq	.+2      	; 0x286 <SendStartCondition+0x48>
     284:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return Status;
}
     286:	08 95       	ret

00000288 <SendStopCondition>:

void
SendStopCondition()
{	
	ENABLE_STOP();
     288:	ec eb       	ldi	r30, 0xBC	; 188
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	80 81       	ld	r24, Z
     28e:	8f 76       	andi	r24, 0x6F	; 111
     290:	80 61       	ori	r24, 0x10	; 16
     292:	80 83       	st	Z, r24
	
	//
	// Send the Stop condition by clearing the TWINT flag
	//
	
	TWCR |= (1 << TWINT);
     294:	80 81       	ld	r24, Z
     296:	80 68       	ori	r24, 0x80	; 128
     298:	80 83       	st	Z, r24
	//
	// TWINT is not set after stop condition.
	// Instead TWSTO bit in TWCR is cleared.
	//
	
	while (!(TWCR & (0x1 << TWSTO)));
     29a:	80 81       	ld	r24, Z
     29c:	84 ff       	sbrs	r24, 4
     29e:	fd cf       	rjmp	.-6      	; 0x29a <SendStopCondition+0x12>
}
     2a0:	08 95       	ret

000002a2 <Transmit>:

bool
Transmit(PVOID Buffer, unsigned long Length)
{
     2a2:	8f 92       	push	r8
     2a4:	9f 92       	push	r9
     2a6:	af 92       	push	r10
     2a8:	bf 92       	push	r11
     2aa:	df 92       	push	r13
     2ac:	ef 92       	push	r14
     2ae:	ff 92       	push	r15
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
	
	unsigned char *BytePtr;
	
	TWI_STATUS TransmitStatus;
	
	if (gMode == TWI_MASTER)
     2b8:	20 91 df 03 	lds	r18, 0x03DF
     2bc:	21 30       	cpi	r18, 0x01	; 1
     2be:	29 f4       	brne	.+10     	; 0x2ca <Transmit+0x28>
	{
		TransmitStatus = DATA_TRANSMITTED_ACK;
     2c0:	0f 2e       	mov	r0, r31
     2c2:	f8 e2       	ldi	r31, 0x28	; 40
     2c4:	df 2e       	mov	r13, r31
     2c6:	f0 2d       	mov	r31, r0
     2c8:	04 c0       	rjmp	.+8      	; 0x2d2 <Transmit+0x30>
	}
	else
	{
		TransmitStatus = SLA_R_DATA_TRANSMITTED_ACK;
     2ca:	0f 2e       	mov	r0, r31
     2cc:	f8 eb       	ldi	r31, 0xB8	; 184
     2ce:	df 2e       	mov	r13, r31
     2d0:	f0 2d       	mov	r31, r0
	// Now transmit the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
     2d2:	4a 01       	movw	r8, r20
     2d4:	5b 01       	movw	r10, r22
     2d6:	21 e0       	ldi	r18, 0x01	; 1
     2d8:	82 1a       	sub	r8, r18
     2da:	91 08       	sbc	r9, r1
     2dc:	a1 08       	sbc	r10, r1
     2de:	b1 08       	sbc	r11, r1
     2e0:	81 14       	cp	r8, r1
     2e2:	91 04       	cpc	r9, r1
     2e4:	a1 04       	cpc	r10, r1
     2e6:	b1 04       	cpc	r11, r1
     2e8:	e1 f1       	breq	.+120    	; 0x362 <Transmit+0xc0>
     2ea:	dc 01       	movw	r26, r24
     2ec:	00 e0       	ldi	r16, 0x00	; 0
     2ee:	10 e0       	ldi	r17, 0x00	; 0
     2f0:	98 01       	movw	r18, r16
	{
		TWDR = *BytePtr;
     2f2:	4b eb       	ldi	r20, 0xBB	; 187
     2f4:	50 e0       	ldi	r21, 0x00	; 0
		
		WAIT_FOR_OP_COMPLETION();
     2f6:	ec eb       	ldi	r30, 0xBC	; 188
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
		
		if (!ProcessTwiStatus(TransmitStatus))
     2fa:	0f 2e       	mov	r0, r31
     2fc:	f9 eb       	ldi	r31, 0xB9	; 185
     2fe:	ef 2e       	mov	r14, r31
     300:	f1 2c       	mov	r15, r1
     302:	f0 2d       	mov	r31, r0
     304:	6d 2d       	mov	r22, r13
     306:	70 e0       	ldi	r23, 0x00	; 0
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
	{
		TWDR = *BytePtr;
     308:	8d 91       	ld	r24, X+
     30a:	ea 01       	movw	r28, r20
     30c:	88 83       	st	Y, r24
		
		WAIT_FOR_OP_COMPLETION();
     30e:	80 81       	ld	r24, Z
     310:	80 68       	ori	r24, 0x80	; 128
     312:	80 83       	st	Z, r24
     314:	80 81       	ld	r24, Z
     316:	88 23       	and	r24, r24
     318:	ec f7       	brge	.-6      	; 0x314 <Transmit+0x72>
		
		if (!ProcessTwiStatus(TransmitStatus))
     31a:	e7 01       	movw	r28, r14
     31c:	88 81       	ld	r24, Y
     31e:	88 7f       	andi	r24, 0xF8	; 248
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	86 17       	cp	r24, r22
     324:	97 07       	cpc	r25, r23
     326:	99 f0       	breq	.+38     	; 0x34e <Transmit+0xac>
		{
			SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     328:	80 91 b9 00 	lds	r24, 0x00B9
     32c:	88 7f       	andi	r24, 0xF8	; 248
     32e:	1f 92       	push	r1
     330:	8f 93       	push	r24
     332:	83 e7       	ldi	r24, 0x73	; 115
     334:	91 e0       	ldi	r25, 0x01	; 1
     336:	9f 93       	push	r25
     338:	8f 93       	push	r24
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	8f 93       	push	r24
     33e:	46 d5       	rcall	.+2700   	; 0xdcc <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(TransmitStatus))
		{
			SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
			
			Status = FALSE;
     34a:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
     34c:	3b c0       	rjmp	.+118    	; 0x3c4 <Transmit+0x122>
		}
		
		BytePtr++;
     34e:	cd 01       	movw	r24, r26
	// Now transmit the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
     350:	0f 5f       	subi	r16, 0xFF	; 255
     352:	1f 4f       	sbci	r17, 0xFF	; 255
     354:	2f 4f       	sbci	r18, 0xFF	; 255
     356:	3f 4f       	sbci	r19, 0xFF	; 255
     358:	08 15       	cp	r16, r8
     35a:	19 05       	cpc	r17, r9
     35c:	2a 05       	cpc	r18, r10
     35e:	3b 05       	cpc	r19, r11
     360:	98 f2       	brcs	.-90     	; 0x308 <Transmit+0x66>
	
	//
	// In slave mode after transmitting the last byte we will get a NACK from the Master
	//
	
	if (gMode == TWI_SLAVE)
     362:	20 91 df 03 	lds	r18, 0x03DF
     366:	21 11       	cpse	r18, r1
     368:	04 c0       	rjmp	.+8      	; 0x372 <Transmit+0xd0>
	{
		TransmitStatus = SLA_R_DATA_TRANSMITTED_NACK;
     36a:	0f 2e       	mov	r0, r31
     36c:	f0 ec       	ldi	r31, 0xC0	; 192
     36e:	df 2e       	mov	r13, r31
     370:	f0 2d       	mov	r31, r0
	}
	
	TWDR = *BytePtr;
     372:	fc 01       	movw	r30, r24
     374:	80 81       	ld	r24, Z
     376:	80 93 bb 00 	sts	0x00BB, r24
	
	WAIT_FOR_OP_COMPLETION();
     37a:	ec eb       	ldi	r30, 0xBC	; 188
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	80 81       	ld	r24, Z
     380:	80 68       	ori	r24, 0x80	; 128
     382:	80 83       	st	Z, r24
     384:	80 81       	ld	r24, Z
     386:	88 23       	and	r24, r24
     388:	ec f7       	brge	.-6      	; 0x384 <Transmit+0xe2>
	
	if (!ProcessTwiStatus(TransmitStatus))
     38a:	20 91 b9 00 	lds	r18, 0x00B9
     38e:	28 7f       	andi	r18, 0xF8	; 248
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	8d 2d       	mov	r24, r13
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	28 17       	cp	r18, r24
     398:	39 07       	cpc	r19, r25
     39a:	99 f0       	breq	.+38     	; 0x3c2 <Transmit+0x120>
	{
		SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     39c:	80 91 b9 00 	lds	r24, 0x00B9
     3a0:	88 7f       	andi	r24, 0xF8	; 248
     3a2:	1f 92       	push	r1
     3a4:	8f 93       	push	r24
     3a6:	83 e7       	ldi	r24, 0x73	; 115
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	9f 93       	push	r25
     3ac:	8f 93       	push	r24
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	8f 93       	push	r24
     3b2:	0c d5       	rcall	.+2584   	; 0xdcc <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
     3b4:	0f 90       	pop	r0
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
	
	if (!ProcessTwiStatus(TransmitStatus))
	{
		SendTrace(ERROR_LEVEL, "Transmit - Data Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     3be:	80 e0       	ldi	r24, 0x00	; 0
		
		goto Exit;
     3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <Transmit+0x122>
}

bool
Transmit(PVOID Buffer, unsigned long Length)
{
	bool Status = TRUE;
     3c2:	81 e0       	ldi	r24, 0x01	; 1
	}
	
Exit:

	return Status;	
}
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	df 90       	pop	r13
     3d2:	bf 90       	pop	r11
     3d4:	af 90       	pop	r10
     3d6:	9f 90       	pop	r9
     3d8:	8f 90       	pop	r8
     3da:	08 95       	ret

000003dc <TwiMasterTransmit>:
bool
TwiMasterTransmit(PVOID Buffer, 
				  unsigned long Length, 
				  PTWI_ADDRESS Address,
				  bool SendStop)
{
     3dc:	af 92       	push	r10
     3de:	bf 92       	push	r11
     3e0:	cf 92       	push	r12
     3e2:	df 92       	push	r13
     3e4:	ef 92       	push	r14
     3e6:	ff 92       	push	r15
     3e8:	0f 93       	push	r16
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	5c 01       	movw	r10, r24
     3f0:	6a 01       	movw	r12, r20
     3f2:	7b 01       	movw	r14, r22
     3f4:	e9 01       	movw	r28, r18
	bool Status = TRUE;
	
	if (!SendStartCondition())
     3f6:	23 df       	rcall	.-442    	; 0x23e <SendStartCondition>
     3f8:	81 11       	cpse	r24, r1
     3fa:	13 c0       	rjmp	.+38     	; 0x422 <TwiMasterTransmit+0x46>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     3fc:	80 91 b9 00 	lds	r24, 0x00B9
     400:	88 7f       	andi	r24, 0xF8	; 248
     402:	1f 92       	push	r1
     404:	8f 93       	push	r24
     406:	89 ea       	ldi	r24, 0xA9	; 169
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	9f 93       	push	r25
     40c:	8f 93       	push	r24
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	8f 93       	push	r24
     412:	dc d4       	rcall	.+2488   	; 0xdcc <SendTrace>
		
		Status = FALSE;
			
		goto Exit;
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
	
	if (!SendStartCondition())
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     41e:	c0 e0       	ldi	r28, 0x00	; 0
			
		goto Exit;
     420:	33 c0       	rjmp	.+102    	; 0x488 <TwiMasterTransmit+0xac>
	}
	
	gIsRepeatedStart = FALSE;
     422:	10 92 da 03 	sts	0x03DA, r1
	//
	// Set Address->ReadWrite = 0 indicating a write operation.
	// Then transmit SLA+W
	//
	
	Address->RW_EnGenCall = 0;
     426:	88 81       	ld	r24, Y
     428:	8e 7f       	andi	r24, 0xFE	; 254
     42a:	88 83       	st	Y, r24
	
	TWDR = Address->AsUINT8;
     42c:	80 93 bb 00 	sts	0x00BB, r24
		
	WAIT_FOR_OP_COMPLETION();
     430:	ec eb       	ldi	r30, 0xBC	; 188
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	80 68       	ori	r24, 0x80	; 128
     438:	80 83       	st	Z, r24
     43a:	80 81       	ld	r24, Z
     43c:	88 23       	and	r24, r24
     43e:	ec f7       	brge	.-6      	; 0x43a <TwiMasterTransmit+0x5e>
		
	if (!ProcessTwiStatus(SLA_W_TRANSMITTED_ACK))
     440:	80 91 b9 00 	lds	r24, 0x00B9
     444:	88 7f       	andi	r24, 0xF8	; 248
     446:	88 31       	cpi	r24, 0x18	; 24
     448:	99 f0       	breq	.+38     	; 0x470 <TwiMasterTransmit+0x94>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Slave Address and Write Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     44a:	80 91 b9 00 	lds	r24, 0x00B9
     44e:	88 7f       	andi	r24, 0xF8	; 248
     450:	1f 92       	push	r1
     452:	8f 93       	push	r24
     454:	83 ef       	ldi	r24, 0xF3	; 243
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	9f 93       	push	r25
     45a:	8f 93       	push	r24
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	8f 93       	push	r24
     460:	b5 d4       	rcall	.+2410   	; 0xdcc <SendTrace>
		
		Status = FALSE;
			
		goto Exit;
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
		
	if (!ProcessTwiStatus(SLA_W_TRANSMITTED_ACK))
	{
		SendTrace(ERROR_LEVEL, "TwiMasterTransmit - Slave Address and Write Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     46c:	c0 e0       	ldi	r28, 0x00	; 0
			
		goto Exit;
     46e:	0c c0       	rjmp	.+24     	; 0x488 <TwiMasterTransmit+0xac>
	}
	
	Status = Transmit(Buffer, Length);
     470:	b7 01       	movw	r22, r14
     472:	a6 01       	movw	r20, r12
     474:	c5 01       	movw	r24, r10
     476:	15 df       	rcall	.-470    	; 0x2a2 <Transmit>
     478:	c8 2f       	mov	r28, r24
	
	//
	// Send stop condition
	//
	
	if (SendStop)
     47a:	00 23       	and	r16, r16
     47c:	11 f0       	breq	.+4      	; 0x482 <TwiMasterTransmit+0xa6>
	{
		SendStopCondition();
     47e:	04 df       	rcall	.-504    	; 0x288 <SendStopCondition>
     480:	03 c0       	rjmp	.+6      	; 0x488 <TwiMasterTransmit+0xac>
	}
	else
	{
		gIsRepeatedStart = TRUE;
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	80 93 da 03 	sts	0x03DA, r24
	}
	
Exit:

	return Status;
}
     488:	8c 2f       	mov	r24, r28
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	0f 91       	pop	r16
     490:	ff 90       	pop	r15
     492:	ef 90       	pop	r14
     494:	df 90       	pop	r13
     496:	cf 90       	pop	r12
     498:	bf 90       	pop	r11
     49a:	af 90       	pop	r10
     49c:	08 95       	ret

0000049e <TwiTransmit>:
bool 
TwiTransmit(PVOID Buffer, 
			unsigned long Length,
			PTWI_ADDRESS Address,
			bool SendStop)
{
     49e:	0f 93       	push	r16
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
     4a0:	e0 91 db 03 	lds	r30, 0x03DB
     4a4:	ee 23       	and	r30, r30
     4a6:	09 f4       	brne	.+2      	; 0x4aa <TwiTransmit+0xc>
     4a8:	48 c0       	rjmp	.+144    	; 0x53a <TwiTransmit+0x9c>
     4aa:	00 97       	sbiw	r24, 0x00	; 0
     4ac:	09 f4       	brne	.+2      	; 0x4b0 <TwiTransmit+0x12>
     4ae:	47 c0       	rjmp	.+142    	; 0x53e <TwiTransmit+0xa0>
		Status = FALSE;
		
		goto Exit;
	}
	
	if (gMode == TWI_MASTER)
     4b0:	e0 91 df 03 	lds	r30, 0x03DF
     4b4:	e1 30       	cpi	r30, 0x01	; 1
     4b6:	89 f4       	brne	.+34     	; 0x4da <TwiTransmit+0x3c>
	{
		if (Address == NULL)
     4b8:	21 15       	cp	r18, r1
     4ba:	31 05       	cpc	r19, r1
     4bc:	61 f4       	brne	.+24     	; 0x4d6 <TwiTransmit+0x38>
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Invalid Parameters\r\n");
     4be:	8a e4       	ldi	r24, 0x4A	; 74
     4c0:	92 e0       	ldi	r25, 0x02	; 2
     4c2:	9f 93       	push	r25
     4c4:	8f 93       	push	r24
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	8f 93       	push	r24
     4ca:	80 d4       	rcall	.+2304   	; 0xdcc <SendTrace>
			
			Status = FALSE;
		
			goto Exit;
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
	{
		if (Address == NULL)
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Invalid Parameters\r\n");
			
			Status = FALSE;
     4d2:	80 e0       	ldi	r24, 0x00	; 0
		
			goto Exit;
     4d4:	35 c0       	rjmp	.+106    	; 0x540 <TwiTransmit+0xa2>
		}
		else
		{
			Status = TwiMasterTransmit(Buffer, Length, Address, SendStop);	
     4d6:	82 df       	rcall	.-252    	; 0x3dc <TwiMasterTransmit>
     4d8:	33 c0       	rjmp	.+102    	; 0x540 <TwiTransmit+0xa2>
		}
	}
	else
	{
		WAIT_FOR_OP_COMPLETION();
     4da:	ec eb       	ldi	r30, 0xBC	; 188
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	20 81       	ld	r18, Z
     4e0:	20 68       	ori	r18, 0x80	; 128
     4e2:	20 83       	st	Z, r18
     4e4:	20 81       	ld	r18, Z
     4e6:	22 23       	and	r18, r18
     4e8:	ec f7       	brge	.-6      	; 0x4e4 <TwiTransmit+0x46>
		
		if (ProcessTwiStatus(STOP_REPEATED_START_RECEIVED))
     4ea:	20 91 b9 00 	lds	r18, 0x00B9
     4ee:	28 7f       	andi	r18, 0xF8	; 248
     4f0:	20 3a       	cpi	r18, 0xA0	; 160
     4f2:	41 f4       	brne	.+16     	; 0x504 <TwiTransmit+0x66>
		{
			WAIT_FOR_OP_COMPLETION();	
     4f4:	ec eb       	ldi	r30, 0xBC	; 188
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	20 81       	ld	r18, Z
     4fa:	20 68       	ori	r18, 0x80	; 128
     4fc:	20 83       	st	Z, r18
     4fe:	20 81       	ld	r18, Z
     500:	22 23       	and	r18, r18
     502:	ec f7       	brge	.-6      	; 0x4fe <TwiTransmit+0x60>
		}
		
		if (!ProcessTwiStatus(SLA_R_RECEIVED_ACK))
     504:	20 91 b9 00 	lds	r18, 0x00B9
     508:	28 7f       	andi	r18, 0xF8	; 248
     50a:	28 3a       	cpi	r18, 0xA8	; 168
     50c:	91 f0       	breq	.+36     	; 0x532 <TwiTransmit+0x94>
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Slave Read Not Requested by Master - 0x%x\r\n", TWSR);
     50e:	80 91 b9 00 	lds	r24, 0x00B9
     512:	1f 92       	push	r1
     514:	8f 93       	push	r24
     516:	8d e6       	ldi	r24, 0x6D	; 109
     518:	92 e0       	ldi	r25, 0x02	; 2
     51a:	9f 93       	push	r25
     51c:	8f 93       	push	r24
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	8f 93       	push	r24
     522:	54 d4       	rcall	.+2216   	; 0xdcc <SendTrace>
			
			Status = FALSE;
		
			goto Exit;
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
     528:	0f 90       	pop	r0
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(SLA_R_RECEIVED_ACK))
		{
			SendTrace(ERROR_LEVEL, "TwiTransmit - Slave Read Not Requested by Master - 0x%x\r\n", TWSR);
			
			Status = FALSE;
     52e:	80 e0       	ldi	r24, 0x00	; 0
		
			goto Exit;
     530:	07 c0       	rjmp	.+14     	; 0x540 <TwiTransmit+0xa2>
		}
		else
		{	
			DATA_OUT();
     532:	39 9a       	sbi	0x07, 1	; 7
		
			Status = Transmit(Buffer, Length);
     534:	b6 de       	rcall	.-660    	; 0x2a2 <Transmit>
		
			DATA_IN();
     536:	39 98       	cbi	0x07, 1	; 7
     538:	03 c0       	rjmp	.+6      	; 0x540 <TwiTransmit+0xa2>
{
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
	{
		Status = FALSE;
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	01 c0       	rjmp	.+2      	; 0x540 <TwiTransmit+0xa2>
     53e:	80 e0       	ldi	r24, 0x00	; 0
	}
	
Exit:

	return Status;
}
     540:	0f 91       	pop	r16
     542:	08 95       	ret

00000544 <Receive>:
	return Status;	
}

bool
Receive(PVOID Buffer, unsigned long Length)
{
     544:	8f 92       	push	r8
     546:	9f 92       	push	r9
     548:	af 92       	push	r10
     54a:	bf 92       	push	r11
     54c:	df 92       	push	r13
     54e:	ef 92       	push	r14
     550:	ff 92       	push	r15
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
	
	unsigned char *BytePtr;
	
	TWI_STATUS ReceiveStatus;
	
	if (gMode == TWI_MASTER)
     55a:	20 91 df 03 	lds	r18, 0x03DF
     55e:	21 30       	cpi	r18, 0x01	; 1
     560:	29 f4       	brne	.+10     	; 0x56c <Receive+0x28>
	{
		ReceiveStatus = DATA_RECEIVED_ACK;
     562:	0f 2e       	mov	r0, r31
     564:	f0 e5       	ldi	r31, 0x50	; 80
     566:	df 2e       	mov	r13, r31
     568:	f0 2d       	mov	r31, r0
     56a:	03 c0       	rjmp	.+6      	; 0x572 <Receive+0x2e>
	}
	else
	{
		ReceiveStatus = SLA_W_DATA_RECEIVED_ACK;
     56c:	68 94       	set
     56e:	dd 24       	eor	r13, r13
     570:	d7 f8       	bld	r13, 7
	// Now receive the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
     572:	4a 01       	movw	r8, r20
     574:	5b 01       	movw	r10, r22
     576:	21 e0       	ldi	r18, 0x01	; 1
     578:	82 1a       	sub	r8, r18
     57a:	91 08       	sbc	r9, r1
     57c:	a1 08       	sbc	r10, r1
     57e:	b1 08       	sbc	r11, r1
     580:	81 14       	cp	r8, r1
     582:	91 04       	cpc	r9, r1
     584:	a1 04       	cpc	r10, r1
     586:	b1 04       	cpc	r11, r1
     588:	e1 f1       	breq	.+120    	; 0x602 <Receive+0xbe>
     58a:	dc 01       	movw	r26, r24
     58c:	00 e0       	ldi	r16, 0x00	; 0
     58e:	10 e0       	ldi	r17, 0x00	; 0
     590:	98 01       	movw	r18, r16
	{
			
		WAIT_FOR_OP_COMPLETION();
     592:	ec eb       	ldi	r30, 0xBC	; 188
     594:	f0 e0       	ldi	r31, 0x00	; 0
		
		if (!ProcessTwiStatus(ReceiveStatus))
     596:	0f 2e       	mov	r0, r31
     598:	f9 eb       	ldi	r31, 0xB9	; 185
     59a:	ef 2e       	mov	r14, r31
     59c:	f1 2c       	mov	r15, r1
     59e:	f0 2d       	mov	r31, r0
     5a0:	6d 2d       	mov	r22, r13
     5a2:	70 e0       	ldi	r23, 0x00	; 0
			Status = FALSE;
			
			goto Exit;
		}
		
		*BytePtr = TWDR;
     5a4:	4b eb       	ldi	r20, 0xBB	; 187
     5a6:	50 e0       	ldi	r21, 0x00	; 0
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
	{
			
		WAIT_FOR_OP_COMPLETION();
     5a8:	80 81       	ld	r24, Z
     5aa:	80 68       	ori	r24, 0x80	; 128
     5ac:	80 83       	st	Z, r24
     5ae:	80 81       	ld	r24, Z
     5b0:	88 23       	and	r24, r24
     5b2:	ec f7       	brge	.-6      	; 0x5ae <Receive+0x6a>
		
		if (!ProcessTwiStatus(ReceiveStatus))
     5b4:	e7 01       	movw	r28, r14
     5b6:	88 81       	ld	r24, Y
     5b8:	88 7f       	andi	r24, 0xF8	; 248
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	86 17       	cp	r24, r22
     5be:	97 07       	cpc	r25, r23
     5c0:	99 f0       	breq	.+38     	; 0x5e8 <Receive+0xa4>
		{
			SendTrace(ERROR_LEVEL, "Receive - Data Reception Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     5c2:	80 91 b9 00 	lds	r24, 0x00B9
     5c6:	88 7f       	andi	r24, 0xF8	; 248
     5c8:	1f 92       	push	r1
     5ca:	8f 93       	push	r24
     5cc:	87 ea       	ldi	r24, 0xA7	; 167
     5ce:	92 e0       	ldi	r25, 0x02	; 2
     5d0:	9f 93       	push	r25
     5d2:	8f 93       	push	r24
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	8f 93       	push	r24
     5d8:	f9 d3       	rcall	.+2034   	; 0xdcc <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(ReceiveStatus))
		{
			SendTrace(ERROR_LEVEL, "Receive - Data Reception Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
			
			Status = FALSE;
     5e4:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
     5e6:	43 c0       	rjmp	.+134    	; 0x66e <Receive+0x12a>
		}
		
		*BytePtr = TWDR;
     5e8:	ea 01       	movw	r28, r20
     5ea:	88 81       	ld	r24, Y
     5ec:	8d 93       	st	X+, r24
		
		BytePtr++;
     5ee:	cd 01       	movw	r24, r26
	// Now receive the data.
	//
	
	BytePtr = (unsigned char *) Buffer;
	
	for (IndexI = 0; IndexI < Length - 1; IndexI++)
     5f0:	0f 5f       	subi	r16, 0xFF	; 255
     5f2:	1f 4f       	sbci	r17, 0xFF	; 255
     5f4:	2f 4f       	sbci	r18, 0xFF	; 255
     5f6:	3f 4f       	sbci	r19, 0xFF	; 255
     5f8:	08 15       	cp	r16, r8
     5fa:	19 05       	cpc	r17, r9
     5fc:	2a 05       	cpc	r18, r10
     5fe:	3b 05       	cpc	r19, r11
     600:	98 f2       	brcs	.-90     	; 0x5a8 <Receive+0x64>
	//
	// When receiving the last byte if the receiver is a master then we need to transmit a NACK.
	// If the receiver is a slave we need to transmit a ACK.
	//
	
	if (gMode == TWI_MASTER)
     602:	20 91 df 03 	lds	r18, 0x03DF
     606:	21 30       	cpi	r18, 0x01	; 1
     608:	49 f4       	brne	.+18     	; 0x61c <Receive+0xd8>
	{
		ENABLE_NACK();
     60a:	ec eb       	ldi	r30, 0xBC	; 188
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	20 81       	ld	r18, Z
     610:	2f 73       	andi	r18, 0x3F	; 63
     612:	20 83       	st	Z, r18
		
		ReceiveStatus = DATA_RECEIVED_NACK;
     614:	0f 2e       	mov	r0, r31
     616:	f8 e5       	ldi	r31, 0x58	; 88
     618:	df 2e       	mov	r13, r31
     61a:	f0 2d       	mov	r31, r0
	}
	
	WAIT_FOR_OP_COMPLETION();
     61c:	ec eb       	ldi	r30, 0xBC	; 188
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	20 81       	ld	r18, Z
     622:	20 68       	ori	r18, 0x80	; 128
     624:	20 83       	st	Z, r18
     626:	20 81       	ld	r18, Z
     628:	22 23       	and	r18, r18
     62a:	ec f7       	brge	.-6      	; 0x626 <Receive+0xe2>
	
	if (!ProcessTwiStatus(ReceiveStatus))
     62c:	40 91 b9 00 	lds	r20, 0x00B9
     630:	48 7f       	andi	r20, 0xF8	; 248
     632:	50 e0       	ldi	r21, 0x00	; 0
     634:	2d 2d       	mov	r18, r13
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	42 17       	cp	r20, r18
     63a:	53 07       	cpc	r21, r19
     63c:	99 f0       	breq	.+38     	; 0x664 <Receive+0x120>
	{
		SendTrace(ERROR_LEVEL, "Receive - Data Reception Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     63e:	80 91 b9 00 	lds	r24, 0x00B9
     642:	88 7f       	andi	r24, 0xF8	; 248
     644:	1f 92       	push	r1
     646:	8f 93       	push	r24
     648:	87 ea       	ldi	r24, 0xA7	; 167
     64a:	92 e0       	ldi	r25, 0x02	; 2
     64c:	9f 93       	push	r25
     64e:	8f 93       	push	r24
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	8f 93       	push	r24
     654:	bb d3       	rcall	.+1910   	; 0xdcc <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
	
	if (!ProcessTwiStatus(ReceiveStatus))
	{
		SendTrace(ERROR_LEVEL, "Receive - Data Reception Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     660:	80 e0       	ldi	r24, 0x00	; 0
		
		goto Exit;
     662:	05 c0       	rjmp	.+10     	; 0x66e <Receive+0x12a>
	}
	
	*BytePtr = TWDR;
     664:	20 91 bb 00 	lds	r18, 0x00BB
     668:	fc 01       	movw	r30, r24
     66a:	20 83       	st	Z, r18
}

bool
Receive(PVOID Buffer, unsigned long Length)
{
	bool Status = TRUE;
     66c:	81 e0       	ldi	r24, 0x01	; 1
	
	*BytePtr = TWDR;
	
Exit:

	ENABLE_ACK();
     66e:	ec eb       	ldi	r30, 0xBC	; 188
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	90 81       	ld	r25, Z
     674:	9f 73       	andi	r25, 0x3F	; 63
     676:	90 64       	ori	r25, 0x40	; 64
     678:	90 83       	st	Z, r25

	return Status;
}
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	1f 91       	pop	r17
     680:	0f 91       	pop	r16
     682:	ff 90       	pop	r15
     684:	ef 90       	pop	r14
     686:	df 90       	pop	r13
     688:	bf 90       	pop	r11
     68a:	af 90       	pop	r10
     68c:	9f 90       	pop	r9
     68e:	8f 90       	pop	r8
     690:	08 95       	ret

00000692 <TwiMasterReceive>:
bool
TwiMasterReceive(PVOID Buffer, 
				 unsigned long Length, 
				 PTWI_ADDRESS Address,
				 bool SendStop)
{
     692:	af 92       	push	r10
     694:	bf 92       	push	r11
     696:	cf 92       	push	r12
     698:	df 92       	push	r13
     69a:	ef 92       	push	r14
     69c:	ff 92       	push	r15
     69e:	0f 93       	push	r16
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	5c 01       	movw	r10, r24
     6a6:	6a 01       	movw	r12, r20
     6a8:	7b 01       	movw	r14, r22
     6aa:	e9 01       	movw	r28, r18
	bool Status = TRUE;
	
	if (!SendStartCondition())
     6ac:	c8 dd       	rcall	.-1136   	; 0x23e <SendStartCondition>
     6ae:	81 11       	cpse	r24, r1
     6b0:	13 c0       	rjmp	.+38     	; 0x6d8 <TwiMasterReceive+0x46>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterReceive - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     6b2:	80 91 b9 00 	lds	r24, 0x00B9
     6b6:	88 7f       	andi	r24, 0xF8	; 248
     6b8:	1f 92       	push	r1
     6ba:	8f 93       	push	r24
     6bc:	89 ed       	ldi	r24, 0xD9	; 217
     6be:	92 e0       	ldi	r25, 0x02	; 2
     6c0:	9f 93       	push	r25
     6c2:	8f 93       	push	r24
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	8f 93       	push	r24
     6c8:	81 d3       	rcall	.+1794   	; 0xdcc <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
	
	if (!SendStartCondition())
	{
		SendTrace(ERROR_LEVEL, "TwiMasterReceive - Start Condition Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     6d4:	c0 e0       	ldi	r28, 0x00	; 0
		
		goto Exit;
     6d6:	33 c0       	rjmp	.+102    	; 0x73e <TwiMasterReceive+0xac>
	}
	
	gIsRepeatedStart = FALSE;
     6d8:	10 92 da 03 	sts	0x03DA, r1
	//
	// Set Address->ReadWrite = 1 indicating a read operation.
	// Then transmit SLA+R
	//
	
	Address->RW_EnGenCall = 1;
     6dc:	88 81       	ld	r24, Y
     6de:	81 60       	ori	r24, 0x01	; 1
     6e0:	88 83       	st	Y, r24
	
	TWDR = Address->AsUINT8;
     6e2:	80 93 bb 00 	sts	0x00BB, r24
	
	WAIT_FOR_OP_COMPLETION();
     6e6:	ec eb       	ldi	r30, 0xBC	; 188
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	80 81       	ld	r24, Z
     6ec:	80 68       	ori	r24, 0x80	; 128
     6ee:	80 83       	st	Z, r24
     6f0:	80 81       	ld	r24, Z
     6f2:	88 23       	and	r24, r24
     6f4:	ec f7       	brge	.-6      	; 0x6f0 <TwiMasterReceive+0x5e>
	
	if (!ProcessTwiStatus(SLA_R_TRANSMITTED_ACK))
     6f6:	80 91 b9 00 	lds	r24, 0x00B9
     6fa:	88 7f       	andi	r24, 0xF8	; 248
     6fc:	80 34       	cpi	r24, 0x40	; 64
     6fe:	99 f0       	breq	.+38     	; 0x726 <TwiMasterReceive+0x94>
	{
		SendTrace(ERROR_LEVEL, "TwiMasterReceive - Slave Address and Read Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
     700:	80 91 b9 00 	lds	r24, 0x00B9
     704:	88 7f       	andi	r24, 0xF8	; 248
     706:	1f 92       	push	r1
     708:	8f 93       	push	r24
     70a:	82 e2       	ldi	r24, 0x22	; 34
     70c:	93 e0       	ldi	r25, 0x03	; 3
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	8f 93       	push	r24
     716:	5a d3       	rcall	.+1716   	; 0xdcc <SendTrace>
		
		Status = FALSE;
		
		goto Exit;
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
	
	if (!ProcessTwiStatus(SLA_R_TRANSMITTED_ACK))
	{
		SendTrace(ERROR_LEVEL, "TwiMasterReceive - Slave Address and Read Flag Transmission Failed - Status = 0x%x\r\n", (TWSR & TWI_STATUS_MASK));
		
		Status = FALSE;
     722:	c0 e0       	ldi	r28, 0x00	; 0
		
		goto Exit;
     724:	0c c0       	rjmp	.+24     	; 0x73e <TwiMasterReceive+0xac>
	}
	
	Status = Receive(Buffer, Length);
     726:	b7 01       	movw	r22, r14
     728:	a6 01       	movw	r20, r12
     72a:	c5 01       	movw	r24, r10
     72c:	0b df       	rcall	.-490    	; 0x544 <Receive>
     72e:	c8 2f       	mov	r28, r24
	
	//
	// Send stop condition
	//
	
	if (SendStop)
     730:	00 23       	and	r16, r16
     732:	11 f0       	breq	.+4      	; 0x738 <TwiMasterReceive+0xa6>
	{
		SendStopCondition();
     734:	a9 dd       	rcall	.-1198   	; 0x288 <SendStopCondition>
     736:	03 c0       	rjmp	.+6      	; 0x73e <TwiMasterReceive+0xac>
	}
	else
	{
		gIsRepeatedStart = TRUE;
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	80 93 da 03 	sts	0x03DA, r24
	}
	
Exit:

	return Status;
}
     73e:	8c 2f       	mov	r24, r28
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	0f 91       	pop	r16
     746:	ff 90       	pop	r15
     748:	ef 90       	pop	r14
     74a:	df 90       	pop	r13
     74c:	cf 90       	pop	r12
     74e:	bf 90       	pop	r11
     750:	af 90       	pop	r10
     752:	08 95       	ret

00000754 <TwiReceive>:
bool
TwiReceive(PVOID Buffer,
		   unsigned long Length,
		   PTWI_ADDRESS Address,
		   bool SendStop)
{
     754:	0f 93       	push	r16
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
     756:	e0 91 db 03 	lds	r30, 0x03DB
     75a:	ee 23       	and	r30, r30
     75c:	d1 f1       	breq	.+116    	; 0x7d2 <TwiReceive+0x7e>
     75e:	00 97       	sbiw	r24, 0x00	; 0
     760:	d1 f1       	breq	.+116    	; 0x7d6 <TwiReceive+0x82>
		Status = FALSE;
		
		goto Exit;
	}
	
	if (gMode == TWI_MASTER)
     762:	e0 91 df 03 	lds	r30, 0x03DF
     766:	e1 30       	cpi	r30, 0x01	; 1
     768:	99 f4       	brne	.+38     	; 0x790 <TwiReceive+0x3c>
	{
		if (Address == NULL)
     76a:	21 15       	cp	r18, r1
     76c:	31 05       	cpc	r19, r1
     76e:	61 f4       	brne	.+24     	; 0x788 <TwiReceive+0x34>
		{
			SendTrace(ERROR_LEVEL, "TwiReceive - Invalid Parameters\r\n");
     770:	87 e7       	ldi	r24, 0x77	; 119
     772:	93 e0       	ldi	r25, 0x03	; 3
     774:	9f 93       	push	r25
     776:	8f 93       	push	r24
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	8f 93       	push	r24
     77c:	27 d3       	rcall	.+1614   	; 0xdcc <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
	{
		if (Address == NULL)
		{
			SendTrace(ERROR_LEVEL, "TwiReceive - Invalid Parameters\r\n");
			
			Status = FALSE;
     784:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
     786:	28 c0       	rjmp	.+80     	; 0x7d8 <TwiReceive+0x84>
		}
		else
		{
			DATA_IN();
     788:	39 98       	cbi	0x07, 1	; 7
			
			Status = TwiMasterReceive(Buffer, Length, Address, SendStop);
     78a:	83 df       	rcall	.-250    	; 0x692 <TwiMasterReceive>
			
			DATA_OUT();
     78c:	39 9a       	sbi	0x07, 1	; 7
     78e:	24 c0       	rjmp	.+72     	; 0x7d8 <TwiReceive+0x84>
		}
	}
	else
	{
		WAIT_FOR_OP_COMPLETION();
     790:	ec eb       	ldi	r30, 0xBC	; 188
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	20 81       	ld	r18, Z
     796:	20 68       	ori	r18, 0x80	; 128
     798:	20 83       	st	Z, r18
     79a:	20 81       	ld	r18, Z
     79c:	22 23       	and	r18, r18
     79e:	ec f7       	brge	.-6      	; 0x79a <TwiReceive+0x46>
		
		if (!ProcessTwiStatus(SLA_W_RECEIVED_ACK))
     7a0:	20 91 b9 00 	lds	r18, 0x00B9
     7a4:	28 7f       	andi	r18, 0xF8	; 248
     7a6:	20 36       	cpi	r18, 0x60	; 96
     7a8:	91 f0       	breq	.+36     	; 0x7ce <TwiReceive+0x7a>
		{
			SendTrace(ERROR_LEVEL, "TwiReceive - Slave Write Not Requested by Master - Status 0x%x\r\n", TWSR);
     7aa:	80 91 b9 00 	lds	r24, 0x00B9
     7ae:	1f 92       	push	r1
     7b0:	8f 93       	push	r24
     7b2:	89 e9       	ldi	r24, 0x99	; 153
     7b4:	93 e0       	ldi	r25, 0x03	; 3
     7b6:	9f 93       	push	r25
     7b8:	8f 93       	push	r24
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	8f 93       	push	r24
     7be:	06 d3       	rcall	.+1548   	; 0xdcc <SendTrace>
			
			Status = FALSE;
			
			goto Exit;
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
		
		if (!ProcessTwiStatus(SLA_W_RECEIVED_ACK))
		{
			SendTrace(ERROR_LEVEL, "TwiReceive - Slave Write Not Requested by Master - Status 0x%x\r\n", TWSR);
			
			Status = FALSE;
     7ca:	80 e0       	ldi	r24, 0x00	; 0
			
			goto Exit;
     7cc:	05 c0       	rjmp	.+10     	; 0x7d8 <TwiReceive+0x84>
		}
		else
		{	
			Status = Receive(Buffer, Length);
     7ce:	ba de       	rcall	.-652    	; 0x544 <Receive>
     7d0:	03 c0       	rjmp	.+6      	; 0x7d8 <TwiReceive+0x84>
{
	bool Status = TRUE;
	
	if (!gIsTWIInitialized || (Buffer == NULL))
	{
		Status = FALSE;
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	01 c0       	rjmp	.+2      	; 0x7d8 <TwiReceive+0x84>
     7d6:	80 e0       	ldi	r24, 0x00	; 0
	}
	
Exit:

	return Status;		   
}
     7d8:	0f 91       	pop	r16
     7da:	08 95       	ret

000007dc <InitTrace>:
#ifdef DEBUG

void
InitTrace(unsigned long ProcFrequency, unsigned char TraceLevel)
{
	if (!gTraceInitialized)
     7dc:	80 91 dc 03 	lds	r24, 0x03DC
     7e0:	81 11       	cpse	r24, r1
     7e2:	09 c0       	rjmp	.+18     	; 0x7f6 <InitTrace+0x1a>
	{

		gTraceLevel = TraceLevel;
     7e4:	40 93 e0 03 	sts	0x03E0, r20

		InitUARTSync(UART_ZERO, BR_9600, NORMAL_MODE);	
     7e8:	40 e0       	ldi	r20, 0x00	; 0
     7ea:	63 e3       	ldi	r22, 0x33	; 51
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	76 d6       	rcall	.+3308   	; 0x14dc <InitUARTSync>
		
		gTraceInitialized = TRUE;
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	80 93 dc 03 	sts	0x03DC, r24
     7f6:	08 95       	ret

000007f8 <SendStringValue>:
SendStringValue(char *String)
{

	unsigned long Length = 0;
	
	Length = strlen(String);
     7f8:	fc 01       	movw	r30, r24
     7fa:	01 90       	ld	r0, Z+
     7fc:	00 20       	and	r0, r0
     7fe:	e9 f7       	brne	.-6      	; 0x7fa <SendStringValue+0x2>
     800:	31 97       	sbiw	r30, 0x01	; 1
     802:	9f 01       	movw	r18, r30
     804:	28 1b       	sub	r18, r24
     806:	39 0b       	sbc	r19, r25
     808:	40 e0       	ldi	r20, 0x00	; 0
     80a:	50 e0       	ldi	r21, 0x00	; 0
	
	UARTTransmitSync(UART_ZERO, (PVOID) String, Length);
     80c:	bc 01       	movw	r22, r24
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	32 c7       	rjmp	.+3684   	; 0x1676 <UARTTransmitSync>
     812:	08 95       	ret

00000814 <SendHexValue>:
	
}

void
SendHexValue(unsigned long long Value)
{
     814:	8f 92       	push	r8
     816:	9f 92       	push	r9
     818:	af 92       	push	r10
     81a:	bf 92       	push	r11
     81c:	cf 92       	push	r12
     81e:	df 92       	push	r13
     820:	ef 92       	push	r14
     822:	ff 92       	push	r15
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
     830:	da 95       	dec	r29
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	f8 94       	cli
     836:	de bf       	out	0x3e, r29	; 62
     838:	0f be       	out	0x3f, r0	; 63
     83a:	cd bf       	out	0x3d, r28	; 61
     83c:	02 2f       	mov	r16, r18
     83e:	93 2e       	mov	r9, r19
     840:	a4 2e       	mov	r10, r20
     842:	b5 2e       	mov	r11, r21
     844:	c6 2e       	mov	r12, r22
     846:	d7 2e       	mov	r13, r23
     848:	e8 2e       	mov	r14, r24
     84a:	f9 2e       	mov	r15, r25

	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
     84c:	10 e0       	ldi	r17, 0x00	; 0

		if (Value < 16)
		{
			TransmitChar[Count] = Value;

			Value = 0;
     84e:	81 2c       	mov	r8, r1


	do
	{

		if (Value < 16)
     850:	20 2f       	mov	r18, r16
     852:	39 2d       	mov	r19, r9
     854:	4a 2d       	mov	r20, r10
     856:	5b 2d       	mov	r21, r11
     858:	6c 2d       	mov	r22, r12
     85a:	7d 2d       	mov	r23, r13
     85c:	8e 2d       	mov	r24, r14
     85e:	9f 2d       	mov	r25, r15
     860:	af e0       	ldi	r26, 0x0F	; 15
     862:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__cmpdi2_s8>
     866:	09 f0       	breq	.+2      	; 0x86a <SendHexValue+0x56>
     868:	80 f4       	brcc	.+32     	; 0x88a <SendHexValue+0x76>
		{
			TransmitChar[Count] = Value;
     86a:	e1 e0       	ldi	r30, 0x01	; 1
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	ec 0f       	add	r30, r28
     870:	fd 1f       	adc	r31, r29
     872:	e1 0f       	add	r30, r17
     874:	f1 1d       	adc	r31, r1
     876:	00 83       	st	Z, r16

			Value = 0;
     878:	08 2d       	mov	r16, r8
     87a:	98 2c       	mov	r9, r8
     87c:	a8 2c       	mov	r10, r8
     87e:	b8 2c       	mov	r11, r8
     880:	c8 2c       	mov	r12, r8
     882:	d8 2c       	mov	r13, r8
     884:	e8 2c       	mov	r14, r8
     886:	f8 2c       	mov	r15, r8
     888:	1c c0       	rjmp	.+56     	; 0x8c2 <SendHexValue+0xae>
		}
		else
		{
			TransmitChar[Count] = Value % 16;
     88a:	e1 e0       	ldi	r30, 0x01	; 1
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	ec 0f       	add	r30, r28
     890:	fd 1f       	adc	r31, r29
     892:	e1 0f       	add	r30, r17
     894:	f1 1d       	adc	r31, r1
     896:	80 2f       	mov	r24, r16
     898:	8f 70       	andi	r24, 0x0F	; 15
     89a:	80 83       	st	Z, r24

			Value = Value / 16;
     89c:	20 2f       	mov	r18, r16
     89e:	39 2d       	mov	r19, r9
     8a0:	4a 2d       	mov	r20, r10
     8a2:	5b 2d       	mov	r21, r11
     8a4:	6c 2d       	mov	r22, r12
     8a6:	7d 2d       	mov	r23, r13
     8a8:	8e 2d       	mov	r24, r14
     8aa:	9f 2d       	mov	r25, r15
     8ac:	04 e0       	ldi	r16, 0x04	; 4
     8ae:	0e 94 ef 0c 	call	0x19de	; 0x19de <__lshrdi3>
     8b2:	02 2f       	mov	r16, r18
     8b4:	93 2e       	mov	r9, r19
     8b6:	a4 2e       	mov	r10, r20
     8b8:	b5 2e       	mov	r11, r21
     8ba:	c6 2e       	mov	r12, r22
     8bc:	d7 2e       	mov	r13, r23
     8be:	e8 2e       	mov	r14, r24
     8c0:	f9 2e       	mov	r15, r25

		}
		
		if (TransmitChar[Count] > 9)
     8c2:	e1 2f       	mov	r30, r17
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	a1 e0       	ldi	r26, 0x01	; 1
     8c8:	b0 e0       	ldi	r27, 0x00	; 0
     8ca:	ac 0f       	add	r26, r28
     8cc:	bd 1f       	adc	r27, r29
     8ce:	ae 0f       	add	r26, r30
     8d0:	bf 1f       	adc	r27, r31
     8d2:	8c 91       	ld	r24, X
     8d4:	8a 30       	cpi	r24, 0x0A	; 10
     8d6:	20 f0       	brcs	.+8      	; 0x8e0 <SendHexValue+0xcc>
		{
			TransmitChar[Count] = TransmitChar[Count] + ASCII_HEX_CONVERSION;
     8d8:	fd 01       	movw	r30, r26
     8da:	89 5a       	subi	r24, 0xA9	; 169
     8dc:	80 83       	st	Z, r24
     8de:	08 c0       	rjmp	.+16     	; 0x8f0 <SendHexValue+0xdc>
		}
		else
		{
			TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     8e0:	21 e0       	ldi	r18, 0x01	; 1
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	2c 0f       	add	r18, r28
     8e6:	3d 1f       	adc	r19, r29
     8e8:	e2 0f       	add	r30, r18
     8ea:	f3 1f       	adc	r31, r19
     8ec:	80 5d       	subi	r24, 0xD0	; 208
     8ee:	80 83       	st	Z, r24
		}
		
		Count++;
     8f0:	1f 5f       	subi	r17, 0xFF	; 255

	} while (Value != 0);
     8f2:	20 2f       	mov	r18, r16
     8f4:	39 2d       	mov	r19, r9
     8f6:	4a 2d       	mov	r20, r10
     8f8:	5b 2d       	mov	r21, r11
     8fa:	6c 2d       	mov	r22, r12
     8fc:	7d 2d       	mov	r23, r13
     8fe:	8e 2d       	mov	r24, r14
     900:	9f 2d       	mov	r25, r15
     902:	a8 2d       	mov	r26, r8
     904:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__cmpdi2_s8>
     908:	09 f0       	breq	.+2      	; 0x90c <SendHexValue+0xf8>
     90a:	a2 cf       	rjmp	.-188    	; 0x850 <SendHexValue+0x3c>

	while (Count != 0)
     90c:	11 23       	and	r17, r17
     90e:	91 f0       	breq	.+36     	; 0x934 <SendHexValue+0x120>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     910:	61 2f       	mov	r22, r17
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	61 50       	subi	r22, 0x01	; 1
     916:	71 09       	sbc	r23, r1
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	8c 0f       	add	r24, r28
     91e:	9d 1f       	adc	r25, r29
     920:	68 0f       	add	r22, r24
     922:	79 1f       	adc	r23, r25
     924:	21 e0       	ldi	r18, 0x01	; 1
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	40 e0       	ldi	r20, 0x00	; 0
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	a3 d6       	rcall	.+3398   	; 0x1676 <UARTTransmitSync>
		
		Count--;
     930:	11 50       	subi	r17, 0x01	; 1
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
     932:	71 f7       	brne	.-36     	; 0x910 <SendHexValue+0xfc>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}
}
     934:	d3 95       	inc	r29
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	ff 90       	pop	r15
     94a:	ef 90       	pop	r14
     94c:	df 90       	pop	r13
     94e:	cf 90       	pop	r12
     950:	bf 90       	pop	r11
     952:	af 90       	pop	r10
     954:	9f 90       	pop	r9
     956:	8f 90       	pop	r8
     958:	08 95       	ret

0000095a <SendDecimalValue>:


void
SendDecimalValue(unsigned long long Value)
{
     95a:	2f 92       	push	r2
     95c:	3f 92       	push	r3
     95e:	4f 92       	push	r4
     960:	5f 92       	push	r5
     962:	6f 92       	push	r6
     964:	7f 92       	push	r7
     966:	8f 92       	push	r8
     968:	9f 92       	push	r9
     96a:	af 92       	push	r10
     96c:	bf 92       	push	r11
     96e:	cf 92       	push	r12
     970:	df 92       	push	r13
     972:	ef 92       	push	r14
     974:	ff 92       	push	r15
     976:	0f 93       	push	r16
     978:	1f 93       	push	r17
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	cd b7       	in	r28, 0x3d	; 61
     980:	de b7       	in	r29, 0x3e	; 62
     982:	c2 50       	subi	r28, 0x02	; 2
     984:	d1 40       	sbci	r29, 0x01	; 1
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	f8 94       	cli
     98a:	de bf       	out	0x3e, r29	; 62
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	cd bf       	out	0x3d, r28	; 61
     990:	cf 5f       	subi	r28, 0xFF	; 255
     992:	de 4f       	sbci	r29, 0xFE	; 254
     994:	28 83       	st	Y, r18
     996:	c1 50       	subi	r28, 0x01	; 1
     998:	d1 40       	sbci	r29, 0x01	; 1
     99a:	23 2e       	mov	r2, r19
     99c:	34 2e       	mov	r3, r20
     99e:	45 2e       	mov	r4, r21
     9a0:	56 2e       	mov	r5, r22
     9a2:	67 2e       	mov	r6, r23
     9a4:	78 2e       	mov	r7, r24
     9a6:	89 2e       	mov	r8, r25

	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
     9a8:	91 2c       	mov	r9, r1


	do
	{

		if (Value < 10)
     9aa:	cf 5f       	subi	r28, 0xFF	; 255
     9ac:	de 4f       	sbci	r29, 0xFE	; 254
     9ae:	28 81       	ld	r18, Y
     9b0:	c1 50       	subi	r28, 0x01	; 1
     9b2:	d1 40       	sbci	r29, 0x01	; 1
     9b4:	32 2d       	mov	r19, r2
     9b6:	43 2d       	mov	r20, r3
     9b8:	54 2d       	mov	r21, r4
     9ba:	65 2d       	mov	r22, r5
     9bc:	76 2d       	mov	r23, r6
     9be:	87 2d       	mov	r24, r7
     9c0:	98 2d       	mov	r25, r8
     9c2:	a9 e0       	ldi	r26, 0x09	; 9
     9c4:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__cmpdi2_s8>
     9c8:	09 f0       	breq	.+2      	; 0x9cc <SendDecimalValue+0x72>
     9ca:	40 f4       	brcc	.+16     	; 0x9dc <SendDecimalValue+0x82>

			Value = Value / 10;

		}
		
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     9cc:	fe 01       	movw	r30, r28
     9ce:	e9 0d       	add	r30, r9
     9d0:	f1 1d       	adc	r31, r1
     9d2:	82 2f       	mov	r24, r18
     9d4:	80 5d       	subi	r24, 0xD0	; 208
     9d6:	81 83       	std	Z+1, r24	; 0x01
		
		Count++;
     9d8:	93 94       	inc	r9
     9da:	48 c0       	rjmp	.+144    	; 0xa6c <SendDecimalValue+0x112>

			Value = 0;
		}
		else
		{
			TransmitChar[Count] = Value % 10;
     9dc:	0f 2e       	mov	r0, r31
     9de:	fa e0       	ldi	r31, 0x0A	; 10
     9e0:	af 2e       	mov	r10, r31
     9e2:	f0 2d       	mov	r31, r0
     9e4:	b1 2c       	mov	r11, r1
     9e6:	c1 2c       	mov	r12, r1
     9e8:	d1 2c       	mov	r13, r1
     9ea:	e1 2c       	mov	r14, r1
     9ec:	f1 2c       	mov	r15, r1
     9ee:	00 e0       	ldi	r16, 0x00	; 0
     9f0:	10 e0       	ldi	r17, 0x00	; 0
     9f2:	cf 5f       	subi	r28, 0xFF	; 255
     9f4:	de 4f       	sbci	r29, 0xFE	; 254
     9f6:	28 81       	ld	r18, Y
     9f8:	c1 50       	subi	r28, 0x01	; 1
     9fa:	d1 40       	sbci	r29, 0x01	; 1
     9fc:	32 2d       	mov	r19, r2
     9fe:	43 2d       	mov	r20, r3
     a00:	54 2d       	mov	r21, r4
     a02:	65 2d       	mov	r22, r5
     a04:	76 2d       	mov	r23, r6
     a06:	87 2d       	mov	r24, r7
     a08:	98 2d       	mov	r25, r8
     a0a:	42 d7       	rcall	.+3716   	; 0x1890 <__umoddi3>
     a0c:	ce 5f       	subi	r28, 0xFE	; 254
     a0e:	de 4f       	sbci	r29, 0xFE	; 254
     a10:	28 83       	st	Y, r18
     a12:	c2 50       	subi	r28, 0x02	; 2
     a14:	d1 40       	sbci	r29, 0x01	; 1

			Value = Value / 10;
     a16:	cf 5f       	subi	r28, 0xFF	; 255
     a18:	de 4f       	sbci	r29, 0xFE	; 254
     a1a:	28 81       	ld	r18, Y
     a1c:	c1 50       	subi	r28, 0x01	; 1
     a1e:	d1 40       	sbci	r29, 0x01	; 1
     a20:	32 2d       	mov	r19, r2
     a22:	43 2d       	mov	r20, r3
     a24:	54 2d       	mov	r21, r4
     a26:	65 2d       	mov	r22, r5
     a28:	76 2d       	mov	r23, r6
     a2a:	87 2d       	mov	r24, r7
     a2c:	98 2d       	mov	r25, r8
     a2e:	32 d7       	rcall	.+3684   	; 0x1894 <__udivdi3>
     a30:	cf 5f       	subi	r28, 0xFF	; 255
     a32:	de 4f       	sbci	r29, 0xFE	; 254
     a34:	28 83       	st	Y, r18
     a36:	c1 50       	subi	r28, 0x01	; 1
     a38:	d1 40       	sbci	r29, 0x01	; 1
     a3a:	23 2e       	mov	r2, r19
     a3c:	34 2e       	mov	r3, r20
     a3e:	45 2e       	mov	r4, r21
     a40:	56 2e       	mov	r5, r22
     a42:	67 2e       	mov	r6, r23
     a44:	78 2e       	mov	r7, r24
     a46:	89 2e       	mov	r8, r25

		}
		
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     a48:	e1 e0       	ldi	r30, 0x01	; 1
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	ec 0f       	add	r30, r28
     a4e:	fd 1f       	adc	r31, r29
     a50:	e9 0d       	add	r30, r9
     a52:	f1 1d       	adc	r31, r1
     a54:	ce 5f       	subi	r28, 0xFE	; 254
     a56:	de 4f       	sbci	r29, 0xFE	; 254
     a58:	a8 81       	ld	r26, Y
     a5a:	c2 50       	subi	r28, 0x02	; 2
     a5c:	d1 40       	sbci	r29, 0x01	; 1
     a5e:	a0 5d       	subi	r26, 0xD0	; 208
     a60:	a0 83       	st	Z, r26
		
		Count++;
     a62:	93 94       	inc	r9

	} while (Value != 0);
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	d7 d7       	rcall	.+4014   	; 0x1a16 <__cmpdi2_s8>
     a68:	09 f0       	breq	.+2      	; 0xa6c <SendDecimalValue+0x112>
     a6a:	9f cf       	rjmp	.-194    	; 0x9aa <SendDecimalValue+0x50>

	while (Count != 0)
     a6c:	99 20       	and	r9, r9
     a6e:	91 f0       	breq	.+36     	; 0xa94 <SendDecimalValue+0x13a>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     a70:	69 2d       	mov	r22, r9
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	61 50       	subi	r22, 0x01	; 1
     a76:	71 09       	sbc	r23, r1
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	8c 0f       	add	r24, r28
     a7e:	9d 1f       	adc	r25, r29
     a80:	68 0f       	add	r22, r24
     a82:	79 1f       	adc	r23, r25
     a84:	21 e0       	ldi	r18, 0x01	; 1
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	40 e0       	ldi	r20, 0x00	; 0
     a8a:	50 e0       	ldi	r21, 0x00	; 0
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	f3 d5       	rcall	.+3046   	; 0x1676 <UARTTransmitSync>
		
		Count--;
     a90:	9a 94       	dec	r9
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
     a92:	71 f7       	brne	.-36     	; 0xa70 <SendDecimalValue+0x116>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}	
}
     a94:	ce 5f       	subi	r28, 0xFE	; 254
     a96:	de 4f       	sbci	r29, 0xFE	; 254
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	de bf       	out	0x3e, r29	; 62
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	cd bf       	out	0x3d, r28	; 61
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	ff 90       	pop	r15
     aac:	ef 90       	pop	r14
     aae:	df 90       	pop	r13
     ab0:	cf 90       	pop	r12
     ab2:	bf 90       	pop	r11
     ab4:	af 90       	pop	r10
     ab6:	9f 90       	pop	r9
     ab8:	8f 90       	pop	r8
     aba:	7f 90       	pop	r7
     abc:	6f 90       	pop	r6
     abe:	5f 90       	pop	r5
     ac0:	4f 90       	pop	r4
     ac2:	3f 90       	pop	r3
     ac4:	2f 90       	pop	r2
     ac6:	08 95       	ret

00000ac8 <SendDoubleValue>:

void
SendDoubleValue(double Value)
{
     ac8:	6f 92       	push	r6
     aca:	7f 92       	push	r7
     acc:	8f 92       	push	r8
     ace:	9f 92       	push	r9
     ad0:	af 92       	push	r10
     ad2:	bf 92       	push	r11
     ad4:	cf 92       	push	r12
     ad6:	df 92       	push	r13
     ad8:	ef 92       	push	r14
     ada:	ff 92       	push	r15
     adc:	0f 93       	push	r16
     ade:	1f 93       	push	r17
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
     ae4:	00 d0       	rcall	.+0      	; 0xae6 <SendDoubleValue+0x1e>
     ae6:	1f 92       	push	r1
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	6b 01       	movw	r12, r22
     aee:	7c 01       	movw	r14, r24
	
	long long IntPart;
	
	unsigned char FracPart;
	
	unsigned char Dot = '.';
     af0:	8e e2       	ldi	r24, 0x2E	; 46
     af2:	8a 83       	std	Y+2, r24	; 0x02
	
	unsigned char Minus = '-';
     af4:	8d e2       	ldi	r24, 0x2D	; 45
     af6:	8b 83       	std	Y+3, r24	; 0x03
	
	if (Value < 0)
     af8:	20 e0       	ldi	r18, 0x00	; 0
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	a9 01       	movw	r20, r18
     afe:	c7 01       	movw	r24, r14
     b00:	b6 01       	movw	r22, r12
     b02:	12 d3       	rcall	.+1572   	; 0x1128 <__cmpsf2>
     b04:	88 23       	and	r24, r24
     b06:	6c f4       	brge	.+26     	; 0xb22 <SendDoubleValue+0x5a>
	{
		
		UARTTransmitSync(UART_ZERO, (PVOID) &Minus, 1);
     b08:	21 e0       	ldi	r18, 0x01	; 1
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	be 01       	movw	r22, r28
     b12:	6d 5f       	subi	r22, 0xFD	; 253
     b14:	7f 4f       	sbci	r23, 0xFF	; 255
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	ae d5       	rcall	.+2908   	; 0x1676 <UARTTransmitSync>
		
		Value = Value * -1;
     b1a:	f7 fa       	bst	r15, 7
     b1c:	f0 94       	com	r15
     b1e:	f7 f8       	bld	r15, 7
     b20:	f0 94       	com	r15
	}
	
	IntPart = (long long) Value;
     b22:	c7 01       	movw	r24, r14
     b24:	b6 01       	movw	r22, r12
     b26:	04 d3       	rcall	.+1544   	; 0x1130 <__fixsfdi>
     b28:	62 2e       	mov	r6, r18
     b2a:	73 2e       	mov	r7, r19
     b2c:	84 2e       	mov	r8, r20
     b2e:	95 2e       	mov	r9, r21
     b30:	a6 2e       	mov	r10, r22
     b32:	b7 2e       	mov	r11, r23
     b34:	08 2f       	mov	r16, r24
     b36:	19 2f       	mov	r17, r25
		
	Value = Value - IntPart;
     b38:	61 d3       	rcall	.+1730   	; 0x11fc <__floatdisf>
     b3a:	9b 01       	movw	r18, r22
     b3c:	ac 01       	movw	r20, r24
     b3e:	c7 01       	movw	r24, r14
     b40:	b6 01       	movw	r22, r12
     b42:	8d d2       	rcall	.+1306   	; 0x105e <__subsf3>
     b44:	6b 01       	movw	r12, r22
     b46:	7c 01       	movw	r14, r24
	
	SendDecimalValue(IntPart);
     b48:	26 2d       	mov	r18, r6
     b4a:	37 2d       	mov	r19, r7
     b4c:	48 2d       	mov	r20, r8
     b4e:	59 2d       	mov	r21, r9
     b50:	6a 2d       	mov	r22, r10
     b52:	7b 2d       	mov	r23, r11
     b54:	80 2f       	mov	r24, r16
     b56:	91 2f       	mov	r25, r17
     b58:	00 df       	rcall	.-512    	; 0x95a <SendDecimalValue>
	
	UARTTransmitSync(UART_ZERO, (PVOID) &Dot, 1);
     b5a:	21 e0       	ldi	r18, 0x01	; 1
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	be 01       	movw	r22, r28
     b64:	6e 5f       	subi	r22, 0xFE	; 254
     b66:	7f 4f       	sbci	r23, 0xFF	; 255
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	85 d5       	rcall	.+2826   	; 0x1676 <UARTTransmitSync>
	
	while (Value != 0)
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	a9 01       	movw	r20, r18
     b72:	c7 01       	movw	r24, r14
     b74:	b6 01       	movw	r22, r12
     b76:	d8 d2       	rcall	.+1456   	; 0x1128 <__cmpsf2>
     b78:	88 23       	and	r24, r24
     b7a:	49 f1       	breq	.+82     	; 0xbce <SendDoubleValue+0x106>
	{
		FracPart = (Value * 10);
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	40 e2       	ldi	r20, 0x20	; 32
     b82:	51 e4       	ldi	r21, 0x41	; 65
     b84:	c7 01       	movw	r24, r14
     b86:	b6 01       	movw	r22, r12
     b88:	3d d4       	rcall	.+2170   	; 0x1404 <__mulsf3>
     b8a:	6b 01       	movw	r12, r22
     b8c:	7c 01       	movw	r14, r24
     b8e:	0a d3       	rcall	.+1556   	; 0x11a4 <__fixunssfsi>
     b90:	16 2f       	mov	r17, r22
		
		Value = (Value * 10) - FracPart;
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	37 d3       	rcall	.+1646   	; 0x1208 <__floatsisf>
     b9a:	9b 01       	movw	r18, r22
     b9c:	ac 01       	movw	r20, r24
     b9e:	c7 01       	movw	r24, r14
     ba0:	b6 01       	movw	r22, r12
     ba2:	5d d2       	rcall	.+1210   	; 0x105e <__subsf3>
     ba4:	6b 01       	movw	r12, r22
     ba6:	7c 01       	movw	r14, r24
		
		FracPart = FracPart + ASCII_DECIMAL_CONVERSION;
     ba8:	10 5d       	subi	r17, 0xD0	; 208
     baa:	19 83       	std	Y+1, r17	; 0x01
		
		UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
     bac:	21 e0       	ldi	r18, 0x01	; 1
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	be 01       	movw	r22, r28
     bb6:	6f 5f       	subi	r22, 0xFF	; 255
     bb8:	7f 4f       	sbci	r23, 0xFF	; 255
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	5c d5       	rcall	.+2744   	; 0x1676 <UARTTransmitSync>
	
	SendDecimalValue(IntPart);
	
	UARTTransmitSync(UART_ZERO, (PVOID) &Dot, 1);
	
	while (Value != 0)
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	a9 01       	movw	r20, r18
     bc4:	c7 01       	movw	r24, r14
     bc6:	b6 01       	movw	r22, r12
     bc8:	af d2       	rcall	.+1374   	; 0x1128 <__cmpsf2>
     bca:	81 11       	cpse	r24, r1
     bcc:	d7 cf       	rjmp	.-82     	; 0xb7c <SendDoubleValue+0xb4>
	
	//
	// Print 0
	//
	
	FracPart = ASCII_DECIMAL_CONVERSION;
     bce:	80 e3       	ldi	r24, 0x30	; 48
     bd0:	89 83       	std	Y+1, r24	; 0x01
	
	UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
     bd2:	21 e0       	ldi	r18, 0x01	; 1
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	40 e0       	ldi	r20, 0x00	; 0
     bd8:	50 e0       	ldi	r21, 0x00	; 0
     bda:	be 01       	movw	r22, r28
     bdc:	6f 5f       	subi	r22, 0xFF	; 255
     bde:	7f 4f       	sbci	r23, 0xFF	; 255
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	49 d5       	rcall	.+2706   	; 0x1676 <UARTTransmitSync>
}
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	0f 91       	pop	r16
     bf2:	ff 90       	pop	r15
     bf4:	ef 90       	pop	r14
     bf6:	df 90       	pop	r13
     bf8:	cf 90       	pop	r12
     bfa:	bf 90       	pop	r11
     bfc:	af 90       	pop	r10
     bfe:	9f 90       	pop	r9
     c00:	8f 90       	pop	r8
     c02:	7f 90       	pop	r7
     c04:	6f 90       	pop	r6
     c06:	08 95       	ret

00000c08 <SendSignedDecimalValue>:

void
SendSignedDecimalValue(long long Value)
{
     c08:	2f 92       	push	r2
     c0a:	3f 92       	push	r3
     c0c:	4f 92       	push	r4
     c0e:	5f 92       	push	r5
     c10:	6f 92       	push	r6
     c12:	7f 92       	push	r7
     c14:	8f 92       	push	r8
     c16:	9f 92       	push	r9
     c18:	af 92       	push	r10
     c1a:	bf 92       	push	r11
     c1c:	cf 92       	push	r12
     c1e:	df 92       	push	r13
     c20:	ef 92       	push	r14
     c22:	ff 92       	push	r15
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	c3 50       	subi	r28, 0x03	; 3
     c32:	d1 40       	sbci	r29, 0x01	; 1
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	de bf       	out	0x3e, r29	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	cd bf       	out	0x3d, r28	; 61
     c3e:	ce 5f       	subi	r28, 0xFE	; 254
     c40:	de 4f       	sbci	r29, 0xFE	; 254
     c42:	28 83       	st	Y, r18
     c44:	c2 50       	subi	r28, 0x02	; 2
     c46:	d1 40       	sbci	r29, 0x01	; 1
     c48:	83 2e       	mov	r8, r19
     c4a:	74 2e       	mov	r7, r20
     c4c:	65 2e       	mov	r6, r21
     c4e:	56 2e       	mov	r5, r22
     c50:	47 2e       	mov	r4, r23
     c52:	38 2e       	mov	r3, r24
     c54:	29 2e       	mov	r2, r25
	unsigned char TransmitChar[MAX_DECIMAL_CHARS];

	unsigned char Count = 0;
	
	unsigned char Minus = '-';
     c56:	8d e2       	ldi	r24, 0x2D	; 45
     c58:	cf 5f       	subi	r28, 0xFF	; 255
     c5a:	de 4f       	sbci	r29, 0xFE	; 254
     c5c:	88 83       	st	Y, r24
     c5e:	c1 50       	subi	r28, 0x01	; 1
     c60:	d1 40       	sbci	r29, 0x01	; 1

	//
	// If the value is negative, print - sign and make the value positive.
	//

	if (Value < 0)
     c62:	83 2d       	mov	r24, r3
     c64:	a0 e0       	ldi	r26, 0x00	; 0
     c66:	d7 d6       	rcall	.+3502   	; 0x1a16 <__cmpdi2_s8>
     c68:	14 f5       	brge	.+68     	; 0xcae <SendSignedDecimalValue+0xa6>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &Minus, 1);
     c6a:	21 e0       	ldi	r18, 0x01	; 1
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	be 01       	movw	r22, r28
     c74:	6f 5f       	subi	r22, 0xFF	; 255
     c76:	7e 4f       	sbci	r23, 0xFE	; 254
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	fd d4       	rcall	.+2554   	; 0x1676 <UARTTransmitSync>

		Value *= -1;
     c7c:	ce 5f       	subi	r28, 0xFE	; 254
     c7e:	de 4f       	sbci	r29, 0xFE	; 254
     c80:	28 81       	ld	r18, Y
     c82:	c2 50       	subi	r28, 0x02	; 2
     c84:	d1 40       	sbci	r29, 0x01	; 1
     c86:	38 2d       	mov	r19, r8
     c88:	47 2d       	mov	r20, r7
     c8a:	56 2d       	mov	r21, r6
     c8c:	65 2d       	mov	r22, r5
     c8e:	74 2d       	mov	r23, r4
     c90:	83 2d       	mov	r24, r3
     c92:	92 2d       	mov	r25, r2
     c94:	5b d6       	rcall	.+3254   	; 0x194c <__negdi2>
     c96:	ce 5f       	subi	r28, 0xFE	; 254
     c98:	de 4f       	sbci	r29, 0xFE	; 254
     c9a:	28 83       	st	Y, r18
     c9c:	c2 50       	subi	r28, 0x02	; 2
     c9e:	d1 40       	sbci	r29, 0x01	; 1
     ca0:	83 2e       	mov	r8, r19
     ca2:	74 2e       	mov	r7, r20
     ca4:	65 2e       	mov	r6, r21
     ca6:	56 2e       	mov	r5, r22
     ca8:	47 2e       	mov	r4, r23
     caa:	38 2e       	mov	r3, r24
     cac:	29 2e       	mov	r2, r25
	UARTTransmitSync(UART_ZERO, (PVOID) &FracPart, 1);
}

void
SendSignedDecimalValue(long long Value)
{
     cae:	91 2c       	mov	r9, r1
	}

	do
	{

		if (Value < 10)
     cb0:	ce 5f       	subi	r28, 0xFE	; 254
     cb2:	de 4f       	sbci	r29, 0xFE	; 254
     cb4:	28 81       	ld	r18, Y
     cb6:	c2 50       	subi	r28, 0x02	; 2
     cb8:	d1 40       	sbci	r29, 0x01	; 1
     cba:	38 2d       	mov	r19, r8
     cbc:	47 2d       	mov	r20, r7
     cbe:	56 2d       	mov	r21, r6
     cc0:	65 2d       	mov	r22, r5
     cc2:	74 2d       	mov	r23, r4
     cc4:	83 2d       	mov	r24, r3
     cc6:	92 2d       	mov	r25, r2
     cc8:	a9 e0       	ldi	r26, 0x09	; 9
     cca:	a5 d6       	rcall	.+3402   	; 0x1a16 <__cmpdi2_s8>
     ccc:	09 f0       	breq	.+2      	; 0xcd0 <SendSignedDecimalValue+0xc8>
     cce:	44 f4       	brge	.+16     	; 0xce0 <SendSignedDecimalValue+0xd8>

			Value = Value / 10;

		}
	
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     cd0:	fe 01       	movw	r30, r28
     cd2:	e9 0d       	add	r30, r9
     cd4:	f1 1d       	adc	r31, r1
     cd6:	82 2f       	mov	r24, r18
     cd8:	80 5d       	subi	r24, 0xD0	; 208
     cda:	81 83       	std	Z+1, r24	; 0x01
		
		Count++;
     cdc:	93 94       	inc	r9
     cde:	48 c0       	rjmp	.+144    	; 0xd70 <SendSignedDecimalValue+0x168>

			Value = 0;
		}
		else
		{
			TransmitChar[Count] = Value % 10;
     ce0:	0f 2e       	mov	r0, r31
     ce2:	fa e0       	ldi	r31, 0x0A	; 10
     ce4:	af 2e       	mov	r10, r31
     ce6:	f0 2d       	mov	r31, r0
     ce8:	b1 2c       	mov	r11, r1
     cea:	c1 2c       	mov	r12, r1
     cec:	d1 2c       	mov	r13, r1
     cee:	e1 2c       	mov	r14, r1
     cf0:	f1 2c       	mov	r15, r1
     cf2:	00 e0       	ldi	r16, 0x00	; 0
     cf4:	10 e0       	ldi	r17, 0x00	; 0
     cf6:	ce 5f       	subi	r28, 0xFE	; 254
     cf8:	de 4f       	sbci	r29, 0xFE	; 254
     cfa:	28 81       	ld	r18, Y
     cfc:	c2 50       	subi	r28, 0x02	; 2
     cfe:	d1 40       	sbci	r29, 0x01	; 1
     d00:	38 2d       	mov	r19, r8
     d02:	47 2d       	mov	r20, r7
     d04:	56 2d       	mov	r21, r6
     d06:	65 2d       	mov	r22, r5
     d08:	74 2d       	mov	r23, r4
     d0a:	83 2d       	mov	r24, r3
     d0c:	92 2d       	mov	r25, r2
     d0e:	95 d5       	rcall	.+2858   	; 0x183a <__moddi3>
     d10:	cd 5f       	subi	r28, 0xFD	; 253
     d12:	de 4f       	sbci	r29, 0xFE	; 254
     d14:	28 83       	st	Y, r18
     d16:	c3 50       	subi	r28, 0x03	; 3
     d18:	d1 40       	sbci	r29, 0x01	; 1

			Value = Value / 10;
     d1a:	ce 5f       	subi	r28, 0xFE	; 254
     d1c:	de 4f       	sbci	r29, 0xFE	; 254
     d1e:	28 81       	ld	r18, Y
     d20:	c2 50       	subi	r28, 0x02	; 2
     d22:	d1 40       	sbci	r29, 0x01	; 1
     d24:	38 2d       	mov	r19, r8
     d26:	47 2d       	mov	r20, r7
     d28:	56 2d       	mov	r21, r6
     d2a:	65 2d       	mov	r22, r5
     d2c:	74 2d       	mov	r23, r4
     d2e:	83 2d       	mov	r24, r3
     d30:	92 2d       	mov	r25, r2
     d32:	85 d5       	rcall	.+2826   	; 0x183e <__divdi3>
     d34:	ce 5f       	subi	r28, 0xFE	; 254
     d36:	de 4f       	sbci	r29, 0xFE	; 254
     d38:	28 83       	st	Y, r18
     d3a:	c2 50       	subi	r28, 0x02	; 2
     d3c:	d1 40       	sbci	r29, 0x01	; 1
     d3e:	83 2e       	mov	r8, r19
     d40:	74 2e       	mov	r7, r20
     d42:	65 2e       	mov	r6, r21
     d44:	56 2e       	mov	r5, r22
     d46:	47 2e       	mov	r4, r23
     d48:	38 2e       	mov	r3, r24
     d4a:	29 2e       	mov	r2, r25

		}
	
		TransmitChar[Count] = TransmitChar[Count] + ASCII_DECIMAL_CONVERSION;
     d4c:	e1 e0       	ldi	r30, 0x01	; 1
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	ec 0f       	add	r30, r28
     d52:	fd 1f       	adc	r31, r29
     d54:	e9 0d       	add	r30, r9
     d56:	f1 1d       	adc	r31, r1
     d58:	cd 5f       	subi	r28, 0xFD	; 253
     d5a:	de 4f       	sbci	r29, 0xFE	; 254
     d5c:	a8 81       	ld	r26, Y
     d5e:	c3 50       	subi	r28, 0x03	; 3
     d60:	d1 40       	sbci	r29, 0x01	; 1
     d62:	a0 5d       	subi	r26, 0xD0	; 208
     d64:	a0 83       	st	Z, r26
		
		Count++;
     d66:	93 94       	inc	r9

	} while (Value != 0);
     d68:	a0 e0       	ldi	r26, 0x00	; 0
     d6a:	55 d6       	rcall	.+3242   	; 0x1a16 <__cmpdi2_s8>
     d6c:	09 f0       	breq	.+2      	; 0xd70 <SendSignedDecimalValue+0x168>
     d6e:	a0 cf       	rjmp	.-192    	; 0xcb0 <SendSignedDecimalValue+0xa8>

	while (Count != 0)
     d70:	99 20       	and	r9, r9
     d72:	91 f0       	breq	.+36     	; 0xd98 <SendSignedDecimalValue+0x190>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
     d74:	69 2d       	mov	r22, r9
     d76:	70 e0       	ldi	r23, 0x00	; 0
     d78:	61 50       	subi	r22, 0x01	; 1
     d7a:	71 09       	sbc	r23, r1
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	8c 0f       	add	r24, r28
     d82:	9d 1f       	adc	r25, r29
     d84:	68 0f       	add	r22, r24
     d86:	79 1f       	adc	r23, r25
     d88:	21 e0       	ldi	r18, 0x01	; 1
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	40 e0       	ldi	r20, 0x00	; 0
     d8e:	50 e0       	ldi	r21, 0x00	; 0
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	71 d4       	rcall	.+2274   	; 0x1676 <UARTTransmitSync>
		
		Count--;
     d94:	9a 94       	dec	r9
		
		Count++;

	} while (Value != 0);

	while (Count != 0)
     d96:	71 f7       	brne	.-36     	; 0xd74 <SendSignedDecimalValue+0x16c>
	{
		UARTTransmitSync(UART_ZERO, (PVOID) &TransmitChar[Count - 1], 1);
		
		Count--;
	}
}
     d98:	cd 5f       	subi	r28, 0xFD	; 253
     d9a:	de 4f       	sbci	r29, 0xFE	; 254
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	1f 91       	pop	r17
     dac:	0f 91       	pop	r16
     dae:	ff 90       	pop	r15
     db0:	ef 90       	pop	r14
     db2:	df 90       	pop	r13
     db4:	cf 90       	pop	r12
     db6:	bf 90       	pop	r11
     db8:	af 90       	pop	r10
     dba:	9f 90       	pop	r9
     dbc:	8f 90       	pop	r8
     dbe:	7f 90       	pop	r7
     dc0:	6f 90       	pop	r6
     dc2:	5f 90       	pop	r5
     dc4:	4f 90       	pop	r4
     dc6:	3f 90       	pop	r3
     dc8:	2f 90       	pop	r2
     dca:	08 95       	ret

00000dcc <SendTrace>:
	}
}

void
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{
     dcc:	3f 92       	push	r3
     dce:	4f 92       	push	r4
     dd0:	5f 92       	push	r5
     dd2:	6f 92       	push	r6
     dd4:	7f 92       	push	r7
     dd6:	8f 92       	push	r8
     dd8:	9f 92       	push	r9
     dda:	af 92       	push	r10
     ddc:	bf 92       	push	r11
     dde:	cf 92       	push	r12
     de0:	df 92       	push	r13
     de2:	ef 92       	push	r14
     de4:	ff 92       	push	r15
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	1f 92       	push	r1
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	0e 89       	ldd	r16, Y+22	; 0x16
     df6:	1f 89       	ldd	r17, Y+23	; 0x17
	
	char Character;

	va_list ArgList;

	if (!gTraceInitialized || !(TraceLevel & gTraceLevel))
     df8:	80 91 dc 03 	lds	r24, 0x03DC
     dfc:	88 23       	and	r24, r24
     dfe:	09 f4       	brne	.+2      	; 0xe02 <SendTrace+0x36>
     e00:	1b c1       	rjmp	.+566    	; 0x1038 <SendTrace+0x26c>
     e02:	80 91 e0 03 	lds	r24, 0x03E0
     e06:	9d 89       	ldd	r25, Y+21	; 0x15
     e08:	89 23       	and	r24, r25
     e0a:	09 f4       	brne	.+2      	; 0xe0e <SendTrace+0x42>
     e0c:	15 c1       	rjmp	.+554    	; 0x1038 <SendTrace+0x26c>
	{
		return;
	}

	va_start(ArgList, String);
     e0e:	7e 01       	movw	r14, r28
     e10:	28 e1       	ldi	r18, 0x18	; 24
     e12:	e2 0e       	add	r14, r18
     e14:	f1 1c       	adc	r15, r1

	while (*String != '\0')
     e16:	f8 01       	movw	r30, r16
     e18:	20 81       	ld	r18, Z
     e1a:	22 23       	and	r18, r18
     e1c:	09 f4       	brne	.+2      	; 0xe20 <SendTrace+0x54>
     e1e:	0c c1       	rjmp	.+536    	; 0x1038 <SendTrace+0x26c>
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{

	bool IsLong = FALSE;
	
	bool IsLongLong = FALSE;
     e20:	41 2c       	mov	r4, r1

void
SendTrace(TRACE_LEVEL TraceLevel, const char *String, ...)
{

	bool IsLong = FALSE;
     e22:	d1 2c       	mov	r13, r1
						IsLong = FALSE;
					}
					
					SendDoubleValue(va_arg(ArgList, double));
					
					break;
     e24:	51 2c       	mov	r5, r1
						
						IsLong = FALSE;
					}
					else
					{
						IsLong = TRUE;
     e26:	33 24       	eor	r3, r3
     e28:	33 94       	inc	r3
	va_start(ArgList, String);

	while (*String != '\0')
	{

		if (*String == '%' || IsLong || IsLongLong)
     e2a:	25 32       	cpi	r18, 0x25	; 37
     e2c:	29 f0       	breq	.+10     	; 0xe38 <SendTrace+0x6c>
     e2e:	d1 10       	cpse	r13, r1
     e30:	05 c0       	rjmp	.+10     	; 0xe3c <SendTrace+0x70>
     e32:	41 10       	cpse	r4, r1
     e34:	03 c0       	rjmp	.+6      	; 0xe3c <SendTrace+0x70>
     e36:	ef c0       	rjmp	.+478    	; 0x1016 <SendTrace+0x24a>
		{

			if (*String == '%')
			{
				String++;
     e38:	0f 5f       	subi	r16, 0xFF	; 255
     e3a:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			switch (*String)
     e3c:	f8 01       	movw	r30, r16
     e3e:	80 81       	ld	r24, Z
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	fc 01       	movw	r30, r24
     e44:	e3 56       	subi	r30, 0x63	; 99
     e46:	f1 09       	sbc	r31, r1
     e48:	e6 31       	cpi	r30, 0x16	; 22
     e4a:	f1 05       	cpc	r31, r1
     e4c:	08 f0       	brcs	.+2      	; 0xe50 <SendTrace+0x84>
     e4e:	ec c0       	rjmp	.+472    	; 0x1028 <SendTrace+0x25c>
     e50:	ea 5b       	subi	r30, 0xBA	; 186
     e52:	ff 4f       	sbci	r31, 0xFF	; 255
     e54:	ec c4       	rjmp	.+2520   	; 0x182e <__tablejump2__>
			{
				case 'c':
				{

					Character = va_arg(ArgList, int);
     e56:	57 01       	movw	r10, r14
     e58:	f2 e0       	ldi	r31, 0x02	; 2
     e5a:	af 0e       	add	r10, r31
     e5c:	b1 1c       	adc	r11, r1
     e5e:	f7 01       	movw	r30, r14
     e60:	80 81       	ld	r24, Z
     e62:	89 83       	std	Y+1, r24	; 0x01
					
					UARTTransmitSync(UART_ZERO, (PVOID) &Character, 1);
     e64:	21 e0       	ldi	r18, 0x01	; 1
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	40 e0       	ldi	r20, 0x00	; 0
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	be 01       	movw	r22, r28
     e6e:	6f 5f       	subi	r22, 0xFF	; 255
     e70:	7f 4f       	sbci	r23, 0xFF	; 255
     e72:	85 2d       	mov	r24, r5
     e74:	00 d4       	rcall	.+2048   	; 0x1676 <UARTTransmitSync>
			switch (*String)
			{
				case 'c':
				{

					Character = va_arg(ArgList, int);
     e76:	75 01       	movw	r14, r10
					
					UARTTransmitSync(UART_ZERO, (PVOID) &Character, 1);

					break;
     e78:	d7 c0       	rjmp	.+430    	; 0x1028 <SendTrace+0x25c>

				}
				case 'd':
				{

					if (IsLong)
     e7a:	dd 20       	and	r13, r13
     e7c:	d9 f0       	breq	.+54     	; 0xeb4 <SendTrace+0xe8>
					{

						SendSignedDecimalValue(va_arg(ArgList, long));
     e7e:	67 01       	movw	r12, r14
     e80:	f4 e0       	ldi	r31, 0x04	; 4
     e82:	cf 0e       	add	r12, r31
     e84:	d1 1c       	adc	r13, r1
     e86:	f7 01       	movw	r30, r14
     e88:	80 81       	ld	r24, Z
     e8a:	91 81       	ldd	r25, Z+1	; 0x01
     e8c:	a2 81       	ldd	r26, Z+2	; 0x02
     e8e:	b3 81       	ldd	r27, Z+3	; 0x03
     e90:	4c 01       	movw	r8, r24
     e92:	5d 01       	movw	r10, r26
     e94:	bb 0c       	add	r11, r11
     e96:	88 08       	sbc	r8, r8
     e98:	98 2c       	mov	r9, r8
     e9a:	54 01       	movw	r10, r8
     e9c:	28 2f       	mov	r18, r24
     e9e:	39 2f       	mov	r19, r25
     ea0:	4a 2f       	mov	r20, r26
     ea2:	5b 2f       	mov	r21, r27
     ea4:	68 2d       	mov	r22, r8
     ea6:	78 2d       	mov	r23, r8
     ea8:	88 2d       	mov	r24, r8
     eaa:	98 2d       	mov	r25, r8
     eac:	ad de       	rcall	.-678    	; 0xc08 <SendSignedDecimalValue>
     eae:	76 01       	movw	r14, r12

						IsLong = FALSE;
     eb0:	d5 2c       	mov	r13, r5
     eb2:	ba c0       	rjmp	.+372    	; 0x1028 <SendTrace+0x25c>

					}
					else if (IsLongLong)
     eb4:	44 20       	and	r4, r4
     eb6:	89 f0       	breq	.+34     	; 0xeda <SendTrace+0x10e>
					{
						SendSignedDecimalValue(va_arg(ArgList, long long));
     eb8:	57 01       	movw	r10, r14
     eba:	f8 e0       	ldi	r31, 0x08	; 8
     ebc:	af 0e       	add	r10, r31
     ebe:	b1 1c       	adc	r11, r1
     ec0:	f7 01       	movw	r30, r14
     ec2:	20 81       	ld	r18, Z
     ec4:	31 81       	ldd	r19, Z+1	; 0x01
     ec6:	42 81       	ldd	r20, Z+2	; 0x02
     ec8:	53 81       	ldd	r21, Z+3	; 0x03
     eca:	64 81       	ldd	r22, Z+4	; 0x04
     ecc:	75 81       	ldd	r23, Z+5	; 0x05
     ece:	86 81       	ldd	r24, Z+6	; 0x06
     ed0:	97 81       	ldd	r25, Z+7	; 0x07
     ed2:	9a de       	rcall	.-716    	; 0xc08 <SendSignedDecimalValue>
     ed4:	75 01       	movw	r14, r10

						IsLongLong = FALSE;
     ed6:	45 2c       	mov	r4, r5
     ed8:	a7 c0       	rjmp	.+334    	; 0x1028 <SendTrace+0x25c>
					}
					else
					{

						SendSignedDecimalValue(va_arg(ArgList, int));
     eda:	57 01       	movw	r10, r14
     edc:	f2 e0       	ldi	r31, 0x02	; 2
     ede:	af 0e       	add	r10, r31
     ee0:	b1 1c       	adc	r11, r1
     ee2:	f7 01       	movw	r30, r14
     ee4:	31 81       	ldd	r19, Z+1	; 0x01
     ee6:	20 81       	ld	r18, Z
     ee8:	93 2f       	mov	r25, r19
     eea:	99 0f       	add	r25, r25
     eec:	99 0b       	sbc	r25, r25
     eee:	49 2f       	mov	r20, r25
     ef0:	59 2f       	mov	r21, r25
     ef2:	69 2f       	mov	r22, r25
     ef4:	79 2f       	mov	r23, r25
     ef6:	89 2f       	mov	r24, r25
     ef8:	87 de       	rcall	.-754    	; 0xc08 <SendSignedDecimalValue>
     efa:	75 01       	movw	r14, r10
     efc:	95 c0       	rjmp	.+298    	; 0x1028 <SendTrace+0x25c>
					break;
				}
				case 'u':
				{

					if(IsLong)
     efe:	dd 20       	and	r13, r13
     f00:	b9 f0       	breq	.+46     	; 0xf30 <SendTrace+0x164>
					{

						SendDecimalValue(va_arg(ArgList, unsigned long));
     f02:	37 01       	movw	r6, r14
     f04:	f4 e0       	ldi	r31, 0x04	; 4
     f06:	6f 0e       	add	r6, r31
     f08:	71 1c       	adc	r7, r1
     f0a:	f7 01       	movw	r30, r14
     f0c:	80 81       	ld	r24, Z
     f0e:	91 81       	ldd	r25, Z+1	; 0x01
     f10:	a2 81       	ldd	r26, Z+2	; 0x02
     f12:	b3 81       	ldd	r27, Z+3	; 0x03
     f14:	4c 01       	movw	r8, r24
     f16:	5d 01       	movw	r10, r26
     f18:	28 2f       	mov	r18, r24
     f1a:	39 2d       	mov	r19, r9
     f1c:	4a 2d       	mov	r20, r10
     f1e:	5b 2d       	mov	r21, r11
     f20:	65 2d       	mov	r22, r5
     f22:	75 2d       	mov	r23, r5
     f24:	85 2d       	mov	r24, r5
     f26:	95 2d       	mov	r25, r5
     f28:	18 dd       	rcall	.-1488   	; 0x95a <SendDecimalValue>
     f2a:	73 01       	movw	r14, r6
						
						IsLong = FALSE;
     f2c:	d5 2c       	mov	r13, r5
     f2e:	7c c0       	rjmp	.+248    	; 0x1028 <SendTrace+0x25c>
					
					}
					else if(IsLongLong)
     f30:	44 20       	and	r4, r4
     f32:	89 f0       	breq	.+34     	; 0xf56 <SendTrace+0x18a>
					{
						SendDecimalValue(va_arg(ArgList, unsigned long long));
     f34:	57 01       	movw	r10, r14
     f36:	f8 e0       	ldi	r31, 0x08	; 8
     f38:	af 0e       	add	r10, r31
     f3a:	b1 1c       	adc	r11, r1
     f3c:	f7 01       	movw	r30, r14
     f3e:	20 81       	ld	r18, Z
     f40:	31 81       	ldd	r19, Z+1	; 0x01
     f42:	42 81       	ldd	r20, Z+2	; 0x02
     f44:	53 81       	ldd	r21, Z+3	; 0x03
     f46:	64 81       	ldd	r22, Z+4	; 0x04
     f48:	75 81       	ldd	r23, Z+5	; 0x05
     f4a:	86 81       	ldd	r24, Z+6	; 0x06
     f4c:	97 81       	ldd	r25, Z+7	; 0x07
     f4e:	05 dd       	rcall	.-1526   	; 0x95a <SendDecimalValue>
     f50:	75 01       	movw	r14, r10
						
						IsLongLong = FALSE;
     f52:	45 2c       	mov	r4, r5
     f54:	69 c0       	rjmp	.+210    	; 0x1028 <SendTrace+0x25c>
					}
					else
					{

						SendDecimalValue(va_arg(ArgList, unsigned int));
     f56:	f7 01       	movw	r30, r14
     f58:	40 81       	ld	r20, Z
     f5a:	51 81       	ldd	r21, Z+1	; 0x01
     f5c:	f2 e0       	ldi	r31, 0x02	; 2
     f5e:	ef 0e       	add	r14, r31
     f60:	f1 1c       	adc	r15, r1
     f62:	24 2f       	mov	r18, r20
     f64:	35 2f       	mov	r19, r21
     f66:	45 2d       	mov	r20, r5
     f68:	55 2d       	mov	r21, r5
     f6a:	65 2d       	mov	r22, r5
     f6c:	75 2d       	mov	r23, r5
     f6e:	85 2d       	mov	r24, r5
     f70:	95 2d       	mov	r25, r5
     f72:	f3 dc       	rcall	.-1562   	; 0x95a <SendDecimalValue>
     f74:	59 c0       	rjmp	.+178    	; 0x1028 <SendTrace+0x25c>
					break;
				}
				case 'x':
				{

					if (IsLong)
     f76:	dd 20       	and	r13, r13
     f78:	a9 f0       	breq	.+42     	; 0xfa4 <SendTrace+0x1d8>
					{

						SendHexValue(va_arg(ArgList, unsigned long));
     f7a:	f7 01       	movw	r30, r14
     f7c:	80 81       	ld	r24, Z
     f7e:	91 81       	ldd	r25, Z+1	; 0x01
     f80:	a2 81       	ldd	r26, Z+2	; 0x02
     f82:	b3 81       	ldd	r27, Z+3	; 0x03
     f84:	24 e0       	ldi	r18, 0x04	; 4
     f86:	e2 0e       	add	r14, r18
     f88:	f1 1c       	adc	r15, r1
     f8a:	3c 01       	movw	r6, r24
     f8c:	4d 01       	movw	r8, r26
     f8e:	28 2f       	mov	r18, r24
     f90:	37 2d       	mov	r19, r7
     f92:	48 2d       	mov	r20, r8
     f94:	59 2d       	mov	r21, r9
     f96:	65 2d       	mov	r22, r5
     f98:	75 2d       	mov	r23, r5
     f9a:	85 2d       	mov	r24, r5
     f9c:	95 2d       	mov	r25, r5
     f9e:	3a dc       	rcall	.-1932   	; 0x814 <SendHexValue>

						IsLong = FALSE;
     fa0:	d5 2c       	mov	r13, r5
     fa2:	42 c0       	rjmp	.+132    	; 0x1028 <SendTrace+0x25c>

					}
					else if (IsLongLong)
     fa4:	44 20       	and	r4, r4
     fa6:	79 f0       	breq	.+30     	; 0xfc6 <SendTrace+0x1fa>
					{
						SendHexValue(va_arg(ArgList, unsigned long long));
     fa8:	f7 01       	movw	r30, r14
     faa:	20 81       	ld	r18, Z
     fac:	88 e0       	ldi	r24, 0x08	; 8
     fae:	e8 0e       	add	r14, r24
     fb0:	f1 1c       	adc	r15, r1
     fb2:	31 81       	ldd	r19, Z+1	; 0x01
     fb4:	42 81       	ldd	r20, Z+2	; 0x02
     fb6:	53 81       	ldd	r21, Z+3	; 0x03
     fb8:	64 81       	ldd	r22, Z+4	; 0x04
     fba:	75 81       	ldd	r23, Z+5	; 0x05
     fbc:	86 81       	ldd	r24, Z+6	; 0x06
     fbe:	97 81       	ldd	r25, Z+7	; 0x07
     fc0:	29 dc       	rcall	.-1966   	; 0x814 <SendHexValue>
						
						IsLongLong = FALSE;
     fc2:	45 2c       	mov	r4, r5
     fc4:	31 c0       	rjmp	.+98     	; 0x1028 <SendTrace+0x25c>
					}
					else
					{

						SendHexValue(va_arg(ArgList, unsigned int));
     fc6:	f7 01       	movw	r30, r14
     fc8:	40 81       	ld	r20, Z
     fca:	51 81       	ldd	r21, Z+1	; 0x01
     fcc:	e2 e0       	ldi	r30, 0x02	; 2
     fce:	ee 0e       	add	r14, r30
     fd0:	f1 1c       	adc	r15, r1
     fd2:	24 2f       	mov	r18, r20
     fd4:	35 2f       	mov	r19, r21
     fd6:	45 2d       	mov	r20, r5
     fd8:	55 2d       	mov	r21, r5
     fda:	65 2d       	mov	r22, r5
     fdc:	75 2d       	mov	r23, r5
     fde:	85 2d       	mov	r24, r5
     fe0:	95 2d       	mov	r25, r5
     fe2:	18 dc       	rcall	.-2000   	; 0x814 <SendHexValue>
     fe4:	21 c0       	rjmp	.+66     	; 0x1028 <SendTrace+0x25c>
					break;
				}
				case 'l':
				{

					if (IsLong)
     fe6:	dd 20       	and	r13, r13
     fe8:	f1 f0       	breq	.+60     	; 0x1026 <SendTrace+0x25a>
					{
						IsLongLong = TRUE;
     fea:	43 2c       	mov	r4, r3
						
						IsLong = FALSE;
     fec:	d5 2c       	mov	r13, r5
     fee:	1c c0       	rjmp	.+56     	; 0x1028 <SendTrace+0x25c>
					break;
				}
				case 's':
				{
					
					SendStringValue(va_arg(ArgList, char *)); 
     ff0:	f7 01       	movw	r30, r14
     ff2:	80 81       	ld	r24, Z
     ff4:	91 81       	ldd	r25, Z+1	; 0x01
     ff6:	f2 e0       	ldi	r31, 0x02	; 2
     ff8:	ef 0e       	add	r14, r31
     ffa:	f1 1c       	adc	r15, r1
     ffc:	fd db       	rcall	.-2054   	; 0x7f8 <SendStringValue>

					break;
     ffe:	14 c0       	rjmp	.+40     	; 0x1028 <SendTrace+0x25c>
					if(IsLong)
					{
						IsLong = FALSE;
					}
					
					SendDoubleValue(va_arg(ArgList, double));
    1000:	f7 01       	movw	r30, r14
    1002:	60 81       	ld	r22, Z
    1004:	71 81       	ldd	r23, Z+1	; 0x01
    1006:	82 81       	ldd	r24, Z+2	; 0x02
    1008:	93 81       	ldd	r25, Z+3	; 0x03
    100a:	24 e0       	ldi	r18, 0x04	; 4
    100c:	e2 0e       	add	r14, r18
    100e:	f1 1c       	adc	r15, r1
    1010:	5b dd       	rcall	.-1354   	; 0xac8 <SendDoubleValue>
					
					break;
    1012:	d5 2c       	mov	r13, r5
    1014:	09 c0       	rjmp	.+18     	; 0x1028 <SendTrace+0x25c>

		}
		else
		{

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
    1016:	21 e0       	ldi	r18, 0x01	; 1
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	40 e0       	ldi	r20, 0x00	; 0
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	b8 01       	movw	r22, r16
    1020:	85 2d       	mov	r24, r5
    1022:	29 d3       	rcall	.+1618   	; 0x1676 <UARTTransmitSync>
    1024:	01 c0       	rjmp	.+2      	; 0x1028 <SendTrace+0x25c>
						
						IsLong = FALSE;
					}
					else
					{
						IsLong = TRUE;
    1026:	d3 2c       	mov	r13, r3

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
				
		}

		String++;
    1028:	c8 01       	movw	r24, r16
    102a:	01 96       	adiw	r24, 0x01	; 1
		return;
	}

	va_start(ArgList, String);

	while (*String != '\0')
    102c:	f8 01       	movw	r30, r16
    102e:	21 81       	ldd	r18, Z+1	; 0x01
    1030:	22 23       	and	r18, r18
    1032:	11 f0       	breq	.+4      	; 0x1038 <SendTrace+0x26c>

			UARTTransmitSync(UART_ZERO, (PVOID) String, 1);
				
		}

		String++;
    1034:	8c 01       	movw	r16, r24
    1036:	f9 ce       	rjmp	.-526    	; 0xe2a <SendTrace+0x5e>
		
	}
	
	va_end(ArgList);
	
}
    1038:	0f 90       	pop	r0
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	1f 91       	pop	r17
    1040:	0f 91       	pop	r16
    1042:	ff 90       	pop	r15
    1044:	ef 90       	pop	r14
    1046:	df 90       	pop	r13
    1048:	cf 90       	pop	r12
    104a:	bf 90       	pop	r11
    104c:	af 90       	pop	r10
    104e:	9f 90       	pop	r9
    1050:	8f 90       	pop	r8
    1052:	7f 90       	pop	r7
    1054:	6f 90       	pop	r6
    1056:	5f 90       	pop	r5
    1058:	4f 90       	pop	r4
    105a:	3f 90       	pop	r3
    105c:	08 95       	ret

0000105e <__subsf3>:
    105e:	50 58       	subi	r21, 0x80	; 128

00001060 <__addsf3>:
    1060:	bb 27       	eor	r27, r27
    1062:	aa 27       	eor	r26, r26
    1064:	0e d0       	rcall	.+28     	; 0x1082 <__addsf3x>
    1066:	94 c1       	rjmp	.+808    	; 0x1390 <__fp_round>
    1068:	85 d1       	rcall	.+778    	; 0x1374 <__fp_pscA>
    106a:	30 f0       	brcs	.+12     	; 0x1078 <__addsf3+0x18>
    106c:	8a d1       	rcall	.+788    	; 0x1382 <__fp_pscB>
    106e:	20 f0       	brcs	.+8      	; 0x1078 <__addsf3+0x18>
    1070:	31 f4       	brne	.+12     	; 0x107e <__addsf3+0x1e>
    1072:	9f 3f       	cpi	r25, 0xFF	; 255
    1074:	11 f4       	brne	.+4      	; 0x107a <__addsf3+0x1a>
    1076:	1e f4       	brtc	.+6      	; 0x107e <__addsf3+0x1e>
    1078:	6a c1       	rjmp	.+724    	; 0x134e <__fp_nan>
    107a:	0e f4       	brtc	.+2      	; 0x107e <__addsf3+0x1e>
    107c:	e0 95       	com	r30
    107e:	e7 fb       	bst	r30, 7
    1080:	60 c1       	rjmp	.+704    	; 0x1342 <__fp_inf>

00001082 <__addsf3x>:
    1082:	e9 2f       	mov	r30, r25
    1084:	96 d1       	rcall	.+812    	; 0x13b2 <__fp_split3>
    1086:	80 f3       	brcs	.-32     	; 0x1068 <__addsf3+0x8>
    1088:	ba 17       	cp	r27, r26
    108a:	62 07       	cpc	r22, r18
    108c:	73 07       	cpc	r23, r19
    108e:	84 07       	cpc	r24, r20
    1090:	95 07       	cpc	r25, r21
    1092:	18 f0       	brcs	.+6      	; 0x109a <__addsf3x+0x18>
    1094:	71 f4       	brne	.+28     	; 0x10b2 <__addsf3x+0x30>
    1096:	9e f5       	brtc	.+102    	; 0x10fe <__addsf3x+0x7c>
    1098:	ae c1       	rjmp	.+860    	; 0x13f6 <__fp_zero>
    109a:	0e f4       	brtc	.+2      	; 0x109e <__addsf3x+0x1c>
    109c:	e0 95       	com	r30
    109e:	0b 2e       	mov	r0, r27
    10a0:	ba 2f       	mov	r27, r26
    10a2:	a0 2d       	mov	r26, r0
    10a4:	0b 01       	movw	r0, r22
    10a6:	b9 01       	movw	r22, r18
    10a8:	90 01       	movw	r18, r0
    10aa:	0c 01       	movw	r0, r24
    10ac:	ca 01       	movw	r24, r20
    10ae:	a0 01       	movw	r20, r0
    10b0:	11 24       	eor	r1, r1
    10b2:	ff 27       	eor	r31, r31
    10b4:	59 1b       	sub	r21, r25
    10b6:	99 f0       	breq	.+38     	; 0x10de <__addsf3x+0x5c>
    10b8:	59 3f       	cpi	r21, 0xF9	; 249
    10ba:	50 f4       	brcc	.+20     	; 0x10d0 <__addsf3x+0x4e>
    10bc:	50 3e       	cpi	r21, 0xE0	; 224
    10be:	68 f1       	brcs	.+90     	; 0x111a <__addsf3x+0x98>
    10c0:	1a 16       	cp	r1, r26
    10c2:	f0 40       	sbci	r31, 0x00	; 0
    10c4:	a2 2f       	mov	r26, r18
    10c6:	23 2f       	mov	r18, r19
    10c8:	34 2f       	mov	r19, r20
    10ca:	44 27       	eor	r20, r20
    10cc:	58 5f       	subi	r21, 0xF8	; 248
    10ce:	f3 cf       	rjmp	.-26     	; 0x10b6 <__addsf3x+0x34>
    10d0:	46 95       	lsr	r20
    10d2:	37 95       	ror	r19
    10d4:	27 95       	ror	r18
    10d6:	a7 95       	ror	r26
    10d8:	f0 40       	sbci	r31, 0x00	; 0
    10da:	53 95       	inc	r21
    10dc:	c9 f7       	brne	.-14     	; 0x10d0 <__addsf3x+0x4e>
    10de:	7e f4       	brtc	.+30     	; 0x10fe <__addsf3x+0x7c>
    10e0:	1f 16       	cp	r1, r31
    10e2:	ba 0b       	sbc	r27, r26
    10e4:	62 0b       	sbc	r22, r18
    10e6:	73 0b       	sbc	r23, r19
    10e8:	84 0b       	sbc	r24, r20
    10ea:	ba f0       	brmi	.+46     	; 0x111a <__addsf3x+0x98>
    10ec:	91 50       	subi	r25, 0x01	; 1
    10ee:	a1 f0       	breq	.+40     	; 0x1118 <__addsf3x+0x96>
    10f0:	ff 0f       	add	r31, r31
    10f2:	bb 1f       	adc	r27, r27
    10f4:	66 1f       	adc	r22, r22
    10f6:	77 1f       	adc	r23, r23
    10f8:	88 1f       	adc	r24, r24
    10fa:	c2 f7       	brpl	.-16     	; 0x10ec <__addsf3x+0x6a>
    10fc:	0e c0       	rjmp	.+28     	; 0x111a <__addsf3x+0x98>
    10fe:	ba 0f       	add	r27, r26
    1100:	62 1f       	adc	r22, r18
    1102:	73 1f       	adc	r23, r19
    1104:	84 1f       	adc	r24, r20
    1106:	48 f4       	brcc	.+18     	; 0x111a <__addsf3x+0x98>
    1108:	87 95       	ror	r24
    110a:	77 95       	ror	r23
    110c:	67 95       	ror	r22
    110e:	b7 95       	ror	r27
    1110:	f7 95       	ror	r31
    1112:	9e 3f       	cpi	r25, 0xFE	; 254
    1114:	08 f0       	brcs	.+2      	; 0x1118 <__addsf3x+0x96>
    1116:	b3 cf       	rjmp	.-154    	; 0x107e <__addsf3+0x1e>
    1118:	93 95       	inc	r25
    111a:	88 0f       	add	r24, r24
    111c:	08 f0       	brcs	.+2      	; 0x1120 <__addsf3x+0x9e>
    111e:	99 27       	eor	r25, r25
    1120:	ee 0f       	add	r30, r30
    1122:	97 95       	ror	r25
    1124:	87 95       	ror	r24
    1126:	08 95       	ret

00001128 <__cmpsf2>:
    1128:	e8 d0       	rcall	.+464    	; 0x12fa <__fp_cmp>
    112a:	08 f4       	brcc	.+2      	; 0x112e <__cmpsf2+0x6>
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	08 95       	ret

00001130 <__fixsfdi>:
    1130:	be e3       	ldi	r27, 0x3E	; 62
    1132:	04 d0       	rcall	.+8      	; 0x113c <__fixunssfdi+0x2>
    1134:	08 f4       	brcc	.+2      	; 0x1138 <__fixsfdi+0x8>
    1136:	90 e8       	ldi	r25, 0x80	; 128
    1138:	08 95       	ret

0000113a <__fixunssfdi>:
    113a:	bf e3       	ldi	r27, 0x3F	; 63
    113c:	22 27       	eor	r18, r18
    113e:	33 27       	eor	r19, r19
    1140:	a9 01       	movw	r20, r18
    1142:	3f d1       	rcall	.+638    	; 0x13c2 <__fp_splitA>
    1144:	58 f1       	brcs	.+86     	; 0x119c <__fixunssfdi+0x62>
    1146:	9f 57       	subi	r25, 0x7F	; 127
    1148:	40 f1       	brcs	.+80     	; 0x119a <__fixunssfdi+0x60>
    114a:	b9 17       	cp	r27, r25
    114c:	38 f1       	brcs	.+78     	; 0x119c <__fixunssfdi+0x62>
    114e:	bf e3       	ldi	r27, 0x3F	; 63
    1150:	b9 1b       	sub	r27, r25
    1152:	99 27       	eor	r25, r25
    1154:	b8 50       	subi	r27, 0x08	; 8
    1156:	3a f4       	brpl	.+14     	; 0x1166 <__fixunssfdi+0x2c>
    1158:	66 0f       	add	r22, r22
    115a:	77 1f       	adc	r23, r23
    115c:	88 1f       	adc	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	b3 95       	inc	r27
    1162:	d2 f3       	brmi	.-12     	; 0x1158 <__fixunssfdi+0x1e>
    1164:	16 c0       	rjmp	.+44     	; 0x1192 <__fixunssfdi+0x58>
    1166:	b8 50       	subi	r27, 0x08	; 8
    1168:	4a f0       	brmi	.+18     	; 0x117c <__fixunssfdi+0x42>
    116a:	23 2f       	mov	r18, r19
    116c:	34 2f       	mov	r19, r20
    116e:	45 2f       	mov	r20, r21
    1170:	56 2f       	mov	r21, r22
    1172:	67 2f       	mov	r22, r23
    1174:	78 2f       	mov	r23, r24
    1176:	88 27       	eor	r24, r24
    1178:	b8 50       	subi	r27, 0x08	; 8
    117a:	ba f7       	brpl	.-18     	; 0x116a <__fixunssfdi+0x30>
    117c:	b8 5f       	subi	r27, 0xF8	; 248
    117e:	49 f0       	breq	.+18     	; 0x1192 <__fixunssfdi+0x58>
    1180:	86 95       	lsr	r24
    1182:	77 95       	ror	r23
    1184:	67 95       	ror	r22
    1186:	57 95       	ror	r21
    1188:	47 95       	ror	r20
    118a:	37 95       	ror	r19
    118c:	27 95       	ror	r18
    118e:	ba 95       	dec	r27
    1190:	b9 f7       	brne	.-18     	; 0x1180 <__fixunssfdi+0x46>
    1192:	0e f4       	brtc	.+2      	; 0x1196 <__fixunssfdi+0x5c>
    1194:	df d0       	rcall	.+446    	; 0x1354 <__fp_negdi>
    1196:	88 94       	clc
    1198:	08 95       	ret
    119a:	88 94       	clc
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	cb 01       	movw	r24, r22
    11a2:	08 95       	ret

000011a4 <__fixunssfsi>:
    11a4:	0e d1       	rcall	.+540    	; 0x13c2 <__fp_splitA>
    11a6:	88 f0       	brcs	.+34     	; 0x11ca <__fixunssfsi+0x26>
    11a8:	9f 57       	subi	r25, 0x7F	; 127
    11aa:	90 f0       	brcs	.+36     	; 0x11d0 <__fixunssfsi+0x2c>
    11ac:	b9 2f       	mov	r27, r25
    11ae:	99 27       	eor	r25, r25
    11b0:	b7 51       	subi	r27, 0x17	; 23
    11b2:	a0 f0       	brcs	.+40     	; 0x11dc <__fixunssfsi+0x38>
    11b4:	d1 f0       	breq	.+52     	; 0x11ea <__fixunssfsi+0x46>
    11b6:	66 0f       	add	r22, r22
    11b8:	77 1f       	adc	r23, r23
    11ba:	88 1f       	adc	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	1a f0       	brmi	.+6      	; 0x11c6 <__fixunssfsi+0x22>
    11c0:	ba 95       	dec	r27
    11c2:	c9 f7       	brne	.-14     	; 0x11b6 <__fixunssfsi+0x12>
    11c4:	12 c0       	rjmp	.+36     	; 0x11ea <__fixunssfsi+0x46>
    11c6:	b1 30       	cpi	r27, 0x01	; 1
    11c8:	81 f0       	breq	.+32     	; 0x11ea <__fixunssfsi+0x46>
    11ca:	15 d1       	rcall	.+554    	; 0x13f6 <__fp_zero>
    11cc:	b1 e0       	ldi	r27, 0x01	; 1
    11ce:	08 95       	ret
    11d0:	12 c1       	rjmp	.+548    	; 0x13f6 <__fp_zero>
    11d2:	67 2f       	mov	r22, r23
    11d4:	78 2f       	mov	r23, r24
    11d6:	88 27       	eor	r24, r24
    11d8:	b8 5f       	subi	r27, 0xF8	; 248
    11da:	39 f0       	breq	.+14     	; 0x11ea <__fixunssfsi+0x46>
    11dc:	b9 3f       	cpi	r27, 0xF9	; 249
    11de:	cc f3       	brlt	.-14     	; 0x11d2 <__fixunssfsi+0x2e>
    11e0:	86 95       	lsr	r24
    11e2:	77 95       	ror	r23
    11e4:	67 95       	ror	r22
    11e6:	b3 95       	inc	r27
    11e8:	d9 f7       	brne	.-10     	; 0x11e0 <__fixunssfsi+0x3c>
    11ea:	3e f4       	brtc	.+14     	; 0x11fa <__fixunssfsi+0x56>
    11ec:	90 95       	com	r25
    11ee:	80 95       	com	r24
    11f0:	70 95       	com	r23
    11f2:	61 95       	neg	r22
    11f4:	7f 4f       	sbci	r23, 0xFF	; 255
    11f6:	8f 4f       	sbci	r24, 0xFF	; 255
    11f8:	9f 4f       	sbci	r25, 0xFF	; 255
    11fa:	08 95       	ret

000011fc <__floatdisf>:
    11fc:	97 fb       	bst	r25, 7
    11fe:	0e f4       	brtc	.+2      	; 0x1202 <__floatdisf+0x6>
    1200:	a9 d0       	rcall	.+338    	; 0x1354 <__fp_negdi>
    1202:	3e c0       	rjmp	.+124    	; 0x1280 <__fp_di2sf>

00001204 <__floatunsisf>:
    1204:	e8 94       	clt
    1206:	09 c0       	rjmp	.+18     	; 0x121a <__floatsisf+0x12>

00001208 <__floatsisf>:
    1208:	97 fb       	bst	r25, 7
    120a:	3e f4       	brtc	.+14     	; 0x121a <__floatsisf+0x12>
    120c:	90 95       	com	r25
    120e:	80 95       	com	r24
    1210:	70 95       	com	r23
    1212:	61 95       	neg	r22
    1214:	7f 4f       	sbci	r23, 0xFF	; 255
    1216:	8f 4f       	sbci	r24, 0xFF	; 255
    1218:	9f 4f       	sbci	r25, 0xFF	; 255
    121a:	99 23       	and	r25, r25
    121c:	a9 f0       	breq	.+42     	; 0x1248 <__floatsisf+0x40>
    121e:	f9 2f       	mov	r31, r25
    1220:	96 e9       	ldi	r25, 0x96	; 150
    1222:	bb 27       	eor	r27, r27
    1224:	93 95       	inc	r25
    1226:	f6 95       	lsr	r31
    1228:	87 95       	ror	r24
    122a:	77 95       	ror	r23
    122c:	67 95       	ror	r22
    122e:	b7 95       	ror	r27
    1230:	f1 11       	cpse	r31, r1
    1232:	f8 cf       	rjmp	.-16     	; 0x1224 <__floatsisf+0x1c>
    1234:	fa f4       	brpl	.+62     	; 0x1274 <__floatsisf+0x6c>
    1236:	bb 0f       	add	r27, r27
    1238:	11 f4       	brne	.+4      	; 0x123e <__floatsisf+0x36>
    123a:	60 ff       	sbrs	r22, 0
    123c:	1b c0       	rjmp	.+54     	; 0x1274 <__floatsisf+0x6c>
    123e:	6f 5f       	subi	r22, 0xFF	; 255
    1240:	7f 4f       	sbci	r23, 0xFF	; 255
    1242:	8f 4f       	sbci	r24, 0xFF	; 255
    1244:	9f 4f       	sbci	r25, 0xFF	; 255
    1246:	16 c0       	rjmp	.+44     	; 0x1274 <__floatsisf+0x6c>
    1248:	88 23       	and	r24, r24
    124a:	11 f0       	breq	.+4      	; 0x1250 <__floatsisf+0x48>
    124c:	96 e9       	ldi	r25, 0x96	; 150
    124e:	11 c0       	rjmp	.+34     	; 0x1272 <__floatsisf+0x6a>
    1250:	77 23       	and	r23, r23
    1252:	21 f0       	breq	.+8      	; 0x125c <__floatsisf+0x54>
    1254:	9e e8       	ldi	r25, 0x8E	; 142
    1256:	87 2f       	mov	r24, r23
    1258:	76 2f       	mov	r23, r22
    125a:	05 c0       	rjmp	.+10     	; 0x1266 <__floatsisf+0x5e>
    125c:	66 23       	and	r22, r22
    125e:	71 f0       	breq	.+28     	; 0x127c <__floatsisf+0x74>
    1260:	96 e8       	ldi	r25, 0x86	; 134
    1262:	86 2f       	mov	r24, r22
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	60 e0       	ldi	r22, 0x00	; 0
    1268:	2a f0       	brmi	.+10     	; 0x1274 <__floatsisf+0x6c>
    126a:	9a 95       	dec	r25
    126c:	66 0f       	add	r22, r22
    126e:	77 1f       	adc	r23, r23
    1270:	88 1f       	adc	r24, r24
    1272:	da f7       	brpl	.-10     	; 0x126a <__floatsisf+0x62>
    1274:	88 0f       	add	r24, r24
    1276:	96 95       	lsr	r25
    1278:	87 95       	ror	r24
    127a:	97 f9       	bld	r25, 7
    127c:	08 95       	ret

0000127e <__floatundisf>:
    127e:	e8 94       	clt

00001280 <__fp_di2sf>:
    1280:	f9 2f       	mov	r31, r25
    1282:	96 eb       	ldi	r25, 0xB6	; 182
    1284:	ff 23       	and	r31, r31
    1286:	81 f0       	breq	.+32     	; 0x12a8 <__fp_di2sf+0x28>
    1288:	12 16       	cp	r1, r18
    128a:	13 06       	cpc	r1, r19
    128c:	14 06       	cpc	r1, r20
    128e:	44 0b       	sbc	r20, r20
    1290:	93 95       	inc	r25
    1292:	f6 95       	lsr	r31
    1294:	87 95       	ror	r24
    1296:	77 95       	ror	r23
    1298:	67 95       	ror	r22
    129a:	57 95       	ror	r21
    129c:	40 40       	sbci	r20, 0x00	; 0
    129e:	ff 23       	and	r31, r31
    12a0:	b9 f7       	brne	.-18     	; 0x1290 <__fp_di2sf+0x10>
    12a2:	1b c0       	rjmp	.+54     	; 0x12da <__fp_di2sf+0x5a>
    12a4:	99 27       	eor	r25, r25
    12a6:	08 95       	ret
    12a8:	88 23       	and	r24, r24
    12aa:	51 f4       	brne	.+20     	; 0x12c0 <__fp_di2sf+0x40>
    12ac:	98 50       	subi	r25, 0x08	; 8
    12ae:	d2 f7       	brpl	.-12     	; 0x12a4 <__fp_di2sf+0x24>
    12b0:	87 2b       	or	r24, r23
    12b2:	76 2f       	mov	r23, r22
    12b4:	65 2f       	mov	r22, r21
    12b6:	54 2f       	mov	r21, r20
    12b8:	43 2f       	mov	r20, r19
    12ba:	32 2f       	mov	r19, r18
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	b1 f3       	breq	.-20     	; 0x12ac <__fp_di2sf+0x2c>
    12c0:	12 16       	cp	r1, r18
    12c2:	13 06       	cpc	r1, r19
    12c4:	14 06       	cpc	r1, r20
    12c6:	44 0b       	sbc	r20, r20
    12c8:	88 23       	and	r24, r24
    12ca:	3a f0       	brmi	.+14     	; 0x12da <__fp_di2sf+0x5a>
    12cc:	9a 95       	dec	r25
    12ce:	44 0f       	add	r20, r20
    12d0:	55 1f       	adc	r21, r21
    12d2:	66 1f       	adc	r22, r22
    12d4:	77 1f       	adc	r23, r23
    12d6:	88 1f       	adc	r24, r24
    12d8:	ca f7       	brpl	.-14     	; 0x12cc <__fp_di2sf+0x4c>
    12da:	55 23       	and	r21, r21
    12dc:	4a f4       	brpl	.+18     	; 0x12f0 <__fp_di2sf+0x70>
    12de:	44 0f       	add	r20, r20
    12e0:	55 1f       	adc	r21, r21
    12e2:	11 f4       	brne	.+4      	; 0x12e8 <__fp_di2sf+0x68>
    12e4:	60 ff       	sbrs	r22, 0
    12e6:	04 c0       	rjmp	.+8      	; 0x12f0 <__fp_di2sf+0x70>
    12e8:	6f 5f       	subi	r22, 0xFF	; 255
    12ea:	7f 4f       	sbci	r23, 0xFF	; 255
    12ec:	8f 4f       	sbci	r24, 0xFF	; 255
    12ee:	9f 4f       	sbci	r25, 0xFF	; 255
    12f0:	88 0f       	add	r24, r24
    12f2:	96 95       	lsr	r25
    12f4:	87 95       	ror	r24
    12f6:	97 f9       	bld	r25, 7
    12f8:	08 95       	ret

000012fa <__fp_cmp>:
    12fa:	99 0f       	add	r25, r25
    12fc:	00 08       	sbc	r0, r0
    12fe:	55 0f       	add	r21, r21
    1300:	aa 0b       	sbc	r26, r26
    1302:	e0 e8       	ldi	r30, 0x80	; 128
    1304:	fe ef       	ldi	r31, 0xFE	; 254
    1306:	16 16       	cp	r1, r22
    1308:	17 06       	cpc	r1, r23
    130a:	e8 07       	cpc	r30, r24
    130c:	f9 07       	cpc	r31, r25
    130e:	c0 f0       	brcs	.+48     	; 0x1340 <__fp_cmp+0x46>
    1310:	12 16       	cp	r1, r18
    1312:	13 06       	cpc	r1, r19
    1314:	e4 07       	cpc	r30, r20
    1316:	f5 07       	cpc	r31, r21
    1318:	98 f0       	brcs	.+38     	; 0x1340 <__fp_cmp+0x46>
    131a:	62 1b       	sub	r22, r18
    131c:	73 0b       	sbc	r23, r19
    131e:	84 0b       	sbc	r24, r20
    1320:	95 0b       	sbc	r25, r21
    1322:	39 f4       	brne	.+14     	; 0x1332 <__fp_cmp+0x38>
    1324:	0a 26       	eor	r0, r26
    1326:	61 f0       	breq	.+24     	; 0x1340 <__fp_cmp+0x46>
    1328:	23 2b       	or	r18, r19
    132a:	24 2b       	or	r18, r20
    132c:	25 2b       	or	r18, r21
    132e:	21 f4       	brne	.+8      	; 0x1338 <__fp_cmp+0x3e>
    1330:	08 95       	ret
    1332:	0a 26       	eor	r0, r26
    1334:	09 f4       	brne	.+2      	; 0x1338 <__fp_cmp+0x3e>
    1336:	a1 40       	sbci	r26, 0x01	; 1
    1338:	a6 95       	lsr	r26
    133a:	8f ef       	ldi	r24, 0xFF	; 255
    133c:	81 1d       	adc	r24, r1
    133e:	81 1d       	adc	r24, r1
    1340:	08 95       	ret

00001342 <__fp_inf>:
    1342:	97 f9       	bld	r25, 7
    1344:	9f 67       	ori	r25, 0x7F	; 127
    1346:	80 e8       	ldi	r24, 0x80	; 128
    1348:	70 e0       	ldi	r23, 0x00	; 0
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	08 95       	ret

0000134e <__fp_nan>:
    134e:	9f ef       	ldi	r25, 0xFF	; 255
    1350:	80 ec       	ldi	r24, 0xC0	; 192
    1352:	08 95       	ret

00001354 <__fp_negdi>:
    1354:	90 95       	com	r25
    1356:	80 95       	com	r24
    1358:	70 95       	com	r23
    135a:	60 95       	com	r22
    135c:	50 95       	com	r21
    135e:	40 95       	com	r20
    1360:	30 95       	com	r19
    1362:	21 95       	neg	r18
    1364:	3f 4f       	sbci	r19, 0xFF	; 255
    1366:	4f 4f       	sbci	r20, 0xFF	; 255
    1368:	5f 4f       	sbci	r21, 0xFF	; 255
    136a:	6f 4f       	sbci	r22, 0xFF	; 255
    136c:	7f 4f       	sbci	r23, 0xFF	; 255
    136e:	8f 4f       	sbci	r24, 0xFF	; 255
    1370:	9f 4f       	sbci	r25, 0xFF	; 255
    1372:	08 95       	ret

00001374 <__fp_pscA>:
    1374:	00 24       	eor	r0, r0
    1376:	0a 94       	dec	r0
    1378:	16 16       	cp	r1, r22
    137a:	17 06       	cpc	r1, r23
    137c:	18 06       	cpc	r1, r24
    137e:	09 06       	cpc	r0, r25
    1380:	08 95       	ret

00001382 <__fp_pscB>:
    1382:	00 24       	eor	r0, r0
    1384:	0a 94       	dec	r0
    1386:	12 16       	cp	r1, r18
    1388:	13 06       	cpc	r1, r19
    138a:	14 06       	cpc	r1, r20
    138c:	05 06       	cpc	r0, r21
    138e:	08 95       	ret

00001390 <__fp_round>:
    1390:	09 2e       	mov	r0, r25
    1392:	03 94       	inc	r0
    1394:	00 0c       	add	r0, r0
    1396:	11 f4       	brne	.+4      	; 0x139c <__fp_round+0xc>
    1398:	88 23       	and	r24, r24
    139a:	52 f0       	brmi	.+20     	; 0x13b0 <__fp_round+0x20>
    139c:	bb 0f       	add	r27, r27
    139e:	40 f4       	brcc	.+16     	; 0x13b0 <__fp_round+0x20>
    13a0:	bf 2b       	or	r27, r31
    13a2:	11 f4       	brne	.+4      	; 0x13a8 <__fp_round+0x18>
    13a4:	60 ff       	sbrs	r22, 0
    13a6:	04 c0       	rjmp	.+8      	; 0x13b0 <__fp_round+0x20>
    13a8:	6f 5f       	subi	r22, 0xFF	; 255
    13aa:	7f 4f       	sbci	r23, 0xFF	; 255
    13ac:	8f 4f       	sbci	r24, 0xFF	; 255
    13ae:	9f 4f       	sbci	r25, 0xFF	; 255
    13b0:	08 95       	ret

000013b2 <__fp_split3>:
    13b2:	57 fd       	sbrc	r21, 7
    13b4:	90 58       	subi	r25, 0x80	; 128
    13b6:	44 0f       	add	r20, r20
    13b8:	55 1f       	adc	r21, r21
    13ba:	59 f0       	breq	.+22     	; 0x13d2 <__fp_splitA+0x10>
    13bc:	5f 3f       	cpi	r21, 0xFF	; 255
    13be:	71 f0       	breq	.+28     	; 0x13dc <__fp_splitA+0x1a>
    13c0:	47 95       	ror	r20

000013c2 <__fp_splitA>:
    13c2:	88 0f       	add	r24, r24
    13c4:	97 fb       	bst	r25, 7
    13c6:	99 1f       	adc	r25, r25
    13c8:	61 f0       	breq	.+24     	; 0x13e2 <__fp_splitA+0x20>
    13ca:	9f 3f       	cpi	r25, 0xFF	; 255
    13cc:	79 f0       	breq	.+30     	; 0x13ec <__fp_splitA+0x2a>
    13ce:	87 95       	ror	r24
    13d0:	08 95       	ret
    13d2:	12 16       	cp	r1, r18
    13d4:	13 06       	cpc	r1, r19
    13d6:	14 06       	cpc	r1, r20
    13d8:	55 1f       	adc	r21, r21
    13da:	f2 cf       	rjmp	.-28     	; 0x13c0 <__fp_split3+0xe>
    13dc:	46 95       	lsr	r20
    13de:	f1 df       	rcall	.-30     	; 0x13c2 <__fp_splitA>
    13e0:	08 c0       	rjmp	.+16     	; 0x13f2 <__fp_splitA+0x30>
    13e2:	16 16       	cp	r1, r22
    13e4:	17 06       	cpc	r1, r23
    13e6:	18 06       	cpc	r1, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	f1 cf       	rjmp	.-30     	; 0x13ce <__fp_splitA+0xc>
    13ec:	86 95       	lsr	r24
    13ee:	71 05       	cpc	r23, r1
    13f0:	61 05       	cpc	r22, r1
    13f2:	08 94       	sec
    13f4:	08 95       	ret

000013f6 <__fp_zero>:
    13f6:	e8 94       	clt

000013f8 <__fp_szero>:
    13f8:	bb 27       	eor	r27, r27
    13fa:	66 27       	eor	r22, r22
    13fc:	77 27       	eor	r23, r23
    13fe:	cb 01       	movw	r24, r22
    1400:	97 f9       	bld	r25, 7
    1402:	08 95       	ret

00001404 <__mulsf3>:
    1404:	0b d0       	rcall	.+22     	; 0x141c <__mulsf3x>
    1406:	c4 cf       	rjmp	.-120    	; 0x1390 <__fp_round>
    1408:	b5 df       	rcall	.-150    	; 0x1374 <__fp_pscA>
    140a:	28 f0       	brcs	.+10     	; 0x1416 <__mulsf3+0x12>
    140c:	ba df       	rcall	.-140    	; 0x1382 <__fp_pscB>
    140e:	18 f0       	brcs	.+6      	; 0x1416 <__mulsf3+0x12>
    1410:	95 23       	and	r25, r21
    1412:	09 f0       	breq	.+2      	; 0x1416 <__mulsf3+0x12>
    1414:	96 cf       	rjmp	.-212    	; 0x1342 <__fp_inf>
    1416:	9b cf       	rjmp	.-202    	; 0x134e <__fp_nan>
    1418:	11 24       	eor	r1, r1
    141a:	ee cf       	rjmp	.-36     	; 0x13f8 <__fp_szero>

0000141c <__mulsf3x>:
    141c:	ca df       	rcall	.-108    	; 0x13b2 <__fp_split3>
    141e:	a0 f3       	brcs	.-24     	; 0x1408 <__mulsf3+0x4>

00001420 <__mulsf3_pse>:
    1420:	95 9f       	mul	r25, r21
    1422:	d1 f3       	breq	.-12     	; 0x1418 <__mulsf3+0x14>
    1424:	95 0f       	add	r25, r21
    1426:	50 e0       	ldi	r21, 0x00	; 0
    1428:	55 1f       	adc	r21, r21
    142a:	62 9f       	mul	r22, r18
    142c:	f0 01       	movw	r30, r0
    142e:	72 9f       	mul	r23, r18
    1430:	bb 27       	eor	r27, r27
    1432:	f0 0d       	add	r31, r0
    1434:	b1 1d       	adc	r27, r1
    1436:	63 9f       	mul	r22, r19
    1438:	aa 27       	eor	r26, r26
    143a:	f0 0d       	add	r31, r0
    143c:	b1 1d       	adc	r27, r1
    143e:	aa 1f       	adc	r26, r26
    1440:	64 9f       	mul	r22, r20
    1442:	66 27       	eor	r22, r22
    1444:	b0 0d       	add	r27, r0
    1446:	a1 1d       	adc	r26, r1
    1448:	66 1f       	adc	r22, r22
    144a:	82 9f       	mul	r24, r18
    144c:	22 27       	eor	r18, r18
    144e:	b0 0d       	add	r27, r0
    1450:	a1 1d       	adc	r26, r1
    1452:	62 1f       	adc	r22, r18
    1454:	73 9f       	mul	r23, r19
    1456:	b0 0d       	add	r27, r0
    1458:	a1 1d       	adc	r26, r1
    145a:	62 1f       	adc	r22, r18
    145c:	83 9f       	mul	r24, r19
    145e:	a0 0d       	add	r26, r0
    1460:	61 1d       	adc	r22, r1
    1462:	22 1f       	adc	r18, r18
    1464:	74 9f       	mul	r23, r20
    1466:	33 27       	eor	r19, r19
    1468:	a0 0d       	add	r26, r0
    146a:	61 1d       	adc	r22, r1
    146c:	23 1f       	adc	r18, r19
    146e:	84 9f       	mul	r24, r20
    1470:	60 0d       	add	r22, r0
    1472:	21 1d       	adc	r18, r1
    1474:	82 2f       	mov	r24, r18
    1476:	76 2f       	mov	r23, r22
    1478:	6a 2f       	mov	r22, r26
    147a:	11 24       	eor	r1, r1
    147c:	9f 57       	subi	r25, 0x7F	; 127
    147e:	50 40       	sbci	r21, 0x00	; 0
    1480:	8a f0       	brmi	.+34     	; 0x14a4 <__mulsf3_pse+0x84>
    1482:	e1 f0       	breq	.+56     	; 0x14bc <__mulsf3_pse+0x9c>
    1484:	88 23       	and	r24, r24
    1486:	4a f0       	brmi	.+18     	; 0x149a <__mulsf3_pse+0x7a>
    1488:	ee 0f       	add	r30, r30
    148a:	ff 1f       	adc	r31, r31
    148c:	bb 1f       	adc	r27, r27
    148e:	66 1f       	adc	r22, r22
    1490:	77 1f       	adc	r23, r23
    1492:	88 1f       	adc	r24, r24
    1494:	91 50       	subi	r25, 0x01	; 1
    1496:	50 40       	sbci	r21, 0x00	; 0
    1498:	a9 f7       	brne	.-22     	; 0x1484 <__mulsf3_pse+0x64>
    149a:	9e 3f       	cpi	r25, 0xFE	; 254
    149c:	51 05       	cpc	r21, r1
    149e:	70 f0       	brcs	.+28     	; 0x14bc <__mulsf3_pse+0x9c>
    14a0:	50 cf       	rjmp	.-352    	; 0x1342 <__fp_inf>
    14a2:	aa cf       	rjmp	.-172    	; 0x13f8 <__fp_szero>
    14a4:	5f 3f       	cpi	r21, 0xFF	; 255
    14a6:	ec f3       	brlt	.-6      	; 0x14a2 <__mulsf3_pse+0x82>
    14a8:	98 3e       	cpi	r25, 0xE8	; 232
    14aa:	dc f3       	brlt	.-10     	; 0x14a2 <__mulsf3_pse+0x82>
    14ac:	86 95       	lsr	r24
    14ae:	77 95       	ror	r23
    14b0:	67 95       	ror	r22
    14b2:	b7 95       	ror	r27
    14b4:	f7 95       	ror	r31
    14b6:	e7 95       	ror	r30
    14b8:	9f 5f       	subi	r25, 0xFF	; 255
    14ba:	c1 f7       	brne	.-16     	; 0x14ac <__mulsf3_pse+0x8c>
    14bc:	fe 2b       	or	r31, r30
    14be:	88 0f       	add	r24, r24
    14c0:	91 1d       	adc	r25, r1
    14c2:	96 95       	lsr	r25
    14c4:	87 95       	ror	r24
    14c6:	97 f9       	bld	r25, 7
    14c8:	08 95       	ret

000014ca <InitializeUARTTimer>:

unsigned long
UARTReceiveSync(UART_NUMBER UARTNumber, PVOID ReceiveValue, unsigned long Length)
{
	return UARTReceive(UARTNumber, ReceiveValue, Length, 0);
}
    14ca:	82 e0       	ldi	r24, 0x02	; 2
    14cc:	84 bd       	out	0x24, r24	; 36
    14ce:	15 bc       	out	0x25, r1	; 37
    14d0:	16 bc       	out	0x26, r1	; 38
    14d2:	17 bc       	out	0x27, r1	; 39
    14d4:	18 bc       	out	0x28, r1	; 40
    14d6:	80 93 6e 00 	sts	0x006E, r24
    14da:	08 95       	ret

000014dc <InitUARTSync>:
    14dc:	cf 93       	push	r28
    14de:	40 93 ef 03 	sts	0x03EF, r20
    14e2:	88 23       	and	r24, r24
    14e4:	19 f0       	breq	.+6      	; 0x14ec <InitUARTSync+0x10>
    14e6:	81 30       	cpi	r24, 0x01	; 1
    14e8:	c9 f0       	breq	.+50     	; 0x151c <InitUARTSync+0x40>
    14ea:	30 c0       	rjmp	.+96     	; 0x154c <InitUARTSync+0x70>
    14ec:	70 93 c5 00 	sts	0x00C5, r23
    14f0:	60 93 c4 00 	sts	0x00C4, r22
    14f4:	88 e9       	ldi	r24, 0x98	; 152
    14f6:	80 93 c1 00 	sts	0x00C1, r24
    14fa:	41 30       	cpi	r20, 0x01	; 1
    14fc:	39 f4       	brne	.+14     	; 0x150c <InitUARTSync+0x30>
    14fe:	86 e0       	ldi	r24, 0x06	; 6
    1500:	80 93 c2 00 	sts	0x00C2, r24
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	80 93 c0 00 	sts	0x00C0, r24
    150a:	03 c0       	rjmp	.+6      	; 0x1512 <InitUARTSync+0x36>
    150c:	86 e0       	ldi	r24, 0x06	; 6
    150e:	80 93 c2 00 	sts	0x00C2, r24
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	80 93 dd 03 	sts	0x03DD, r24
    1518:	c1 e0       	ldi	r28, 0x01	; 1
    151a:	19 c0       	rjmp	.+50     	; 0x154e <InitUARTSync+0x72>
    151c:	70 93 cd 00 	sts	0x00CD, r23
    1520:	60 93 cc 00 	sts	0x00CC, r22
    1524:	88 e9       	ldi	r24, 0x98	; 152
    1526:	80 93 c9 00 	sts	0x00C9, r24
    152a:	41 30       	cpi	r20, 0x01	; 1
    152c:	39 f4       	brne	.+14     	; 0x153c <InitUARTSync+0x60>
    152e:	86 e0       	ldi	r24, 0x06	; 6
    1530:	80 93 ca 00 	sts	0x00CA, r24
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	80 93 c8 00 	sts	0x00C8, r24
    153a:	03 c0       	rjmp	.+6      	; 0x1542 <InitUARTSync+0x66>
    153c:	86 e0       	ldi	r24, 0x06	; 6
    153e:	80 93 ca 00 	sts	0x00CA, r24
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	80 93 de 03 	sts	0x03DE, r24
    1548:	c1 e0       	ldi	r28, 0x01	; 1
    154a:	01 c0       	rjmp	.+2      	; 0x154e <InitUARTSync+0x72>
    154c:	c0 e0       	ldi	r28, 0x00	; 0
    154e:	bd df       	rcall	.-134    	; 0x14ca <InitializeUARTTimer>
    1550:	8c 2f       	mov	r24, r28
    1552:	cf 91       	pop	r28
    1554:	08 95       	ret

00001556 <UARTTransmit>:
    1556:	cf 92       	push	r12
    1558:	df 92       	push	r13
    155a:	ef 92       	push	r14
    155c:	ff 92       	push	r15
    155e:	0f 93       	push	r16
    1560:	1f 93       	push	r17
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
    1566:	6b 01       	movw	r12, r22
    1568:	88 23       	and	r24, r24
    156a:	19 f0       	breq	.+6      	; 0x1572 <UARTTransmit+0x1c>
    156c:	81 30       	cpi	r24, 0x01	; 1
    156e:	c1 f1       	breq	.+112    	; 0x15e0 <UARTTransmit+0x8a>
    1570:	6c c0       	rjmp	.+216    	; 0x164a <UARTTransmit+0xf4>
    1572:	80 91 dd 03 	lds	r24, 0x03DD
    1576:	88 23       	and	r24, r24
    1578:	09 f4       	brne	.+2      	; 0x157c <UARTTransmit+0x26>
    157a:	6b c0       	rjmp	.+214    	; 0x1652 <UARTTransmit+0xfc>
    157c:	21 15       	cp	r18, r1
    157e:	31 05       	cpc	r19, r1
    1580:	41 05       	cpc	r20, r1
    1582:	51 05       	cpc	r21, r1
    1584:	09 f4       	brne	.+2      	; 0x1588 <UARTTransmit+0x32>
    1586:	6c c0       	rjmp	.+216    	; 0x1660 <UARTTransmit+0x10a>
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	dc 01       	movw	r26, r24
    158e:	c0 ec       	ldi	r28, 0xC0	; 192
    1590:	d0 e0       	ldi	r29, 0x00	; 0
    1592:	0f 2e       	mov	r0, r31
    1594:	f1 ec       	ldi	r31, 0xC1	; 193
    1596:	ef 2e       	mov	r14, r31
    1598:	f1 2c       	mov	r15, r1
    159a:	f0 2d       	mov	r31, r0
    159c:	66 ec       	ldi	r22, 0xC6	; 198
    159e:	70 e0       	ldi	r23, 0x00	; 0
    15a0:	18 81       	ld	r17, Y
    15a2:	15 ff       	sbrs	r17, 5
    15a4:	fd cf       	rjmp	.-6      	; 0x15a0 <UARTTransmit+0x4a>
    15a6:	10 91 ef 03 	lds	r17, 0x03EF
    15aa:	11 23       	and	r17, r17
    15ac:	59 f0       	breq	.+22     	; 0x15c4 <UARTTransmit+0x6e>
    15ae:	00 23       	and	r16, r16
    15b0:	29 f0       	breq	.+10     	; 0x15bc <UARTTransmit+0x66>
    15b2:	f7 01       	movw	r30, r14
    15b4:	10 81       	ld	r17, Z
    15b6:	11 60       	ori	r17, 0x01	; 1
    15b8:	10 83       	st	Z, r17
    15ba:	04 c0       	rjmp	.+8      	; 0x15c4 <UARTTransmit+0x6e>
    15bc:	f7 01       	movw	r30, r14
    15be:	10 81       	ld	r17, Z
    15c0:	1e 7f       	andi	r17, 0xFE	; 254
    15c2:	10 83       	st	Z, r17
    15c4:	f6 01       	movw	r30, r12
    15c6:	11 91       	ld	r17, Z+
    15c8:	6f 01       	movw	r12, r30
    15ca:	fb 01       	movw	r30, r22
    15cc:	10 83       	st	Z, r17
    15ce:	01 96       	adiw	r24, 0x01	; 1
    15d0:	a1 1d       	adc	r26, r1
    15d2:	b1 1d       	adc	r27, r1
    15d4:	82 17       	cp	r24, r18
    15d6:	93 07       	cpc	r25, r19
    15d8:	a4 07       	cpc	r26, r20
    15da:	b5 07       	cpc	r27, r21
    15dc:	09 f7       	brne	.-62     	; 0x15a0 <UARTTransmit+0x4a>
    15de:	40 c0       	rjmp	.+128    	; 0x1660 <UARTTransmit+0x10a>
    15e0:	80 91 de 03 	lds	r24, 0x03DE
    15e4:	88 23       	and	r24, r24
    15e6:	c9 f1       	breq	.+114    	; 0x165a <UARTTransmit+0x104>
    15e8:	21 15       	cp	r18, r1
    15ea:	31 05       	cpc	r19, r1
    15ec:	41 05       	cpc	r20, r1
    15ee:	51 05       	cpc	r21, r1
    15f0:	b9 f1       	breq	.+110    	; 0x1660 <UARTTransmit+0x10a>
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	dc 01       	movw	r26, r24
    15f8:	c8 ec       	ldi	r28, 0xC8	; 200
    15fa:	d0 e0       	ldi	r29, 0x00	; 0
    15fc:	0f 2e       	mov	r0, r31
    15fe:	f9 ec       	ldi	r31, 0xC9	; 201
    1600:	ef 2e       	mov	r14, r31
    1602:	f1 2c       	mov	r15, r1
    1604:	f0 2d       	mov	r31, r0
    1606:	6e ec       	ldi	r22, 0xCE	; 206
    1608:	70 e0       	ldi	r23, 0x00	; 0
    160a:	18 81       	ld	r17, Y
    160c:	15 ff       	sbrs	r17, 5
    160e:	fd cf       	rjmp	.-6      	; 0x160a <UARTTransmit+0xb4>
    1610:	10 91 ef 03 	lds	r17, 0x03EF
    1614:	11 23       	and	r17, r17
    1616:	59 f0       	breq	.+22     	; 0x162e <UARTTransmit+0xd8>
    1618:	00 23       	and	r16, r16
    161a:	29 f0       	breq	.+10     	; 0x1626 <UARTTransmit+0xd0>
    161c:	f7 01       	movw	r30, r14
    161e:	10 81       	ld	r17, Z
    1620:	11 60       	ori	r17, 0x01	; 1
    1622:	10 83       	st	Z, r17
    1624:	04 c0       	rjmp	.+8      	; 0x162e <UARTTransmit+0xd8>
    1626:	f7 01       	movw	r30, r14
    1628:	10 81       	ld	r17, Z
    162a:	1e 7f       	andi	r17, 0xFE	; 254
    162c:	10 83       	st	Z, r17
    162e:	f6 01       	movw	r30, r12
    1630:	11 91       	ld	r17, Z+
    1632:	6f 01       	movw	r12, r30
    1634:	fb 01       	movw	r30, r22
    1636:	10 83       	st	Z, r17
    1638:	01 96       	adiw	r24, 0x01	; 1
    163a:	a1 1d       	adc	r26, r1
    163c:	b1 1d       	adc	r27, r1
    163e:	82 17       	cp	r24, r18
    1640:	93 07       	cpc	r25, r19
    1642:	a4 07       	cpc	r26, r20
    1644:	b5 07       	cpc	r27, r21
    1646:	09 f7       	brne	.-62     	; 0x160a <UARTTransmit+0xb4>
    1648:	0b c0       	rjmp	.+22     	; 0x1660 <UARTTransmit+0x10a>
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	a9 01       	movw	r20, r18
    1650:	07 c0       	rjmp	.+14     	; 0x1660 <UARTTransmit+0x10a>
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	a9 01       	movw	r20, r18
    1658:	03 c0       	rjmp	.+6      	; 0x1660 <UARTTransmit+0x10a>
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	a9 01       	movw	r20, r18
    1660:	ca 01       	movw	r24, r20
    1662:	b9 01       	movw	r22, r18
    1664:	df 91       	pop	r29
    1666:	cf 91       	pop	r28
    1668:	1f 91       	pop	r17
    166a:	0f 91       	pop	r16
    166c:	ff 90       	pop	r15
    166e:	ef 90       	pop	r14
    1670:	df 90       	pop	r13
    1672:	cf 90       	pop	r12
    1674:	08 95       	ret

00001676 <UARTTransmitSync>:
    1676:	0f 93       	push	r16
    1678:	00 e0       	ldi	r16, 0x00	; 0
    167a:	6d df       	rcall	.-294    	; 0x1556 <UARTTransmit>
    167c:	0f 91       	pop	r16
    167e:	08 95       	ret

00001680 <__vector_16>:
	return IndexI;

}

ISR(TIMER0_COMPA_vect)
{
    1680:	1f 92       	push	r1
    1682:	0f 92       	push	r0
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	0f 92       	push	r0
    1688:	11 24       	eor	r1, r1
    168a:	8f 93       	push	r24
	gUARTTimerTriggered = TRUE;
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	80 93 f2 03 	sts	0x03F2, r24
}
    1692:	8f 91       	pop	r24
    1694:	0f 90       	pop	r0
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	0f 90       	pop	r0
    169a:	1f 90       	pop	r1
    169c:	18 95       	reti

0000169e <__vector_20>:

ISR(USART0_RX_vect)
{
    169e:	1f 92       	push	r1
    16a0:	0f 92       	push	r0
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	0f 92       	push	r0
    16a6:	11 24       	eor	r1, r1
    16a8:	0b b6       	in	r0, 0x3b	; 59
    16aa:	0f 92       	push	r0
    16ac:	2f 93       	push	r18
    16ae:	3f 93       	push	r19
    16b0:	4f 93       	push	r20
    16b2:	5f 93       	push	r21
    16b4:	6f 93       	push	r22
    16b6:	7f 93       	push	r23
    16b8:	8f 93       	push	r24
    16ba:	9f 93       	push	r25
    16bc:	af 93       	push	r26
    16be:	bf 93       	push	r27
    16c0:	ef 93       	push	r30
    16c2:	ff 93       	push	r31
	if(gRCICallback0 != NULL)
    16c4:	e0 91 e1 03 	lds	r30, 0x03E1
    16c8:	f0 91 e2 03 	lds	r31, 0x03E2
    16cc:	30 97       	sbiw	r30, 0x00	; 0
    16ce:	31 f0       	breq	.+12     	; 0x16dc <__vector_20+0x3e>
	{
		gRCICallback0(UART_ZERO, gRCICallbackContext0);
    16d0:	60 91 ed 03 	lds	r22, 0x03ED
    16d4:	70 91 ee 03 	lds	r23, 0x03EE
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	09 95       	icall
	}
}
    16dc:	ff 91       	pop	r31
    16de:	ef 91       	pop	r30
    16e0:	bf 91       	pop	r27
    16e2:	af 91       	pop	r26
    16e4:	9f 91       	pop	r25
    16e6:	8f 91       	pop	r24
    16e8:	7f 91       	pop	r23
    16ea:	6f 91       	pop	r22
    16ec:	5f 91       	pop	r21
    16ee:	4f 91       	pop	r20
    16f0:	3f 91       	pop	r19
    16f2:	2f 91       	pop	r18
    16f4:	0f 90       	pop	r0
    16f6:	0b be       	out	0x3b, r0	; 59
    16f8:	0f 90       	pop	r0
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	0f 90       	pop	r0
    16fe:	1f 90       	pop	r1
    1700:	18 95       	reti

00001702 <__vector_28>:

ISR(USART1_RX_vect)
{
    1702:	1f 92       	push	r1
    1704:	0f 92       	push	r0
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	0f 92       	push	r0
    170a:	11 24       	eor	r1, r1
    170c:	0b b6       	in	r0, 0x3b	; 59
    170e:	0f 92       	push	r0
    1710:	2f 93       	push	r18
    1712:	3f 93       	push	r19
    1714:	4f 93       	push	r20
    1716:	5f 93       	push	r21
    1718:	6f 93       	push	r22
    171a:	7f 93       	push	r23
    171c:	8f 93       	push	r24
    171e:	9f 93       	push	r25
    1720:	af 93       	push	r26
    1722:	bf 93       	push	r27
    1724:	ef 93       	push	r30
    1726:	ff 93       	push	r31
	if(gRCICallback1 != NULL)
    1728:	e0 91 e7 03 	lds	r30, 0x03E7
    172c:	f0 91 e8 03 	lds	r31, 0x03E8
    1730:	30 97       	sbiw	r30, 0x00	; 0
    1732:	31 f0       	breq	.+12     	; 0x1740 <__vector_28+0x3e>
	{
		gRCICallback1(UART_ONE, gRCICallbackContext1);
    1734:	60 91 e5 03 	lds	r22, 0x03E5
    1738:	70 91 e6 03 	lds	r23, 0x03E6
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	09 95       	icall
	}
}
    1740:	ff 91       	pop	r31
    1742:	ef 91       	pop	r30
    1744:	bf 91       	pop	r27
    1746:	af 91       	pop	r26
    1748:	9f 91       	pop	r25
    174a:	8f 91       	pop	r24
    174c:	7f 91       	pop	r23
    174e:	6f 91       	pop	r22
    1750:	5f 91       	pop	r21
    1752:	4f 91       	pop	r20
    1754:	3f 91       	pop	r19
    1756:	2f 91       	pop	r18
    1758:	0f 90       	pop	r0
    175a:	0b be       	out	0x3b, r0	; 59
    175c:	0f 90       	pop	r0
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	0f 90       	pop	r0
    1762:	1f 90       	pop	r1
    1764:	18 95       	reti

00001766 <__vector_22>:

ISR(USART0_TX_vect)
{
    1766:	1f 92       	push	r1
    1768:	0f 92       	push	r0
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	0f 92       	push	r0
    176e:	11 24       	eor	r1, r1
    1770:	0b b6       	in	r0, 0x3b	; 59
    1772:	0f 92       	push	r0
    1774:	2f 93       	push	r18
    1776:	3f 93       	push	r19
    1778:	4f 93       	push	r20
    177a:	5f 93       	push	r21
    177c:	6f 93       	push	r22
    177e:	7f 93       	push	r23
    1780:	8f 93       	push	r24
    1782:	9f 93       	push	r25
    1784:	af 93       	push	r26
    1786:	bf 93       	push	r27
    1788:	ef 93       	push	r30
    178a:	ff 93       	push	r31
	if(gTCICallback0 != NULL)
    178c:	e0 91 e3 03 	lds	r30, 0x03E3
    1790:	f0 91 e4 03 	lds	r31, 0x03E4
    1794:	30 97       	sbiw	r30, 0x00	; 0
    1796:	31 f0       	breq	.+12     	; 0x17a4 <__vector_22+0x3e>
	{
		gTCICallback0(UART_ZERO, gTCICallbackContext0);
    1798:	60 91 eb 03 	lds	r22, 0x03EB
    179c:	70 91 ec 03 	lds	r23, 0x03EC
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	09 95       	icall
	}
}
    17a4:	ff 91       	pop	r31
    17a6:	ef 91       	pop	r30
    17a8:	bf 91       	pop	r27
    17aa:	af 91       	pop	r26
    17ac:	9f 91       	pop	r25
    17ae:	8f 91       	pop	r24
    17b0:	7f 91       	pop	r23
    17b2:	6f 91       	pop	r22
    17b4:	5f 91       	pop	r21
    17b6:	4f 91       	pop	r20
    17b8:	3f 91       	pop	r19
    17ba:	2f 91       	pop	r18
    17bc:	0f 90       	pop	r0
    17be:	0b be       	out	0x3b, r0	; 59
    17c0:	0f 90       	pop	r0
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	0f 90       	pop	r0
    17c6:	1f 90       	pop	r1
    17c8:	18 95       	reti

000017ca <__vector_30>:

ISR(USART1_TX_vect)
{
    17ca:	1f 92       	push	r1
    17cc:	0f 92       	push	r0
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	0f 92       	push	r0
    17d2:	11 24       	eor	r1, r1
    17d4:	0b b6       	in	r0, 0x3b	; 59
    17d6:	0f 92       	push	r0
    17d8:	2f 93       	push	r18
    17da:	3f 93       	push	r19
    17dc:	4f 93       	push	r20
    17de:	5f 93       	push	r21
    17e0:	6f 93       	push	r22
    17e2:	7f 93       	push	r23
    17e4:	8f 93       	push	r24
    17e6:	9f 93       	push	r25
    17e8:	af 93       	push	r26
    17ea:	bf 93       	push	r27
    17ec:	ef 93       	push	r30
    17ee:	ff 93       	push	r31
	if(gTCICallback1 != NULL)
    17f0:	e0 91 e9 03 	lds	r30, 0x03E9
    17f4:	f0 91 ea 03 	lds	r31, 0x03EA
    17f8:	30 97       	sbiw	r30, 0x00	; 0
    17fa:	31 f0       	breq	.+12     	; 0x1808 <__vector_30+0x3e>
	{
		gTCICallback1(UART_ONE, gTCICallbackContext1);
    17fc:	60 91 f0 03 	lds	r22, 0x03F0
    1800:	70 91 f1 03 	lds	r23, 0x03F1
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	09 95       	icall
	}
    1808:	ff 91       	pop	r31
    180a:	ef 91       	pop	r30
    180c:	bf 91       	pop	r27
    180e:	af 91       	pop	r26
    1810:	9f 91       	pop	r25
    1812:	8f 91       	pop	r24
    1814:	7f 91       	pop	r23
    1816:	6f 91       	pop	r22
    1818:	5f 91       	pop	r21
    181a:	4f 91       	pop	r20
    181c:	3f 91       	pop	r19
    181e:	2f 91       	pop	r18
    1820:	0f 90       	pop	r0
    1822:	0b be       	out	0x3b, r0	; 59
    1824:	0f 90       	pop	r0
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	0f 90       	pop	r0
    182a:	1f 90       	pop	r1
    182c:	18 95       	reti

0000182e <__tablejump2__>:
    182e:	ee 0f       	add	r30, r30
    1830:	ff 1f       	adc	r31, r31

00001832 <__tablejump__>:
    1832:	05 90       	lpm	r0, Z+
    1834:	f4 91       	lpm	r31, Z
    1836:	e0 2d       	mov	r30, r0
    1838:	09 94       	ijmp

0000183a <__moddi3>:
    183a:	68 94       	set
    183c:	01 c0       	rjmp	.+2      	; 0x1840 <__divdi3_moddi3>

0000183e <__divdi3>:
    183e:	e8 94       	clt

00001840 <__divdi3_moddi3>:
    1840:	f9 2f       	mov	r31, r25
    1842:	f1 2b       	or	r31, r17
    1844:	0a f0       	brmi	.+2      	; 0x1848 <__divdi3_moddi3+0x8>
    1846:	27 c0       	rjmp	.+78     	; 0x1896 <__udivdi3_umoddi3>
    1848:	a0 e0       	ldi	r26, 0x00	; 0
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e9 e2       	ldi	r30, 0x29	; 41
    184e:	fc e0       	ldi	r31, 0x0C	; 12
    1850:	93 c0       	rjmp	.+294    	; 0x1978 <__prologue_saves__+0xc>
    1852:	09 2e       	mov	r0, r25
    1854:	05 94       	asr	r0
    1856:	1a f4       	brpl	.+6      	; 0x185e <__divdi3_moddi3+0x1e>
    1858:	79 d0       	rcall	.+242    	; 0x194c <__negdi2>
    185a:	11 23       	and	r17, r17
    185c:	92 f4       	brpl	.+36     	; 0x1882 <__divdi3_moddi3+0x42>
    185e:	f0 e8       	ldi	r31, 0x80	; 128
    1860:	0f 26       	eor	r0, r31
    1862:	ff ef       	ldi	r31, 0xFF	; 255
    1864:	e0 94       	com	r14
    1866:	f0 94       	com	r15
    1868:	00 95       	com	r16
    186a:	10 95       	com	r17
    186c:	b0 94       	com	r11
    186e:	c0 94       	com	r12
    1870:	d0 94       	com	r13
    1872:	a1 94       	neg	r10
    1874:	bf 0a       	sbc	r11, r31
    1876:	cf 0a       	sbc	r12, r31
    1878:	df 0a       	sbc	r13, r31
    187a:	ef 0a       	sbc	r14, r31
    187c:	ff 0a       	sbc	r15, r31
    187e:	0f 0b       	sbc	r16, r31
    1880:	1f 0b       	sbc	r17, r31
    1882:	13 d0       	rcall	.+38     	; 0x18aa <__udivmod64>
    1884:	07 fc       	sbrc	r0, 7
    1886:	62 d0       	rcall	.+196    	; 0x194c <__negdi2>
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	ec e0       	ldi	r30, 0x0C	; 12
    188e:	90 c0       	rjmp	.+288    	; 0x19b0 <__epilogue_restores__+0xc>

00001890 <__umoddi3>:
    1890:	68 94       	set
    1892:	01 c0       	rjmp	.+2      	; 0x1896 <__udivdi3_umoddi3>

00001894 <__udivdi3>:
    1894:	e8 94       	clt

00001896 <__udivdi3_umoddi3>:
    1896:	8f 92       	push	r8
    1898:	9f 92       	push	r9
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	05 d0       	rcall	.+10     	; 0x18aa <__udivmod64>
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	9f 90       	pop	r9
    18a6:	8f 90       	pop	r8
    18a8:	08 95       	ret

000018aa <__udivmod64>:
    18aa:	88 24       	eor	r8, r8
    18ac:	99 24       	eor	r9, r9
    18ae:	f4 01       	movw	r30, r8
    18b0:	e4 01       	movw	r28, r8
    18b2:	b0 e4       	ldi	r27, 0x40	; 64
    18b4:	9f 93       	push	r25
    18b6:	aa 27       	eor	r26, r26
    18b8:	9a 15       	cp	r25, r10
    18ba:	8b 04       	cpc	r8, r11
    18bc:	9c 04       	cpc	r9, r12
    18be:	ed 05       	cpc	r30, r13
    18c0:	fe 05       	cpc	r31, r14
    18c2:	cf 05       	cpc	r28, r15
    18c4:	d0 07       	cpc	r29, r16
    18c6:	a1 07       	cpc	r26, r17
    18c8:	98 f4       	brcc	.+38     	; 0x18f0 <__udivmod64+0x46>
    18ca:	ad 2f       	mov	r26, r29
    18cc:	dc 2f       	mov	r29, r28
    18ce:	cf 2f       	mov	r28, r31
    18d0:	fe 2f       	mov	r31, r30
    18d2:	e9 2d       	mov	r30, r9
    18d4:	98 2c       	mov	r9, r8
    18d6:	89 2e       	mov	r8, r25
    18d8:	98 2f       	mov	r25, r24
    18da:	87 2f       	mov	r24, r23
    18dc:	76 2f       	mov	r23, r22
    18de:	65 2f       	mov	r22, r21
    18e0:	54 2f       	mov	r21, r20
    18e2:	43 2f       	mov	r20, r19
    18e4:	32 2f       	mov	r19, r18
    18e6:	22 27       	eor	r18, r18
    18e8:	b8 50       	subi	r27, 0x08	; 8
    18ea:	31 f7       	brne	.-52     	; 0x18b8 <__udivmod64+0xe>
    18ec:	bf 91       	pop	r27
    18ee:	27 c0       	rjmp	.+78     	; 0x193e <__udivmod64+0x94>
    18f0:	1b 2e       	mov	r1, r27
    18f2:	bf 91       	pop	r27
    18f4:	bb 27       	eor	r27, r27
    18f6:	22 0f       	add	r18, r18
    18f8:	33 1f       	adc	r19, r19
    18fa:	44 1f       	adc	r20, r20
    18fc:	55 1f       	adc	r21, r21
    18fe:	66 1f       	adc	r22, r22
    1900:	77 1f       	adc	r23, r23
    1902:	88 1f       	adc	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	88 1c       	adc	r8, r8
    1908:	99 1c       	adc	r9, r9
    190a:	ee 1f       	adc	r30, r30
    190c:	ff 1f       	adc	r31, r31
    190e:	cc 1f       	adc	r28, r28
    1910:	dd 1f       	adc	r29, r29
    1912:	aa 1f       	adc	r26, r26
    1914:	bb 1f       	adc	r27, r27
    1916:	8a 14       	cp	r8, r10
    1918:	9b 04       	cpc	r9, r11
    191a:	ec 05       	cpc	r30, r12
    191c:	fd 05       	cpc	r31, r13
    191e:	ce 05       	cpc	r28, r14
    1920:	df 05       	cpc	r29, r15
    1922:	a0 07       	cpc	r26, r16
    1924:	b1 07       	cpc	r27, r17
    1926:	48 f0       	brcs	.+18     	; 0x193a <__udivmod64+0x90>
    1928:	8a 18       	sub	r8, r10
    192a:	9b 08       	sbc	r9, r11
    192c:	ec 09       	sbc	r30, r12
    192e:	fd 09       	sbc	r31, r13
    1930:	ce 09       	sbc	r28, r14
    1932:	df 09       	sbc	r29, r15
    1934:	a0 0b       	sbc	r26, r16
    1936:	b1 0b       	sbc	r27, r17
    1938:	21 60       	ori	r18, 0x01	; 1
    193a:	1a 94       	dec	r1
    193c:	e1 f6       	brne	.-72     	; 0x18f6 <__udivmod64+0x4c>
    193e:	2e f4       	brtc	.+10     	; 0x194a <__udivmod64+0xa0>
    1940:	94 01       	movw	r18, r8
    1942:	af 01       	movw	r20, r30
    1944:	be 01       	movw	r22, r28
    1946:	cd 01       	movw	r24, r26
    1948:	00 0c       	add	r0, r0
    194a:	08 95       	ret

0000194c <__negdi2>:
    194c:	60 95       	com	r22
    194e:	70 95       	com	r23
    1950:	80 95       	com	r24
    1952:	90 95       	com	r25
    1954:	30 95       	com	r19
    1956:	40 95       	com	r20
    1958:	50 95       	com	r21
    195a:	21 95       	neg	r18
    195c:	3f 4f       	sbci	r19, 0xFF	; 255
    195e:	4f 4f       	sbci	r20, 0xFF	; 255
    1960:	5f 4f       	sbci	r21, 0xFF	; 255
    1962:	6f 4f       	sbci	r22, 0xFF	; 255
    1964:	7f 4f       	sbci	r23, 0xFF	; 255
    1966:	8f 4f       	sbci	r24, 0xFF	; 255
    1968:	9f 4f       	sbci	r25, 0xFF	; 255
    196a:	08 95       	ret

0000196c <__prologue_saves__>:
    196c:	2f 92       	push	r2
    196e:	3f 92       	push	r3
    1970:	4f 92       	push	r4
    1972:	5f 92       	push	r5
    1974:	6f 92       	push	r6
    1976:	7f 92       	push	r7
    1978:	8f 92       	push	r8
    197a:	9f 92       	push	r9
    197c:	af 92       	push	r10
    197e:	bf 92       	push	r11
    1980:	cf 92       	push	r12
    1982:	df 92       	push	r13
    1984:	ef 92       	push	r14
    1986:	ff 92       	push	r15
    1988:	0f 93       	push	r16
    198a:	1f 93       	push	r17
    198c:	cf 93       	push	r28
    198e:	df 93       	push	r29
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    1994:	ca 1b       	sub	r28, r26
    1996:	db 0b       	sbc	r29, r27
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	cd bf       	out	0x3d, r28	; 61
    19a2:	09 94       	ijmp

000019a4 <__epilogue_restores__>:
    19a4:	2a 88       	ldd	r2, Y+18	; 0x12
    19a6:	39 88       	ldd	r3, Y+17	; 0x11
    19a8:	48 88       	ldd	r4, Y+16	; 0x10
    19aa:	5f 84       	ldd	r5, Y+15	; 0x0f
    19ac:	6e 84       	ldd	r6, Y+14	; 0x0e
    19ae:	7d 84       	ldd	r7, Y+13	; 0x0d
    19b0:	8c 84       	ldd	r8, Y+12	; 0x0c
    19b2:	9b 84       	ldd	r9, Y+11	; 0x0b
    19b4:	aa 84       	ldd	r10, Y+10	; 0x0a
    19b6:	b9 84       	ldd	r11, Y+9	; 0x09
    19b8:	c8 84       	ldd	r12, Y+8	; 0x08
    19ba:	df 80       	ldd	r13, Y+7	; 0x07
    19bc:	ee 80       	ldd	r14, Y+6	; 0x06
    19be:	fd 80       	ldd	r15, Y+5	; 0x05
    19c0:	0c 81       	ldd	r16, Y+4	; 0x04
    19c2:	1b 81       	ldd	r17, Y+3	; 0x03
    19c4:	aa 81       	ldd	r26, Y+2	; 0x02
    19c6:	b9 81       	ldd	r27, Y+1	; 0x01
    19c8:	ce 0f       	add	r28, r30
    19ca:	d1 1d       	adc	r29, r1
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	f8 94       	cli
    19d0:	de bf       	out	0x3e, r29	; 62
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	cd bf       	out	0x3d, r28	; 61
    19d6:	ed 01       	movw	r28, r26
    19d8:	08 95       	ret

000019da <__ashrdi3>:
    19da:	97 fb       	bst	r25, 7
    19dc:	10 f8       	bld	r1, 0

000019de <__lshrdi3>:
    19de:	16 94       	lsr	r1
    19e0:	00 08       	sbc	r0, r0
    19e2:	0f 93       	push	r16
    19e4:	08 30       	cpi	r16, 0x08	; 8
    19e6:	98 f0       	brcs	.+38     	; 0x1a0e <__lshrdi3+0x30>
    19e8:	08 50       	subi	r16, 0x08	; 8
    19ea:	23 2f       	mov	r18, r19
    19ec:	34 2f       	mov	r19, r20
    19ee:	45 2f       	mov	r20, r21
    19f0:	56 2f       	mov	r21, r22
    19f2:	67 2f       	mov	r22, r23
    19f4:	78 2f       	mov	r23, r24
    19f6:	89 2f       	mov	r24, r25
    19f8:	90 2d       	mov	r25, r0
    19fa:	f4 cf       	rjmp	.-24     	; 0x19e4 <__lshrdi3+0x6>
    19fc:	05 94       	asr	r0
    19fe:	97 95       	ror	r25
    1a00:	87 95       	ror	r24
    1a02:	77 95       	ror	r23
    1a04:	67 95       	ror	r22
    1a06:	57 95       	ror	r21
    1a08:	47 95       	ror	r20
    1a0a:	37 95       	ror	r19
    1a0c:	27 95       	ror	r18
    1a0e:	0a 95       	dec	r16
    1a10:	aa f7       	brpl	.-22     	; 0x19fc <__lshrdi3+0x1e>
    1a12:	0f 91       	pop	r16
    1a14:	08 95       	ret

00001a16 <__cmpdi2_s8>:
    1a16:	00 24       	eor	r0, r0
    1a18:	a7 fd       	sbrc	r26, 7
    1a1a:	00 94       	com	r0
    1a1c:	2a 17       	cp	r18, r26
    1a1e:	30 05       	cpc	r19, r0
    1a20:	40 05       	cpc	r20, r0
    1a22:	50 05       	cpc	r21, r0
    1a24:	60 05       	cpc	r22, r0
    1a26:	70 05       	cpc	r23, r0
    1a28:	80 05       	cpc	r24, r0
    1a2a:	90 05       	cpc	r25, r0
    1a2c:	08 95       	ret

00001a2e <_exit>:
    1a2e:	f8 94       	cli

00001a30 <__stop_program>:
    1a30:	ff cf       	rjmp	.-2      	; 0x1a30 <__stop_program>
